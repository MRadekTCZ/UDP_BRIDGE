
UDP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f19c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fa0  0800f43c  0800f43c  0001f43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123dc  080123dc  00030094  2**0
                  CONTENTS
  4 .ARM          00000000  080123dc  080123dc  00030094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080123dc  080123dc  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123dc  080123dc  000223dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080123e0  080123e0  000223e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  24000000  080123e4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ccc  24000094  08012478  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24007d60  08012478  00037d60  2**0
                  ALLOC
 11 .lwip_sec     00000260  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ce96  00000000  00000000  00030105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050c0  00000000  00000000  0004cf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001498  00000000  00000000  00052060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001042  00000000  00000000  000534f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00044edb  00000000  00000000  0005453a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000255b8  00000000  00000000  00099415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00189672  00000000  00000000  000be9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ab8  00000000  00000000  00248040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0024daf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f424 	.word	0x0800f424

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0800f424 	.word	0x0800f424

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000
 80004ac:	00000000 	.word	0x00000000

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b6:	4b60      	ldr	r3, [pc, #384]	; (8000638 <main+0x188>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d11b      	bne.n	80004fa <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004c2:	f3bf 8f4f 	dsb	sy
}
 80004c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c8:	f3bf 8f6f 	isb	sy
}
 80004cc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004ce:	4b5a      	ldr	r3, [pc, #360]	; (8000638 <main+0x188>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004d6:	f3bf 8f4f 	dsb	sy
}
 80004da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004dc:	f3bf 8f6f 	isb	sy
}
 80004e0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004e2:	4b55      	ldr	r3, [pc, #340]	; (8000638 <main+0x188>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a54      	ldr	r2, [pc, #336]	; (8000638 <main+0x188>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ee:	f3bf 8f4f 	dsb	sy
}
 80004f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004f4:	f3bf 8f6f 	isb	sy
}
 80004f8:	e000      	b.n	80004fc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004fc:	4b4e      	ldr	r3, [pc, #312]	; (8000638 <main+0x188>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000504:	2b00      	cmp	r3, #0
 8000506:	d138      	bne.n	800057a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000508:	4b4b      	ldr	r3, [pc, #300]	; (8000638 <main+0x188>)
 800050a:	2200      	movs	r2, #0
 800050c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000516:	4b48      	ldr	r3, [pc, #288]	; (8000638 <main+0x188>)
 8000518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800051c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	0b5b      	lsrs	r3, r3, #13
 8000522:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000526:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	08db      	lsrs	r3, r3, #3
 800052c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000530:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	015a      	lsls	r2, r3, #5
 8000536:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800053a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000540:	493d      	ldr	r1, [pc, #244]	; (8000638 <main+0x188>)
 8000542:	4313      	orrs	r3, r2
 8000544:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	60ba      	str	r2, [r7, #8]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1ef      	bne.n	8000532 <main+0x82>
    } while(sets-- != 0U);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	1e5a      	subs	r2, r3, #1
 8000556:	60fa      	str	r2, [r7, #12]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1e5      	bne.n	8000528 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000562:	4b35      	ldr	r3, [pc, #212]	; (8000638 <main+0x188>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a34      	ldr	r2, [pc, #208]	; (8000638 <main+0x188>)
 8000568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800056c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056e:	f3bf 8f4f 	dsb	sy
}
 8000572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000574:	f3bf 8f6f 	isb	sy
}
 8000578:	e000      	b.n	800057c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800057a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800057c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000580:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000582:	bf00      	nop
 8000584:	4b2d      	ldr	r3, [pc, #180]	; (800063c <main+0x18c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d004      	beq.n	800059a <main+0xea>
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	1e5a      	subs	r2, r3, #1
 8000594:	617a      	str	r2, [r7, #20]
 8000596:	2b00      	cmp	r3, #0
 8000598:	dcf4      	bgt.n	8000584 <main+0xd4>
  if ( timeout < 0 )
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b00      	cmp	r3, #0
 800059e:	da01      	bge.n	80005a4 <main+0xf4>
  {
  Error_Handler();
 80005a0:	f000 f98e 	bl	80008c0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fc3a 	bl	8000e1c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005a8:	f000 f95a 	bl	8000860 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f84c 	bl	8000648 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <main+0x18c>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	4a21      	ldr	r2, [pc, #132]	; (800063c <main+0x18c>)
 80005b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <main+0x18c>)
 80005c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f002 fba6 	bl	8002d20 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005d4:	2100      	movs	r1, #0
 80005d6:	2000      	movs	r0, #0
 80005d8:	f002 fbbc 	bl	8002d54 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80005dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005e2:	bf00      	nop
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <main+0x18c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d104      	bne.n	80005fa <main+0x14a>
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	617a      	str	r2, [r7, #20]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dcf4      	bgt.n	80005e4 <main+0x134>
if ( timeout < 0 )
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0x154>
{
Error_Handler();
 8000600:	f000 f95e 	bl	80008c0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f89a 	bl	800073c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000608:	f003 fbcc 	bl	8003da4 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  iinf = iinf+ 0.0001;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main+0x190>)
 800060e:	ed93 7b00 	vldr	d7, [r3]
 8000612:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8000630 <main+0x180>
 8000616:	ee37 7b06 	vadd.f64	d7, d7, d6
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <main+0x190>)
 800061c:	ed83 7b00 	vstr	d7, [r3]
	  ethernetif_input(&gnetif);
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <main+0x194>)
 8000622:	f003 fe2d 	bl	8004280 <ethernetif_input>
	  sys_check_timeouts();
 8000626:	f00d fcef 	bl	800e008 <sys_check_timeouts>
	  iinf = iinf+ 0.0001;
 800062a:	e7ef      	b.n	800060c <main+0x15c>
 800062c:	f3af 8000 	nop.w
 8000630:	eb1c432d 	.word	0xeb1c432d
 8000634:	3f1a36e2 	.word	0x3f1a36e2
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	58024400 	.word	0x58024400
 8000640:	24000008 	.word	0x24000008
 8000644:	240000b8 	.word	0x240000b8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	224c      	movs	r2, #76	; 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00e f837 	bl	800e6ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00e f831 	bl	800e6ca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000668:	2004      	movs	r0, #4
 800066a:	f002 fb87 	bl	8002d7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <SystemClock_Config+0xec>)
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <SystemClock_Config+0xec>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <SystemClock_Config+0xec>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xf0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemClock_Config+0xf0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xf0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xf0>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006c2:	2305      	movs	r3, #5
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fba2 	bl	8002e30 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f2:	f000 f8e5 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f002 ffe1 	bl	80036e4 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000728:	f000 f8ca 	bl	80008c0 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	; 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58000400 	.word	0x58000400
 8000738:	58024800 	.word	0x58024800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	4b40      	ldr	r3, [pc, #256]	; (8000854 <MX_GPIO_Init+0x118>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <MX_GPIO_Init+0x118>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000762:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <MX_GPIO_Init+0x118>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	f003 0310 	and.w	r3, r3, #16
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <MX_GPIO_Init+0x118>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	4a37      	ldr	r2, [pc, #220]	; (8000854 <MX_GPIO_Init+0x118>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <MX_GPIO_Init+0x118>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_GPIO_Init+0x118>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <MX_GPIO_Init+0x118>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_GPIO_Init+0x118>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_GPIO_Init+0x118>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	4a28      	ldr	r2, [pc, #160]	; (8000854 <MX_GPIO_Init+0x118>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <MX_GPIO_Init+0x118>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_GPIO_Init+0x118>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_GPIO_Init+0x118>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0x118>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_GPIO_Init+0x118>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	4a19      	ldr	r2, [pc, #100]	; (8000854 <MX_GPIO_Init+0x118>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_GPIO_Init+0x118>)
 80007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000818:	2307      	movs	r3, #7
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_GPIO_Init+0x11c>)
 8000824:	f002 f8cc 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000828:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800083a:	230a      	movs	r3, #10
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_GPIO_Init+0x120>)
 8000846:	f002 f8bb 	bl	80029c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	; 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	58024400 	.word	0x58024400
 8000858:	58020c00 	.word	0x58020c00
 800085c:	58020000 	.word	0x58020000

08000860 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000872:	f000 fc69 	bl	8001148 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800087a:	2300      	movs	r3, #0
 800087c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800087e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000882:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000884:	230e      	movs	r3, #14
 8000886:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000888:	2300      	movs	r3, #0
 800088a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800088c:	2301      	movs	r3, #1
 800088e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000890:	2303      	movs	r3, #3
 8000892:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000894:	2301      	movs	r3, #1
 8000896:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000898:	2301      	movs	r3, #1
 800089a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a4:	463b      	mov	r3, r7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fc86 	bl	80011b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008ac:	2004      	movs	r0, #4
 80008ae:	f000 fc63 	bl	8001178 <HAL_MPU_Enable>

}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	0000      	movs	r0, r0
 80008bc:	0000      	movs	r0, r0
	...

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  iinf = iinf+ 0.0001;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <Error_Handler+0x28>)
 80008ca:	ed93 7b00 	vldr	d7, [r3]
 80008ce:	ed9f 6b04 	vldr	d6, [pc, #16]	; 80008e0 <Error_Handler+0x20>
 80008d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <Error_Handler+0x28>)
 80008d8:	ed83 7b00 	vstr	d7, [r3]
 80008dc:	e7f4      	b.n	80008c8 <Error_Handler+0x8>
 80008de:	bf00      	nop
 80008e0:	eb1c432d 	.word	0xeb1c432d
 80008e4:	3f1a36e2 	.word	0x3f1a36e2
 80008e8:	24000008 	.word	0x24000008

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_MspInit+0x30>)
 80008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008f8:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x30>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x30>)
 8000904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58024400 	.word	0x58024400

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 fac8 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return 1;
 8000978:	2301      	movs	r3, #1
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_kill>:

int _kill(int pid, int sig)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <_kill+0x20>)
 8000990:	2216      	movs	r2, #22
 8000992:	601a      	str	r2, [r3, #0]
  return -1;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	24007d50 	.word	0x24007d50

080009a8 <_exit>:

void _exit (int status)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ffe5 	bl	8000984 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009ba:	e7fe      	b.n	80009ba <_exit+0x12>

080009bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e00a      	b.n	80009e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ce:	f3af 8000 	nop.w
 80009d2:	4601      	mov	r1, r0
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbf0      	blt.n	80009ce <_read+0x12>
  }

  return len;
 80009ec:	687b      	ldr	r3, [r7, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e009      	b.n	8000a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf1      	blt.n	8000a08 <_write+0x12>
  }
  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_close>:

int _close(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a56:	605a      	str	r2, [r3, #4]
  return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_isatty>:

int _isatty(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d205      	bcs.n	8000ad4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <_sbrk+0x6c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	24080000 	.word	0x24080000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	240000b0 	.word	0x240000b0
 8000b00:	24007d60 	.word	0x24007d60
 8000b04:	24007d50 	.word	0x24007d50

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fc38 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f00d fe17 	bl	800e768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fcb9 	bl	80004b0 <main>
  bx  lr
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b48:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8000b4c:	080123e4 	.word	0x080123e4
  ldr r2, =_sbss
 8000b50:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8000b54:	24007d60 	.word	0x24007d60

08000b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC3_IRQHandler>

08000b5a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <LAN8742_RegisterBusIO+0x28>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <LAN8742_RegisterBusIO+0x28>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <LAN8742_RegisterBusIO+0x28>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e014      	b.n	8000bb2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d17c      	bne.n	8000cd8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2220      	movs	r2, #32
 8000bf0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e01c      	b.n	8000c32 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	2112      	movs	r1, #18
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	4798      	blx	r3
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	da03      	bge.n	8000c14 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c0c:	f06f 0304 	mvn.w	r3, #4
 8000c10:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000c12:	e00b      	b.n	8000c2c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d105      	bne.n	8000c2c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
         break;
 8000c2a:	e005      	b.n	8000c38 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2b1f      	cmp	r3, #31
 8000c36:	d9df      	bls.n	8000bf8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b1f      	cmp	r3, #31
 8000c3e:	d902      	bls.n	8000c46 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c40:	f06f 0302 	mvn.w	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d145      	bne.n	8000cd8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6810      	ldr	r0, [r2, #0]
 8000c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db37      	blt.n	8000cd2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6810      	ldr	r0, [r2, #0]
 8000c6a:	f107 0208 	add.w	r2, r7, #8
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4798      	blx	r3
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db28      	blt.n	8000cca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4798      	blx	r3
 8000c7e:	4603      	mov	r3, r0
 8000c80:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c82:	e01c      	b.n	8000cbe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4798      	blx	r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c96:	d80e      	bhi.n	8000cb6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6810      	ldr	r0, [r2, #0]
 8000ca0:	f107 0208 	add.w	r2, r7, #8
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4798      	blx	r3
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da07      	bge.n	8000cbe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000cae:	f06f 0304 	mvn.w	r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
                 break;
 8000cb4:	e010      	b.n	8000cd8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000cb6:	f06f 0301 	mvn.w	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
               break;
 8000cbc:	e00c      	b.n	8000cd8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1dd      	bne.n	8000c84 <LAN8742_Init+0xc6>
 8000cc8:	e006      	b.n	8000cd8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000cca:	f06f 0304 	mvn.w	r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e002      	b.n	8000cd8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000cd2:	f06f 0303 	mvn.w	r3, #3
 8000cd6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d112      	bne.n	8000d04 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4798      	blx	r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ce8:	bf00      	nop
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4798      	blx	r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cfc:	d9f5      	bls.n	8000cea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000d04:	693b      	ldr	r3, [r7, #16]
 }
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6810      	ldr	r0, [r2, #0]
 8000d22:	f107 020c 	add.w	r2, r7, #12
 8000d26:	2101      	movs	r1, #1
 8000d28:	4798      	blx	r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da02      	bge.n	8000d36 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d30:	f06f 0304 	mvn.w	r3, #4
 8000d34:	e06e      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6810      	ldr	r0, [r2, #0]
 8000d3e:	f107 020c 	add.w	r2, r7, #12
 8000d42:	2101      	movs	r1, #1
 8000d44:	4798      	blx	r3
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da02      	bge.n	8000d52 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d4c:	f06f 0304 	mvn.w	r3, #4
 8000d50:	e060      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e059      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6810      	ldr	r0, [r2, #0]
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4798      	blx	r3
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da02      	bge.n	8000d7c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d76:	f06f 0304 	mvn.w	r3, #4
 8000d7a:	e04b      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11b      	bne.n	8000dbe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <LAN8742_GetLinkState+0x90>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e03a      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e033      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000db6:	2304      	movs	r3, #4
 8000db8:	e02c      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e02a      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6810      	ldr	r0, [r2, #0]
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	211f      	movs	r1, #31
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da02      	bge.n	8000dda <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dd4:	f06f 0304 	mvn.w	r3, #4
 8000dd8:	e01c      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000de4:	2306      	movs	r3, #6
 8000de6:	e015      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 031c 	and.w	r3, r3, #28
 8000dee:	2b18      	cmp	r3, #24
 8000df0:	d101      	bne.n	8000df6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000df2:	2302      	movs	r3, #2
 8000df4:	e00e      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f003 031c 	and.w	r3, r3, #28
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d101      	bne.n	8000e04 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e007      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 031c 	and.w	r3, r3, #28
 8000e0a:	2b14      	cmp	r3, #20
 8000e0c:	d101      	bne.n	8000e12 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e000      	b.n	8000e14 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e12:	2305      	movs	r3, #5
    }				
  }
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e22:	2003      	movs	r0, #3
 8000e24:	f000 f95e 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e28:	f002 fe12 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_Init+0x68>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	4913      	ldr	r1, [pc, #76]	; (8000e88 <HAL_Init+0x6c>)
 8000e3a:	5ccb      	ldrb	r3, [r1, r3]
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa22 f303 	lsr.w	r3, r2, r3
 8000e44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_Init+0x68>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_Init+0x6c>)
 8000e50:	5cd3      	ldrb	r3, [r2, r3]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_Init+0x70>)
 8000e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_Init+0x74>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f814 	bl	8000e94 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e002      	b.n	8000e7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e76:	f7ff fd39 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400
 8000e88:	080121fc 	.word	0x080121fc
 8000e8c:	24000004 	.word	0x24000004
 8000e90:	24000000 	.word	0x24000000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_InitTick+0x60>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e021      	b.n	8000eec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_InitTick+0x64>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_InitTick+0x60>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f935 	bl	800112e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90d 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x68>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000014 	.word	0x24000014
 8000ef8:	24000000 	.word	0x24000000
 8000efc:	24000010 	.word	0x24000010

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	24000014 	.word	0x24000014
 8000f24:	240000b4 	.word	0x240000b4

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	240000b4 	.word	0x240000b4

08000f40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetREVID+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0c1b      	lsrs	r3, r3, #16
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	5c001000 	.word	0x5c001000

08000f58 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	58000400 	.word	0x58000400

08000f80 <__NVIC_SetPriorityGrouping>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	05fa0000 	.word	0x05fa0000

08000fc8 <__NVIC_GetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff47 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb2 	bl	80010a0 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800114c:	f3bf 8f5f 	dmb	sy
}
 8001150:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_MPU_Disable+0x28>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_MPU_Disable+0x28>)
 8001158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_MPU_Disable+0x2c>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	e000ed90 	.word	0xe000ed90

08001178 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_MPU_Enable+0x38>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MPU_Enable+0x3c>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_MPU_Enable+0x3c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001196:	f3bf 8f4f 	dsb	sy
}
 800119a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800119c:	f3bf 8f6f 	isb	sy
}
 80011a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed90 	.word	0xe000ed90
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	785a      	ldrb	r2, [r3, #1]
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 80011c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d029      	beq.n	8001224 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7adb      	ldrb	r3, [r3, #11]
 80011e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7a9b      	ldrb	r3, [r3, #10]
 80011ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7b5b      	ldrb	r3, [r3, #13]
 80011f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
 80011fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7bdb      	ldrb	r3, [r3, #15]
 8001202:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001204:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7a5b      	ldrb	r3, [r3, #9]
 800120a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800120c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a1b      	ldrb	r3, [r3, #8]
 8001212:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001214:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800121e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001220:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001222:	e005      	b.n	8001230 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed90 	.word	0xe000ed90

08001240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e0cf      	b.n	80013f2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2223      	movs	r2, #35	; 0x23
 8001260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f003 f87b 	bl	8004360 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b64      	ldr	r3, [pc, #400]	; (80013fc <HAL_ETH_Init+0x1bc>)
 800126c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001270:	4a62      	ldr	r2, [pc, #392]	; (80013fc <HAL_ETH_Init+0x1bc>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800127a:	4b60      	ldr	r3, [pc, #384]	; (80013fc <HAL_ETH_Init+0x1bc>)
 800127c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7a1b      	ldrb	r3, [r3, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d103      	bne.n	8001298 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe61 	bl	8000f58 <HAL_SYSCFG_ETHInterfaceSelect>
 8001296:	e003      	b.n	80012a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001298:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800129c:	f7ff fe5c 	bl	8000f58 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80012a0:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_ETH_Init+0x1c0>)
 80012a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012bc:	f7ff fe34 	bl	8000f28 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012c2:	e011      	b.n	80012e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012c4:	f7ff fe30 	bl	8000f28 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012d2:	d909      	bls.n	80012e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	22e0      	movs	r2, #224	; 0xe0
 80012e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e084      	b.n	80013f2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e4      	bne.n	80012c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fd94 	bl	8001e28 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001300:	f002 fd20 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8001304:	4603      	mov	r3, r0
 8001306:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <HAL_ETH_Init+0x1c4>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	0c9a      	lsrs	r2, r3, #18
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3a01      	subs	r2, #1
 8001314:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 ff7f 	bl	800221c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001326:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800132a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800133a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22e0      	movs	r2, #224	; 0xe0
 8001356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e049      	b.n	80013f2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001366:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_ETH_Init+0x1c8>)
 800136c:	4013      	ands	r3, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6952      	ldr	r2, [r2, #20]
 8001372:	0051      	lsls	r1, r2, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	430b      	orrs	r3, r1
 800137a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800137e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 ffe7 	bl	8002356 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f001 f82d 	bl	80023e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	3305      	adds	r3, #5
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021a      	lsls	r2, r3, #8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	3304      	adds	r3, #4
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	3303      	adds	r3, #3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	061a      	lsls	r2, r3, #24
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	3302      	adds	r3, #2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2210      	movs	r2, #16
 80013ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024400 	.word	0x58024400
 8001400:	58000400 	.word	0x58000400
 8001404:	431bde83 	.word	0x431bde83
 8001408:	ffff8001 	.word	0xffff8001

0800140c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800141a:	2b10      	cmp	r3, #16
 800141c:	d153      	bne.n	80014c6 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2223      	movs	r2, #35	; 0x23
 8001422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2204      	movs	r2, #4
 800142a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f9f6 	bl	800181e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0202 	orr.w	r2, r2, #2
 8001440:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800147e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800149a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80014b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2223      	movs	r2, #35	; 0x23
 80014be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
  }
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014de:	2b23      	cmp	r3, #35	; 0x23
 80014e0:	d13f      	bne.n	8001562 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2223      	movs	r2, #35	; 0x23
 80014e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001502:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0202 	bic.w	r2, r2, #2
 8001554:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2210      	movs	r2, #16
 800155a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800159c:	2b23      	cmp	r3, #35	; 0x23
 800159e:	d179      	bne.n	8001694 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015a0:	2200      	movs	r2, #0
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 ff7d 	bl	80024a4 <ETH_Prepare_Tx_Descriptors>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d009      	beq.n	80015c4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	f043 0202 	orr.w	r2, r3, #2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e068      	b.n	8001696 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80015c4:	f3bf 8f4f 	dsb	sy
}
 80015c8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3206      	adds	r2, #6
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d904      	bls.n	80015f4 <HAL_ETH_Transmit+0x84>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	1f1a      	subs	r2, r3, #4
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3106      	adds	r1, #6
 8001600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001608:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800160c:	f7ff fc8c 	bl	8000f28 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001612:	e039      	b.n	8001688 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800161c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d012      	beq.n	800164e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	f043 0208 	orr.w	r2, r3, #8
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001640:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e023      	b.n	8001696 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d018      	beq.n	8001688 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001656:	f7ff fc67 	bl	8000f28 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d302      	bcc.n	800166c <HAL_ETH_Transmit+0xfc>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	f043 0204 	orr.w	r2, r3, #4
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001682:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e006      	b.n	8001696 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dbc1      	blt.n	8001614 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
  }
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b088      	sub	sp, #32
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0a5      	b.n	8001816 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d0:	2b23      	cmp	r3, #35	; 0x23
 80016d2:	d001      	beq.n	80016d8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e09e      	b.n	8001816 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	3212      	adds	r2, #18
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016ee:	f1c3 0304 	rsb	r3, r3, #4
 80016f2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016f4:	e067      	b.n	80017c6 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <HAL_ETH_ReadData+0x88>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03d      	beq.n	80017a2 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800177c:	461a      	mov	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	b29b      	uxth	r3, r3
 8001782:	f002 ffe5 	bl	8004750 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	441a      	add	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d902      	bls.n	80017b4 <HAL_ETH_ReadData+0x116>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b04      	subs	r3, #4
 80017b2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	3212      	adds	r2, #18
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db06      	blt.n	80017dc <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d202      	bcs.n	80017dc <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d08c      	beq.n	80016f6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	441a      	add	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f814 	bl	800181e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d108      	bne.n	8001814 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b088      	sub	sp, #32
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800182a:	2301      	movs	r3, #1
 800182c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001832:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	3212      	adds	r2, #18
 800183a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001844:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001846:	e03b      	b.n	80018c0 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d112      	bne.n	8001876 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	4618      	mov	r0, r3
 8001856:	f002 ff4b 	bl	80046f0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	74fb      	strb	r3, [r7, #19]
 8001864:	e007      	b.n	8001876 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	461a      	mov	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	461a      	mov	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001876:	7cfb      	ldrb	r3, [r7, #19]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d021      	beq.n	80018c0 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800187c:	f3bf 8f5f 	dmb	sy
}
 8001880:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	e003      	b.n	800189c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800189a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d902      	bls.n	80018ae <ETH_UpdateDescriptor+0x90>
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	3b04      	subs	r3, #4
 80018ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	3212      	adds	r2, #18
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3b01      	subs	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <ETH_UpdateDescriptor+0xae>
 80018c6:	7cfb      	ldrb	r3, [r7, #19]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1bd      	bne.n	8001848 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d00d      	beq.n	80018f2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	461a      	mov	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e03e      	b.n	800199a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001924:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	055b      	lsls	r3, r3, #21
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	041b      	lsls	r3, r3, #16
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f043 030c 	orr.w	r3, r3, #12
 8001948:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800195c:	f7ff fae4 	bl	8000f28 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001962:	e009      	b.n	8001978 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001964:	f7ff fae0 	bl	8000f28 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d901      	bls.n	8001978 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e010      	b.n	800199a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ed      	bne.n	8001964 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001990:	b29b      	uxth	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e03c      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	4313      	orrs	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	041b      	lsls	r3, r3, #16
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 030c 	bic.w	r3, r3, #12
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_ETH_WritePHYRegister+0xa4>)
 8001a06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_ETH_WritePHYRegister+0xa4>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001a12:	f7ff fa89 	bl	8000f28 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001a18:	e009      	b.n	8001a2e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001a1a:	f7ff fa85 	bl	8000f28 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a28:	d901      	bls.n	8001a2e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e008      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ed      	bne.n	8001a1a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40028000 	.word	0x40028000

08001a4c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e1c3      	b.n	8001de8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf14      	ite	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	2300      	moveq	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0e5b      	lsrs	r3, r3, #25
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d74:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d84:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e00b      	b.n	8001e20 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d105      	bne.n	8001e1e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f85f 	bl	8001ed8 <ETH_SetMACConfig>

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e42:	f001 ff7f 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8001e46:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d908      	bls.n	8001e62 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d804      	bhi.n	8001e62 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e027      	b.n	8001eb2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d908      	bls.n	8001e7c <HAL_ETH_SetMDIOClockRange+0x54>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d204      	bcs.n	8001e7c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e01a      	b.n	8001eb2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d303      	bcc.n	8001e8c <HAL_ETH_SetMDIOClockRange+0x64>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d911      	bls.n	8001eb0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d908      	bls.n	8001ea6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d804      	bhi.n	8001ea6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e005      	b.n	8001eb2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e000      	b.n	8001eb2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001eb0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	01312cff 	.word	0x01312cff
 8001ec8:	02160ebf 	.word	0x02160ebf
 8001ecc:	03938700 	.word	0x03938700
 8001ed0:	05f5e0ff 	.word	0x05f5e0ff
 8001ed4:	08f0d17f 	.word	0x08f0d17f

08001ed8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001eea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	791b      	ldrb	r3, [r3, #4]
 8001ef0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001ef2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7b1b      	ldrb	r3, [r3, #12]
 8001ef8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001efa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	7b5b      	ldrb	r3, [r3, #13]
 8001f00:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	7b9b      	ldrb	r3, [r3, #14]
 8001f08:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	7bdb      	ldrb	r3, [r3, #15]
 8001f10:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	7c12      	ldrb	r2, [r2, #16]
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	d102      	bne.n	8001f22 <ETH_SetMACConfig+0x4a>
 8001f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f20:	e000      	b.n	8001f24 <ETH_SetMACConfig+0x4c>
 8001f22:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	7c52      	ldrb	r2, [r2, #17]
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d102      	bne.n	8001f34 <ETH_SetMACConfig+0x5c>
 8001f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f32:	e000      	b.n	8001f36 <ETH_SetMACConfig+0x5e>
 8001f34:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001f36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	7c9b      	ldrb	r3, [r3, #18]
 8001f3c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001f3e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001f44:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	7f1b      	ldrb	r3, [r3, #28]
 8001f50:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001f52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	7f5b      	ldrb	r3, [r3, #29]
 8001f58:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001f5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	7f92      	ldrb	r2, [r2, #30]
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d102      	bne.n	8001f6a <ETH_SetMACConfig+0x92>
 8001f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f68:	e000      	b.n	8001f6c <ETH_SetMACConfig+0x94>
 8001f6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001f6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7fdb      	ldrb	r3, [r3, #31]
 8001f72:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001f74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d102      	bne.n	8001f86 <ETH_SetMACConfig+0xae>
 8001f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f84:	e000      	b.n	8001f88 <ETH_SetMACConfig+0xb0>
 8001f86:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001f88:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001f8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f96:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001f98:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <ETH_SetMACConfig+0x22c>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001fc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fcc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001fce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fd6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001fd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d102      	bne.n	8001fea <ETH_SetMACConfig+0x112>
 8001fe4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fe8:	e000      	b.n	8001fec <ETH_SetMACConfig+0x114>
 8001fea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001fec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <ETH_SetMACConfig+0x230>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	430b      	orrs	r3, r1
 8002008:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002010:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <ETH_SetMACConfig+0x234>)
 8002022:	4013      	ands	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	430b      	orrs	r3, r1
 800202c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002034:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800203a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002042:	2a00      	cmp	r2, #0
 8002044:	d101      	bne.n	800204a <ETH_SetMACConfig+0x172>
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	e000      	b.n	800204c <ETH_SetMACConfig+0x174>
 800204a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800204c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002052:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800205e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	430b      	orrs	r3, r1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002074:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800207c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f023 0103 	bic.w	r1, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	430a      	orrs	r2, r1
 8002096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80020a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d101      	bne.n	80020c6 <ETH_SetMACConfig+0x1ee>
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	e000      	b.n	80020c8 <ETH_SetMACConfig+0x1f0>
 80020c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80020c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80020d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80020d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80020da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	00048083 	.word	0x00048083
 8002108:	c0f88000 	.word	0xc0f88000
 800210c:	fffffef0 	.word	0xfffffef0

08002110 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <ETH_SetDMAConfig+0xf8>)
 8002126:	4013      	ands	r3, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002136:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	791b      	ldrb	r3, [r3, #4]
 800213c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002142:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	7b1b      	ldrb	r3, [r3, #12]
 8002148:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <ETH_SetDMAConfig+0xfc>)
 800215a:	4013      	ands	r3, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	430b      	orrs	r3, r1
 8002164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002168:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	7b5b      	ldrb	r3, [r3, #13]
 800216e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <ETH_SetDMAConfig+0x100>)
 8002186:	4013      	ands	r3, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	430b      	orrs	r3, r1
 8002190:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002194:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7d1b      	ldrb	r3, [r3, #20]
 80021a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80021a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	7f5b      	ldrb	r3, [r3, #29]
 80021a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <ETH_SetDMAConfig+0x104>)
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7f1b      	ldrb	r3, [r3, #28]
 80021d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <ETH_SetDMAConfig+0x108>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	ffff87fd 	.word	0xffff87fd
 800220c:	ffff2ffe 	.word	0xffff2ffe
 8002210:	fffec000 	.word	0xfffec000
 8002214:	ffc0efef 	.word	0xffc0efef
 8002218:	7fc0ffff 	.word	0x7fc0ffff

0800221c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a4      	sub	sp, #144	; 0x90
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800222a:	2300      	movs	r3, #0
 800222c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002264:	2300      	movs	r3, #0
 8002266:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002274:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002278:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002296:	2300      	movs	r3, #0
 8002298:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800229a:	2300      	movs	r3, #0
 800229c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800229e:	2300      	movs	r3, #0
 80022a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80022b4:	2320      	movs	r3, #32
 80022b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80022c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80022f6:	2300      	movs	r3, #0
 80022f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fde6 	bl	8001ed8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800230c:	2301      	movs	r3, #1
 800230e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002310:	2301      	movs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002326:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800232a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002334:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800233c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fee1 	bl	8002110 <ETH_SetDMAConfig>
}
 800234e:	bf00      	nop
 8002350:	3790      	adds	r7, #144	; 0x90
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	e01d      	b.n	80023a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	3206      	adds	r2, #6
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3301      	adds	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d9de      	bls.n	8002364 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	461a      	mov	r2, r3
 80023b6:	2303      	movs	r3, #3
 80023b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e023      	b.n	800243e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	3212      	adds	r2, #18
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d9d8      	bls.n	80023f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	461a      	mov	r2, r3
 800246c:	2303      	movs	r3, #3
 800246e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b08d      	sub	sp, #52	; 0x34
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3318      	adds	r3, #24
 80024b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024e6:	d007      	beq.n	80024f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	3304      	adds	r3, #4
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80024f8:	2302      	movs	r3, #2
 80024fa:	e259      	b.n	80029b0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d044      	beq.n	8002592 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <ETH_Prepare_Tx_Descriptors+0x240>)
 800250e:	4013      	ands	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002514:	431a      	orrs	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002534:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d027      	beq.n	8002592 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	b29a      	uxth	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	431a      	orrs	r2, r3
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002580:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002590:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b51      	ldr	r3, [pc, #324]	; (80026e8 <ETH_Prepare_Tx_Descriptors+0x244>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	6992      	ldr	r2, [r2, #24]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d036      	beq.n	8002642 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80025e0:	f3bf 8f5f 	dmb	sy
}
 80025e4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	3301      	adds	r3, #1
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d902      	bls.n	8002604 <ETH_Prepare_Tx_Descriptors+0x160>
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	3b04      	subs	r3, #4
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800261c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002620:	d10f      	bne.n	8002642 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 800262c:	f3bf 8f5f 	dmb	sy
}
 8002630:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e1b6      	b.n	80029b0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	3301      	adds	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002658:	4013      	ands	r3, r2
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	6852      	ldr	r2, [r2, #4]
 800265e:	431a      	orrs	r2, r3
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <ETH_Prepare_Tx_Descriptors+0x248>)
 8002682:	4013      	ands	r3, r2
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	6852      	ldr	r2, [r2, #4]
 8002688:	0412      	lsls	r2, r2, #16
 800268a:	431a      	orrs	r2, r3
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e008      	b.n	80026a4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <ETH_Prepare_Tx_Descriptors+0x248>)
 800269e:	4013      	ands	r3, r2
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d021      	beq.n	80026f4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	04db      	lsls	r3, r3, #19
 80026be:	431a      	orrs	r2, r3
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	69d2      	ldr	r2, [r2, #28]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	e02e      	b.n	8002742 <ETH_Prepare_Tx_Descriptors+0x29e>
 80026e4:	ffff0000 	.word	0xffff0000
 80026e8:	ffffc000 	.word	0xffffc000
 80026ec:	c000ffff 	.word	0xc000ffff
 80026f0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <ETH_Prepare_Tx_Descriptors+0x444>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	6852      	ldr	r2, [r2, #4]
 8002700:	431a      	orrs	r2, r3
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	431a      	orrs	r2, r3
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	431a      	orrs	r2, r3
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	431a      	orrs	r2, r3
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002778:	f3bf 8f5f 	dmb	sy
}
 800277c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80da 	beq.w	800294c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027aa:	e0cf      	b.n	800294c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	3301      	adds	r3, #1
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d902      	bls.n	80027ca <ETH_Prepare_Tx_Descriptors+0x326>
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	3b04      	subs	r3, #4
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ec:	d007      	beq.n	80027fe <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	3304      	adds	r3, #4
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d029      	beq.n	8002852 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800280c:	2300      	movs	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002810:	e019      	b.n	8002846 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002812:	f3bf 8f5f 	dmb	sy
}
 8002816:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	3301      	adds	r3, #1
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	2b03      	cmp	r3, #3
 800282e:	d902      	bls.n	8002836 <ETH_Prepare_Tx_Descriptors+0x392>
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	3b04      	subs	r3, #4
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	3301      	adds	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	429a      	cmp	r2, r3
 800284c:	d3e1      	bcc.n	8002812 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	e0ae      	b.n	80029b0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	3301      	adds	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <ETH_Prepare_Tx_Descriptors+0x448>)
 800286e:	4013      	ands	r3, r2
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	6852      	ldr	r2, [r2, #4]
 8002874:	431a      	orrs	r2, r3
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002898:	4013      	ands	r3, r2
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	6852      	ldr	r2, [r2, #4]
 800289e:	0412      	lsls	r2, r2, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	e008      	b.n	80028ba <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	6a3a      	ldr	r2, [r7, #32]
 80028b8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d018      	beq.n	80028f8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <ETH_Prepare_Tx_Descriptors+0x450>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	69d2      	ldr	r2, [r2, #28]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	e020      	b.n	8002928 <ETH_Prepare_Tx_Descriptors+0x484>
 80028e6:	bf00      	nop
 80028e8:	ffff8000 	.word	0xffff8000
 80028ec:	ffffc000 	.word	0xffffc000
 80028f0:	c000ffff 	.word	0xc000ffff
 80028f4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <ETH_Prepare_Tx_Descriptors+0x518>)
 80028fe:	4013      	ands	r3, r2
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	6852      	ldr	r2, [r2, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	431a      	orrs	r2, r3
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	3301      	adds	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800292e:	f3bf 8f5f 	dmb	sy
}
 8002932:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f af2b 	bne.w	80027ac <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e005      	b.n	8002976 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	3304      	adds	r3, #4
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002996:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3734      	adds	r7, #52	; 0x34
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	ffff8000 	.word	0xffff8000

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_GPIO_Init+0x234>)
 80029d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029d2:	e194      	b.n	8002cfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8186 	beq.w	8002cf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_GPIO_Init+0x44>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d130      	bne.n	8002a66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 0201 	and.w	r2, r3, #1
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d017      	beq.n	8002aa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d123      	bne.n	8002af6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	69b9      	ldr	r1, [r7, #24]
 8002af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80e0 	beq.w	8002cf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b38:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <HAL_GPIO_Init+0x238>)
 8002b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <HAL_GPIO_Init+0x238>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b48:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_GPIO_Init+0x238>)
 8002b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <HAL_GPIO_Init+0x23c>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <HAL_GPIO_Init+0x240>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d052      	beq.n	8002c28 <HAL_GPIO_Init+0x268>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_GPIO_Init+0x244>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d031      	beq.n	8002bee <HAL_GPIO_Init+0x22e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <HAL_GPIO_Init+0x248>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02b      	beq.n	8002bea <HAL_GPIO_Init+0x22a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_GPIO_Init+0x24c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d025      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <HAL_GPIO_Init+0x250>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01f      	beq.n	8002be2 <HAL_GPIO_Init+0x222>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_GPIO_Init+0x254>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d019      	beq.n	8002bde <HAL_GPIO_Init+0x21e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_GPIO_Init+0x258>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_GPIO_Init+0x21a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_GPIO_Init+0x25c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_GPIO_Init+0x216>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <HAL_GPIO_Init+0x260>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <HAL_GPIO_Init+0x212>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_GPIO_Init+0x264>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_GPIO_Init+0x20e>
 8002bca:	2309      	movs	r3, #9
 8002bcc:	e02d      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bce:	230a      	movs	r3, #10
 8002bd0:	e02b      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e029      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	e027      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	e025      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e023      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e021      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e01f      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e01d      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e01b      	b.n	8002c2a <HAL_GPIO_Init+0x26a>
 8002bf2:	bf00      	nop
 8002bf4:	58000080 	.word	0x58000080
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	58000400 	.word	0x58000400
 8002c00:	58020000 	.word	0x58020000
 8002c04:	58020400 	.word	0x58020400
 8002c08:	58020800 	.word	0x58020800
 8002c0c:	58020c00 	.word	0x58020c00
 8002c10:	58021000 	.word	0x58021000
 8002c14:	58021400 	.word	0x58021400
 8002c18:	58021800 	.word	0x58021800
 8002c1c:	58021c00 	.word	0x58021c00
 8002c20:	58022000 	.word	0x58022000
 8002c24:	58022400 	.word	0x58022400
 8002c28:	2300      	movs	r3, #0
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c3a:	4938      	ldr	r1, [pc, #224]	; (8002d1c <HAL_GPIO_Init+0x35c>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f ae63 	bne.w	80029d4 <HAL_GPIO_Init+0x14>
  }
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	3724      	adds	r7, #36	; 0x24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	58000400 	.word	0x58000400

08002d20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <HAL_HSEM_FastTake+0x2c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3320      	adds	r3, #32
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_HSEM_FastTake+0x30>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d101      	bne.n	8002d3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	58026400 	.word	0x58026400
 8002d50:	80000300 	.word	0x80000300

08002d54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002d5e:	4906      	ldr	r1, [pc, #24]	; (8002d78 <HAL_HSEM_Release+0x24>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	58026400 	.word	0x58026400

08002d7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d00a      	beq.n	8002da6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d90:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e040      	b.n	8002e24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e03e      	b.n	8002e24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002dae:	491f      	ldr	r1, [pc, #124]	; (8002e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002db6:	f7fe f8b7 	bl	8000f28 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dbc:	e009      	b.n	8002dd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dbe:	f7fe f8b3 	bl	8000f28 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e028      	b.n	8002e24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d1ee      	bne.n	8002dbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b1e      	cmp	r3, #30
 8002de4:	d008      	beq.n	8002df8 <HAL_PWREx_ConfigSupply+0x7c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dea:	d005      	beq.n	8002df8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b1d      	cmp	r3, #29
 8002df0:	d002      	beq.n	8002df8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b2d      	cmp	r3, #45	; 0x2d
 8002df6:	d114      	bne.n	8002e22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002df8:	f7fe f896 	bl	8000f28 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dfe:	e009      	b.n	8002e14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e00:	f7fe f892 	bl	8000f28 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0e:	d901      	bls.n	8002e14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d1ee      	bne.n	8002e00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	58024800 	.word	0x58024800

08002e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f000 bc48 	b.w	80036d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8088 	beq.w	8002f62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e52:	4b99      	ldr	r3, [pc, #612]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e5c:	4b96      	ldr	r3, [pc, #600]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d007      	beq.n	8002e78 <HAL_RCC_OscConfig+0x48>
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b18      	cmp	r3, #24
 8002e6c:	d111      	bne.n	8002e92 <HAL_RCC_OscConfig+0x62>
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b8f      	ldr	r3, [pc, #572]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d06d      	beq.n	8002f60 <HAL_RCC_OscConfig+0x130>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d169      	bne.n	8002f60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f000 bc21 	b.w	80036d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x7a>
 8002e9c:	4b86      	ldr	r3, [pc, #536]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a85      	ldr	r2, [pc, #532]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e02e      	b.n	8002f08 <HAL_RCC_OscConfig+0xd8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x9c>
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7d      	ldr	r2, [pc, #500]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xd8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xc0>
 8002ed6:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a77      	ldr	r2, [pc, #476]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a74      	ldr	r2, [pc, #464]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xd8>
 8002ef0:	4b71      	ldr	r3, [pc, #452]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a70      	ldr	r2, [pc, #448]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b6e      	ldr	r3, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6d      	ldr	r2, [pc, #436]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe f80a 	bl	8000f28 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe f806 	bl	8000f28 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e3d4      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe8>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fd fff6 	bl	8000f28 <HAL_GetTick>
 8002f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fd fff2 	bl	8000f28 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e3c0      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x110>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80ca 	beq.w	8003104 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f70:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_RCC_OscConfig+0x166>
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b18      	cmp	r3, #24
 8002f8a:	d156      	bne.n	800303a <HAL_RCC_OscConfig+0x20a>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d151      	bne.n	800303a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f96:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x17e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e392      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fae:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0219 	bic.w	r2, r3, #25
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	493f      	ldr	r1, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fd ffb2 	bl	8000f28 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fd ffae 	bl	8000f28 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e37c      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	f7fd ffab 	bl	8000f40 <HAL_GetREVID>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d817      	bhi.n	8003024 <HAL_RCC_OscConfig+0x1f4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d108      	bne.n	800300e <HAL_RCC_OscConfig+0x1de>
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003004:	4a2c      	ldr	r2, [pc, #176]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	e07a      	b.n	8003104 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	4926      	ldr	r1, [pc, #152]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003022:	e06f      	b.n	8003104 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	4921      	ldr	r1, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	e064      	b.n	8003104 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d047      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0219 	bic.w	r2, r3, #25
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	491a      	ldr	r1, [pc, #104]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003050:	4313      	orrs	r3, r2
 8003052:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fd ff68 	bl	8000f28 <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fd ff64 	bl	8000f28 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e332      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	f7fd ff61 	bl	8000f40 <HAL_GetREVID>
 800307e:	4603      	mov	r3, r0
 8003080:	f241 0203 	movw	r2, #4099	; 0x1003
 8003084:	4293      	cmp	r3, r2
 8003086:	d819      	bhi.n	80030bc <HAL_RCC_OscConfig+0x28c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d108      	bne.n	80030a2 <HAL_RCC_OscConfig+0x272>
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309e:	6053      	str	r3, [r2, #4]
 80030a0:	e030      	b.n	8003104 <HAL_RCC_OscConfig+0x2d4>
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	031b      	lsls	r3, r3, #12
 80030b0:	4901      	ldr	r1, [pc, #4]	; (80030b8 <HAL_RCC_OscConfig+0x288>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
 80030b6:	e025      	b.n	8003104 <HAL_RCC_OscConfig+0x2d4>
 80030b8:	58024400 	.word	0x58024400
 80030bc:	4b9a      	ldr	r3, [pc, #616]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	4997      	ldr	r1, [pc, #604]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
 80030d0:	e018      	b.n	8003104 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b95      	ldr	r3, [pc, #596]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a94      	ldr	r2, [pc, #592]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fd ff23 	bl	8000f28 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fd ff1f 	bl	8000f28 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e2ed      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030f8:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a9 	beq.w	8003264 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003112:	4b85      	ldr	r3, [pc, #532]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800311c:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0x308>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b18      	cmp	r3, #24
 800312c:	d13a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x374>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d135      	bne.n	80031a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003138:	4b7b      	ldr	r3, [pc, #492]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_OscConfig+0x320>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e2c1      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003150:	f7fd fef6 	bl	8000f40 <HAL_GetREVID>
 8003154:	4603      	mov	r3, r0
 8003156:	f241 0203 	movw	r2, #4099	; 0x1003
 800315a:	4293      	cmp	r3, r2
 800315c:	d817      	bhi.n	800318e <HAL_RCC_OscConfig+0x35e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b20      	cmp	r3, #32
 8003164:	d108      	bne.n	8003178 <HAL_RCC_OscConfig+0x348>
 8003166:	4b70      	ldr	r3, [pc, #448]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800316e:	4a6e      	ldr	r2, [pc, #440]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003174:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003176:	e075      	b.n	8003264 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003178:	4b6b      	ldr	r3, [pc, #428]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	069b      	lsls	r3, r3, #26
 8003186:	4968      	ldr	r1, [pc, #416]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800318c:	e06a      	b.n	8003264 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800318e:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	4962      	ldr	r1, [pc, #392]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a2:	e05f      	b.n	8003264 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d042      	beq.n	8003232 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031ac:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5d      	ldr	r2, [pc, #372]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80031b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fd feb6 	bl	8000f28 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031c0:	f7fd feb2 	bl	8000f28 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e280      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031d2:	4b55      	ldr	r3, [pc, #340]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031de:	f7fd feaf 	bl	8000f40 <HAL_GetREVID>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d817      	bhi.n	800321c <HAL_RCC_OscConfig+0x3ec>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d108      	bne.n	8003206 <HAL_RCC_OscConfig+0x3d6>
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031fc:	4a4a      	ldr	r2, [pc, #296]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80031fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003202:	6053      	str	r3, [r2, #4]
 8003204:	e02e      	b.n	8003264 <HAL_RCC_OscConfig+0x434>
 8003206:	4b48      	ldr	r3, [pc, #288]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	069b      	lsls	r3, r3, #26
 8003214:	4944      	ldr	r1, [pc, #272]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
 800321a:	e023      	b.n	8003264 <HAL_RCC_OscConfig+0x434>
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	493f      	ldr	r1, [pc, #252]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	60cb      	str	r3, [r1, #12]
 8003230:	e018      	b.n	8003264 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 8003238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fd fe73 	bl	8000f28 <HAL_GetTick>
 8003242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003246:	f7fd fe6f 	bl	8000f28 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e23d      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d036      	beq.n	80032de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d019      	beq.n	80032ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fd fe50 	bl	8000f28 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7fd fe4c 	bl	8000f28 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e21a      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x45c>
 80032aa:	e018      	b.n	80032de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80032ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b8:	f7fd fe36 	bl	8000f28 <HAL_GetTick>
 80032bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fd fe32 	bl	8000f28 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e200      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d039      	beq.n	800335e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01c      	beq.n	800332c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 80032f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032fe:	f7fd fe13 	bl	8000f28 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003306:	f7fd fe0f 	bl	8000f28 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1dd      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <HAL_RCC_OscConfig+0x4f8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x4d6>
 8003324:	e01b      	b.n	800335e <HAL_RCC_OscConfig+0x52e>
 8003326:	bf00      	nop
 8003328:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800332c:	4b9b      	ldr	r3, [pc, #620]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a9a      	ldr	r2, [pc, #616]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003336:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003338:	f7fd fdf6 	bl	8000f28 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003340:	f7fd fdf2 	bl	8000f28 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1c0      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003352:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8081 	beq.w	800346e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_OscConfig+0x770>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a8b      	ldr	r2, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x770>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003378:	f7fd fdd6 	bl	8000f28 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fd fdd2 	bl	8000f28 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1a0      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003392:	4b83      	ldr	r3, [pc, #524]	; (80035a0 <HAL_RCC_OscConfig+0x770>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x584>
 80033a6:	4b7d      	ldr	r3, [pc, #500]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	e02d      	b.n	8003410 <HAL_RCC_OscConfig+0x5e0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5a6>
 80033bc:	4b77      	ldr	r3, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a76      	ldr	r2, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b74      	ldr	r3, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a73      	ldr	r2, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x5e0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x5c8>
 80033de:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	4b6c      	ldr	r3, [pc, #432]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a6b      	ldr	r2, [pc, #428]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x5e0>
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	4b65      	ldr	r3, [pc, #404]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a64      	ldr	r2, [pc, #400]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd fd86 	bl	8000f28 <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fd fd82 	bl	8000f28 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e14e      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003436:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RCC_OscConfig+0x5f0>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd fd70 	bl	8000f28 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fd fd6c 	bl	8000f28 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e138      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ee      	bne.n	800344c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 812d 	beq.w	80036d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003478:	4b48      	ldr	r3, [pc, #288]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003480:	2b18      	cmp	r3, #24
 8003482:	f000 80bd 	beq.w	8003600 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b02      	cmp	r3, #2
 800348c:	f040 809e 	bne.w	80035cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003490:	4b42      	ldr	r3, [pc, #264]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a41      	ldr	r2, [pc, #260]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fd44 	bl	8000f28 <HAL_GetTick>
 80034a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fd fd40 	bl	8000f28 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e10e      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034b6:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80034c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c6:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_RCC_OscConfig+0x774>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	430a      	orrs	r2, r1
 80034d6:	4931      	ldr	r1, [pc, #196]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	628b      	str	r3, [r1, #40]	; 0x28
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	3b01      	subs	r3, #1
 80034e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	3b01      	subs	r3, #1
 80034ec:	025b      	lsls	r3, r3, #9
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	3b01      	subs	r3, #1
 80034f8:	041b      	lsls	r3, r3, #16
 80034fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	3b01      	subs	r3, #1
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800350c:	4923      	ldr	r1, [pc, #140]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800351e:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_RCC_OscConfig+0x778>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800352a:	00d2      	lsls	r2, r2, #3
 800352c:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f023 020c 	bic.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4917      	ldr	r1, [pc, #92]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003544:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	f023 0202 	bic.w	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	4912      	ldr	r1, [pc, #72]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	4a10      	ldr	r2, [pc, #64]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_RCC_OscConfig+0x76c>)
 800358c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fd fcc9 	bl	8000f28 <HAL_GetTick>
 8003596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003598:	e011      	b.n	80035be <HAL_RCC_OscConfig+0x78e>
 800359a:	bf00      	nop
 800359c:	58024400 	.word	0x58024400
 80035a0:	58024800 	.word	0x58024800
 80035a4:	fffffc0c 	.word	0xfffffc0c
 80035a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fd fcbc 	bl	8000f28 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e08a      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035be:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x77c>
 80035ca:	e082      	b.n	80036d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a42      	ldr	r2, [pc, #264]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd fca6 	bl	8000f28 <HAL_GetTick>
 80035dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fd fca2 	bl	8000f28 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e070      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035f2:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x7b0>
 80035fe:	e068      	b.n	80036d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003600:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003606:	4b35      	ldr	r3, [pc, #212]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b01      	cmp	r3, #1
 8003612:	d031      	beq.n	8003678 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0203 	and.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d12a      	bne.n	8003678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d122      	bne.n	8003678 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d11a      	bne.n	8003678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0a5b      	lsrs	r3, r3, #9
 8003646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d111      	bne.n	8003678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	0e1b      	lsrs	r3, r3, #24
 800366a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e02b      	b.n	80036d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003686:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	429a      	cmp	r2, r3
 8003690:	d01f      	beq.n	80036d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800369e:	f7fd fc43 	bl	8000f28 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80036a4:	bf00      	nop
 80036a6:	f7fd fc3f 	bl	8000f28 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d0f9      	beq.n	80036a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80036b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_OscConfig+0x8b0>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036be:	00d2      	lsls	r2, r2, #3
 80036c0:	4906      	ldr	r1, [pc, #24]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a04      	ldr	r2, [pc, #16]	; (80036dc <HAL_RCC_OscConfig+0x8ac>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3730      	adds	r7, #48	; 0x30
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400
 80036e0:	ffff0007 	.word	0xffff0007

080036e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e19c      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b8a      	ldr	r3, [pc, #552]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d910      	bls.n	8003728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b87      	ldr	r3, [pc, #540]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 020f 	bic.w	r2, r3, #15
 800370e:	4985      	ldr	r1, [pc, #532]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b83      	ldr	r3, [pc, #524]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e184      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003740:	429a      	cmp	r2, r3
 8003742:	d908      	bls.n	8003756 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003744:	4b78      	ldr	r3, [pc, #480]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	4975      	ldr	r1, [pc, #468]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003752:	4313      	orrs	r3, r2
 8003754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	4b70      	ldr	r3, [pc, #448]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800376e:	429a      	cmp	r2, r3
 8003770:	d908      	bls.n	8003784 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	496a      	ldr	r1, [pc, #424]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003780:	4313      	orrs	r3, r2
 8003782:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	4b64      	ldr	r3, [pc, #400]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800379c:	429a      	cmp	r2, r3
 800379e:	d908      	bls.n	80037b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a0:	4b61      	ldr	r3, [pc, #388]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	495e      	ldr	r1, [pc, #376]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d908      	bls.n	80037e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4953      	ldr	r1, [pc, #332]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d908      	bls.n	800380e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f023 020f 	bic.w	r2, r3, #15
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4947      	ldr	r1, [pc, #284]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 800380a:	4313      	orrs	r3, r2
 800380c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d055      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800381a:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4940      	ldr	r1, [pc, #256]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003828:	4313      	orrs	r3, r2
 800382a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d107      	bne.n	8003844 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003834:	4b3c      	ldr	r3, [pc, #240]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d121      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0f6      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d115      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0ea      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0de      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0d6      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f023 0207 	bic.w	r2, r3, #7
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 8003892:	4313      	orrs	r3, r2
 8003894:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003896:	f7fd fb47 	bl	8000f28 <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389e:	f7fd fb43 	bl	8000f28 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0be      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b4:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d1eb      	bne.n	800389e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d010      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	429a      	cmp	r2, r3
 80038e0:	d208      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f023 020f 	bic.w	r2, r3, #15
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_RCC_ClockConfig+0x244>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d214      	bcs.n	800392c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 020f 	bic.w	r2, r3, #15
 800390a:	4906      	ldr	r1, [pc, #24]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_RCC_ClockConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e086      	b.n	8003a32 <HAL_RCC_ClockConfig+0x34e>
 8003924:	52002000 	.word	0x52002000
 8003928:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003944:	429a      	cmp	r2, r3
 8003946:	d208      	bcs.n	800395a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003948:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	4939      	ldr	r1, [pc, #228]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 8003956:	4313      	orrs	r3, r2
 8003958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003972:	429a      	cmp	r2, r3
 8003974:	d208      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	492e      	ldr	r1, [pc, #184]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 8003984:	4313      	orrs	r3, r2
 8003986:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d208      	bcs.n	80039b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	4922      	ldr	r1, [pc, #136]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d208      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4917      	ldr	r1, [pc, #92]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039e4:	f000 f834 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	4912      	ldr	r1, [pc, #72]	; (8003a40 <HAL_RCC_ClockConfig+0x35c>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x358>)
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <HAL_RCC_ClockConfig+0x35c>)
 8003a0c:	5cd3      	ldrb	r3, [r2, r3]
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_RCC_ClockConfig+0x360>)
 8003a1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x364>)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_RCC_ClockConfig+0x368>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fa34 	bl	8000e94 <HAL_InitTick>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	080121fc 	.word	0x080121fc
 8003a44:	24000004 	.word	0x24000004
 8003a48:	24000000 	.word	0x24000000
 8003a4c:	24000010 	.word	0x24000010

08003a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a56:	4bb3      	ldr	r3, [pc, #716]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a5e:	2b18      	cmp	r3, #24
 8003a60:	f200 8155 	bhi.w	8003d0e <HAL_RCC_GetSysClockFreq+0x2be>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003ad1 	.word	0x08003ad1
 8003a70:	08003d0f 	.word	0x08003d0f
 8003a74:	08003d0f 	.word	0x08003d0f
 8003a78:	08003d0f 	.word	0x08003d0f
 8003a7c:	08003d0f 	.word	0x08003d0f
 8003a80:	08003d0f 	.word	0x08003d0f
 8003a84:	08003d0f 	.word	0x08003d0f
 8003a88:	08003d0f 	.word	0x08003d0f
 8003a8c:	08003af7 	.word	0x08003af7
 8003a90:	08003d0f 	.word	0x08003d0f
 8003a94:	08003d0f 	.word	0x08003d0f
 8003a98:	08003d0f 	.word	0x08003d0f
 8003a9c:	08003d0f 	.word	0x08003d0f
 8003aa0:	08003d0f 	.word	0x08003d0f
 8003aa4:	08003d0f 	.word	0x08003d0f
 8003aa8:	08003d0f 	.word	0x08003d0f
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003d0f 	.word	0x08003d0f
 8003ab4:	08003d0f 	.word	0x08003d0f
 8003ab8:	08003d0f 	.word	0x08003d0f
 8003abc:	08003d0f 	.word	0x08003d0f
 8003ac0:	08003d0f 	.word	0x08003d0f
 8003ac4:	08003d0f 	.word	0x08003d0f
 8003ac8:	08003d0f 	.word	0x08003d0f
 8003acc:	08003b03 	.word	0x08003b03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad0:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003adc:	4b91      	ldr	r3, [pc, #580]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	4a90      	ldr	r2, [pc, #576]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003aee:	e111      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003af0:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003af2:	61bb      	str	r3, [r7, #24]
      break;
 8003af4:	e10e      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003af6:	4b8d      	ldr	r3, [pc, #564]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003af8:	61bb      	str	r3, [r7, #24]
      break;
 8003afa:	e10b      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003afe:	61bb      	str	r3, [r7, #24]
      break;
 8003b00:	e108      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b02:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b0c:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b18:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b22:	4b80      	ldr	r3, [pc, #512]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80e1 	beq.w	8003d08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	f000 8083 	beq.w	8003c54 <HAL_RCC_GetSysClockFreq+0x204>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f200 80a1 	bhi.w	8003c98 <HAL_RCC_GetSysClockFreq+0x248>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x114>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d056      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b62:	e099      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02d      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b70:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	4a6b      	ldr	r2, [pc, #428]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003bca:	e087      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bf2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c0e:	e065      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c22:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c52:	e043      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c96:	e021      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cbe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	0a5b      	lsrs	r3, r3, #9
 8003ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d00:	ee17 3a90 	vmov	r3, s15
 8003d04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
      break;
 8003d0c:	e002      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d10:	61bb      	str	r3, [r7, #24]
      break;
 8003d12:	bf00      	nop
  }

  return sysclockfreq;
 8003d14:	69bb      	ldr	r3, [r7, #24]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	03d09000 	.word	0x03d09000
 8003d2c:	003d0900 	.word	0x003d0900
 8003d30:	017d7840 	.word	0x017d7840
 8003d34:	46000000 	.word	0x46000000
 8003d38:	4c742400 	.word	0x4c742400
 8003d3c:	4a742400 	.word	0x4a742400
 8003d40:	4bbebc20 	.word	0x4bbebc20

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d4a:	f7ff fe81 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490f      	ldr	r1, [pc, #60]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	4a07      	ldr	r2, [pc, #28]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	58024400 	.word	0x58024400
 8003d98:	080121fc 	.word	0x080121fc
 8003d9c:	24000004 	.word	0x24000004
 8003da0:	24000000 	.word	0x24000000

08003da4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003daa:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003dac:	22c0      	movs	r2, #192	; 0xc0
 8003dae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003db0:	4b8b      	ldr	r3, [pc, #556]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003db2:	22a8      	movs	r2, #168	; 0xa8
 8003db4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8003db6:	4b8a      	ldr	r3, [pc, #552]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003db8:	2264      	movs	r2, #100	; 0x64
 8003dba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8003dbc:	4b88      	ldr	r3, [pc, #544]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003dbe:	22c9      	movs	r2, #201	; 0xc9
 8003dc0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003dc8:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003dca:	22ff      	movs	r2, #255	; 0xff
 8003dcc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003dce:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003dd4:	4b83      	ldr	r3, [pc, #524]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003dda:	4b83      	ldr	r3, [pc, #524]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003ddc:	22c0      	movs	r2, #192	; 0xc0
 8003dde:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003de0:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003de2:	22a8      	movs	r2, #168	; 0xa8
 8003de4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8003de6:	4b80      	ldr	r3, [pc, #512]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003de8:	2264      	movs	r2, #100	; 0x64
 8003dea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003dec:	4b7e      	ldr	r3, [pc, #504]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003df2:	f001 ffd5 	bl	8005da0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003df6:	4b7a      	ldr	r3, [pc, #488]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	061a      	lsls	r2, r3, #24
 8003dfc:	4b78      	ldr	r3, [pc, #480]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	4b76      	ldr	r3, [pc, #472]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e06:	789b      	ldrb	r3, [r3, #2]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	4a74      	ldr	r2, [pc, #464]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e0e:	78d2      	ldrb	r2, [r2, #3]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	061a      	lsls	r2, r3, #24
 8003e14:	4b72      	ldr	r3, [pc, #456]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	0619      	lsls	r1, r3, #24
 8003e1a:	4b71      	ldr	r3, [pc, #452]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	4319      	orrs	r1, r3
 8003e22:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	496d      	ldr	r1, [pc, #436]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e2c:	78c9      	ldrb	r1, [r1, #3]
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e36:	431a      	orrs	r2, r3
 8003e38:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	0619      	lsls	r1, r3, #24
 8003e3e:	4b68      	ldr	r3, [pc, #416]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	4319      	orrs	r1, r3
 8003e46:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e48:	789b      	ldrb	r3, [r3, #2]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	4964      	ldr	r1, [pc, #400]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e50:	78c9      	ldrb	r1, [r1, #3]
 8003e52:	430b      	orrs	r3, r1
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	4b60      	ldr	r3, [pc, #384]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	0619      	lsls	r1, r3, #24
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	4319      	orrs	r1, r3
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e6c:	789b      	ldrb	r3, [r3, #2]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	430b      	orrs	r3, r1
 8003e72:	495b      	ldr	r1, [pc, #364]	; (8003fe0 <MX_LWIP_Init+0x23c>)
 8003e74:	78c9      	ldrb	r1, [r1, #3]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	0e1b      	lsrs	r3, r3, #24
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	4a5b      	ldr	r2, [pc, #364]	; (8003fec <MX_LWIP_Init+0x248>)
 8003e7e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e80:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	061a      	lsls	r2, r3, #24
 8003e86:	4b57      	ldr	r3, [pc, #348]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003e90:	789b      	ldrb	r3, [r3, #2]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4313      	orrs	r3, r2
 8003e96:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003e98:	78d2      	ldrb	r2, [r2, #3]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	061a      	lsls	r2, r3, #24
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	0619      	lsls	r1, r3, #24
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	4319      	orrs	r1, r3
 8003eac:	4b4d      	ldr	r3, [pc, #308]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	494b      	ldr	r1, [pc, #300]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003eb6:	78c9      	ldrb	r1, [r1, #3]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	4b48      	ldr	r3, [pc, #288]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	0619      	lsls	r1, r3, #24
 8003ec8:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	4319      	orrs	r1, r3
 8003ed0:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003ed2:	789b      	ldrb	r3, [r3, #2]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	4942      	ldr	r1, [pc, #264]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003eda:	78c9      	ldrb	r1, [r1, #3]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	0619      	lsls	r1, r3, #24
 8003eec:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	4319      	orrs	r1, r3
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003ef6:	789b      	ldrb	r3, [r3, #2]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	430b      	orrs	r3, r1
 8003efc:	4939      	ldr	r1, [pc, #228]	; (8003fe4 <MX_LWIP_Init+0x240>)
 8003efe:	78c9      	ldrb	r1, [r1, #3]
 8003f00:	430b      	orrs	r3, r1
 8003f02:	0e1b      	lsrs	r3, r3, #24
 8003f04:	4313      	orrs	r3, r2
 8003f06:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <MX_LWIP_Init+0x24c>)
 8003f08:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	061a      	lsls	r2, r3, #24
 8003f10:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	431a      	orrs	r2, r3
 8003f18:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f1a:	789b      	ldrb	r3, [r3, #2]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f22:	78d2      	ldrb	r2, [r2, #3]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	061a      	lsls	r2, r3, #24
 8003f28:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	0619      	lsls	r1, r3, #24
 8003f2e:	4b2e      	ldr	r3, [pc, #184]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	4319      	orrs	r1, r3
 8003f36:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	492a      	ldr	r1, [pc, #168]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f40:	78c9      	ldrb	r1, [r1, #3]
 8003f42:	430b      	orrs	r3, r1
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	0619      	lsls	r1, r3, #24
 8003f52:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	4319      	orrs	r1, r3
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f5c:	789b      	ldrb	r3, [r3, #2]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	430b      	orrs	r3, r1
 8003f62:	4921      	ldr	r1, [pc, #132]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f64:	78c9      	ldrb	r1, [r1, #3]
 8003f66:	430b      	orrs	r3, r1
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	0619      	lsls	r1, r3, #24
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	4319      	orrs	r1, r3
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f80:	789b      	ldrb	r3, [r3, #2]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	430b      	orrs	r3, r1
 8003f86:	4918      	ldr	r1, [pc, #96]	; (8003fe8 <MX_LWIP_Init+0x244>)
 8003f88:	78c9      	ldrb	r1, [r1, #3]
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <MX_LWIP_Init+0x250>)
 8003f92:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <MX_LWIP_Init+0x254>)
 8003f96:	9302      	str	r3, [sp, #8]
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <MX_LWIP_Init+0x258>)
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <MX_LWIP_Init+0x250>)
 8003fa2:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <MX_LWIP_Init+0x24c>)
 8003fa4:	4911      	ldr	r1, [pc, #68]	; (8003fec <MX_LWIP_Init+0x248>)
 8003fa6:	4816      	ldr	r0, [pc, #88]	; (8004000 <MX_LWIP_Init+0x25c>)
 8003fa8:	f003 fcf8 	bl	800799c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003fac:	4814      	ldr	r0, [pc, #80]	; (8004000 <MX_LWIP_Init+0x25c>)
 8003fae:	f003 fea7 	bl	8007d00 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <MX_LWIP_Init+0x25c>)
 8003fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003fc4:	480e      	ldr	r0, [pc, #56]	; (8004000 <MX_LWIP_Init+0x25c>)
 8003fc6:	f003 feab 	bl	8007d20 <netif_set_up>
 8003fca:	e002      	b.n	8003fd2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003fcc:	480c      	ldr	r0, [pc, #48]	; (8004000 <MX_LWIP_Init+0x25c>)
 8003fce:	f003 ff13 	bl	8007df8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003fd2:	490c      	ldr	r1, [pc, #48]	; (8004004 <MX_LWIP_Init+0x260>)
 8003fd4:	480a      	ldr	r0, [pc, #40]	; (8004000 <MX_LWIP_Init+0x25c>)
 8003fd6:	f003 ffa5 	bl	8007f24 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	240000f8 	.word	0x240000f8
 8003fe4:	240000fc 	.word	0x240000fc
 8003fe8:	24000100 	.word	0x24000100
 8003fec:	240000ec 	.word	0x240000ec
 8003ff0:	240000f0 	.word	0x240000f0
 8003ff4:	240000f4 	.word	0x240000f4
 8003ff8:	08005715 	.word	0x08005715
 8003ffc:	080042c1 	.word	0x080042c1
 8004000:	240000b8 	.word	0x240000b8
 8004004:	08004009 	.word	0x08004009

08004008 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004028:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <low_level_init+0x10c>)
 800402a:	4a40      	ldr	r2, [pc, #256]	; (800412c <low_level_init+0x110>)
 800402c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800402e:	2300      	movs	r3, #0
 8004030:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004036:	23e1      	movs	r3, #225	; 0xe1
 8004038:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800403a:	2300      	movs	r3, #0
 800403c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800403e:	2300      	movs	r3, #0
 8004040:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004042:	2300      	movs	r3, #0
 8004044:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004046:	4a38      	ldr	r2, [pc, #224]	; (8004128 <low_level_init+0x10c>)
 8004048:	f107 0308 	add.w	r3, r7, #8
 800404c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800404e:	4b36      	ldr	r3, [pc, #216]	; (8004128 <low_level_init+0x10c>)
 8004050:	2200      	movs	r2, #0
 8004052:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004054:	4b34      	ldr	r3, [pc, #208]	; (8004128 <low_level_init+0x10c>)
 8004056:	4a36      	ldr	r2, [pc, #216]	; (8004130 <low_level_init+0x114>)
 8004058:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800405a:	4b33      	ldr	r3, [pc, #204]	; (8004128 <low_level_init+0x10c>)
 800405c:	4a35      	ldr	r2, [pc, #212]	; (8004134 <low_level_init+0x118>)
 800405e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004060:	4b31      	ldr	r3, [pc, #196]	; (8004128 <low_level_init+0x10c>)
 8004062:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004066:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004068:	482f      	ldr	r0, [pc, #188]	; (8004128 <low_level_init+0x10c>)
 800406a:	f7fd f8e9 	bl	8001240 <HAL_ETH_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004072:	2238      	movs	r2, #56	; 0x38
 8004074:	2100      	movs	r1, #0
 8004076:	4830      	ldr	r0, [pc, #192]	; (8004138 <low_level_init+0x11c>)
 8004078:	f00a fb27 	bl	800e6ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <low_level_init+0x11c>)
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004082:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <low_level_init+0x11c>)
 8004084:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004088:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <low_level_init+0x11c>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004090:	482a      	ldr	r0, [pc, #168]	; (800413c <low_level_init+0x120>)
 8004092:	f003 fb4b 	bl	800772c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2206      	movs	r2, #6
 800409a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <low_level_init+0x10c>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040aa:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <low_level_init+0x10c>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	785a      	ldrb	r2, [r3, #1]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <low_level_init+0x10c>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	789a      	ldrb	r2, [r3, #2]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80040c2:	4b19      	ldr	r3, [pc, #100]	; (8004128 <low_level_init+0x10c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	78da      	ldrb	r2, [r3, #3]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <low_level_init+0x10c>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	791a      	ldrb	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <low_level_init+0x10c>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	795a      	ldrb	r2, [r3, #5]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040ec:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80040f4:	f043 030a 	orr.w	r3, r3, #10
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004100:	490f      	ldr	r1, [pc, #60]	; (8004140 <low_level_init+0x124>)
 8004102:	4810      	ldr	r0, [pc, #64]	; (8004144 <low_level_init+0x128>)
 8004104:	f7fc fd29 	bl	8000b5a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004108:	480e      	ldr	r0, [pc, #56]	; (8004144 <low_level_init+0x128>)
 800410a:	f7fc fd58 	bl	8000bbe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fa5f 	bl	80045d8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800411a:	e001      	b.n	8004120 <low_level_init+0x104>
    Error_Handler();
 800411c:	f7fc fbd0 	bl	80008c0 <Error_Handler>
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	24004a90 	.word	0x24004a90
 800412c:	40028000 	.word	0x40028000
 8004130:	30000200 	.word	0x30000200
 8004134:	30000000 	.word	0x30000000
 8004138:	24004b40 	.word	0x24004b40
 800413c:	0801220c 	.word	0x0801220c
 8004140:	24000018 	.word	0x24000018
 8004144:	24004b78 	.word	0x24004b78

08004148 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b092      	sub	sp, #72	; 0x48
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	2230      	movs	r2, #48	; 0x30
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f00a faae 	bl	800e6ca <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800416e:	f107 030c 	add.w	r3, r7, #12
 8004172:	2230      	movs	r2, #48	; 0x30
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f00a faa7 	bl	800e6ca <memset>

  for(q = p; q != NULL; q = q->next)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
 8004180:	e045      	b.n	800420e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004184:	2b03      	cmp	r3, #3
 8004186:	d902      	bls.n	800418e <low_level_output+0x46>
      return ERR_IF;
 8004188:	f06f 030b 	mvn.w	r3, #11
 800418c:	e055      	b.n	800423a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800418e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	3348      	adds	r3, #72	; 0x48
 800419e:	443b      	add	r3, r7
 80041a0:	3b3c      	subs	r3, #60	; 0x3c
 80041a2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80041a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a6:	895b      	ldrh	r3, [r3, #10]
 80041a8:	4619      	mov	r1, r3
 80041aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	3348      	adds	r3, #72	; 0x48
 80041b6:	443b      	add	r3, r7
 80041b8:	3b38      	subs	r3, #56	; 0x38
 80041ba:	6019      	str	r1, [r3, #0]

    if(i>0)
 80041bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80041c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	f107 000c 	add.w	r0, r7, #12
 80041ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041cc:	460b      	mov	r3, r1
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	440b      	add	r3, r1
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	18c1      	adds	r1, r0, r3
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	3348      	adds	r3, #72	; 0x48
 80041e0:	443b      	add	r3, r7
 80041e2:	3b34      	subs	r3, #52	; 0x34
 80041e4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80041ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	3348      	adds	r3, #72	; 0x48
 80041fa:	443b      	add	r3, r7
 80041fc:	3b34      	subs	r3, #52	; 0x34
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004204:	3301      	adds	r3, #1
 8004206:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1b6      	bne.n	8004182 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	891b      	ldrh	r3, [r3, #8]
 8004218:	461a      	mov	r2, r3
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <low_level_output+0xfc>)
 800421c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <low_level_output+0xfc>)
 8004220:	f107 030c 	add.w	r3, r7, #12
 8004224:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004226:	4a07      	ldr	r2, [pc, #28]	; (8004244 <low_level_output+0xfc>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800422c:	2214      	movs	r2, #20
 800422e:	4905      	ldr	r1, [pc, #20]	; (8004244 <low_level_output+0xfc>)
 8004230:	4805      	ldr	r0, [pc, #20]	; (8004248 <low_level_output+0x100>)
 8004232:	f7fd f99d 	bl	8001570 <HAL_ETH_Transmit>

  return errval;
 8004236:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800423a:	4618      	mov	r0, r3
 800423c:	3748      	adds	r7, #72	; 0x48
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	24004b40 	.word	0x24004b40
 8004248:	24004a90 	.word	0x24004a90

0800424c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <low_level_input+0x2c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004260:	f107 030c 	add.w	r3, r7, #12
 8004264:	4619      	mov	r1, r3
 8004266:	4805      	ldr	r0, [pc, #20]	; (800427c <low_level_input+0x30>)
 8004268:	f7fd fa19 	bl	800169e <HAL_ETH_ReadData>
  }

  return p;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	24004a8c 	.word	0x24004a8c
 800427c:	24004a90 	.word	0x24004a90

08004280 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ffdd 	bl	800424c <low_level_input>
 8004292:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	4798      	blx	r3
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f004 f9ba 	bl	8008624 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ea      	bne.n	800428c <ethernetif_input+0xc>
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <ethernetif_init+0x1c>
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <ethernetif_init+0x48>)
 80042d0:	f240 127b 	movw	r2, #379	; 0x17b
 80042d4:	490d      	ldr	r1, [pc, #52]	; (800430c <ethernetif_init+0x4c>)
 80042d6:	480e      	ldr	r0, [pc, #56]	; (8004310 <ethernetif_init+0x50>)
 80042d8:	f00a f992 	bl	800e600 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2273      	movs	r2, #115	; 0x73
 80042e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2274      	movs	r2, #116	; 0x74
 80042e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <ethernetif_init+0x54>)
 80042f0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <ethernetif_init+0x58>)
 80042f6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fe8f 	bl	800401c <low_level_init>

  return ERR_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	0800f43c 	.word	0x0800f43c
 800430c:	0800f458 	.word	0x0800f458
 8004310:	0800f468 	.word	0x0800f468
 8004314:	08005115 	.word	0x08005115
 8004318:	08004149 	.word	0x08004149

0800431c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	4807      	ldr	r0, [pc, #28]	; (8004348 <pbuf_free_custom+0x2c>)
 800432c:	f003 fae0 	bl	80078f0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <pbuf_free_custom+0x30>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d102      	bne.n	800433e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <pbuf_free_custom+0x30>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
  }
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	0801220c 	.word	0x0801220c
 800434c:	24004a8c 	.word	0x24004a8c

08004350 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004354:	f7fc fde8 	bl	8000f28 <HAL_GetTick>
 8004358:	4603      	mov	r3, r0
}
 800435a:	4618      	mov	r0, r3
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b090      	sub	sp, #64	; 0x40
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a68      	ldr	r2, [pc, #416]	; (8004520 <HAL_ETH_MspInit+0x1c0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f040 80ca 	bne.w	8004518 <HAL_ETH_MspInit+0x1b8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004384:	4b67      	ldr	r3, [pc, #412]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800438a:	4a66      	ldr	r2, [pc, #408]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800438c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004390:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004394:	4b63      	ldr	r3, [pc, #396]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800439a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80043a2:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043a8:	4a5e      	ldr	r2, [pc, #376]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80043b2:	4b5c      	ldr	r3, [pc, #368]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80043c0:	4b58      	ldr	r3, [pc, #352]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043c6:	4a57      	ldr	r2, [pc, #348]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80043d0:	4b54      	ldr	r3, [pc, #336]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e4:	4a4f      	ldr	r2, [pc, #316]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043e6:	f043 0310 	orr.w	r3, r3, #16
 80043ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043ee:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fc:	4b49      	ldr	r3, [pc, #292]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 80043fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004402:	4a48      	ldr	r2, [pc, #288]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800440c:	4b45      	ldr	r3, [pc, #276]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800440e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441a:	4b42      	ldr	r3, [pc, #264]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800441c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004420:	4a40      	ldr	r2, [pc, #256]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800442c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004438:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800443a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800443e:	4a39      	ldr	r2, [pc, #228]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004440:	f043 0302 	orr.w	r3, r3, #2
 8004444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800444a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800445c:	4a31      	ldr	r2, [pc, #196]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 800445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <HAL_ETH_MspInit+0x1c4>)
 8004468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> ETH_RXD3
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004474:	2304      	movs	r3, #4
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	2302      	movs	r3, #2
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004480:	2300      	movs	r3, #0
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004484:	230b      	movs	r3, #11
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800448c:	4619      	mov	r1, r3
 800448e:	4826      	ldr	r0, [pc, #152]	; (8004528 <HAL_ETH_MspInit+0x1c8>)
 8004490:	f7fe fa96 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8004494:	233e      	movs	r3, #62	; 0x3e
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004498:	2302      	movs	r3, #2
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	2300      	movs	r3, #0
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a0:	2300      	movs	r3, #0
 80044a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044a4:	230b      	movs	r3, #11
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ac:	4619      	mov	r1, r3
 80044ae:	481f      	ldr	r0, [pc, #124]	; (800452c <HAL_ETH_MspInit+0x1cc>)
 80044b0:	f7fe fa86 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80044b4:	238f      	movs	r3, #143	; 0x8f
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b8:	2302      	movs	r3, #2
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	2300      	movs	r3, #0
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044c4:	230b      	movs	r3, #11
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044cc:	4619      	mov	r1, r3
 80044ce:	4818      	ldr	r0, [pc, #96]	; (8004530 <HAL_ETH_MspInit+0x1d0>)
 80044d0:	f7fe fa76 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80044d4:	f242 0303 	movw	r3, #8195	; 0x2003
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044e6:	230b      	movs	r3, #11
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ee:	4619      	mov	r1, r3
 80044f0:	4810      	ldr	r0, [pc, #64]	; (8004534 <HAL_ETH_MspInit+0x1d4>)
 80044f2:	f7fe fa65 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80044f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	2302      	movs	r3, #2
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004504:	2300      	movs	r3, #0
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004508:	230b      	movs	r3, #11
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800450c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004510:	4619      	mov	r1, r3
 8004512:	4809      	ldr	r0, [pc, #36]	; (8004538 <HAL_ETH_MspInit+0x1d8>)
 8004514:	f7fe fa54 	bl	80029c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004518:	bf00      	nop
 800451a:	3740      	adds	r7, #64	; 0x40
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40028000 	.word	0x40028000
 8004524:	58024400 	.word	0x58024400
 8004528:	58021000 	.word	0x58021000
 800452c:	58020800 	.word	0x58020800
 8004530:	58020000 	.word	0x58020000
 8004534:	58020400 	.word	0x58020400
 8004538:	58021800 	.word	0x58021800

0800453c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <ETH_PHY_IO_Init+0x10>)
 8004542:	f7fd fc71 	bl	8001e28 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	24004a90 	.word	0x24004a90

08004550 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return 0;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	4807      	ldr	r0, [pc, #28]	; (8004590 <ETH_PHY_IO_ReadReg+0x30>)
 8004574:	f7fd f9c1 	bl	80018fa <HAL_ETH_ReadPHYRegister>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	e000      	b.n	8004586 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	24004a90 	.word	0x24004a90

08004594 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	4807      	ldr	r0, [pc, #28]	; (80045c4 <ETH_PHY_IO_WriteReg+0x30>)
 80045a8:	f7fd f9fc 	bl	80019a4 <HAL_ETH_WritePHYRegister>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	e000      	b.n	80045ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24004a90 	.word	0x24004a90

080045c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045cc:	f7fc fcac 	bl	8000f28 <HAL_GetTick>
 80045d0:	4603      	mov	r3, r0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0a0      	sub	sp, #128	; 0x80
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	2264      	movs	r2, #100	; 0x64
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f00a f86e 	bl	800e6ca <memset>
  int32_t PHYLinkState = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045f6:	2300      	movs	r3, #0
 80045f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045fa:	2300      	movs	r3, #0
 80045fc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80045fe:	483a      	ldr	r0, [pc, #232]	; (80046e8 <ethernet_link_check_state+0x110>)
 8004600:	f7fc fb85 	bl	8000d0e <LAN8742_GetLinkState>
 8004604:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00c      	beq.n	8004632 <ethernet_link_check_state+0x5a>
 8004618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461a:	2b01      	cmp	r3, #1
 800461c:	dc09      	bgt.n	8004632 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800461e:	4833      	ldr	r0, [pc, #204]	; (80046ec <ethernet_link_check_state+0x114>)
 8004620:	f7fc ff56 	bl	80014d0 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f003 fbe7 	bl	8007df8 <netif_set_down>
    netif_set_link_down(netif);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f003 fc4a 	bl	8007ec4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004630:	e055      	b.n	80046de <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d14e      	bne.n	80046de <ethernet_link_check_state+0x106>
 8004640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004642:	2b01      	cmp	r3, #1
 8004644:	dd4b      	ble.n	80046de <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004648:	3b02      	subs	r3, #2
 800464a:	2b03      	cmp	r3, #3
 800464c:	d82a      	bhi.n	80046a4 <ethernet_link_check_state+0xcc>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <ethernet_link_check_state+0x7c>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004665 	.word	0x08004665
 8004658:	08004677 	.word	0x08004677
 800465c:	08004687 	.word	0x08004687
 8004660:	08004697 	.word	0x08004697
      duplex = ETH_FULLDUPLEX_MODE;
 8004664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004668:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800466a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800466e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004670:	2301      	movs	r3, #1
 8004672:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004674:	e017      	b.n	80046a6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004676:	2300      	movs	r3, #0
 8004678:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800467a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800467e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004680:	2301      	movs	r3, #1
 8004682:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004684:	e00f      	b.n	80046a6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800468a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800468c:	2300      	movs	r3, #0
 800468e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004690:	2301      	movs	r3, #1
 8004692:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004694:	e007      	b.n	80046a6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004696:	2300      	movs	r3, #0
 8004698:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800469a:	2300      	movs	r3, #0
 800469c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80046a2:	e000      	b.n	80046a6 <ethernet_link_check_state+0xce>
      break;
 80046a4:	bf00      	nop
    if(linkchanged)
 80046a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d018      	beq.n	80046de <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4619      	mov	r1, r3
 80046b2:	480e      	ldr	r0, [pc, #56]	; (80046ec <ethernet_link_check_state+0x114>)
 80046b4:	f7fd f9ca 	bl	8001a4c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80046b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80046bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046be:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80046c0:	f107 030c 	add.w	r3, r7, #12
 80046c4:	4619      	mov	r1, r3
 80046c6:	4809      	ldr	r0, [pc, #36]	; (80046ec <ethernet_link_check_state+0x114>)
 80046c8:	f7fd fb94 	bl	8001df4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80046cc:	4807      	ldr	r0, [pc, #28]	; (80046ec <ethernet_link_check_state+0x114>)
 80046ce:	f7fc fe9d 	bl	800140c <HAL_ETH_Start>
      netif_set_up(netif);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f003 fb24 	bl	8007d20 <netif_set_up>
      netif_set_link_up(netif);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f003 fbbf 	bl	8007e5c <netif_set_link_up>
}
 80046de:	bf00      	nop
 80046e0:	3780      	adds	r7, #128	; 0x80
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	24004b78 	.word	0x24004b78
 80046ec:	24004a90 	.word	0x24004a90

080046f0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80046f8:	4812      	ldr	r0, [pc, #72]	; (8004744 <HAL_ETH_RxAllocateCallback+0x54>)
 80046fa:	f003 f88b 	bl	8007814 <memp_malloc_pool>
 80046fe:	60f8      	str	r0, [r7, #12]
  if (p)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d014      	beq.n	8004730 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f103 0220 	add.w	r2, r3, #32
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <HAL_ETH_RxAllocateCallback+0x58>)
 8004714:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800471e:	9201      	str	r2, [sp, #4]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2241      	movs	r2, #65	; 0x41
 8004726:	2100      	movs	r1, #0
 8004728:	2000      	movs	r0, #0
 800472a:	f003 fdc1 	bl	80082b0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800472e:	e005      	b.n	800473c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0801220c 	.word	0x0801220c
 8004748:	0800431d 	.word	0x0800431d
 800474c:	24004a8c 	.word	0x24004a8c

08004750 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004750:	b480      	push	{r7}
 8004752:	b08d      	sub	sp, #52	; 0x34
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3b20      	subs	r3, #32
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	2200      	movs	r2, #0
 800477a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	887a      	ldrh	r2, [r7, #2]
 8004780:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d103      	bne.n	8004792 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e003      	b.n	800479a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004798:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800479e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a6:	e009      	b.n	80047bc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	891a      	ldrh	r2, [r3, #8]
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	4413      	add	r3, r2
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f2      	bne.n	80047a8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	623a      	str	r2, [r7, #32]
 80047c8:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dd1d      	ble.n	800480c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f003 021f 	and.w	r2, r3, #31
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80047e0:	f3bf 8f4f 	dsb	sy
}
 80047e4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80047e6:	4a0d      	ldr	r2, [pc, #52]	; (800481c <HAL_ETH_RxLinkCallback+0xcc>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	3320      	adds	r3, #32
 80047f2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	3b20      	subs	r3, #32
 80047f8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dcf2      	bgt.n	80047e6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8004800:	f3bf 8f4f 	dsb	sy
}
 8004804:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004806:	f3bf 8f6f 	isb	sy
}
 800480a:	bf00      	nop
}
 800480c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800480e:	bf00      	nop
 8004810:	3734      	adds	r7, #52	; 0x34
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000ed00 	.word	0xe000ed00

08004820 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	b21a      	sxth	r2, r3
 8004830:	88fb      	ldrh	r3, [r7, #6]
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	b29b      	uxth	r3, r3
 8004836:	b21b      	sxth	r3, r3
 8004838:	4313      	orrs	r3, r2
 800483a:	b21b      	sxth	r3, r3
 800483c:	b29b      	uxth	r3, r3
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	061a      	lsls	r2, r3, #24
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0e1b      	lsrs	r3, r3, #24
 800486e:	4313      	orrs	r3, r2
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004884:	4915      	ldr	r1, [pc, #84]	; (80048dc <etharp_free_entry+0x60>)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004898:	4910      	ldr	r1, [pc, #64]	; (80048dc <etharp_free_entry+0x60>)
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	440b      	add	r3, r1
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f003 febb 	bl	8008624 <pbuf_free>
    arp_table[i].q = NULL;
 80048ae:	490b      	ldr	r1, [pc, #44]	; (80048dc <etharp_free_entry+0x60>)
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	440b      	add	r3, r1
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80048c0:	4906      	ldr	r1, [pc, #24]	; (80048dc <etharp_free_entry+0x60>)
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4413      	add	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	440b      	add	r3, r1
 80048ce:	3314      	adds	r3, #20
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	24004b98 	.word	0x24004b98

080048e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	e096      	b.n	8004a1a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80048ec:	494f      	ldr	r1, [pc, #316]	; (8004a2c <etharp_tmr+0x14c>)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	3314      	adds	r3, #20
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8086 	beq.w	8004a14 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8004908:	4948      	ldr	r1, [pc, #288]	; (8004a2c <etharp_tmr+0x14c>)
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	3312      	adds	r3, #18
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	b298      	uxth	r0, r3
 800491e:	4943      	ldr	r1, [pc, #268]	; (8004a2c <etharp_tmr+0x14c>)
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	440b      	add	r3, r1
 800492c:	3312      	adds	r3, #18
 800492e:	4602      	mov	r2, r0
 8004930:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004932:	493e      	ldr	r1, [pc, #248]	; (8004a2c <etharp_tmr+0x14c>)
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	440b      	add	r3, r1
 8004940:	3312      	adds	r3, #18
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004948:	d215      	bcs.n	8004976 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800494a:	4938      	ldr	r1, [pc, #224]	; (8004a2c <etharp_tmr+0x14c>)
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	3314      	adds	r3, #20
 800495a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10e      	bne.n	800497e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8004960:	4932      	ldr	r1, [pc, #200]	; (8004a2c <etharp_tmr+0x14c>)
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	440b      	add	r3, r1
 800496e:	3312      	adds	r3, #18
 8004970:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004972:	2b04      	cmp	r3, #4
 8004974:	d903      	bls.n	800497e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff ff80 	bl	800487c <etharp_free_entry>
 800497c:	e04a      	b.n	8004a14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800497e:	492b      	ldr	r1, [pc, #172]	; (8004a2c <etharp_tmr+0x14c>)
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	3314      	adds	r3, #20
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d10a      	bne.n	80049aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004994:	4925      	ldr	r1, [pc, #148]	; (8004a2c <etharp_tmr+0x14c>)
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	3314      	adds	r3, #20
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e034      	b.n	8004a14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80049aa:	4920      	ldr	r1, [pc, #128]	; (8004a2c <etharp_tmr+0x14c>)
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	3314      	adds	r3, #20
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d10a      	bne.n	80049d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80049c0:	491a      	ldr	r1, [pc, #104]	; (8004a2c <etharp_tmr+0x14c>)
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	440b      	add	r3, r1
 80049ce:	3314      	adds	r3, #20
 80049d0:	2202      	movs	r2, #2
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e01e      	b.n	8004a14 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80049d6:	4915      	ldr	r1, [pc, #84]	; (8004a2c <etharp_tmr+0x14c>)
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	3314      	adds	r3, #20
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d113      	bne.n	8004a14 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80049ec:	490f      	ldr	r1, [pc, #60]	; (8004a2c <etharp_tmr+0x14c>)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	440b      	add	r3, r1
 80049fa:	3308      	adds	r3, #8
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <etharp_tmr+0x14c>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f000 fe6e 	bl	80056f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3301      	adds	r3, #1
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	f77f af65 	ble.w	80048ec <etharp_tmr+0xc>
      }
    }
  }
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	24004b98 	.word	0x24004b98

08004a30 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004a3e:	230a      	movs	r3, #10
 8004a40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a42:	230a      	movs	r3, #10
 8004a44:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8004a46:	230a      	movs	r3, #10
 8004a48:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8004a4e:	230a      	movs	r3, #10
 8004a50:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	83bb      	strh	r3, [r7, #28]
 8004a56:	2300      	movs	r3, #0
 8004a58:	837b      	strh	r3, [r7, #26]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a5e:	2300      	movs	r3, #0
 8004a60:	843b      	strh	r3, [r7, #32]
 8004a62:	e0ae      	b.n	8004bc2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8004a64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004a68:	49a6      	ldr	r1, [pc, #664]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	3314      	adds	r3, #20
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004a7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004a7e:	2b0a      	cmp	r3, #10
 8004a80:	d105      	bne.n	8004a8e <etharp_find_entry+0x5e>
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8004a88:	8c3b      	ldrh	r3, [r7, #32]
 8004a8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a8c:	e095      	b.n	8004bba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8092 	beq.w	8004bba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d009      	beq.n	8004ab0 <etharp_find_entry+0x80>
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d806      	bhi.n	8004ab0 <etharp_find_entry+0x80>
 8004aa2:	4b99      	ldr	r3, [pc, #612]	; (8004d08 <etharp_find_entry+0x2d8>)
 8004aa4:	f240 1223 	movw	r2, #291	; 0x123
 8004aa8:	4998      	ldr	r1, [pc, #608]	; (8004d0c <etharp_find_entry+0x2dc>)
 8004aaa:	4899      	ldr	r0, [pc, #612]	; (8004d10 <etharp_find_entry+0x2e0>)
 8004aac:	f009 fda8 	bl	800e600 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d020      	beq.n	8004af8 <etharp_find_entry+0xc8>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004abe:	4891      	ldr	r0, [pc, #580]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4403      	add	r3, r0
 8004aca:	3304      	adds	r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	d112      	bne.n	8004af8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00c      	beq.n	8004af2 <etharp_find_entry+0xc2>
 8004ad8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004adc:	4989      	ldr	r1, [pc, #548]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3308      	adds	r3, #8
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d102      	bne.n	8004af8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004af2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004af6:	e100      	b.n	8004cfa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d140      	bne.n	8004b80 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004afe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b02:	4980      	ldr	r1, [pc, #512]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01a      	beq.n	8004b4a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8004b14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b18:	497a      	ldr	r1, [pc, #488]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	3312      	adds	r3, #18
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	8bba      	ldrh	r2, [r7, #28]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d845      	bhi.n	8004bba <etharp_find_entry+0x18a>
            old_queue = i;
 8004b2e:	8c3b      	ldrh	r3, [r7, #32]
 8004b30:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8004b32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b36:	4973      	ldr	r1, [pc, #460]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	3312      	adds	r3, #18
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	83bb      	strh	r3, [r7, #28]
 8004b48:	e037      	b.n	8004bba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004b4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b4e:	496d      	ldr	r1, [pc, #436]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	3312      	adds	r3, #18
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	8b7a      	ldrh	r2, [r7, #26]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d82a      	bhi.n	8004bba <etharp_find_entry+0x18a>
            old_pending = i;
 8004b64:	8c3b      	ldrh	r3, [r7, #32]
 8004b66:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8004b68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b6c:	4965      	ldr	r1, [pc, #404]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	3312      	adds	r3, #18
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	837b      	strh	r3, [r7, #26]
 8004b7e:	e01c      	b.n	8004bba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d919      	bls.n	8004bba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004b86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004b8a:	495e      	ldr	r1, [pc, #376]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	440b      	add	r3, r1
 8004b96:	3312      	adds	r3, #18
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	8b3a      	ldrh	r2, [r7, #24]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d80c      	bhi.n	8004bba <etharp_find_entry+0x18a>
            old_stable = i;
 8004ba0:	8c3b      	ldrh	r3, [r7, #32]
 8004ba2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8004ba4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ba8:	4956      	ldr	r1, [pc, #344]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3312      	adds	r3, #18
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004bba:	8c3b      	ldrh	r3, [r7, #32]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	843b      	strh	r3, [r7, #32]
 8004bc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	f77f af4c 	ble.w	8004a64 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <etharp_find_entry+0x1b8>
 8004bd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004bda:	2b0a      	cmp	r3, #10
 8004bdc:	d107      	bne.n	8004bee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	e085      	b.n	8004cfa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8004bee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004bf2:	2b09      	cmp	r3, #9
 8004bf4:	dc02      	bgt.n	8004bfc <etharp_find_entry+0x1cc>
    i = empty;
 8004bf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bf8:	843b      	strh	r3, [r7, #32]
 8004bfa:	e039      	b.n	8004c70 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8004bfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	dc14      	bgt.n	8004c2e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8004c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c06:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004c08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c0c:	493d      	ldr	r1, [pc, #244]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	440b      	add	r3, r1
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <etharp_find_entry+0x220>
 8004c1e:	4b3a      	ldr	r3, [pc, #232]	; (8004d08 <etharp_find_entry+0x2d8>)
 8004c20:	f240 126d 	movw	r2, #365	; 0x16d
 8004c24:	493b      	ldr	r1, [pc, #236]	; (8004d14 <etharp_find_entry+0x2e4>)
 8004c26:	483a      	ldr	r0, [pc, #232]	; (8004d10 <etharp_find_entry+0x2e0>)
 8004c28:	f009 fcea 	bl	800e600 <iprintf>
 8004c2c:	e010      	b.n	8004c50 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004c2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	dc02      	bgt.n	8004c3c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8004c36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c38:	843b      	strh	r3, [r7, #32]
 8004c3a:	e009      	b.n	8004c50 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004c3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	dc02      	bgt.n	8004c4a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8004c44:	8bfb      	ldrh	r3, [r7, #30]
 8004c46:	843b      	strh	r3, [r7, #32]
 8004c48:	e002      	b.n	8004c50 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	e054      	b.n	8004cfa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004c50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c54:	2b09      	cmp	r3, #9
 8004c56:	dd06      	ble.n	8004c66 <etharp_find_entry+0x236>
 8004c58:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <etharp_find_entry+0x2d8>)
 8004c5a:	f240 127f 	movw	r2, #383	; 0x17f
 8004c5e:	492e      	ldr	r1, [pc, #184]	; (8004d18 <etharp_find_entry+0x2e8>)
 8004c60:	482b      	ldr	r0, [pc, #172]	; (8004d10 <etharp_find_entry+0x2e0>)
 8004c62:	f009 fccd 	bl	800e600 <iprintf>
    etharp_free_entry(i);
 8004c66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fe06 	bl	800487c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8004c70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	dd06      	ble.n	8004c86 <etharp_find_entry+0x256>
 8004c78:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <etharp_find_entry+0x2d8>)
 8004c7a:	f240 1283 	movw	r2, #387	; 0x183
 8004c7e:	4926      	ldr	r1, [pc, #152]	; (8004d18 <etharp_find_entry+0x2e8>)
 8004c80:	4823      	ldr	r0, [pc, #140]	; (8004d10 <etharp_find_entry+0x2e0>)
 8004c82:	f009 fcbd 	bl	800e600 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8004c86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004c8a:	491e      	ldr	r1, [pc, #120]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	440b      	add	r3, r1
 8004c96:	3314      	adds	r3, #20
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <etharp_find_entry+0x27c>
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <etharp_find_entry+0x2d8>)
 8004ca0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8004ca4:	491d      	ldr	r1, [pc, #116]	; (8004d1c <etharp_find_entry+0x2ec>)
 8004ca6:	481a      	ldr	r0, [pc, #104]	; (8004d10 <etharp_find_entry+0x2e0>)
 8004ca8:	f009 fcaa 	bl	800e600 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6819      	ldr	r1, [r3, #0]
 8004cba:	4812      	ldr	r0, [pc, #72]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4403      	add	r3, r0
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8004cca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	440b      	add	r3, r1
 8004cda:	3312      	adds	r3, #18
 8004cdc:	2200      	movs	r2, #0
 8004cde:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8004ce0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004ce4:	4907      	ldr	r1, [pc, #28]	; (8004d04 <etharp_find_entry+0x2d4>)
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8004cf6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3728      	adds	r7, #40	; 0x28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24004b98 	.word	0x24004b98
 8004d08:	0800f490 	.word	0x0800f490
 8004d0c:	0800f510 	.word	0x0800f510
 8004d10:	0800f550 	.word	0x0800f550
 8004d14:	0800f578 	.word	0x0800f578
 8004d18:	0800f590 	.word	0x0800f590
 8004d1c:	0800f5a4 	.word	0x0800f5a4

08004d20 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d006      	beq.n	8004d46 <etharp_update_arp_entry+0x26>
 8004d38:	4b48      	ldr	r3, [pc, #288]	; (8004e5c <etharp_update_arp_entry+0x13c>)
 8004d3a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8004d3e:	4948      	ldr	r1, [pc, #288]	; (8004e60 <etharp_update_arp_entry+0x140>)
 8004d40:	4848      	ldr	r0, [pc, #288]	; (8004e64 <etharp_update_arp_entry+0x144>)
 8004d42:	f009 fc5d 	bl	800e600 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d012      	beq.n	8004d72 <etharp_update_arp_entry+0x52>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 facc 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 8004d60:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8004d6e:	2be0      	cmp	r3, #224	; 0xe0
 8004d70:	d102      	bne.n	8004d78 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8004d72:	f06f 030f 	mvn.w	r3, #15
 8004d76:	e06c      	b.n	8004e52 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	68b8      	ldr	r0, [r7, #8]
 8004d80:	f7ff fe56 	bl	8004a30 <etharp_find_entry>
 8004d84:	4603      	mov	r3, r0
 8004d86:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8004d88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	da02      	bge.n	8004d96 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8004d90:	8afb      	ldrh	r3, [r7, #22]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	e05d      	b.n	8004e52 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004d96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004d9a:	4933      	ldr	r1, [pc, #204]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	440b      	add	r3, r1
 8004da6:	3314      	adds	r3, #20
 8004da8:	2202      	movs	r2, #2
 8004daa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8004dac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004db0:	492d      	ldr	r1, [pc, #180]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004db2:	4613      	mov	r3, r2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	440b      	add	r3, r1
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004dc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	3308      	adds	r3, #8
 8004dd0:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	2206      	movs	r2, #6
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f009 fceb 	bl	800e7b6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8004de0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004de4:	4920      	ldr	r1, [pc, #128]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004de6:	4613      	mov	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	3312      	adds	r3, #18
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8004df6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004dfa:	491b      	ldr	r1, [pc, #108]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	440b      	add	r3, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d021      	beq.n	8004e50 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8004e0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004e10:	4915      	ldr	r1, [pc, #84]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8004e20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004e24:	4910      	ldr	r1, [pc, #64]	; (8004e68 <etharp_update_arp_entry+0x148>)
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6939      	ldr	r1, [r7, #16]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fcf3 	bl	8005830 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8004e4a:	6938      	ldr	r0, [r7, #16]
 8004e4c:	f003 fbea 	bl	8008624 <pbuf_free>
  }
  return ERR_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	0800f490 	.word	0x0800f490
 8004e60:	0800f5d0 	.word	0x0800f5d0
 8004e64:	0800f550 	.word	0x0800f550
 8004e68:	24004b98 	.word	0x24004b98

08004e6c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e01e      	b.n	8004eb8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8004e7a:	4913      	ldr	r1, [pc, #76]	; (8004ec8 <etharp_cleanup_netif+0x5c>)
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	440b      	add	r3, r1
 8004e88:	3314      	adds	r3, #20
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <etharp_cleanup_netif+0x46>
 8004e94:	490c      	ldr	r1, [pc, #48]	; (8004ec8 <etharp_cleanup_netif+0x5c>)
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d102      	bne.n	8004eb2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fce5 	bl	800487c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	dddd      	ble.n	8004e7a <etharp_cleanup_netif+0xe>
    }
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	24004b98 	.word	0x24004b98

08004ecc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8004ecc:	b5b0      	push	{r4, r5, r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af04      	add	r7, sp, #16
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d107      	bne.n	8004eec <etharp_input+0x20>
 8004edc:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <etharp_input+0x108>)
 8004ede:	f240 228a 	movw	r2, #650	; 0x28a
 8004ee2:	493d      	ldr	r1, [pc, #244]	; (8004fd8 <etharp_input+0x10c>)
 8004ee4:	483d      	ldr	r0, [pc, #244]	; (8004fdc <etharp_input+0x110>)
 8004ee6:	f009 fb8b 	bl	800e600 <iprintf>
 8004eea:	e06f      	b.n	8004fcc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efc:	d10c      	bne.n	8004f18 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d108      	bne.n	8004f18 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d104      	bne.n	8004f18 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	885b      	ldrh	r3, [r3, #2]
 8004f12:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d003      	beq.n	8004f20 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f003 fb83 	bl	8008624 <pbuf_free>
    return;
 8004f1e:	e055      	b.n	8004fcc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	330e      	adds	r3, #14
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3318      	adds	r3, #24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	3304      	adds	r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <etharp_input+0x74>
    for_us = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]
 8004f3e:	e009      	b.n	8004f54 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	3304      	adds	r3, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f103 0208 	add.w	r2, r3, #8
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <etharp_input+0x98>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <etharp_input+0x9a>
 8004f64:	2302      	movs	r3, #2
 8004f66:	f107 010c 	add.w	r1, r7, #12
 8004f6a:	6838      	ldr	r0, [r7, #0]
 8004f6c:	f7ff fed8 	bl	8004d20 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	88db      	ldrh	r3, [r3, #6]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7a:	d003      	beq.n	8004f84 <etharp_input+0xb8>
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f80:	d01e      	beq.n	8004fc0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8004f82:	e020      	b.n	8004fc6 <etharp_input+0xfa>
      if (for_us) {
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01c      	beq.n	8004fc4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	9103      	str	r1, [sp, #12]
 8004fa8:	f107 010c 	add.w	r1, r7, #12
 8004fac:	9102      	str	r1, [sp, #8]
 8004fae:	9201      	str	r2, [sp, #4]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	6838      	ldr	r0, [r7, #0]
 8004fba:	f000 faeb 	bl	8005594 <etharp_raw>
      break;
 8004fbe:	e001      	b.n	8004fc4 <etharp_input+0xf8>
      break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <etharp_input+0xfa>
      break;
 8004fc4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f003 fb2c 	bl	8008624 <pbuf_free>
}
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	0800f490 	.word	0x0800f490
 8004fd8:	0800f628 	.word	0x0800f628
 8004fdc:	0800f550 	.word	0x0800f550

08004fe0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004fee:	79fa      	ldrb	r2, [r7, #7]
 8004ff0:	4944      	ldr	r1, [pc, #272]	; (8005104 <etharp_output_to_arp_index+0x124>)
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d806      	bhi.n	8005012 <etharp_output_to_arp_index+0x32>
 8005004:	4b40      	ldr	r3, [pc, #256]	; (8005108 <etharp_output_to_arp_index+0x128>)
 8005006:	f240 22ee 	movw	r2, #750	; 0x2ee
 800500a:	4940      	ldr	r1, [pc, #256]	; (800510c <etharp_output_to_arp_index+0x12c>)
 800500c:	4840      	ldr	r0, [pc, #256]	; (8005110 <etharp_output_to_arp_index+0x130>)
 800500e:	f009 faf7 	bl	800e600 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005012:	79fa      	ldrb	r2, [r7, #7]
 8005014:	493b      	ldr	r1, [pc, #236]	; (8005104 <etharp_output_to_arp_index+0x124>)
 8005016:	4613      	mov	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	3314      	adds	r3, #20
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d153      	bne.n	80050d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005028:	79fa      	ldrb	r2, [r7, #7]
 800502a:	4936      	ldr	r1, [pc, #216]	; (8005104 <etharp_output_to_arp_index+0x124>)
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	440b      	add	r3, r1
 8005036:	3312      	adds	r3, #18
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800503e:	d919      	bls.n	8005074 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005040:	79fa      	ldrb	r2, [r7, #7]
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4a2e      	ldr	r2, [pc, #184]	; (8005104 <etharp_output_to_arp_index+0x124>)
 800504c:	4413      	add	r3, r2
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fb4c 	bl	80056f0 <etharp_request>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d138      	bne.n	80050d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800505e:	79fa      	ldrb	r2, [r7, #7]
 8005060:	4928      	ldr	r1, [pc, #160]	; (8005104 <etharp_output_to_arp_index+0x124>)
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	3314      	adds	r3, #20
 800506e:	2203      	movs	r2, #3
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e02d      	b.n	80050d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005074:	79fa      	ldrb	r2, [r7, #7]
 8005076:	4923      	ldr	r1, [pc, #140]	; (8005104 <etharp_output_to_arp_index+0x124>)
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	3312      	adds	r3, #18
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800508a:	d321      	bcc.n	80050d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800508c:	79fa      	ldrb	r2, [r7, #7]
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <etharp_output_to_arp_index+0x124>)
 8005098:	4413      	add	r3, r2
 800509a:	1d19      	adds	r1, r3, #4
 800509c:	79fa      	ldrb	r2, [r7, #7]
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	3308      	adds	r3, #8
 80050a8:	4a16      	ldr	r2, [pc, #88]	; (8005104 <etharp_output_to_arp_index+0x124>)
 80050aa:	4413      	add	r3, r2
 80050ac:	3304      	adds	r3, #4
 80050ae:	461a      	mov	r2, r3
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fafb 	bl	80056ac <etharp_request_dst>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80050bc:	79fa      	ldrb	r2, [r7, #7]
 80050be:	4911      	ldr	r1, [pc, #68]	; (8005104 <etharp_output_to_arp_index+0x124>)
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	440b      	add	r3, r1
 80050ca:	3314      	adds	r3, #20
 80050cc:	2203      	movs	r2, #3
 80050ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80050d6:	79fa      	ldrb	r2, [r7, #7]
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	3308      	adds	r3, #8
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <etharp_output_to_arp_index+0x124>)
 80050e4:	4413      	add	r3, r2
 80050e6:	3304      	adds	r3, #4
 80050e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ec:	9200      	str	r2, [sp, #0]
 80050ee:	460a      	mov	r2, r1
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fb9c 	bl	8005830 <ethernet_output>
 80050f8:	4603      	mov	r3, r0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	24004b98 	.word	0x24004b98
 8005108:	0800f490 	.word	0x0800f490
 800510c:	0800f648 	.word	0x0800f648
 8005110:	0800f550 	.word	0x0800f550

08005114 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <etharp_output+0x24>
 800512a:	4b73      	ldr	r3, [pc, #460]	; (80052f8 <etharp_output+0x1e4>)
 800512c:	f240 321e 	movw	r2, #798	; 0x31e
 8005130:	4972      	ldr	r1, [pc, #456]	; (80052fc <etharp_output+0x1e8>)
 8005132:	4873      	ldr	r0, [pc, #460]	; (8005300 <etharp_output+0x1ec>)
 8005134:	f009 fa64 	bl	800e600 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <etharp_output+0x38>
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <etharp_output+0x1e4>)
 8005140:	f240 321f 	movw	r2, #799	; 0x31f
 8005144:	496f      	ldr	r1, [pc, #444]	; (8005304 <etharp_output+0x1f0>)
 8005146:	486e      	ldr	r0, [pc, #440]	; (8005300 <etharp_output+0x1ec>)
 8005148:	f009 fa5a 	bl	800e600 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <etharp_output+0x4c>
 8005152:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <etharp_output+0x1e4>)
 8005154:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005158:	496b      	ldr	r1, [pc, #428]	; (8005308 <etharp_output+0x1f4>)
 800515a:	4869      	ldr	r0, [pc, #420]	; (8005300 <etharp_output+0x1ec>)
 800515c:	f009 fa50 	bl	800e600 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68f9      	ldr	r1, [r7, #12]
 8005166:	4618      	mov	r0, r3
 8005168:	f001 f8c6 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8005172:	4b66      	ldr	r3, [pc, #408]	; (800530c <etharp_output+0x1f8>)
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e0af      	b.n	80052d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005180:	2be0      	cmp	r3, #224	; 0xe0
 8005182:	d118      	bne.n	80051b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005184:	2301      	movs	r3, #1
 8005186:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005188:	2300      	movs	r3, #0
 800518a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800518c:	235e      	movs	r3, #94	; 0x5e
 800518e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3301      	adds	r3, #1
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	b2db      	uxtb	r3, r3
 800519c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3302      	adds	r3, #2
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3303      	adds	r3, #3
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80051ae:	f107 0310 	add.w	r3, r7, #16
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	e090      	b.n	80052d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3304      	adds	r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	405a      	eors	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3308      	adds	r3, #8
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d012      	beq.n	80051f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80051d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	330c      	adds	r3, #12
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	330c      	adds	r3, #12
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e002      	b.n	80051f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80051ee:	f06f 0303 	mvn.w	r3, #3
 80051f2:	e07d      	b.n	80052f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80051f4:	4b46      	ldr	r3, [pc, #280]	; (8005310 <etharp_output+0x1fc>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	4619      	mov	r1, r3
 80051fa:	4a46      	ldr	r2, [pc, #280]	; (8005314 <etharp_output+0x200>)
 80051fc:	460b      	mov	r3, r1
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	440b      	add	r3, r1
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	3314      	adds	r3, #20
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d925      	bls.n	800525a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800520e:	4b40      	ldr	r3, [pc, #256]	; (8005310 <etharp_output+0x1fc>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	4a3f      	ldr	r2, [pc, #252]	; (8005314 <etharp_output+0x200>)
 8005216:	460b      	mov	r3, r1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	440b      	add	r3, r1
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4413      	add	r3, r2
 8005220:	3308      	adds	r3, #8
 8005222:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	429a      	cmp	r2, r3
 8005228:	d117      	bne.n	800525a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b38      	ldr	r3, [pc, #224]	; (8005310 <etharp_output+0x1fc>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	4937      	ldr	r1, [pc, #220]	; (8005314 <etharp_output+0x200>)
 8005236:	4603      	mov	r3, r0
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4403      	add	r3, r0
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	440b      	add	r3, r1
 8005240:	3304      	adds	r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005248:	4b31      	ldr	r3, [pc, #196]	; (8005310 <etharp_output+0x1fc>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fec5 	bl	8004fe0 <etharp_output_to_arp_index>
 8005256:	4603      	mov	r3, r0
 8005258:	e04a      	b.n	80052f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]
 800525e:	e031      	b.n	80052c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005260:	7dfa      	ldrb	r2, [r7, #23]
 8005262:	492c      	ldr	r1, [pc, #176]	; (8005314 <etharp_output+0x200>)
 8005264:	4613      	mov	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4413      	add	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	440b      	add	r3, r1
 800526e:	3314      	adds	r3, #20
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d923      	bls.n	80052be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8005276:	7dfa      	ldrb	r2, [r7, #23]
 8005278:	4926      	ldr	r1, [pc, #152]	; (8005314 <etharp_output+0x200>)
 800527a:	4613      	mov	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	3308      	adds	r3, #8
 8005286:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	429a      	cmp	r2, r3
 800528c:	d117      	bne.n	80052be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	6819      	ldr	r1, [r3, #0]
 8005292:	7dfa      	ldrb	r2, [r7, #23]
 8005294:	481f      	ldr	r0, [pc, #124]	; (8005314 <etharp_output+0x200>)
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4403      	add	r3, r0
 80052a0:	3304      	adds	r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80052a4:	4299      	cmp	r1, r3
 80052a6:	d10a      	bne.n	80052be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80052a8:	4a19      	ldr	r2, [pc, #100]	; (8005310 <etharp_output+0x1fc>)
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fe93 	bl	8004fe0 <etharp_output_to_arp_index>
 80052ba:	4603      	mov	r3, r0
 80052bc:	e018      	b.n	80052f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	3301      	adds	r3, #1
 80052c2:	75fb      	strb	r3, [r7, #23]
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d9ca      	bls.n	8005260 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	69b9      	ldr	r1, [r7, #24]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f822 	bl	8005318 <etharp_query>
 80052d4:	4603      	mov	r3, r0
 80052d6:	e00b      	b.n	80052f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80052de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 faa1 	bl	8005830 <ethernet_output>
 80052ee:	4603      	mov	r3, r0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	0800f490 	.word	0x0800f490
 80052fc:	0800f628 	.word	0x0800f628
 8005300:	0800f550 	.word	0x0800f550
 8005304:	0800f678 	.word	0x0800f678
 8005308:	0800f618 	.word	0x0800f618
 800530c:	08012218 	.word	0x08012218
 8005310:	24004c88 	.word	0x24004c88
 8005314:	24004b98 	.word	0x24004b98

08005318 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3326      	adds	r3, #38	; 0x26
 8005328:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800532a:	23ff      	movs	r3, #255	; 0xff
 800532c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 ffdc 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10c      	bne.n	8005360 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800534e:	2be0      	cmp	r3, #224	; 0xe0
 8005350:	d006      	beq.n	8005360 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8005360:	f06f 030f 	mvn.w	r3, #15
 8005364:	e101      	b.n	800556a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	2101      	movs	r1, #1
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f7ff fb60 	bl	8004a30 <etharp_find_entry>
 8005370:	4603      	mov	r3, r0
 8005372:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8005374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005378:	2b00      	cmp	r3, #0
 800537a:	da02      	bge.n	8005382 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800537c:	8a7b      	ldrh	r3, [r7, #18]
 800537e:	b25b      	sxtb	r3, r3
 8005380:	e0f3      	b.n	800556a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8005382:	8a7b      	ldrh	r3, [r7, #18]
 8005384:	2b7e      	cmp	r3, #126	; 0x7e
 8005386:	d906      	bls.n	8005396 <etharp_query+0x7e>
 8005388:	4b7a      	ldr	r3, [pc, #488]	; (8005574 <etharp_query+0x25c>)
 800538a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800538e:	497a      	ldr	r1, [pc, #488]	; (8005578 <etharp_query+0x260>)
 8005390:	487a      	ldr	r0, [pc, #488]	; (800557c <etharp_query+0x264>)
 8005392:	f009 f935 	bl	800e600 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8005396:	8a7b      	ldrh	r3, [r7, #18]
 8005398:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800539a:	7c7a      	ldrb	r2, [r7, #17]
 800539c:	4978      	ldr	r1, [pc, #480]	; (8005580 <etharp_query+0x268>)
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	3314      	adds	r3, #20
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d115      	bne.n	80053dc <etharp_query+0xc4>
    is_new_entry = 1;
 80053b0:	2301      	movs	r3, #1
 80053b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80053b4:	7c7a      	ldrb	r2, [r7, #17]
 80053b6:	4972      	ldr	r1, [pc, #456]	; (8005580 <etharp_query+0x268>)
 80053b8:	4613      	mov	r3, r2
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	4413      	add	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	440b      	add	r3, r1
 80053c2:	3314      	adds	r3, #20
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80053c8:	7c7a      	ldrb	r2, [r7, #17]
 80053ca:	496d      	ldr	r1, [pc, #436]	; (8005580 <etharp_query+0x268>)
 80053cc:	4613      	mov	r3, r2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	440b      	add	r3, r1
 80053d6:	3308      	adds	r3, #8
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80053dc:	7c7a      	ldrb	r2, [r7, #17]
 80053de:	4968      	ldr	r1, [pc, #416]	; (8005580 <etharp_query+0x268>)
 80053e0:	4613      	mov	r3, r2
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	4413      	add	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	440b      	add	r3, r1
 80053ea:	3314      	adds	r3, #20
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d011      	beq.n	8005416 <etharp_query+0xfe>
 80053f2:	7c7a      	ldrb	r2, [r7, #17]
 80053f4:	4962      	ldr	r1, [pc, #392]	; (8005580 <etharp_query+0x268>)
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	3314      	adds	r3, #20
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d806      	bhi.n	8005416 <etharp_query+0xfe>
 8005408:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <etharp_query+0x25c>)
 800540a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800540e:	495d      	ldr	r1, [pc, #372]	; (8005584 <etharp_query+0x26c>)
 8005410:	485a      	ldr	r0, [pc, #360]	; (800557c <etharp_query+0x264>)
 8005412:	f009 f8f5 	bl	800e600 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <etharp_query+0x10a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f963 	bl	80056f0 <etharp_request>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <etharp_query+0x124>
      return result;
 8005436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800543a:	e096      	b.n	800556a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <etharp_query+0x138>
 8005442:	4b4c      	ldr	r3, [pc, #304]	; (8005574 <etharp_query+0x25c>)
 8005444:	f240 32e1 	movw	r2, #993	; 0x3e1
 8005448:	494f      	ldr	r1, [pc, #316]	; (8005588 <etharp_query+0x270>)
 800544a:	484c      	ldr	r0, [pc, #304]	; (800557c <etharp_query+0x264>)
 800544c:	f009 f8d8 	bl	800e600 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005450:	7c7a      	ldrb	r2, [r7, #17]
 8005452:	494b      	ldr	r1, [pc, #300]	; (8005580 <etharp_query+0x268>)
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	3314      	adds	r3, #20
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d917      	bls.n	8005496 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8005466:	4a49      	ldr	r2, [pc, #292]	; (800558c <etharp_query+0x274>)
 8005468:	7c7b      	ldrb	r3, [r7, #17]
 800546a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800546c:	7c7a      	ldrb	r2, [r7, #17]
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	3308      	adds	r3, #8
 8005478:	4a41      	ldr	r2, [pc, #260]	; (8005580 <etharp_query+0x268>)
 800547a:	4413      	add	r3, r2
 800547c:	3304      	adds	r3, #4
 800547e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005482:	9200      	str	r2, [sp, #0]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f9d1 	bl	8005830 <ethernet_output>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005494:	e067      	b.n	8005566 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005496:	7c7a      	ldrb	r2, [r7, #17]
 8005498:	4939      	ldr	r1, [pc, #228]	; (8005580 <etharp_query+0x268>)
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	3314      	adds	r3, #20
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d15c      	bne.n	8005566 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80054b4:	e01c      	b.n	80054f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	895a      	ldrh	r2, [r3, #10]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	891b      	ldrh	r3, [r3, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d10a      	bne.n	80054d8 <etharp_query+0x1c0>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <etharp_query+0x1c0>
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <etharp_query+0x25c>)
 80054cc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80054d0:	492f      	ldr	r1, [pc, #188]	; (8005590 <etharp_query+0x278>)
 80054d2:	482a      	ldr	r0, [pc, #168]	; (800557c <etharp_query+0x264>)
 80054d4:	f009 f894 	bl	800e600 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	7b1b      	ldrb	r3, [r3, #12]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <etharp_query+0x1d2>
        copy_needed = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	61bb      	str	r3, [r7, #24]
        break;
 80054e8:	e005      	b.n	80054f6 <etharp_query+0x1de>
      }
      p = p->next;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1df      	bne.n	80054b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005502:	200e      	movs	r0, #14
 8005504:	f003 faea 	bl	8008adc <pbuf_clone>
 8005508:	61f8      	str	r0, [r7, #28]
 800550a:	e004      	b.n	8005516 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8005510:	69f8      	ldr	r0, [r7, #28]
 8005512:	f003 f927 	bl	8008764 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d021      	beq.n	8005560 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800551c:	7c7a      	ldrb	r2, [r7, #17]
 800551e:	4918      	ldr	r1, [pc, #96]	; (8005580 <etharp_query+0x268>)
 8005520:	4613      	mov	r3, r2
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	4413      	add	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	440b      	add	r3, r1
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8005530:	7c7a      	ldrb	r2, [r7, #17]
 8005532:	4913      	ldr	r1, [pc, #76]	; (8005580 <etharp_query+0x268>)
 8005534:	4613      	mov	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	440b      	add	r3, r1
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f003 f86f 	bl	8008624 <pbuf_free>
      }
      arp_table[i].q = p;
 8005546:	7c7a      	ldrb	r2, [r7, #17]
 8005548:	490d      	ldr	r1, [pc, #52]	; (8005580 <etharp_query+0x268>)
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	440b      	add	r3, r1
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800555e:	e002      	b.n	8005566 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8005560:	23ff      	movs	r3, #255	; 0xff
 8005562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8005566:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800556a:	4618      	mov	r0, r3
 800556c:	3728      	adds	r7, #40	; 0x28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	0800f490 	.word	0x0800f490
 8005578:	0800f684 	.word	0x0800f684
 800557c:	0800f550 	.word	0x0800f550
 8005580:	24004b98 	.word	0x24004b98
 8005584:	0800f694 	.word	0x0800f694
 8005588:	0800f678 	.word	0x0800f678
 800558c:	24004c88 	.word	0x24004c88
 8005590:	0800f6bc 	.word	0x0800f6bc

08005594 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <etharp_raw+0x26>
 80055ac:	4b3a      	ldr	r3, [pc, #232]	; (8005698 <etharp_raw+0x104>)
 80055ae:	f240 4257 	movw	r2, #1111	; 0x457
 80055b2:	493a      	ldr	r1, [pc, #232]	; (800569c <etharp_raw+0x108>)
 80055b4:	483a      	ldr	r0, [pc, #232]	; (80056a0 <etharp_raw+0x10c>)
 80055b6:	f009 f823 	bl	800e600 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80055ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80055be:	211c      	movs	r1, #28
 80055c0:	200e      	movs	r0, #14
 80055c2:	f002 fd4b 	bl	800805c <pbuf_alloc>
 80055c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295
 80055d2:	e05d      	b.n	8005690 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	895b      	ldrh	r3, [r3, #10]
 80055d8:	2b1b      	cmp	r3, #27
 80055da:	d806      	bhi.n	80055ea <etharp_raw+0x56>
 80055dc:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <etharp_raw+0x104>)
 80055de:	f240 4262 	movw	r2, #1122	; 0x462
 80055e2:	4930      	ldr	r1, [pc, #192]	; (80056a4 <etharp_raw+0x110>)
 80055e4:	482e      	ldr	r0, [pc, #184]	; (80056a0 <etharp_raw+0x10c>)
 80055e6:	f009 f80b 	bl	800e600 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80055f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff f914 	bl	8004820 <lwip_htons>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461a      	mov	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005606:	2b06      	cmp	r3, #6
 8005608:	d006      	beq.n	8005618 <etharp_raw+0x84>
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <etharp_raw+0x104>)
 800560c:	f240 4269 	movw	r2, #1129	; 0x469
 8005610:	4925      	ldr	r1, [pc, #148]	; (80056a8 <etharp_raw+0x114>)
 8005612:	4823      	ldr	r0, [pc, #140]	; (80056a0 <etharp_raw+0x10c>)
 8005614:	f008 fff4 	bl	800e600 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3308      	adds	r3, #8
 800561c:	2206      	movs	r2, #6
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f009 f8c8 	bl	800e7b6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	3312      	adds	r3, #18
 800562a:	2206      	movs	r2, #6
 800562c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800562e:	4618      	mov	r0, r3
 8005630:	f009 f8c1 	bl	800e7b6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	330e      	adds	r3, #14
 8005638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3318      	adds	r3, #24
 8005642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	709a      	strb	r2, [r3, #2]
 8005660:	2200      	movs	r2, #0
 8005662:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2206      	movs	r2, #6
 8005668:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2204      	movs	r2, #4
 800566e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005670:	f640 0306 	movw	r3, #2054	; 0x806
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	69b9      	ldr	r1, [r7, #24]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f8d7 	bl	8005830 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005682:	69b8      	ldr	r0, [r7, #24]
 8005684:	f002 ffce 	bl	8008624 <pbuf_free>
  p = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800568c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3720      	adds	r7, #32
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	0800f490 	.word	0x0800f490
 800569c:	0800f628 	.word	0x0800f628
 80056a0:	0800f550 	.word	0x0800f550
 80056a4:	0800f6d8 	.word	0x0800f6d8
 80056a8:	0800f70c 	.word	0x0800f70c

080056ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af04      	add	r7, sp, #16
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80056c8:	2201      	movs	r2, #1
 80056ca:	9203      	str	r2, [sp, #12]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	9202      	str	r2, [sp, #8]
 80056d0:	4a06      	ldr	r2, [pc, #24]	; (80056ec <etharp_request_dst+0x40>)
 80056d2:	9201      	str	r2, [sp, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	4603      	mov	r3, r0
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff ff5a 	bl	8005594 <etharp_raw>
 80056e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	08012220 	.word	0x08012220

080056f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <etharp_request+0x20>)
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff ffd4 	bl	80056ac <etharp_request_dst>
 8005704:	4603      	mov	r3, r0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	08012218 	.word	0x08012218

08005714 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800571e:	230e      	movs	r3, #14
 8005720:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	895b      	ldrh	r3, [r3, #10]
 8005726:	2b0e      	cmp	r3, #14
 8005728:	d96e      	bls.n	8005808 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7bdb      	ldrb	r3, [r3, #15]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005738:	3301      	adds	r3, #1
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	7b1a      	ldrb	r2, [r3, #12]
 800574a:	7b5b      	ldrb	r3, [r3, #13]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	4313      	orrs	r3, r2
 8005750:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d023      	beq.n	80057a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10f      	bne.n	8005786 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11b      	bne.n	80057a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8005772:	2b5e      	cmp	r3, #94	; 0x5e
 8005774:	d117      	bne.n	80057a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7b5b      	ldrb	r3, [r3, #13]
 800577a:	f043 0310 	orr.w	r3, r3, #16
 800577e:	b2da      	uxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	735a      	strb	r2, [r3, #13]
 8005784:	e00f      	b.n	80057a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2206      	movs	r2, #6
 800578a:	4928      	ldr	r1, [pc, #160]	; (800582c <ethernet_input+0x118>)
 800578c:	4618      	mov	r0, r3
 800578e:	f008 ff8c 	bl	800e6aa <memcmp>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7b5b      	ldrb	r3, [r3, #13]
 800579c:	f043 0308 	orr.w	r3, r3, #8
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d003      	beq.n	80057b4 <ethernet_input+0xa0>
 80057ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80057b0:	d014      	beq.n	80057dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80057b2:	e032      	b.n	800581a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d024      	beq.n	800580c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f002 fea6 	bl	8008518 <pbuf_remove_header>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11e      	bne.n	8005810 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fb93 	bl	8005f00 <ip4_input>
      break;
 80057da:	e013      	b.n	8005804 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80057ea:	8afb      	ldrh	r3, [r7, #22]
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f002 fe92 	bl	8008518 <pbuf_remove_header>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10e      	bne.n	8005818 <ethernet_input+0x104>
        etharp_input(p, netif);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fb65 	bl	8004ecc <etharp_input>
      break;
 8005802:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e00c      	b.n	8005822 <ethernet_input+0x10e>
    goto free_and_return;
 8005808:	bf00      	nop
 800580a:	e006      	b.n	800581a <ethernet_input+0x106>
        goto free_and_return;
 800580c:	bf00      	nop
 800580e:	e004      	b.n	800581a <ethernet_input+0x106>
        goto free_and_return;
 8005810:	bf00      	nop
 8005812:	e002      	b.n	800581a <ethernet_input+0x106>
        goto free_and_return;
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <ethernet_input+0x106>
        goto free_and_return;
 8005818:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 ff02 	bl	8008624 <pbuf_free>
  return ERR_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	08012218 	.word	0x08012218

08005830 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800583e:	8c3b      	ldrh	r3, [r7, #32]
 8005840:	4618      	mov	r0, r3
 8005842:	f7fe ffed 	bl	8004820 <lwip_htons>
 8005846:	4603      	mov	r3, r0
 8005848:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800584a:	210e      	movs	r1, #14
 800584c:	68b8      	ldr	r0, [r7, #8]
 800584e:	f002 fe53 	bl	80084f8 <pbuf_add_header>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d125      	bne.n	80058a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	8afa      	ldrh	r2, [r7, #22]
 8005862:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2206      	movs	r2, #6
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f008 ffa3 	bl	800e7b6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3306      	adds	r3, #6
 8005874:	2206      	movs	r2, #6
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4618      	mov	r0, r3
 800587a:	f008 ff9c 	bl	800e7b6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005884:	2b06      	cmp	r3, #6
 8005886:	d006      	beq.n	8005896 <ethernet_output+0x66>
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <ethernet_output+0x84>)
 800588a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800588e:	490a      	ldr	r1, [pc, #40]	; (80058b8 <ethernet_output+0x88>)
 8005890:	480a      	ldr	r0, [pc, #40]	; (80058bc <ethernet_output+0x8c>)
 8005892:	f008 feb5 	bl	800e600 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	4798      	blx	r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	e002      	b.n	80058aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80058a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80058a6:	f06f 0301 	mvn.w	r3, #1
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	0800f750 	.word	0x0800f750
 80058b8:	0800f7cc 	.word	0x0800f7cc
 80058bc:	0800f800 	.word	0x0800f800

080058c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08e      	sub	sp, #56	; 0x38
 80058c4:	af04      	add	r7, sp, #16
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80058ca:	4b87      	ldr	r3, [pc, #540]	; (8005ae8 <icmp_input+0x228>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80058e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058e2:	2b13      	cmp	r3, #19
 80058e4:	f240 80e8 	bls.w	8005ab8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	895b      	ldrh	r3, [r3, #10]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	f240 80e5 	bls.w	8005abc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80058fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80d2 	beq.w	8005aaa <icmp_input+0x1ea>
 8005906:	2b08      	cmp	r3, #8
 8005908:	f040 80d2 	bne.w	8005ab0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800590c:	4b77      	ldr	r3, [pc, #476]	; (8005aec <icmp_input+0x22c>)
 800590e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005910:	4b75      	ldr	r3, [pc, #468]	; (8005ae8 <icmp_input+0x228>)
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005918:	2be0      	cmp	r3, #224	; 0xe0
 800591a:	f000 80d6 	beq.w	8005aca <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800591e:	4b72      	ldr	r3, [pc, #456]	; (8005ae8 <icmp_input+0x228>)
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4a71      	ldr	r2, [pc, #452]	; (8005ae8 <icmp_input+0x228>)
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fce5 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 80cc 	bne.w	8005ace <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	891b      	ldrh	r3, [r3, #8]
 800593a:	2b07      	cmp	r3, #7
 800593c:	f240 80c0 	bls.w	8005ac0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f9e0 	bl	8005d06 <inet_chksum_pbuf>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f002 fe69 	bl	8008624 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8005952:	e0c5      	b.n	8005ae0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8005954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005956:	330e      	adds	r3, #14
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f002 fdcc 	bl	80084f8 <pbuf_add_header>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d04b      	beq.n	80059fe <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	891a      	ldrh	r2, [r3, #8]
 800596a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800596c:	4413      	add	r3, r2
 800596e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	891b      	ldrh	r3, [r3, #8]
 8005974:	8b7a      	ldrh	r2, [r7, #26]
 8005976:	429a      	cmp	r2, r3
 8005978:	f0c0 80ab 	bcc.w	8005ad2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800597c:	8b7b      	ldrh	r3, [r7, #26]
 800597e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005982:	4619      	mov	r1, r3
 8005984:	200e      	movs	r0, #14
 8005986:	f002 fb69 	bl	800805c <pbuf_alloc>
 800598a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80a1 	beq.w	8005ad6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	895b      	ldrh	r3, [r3, #10]
 8005998:	461a      	mov	r2, r3
 800599a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800599c:	3308      	adds	r3, #8
 800599e:	429a      	cmp	r2, r3
 80059a0:	d203      	bcs.n	80059aa <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f002 fe3e 	bl	8008624 <pbuf_free>
          goto icmperr;
 80059a8:	e096      	b.n	8005ad8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80059b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059b2:	4618      	mov	r0, r3
 80059b4:	f008 feff 	bl	800e7b6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80059b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059ba:	4619      	mov	r1, r3
 80059bc:	6978      	ldr	r0, [r7, #20]
 80059be:	f002 fdab 	bl	8008518 <pbuf_remove_header>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80059c8:	4b49      	ldr	r3, [pc, #292]	; (8005af0 <icmp_input+0x230>)
 80059ca:	22b6      	movs	r2, #182	; 0xb6
 80059cc:	4949      	ldr	r1, [pc, #292]	; (8005af4 <icmp_input+0x234>)
 80059ce:	484a      	ldr	r0, [pc, #296]	; (8005af8 <icmp_input+0x238>)
 80059d0:	f008 fe16 	bl	800e600 <iprintf>
          pbuf_free(r);
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f002 fe25 	bl	8008624 <pbuf_free>
          goto icmperr;
 80059da:	e07d      	b.n	8005ad8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	6978      	ldr	r0, [r7, #20]
 80059e0:	f002 ff38 	bl	8008854 <pbuf_copy>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f002 fe1a 	bl	8008624 <pbuf_free>
          goto icmperr;
 80059f0:	e072      	b.n	8005ad8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f002 fe16 	bl	8008624 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	607b      	str	r3, [r7, #4]
 80059fc:	e00f      	b.n	8005a1e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80059fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a00:	330e      	adds	r3, #14
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f002 fd87 	bl	8008518 <pbuf_remove_header>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005a10:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <icmp_input+0x230>)
 8005a12:	22c7      	movs	r2, #199	; 0xc7
 8005a14:	4939      	ldr	r1, [pc, #228]	; (8005afc <icmp_input+0x23c>)
 8005a16:	4838      	ldr	r0, [pc, #224]	; (8005af8 <icmp_input+0x238>)
 8005a18:	f008 fdf2 	bl	800e600 <iprintf>
          goto icmperr;
 8005a1c:	e05c      	b.n	8005ad8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8005a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f002 fd65 	bl	80084f8 <pbuf_add_header>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d13c      	bne.n	8005aae <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <icmp_input+0x228>)
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	885b      	ldrh	r3, [r3, #2]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d907      	bls.n	8005a6e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	885b      	ldrh	r3, [r3, #2]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3309      	adds	r3, #9
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	805a      	strh	r2, [r3, #2]
 8005a6c:	e006      	b.n	8005a7c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	885b      	ldrh	r3, [r3, #2]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3308      	adds	r3, #8
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	22ff      	movs	r2, #255	; 0xff
 8005a80:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	729a      	strb	r2, [r3, #10]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	2301      	movs	r3, #1
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	2300      	movs	r3, #0
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	23ff      	movs	r3, #255	; 0xff
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fb52 	bl	8006148 <ip4_output_if>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8005aa8:	e001      	b.n	8005aae <icmp_input+0x1ee>
      break;
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <icmp_input+0x1f0>
      break;
 8005aae:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f002 fdb7 	bl	8008624 <pbuf_free>
  return;
 8005ab6:	e013      	b.n	8005ae0 <icmp_input+0x220>
    goto lenerr;
 8005ab8:	bf00      	nop
 8005aba:	e002      	b.n	8005ac2 <icmp_input+0x202>
    goto lenerr;
 8005abc:	bf00      	nop
 8005abe:	e000      	b.n	8005ac2 <icmp_input+0x202>
        goto lenerr;
 8005ac0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f002 fdae 	bl	8008624 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005ac8:	e00a      	b.n	8005ae0 <icmp_input+0x220>
        goto icmperr;
 8005aca:	bf00      	nop
 8005acc:	e004      	b.n	8005ad8 <icmp_input+0x218>
        goto icmperr;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <icmp_input+0x218>
          goto icmperr;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <icmp_input+0x218>
          goto icmperr;
 8005ad6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f002 fda3 	bl	8008624 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8005ade:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	24004c8c 	.word	0x24004c8c
 8005aec:	24004ca0 	.word	0x24004ca0
 8005af0:	0800f828 	.word	0x0800f828
 8005af4:	0800f8a4 	.word	0x0800f8a4
 8005af8:	0800f8dc 	.word	0x0800f8dc
 8005afc:	0800f904 	.word	0x0800f904

08005b00 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2103      	movs	r1, #3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f814 	bl	8005b40 <icmp_send_response>
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	210b      	movs	r1, #11
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f804 	bl	8005b40 <icmp_send_response>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af04      	add	r7, sp, #16
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005b50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005b54:	2124      	movs	r1, #36	; 0x24
 8005b56:	2022      	movs	r0, #34	; 0x22
 8005b58:	f002 fa80 	bl	800805c <pbuf_alloc>
 8005b5c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d056      	beq.n	8005c12 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	895b      	ldrh	r3, [r3, #10]
 8005b68:	2b23      	cmp	r3, #35	; 0x23
 8005b6a:	d806      	bhi.n	8005b7a <icmp_send_response+0x3a>
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <icmp_send_response+0xdc>)
 8005b6e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005b72:	492b      	ldr	r1, [pc, #172]	; (8005c20 <icmp_send_response+0xe0>)
 8005b74:	482b      	ldr	r0, [pc, #172]	; (8005c24 <icmp_send_response+0xe4>)
 8005b76:	f008 fd43 	bl	800e600 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	78fa      	ldrb	r2, [r7, #3]
 8005b8a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	78ba      	ldrb	r2, [r7, #2]
 8005b90:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	711a      	strb	r2, [r3, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	719a      	strb	r2, [r3, #6]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f103 0008 	add.w	r0, r3, #8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	221c      	movs	r2, #28
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f008 fdfe 	bl	800e7b6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005bc0:	f107 030c 	add.w	r3, r7, #12
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f901 	bl	8005dcc <ip4_route>
 8005bca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01b      	beq.n	8005c0a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	709a      	strb	r2, [r3, #2]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	895b      	ldrh	r3, [r3, #10]
 8005be0:	4619      	mov	r1, r3
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f000 f87d 	bl	8005ce2 <inet_chksum>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005bf0:	f107 020c 	add.w	r2, r7, #12
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	9302      	str	r3, [sp, #8]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	9301      	str	r3, [sp, #4]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	23ff      	movs	r3, #255	; 0xff
 8005c02:	2100      	movs	r1, #0
 8005c04:	69f8      	ldr	r0, [r7, #28]
 8005c06:	f000 fa9f 	bl	8006148 <ip4_output_if>
  }
  pbuf_free(q);
 8005c0a:	69f8      	ldr	r0, [r7, #28]
 8005c0c:	f002 fd0a 	bl	8008624 <pbuf_free>
 8005c10:	e000      	b.n	8005c14 <icmp_send_response+0xd4>
    return;
 8005c12:	bf00      	nop
}
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	0800f828 	.word	0x0800f828
 8005c20:	0800f938 	.word	0x0800f938
 8005c24:	0800f8dc 	.word	0x0800f8dc

08005c28 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	; 0x24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00d      	beq.n	8005c68 <lwip_standard_chksum+0x40>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	dd0a      	ble.n	8005c68 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	1c53      	adds	r3, r2, #1
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	f107 030e 	add.w	r3, r7, #14
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	701a      	strb	r2, [r3, #0]
    len--;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005c6c:	e00a      	b.n	8005c84 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	61ba      	str	r2, [r7, #24]
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    len -= 2;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	3b02      	subs	r3, #2
 8005c82:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	dcf1      	bgt.n	8005c6e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dd04      	ble.n	8005c9a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8005c90:	f107 030e 	add.w	r3, r7, #14
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8005c9a:	89fb      	ldrh	r3, [r7, #14]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	0c1a      	lsrs	r2, r3, #16
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	0c1a      	lsrs	r2, r3, #16
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	b29b      	uxth	r3, r3
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3724      	adds	r7, #36	; 0x24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff98 	bl	8005c28 <lwip_standard_chksum>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	b29b      	uxth	r3, r3
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	e02b      	b.n	8005d74 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	895b      	ldrh	r3, [r3, #10]
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f7ff ff7e 	bl	8005c28 <lwip_standard_chksum>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	461a      	mov	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	0c1a      	lsrs	r2, r3, #16
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	895b      	ldrh	r3, [r3, #10]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1d0      	bne.n	8005d1c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	b29b      	uxth	r3, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005daa:	f001 f9eb 	bl	8007184 <mem_init>
  memp_init();
 8005dae:	f001 fced 	bl	800778c <memp_init>
  pbuf_init();
  netif_init();
 8005db2:	f001 fdeb 	bl	800798c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005db6:	f008 f969 	bl	800e08c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005dba:	f002 fec1 	bl	8008b40 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005dbe:	f008 f8db 	bl	800df78 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8005dd4:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <ip4_route+0xd8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e036      	b.n	8005e4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02b      	beq.n	8005e44 <ip4_route+0x78>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d022      	beq.n	8005e44 <ip4_route+0x78>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3304      	adds	r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01d      	beq.n	8005e44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	405a      	eors	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3308      	adds	r3, #8
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	e038      	b.n	8005e96 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <ip4_route+0x78>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d101      	bne.n	8005e44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	e028      	b.n	8005e96 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1c5      	bne.n	8005ddc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <ip4_route+0xdc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01a      	beq.n	8005e8e <ip4_route+0xc2>
 8005e58:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <ip4_route+0xdc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d012      	beq.n	8005e8e <ip4_route+0xc2>
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <ip4_route+0xdc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <ip4_route+0xdc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d101      	bne.n	8005e92 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e001      	b.n	8005e96 <ip4_route+0xca>
  }

  return netif_default;
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <ip4_route+0xdc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	24007ba8 	.word	0x24007ba8
 8005ea8:	24007bac 	.word	0x24007bac

08005eac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <ip4_input_accept+0x46>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <ip4_input_accept+0x50>)
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d008      	beq.n	8005eee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005edc:	4b07      	ldr	r3, [pc, #28]	; (8005efc <ip4_input_accept+0x50>)
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fa08 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 8005ee8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	24004c8c 	.word	0x24004c8c

08005f00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d004      	beq.n	8005f26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 fb81 	bl	8008624 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e107      	b.n	8006136 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	885b      	ldrh	r3, [r3, #2]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fc6f 	bl	8004820 <lwip_htons>
 8005f42:	4603      	mov	r3, r0
 8005f44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	891b      	ldrh	r3, [r3, #8]
 8005f4a:	89ba      	ldrh	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d204      	bcs.n	8005f5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8005f50:	89bb      	ldrh	r3, [r7, #12]
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f002 f9df 	bl	8008318 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	895b      	ldrh	r3, [r3, #10]
 8005f5e:	89fa      	ldrh	r2, [r7, #14]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d807      	bhi.n	8005f74 <ip4_input+0x74>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	891b      	ldrh	r3, [r3, #8]
 8005f68:	89ba      	ldrh	r2, [r7, #12]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d802      	bhi.n	8005f74 <ip4_input+0x74>
 8005f6e:	89fb      	ldrh	r3, [r7, #14]
 8005f70:	2b13      	cmp	r3, #19
 8005f72:	d804      	bhi.n	8005f7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f002 fb55 	bl	8008624 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e0db      	b.n	8006136 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4a6f      	ldr	r2, [pc, #444]	; (8006140 <ip4_input+0x240>)
 8005f84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4a6d      	ldr	r2, [pc, #436]	; (8006140 <ip4_input+0x240>)
 8005f8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005f8e:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <ip4_input+0x240>)
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f96:	2be0      	cmp	r3, #224	; 0xe0
 8005f98:	d112      	bne.n	8005fc0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <ip4_input+0xba>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3304      	adds	r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <ip4_input+0xba>
      netif = inp;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e02a      	b.n	8006010 <ip4_input+0x110>
    } else {
      netif = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	e027      	b.n	8006010 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8005fc0:	6838      	ldr	r0, [r7, #0]
 8005fc2:	f7ff ff73 	bl	8005eac <ip4_input_accept>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <ip4_input+0xd2>
      netif = inp;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e01e      	b.n	8006010 <ip4_input+0x110>
    } else {
      netif = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8005fd6:	4b5a      	ldr	r3, [pc, #360]	; (8006140 <ip4_input+0x240>)
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005fde:	d017      	beq.n	8006010 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8005fe0:	4b58      	ldr	r3, [pc, #352]	; (8006144 <ip4_input+0x244>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	e00e      	b.n	8006006 <ip4_input+0x106>
          if (netif == inp) {
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d006      	beq.n	8005ffe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8005ff0:	6938      	ldr	r0, [r7, #16]
 8005ff2:	f7ff ff5b 	bl	8005eac <ip4_input_accept>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <ip4_input+0x10e>
 8005ffc:	e000      	b.n	8006000 <ip4_input+0x100>
            continue;
 8005ffe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1ed      	bne.n	8005fe8 <ip4_input+0xe8>
 800600c:	e000      	b.n	8006010 <ip4_input+0x110>
            break;
 800600e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006010:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <ip4_input+0x240>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f96e 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d105      	bne.n	800602e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <ip4_input+0x240>)
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800602a:	2be0      	cmp	r3, #224	; 0xe0
 800602c:	d104      	bne.n	8006038 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f002 faf8 	bl	8008624 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e07e      	b.n	8006136 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 faf0 	bl	8008624 <pbuf_free>
    return ERR_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e076      	b.n	8006136 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	88db      	ldrh	r3, [r3, #6]
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fc92 	bl	8006984 <ip4_reass>
 8006060:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <ip4_input+0x16c>
      return ERR_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e064      	b.n	8006136 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8006072:	4a33      	ldr	r2, [pc, #204]	; (8006140 <ip4_input+0x240>)
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8006078:	4a31      	ldr	r2, [pc, #196]	; (8006140 <ip4_input+0x240>)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800607e:	4a30      	ldr	r2, [pc, #192]	; (8006140 <ip4_input+0x240>)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	b2db      	uxtb	r3, r3
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	b2db      	uxtb	r3, r3
 8006092:	b29a      	uxth	r2, r3
 8006094:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <ip4_input+0x240>)
 8006096:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f002 fa3b 	bl	8008518 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	7a5b      	ldrb	r3, [r3, #9]
 80060a6:	2b11      	cmp	r3, #17
 80060a8:	d006      	beq.n	80060b8 <ip4_input+0x1b8>
 80060aa:	2b11      	cmp	r3, #17
 80060ac:	dc13      	bgt.n	80060d6 <ip4_input+0x1d6>
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d00c      	beq.n	80060cc <ip4_input+0x1cc>
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d005      	beq.n	80060c2 <ip4_input+0x1c2>
 80060b6:	e00e      	b.n	80060d6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f008 f85c 	bl	800e178 <udp_input>
        break;
 80060c0:	e026      	b.n	8006110 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f004 f8d5 	bl	800a274 <tcp_input>
        break;
 80060ca:	e021      	b.n	8006110 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff fbf6 	bl	80058c0 <icmp_input>
        break;
 80060d4:	e01c      	b.n	8006110 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <ip4_input+0x240>)
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f90b 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <ip4_input+0x240>)
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80060f0:	2be0      	cmp	r3, #224	; 0xe0
 80060f2:	d009      	beq.n	8006108 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80060f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 fa7f 	bl	80085fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006100:	2102      	movs	r1, #2
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fcfc 	bl	8005b00 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f002 fa8b 	bl	8008624 <pbuf_free>
        break;
 800610e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <ip4_input+0x240>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <ip4_input+0x240>)
 8006118:	2200      	movs	r2, #0
 800611a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800611c:	4b08      	ldr	r3, [pc, #32]	; (8006140 <ip4_input+0x240>)
 800611e:	2200      	movs	r2, #0
 8006120:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <ip4_input+0x240>)
 8006124:	2200      	movs	r2, #0
 8006126:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <ip4_input+0x240>)
 800612a:	2200      	movs	r2, #0
 800612c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800612e:	4b04      	ldr	r3, [pc, #16]	; (8006140 <ip4_input+0x240>)
 8006130:	2200      	movs	r2, #0
 8006132:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	24004c8c 	.word	0x24004c8c
 8006144:	24007ba8 	.word	0x24007ba8

08006148 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af04      	add	r7, sp, #16
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d009      	beq.n	8006174 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <ip4_output_if+0x26>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	3304      	adds	r3, #4
 8006172:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	9302      	str	r3, [sp, #8]
 800617a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f805 	bl	800619c <ip4_output_if_src>
 8006192:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	7b9b      	ldrb	r3, [r3, #14]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d006      	beq.n	80061c0 <ip4_output_if_src+0x24>
 80061b2:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <ip4_output_if_src+0x144>)
 80061b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80061b8:	494a      	ldr	r1, [pc, #296]	; (80062e4 <ip4_output_if_src+0x148>)
 80061ba:	484b      	ldr	r0, [pc, #300]	; (80062e8 <ip4_output_if_src+0x14c>)
 80061bc:	f008 fa20 	bl	800e600 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d060      	beq.n	8006288 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80061c6:	2314      	movs	r3, #20
 80061c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80061ca:	2114      	movs	r1, #20
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f002 f993 	bl	80084f8 <pbuf_add_header>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80061d8:	f06f 0301 	mvn.w	r3, #1
 80061dc:	e07c      	b.n	80062d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	2b13      	cmp	r3, #19
 80061ea:	d806      	bhi.n	80061fa <ip4_output_if_src+0x5e>
 80061ec:	4b3c      	ldr	r3, [pc, #240]	; (80062e0 <ip4_output_if_src+0x144>)
 80061ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80061f2:	493e      	ldr	r1, [pc, #248]	; (80062ec <ip4_output_if_src+0x150>)
 80061f4:	483c      	ldr	r0, [pc, #240]	; (80062e8 <ip4_output_if_src+0x14c>)
 80061f6:	f008 fa03 	bl	800e600 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006206:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006210:	8b7b      	ldrh	r3, [r7, #26]
 8006212:	089b      	lsrs	r3, r3, #2
 8006214:	b29b      	uxth	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800621c:	b2da      	uxtb	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006228:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	891b      	ldrh	r3, [r3, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe faf6 	bl	8004820 <lwip_htons>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2200      	movs	r2, #0
 8006240:	719a      	strb	r2, [r3, #6]
 8006242:	2200      	movs	r2, #0
 8006244:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006246:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <ip4_output_if_src+0x154>)
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fae8 	bl	8004820 <lwip_htons>
 8006250:	4603      	mov	r3, r0
 8006252:	461a      	mov	r2, r3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <ip4_output_if_src+0x154>)
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	4b23      	ldr	r3, [pc, #140]	; (80062f0 <ip4_output_if_src+0x154>)
 8006262:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800626a:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <ip4_output_if_src+0x158>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	e003      	b.n	800627c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2200      	movs	r2, #0
 8006280:	729a      	strb	r2, [r3, #10]
 8006282:	2200      	movs	r2, #0
 8006284:	72da      	strb	r2, [r3, #11]
 8006286:	e00f      	b.n	80062a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	895b      	ldrh	r3, [r3, #10]
 800628c:	2b13      	cmp	r3, #19
 800628e:	d802      	bhi.n	8006296 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8006290:	f06f 0301 	mvn.w	r3, #1
 8006294:	e020      	b.n	80062d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80062a2:	f107 0314 	add.w	r3, r7, #20
 80062a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00c      	beq.n	80062ca <ip4_output_if_src+0x12e>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	891a      	ldrh	r2, [r3, #8]
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d906      	bls.n	80062ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fd53 	bl	8006d6c <ip4_frag>
 80062c6:	4603      	mov	r3, r0
 80062c8:	e006      	b.n	80062d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68f9      	ldr	r1, [r7, #12]
 80062d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d4:	4798      	blx	r3
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	0800f964 	.word	0x0800f964
 80062e4:	0800f9e0 	.word	0x0800f9e0
 80062e8:	0800f9ec 	.word	0x0800f9ec
 80062ec:	0800fa14 	.word	0x0800fa14
 80062f0:	24004ca4 	.word	0x24004ca4
 80062f4:	08012228 	.word	0x08012228

080062f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d002      	beq.n	8006314 <ip4_addr_isbroadcast_u32+0x1c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8006314:	2301      	movs	r3, #1
 8006316:	e02a      	b.n	800636e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8006326:	2300      	movs	r3, #0
 8006328:	e021      	b.n	800636e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	3304      	adds	r3, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d101      	bne.n	800633a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8006336:	2300      	movs	r3, #0
 8006338:	e019      	b.n	800636e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	3304      	adds	r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	405a      	eors	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	43da      	mvns	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006364:	429a      	cmp	r2, r3
 8006366:	d101      	bne.n	800636c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800636c:	2300      	movs	r3, #0
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <ip_reass_tmr+0x54>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800638c:	e018      	b.n	80063c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	7fdb      	ldrb	r3, [r3, #31]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <ip_reass_tmr+0x32>
      r->timer--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	7fdb      	ldrb	r3, [r3, #31]
 800639a:	3b01      	subs	r3, #1
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	e008      	b.n	80063c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f80a 	bl	80063d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <ip_reass_tmr+0x12>
    }
  }
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	24004ca8 	.word	0x24004ca8

080063d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d105      	bne.n	80063f6 <ip_reass_free_complete_datagram+0x22>
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <ip_reass_free_complete_datagram+0x12c>)
 80063ec:	22ab      	movs	r2, #171	; 0xab
 80063ee:	4945      	ldr	r1, [pc, #276]	; (8006504 <ip_reass_free_complete_datagram+0x130>)
 80063f0:	4845      	ldr	r0, [pc, #276]	; (8006508 <ip_reass_free_complete_datagram+0x134>)
 80063f2:	f008 f905 	bl	800e600 <iprintf>
  if (prev != NULL) {
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d005      	beq.n	8006412 <ip_reass_free_complete_datagram+0x3e>
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <ip_reass_free_complete_datagram+0x12c>)
 8006408:	22ad      	movs	r2, #173	; 0xad
 800640a:	4940      	ldr	r1, [pc, #256]	; (800650c <ip_reass_free_complete_datagram+0x138>)
 800640c:	483e      	ldr	r0, [pc, #248]	; (8006508 <ip_reass_free_complete_datagram+0x134>)
 800640e:	f008 f8f7 	bl	800e600 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	889b      	ldrh	r3, [r3, #4]
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d12a      	bne.n	800647a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	6858      	ldr	r0, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3308      	adds	r3, #8
 800643a:	2214      	movs	r2, #20
 800643c:	4619      	mov	r1, r3
 800643e:	f008 f9ba 	bl	800e7b6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8006442:	2101      	movs	r1, #1
 8006444:	69b8      	ldr	r0, [r7, #24]
 8006446:	f7ff fb6b 	bl	8005b20 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800644a:	69b8      	ldr	r0, [r7, #24]
 800644c:	f002 f972 	bl	8008734 <pbuf_clen>
 8006450:	4603      	mov	r3, r0
 8006452:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006454:	8bfa      	ldrh	r2, [r7, #30]
 8006456:	8a7b      	ldrh	r3, [r7, #18]
 8006458:	4413      	add	r3, r2
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	db05      	blt.n	800646c <ip_reass_free_complete_datagram+0x98>
 8006460:	4b27      	ldr	r3, [pc, #156]	; (8006500 <ip_reass_free_complete_datagram+0x12c>)
 8006462:	22bc      	movs	r2, #188	; 0xbc
 8006464:	492a      	ldr	r1, [pc, #168]	; (8006510 <ip_reass_free_complete_datagram+0x13c>)
 8006466:	4828      	ldr	r0, [pc, #160]	; (8006508 <ip_reass_free_complete_datagram+0x134>)
 8006468:	f008 f8ca 	bl	800e600 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800646c:	8bfa      	ldrh	r2, [r7, #30]
 800646e:	8a7b      	ldrh	r3, [r7, #18]
 8006470:	4413      	add	r3, r2
 8006472:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8006474:	69b8      	ldr	r0, [r7, #24]
 8006476:	f002 f8d5 	bl	8008624 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8006480:	e01f      	b.n	80064c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	617b      	str	r3, [r7, #20]
    pcur = p;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f002 f94e 	bl	8008734 <pbuf_clen>
 8006498:	4603      	mov	r3, r0
 800649a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800649c:	8bfa      	ldrh	r2, [r7, #30]
 800649e:	8a7b      	ldrh	r3, [r7, #18]
 80064a0:	4413      	add	r3, r2
 80064a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a6:	db05      	blt.n	80064b4 <ip_reass_free_complete_datagram+0xe0>
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <ip_reass_free_complete_datagram+0x12c>)
 80064aa:	22cc      	movs	r2, #204	; 0xcc
 80064ac:	4918      	ldr	r1, [pc, #96]	; (8006510 <ip_reass_free_complete_datagram+0x13c>)
 80064ae:	4816      	ldr	r0, [pc, #88]	; (8006508 <ip_reass_free_complete_datagram+0x134>)
 80064b0:	f008 f8a6 	bl	800e600 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80064b4:	8bfa      	ldrh	r2, [r7, #30]
 80064b6:	8a7b      	ldrh	r3, [r7, #18]
 80064b8:	4413      	add	r3, r2
 80064ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f002 f8b1 	bl	8008624 <pbuf_free>
  while (p != NULL) {
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1dc      	bne.n	8006482 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f8c2 	bl	8006654 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <ip_reass_free_complete_datagram+0x140>)
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	8bfa      	ldrh	r2, [r7, #30]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d905      	bls.n	80064e6 <ip_reass_free_complete_datagram+0x112>
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <ip_reass_free_complete_datagram+0x12c>)
 80064dc:	22d2      	movs	r2, #210	; 0xd2
 80064de:	490e      	ldr	r1, [pc, #56]	; (8006518 <ip_reass_free_complete_datagram+0x144>)
 80064e0:	4809      	ldr	r0, [pc, #36]	; (8006508 <ip_reass_free_complete_datagram+0x134>)
 80064e2:	f008 f88d 	bl	800e600 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80064e6:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <ip_reass_free_complete_datagram+0x140>)
 80064e8:	881a      	ldrh	r2, [r3, #0]
 80064ea:	8bfb      	ldrh	r3, [r7, #30]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	4b08      	ldr	r3, [pc, #32]	; (8006514 <ip_reass_free_complete_datagram+0x140>)
 80064f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80064f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	0800fa44 	.word	0x0800fa44
 8006504:	0800fac4 	.word	0x0800fac4
 8006508:	0800fad0 	.word	0x0800fad0
 800650c:	0800faf8 	.word	0x0800faf8
 8006510:	0800fb0c 	.word	0x0800fb0c
 8006514:	24004cac 	.word	0x24004cac
 8006518:	0800fb2c 	.word	0x0800fb2c

0800651c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08a      	sub	sp, #40	; 0x28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800653a:	4b28      	ldr	r3, [pc, #160]	; (80065dc <ip_reass_remove_oldest_datagram+0xc0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8006540:	e030      	b.n	80065a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	695a      	ldr	r2, [r3, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	429a      	cmp	r2, r3
 800654c:	d10c      	bne.n	8006568 <ip_reass_remove_oldest_datagram+0x4c>
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d106      	bne.n	8006568 <ip_reass_remove_oldest_datagram+0x4c>
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	899a      	ldrh	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	889b      	ldrh	r3, [r3, #4]
 8006562:	b29b      	uxth	r3, r3
 8006564:	429a      	cmp	r2, r3
 8006566:	d014      	beq.n	8006592 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3301      	adds	r3, #1
 800656c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	e009      	b.n	8006592 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	7fda      	ldrb	r2, [r3, #31]
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	7fdb      	ldrb	r3, [r3, #31]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1cb      	bne.n	8006542 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	6a38      	ldr	r0, [r7, #32]
 80065b4:	f7ff ff0e 	bl	80063d4 <ip_reass_free_complete_datagram>
 80065b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	da02      	bge.n	80065d0 <ip_reass_remove_oldest_datagram+0xb4>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	dcac      	bgt.n	800652a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80065d0:	697b      	ldr	r3, [r7, #20]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3728      	adds	r7, #40	; 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	24004ca8 	.word	0x24004ca8

080065e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80065ea:	2004      	movs	r0, #4
 80065ec:	f001 f934 	bl	8007858 <memp_malloc>
 80065f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d110      	bne.n	800661a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff8e 	bl	800651c <ip_reass_remove_oldest_datagram>
 8006600:	4602      	mov	r2, r0
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	4293      	cmp	r3, r2
 8006606:	dc03      	bgt.n	8006610 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006608:	2004      	movs	r0, #4
 800660a:	f001 f925 	bl	8007858 <memp_malloc>
 800660e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	e016      	b.n	8006648 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800661a:	2220      	movs	r2, #32
 800661c:	2100      	movs	r1, #0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f008 f853 	bl	800e6ca <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	220f      	movs	r2, #15
 8006628:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <ip_reass_enqueue_new_datagram+0x70>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8006632:	4a07      	ldr	r2, [pc, #28]	; (8006650 <ip_reass_enqueue_new_datagram+0x70>)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3308      	adds	r3, #8
 800663c:	2214      	movs	r2, #20
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f008 f8b8 	bl	800e7b6 <memcpy>
  return ipr;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	24004ca8 	.word	0x24004ca8

08006654 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800665e:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <ip_reass_dequeue_datagram+0x4c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	d104      	bne.n	8006672 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0c      	ldr	r2, [pc, #48]	; (80066a0 <ip_reass_dequeue_datagram+0x4c>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	e00d      	b.n	800668e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <ip_reass_dequeue_datagram+0x32>
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <ip_reass_dequeue_datagram+0x50>)
 800667a:	f240 1245 	movw	r2, #325	; 0x145
 800667e:	490a      	ldr	r1, [pc, #40]	; (80066a8 <ip_reass_dequeue_datagram+0x54>)
 8006680:	480a      	ldr	r0, [pc, #40]	; (80066ac <ip_reass_dequeue_datagram+0x58>)
 8006682:	f007 ffbd 	bl	800e600 <iprintf>
    prev->next = ipr->next;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	2004      	movs	r0, #4
 8006692:	f001 f951 	bl	8007938 <memp_free>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	24004ca8 	.word	0x24004ca8
 80066a4:	0800fa44 	.word	0x0800fa44
 80066a8:	0800fb50 	.word	0x0800fb50
 80066ac:	0800fad0 	.word	0x0800fad0

080066b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	; 0x30
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80066c0:	2301      	movs	r3, #1
 80066c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	885b      	ldrh	r3, [r3, #2]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe f8a5 	bl	8004820 <lwip_htons>
 80066d6:	4603      	mov	r3, r0
 80066d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80066e8:	7e7b      	ldrb	r3, [r7, #25]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8b7a      	ldrh	r2, [r7, #26]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d202      	bcs.n	80066f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295
 80066f6:	e135      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80066f8:	7e7b      	ldrb	r3, [r7, #25]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8b7a      	ldrh	r2, [r7, #26]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	b29b      	uxth	r3, r3
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe f889 	bl	8004820 <lwip_htons>
 800670e:	4603      	mov	r3, r0
 8006710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006714:	b29b      	uxth	r3, r3
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	705a      	strb	r2, [r3, #1]
 800672a:	2200      	movs	r2, #0
 800672c:	709a      	strb	r2, [r3, #2]
 800672e:	2200      	movs	r2, #0
 8006730:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	8afa      	ldrh	r2, [r7, #22]
 8006736:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8006738:	8afa      	ldrh	r2, [r7, #22]
 800673a:	8b7b      	ldrh	r3, [r7, #26]
 800673c:	4413      	add	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	88db      	ldrh	r3, [r3, #6]
 8006748:	b29b      	uxth	r3, r3
 800674a:	8afa      	ldrh	r2, [r7, #22]
 800674c:	429a      	cmp	r2, r3
 800674e:	d902      	bls.n	8006756 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	e106      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
 800675c:	e068      	b.n	8006830 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	889b      	ldrh	r3, [r3, #4]
 8006768:	b29a      	uxth	r2, r3
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	889b      	ldrh	r3, [r3, #4]
 800676e:	b29b      	uxth	r3, r3
 8006770:	429a      	cmp	r2, r3
 8006772:	d235      	bcs.n	80067e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	889b      	ldrh	r3, [r3, #4]
 8006784:	b29a      	uxth	r2, r3
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	88db      	ldrh	r3, [r3, #6]
 800678a:	b29b      	uxth	r3, r3
 800678c:	429a      	cmp	r2, r3
 800678e:	d307      	bcc.n	80067a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	88db      	ldrh	r3, [r3, #6]
 8006794:	b29a      	uxth	r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	889b      	ldrh	r3, [r3, #4]
 800679a:	b29b      	uxth	r3, r3
 800679c:	429a      	cmp	r2, r3
 800679e:	d902      	bls.n	80067a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80067a0:	f04f 33ff 	mov.w	r3, #4294967295
 80067a4:	e0de      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	88db      	ldrh	r3, [r3, #6]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	889b      	ldrh	r3, [r3, #4]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d03d      	beq.n	8006838 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80067c0:	e03a      	b.n	8006838 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	889b      	ldrh	r3, [r3, #4]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d902      	bls.n	80067d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295
 80067d6:	e0c5      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	605a      	str	r2, [r3, #4]
      break;
 80067de:	e02b      	b.n	8006838 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	889b      	ldrh	r3, [r3, #4]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	889b      	ldrh	r3, [r3, #4]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d102      	bne.n	80067f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	e0b6      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	889b      	ldrh	r3, [r3, #4]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	b29b      	uxth	r3, r3
 8006802:	429a      	cmp	r2, r3
 8006804:	d202      	bcs.n	800680c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	e0ab      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	88db      	ldrh	r3, [r3, #6]
 8006816:	b29a      	uxth	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	889b      	ldrh	r3, [r3, #4]
 800681c:	b29b      	uxth	r3, r3
 800681e:	429a      	cmp	r2, r3
 8006820:	d001      	beq.n	8006826 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	2b00      	cmp	r3, #0
 8006834:	d193      	bne.n	800675e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8006836:	e000      	b.n	800683a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8006838:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d12d      	bne.n	800689c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01c      	beq.n	8006880 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	b29a      	uxth	r2, r3
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	889b      	ldrh	r3, [r3, #4]
 8006850:	b29b      	uxth	r3, r3
 8006852:	429a      	cmp	r2, r3
 8006854:	d906      	bls.n	8006864 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8006856:	4b45      	ldr	r3, [pc, #276]	; (800696c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006858:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800685c:	4944      	ldr	r1, [pc, #272]	; (8006970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800685e:	4845      	ldr	r0, [pc, #276]	; (8006974 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006860:	f007 fece 	bl	800e600 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	b29a      	uxth	r2, r3
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	889b      	ldrh	r3, [r3, #4]
 8006874:	b29b      	uxth	r3, r3
 8006876:	429a      	cmp	r2, r3
 8006878:	d010      	beq.n	800689c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	e00d      	b.n	800689c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8006888:	4b38      	ldr	r3, [pc, #224]	; (800696c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800688a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800688e:	493a      	ldr	r1, [pc, #232]	; (8006978 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8006890:	4838      	ldr	r0, [pc, #224]	; (8006974 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006892:	f007 feb5 	bl	800e600 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	7f9b      	ldrb	r3, [r3, #30]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d059      	beq.n	8006962 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d04f      	beq.n	8006954 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	889b      	ldrh	r3, [r3, #4]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	e041      	b.n	8006954 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80068da:	e012      	b.n	8006902 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	88db      	ldrh	r3, [r3, #6]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	889b      	ldrh	r3, [r3, #4]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d002      	beq.n	80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	623b      	str	r3, [r7, #32]
            break;
 80068f6:	e007      	b.n	8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e9      	bne.n	80068dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d022      	beq.n	8006954 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006918:	f240 12df 	movw	r2, #479	; 0x1df
 800691c:	4917      	ldr	r1, [pc, #92]	; (800697c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800691e:	4815      	ldr	r0, [pc, #84]	; (8006974 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006920:	f007 fe6e 	bl	800e600 <iprintf>
          LWIP_ASSERT("sanity check",
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692c:	429a      	cmp	r2, r3
 800692e:	d106      	bne.n	800693e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006932:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006936:	4911      	ldr	r1, [pc, #68]	; (800697c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8006938:	480e      	ldr	r0, [pc, #56]	; (8006974 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800693a:	f007 fe61 	bl	800e600 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8006948:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800694c:	490c      	ldr	r1, [pc, #48]	; (8006980 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800694e:	4809      	ldr	r0, [pc, #36]	; (8006974 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8006950:	f007 fe56 	bl	800e600 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	2b00      	cmp	r3, #0
 8006958:	bf14      	ite	ne
 800695a:	2301      	movne	r3, #1
 800695c:	2300      	moveq	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	e000      	b.n	8006964 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3730      	adds	r7, #48	; 0x30
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	0800fa44 	.word	0x0800fa44
 8006970:	0800fb6c 	.word	0x0800fb6c
 8006974:	0800fad0 	.word	0x0800fad0
 8006978:	0800fb8c 	.word	0x0800fb8c
 800697c:	0800fbc4 	.word	0x0800fbc4
 8006980:	0800fbd4 	.word	0x0800fbd4

08006984 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	; 0x38
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	b2db      	uxtb	r3, r3
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b14      	cmp	r3, #20
 80069a2:	f040 8171 	bne.w	8006c88 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	88db      	ldrh	r3, [r3, #6]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fd ff37 	bl	8004820 <lwip_htons>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	885b      	ldrh	r3, [r3, #2]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fd ff2b 	bl	8004820 <lwip_htons>
 80069ca:	4603      	mov	r3, r0
 80069cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80069de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069e6:	429a      	cmp	r2, r3
 80069e8:	f0c0 8150 	bcc.w	8006c8c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80069ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fe9b 	bl	8008734 <pbuf_clen>
 80069fe:	4603      	mov	r3, r0
 8006a00:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006a02:	4b8c      	ldr	r3, [pc, #560]	; (8006c34 <ip4_reass+0x2b0>)
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	8c3b      	ldrh	r3, [r7, #32]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	2b0a      	cmp	r3, #10
 8006a0e:	dd10      	ble.n	8006a32 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006a10:	8c3b      	ldrh	r3, [r7, #32]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a16:	f7ff fd81 	bl	800651c <ip_reass_remove_oldest_datagram>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 8137 	beq.w	8006c90 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006a22:	4b84      	ldr	r3, [pc, #528]	; (8006c34 <ip4_reass+0x2b0>)
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	8c3b      	ldrh	r3, [r7, #32]
 8006a2a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006a2c:	2b0a      	cmp	r3, #10
 8006a2e:	f300 812f 	bgt.w	8006c90 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006a32:	4b81      	ldr	r3, [pc, #516]	; (8006c38 <ip4_reass+0x2b4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	633b      	str	r3, [r7, #48]	; 0x30
 8006a38:	e015      	b.n	8006a66 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d10c      	bne.n	8006a60 <ip4_reass+0xdc>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d106      	bne.n	8006a60 <ip4_reass+0xdc>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	899a      	ldrh	r2, [r3, #12]
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d006      	beq.n	8006a6e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <ip4_reass+0xb6>
 8006a6c:	e000      	b.n	8006a70 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8006a6e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006a76:	8c3b      	ldrh	r3, [r7, #32]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7c:	f7ff fdb0 	bl	80065e0 <ip_reass_enqueue_new_datagram>
 8006a80:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11c      	bne.n	8006ac2 <ip4_reass+0x13e>
      goto nullreturn;
 8006a88:	e105      	b.n	8006c96 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd fec5 	bl	8004820 <lwip_htons>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d110      	bne.n	8006ac2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	89db      	ldrh	r3, [r3, #14]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fd febb 	bl	8004820 <lwip_htons>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d006      	beq.n	8006ac2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	2214      	movs	r2, #20
 8006aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006abc:	4618      	mov	r0, r3
 8006abe:	f007 fe7a 	bl	800e7b6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	88db      	ldrh	r3, [r3, #6]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf0c      	ite	eq
 8006ad0:	2301      	moveq	r3, #1
 8006ad2:	2300      	movne	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00e      	beq.n	8006afc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8006ade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ae2:	4413      	add	r3, r2
 8006ae4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006ae6:	8b7a      	ldrh	r2, [r7, #26]
 8006ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aea:	429a      	cmp	r2, r3
 8006aec:	f0c0 80a0 	bcc.w	8006c30 <ip4_reass+0x2ac>
 8006af0:	8b7b      	ldrh	r3, [r7, #26]
 8006af2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8006af6:	4293      	cmp	r3, r2
 8006af8:	f200 809a 	bhi.w	8006c30 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b02:	f7ff fdd5 	bl	80066b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8006b06:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	f000 809b 	beq.w	8006c48 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006b12:	4b48      	ldr	r3, [pc, #288]	; (8006c34 <ip4_reass+0x2b0>)
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	8c3b      	ldrh	r3, [r7, #32]
 8006b18:	4413      	add	r3, r2
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	4b45      	ldr	r3, [pc, #276]	; (8006c34 <ip4_reass+0x2b0>)
 8006b1e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8006b26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b2a:	4413      	add	r3, r2
 8006b2c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	8a7a      	ldrh	r2, [r7, #18]
 8006b32:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	7f9b      	ldrb	r3, [r3, #30]
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d171      	bne.n	8006c2c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	8b9b      	ldrh	r3, [r3, #28]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	3308      	adds	r3, #8
 8006b66:	2214      	movs	r2, #20
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6c:	f007 fe23 	bl	800e7b6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006b70:	8a3b      	ldrh	r3, [r7, #16]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fd fe54 	bl	8004820 <lwip_htons>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2200      	movs	r2, #0
 8006b84:	719a      	strb	r2, [r3, #6]
 8006b86:	2200      	movs	r2, #0
 8006b88:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	729a      	strb	r2, [r3, #10]
 8006b90:	2200      	movs	r2, #0
 8006b92:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8006b9a:	e00d      	b.n	8006bb8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8006ba2:	2114      	movs	r1, #20
 8006ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ba6:	f001 fcb7 	bl	8008518 <pbuf_remove_header>
      pbuf_cat(p, r);
 8006baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fdfb 	bl	80087a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1ee      	bne.n	8006b9c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <ip4_reass+0x2b4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d102      	bne.n	8006bce <ip4_reass+0x24a>
      ipr_prev = NULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bcc:	e010      	b.n	8006bf0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <ip4_reass+0x2b4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd4:	e007      	b.n	8006be6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d006      	beq.n	8006bee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f4      	bne.n	8006bd6 <ip4_reass+0x252>
 8006bec:	e000      	b.n	8006bf0 <ip4_reass+0x26c>
          break;
 8006bee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf4:	f7ff fd2e 	bl	8006654 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fd9b 	bl	8008734 <pbuf_clen>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006c02:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <ip4_reass+0x2b0>)
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	8c3a      	ldrh	r2, [r7, #32]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d906      	bls.n	8006c1a <ip4_reass+0x296>
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <ip4_reass+0x2b8>)
 8006c0e:	f240 229b 	movw	r2, #667	; 0x29b
 8006c12:	490b      	ldr	r1, [pc, #44]	; (8006c40 <ip4_reass+0x2bc>)
 8006c14:	480b      	ldr	r0, [pc, #44]	; (8006c44 <ip4_reass+0x2c0>)
 8006c16:	f007 fcf3 	bl	800e600 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <ip4_reass+0x2b0>)
 8006c1c:	881a      	ldrh	r2, [r3, #0]
 8006c1e:	8c3b      	ldrh	r3, [r7, #32]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <ip4_reass+0x2b0>)
 8006c26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	e038      	b.n	8006c9e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e036      	b.n	8006c9e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8006c30:	bf00      	nop
 8006c32:	e00a      	b.n	8006c4a <ip4_reass+0x2c6>
 8006c34:	24004cac 	.word	0x24004cac
 8006c38:	24004ca8 	.word	0x24004ca8
 8006c3c:	0800fa44 	.word	0x0800fa44
 8006c40:	0800fbf8 	.word	0x0800fbf8
 8006c44:	0800fad0 	.word	0x0800fad0
    goto nullreturn_ipr;
 8006c48:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <ip4_reass+0x2da>
 8006c50:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <ip4_reass+0x324>)
 8006c52:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006c56:	4915      	ldr	r1, [pc, #84]	; (8006cac <ip4_reass+0x328>)
 8006c58:	4815      	ldr	r0, [pc, #84]	; (8006cb0 <ip4_reass+0x32c>)
 8006c5a:	f007 fcd1 	bl	800e600 <iprintf>
  if (ipr->p == NULL) {
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d116      	bne.n	8006c94 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <ip4_reass+0x330>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d006      	beq.n	8006c7e <ip4_reass+0x2fa>
 8006c70:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <ip4_reass+0x324>)
 8006c72:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006c76:	4910      	ldr	r1, [pc, #64]	; (8006cb8 <ip4_reass+0x334>)
 8006c78:	480d      	ldr	r0, [pc, #52]	; (8006cb0 <ip4_reass+0x32c>)
 8006c7a:	f007 fcc1 	bl	800e600 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c82:	f7ff fce7 	bl	8006654 <ip_reass_dequeue_datagram>
 8006c86:	e006      	b.n	8006c96 <ip4_reass+0x312>
    goto nullreturn;
 8006c88:	bf00      	nop
 8006c8a:	e004      	b.n	8006c96 <ip4_reass+0x312>
    goto nullreturn;
 8006c8c:	bf00      	nop
 8006c8e:	e002      	b.n	8006c96 <ip4_reass+0x312>
      goto nullreturn;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <ip4_reass+0x312>
  }

nullreturn:
 8006c94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fcc4 	bl	8008624 <pbuf_free>
  return NULL;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3738      	adds	r7, #56	; 0x38
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	0800fa44 	.word	0x0800fa44
 8006cac:	0800fc14 	.word	0x0800fc14
 8006cb0:	0800fad0 	.word	0x0800fad0
 8006cb4:	24004ca8 	.word	0x24004ca8
 8006cb8:	0800fc20 	.word	0x0800fc20

08006cbc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8006cc0:	2005      	movs	r0, #5
 8006cc2:	f000 fdc9 	bl	8007858 <memp_malloc>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8006cdc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8006ce0:	4906      	ldr	r1, [pc, #24]	; (8006cfc <ip_frag_free_pbuf_custom_ref+0x30>)
 8006ce2:	4807      	ldr	r0, [pc, #28]	; (8006d00 <ip_frag_free_pbuf_custom_ref+0x34>)
 8006ce4:	f007 fc8c 	bl	800e600 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	2005      	movs	r0, #5
 8006cec:	f000 fe24 	bl	8007938 <memp_free>
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	0800fa44 	.word	0x0800fa44
 8006cfc:	0800fc40 	.word	0x0800fc40
 8006d00:	0800fad0 	.word	0x0800fad0

08006d04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <ipfrag_free_pbuf_custom+0x20>
 8006d16:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <ipfrag_free_pbuf_custom+0x58>)
 8006d18:	f240 22ce 	movw	r2, #718	; 0x2ce
 8006d1c:	4910      	ldr	r1, [pc, #64]	; (8006d60 <ipfrag_free_pbuf_custom+0x5c>)
 8006d1e:	4811      	ldr	r0, [pc, #68]	; (8006d64 <ipfrag_free_pbuf_custom+0x60>)
 8006d20:	f007 fc6e 	bl	800e600 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d006      	beq.n	8006d3a <ipfrag_free_pbuf_custom+0x36>
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <ipfrag_free_pbuf_custom+0x58>)
 8006d2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006d32:	490d      	ldr	r1, [pc, #52]	; (8006d68 <ipfrag_free_pbuf_custom+0x64>)
 8006d34:	480b      	ldr	r0, [pc, #44]	; (8006d64 <ipfrag_free_pbuf_custom+0x60>)
 8006d36:	f007 fc63 	bl	800e600 <iprintf>
  if (pcr->original != NULL) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fc6c 	bl	8008624 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff ffbd 	bl	8006ccc <ip_frag_free_pbuf_custom_ref>
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	0800fa44 	.word	0x0800fa44
 8006d60:	0800fc4c 	.word	0x0800fc4c
 8006d64:	0800fad0 	.word	0x0800fad0
 8006d68:	0800fc58 	.word	0x0800fc58

08006d6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b094      	sub	sp, #80	; 0x50
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d82:	3b14      	subs	r3, #20
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da00      	bge.n	8006d8a <ip4_frag+0x1e>
 8006d88:	3307      	adds	r3, #7
 8006d8a:	10db      	asrs	r3, r3, #3
 8006d8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8006d8e:	2314      	movs	r3, #20
 8006d90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b14      	cmp	r3, #20
 8006dac:	d002      	beq.n	8006db4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8006dae:	f06f 0305 	mvn.w	r3, #5
 8006db2:	e110      	b.n	8006fd6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	895b      	ldrh	r3, [r3, #10]
 8006db8:	2b13      	cmp	r3, #19
 8006dba:	d809      	bhi.n	8006dd0 <ip4_frag+0x64>
 8006dbc:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <ip4_frag+0x274>)
 8006dbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8006dc2:	4988      	ldr	r1, [pc, #544]	; (8006fe4 <ip4_frag+0x278>)
 8006dc4:	4888      	ldr	r0, [pc, #544]	; (8006fe8 <ip4_frag+0x27c>)
 8006dc6:	f007 fc1b 	bl	800e600 <iprintf>
 8006dca:	f06f 0305 	mvn.w	r3, #5
 8006dce:	e102      	b.n	8006fd6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd fd22 	bl	8004820 <lwip_htons>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8006de0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006de2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006de6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8006dea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	891b      	ldrh	r3, [r3, #8]
 8006df6:	3b14      	subs	r3, #20
 8006df8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8006dfc:	e0e1      	b.n	8006fc2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006dfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	bf28      	it	cs
 8006e0c:	4613      	movcs	r3, r2
 8006e0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006e10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006e14:	2114      	movs	r1, #20
 8006e16:	200e      	movs	r0, #14
 8006e18:	f001 f920 	bl	800805c <pbuf_alloc>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80d5 	beq.w	8006fd0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	895b      	ldrh	r3, [r3, #10]
 8006e2a:	2b13      	cmp	r3, #19
 8006e2c:	d806      	bhi.n	8006e3c <ip4_frag+0xd0>
 8006e2e:	4b6c      	ldr	r3, [pc, #432]	; (8006fe0 <ip4_frag+0x274>)
 8006e30:	f44f 7249 	mov.w	r2, #804	; 0x324
 8006e34:	496d      	ldr	r1, [pc, #436]	; (8006fec <ip4_frag+0x280>)
 8006e36:	486c      	ldr	r0, [pc, #432]	; (8006fe8 <ip4_frag+0x27c>)
 8006e38:	f007 fbe2 	bl	800e600 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2214      	movs	r2, #20
 8006e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e44:	4618      	mov	r0, r3
 8006e46:	f007 fcb6 	bl	800e7b6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8006e50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8006e56:	e064      	b.n	8006f22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	895a      	ldrh	r2, [r3, #10]
 8006e5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	895b      	ldrh	r3, [r3, #10]
 8006e66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d906      	bls.n	8006e7a <ip4_frag+0x10e>
 8006e6c:	4b5c      	ldr	r3, [pc, #368]	; (8006fe0 <ip4_frag+0x274>)
 8006e6e:	f240 322d 	movw	r2, #813	; 0x32d
 8006e72:	495f      	ldr	r1, [pc, #380]	; (8006ff0 <ip4_frag+0x284>)
 8006e74:	485c      	ldr	r0, [pc, #368]	; (8006fe8 <ip4_frag+0x27c>)
 8006e76:	f007 fbc3 	bl	800e600 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006e7a:	8bfa      	ldrh	r2, [r7, #30]
 8006e7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e80:	4293      	cmp	r3, r2
 8006e82:	bf28      	it	cs
 8006e84:	4613      	movcs	r3, r2
 8006e86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8006e8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d105      	bne.n	8006e9e <ip4_frag+0x132>
        poff = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]
        continue;
 8006e9c:	e041      	b.n	8006f22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006e9e:	f7ff ff0d 	bl	8006cbc <ip_frag_alloc_pbuf_custom_ref>
 8006ea2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8006eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eac:	f001 fbba 	bl	8008624 <pbuf_free>
        goto memerr;
 8006eb0:	e08f      	b.n	8006fd2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006eb2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006eb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006eba:	4413      	add	r3, r2
 8006ebc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8006ec0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8006ec4:	9201      	str	r2, [sp, #4]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2241      	movs	r2, #65	; 0x41
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f001 f9ef 	bl	80082b0 <pbuf_alloced_custom>
 8006ed2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006eda:	69b8      	ldr	r0, [r7, #24]
 8006edc:	f7ff fef6 	bl	8006ccc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ee2:	f001 fb9f 	bl	8008624 <pbuf_free>
        goto memerr;
 8006ee6:	e074      	b.n	8006fd2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f001 fc3b 	bl	8008764 <pbuf_ref>
      pcr->original = p;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	4a3f      	ldr	r2, [pc, #252]	; (8006ff4 <ip4_frag+0x288>)
 8006ef8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006efe:	f001 fc53 	bl	80087a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006f02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006f06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8006f10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <ip4_frag+0x1b6>
        poff = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8006f22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d196      	bne.n	8006e58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8006f2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006f2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f30:	4413      	add	r3, r2
 8006f32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f38:	f1a3 0213 	sub.w	r2, r3, #19
 8006f3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f40:	429a      	cmp	r2, r3
 8006f42:	bfcc      	ite	gt
 8006f44:	2301      	movgt	r3, #1
 8006f46:	2300      	movle	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8006f4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <ip4_frag+0x1f6>
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8006f62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006f6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fd fc57 	bl	8004820 <lwip_htons>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8006f7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f7c:	3314      	adds	r3, #20
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fd fc4d 	bl	8004820 <lwip_htons>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	729a      	strb	r2, [r3, #10]
 8006f94:	2200      	movs	r2, #0
 8006f96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8006fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fa6:	f001 fb3d 	bl	8008624 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8006faa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8006fb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006fba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8006fc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f47f af19 	bne.w	8006dfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e002      	b.n	8006fd6 <ip4_frag+0x26a>
      goto memerr;
 8006fd0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3748      	adds	r7, #72	; 0x48
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800fa44 	.word	0x0800fa44
 8006fe4:	0800fc64 	.word	0x0800fc64
 8006fe8:	0800fad0 	.word	0x0800fad0
 8006fec:	0800fc80 	.word	0x0800fc80
 8006ff0:	0800fca0 	.word	0x0800fca0
 8006ff4:	08006d05 	.word	0x08006d05

08006ff8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007002:	4b05      	ldr	r3, [pc, #20]	; (8007018 <ptr_to_mem+0x20>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	4413      	add	r3, r2
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	24004cb0 	.word	0x24004cb0

0800701c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <mem_to_ptr+0x20>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	b29b      	uxth	r3, r3
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	24004cb0 	.word	0x24004cb0

08007040 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007040:	b590      	push	{r4, r7, lr}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007048:	4b45      	ldr	r3, [pc, #276]	; (8007160 <plug_holes+0x120>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d206      	bcs.n	8007060 <plug_holes+0x20>
 8007052:	4b44      	ldr	r3, [pc, #272]	; (8007164 <plug_holes+0x124>)
 8007054:	f240 12df 	movw	r2, #479	; 0x1df
 8007058:	4943      	ldr	r1, [pc, #268]	; (8007168 <plug_holes+0x128>)
 800705a:	4844      	ldr	r0, [pc, #272]	; (800716c <plug_holes+0x12c>)
 800705c:	f007 fad0 	bl	800e600 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007060:	4b43      	ldr	r3, [pc, #268]	; (8007170 <plug_holes+0x130>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d306      	bcc.n	8007078 <plug_holes+0x38>
 800706a:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <plug_holes+0x124>)
 800706c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007070:	4940      	ldr	r1, [pc, #256]	; (8007174 <plug_holes+0x134>)
 8007072:	483e      	ldr	r0, [pc, #248]	; (800716c <plug_holes+0x12c>)
 8007074:	f007 fac4 	bl	800e600 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	791b      	ldrb	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <plug_holes+0x4e>
 8007080:	4b38      	ldr	r3, [pc, #224]	; (8007164 <plug_holes+0x124>)
 8007082:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007086:	493c      	ldr	r1, [pc, #240]	; (8007178 <plug_holes+0x138>)
 8007088:	4838      	ldr	r0, [pc, #224]	; (800716c <plug_holes+0x12c>)
 800708a:	f007 fab9 	bl	800e600 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007096:	d906      	bls.n	80070a6 <plug_holes+0x66>
 8007098:	4b32      	ldr	r3, [pc, #200]	; (8007164 <plug_holes+0x124>)
 800709a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800709e:	4937      	ldr	r1, [pc, #220]	; (800717c <plug_holes+0x13c>)
 80070a0:	4832      	ldr	r0, [pc, #200]	; (800716c <plug_holes+0x12c>)
 80070a2:	f007 faad 	bl	800e600 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff ffa4 	bl	8006ff8 <ptr_to_mem>
 80070b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d024      	beq.n	8007104 <plug_holes+0xc4>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d120      	bne.n	8007104 <plug_holes+0xc4>
 80070c2:	4b2b      	ldr	r3, [pc, #172]	; (8007170 <plug_holes+0x130>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d01b      	beq.n	8007104 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80070cc:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <plug_holes+0x140>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d102      	bne.n	80070dc <plug_holes+0x9c>
      lfree = mem;
 80070d6:	4a2a      	ldr	r2, [pc, #168]	; (8007180 <plug_holes+0x140>)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	881a      	ldrh	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80070ec:	d00a      	beq.n	8007104 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff ff80 	bl	8006ff8 <ptr_to_mem>
 80070f8:	4604      	mov	r4, r0
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff8e 	bl	800701c <mem_to_ptr>
 8007100:	4603      	mov	r3, r0
 8007102:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	885b      	ldrh	r3, [r3, #2]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ff75 	bl	8006ff8 <ptr_to_mem>
 800710e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d01f      	beq.n	8007158 <plug_holes+0x118>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d11b      	bne.n	8007158 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007120:	4b17      	ldr	r3, [pc, #92]	; (8007180 <plug_holes+0x140>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d102      	bne.n	8007130 <plug_holes+0xf0>
      lfree = pmem;
 800712a:	4a15      	ldr	r2, [pc, #84]	; (8007180 <plug_holes+0x140>)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007140:	d00a      	beq.n	8007158 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff ff56 	bl	8006ff8 <ptr_to_mem>
 800714c:	4604      	mov	r4, r0
 800714e:	68b8      	ldr	r0, [r7, #8]
 8007150:	f7ff ff64 	bl	800701c <mem_to_ptr>
 8007154:	4603      	mov	r3, r0
 8007156:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	bd90      	pop	{r4, r7, pc}
 8007160:	24004cb0 	.word	0x24004cb0
 8007164:	0800fcb0 	.word	0x0800fcb0
 8007168:	0800fd28 	.word	0x0800fd28
 800716c:	0800fd40 	.word	0x0800fd40
 8007170:	24004cb4 	.word	0x24004cb4
 8007174:	0800fd68 	.word	0x0800fd68
 8007178:	0800fd84 	.word	0x0800fd84
 800717c:	0800fda0 	.word	0x0800fda0
 8007180:	24004cb8 	.word	0x24004cb8

08007184 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800718a:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <mem_init+0x60>)
 800718c:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <mem_init+0x64>)
 800718e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007190:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <mem_init+0x60>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800719c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80071aa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80071ae:	f7ff ff23 	bl	8006ff8 <ptr_to_mem>
 80071b2:	4603      	mov	r3, r0
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <mem_init+0x68>)
 80071b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <mem_init+0x68>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2201      	movs	r2, #1
 80071be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <mem_init+0x68>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80071c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80071ca:	4b08      	ldr	r3, [pc, #32]	; (80071ec <mem_init+0x68>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80071d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <mem_init+0x60>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a05      	ldr	r2, [pc, #20]	; (80071f0 <mem_init+0x6c>)
 80071da:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	24004cb0 	.word	0x24004cb0
 80071e8:	30002000 	.word	0x30002000
 80071ec:	24004cb4 	.word	0x24004cb4
 80071f0:	24004cb8 	.word	0x24004cb8

080071f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff ff0d 	bl	800701c <mem_to_ptr>
 8007202:	4603      	mov	r3, r0
 8007204:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fef4 	bl	8006ff8 <ptr_to_mem>
 8007210:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff feee 	bl	8006ff8 <ptr_to_mem>
 800721c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007226:	d818      	bhi.n	800725a <mem_link_valid+0x66>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	885b      	ldrh	r3, [r3, #2]
 800722c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007230:	d813      	bhi.n	800725a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007236:	8afa      	ldrh	r2, [r7, #22]
 8007238:	429a      	cmp	r2, r3
 800723a:	d004      	beq.n	8007246 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	8afa      	ldrh	r2, [r7, #22]
 8007242:	429a      	cmp	r2, r3
 8007244:	d109      	bne.n	800725a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007246:	4b08      	ldr	r3, [pc, #32]	; (8007268 <mem_link_valid+0x74>)
 8007248:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	429a      	cmp	r2, r3
 800724e:	d006      	beq.n	800725e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	8afa      	ldrh	r2, [r7, #22]
 8007256:	429a      	cmp	r2, r3
 8007258:	d001      	beq.n	800725e <mem_link_valid+0x6a>
    return 0;
 800725a:	2300      	movs	r3, #0
 800725c:	e000      	b.n	8007260 <mem_link_valid+0x6c>
  }
  return 1;
 800725e:	2301      	movs	r3, #1
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	24004cb4 	.word	0x24004cb4

0800726c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04c      	beq.n	8007314 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007284:	4b25      	ldr	r3, [pc, #148]	; (800731c <mem_free+0xb0>)
 8007286:	f240 2273 	movw	r2, #627	; 0x273
 800728a:	4925      	ldr	r1, [pc, #148]	; (8007320 <mem_free+0xb4>)
 800728c:	4825      	ldr	r0, [pc, #148]	; (8007324 <mem_free+0xb8>)
 800728e:	f007 f9b7 	bl	800e600 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007292:	e040      	b.n	8007316 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3b08      	subs	r3, #8
 8007298:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <mem_free+0xbc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d306      	bcc.n	80072b2 <mem_free+0x46>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f103 020c 	add.w	r2, r3, #12
 80072aa:	4b20      	ldr	r3, [pc, #128]	; (800732c <mem_free+0xc0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d907      	bls.n	80072c2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80072b2:	4b1a      	ldr	r3, [pc, #104]	; (800731c <mem_free+0xb0>)
 80072b4:	f240 227f 	movw	r2, #639	; 0x27f
 80072b8:	491d      	ldr	r1, [pc, #116]	; (8007330 <mem_free+0xc4>)
 80072ba:	481a      	ldr	r0, [pc, #104]	; (8007324 <mem_free+0xb8>)
 80072bc:	f007 f9a0 	bl	800e600 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072c0:	e029      	b.n	8007316 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	791b      	ldrb	r3, [r3, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d107      	bne.n	80072da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80072ca:	4b14      	ldr	r3, [pc, #80]	; (800731c <mem_free+0xb0>)
 80072cc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80072d0:	4918      	ldr	r1, [pc, #96]	; (8007334 <mem_free+0xc8>)
 80072d2:	4814      	ldr	r0, [pc, #80]	; (8007324 <mem_free+0xb8>)
 80072d4:	f007 f994 	bl	800e600 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072d8:	e01d      	b.n	8007316 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff ff8a 	bl	80071f4 <mem_link_valid>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d107      	bne.n	80072f6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <mem_free+0xb0>)
 80072e8:	f240 2295 	movw	r2, #661	; 0x295
 80072ec:	4912      	ldr	r1, [pc, #72]	; (8007338 <mem_free+0xcc>)
 80072ee:	480d      	ldr	r0, [pc, #52]	; (8007324 <mem_free+0xb8>)
 80072f0:	f007 f986 	bl	800e600 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80072f4:	e00f      	b.n	8007316 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <mem_free+0xd0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	429a      	cmp	r2, r3
 8007304:	d202      	bcs.n	800730c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007306:	4a0d      	ldr	r2, [pc, #52]	; (800733c <mem_free+0xd0>)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fe97 	bl	8007040 <plug_holes>
 8007312:	e000      	b.n	8007316 <mem_free+0xaa>
    return;
 8007314:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	0800fcb0 	.word	0x0800fcb0
 8007320:	0800fdcc 	.word	0x0800fdcc
 8007324:	0800fd40 	.word	0x0800fd40
 8007328:	24004cb0 	.word	0x24004cb0
 800732c:	24004cb4 	.word	0x24004cb4
 8007330:	0800fdf0 	.word	0x0800fdf0
 8007334:	0800fe0c 	.word	0x0800fe0c
 8007338:	0800fe34 	.word	0x0800fe34
 800733c:	24004cb8 	.word	0x24004cb8

08007340 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800734c:	887b      	ldrh	r3, [r7, #2]
 800734e:	3303      	adds	r3, #3
 8007350:	b29b      	uxth	r3, r3
 8007352:	f023 0303 	bic.w	r3, r3, #3
 8007356:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007358:	8bfb      	ldrh	r3, [r7, #30]
 800735a:	2b0b      	cmp	r3, #11
 800735c:	d801      	bhi.n	8007362 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800735e:	230c      	movs	r3, #12
 8007360:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007362:	8bfb      	ldrh	r3, [r7, #30]
 8007364:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007368:	d803      	bhi.n	8007372 <mem_trim+0x32>
 800736a:	8bfa      	ldrh	r2, [r7, #30]
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	429a      	cmp	r2, r3
 8007370:	d201      	bcs.n	8007376 <mem_trim+0x36>
    return NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	e0cc      	b.n	8007510 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007376:	4b68      	ldr	r3, [pc, #416]	; (8007518 <mem_trim+0x1d8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d304      	bcc.n	800738a <mem_trim+0x4a>
 8007380:	4b66      	ldr	r3, [pc, #408]	; (800751c <mem_trim+0x1dc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d306      	bcc.n	8007398 <mem_trim+0x58>
 800738a:	4b65      	ldr	r3, [pc, #404]	; (8007520 <mem_trim+0x1e0>)
 800738c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007390:	4964      	ldr	r1, [pc, #400]	; (8007524 <mem_trim+0x1e4>)
 8007392:	4865      	ldr	r0, [pc, #404]	; (8007528 <mem_trim+0x1e8>)
 8007394:	f007 f934 	bl	800e600 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007398:	4b5f      	ldr	r3, [pc, #380]	; (8007518 <mem_trim+0x1d8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d304      	bcc.n	80073ac <mem_trim+0x6c>
 80073a2:	4b5e      	ldr	r3, [pc, #376]	; (800751c <mem_trim+0x1dc>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d301      	bcc.n	80073b0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	e0af      	b.n	8007510 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3b08      	subs	r3, #8
 80073b4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80073b6:	69b8      	ldr	r0, [r7, #24]
 80073b8:	f7ff fe30 	bl	800701c <mem_to_ptr>
 80073bc:	4603      	mov	r3, r0
 80073be:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	881a      	ldrh	r2, [r3, #0]
 80073c4:	8afb      	ldrh	r3, [r7, #22]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b08      	subs	r3, #8
 80073cc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80073ce:	8bfa      	ldrh	r2, [r7, #30]
 80073d0:	8abb      	ldrh	r3, [r7, #20]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d906      	bls.n	80073e4 <mem_trim+0xa4>
 80073d6:	4b52      	ldr	r3, [pc, #328]	; (8007520 <mem_trim+0x1e0>)
 80073d8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80073dc:	4953      	ldr	r1, [pc, #332]	; (800752c <mem_trim+0x1ec>)
 80073de:	4852      	ldr	r0, [pc, #328]	; (8007528 <mem_trim+0x1e8>)
 80073e0:	f007 f90e 	bl	800e600 <iprintf>
  if (newsize > size) {
 80073e4:	8bfa      	ldrh	r2, [r7, #30]
 80073e6:	8abb      	ldrh	r3, [r7, #20]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d901      	bls.n	80073f0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e08f      	b.n	8007510 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80073f0:	8bfa      	ldrh	r2, [r7, #30]
 80073f2:	8abb      	ldrh	r3, [r7, #20]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d101      	bne.n	80073fc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	e089      	b.n	8007510 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fdf9 	bl	8006ff8 <ptr_to_mem>
 8007406:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d13f      	bne.n	8007490 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007418:	d106      	bne.n	8007428 <mem_trim+0xe8>
 800741a:	4b41      	ldr	r3, [pc, #260]	; (8007520 <mem_trim+0x1e0>)
 800741c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007420:	4943      	ldr	r1, [pc, #268]	; (8007530 <mem_trim+0x1f0>)
 8007422:	4841      	ldr	r0, [pc, #260]	; (8007528 <mem_trim+0x1e8>)
 8007424:	f007 f8ec 	bl	800e600 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800742e:	8afa      	ldrh	r2, [r7, #22]
 8007430:	8bfb      	ldrh	r3, [r7, #30]
 8007432:	4413      	add	r3, r2
 8007434:	b29b      	uxth	r3, r3
 8007436:	3308      	adds	r3, #8
 8007438:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800743a:	4b3e      	ldr	r3, [pc, #248]	; (8007534 <mem_trim+0x1f4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	429a      	cmp	r2, r3
 8007442:	d106      	bne.n	8007452 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007444:	89fb      	ldrh	r3, [r7, #14]
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fdd6 	bl	8006ff8 <ptr_to_mem>
 800744c:	4603      	mov	r3, r0
 800744e:	4a39      	ldr	r2, [pc, #228]	; (8007534 <mem_trim+0x1f4>)
 8007450:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007452:	89fb      	ldrh	r3, [r7, #14]
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff fdcf 	bl	8006ff8 <ptr_to_mem>
 800745a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2200      	movs	r2, #0
 8007460:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	89ba      	ldrh	r2, [r7, #12]
 8007466:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	8afa      	ldrh	r2, [r7, #22]
 800746c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	89fa      	ldrh	r2, [r7, #14]
 8007472:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800747c:	d047      	beq.n	800750e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fdb8 	bl	8006ff8 <ptr_to_mem>
 8007488:	4602      	mov	r2, r0
 800748a:	89fb      	ldrh	r3, [r7, #14]
 800748c:	8053      	strh	r3, [r2, #2]
 800748e:	e03e      	b.n	800750e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007490:	8bfb      	ldrh	r3, [r7, #30]
 8007492:	f103 0214 	add.w	r2, r3, #20
 8007496:	8abb      	ldrh	r3, [r7, #20]
 8007498:	429a      	cmp	r2, r3
 800749a:	d838      	bhi.n	800750e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800749c:	8afa      	ldrh	r2, [r7, #22]
 800749e:	8bfb      	ldrh	r3, [r7, #30]
 80074a0:	4413      	add	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3308      	adds	r3, #8
 80074a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074b0:	d106      	bne.n	80074c0 <mem_trim+0x180>
 80074b2:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <mem_trim+0x1e0>)
 80074b4:	f240 3216 	movw	r2, #790	; 0x316
 80074b8:	491d      	ldr	r1, [pc, #116]	; (8007530 <mem_trim+0x1f0>)
 80074ba:	481b      	ldr	r0, [pc, #108]	; (8007528 <mem_trim+0x1e8>)
 80074bc:	f007 f8a0 	bl	800e600 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80074c0:	89fb      	ldrh	r3, [r7, #14]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fd98 	bl	8006ff8 <ptr_to_mem>
 80074c8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80074ca:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <mem_trim+0x1f4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d202      	bcs.n	80074da <mem_trim+0x19a>
      lfree = mem2;
 80074d4:	4a17      	ldr	r2, [pc, #92]	; (8007534 <mem_trim+0x1f4>)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2200      	movs	r2, #0
 80074de:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	8afa      	ldrh	r2, [r7, #22]
 80074ec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	89fa      	ldrh	r2, [r7, #14]
 80074f2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074fc:	d007      	beq.n	800750e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fd78 	bl	8006ff8 <ptr_to_mem>
 8007508:	4602      	mov	r2, r0
 800750a:	89fb      	ldrh	r3, [r7, #14]
 800750c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800750e:	687b      	ldr	r3, [r7, #4]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	24004cb0 	.word	0x24004cb0
 800751c:	24004cb4 	.word	0x24004cb4
 8007520:	0800fcb0 	.word	0x0800fcb0
 8007524:	0800fe68 	.word	0x0800fe68
 8007528:	0800fd40 	.word	0x0800fd40
 800752c:	0800fe80 	.word	0x0800fe80
 8007530:	0800fea0 	.word	0x0800fea0
 8007534:	24004cb8 	.word	0x24004cb8

08007538 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <mem_malloc+0x14>
    return NULL;
 8007548:	2300      	movs	r3, #0
 800754a:	e0d9      	b.n	8007700 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	3303      	adds	r3, #3
 8007550:	b29b      	uxth	r3, r3
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007558:	8bbb      	ldrh	r3, [r7, #28]
 800755a:	2b0b      	cmp	r3, #11
 800755c:	d801      	bhi.n	8007562 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800755e:	230c      	movs	r3, #12
 8007560:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007562:	8bbb      	ldrh	r3, [r7, #28]
 8007564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007568:	d803      	bhi.n	8007572 <mem_malloc+0x3a>
 800756a:	8bba      	ldrh	r2, [r7, #28]
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	429a      	cmp	r2, r3
 8007570:	d201      	bcs.n	8007576 <mem_malloc+0x3e>
    return NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	e0c4      	b.n	8007700 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007576:	4b64      	ldr	r3, [pc, #400]	; (8007708 <mem_malloc+0x1d0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fd4e 	bl	800701c <mem_to_ptr>
 8007580:	4603      	mov	r3, r0
 8007582:	83fb      	strh	r3, [r7, #30]
 8007584:	e0b4      	b.n	80076f0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007586:	8bfb      	ldrh	r3, [r7, #30]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fd35 	bl	8006ff8 <ptr_to_mem>
 800758e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	791b      	ldrb	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 80a4 	bne.w	80076e2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	8bfb      	ldrh	r3, [r7, #30]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	f1a3 0208 	sub.w	r2, r3, #8
 80075a8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80075aa:	429a      	cmp	r2, r3
 80075ac:	f0c0 8099 	bcc.w	80076e2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	461a      	mov	r2, r3
 80075b6:	8bfb      	ldrh	r3, [r7, #30]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	f1a3 0208 	sub.w	r2, r3, #8
 80075be:	8bbb      	ldrh	r3, [r7, #28]
 80075c0:	3314      	adds	r3, #20
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d333      	bcc.n	800762e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80075c6:	8bfa      	ldrh	r2, [r7, #30]
 80075c8:	8bbb      	ldrh	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3308      	adds	r3, #8
 80075d0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80075d2:	8a7b      	ldrh	r3, [r7, #18]
 80075d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075d8:	d106      	bne.n	80075e8 <mem_malloc+0xb0>
 80075da:	4b4c      	ldr	r3, [pc, #304]	; (800770c <mem_malloc+0x1d4>)
 80075dc:	f240 3287 	movw	r2, #903	; 0x387
 80075e0:	494b      	ldr	r1, [pc, #300]	; (8007710 <mem_malloc+0x1d8>)
 80075e2:	484c      	ldr	r0, [pc, #304]	; (8007714 <mem_malloc+0x1dc>)
 80075e4:	f007 f80c 	bl	800e600 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80075e8:	8a7b      	ldrh	r3, [r7, #18]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fd04 	bl	8006ff8 <ptr_to_mem>
 80075f0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8bfa      	ldrh	r2, [r7, #30]
 8007604:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	8a7a      	ldrh	r2, [r7, #18]
 800760a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2201      	movs	r2, #1
 8007610:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800761a:	d00b      	beq.n	8007634 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fce9 	bl	8006ff8 <ptr_to_mem>
 8007626:	4602      	mov	r2, r0
 8007628:	8a7b      	ldrh	r3, [r7, #18]
 800762a:	8053      	strh	r3, [r2, #2]
 800762c:	e002      	b.n	8007634 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2201      	movs	r2, #1
 8007632:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007634:	4b34      	ldr	r3, [pc, #208]	; (8007708 <mem_malloc+0x1d0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	429a      	cmp	r2, r3
 800763c:	d127      	bne.n	800768e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800763e:	4b32      	ldr	r3, [pc, #200]	; (8007708 <mem_malloc+0x1d0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007644:	e005      	b.n	8007652 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fcd4 	bl	8006ff8 <ptr_to_mem>
 8007650:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <mem_malloc+0x12c>
 800765a:	4b2f      	ldr	r3, [pc, #188]	; (8007718 <mem_malloc+0x1e0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	429a      	cmp	r2, r3
 8007662:	d1f0      	bne.n	8007646 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007664:	4a28      	ldr	r2, [pc, #160]	; (8007708 <mem_malloc+0x1d0>)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800766a:	4b27      	ldr	r3, [pc, #156]	; (8007708 <mem_malloc+0x1d0>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <mem_malloc+0x1e0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d00b      	beq.n	800768e <mem_malloc+0x156>
 8007676:	4b24      	ldr	r3, [pc, #144]	; (8007708 <mem_malloc+0x1d0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	791b      	ldrb	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <mem_malloc+0x156>
 8007680:	4b22      	ldr	r3, [pc, #136]	; (800770c <mem_malloc+0x1d4>)
 8007682:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007686:	4925      	ldr	r1, [pc, #148]	; (800771c <mem_malloc+0x1e4>)
 8007688:	4822      	ldr	r0, [pc, #136]	; (8007714 <mem_malloc+0x1dc>)
 800768a:	f006 ffb9 	bl	800e600 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800768e:	8bba      	ldrh	r2, [r7, #28]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	4413      	add	r3, r2
 8007694:	3308      	adds	r3, #8
 8007696:	4a20      	ldr	r2, [pc, #128]	; (8007718 <mem_malloc+0x1e0>)
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	4293      	cmp	r3, r2
 800769c:	d906      	bls.n	80076ac <mem_malloc+0x174>
 800769e:	4b1b      	ldr	r3, [pc, #108]	; (800770c <mem_malloc+0x1d4>)
 80076a0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80076a4:	491e      	ldr	r1, [pc, #120]	; (8007720 <mem_malloc+0x1e8>)
 80076a6:	481b      	ldr	r0, [pc, #108]	; (8007714 <mem_malloc+0x1dc>)
 80076a8:	f006 ffaa 	bl	800e600 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <mem_malloc+0x18c>
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <mem_malloc+0x1d4>)
 80076b8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80076bc:	4919      	ldr	r1, [pc, #100]	; (8007724 <mem_malloc+0x1ec>)
 80076be:	4815      	ldr	r0, [pc, #84]	; (8007714 <mem_malloc+0x1dc>)
 80076c0:	f006 ff9e 	bl	800e600 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <mem_malloc+0x1a4>
 80076ce:	4b0f      	ldr	r3, [pc, #60]	; (800770c <mem_malloc+0x1d4>)
 80076d0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80076d4:	4914      	ldr	r1, [pc, #80]	; (8007728 <mem_malloc+0x1f0>)
 80076d6:	480f      	ldr	r0, [pc, #60]	; (8007714 <mem_malloc+0x1dc>)
 80076d8:	f006 ff92 	bl	800e600 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3308      	adds	r3, #8
 80076e0:	e00e      	b.n	8007700 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80076e2:	8bfb      	ldrh	r3, [r7, #30]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fc87 	bl	8006ff8 <ptr_to_mem>
 80076ea:	4603      	mov	r3, r0
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80076f0:	8bfa      	ldrh	r2, [r7, #30]
 80076f2:	8bbb      	ldrh	r3, [r7, #28]
 80076f4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80076f8:	429a      	cmp	r2, r3
 80076fa:	f4ff af44 	bcc.w	8007586 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	24004cb8 	.word	0x24004cb8
 800770c:	0800fcb0 	.word	0x0800fcb0
 8007710:	0800fea0 	.word	0x0800fea0
 8007714:	0800fd40 	.word	0x0800fd40
 8007718:	24004cb4 	.word	0x24004cb4
 800771c:	0800feb4 	.word	0x0800feb4
 8007720:	0800fed0 	.word	0x0800fed0
 8007724:	0800ff00 	.word	0x0800ff00
 8007728:	0800ff30 	.word	0x0800ff30

0800772c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	3303      	adds	r3, #3
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e011      	b.n	8007772 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4413      	add	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	461a      	mov	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4293      	cmp	r3, r2
 800777c:	dbe7      	blt.n	800774e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007792:	2300      	movs	r3, #0
 8007794:	80fb      	strh	r3, [r7, #6]
 8007796:	e009      	b.n	80077ac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	4a08      	ldr	r2, [pc, #32]	; (80077bc <memp_init+0x30>)
 800779c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ffc3 	bl	800772c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	3301      	adds	r3, #1
 80077aa:	80fb      	strh	r3, [r7, #6]
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d9f2      	bls.n	8007798 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	08012298 	.word	0x08012298

080077c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d012      	beq.n	80077fc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d006      	beq.n	80077f8 <do_memp_malloc_pool+0x38>
 80077ea:	4b07      	ldr	r3, [pc, #28]	; (8007808 <do_memp_malloc_pool+0x48>)
 80077ec:	f44f 728c 	mov.w	r2, #280	; 0x118
 80077f0:	4906      	ldr	r1, [pc, #24]	; (800780c <do_memp_malloc_pool+0x4c>)
 80077f2:	4807      	ldr	r0, [pc, #28]	; (8007810 <do_memp_malloc_pool+0x50>)
 80077f4:	f006 ff04 	bl	800e600 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	e000      	b.n	80077fe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	0800ff54 	.word	0x0800ff54
 800780c:	0800ffcc 	.word	0x0800ffcc
 8007810:	0800fff0 	.word	0x0800fff0

08007814 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <memp_malloc_pool+0x1c>
 8007822:	4b0a      	ldr	r3, [pc, #40]	; (800784c <memp_malloc_pool+0x38>)
 8007824:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007828:	4909      	ldr	r1, [pc, #36]	; (8007850 <memp_malloc_pool+0x3c>)
 800782a:	480a      	ldr	r0, [pc, #40]	; (8007854 <memp_malloc_pool+0x40>)
 800782c:	f006 fee8 	bl	800e600 <iprintf>
  if (desc == NULL) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <memp_malloc_pool+0x26>
    return NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	e003      	b.n	8007842 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff ffc0 	bl	80077c0 <do_memp_malloc_pool>
 8007840:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	0800ff54 	.word	0x0800ff54
 8007850:	08010018 	.word	0x08010018
 8007854:	0800fff0 	.word	0x0800fff0

08007858 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d908      	bls.n	800787a <memp_malloc+0x22>
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <memp_malloc+0x3c>)
 800786a:	f240 1257 	movw	r2, #343	; 0x157
 800786e:	490a      	ldr	r1, [pc, #40]	; (8007898 <memp_malloc+0x40>)
 8007870:	480a      	ldr	r0, [pc, #40]	; (800789c <memp_malloc+0x44>)
 8007872:	f006 fec5 	bl	800e600 <iprintf>
 8007876:	2300      	movs	r3, #0
 8007878:	e008      	b.n	800788c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	4a08      	ldr	r2, [pc, #32]	; (80078a0 <memp_malloc+0x48>)
 800787e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007882:	4618      	mov	r0, r3
 8007884:	f7ff ff9c 	bl	80077c0 <do_memp_malloc_pool>
 8007888:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	0800ff54 	.word	0x0800ff54
 8007898:	0801002c 	.word	0x0801002c
 800789c:	0800fff0 	.word	0x0800fff0
 80078a0:	08012298 	.word	0x08012298

080078a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <do_memp_free_pool+0x22>
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <do_memp_free_pool+0x40>)
 80078ba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80078be:	490a      	ldr	r1, [pc, #40]	; (80078e8 <do_memp_free_pool+0x44>)
 80078c0:	480a      	ldr	r0, [pc, #40]	; (80078ec <do_memp_free_pool+0x48>)
 80078c2:	f006 fe9d 	bl	800e600 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	0800ff54 	.word	0x0800ff54
 80078e8:	0801004c 	.word	0x0801004c
 80078ec:	0800fff0 	.word	0x0800fff0

080078f0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <memp_free_pool+0x1e>
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <memp_free_pool+0x3c>)
 8007902:	f240 1295 	movw	r2, #405	; 0x195
 8007906:	490a      	ldr	r1, [pc, #40]	; (8007930 <memp_free_pool+0x40>)
 8007908:	480a      	ldr	r0, [pc, #40]	; (8007934 <memp_free_pool+0x44>)
 800790a:	f006 fe79 	bl	800e600 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <memp_free_pool+0x34>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ffc1 	bl	80078a4 <do_memp_free_pool>
 8007922:	e000      	b.n	8007926 <memp_free_pool+0x36>
    return;
 8007924:	bf00      	nop
}
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	0800ff54 	.word	0x0800ff54
 8007930:	08010018 	.word	0x08010018
 8007934:	0800fff0 	.word	0x0800fff0

08007938 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b08      	cmp	r3, #8
 8007948:	d907      	bls.n	800795a <memp_free+0x22>
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <memp_free+0x44>)
 800794c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007950:	490b      	ldr	r1, [pc, #44]	; (8007980 <memp_free+0x48>)
 8007952:	480c      	ldr	r0, [pc, #48]	; (8007984 <memp_free+0x4c>)
 8007954:	f006 fe54 	bl	800e600 <iprintf>
 8007958:	e00c      	b.n	8007974 <memp_free+0x3c>

  if (mem == NULL) {
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	4a09      	ldr	r2, [pc, #36]	; (8007988 <memp_free+0x50>)
 8007964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ff9a 	bl	80078a4 <do_memp_free_pool>
 8007970:	e000      	b.n	8007974 <memp_free+0x3c>
    return;
 8007972:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	0800ff54 	.word	0x0800ff54
 8007980:	0801006c 	.word	0x0801006c
 8007984:	0800fff0 	.word	0x0800fff0
 8007988:	08012298 	.word	0x08012298

0800798c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <netif_add+0x26>
 80079b0:	4b57      	ldr	r3, [pc, #348]	; (8007b10 <netif_add+0x174>)
 80079b2:	f240 1227 	movw	r2, #295	; 0x127
 80079b6:	4957      	ldr	r1, [pc, #348]	; (8007b14 <netif_add+0x178>)
 80079b8:	4857      	ldr	r0, [pc, #348]	; (8007b18 <netif_add+0x17c>)
 80079ba:	f006 fe21 	bl	800e600 <iprintf>
 80079be:	2300      	movs	r3, #0
 80079c0:	e0a2      	b.n	8007b08 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <netif_add+0x3e>
 80079c8:	4b51      	ldr	r3, [pc, #324]	; (8007b10 <netif_add+0x174>)
 80079ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 80079ce:	4953      	ldr	r1, [pc, #332]	; (8007b1c <netif_add+0x180>)
 80079d0:	4851      	ldr	r0, [pc, #324]	; (8007b18 <netif_add+0x17c>)
 80079d2:	f006 fe15 	bl	800e600 <iprintf>
 80079d6:	2300      	movs	r3, #0
 80079d8:	e096      	b.n	8007b08 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80079e0:	4b4f      	ldr	r3, [pc, #316]	; (8007b20 <netif_add+0x184>)
 80079e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80079ea:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <netif_add+0x184>)
 80079ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80079f4:	4b4a      	ldr	r3, [pc, #296]	; (8007b20 <netif_add+0x184>)
 80079f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a45      	ldr	r2, [pc, #276]	; (8007b24 <netif_add+0x188>)
 8007a0e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a3a      	ldr	r2, [r7, #32]
 8007a28:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007a2a:	4b3f      	ldr	r3, [pc, #252]	; (8007b28 <netif_add+0x18c>)
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a38:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f913 	bl	8007c6c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	4798      	blx	r3
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <netif_add+0xba>
    return NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e058      	b.n	8007b08 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a5c:	2bff      	cmp	r3, #255	; 0xff
 8007a5e:	d103      	bne.n	8007a68 <netif_add+0xcc>
        netif->num = 0;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a6c:	4b2f      	ldr	r3, [pc, #188]	; (8007b2c <netif_add+0x190>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e02b      	b.n	8007acc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d106      	bne.n	8007a8a <netif_add+0xee>
 8007a7c:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <netif_add+0x174>)
 8007a7e:	f240 128b 	movw	r2, #395	; 0x18b
 8007a82:	492b      	ldr	r1, [pc, #172]	; (8007b30 <netif_add+0x194>)
 8007a84:	4824      	ldr	r0, [pc, #144]	; (8007b18 <netif_add+0x17c>)
 8007a86:	f006 fdbb 	bl	800e600 <iprintf>
        num_netifs++;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2bff      	cmp	r3, #255	; 0xff
 8007a94:	dd06      	ble.n	8007aa4 <netif_add+0x108>
 8007a96:	4b1e      	ldr	r3, [pc, #120]	; (8007b10 <netif_add+0x174>)
 8007a98:	f240 128d 	movw	r2, #397	; 0x18d
 8007a9c:	4925      	ldr	r1, [pc, #148]	; (8007b34 <netif_add+0x198>)
 8007a9e:	481e      	ldr	r0, [pc, #120]	; (8007b18 <netif_add+0x17c>)
 8007aa0:	f006 fdae 	bl	800e600 <iprintf>
        if (netif2->num == netif->num) {
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d108      	bne.n	8007ac6 <netif_add+0x12a>
          netif->num++;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007aba:	3301      	adds	r3, #1
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007ac4:	e005      	b.n	8007ad2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1d0      	bne.n	8007a74 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1be      	bne.n	8007a56 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ade:	2bfe      	cmp	r3, #254	; 0xfe
 8007ae0:	d103      	bne.n	8007aea <netif_add+0x14e>
    netif_num = 0;
 8007ae2:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <netif_add+0x18c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e006      	b.n	8007af8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007af0:	3301      	adds	r3, #1
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <netif_add+0x18c>)
 8007af6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <netif_add+0x190>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007b00:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <netif_add+0x190>)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007b06:	68fb      	ldr	r3, [r7, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	08010088 	.word	0x08010088
 8007b14:	08010160 	.word	0x08010160
 8007b18:	0801011c 	.word	0x0801011c
 8007b1c:	0801017c 	.word	0x0801017c
 8007b20:	08012228 	.word	0x08012228
 8007b24:	08007f47 	.word	0x08007f47
 8007b28:	24007bb0 	.word	0x24007bb0
 8007b2c:	24007ba8 	.word	0x24007ba8
 8007b30:	080101a0 	.word	0x080101a0
 8007b34:	080101b4 	.word	0x080101b4

08007b38 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f002 fb43 	bl	800a1d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f006 fc27 	bl	800e3a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <netif_do_set_ipaddr+0x20>
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <netif_do_set_ipaddr+0x88>)
 8007b70:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007b74:	491c      	ldr	r1, [pc, #112]	; (8007be8 <netif_do_set_ipaddr+0x8c>)
 8007b76:	481d      	ldr	r0, [pc, #116]	; (8007bec <netif_do_set_ipaddr+0x90>)
 8007b78:	f006 fd42 	bl	800e600 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <netif_do_set_ipaddr+0x34>
 8007b82:	4b18      	ldr	r3, [pc, #96]	; (8007be4 <netif_do_set_ipaddr+0x88>)
 8007b84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007b88:	4917      	ldr	r1, [pc, #92]	; (8007be8 <netif_do_set_ipaddr+0x8c>)
 8007b8a:	4818      	ldr	r0, [pc, #96]	; (8007bec <netif_do_set_ipaddr+0x90>)
 8007b8c:	f006 fd38 	bl	800e600 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3304      	adds	r3, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d01c      	beq.n	8007bd8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007bae:	f107 0314 	add.w	r3, r7, #20
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ffbf 	bl	8007b38 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <netif_do_set_ipaddr+0x6a>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <netif_do_set_ipaddr+0x6c>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007bcc:	2101      	movs	r1, #1
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 f8d2 	bl	8007d78 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	08010088 	.word	0x08010088
 8007be8:	080101e4 	.word	0x080101e4
 8007bec:	0801011c 	.word	0x0801011c

08007bf0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3308      	adds	r3, #8
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d00a      	beq.n	8007c20 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <netif_do_set_netmask+0x26>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	e000      	b.n	8007c18 <netif_do_set_netmask+0x28>
 8007c16:	2300      	movs	r3, #0
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e000      	b.n	8007c22 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	330c      	adds	r3, #12
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d00a      	beq.n	8007c5e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <netif_do_set_gw+0x26>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	e000      	b.n	8007c56 <netif_do_set_gw+0x28>
 8007c54:	2300      	movs	r3, #0
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007c88:	4b1c      	ldr	r3, [pc, #112]	; (8007cfc <netif_set_addr+0x90>)
 8007c8a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007c92:	4b1a      	ldr	r3, [pc, #104]	; (8007cfc <netif_set_addr+0x90>)
 8007c94:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007c9c:	4b17      	ldr	r3, [pc, #92]	; (8007cfc <netif_set_addr+0x90>)
 8007c9e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <netif_set_addr+0x42>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <netif_set_addr+0x46>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <netif_set_addr+0x48>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d006      	beq.n	8007cca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007cbc:	f107 0310 	add.w	r3, r7, #16
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff ff49 	bl	8007b5c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff ff8e 	bl	8007bf0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff ffa8 	bl	8007c2e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d106      	bne.n	8007cf2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ce4:	f107 0310 	add.w	r3, r7, #16
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff ff35 	bl	8007b5c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007cf2:	bf00      	nop
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	08012228 	.word	0x08012228

08007d00 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007d08:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <netif_set_default+0x1c>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	24007bac 	.word	0x24007bac

08007d20 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d107      	bne.n	8007d3e <netif_set_up+0x1e>
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <netif_set_up+0x4c>)
 8007d30:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007d34:	490e      	ldr	r1, [pc, #56]	; (8007d70 <netif_set_up+0x50>)
 8007d36:	480f      	ldr	r0, [pc, #60]	; (8007d74 <netif_set_up+0x54>)
 8007d38:	f006 fc62 	bl	800e600 <iprintf>
 8007d3c:	e013      	b.n	8007d66 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10c      	bne.n	8007d66 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007d5e:	2103      	movs	r1, #3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f809 	bl	8007d78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	08010088 	.word	0x08010088
 8007d70:	08010254 	.word	0x08010254
 8007d74:	0801011c 	.word	0x0801011c

08007d78 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <netif_issue_reports+0x20>
 8007d8a:	4b18      	ldr	r3, [pc, #96]	; (8007dec <netif_issue_reports+0x74>)
 8007d8c:	f240 326d 	movw	r2, #877	; 0x36d
 8007d90:	4917      	ldr	r1, [pc, #92]	; (8007df0 <netif_issue_reports+0x78>)
 8007d92:	4818      	ldr	r0, [pc, #96]	; (8007df4 <netif_issue_reports+0x7c>)
 8007d94:	f006 fc34 	bl	800e600 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d01e      	beq.n	8007de4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d017      	beq.n	8007de4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d013      	beq.n	8007de6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fd fc87 	bl	80056f0 <etharp_request>
 8007de2:	e000      	b.n	8007de6 <netif_issue_reports+0x6e>
    return;
 8007de4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	08010088 	.word	0x08010088
 8007df0:	08010270 	.word	0x08010270
 8007df4:	0801011c 	.word	0x0801011c

08007df8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d107      	bne.n	8007e16 <netif_set_down+0x1e>
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <netif_set_down+0x58>)
 8007e08:	f240 329b 	movw	r2, #923	; 0x39b
 8007e0c:	4911      	ldr	r1, [pc, #68]	; (8007e54 <netif_set_down+0x5c>)
 8007e0e:	4812      	ldr	r0, [pc, #72]	; (8007e58 <netif_set_down+0x60>)
 8007e10:	f006 fbf6 	bl	800e600 <iprintf>
 8007e14:	e019      	b.n	8007e4a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7fd f811 	bl	8004e6c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	08010088 	.word	0x08010088
 8007e54:	08010294 	.word	0x08010294
 8007e58:	0801011c 	.word	0x0801011c

08007e5c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d107      	bne.n	8007e7a <netif_set_link_up+0x1e>
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <netif_set_link_up+0x5c>)
 8007e6c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007e70:	4912      	ldr	r1, [pc, #72]	; (8007ebc <netif_set_link_up+0x60>)
 8007e72:	4813      	ldr	r0, [pc, #76]	; (8007ec0 <netif_set_link_up+0x64>)
 8007e74:	f006 fbc4 	bl	800e600 <iprintf>
 8007e78:	e01b      	b.n	8007eb2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d114      	bne.n	8007eb2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e8e:	f043 0304 	orr.w	r3, r3, #4
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e9a:	2103      	movs	r1, #3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ff6b 	bl	8007d78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <netif_set_link_up+0x56>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	08010088 	.word	0x08010088
 8007ebc:	080102b4 	.word	0x080102b4
 8007ec0:	0801011c 	.word	0x0801011c

08007ec4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <netif_set_link_down+0x1e>
 8007ed2:	4b11      	ldr	r3, [pc, #68]	; (8007f18 <netif_set_link_down+0x54>)
 8007ed4:	f240 4206 	movw	r2, #1030	; 0x406
 8007ed8:	4910      	ldr	r1, [pc, #64]	; (8007f1c <netif_set_link_down+0x58>)
 8007eda:	4811      	ldr	r0, [pc, #68]	; (8007f20 <netif_set_link_down+0x5c>)
 8007edc:	f006 fb90 	bl	800e600 <iprintf>
 8007ee0:	e017      	b.n	8007f12 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d010      	beq.n	8007f12 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ef6:	f023 0304 	bic.w	r3, r3, #4
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <netif_set_link_down+0x4e>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	08010088 	.word	0x08010088
 8007f1c:	080102d8 	.word	0x080102d8
 8007f20:	0801011c 	.word	0x0801011c

08007f24 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	61da      	str	r2, [r3, #28]
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007f52:	f06f 030b 	mvn.w	r3, #11
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d013      	beq.n	8007f9c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007f74:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <netif_get_by_index+0x48>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	e00c      	b.n	8007f96 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	79fa      	ldrb	r2, [r7, #7]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d101      	bne.n	8007f90 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	e006      	b.n	8007f9e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1ef      	bne.n	8007f7c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	24007ba8 	.word	0x24007ba8

08007fb0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <pbuf_free_ooseq+0x38>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <pbuf_free_ooseq+0x3c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	e00a      	b.n	8007fda <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 f93d 	bl	800a24c <tcp_free_ooseq>
      return;
 8007fd2:	e005      	b.n	8007fe0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1f1      	bne.n	8007fc4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	24007bb1 	.word	0x24007bb1
 8007fec:	24007bc0 	.word	0x24007bc0

08007ff0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007ff4:	4b03      	ldr	r3, [pc, #12]	; (8008004 <pbuf_pool_is_empty+0x14>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007ffa:	bf00      	nop
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	24007bb1 	.word	0x24007bb1

08008008 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4611      	mov	r1, r2
 8008014:	461a      	mov	r2, r3
 8008016:	460b      	mov	r3, r1
 8008018:	80fb      	strh	r3, [r7, #6]
 800801a:	4613      	mov	r3, r2
 800801c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	88fa      	ldrh	r2, [r7, #6]
 800802e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	88ba      	ldrh	r2, [r7, #4]
 8008034:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008036:	8b3b      	ldrh	r3, [r7, #24]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	7f3a      	ldrb	r2, [r7, #28]
 8008042:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	73da      	strb	r2, [r3, #15]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af02      	add	r7, sp, #8
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
 8008066:	460b      	mov	r3, r1
 8008068:	80bb      	strh	r3, [r7, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008072:	887b      	ldrh	r3, [r7, #2]
 8008074:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008078:	d07f      	beq.n	800817a <pbuf_alloc+0x11e>
 800807a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800807e:	f300 80c8 	bgt.w	8008212 <pbuf_alloc+0x1b6>
 8008082:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008086:	d010      	beq.n	80080aa <pbuf_alloc+0x4e>
 8008088:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800808c:	f300 80c1 	bgt.w	8008212 <pbuf_alloc+0x1b6>
 8008090:	2b01      	cmp	r3, #1
 8008092:	d002      	beq.n	800809a <pbuf_alloc+0x3e>
 8008094:	2b41      	cmp	r3, #65	; 0x41
 8008096:	f040 80bc 	bne.w	8008212 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800809a:	887a      	ldrh	r2, [r7, #2]
 800809c:	88bb      	ldrh	r3, [r7, #4]
 800809e:	4619      	mov	r1, r3
 80080a0:	2000      	movs	r0, #0
 80080a2:	f000 f8d1 	bl	8008248 <pbuf_alloc_reference>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80080a8:	e0bd      	b.n	8008226 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80080b2:	88bb      	ldrh	r3, [r7, #4]
 80080b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80080b6:	2008      	movs	r0, #8
 80080b8:	f7ff fbce 	bl	8007858 <memp_malloc>
 80080bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d109      	bne.n	80080d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80080c4:	f7ff ff94 	bl	8007ff0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80080ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080d0:	f000 faa8 	bl	8008624 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e0a7      	b.n	8008228 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80080d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080da:	3303      	adds	r3, #3
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	8b7a      	ldrh	r2, [r7, #26]
 80080ec:	4293      	cmp	r3, r2
 80080ee:	bf28      	it	cs
 80080f0:	4613      	movcs	r3, r2
 80080f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80080f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80080f6:	3310      	adds	r3, #16
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4413      	add	r3, r2
 80080fc:	3303      	adds	r3, #3
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	4618      	mov	r0, r3
 8008104:	89f9      	ldrh	r1, [r7, #14]
 8008106:	8b7a      	ldrh	r2, [r7, #26]
 8008108:	2300      	movs	r3, #0
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	887b      	ldrh	r3, [r7, #2]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	460b      	mov	r3, r1
 8008112:	4601      	mov	r1, r0
 8008114:	6938      	ldr	r0, [r7, #16]
 8008116:	f7ff ff77 	bl	8008008 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d006      	beq.n	8008134 <pbuf_alloc+0xd8>
 8008126:	4b42      	ldr	r3, [pc, #264]	; (8008230 <pbuf_alloc+0x1d4>)
 8008128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800812c:	4941      	ldr	r1, [pc, #260]	; (8008234 <pbuf_alloc+0x1d8>)
 800812e:	4842      	ldr	r0, [pc, #264]	; (8008238 <pbuf_alloc+0x1dc>)
 8008130:	f006 fa66 	bl	800e600 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008136:	3303      	adds	r3, #3
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008140:	d106      	bne.n	8008150 <pbuf_alloc+0xf4>
 8008142:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <pbuf_alloc+0x1d4>)
 8008144:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008148:	493c      	ldr	r1, [pc, #240]	; (800823c <pbuf_alloc+0x1e0>)
 800814a:	483b      	ldr	r0, [pc, #236]	; (8008238 <pbuf_alloc+0x1dc>)
 800814c:	f006 fa58 	bl	800e600 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	e002      	b.n	8008162 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008166:	8b7a      	ldrh	r2, [r7, #26]
 8008168:	89fb      	ldrh	r3, [r7, #14]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008172:	8b7b      	ldrh	r3, [r7, #26]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d19e      	bne.n	80080b6 <pbuf_alloc+0x5a>
      break;
 8008178:	e055      	b.n	8008226 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800817a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800817c:	3303      	adds	r3, #3
 800817e:	b29b      	uxth	r3, r3
 8008180:	f023 0303 	bic.w	r3, r3, #3
 8008184:	b29a      	uxth	r2, r3
 8008186:	88bb      	ldrh	r3, [r7, #4]
 8008188:	3303      	adds	r3, #3
 800818a:	b29b      	uxth	r3, r3
 800818c:	f023 0303 	bic.w	r3, r3, #3
 8008190:	b29b      	uxth	r3, r3
 8008192:	4413      	add	r3, r2
 8008194:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008196:	8b3b      	ldrh	r3, [r7, #24]
 8008198:	3310      	adds	r3, #16
 800819a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800819c:	8b3a      	ldrh	r2, [r7, #24]
 800819e:	88bb      	ldrh	r3, [r7, #4]
 80081a0:	3303      	adds	r3, #3
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d306      	bcc.n	80081b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80081aa:	8afa      	ldrh	r2, [r7, #22]
 80081ac:	88bb      	ldrh	r3, [r7, #4]
 80081ae:	3303      	adds	r3, #3
 80081b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d201      	bcs.n	80081bc <pbuf_alloc+0x160>
        return NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e035      	b.n	8008228 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80081bc:	8afb      	ldrh	r3, [r7, #22]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff f9ba 	bl	8007538 <mem_malloc>
 80081c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <pbuf_alloc+0x174>
        return NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e02b      	b.n	8008228 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80081d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081d2:	3310      	adds	r3, #16
 80081d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d6:	4413      	add	r3, r2
 80081d8:	3303      	adds	r3, #3
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	4618      	mov	r0, r3
 80081e0:	88b9      	ldrh	r1, [r7, #4]
 80081e2:	88ba      	ldrh	r2, [r7, #4]
 80081e4:	2300      	movs	r3, #0
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	460b      	mov	r3, r1
 80081ee:	4601      	mov	r1, r0
 80081f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081f2:	f7ff ff09 	bl	8008008 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d010      	beq.n	8008224 <pbuf_alloc+0x1c8>
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <pbuf_alloc+0x1d4>)
 8008204:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008208:	490d      	ldr	r1, [pc, #52]	; (8008240 <pbuf_alloc+0x1e4>)
 800820a:	480b      	ldr	r0, [pc, #44]	; (8008238 <pbuf_alloc+0x1dc>)
 800820c:	f006 f9f8 	bl	800e600 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008210:	e008      	b.n	8008224 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008212:	4b07      	ldr	r3, [pc, #28]	; (8008230 <pbuf_alloc+0x1d4>)
 8008214:	f240 1227 	movw	r2, #295	; 0x127
 8008218:	490a      	ldr	r1, [pc, #40]	; (8008244 <pbuf_alloc+0x1e8>)
 800821a:	4807      	ldr	r0, [pc, #28]	; (8008238 <pbuf_alloc+0x1dc>)
 800821c:	f006 f9f0 	bl	800e600 <iprintf>
      return NULL;
 8008220:	2300      	movs	r3, #0
 8008222:	e001      	b.n	8008228 <pbuf_alloc+0x1cc>
      break;
 8008224:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008228:	4618      	mov	r0, r3
 800822a:	3728      	adds	r7, #40	; 0x28
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	080102fc 	.word	0x080102fc
 8008234:	08010374 	.word	0x08010374
 8008238:	080103a4 	.word	0x080103a4
 800823c:	080103cc 	.word	0x080103cc
 8008240:	08010400 	.word	0x08010400
 8008244:	0801042c 	.word	0x0801042c

08008248 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	807b      	strh	r3, [r7, #2]
 8008254:	4613      	mov	r3, r2
 8008256:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008258:	883b      	ldrh	r3, [r7, #0]
 800825a:	2b41      	cmp	r3, #65	; 0x41
 800825c:	d009      	beq.n	8008272 <pbuf_alloc_reference+0x2a>
 800825e:	883b      	ldrh	r3, [r7, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d006      	beq.n	8008272 <pbuf_alloc_reference+0x2a>
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <pbuf_alloc_reference+0x5c>)
 8008266:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800826a:	490f      	ldr	r1, [pc, #60]	; (80082a8 <pbuf_alloc_reference+0x60>)
 800826c:	480f      	ldr	r0, [pc, #60]	; (80082ac <pbuf_alloc_reference+0x64>)
 800826e:	f006 f9c7 	bl	800e600 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008272:	2007      	movs	r0, #7
 8008274:	f7ff faf0 	bl	8007858 <memp_malloc>
 8008278:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	e00b      	b.n	800829c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008284:	8879      	ldrh	r1, [r7, #2]
 8008286:	887a      	ldrh	r2, [r7, #2]
 8008288:	2300      	movs	r3, #0
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	883b      	ldrh	r3, [r7, #0]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	460b      	mov	r3, r1
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff feb7 	bl	8008008 <pbuf_init_alloced_pbuf>
  return p;
 800829a:	68fb      	ldr	r3, [r7, #12]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	080102fc 	.word	0x080102fc
 80082a8:	08010448 	.word	0x08010448
 80082ac:	080103a4 	.word	0x080103a4

080082b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	607b      	str	r3, [r7, #4]
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
 80082bc:	460b      	mov	r3, r1
 80082be:	81bb      	strh	r3, [r7, #12]
 80082c0:	4613      	mov	r3, r2
 80082c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80082c8:	8a7b      	ldrh	r3, [r7, #18]
 80082ca:	3303      	adds	r3, #3
 80082cc:	f023 0203 	bic.w	r2, r3, #3
 80082d0:	89bb      	ldrh	r3, [r7, #12]
 80082d2:	441a      	add	r2, r3
 80082d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d901      	bls.n	80082de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	e018      	b.n	8008310 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80082e4:	8a7b      	ldrh	r3, [r7, #18]
 80082e6:	3303      	adds	r3, #3
 80082e8:	f023 0303 	bic.w	r3, r3, #3
 80082ec:	6a3a      	ldr	r2, [r7, #32]
 80082ee:	4413      	add	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	e001      	b.n	80082f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	89b9      	ldrh	r1, [r7, #12]
 80082fc:	89ba      	ldrh	r2, [r7, #12]
 80082fe:	2302      	movs	r3, #2
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	897b      	ldrh	r3, [r7, #10]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	460b      	mov	r3, r1
 8008308:	6979      	ldr	r1, [r7, #20]
 800830a:	f7ff fe7d 	bl	8008008 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800830e:	687b      	ldr	r3, [r7, #4]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <pbuf_realloc+0x20>
 800832a:	4b3a      	ldr	r3, [pc, #232]	; (8008414 <pbuf_realloc+0xfc>)
 800832c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008330:	4939      	ldr	r1, [pc, #228]	; (8008418 <pbuf_realloc+0x100>)
 8008332:	483a      	ldr	r0, [pc, #232]	; (800841c <pbuf_realloc+0x104>)
 8008334:	f006 f964 	bl	800e600 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	891b      	ldrh	r3, [r3, #8]
 800833c:	887a      	ldrh	r2, [r7, #2]
 800833e:	429a      	cmp	r2, r3
 8008340:	d263      	bcs.n	800840a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	891a      	ldrh	r2, [r3, #8]
 8008346:	887b      	ldrh	r3, [r7, #2]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	817b      	strh	r3, [r7, #10]
  q = p;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008354:	e018      	b.n	8008388 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	895b      	ldrh	r3, [r3, #10]
 800835a:	897a      	ldrh	r2, [r7, #10]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	891a      	ldrh	r2, [r3, #8]
 8008364:	893b      	ldrh	r3, [r7, #8]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <pbuf_realloc+0x70>
 800837a:	4b26      	ldr	r3, [pc, #152]	; (8008414 <pbuf_realloc+0xfc>)
 800837c:	f240 12af 	movw	r2, #431	; 0x1af
 8008380:	4927      	ldr	r1, [pc, #156]	; (8008420 <pbuf_realloc+0x108>)
 8008382:	4826      	ldr	r0, [pc, #152]	; (800841c <pbuf_realloc+0x104>)
 8008384:	f006 f93c 	bl	800e600 <iprintf>
  while (rem_len > q->len) {
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	895b      	ldrh	r3, [r3, #10]
 800838c:	897a      	ldrh	r2, [r7, #10]
 800838e:	429a      	cmp	r2, r3
 8008390:	d8e1      	bhi.n	8008356 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	7b1b      	ldrb	r3, [r3, #12]
 8008396:	f003 030f 	and.w	r3, r3, #15
 800839a:	2b00      	cmp	r3, #0
 800839c:	d121      	bne.n	80083e2 <pbuf_realloc+0xca>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	895b      	ldrh	r3, [r3, #10]
 80083a2:	897a      	ldrh	r2, [r7, #10]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d01c      	beq.n	80083e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	7b5b      	ldrb	r3, [r3, #13]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d116      	bne.n	80083e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	b29a      	uxth	r2, r3
 80083be:	897b      	ldrh	r3, [r7, #10]
 80083c0:	4413      	add	r3, r2
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	4619      	mov	r1, r3
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7fe ffba 	bl	8007340 <mem_trim>
 80083cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <pbuf_realloc+0xca>
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <pbuf_realloc+0xfc>)
 80083d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80083da:	4912      	ldr	r1, [pc, #72]	; (8008424 <pbuf_realloc+0x10c>)
 80083dc:	480f      	ldr	r0, [pc, #60]	; (800841c <pbuf_realloc+0x104>)
 80083de:	f006 f90f 	bl	800e600 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	897a      	ldrh	r2, [r7, #10]
 80083e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	895a      	ldrh	r2, [r3, #10]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f911 	bl	8008624 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	e000      	b.n	800840c <pbuf_realloc+0xf4>
    return;
 800840a:	bf00      	nop

}
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	080102fc 	.word	0x080102fc
 8008418:	0801045c 	.word	0x0801045c
 800841c:	080103a4 	.word	0x080103a4
 8008420:	08010474 	.word	0x08010474
 8008424:	0801048c 	.word	0x0801048c

08008428 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <pbuf_add_header_impl+0x22>
 800843c:	4b2b      	ldr	r3, [pc, #172]	; (80084ec <pbuf_add_header_impl+0xc4>)
 800843e:	f240 12df 	movw	r2, #479	; 0x1df
 8008442:	492b      	ldr	r1, [pc, #172]	; (80084f0 <pbuf_add_header_impl+0xc8>)
 8008444:	482b      	ldr	r0, [pc, #172]	; (80084f4 <pbuf_add_header_impl+0xcc>)
 8008446:	f006 f8db 	bl	800e600 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <pbuf_add_header_impl+0x30>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008456:	d301      	bcc.n	800845c <pbuf_add_header_impl+0x34>
    return 1;
 8008458:	2301      	movs	r3, #1
 800845a:	e043      	b.n	80084e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <pbuf_add_header_impl+0x3e>
    return 0;
 8008462:	2300      	movs	r3, #0
 8008464:	e03e      	b.n	80084e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	891a      	ldrh	r2, [r3, #8]
 800846e:	8a7b      	ldrh	r3, [r7, #18]
 8008470:	4413      	add	r3, r2
 8008472:	b29b      	uxth	r3, r3
 8008474:	8a7a      	ldrh	r2, [r7, #18]
 8008476:	429a      	cmp	r2, r3
 8008478:	d901      	bls.n	800847e <pbuf_add_header_impl+0x56>
    return 1;
 800847a:	2301      	movs	r3, #1
 800847c:	e032      	b.n	80084e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7b1b      	ldrb	r3, [r3, #12]
 8008482:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008484:	8a3b      	ldrh	r3, [r7, #16]
 8008486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00c      	beq.n	80084a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	425b      	negs	r3, r3
 8008496:	4413      	add	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3310      	adds	r3, #16
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d20d      	bcs.n	80084c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e01d      	b.n	80084e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d006      	beq.n	80084bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	425b      	negs	r3, r3
 80084b6:	4413      	add	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	e001      	b.n	80084c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80084bc:	2301      	movs	r3, #1
 80084be:	e011      	b.n	80084e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	895a      	ldrh	r2, [r3, #10]
 80084ca:	8a7b      	ldrh	r3, [r7, #18]
 80084cc:	4413      	add	r3, r2
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	891a      	ldrh	r2, [r3, #8]
 80084d8:	8a7b      	ldrh	r3, [r7, #18]
 80084da:	4413      	add	r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	080102fc 	.word	0x080102fc
 80084f0:	080104a8 	.word	0x080104a8
 80084f4:	080103a4 	.word	0x080103a4

080084f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008502:	2200      	movs	r2, #0
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff8e 	bl	8008428 <pbuf_add_header_impl>
 800850c:	4603      	mov	r3, r0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <pbuf_remove_header+0x1e>
 8008528:	4b20      	ldr	r3, [pc, #128]	; (80085ac <pbuf_remove_header+0x94>)
 800852a:	f240 224b 	movw	r2, #587	; 0x24b
 800852e:	4920      	ldr	r1, [pc, #128]	; (80085b0 <pbuf_remove_header+0x98>)
 8008530:	4820      	ldr	r0, [pc, #128]	; (80085b4 <pbuf_remove_header+0x9c>)
 8008532:	f006 f865 	bl	800e600 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <pbuf_remove_header+0x2c>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008542:	d301      	bcc.n	8008548 <pbuf_remove_header+0x30>
    return 1;
 8008544:	2301      	movs	r3, #1
 8008546:	e02c      	b.n	80085a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <pbuf_remove_header+0x3a>
    return 0;
 800854e:	2300      	movs	r3, #0
 8008550:	e027      	b.n	80085a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	895b      	ldrh	r3, [r3, #10]
 800855a:	89fa      	ldrh	r2, [r7, #14]
 800855c:	429a      	cmp	r2, r3
 800855e:	d908      	bls.n	8008572 <pbuf_remove_header+0x5a>
 8008560:	4b12      	ldr	r3, [pc, #72]	; (80085ac <pbuf_remove_header+0x94>)
 8008562:	f240 2255 	movw	r2, #597	; 0x255
 8008566:	4914      	ldr	r1, [pc, #80]	; (80085b8 <pbuf_remove_header+0xa0>)
 8008568:	4812      	ldr	r0, [pc, #72]	; (80085b4 <pbuf_remove_header+0x9c>)
 800856a:	f006 f849 	bl	800e600 <iprintf>
 800856e:	2301      	movs	r3, #1
 8008570:	e017      	b.n	80085a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	441a      	add	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	895a      	ldrh	r2, [r3, #10]
 8008588:	89fb      	ldrh	r3, [r7, #14]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	b29a      	uxth	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	891a      	ldrh	r2, [r3, #8]
 8008596:	89fb      	ldrh	r3, [r7, #14]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	080102fc 	.word	0x080102fc
 80085b0:	080104a8 	.word	0x080104a8
 80085b4:	080103a4 	.word	0x080103a4
 80085b8:	080104b4 	.word	0x080104b4

080085bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	807b      	strh	r3, [r7, #2]
 80085c8:	4613      	mov	r3, r2
 80085ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80085cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	da08      	bge.n	80085e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80085d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085d8:	425b      	negs	r3, r3
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ff9b 	bl	8008518 <pbuf_remove_header>
 80085e2:	4603      	mov	r3, r0
 80085e4:	e007      	b.n	80085f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80085e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085ea:	787a      	ldrb	r2, [r7, #1]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff ff1a 	bl	8008428 <pbuf_add_header_impl>
 80085f4:	4603      	mov	r3, r0
  }
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800860a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800860e:	2201      	movs	r2, #1
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff ffd2 	bl	80085bc <pbuf_header_impl>
 8008618:	4603      	mov	r3, r0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10b      	bne.n	800864a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <pbuf_free+0x22>
 8008638:	4b38      	ldr	r3, [pc, #224]	; (800871c <pbuf_free+0xf8>)
 800863a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800863e:	4938      	ldr	r1, [pc, #224]	; (8008720 <pbuf_free+0xfc>)
 8008640:	4838      	ldr	r0, [pc, #224]	; (8008724 <pbuf_free+0x100>)
 8008642:	f005 ffdd 	bl	800e600 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008646:	2300      	movs	r3, #0
 8008648:	e063      	b.n	8008712 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800864e:	e05c      	b.n	800870a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	7b9b      	ldrb	r3, [r3, #14]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <pbuf_free+0x42>
 8008658:	4b30      	ldr	r3, [pc, #192]	; (800871c <pbuf_free+0xf8>)
 800865a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800865e:	4932      	ldr	r1, [pc, #200]	; (8008728 <pbuf_free+0x104>)
 8008660:	4830      	ldr	r0, [pc, #192]	; (8008724 <pbuf_free+0x100>)
 8008662:	f005 ffcd 	bl	800e600 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7b9b      	ldrb	r3, [r3, #14]
 800866a:	3b01      	subs	r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	739a      	strb	r2, [r3, #14]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7b9b      	ldrb	r3, [r3, #14]
 8008676:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008678:	7dbb      	ldrb	r3, [r7, #22]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d143      	bne.n	8008706 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7b1b      	ldrb	r3, [r3, #12]
 8008688:	f003 030f 	and.w	r3, r3, #15
 800868c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7b5b      	ldrb	r3, [r3, #13]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d011      	beq.n	80086be <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <pbuf_free+0x90>
 80086a6:	4b1d      	ldr	r3, [pc, #116]	; (800871c <pbuf_free+0xf8>)
 80086a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80086ac:	491f      	ldr	r1, [pc, #124]	; (800872c <pbuf_free+0x108>)
 80086ae:	481d      	ldr	r0, [pc, #116]	; (8008724 <pbuf_free+0x100>)
 80086b0:	f005 ffa6 	bl	800e600 <iprintf>
        pc->custom_free_function(p);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
 80086bc:	e01d      	b.n	80086fa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d104      	bne.n	80086ce <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	2008      	movs	r0, #8
 80086c8:	f7ff f936 	bl	8007938 <memp_free>
 80086cc:	e015      	b.n	80086fa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d104      	bne.n	80086de <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	2007      	movs	r0, #7
 80086d8:	f7ff f92e 	bl	8007938 <memp_free>
 80086dc:	e00d      	b.n	80086fa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <pbuf_free+0xc8>
          mem_free(p);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7fe fdc1 	bl	800726c <mem_free>
 80086ea:	e006      	b.n	80086fa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <pbuf_free+0xf8>)
 80086ee:	f240 320f 	movw	r2, #783	; 0x30f
 80086f2:	490f      	ldr	r1, [pc, #60]	; (8008730 <pbuf_free+0x10c>)
 80086f4:	480b      	ldr	r0, [pc, #44]	; (8008724 <pbuf_free+0x100>)
 80086f6:	f005 ff83 	bl	800e600 <iprintf>
        }
      }
      count++;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	3301      	adds	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	607b      	str	r3, [r7, #4]
 8008704:	e001      	b.n	800870a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d19f      	bne.n	8008650 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	080102fc 	.word	0x080102fc
 8008720:	080104a8 	.word	0x080104a8
 8008724:	080103a4 	.word	0x080103a4
 8008728:	080104d4 	.word	0x080104d4
 800872c:	080104ec 	.word	0x080104ec
 8008730:	08010510 	.word	0x08010510

08008734 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008740:	e005      	b.n	800874e <pbuf_clen+0x1a>
    ++len;
 8008742:	89fb      	ldrh	r3, [r7, #14]
 8008744:	3301      	adds	r3, #1
 8008746:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1f6      	bne.n	8008742 <pbuf_clen+0xe>
  }
  return len;
 8008754:	89fb      	ldrh	r3, [r7, #14]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d010      	beq.n	8008794 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7b9b      	ldrb	r3, [r3, #14]
 8008776:	3301      	adds	r3, #1
 8008778:	b2da      	uxtb	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7b9b      	ldrb	r3, [r3, #14]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <pbuf_ref+0x30>
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <pbuf_ref+0x38>)
 8008788:	f240 3242 	movw	r2, #834	; 0x342
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <pbuf_ref+0x3c>)
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <pbuf_ref+0x40>)
 8008790:	f005 ff36 	bl	800e600 <iprintf>
  }
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	080102fc 	.word	0x080102fc
 80087a0:	08010524 	.word	0x08010524
 80087a4:	080103a4 	.word	0x080103a4

080087a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <pbuf_cat+0x16>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <pbuf_cat+0x26>
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <pbuf_cat+0x98>)
 80087c0:	f240 3259 	movw	r2, #857	; 0x359
 80087c4:	491f      	ldr	r1, [pc, #124]	; (8008844 <pbuf_cat+0x9c>)
 80087c6:	4820      	ldr	r0, [pc, #128]	; (8008848 <pbuf_cat+0xa0>)
 80087c8:	f005 ff1a 	bl	800e600 <iprintf>
 80087cc:	e034      	b.n	8008838 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	e00a      	b.n	80087ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	891a      	ldrh	r2, [r3, #8]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	891b      	ldrh	r3, [r3, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f0      	bne.n	80087d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	891a      	ldrh	r2, [r3, #8]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	895b      	ldrh	r3, [r3, #10]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d006      	beq.n	800880c <pbuf_cat+0x64>
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <pbuf_cat+0x98>)
 8008800:	f240 3262 	movw	r2, #866	; 0x362
 8008804:	4911      	ldr	r1, [pc, #68]	; (800884c <pbuf_cat+0xa4>)
 8008806:	4810      	ldr	r0, [pc, #64]	; (8008848 <pbuf_cat+0xa0>)
 8008808:	f005 fefa 	bl	800e600 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d006      	beq.n	8008822 <pbuf_cat+0x7a>
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <pbuf_cat+0x98>)
 8008816:	f240 3263 	movw	r2, #867	; 0x363
 800881a:	490d      	ldr	r1, [pc, #52]	; (8008850 <pbuf_cat+0xa8>)
 800881c:	480a      	ldr	r0, [pc, #40]	; (8008848 <pbuf_cat+0xa0>)
 800881e:	f005 feef 	bl	800e600 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	891a      	ldrh	r2, [r3, #8]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	891b      	ldrh	r3, [r3, #8]
 800882a:	4413      	add	r3, r2
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	080102fc 	.word	0x080102fc
 8008844:	08010538 	.word	0x08010538
 8008848:	080103a4 	.word	0x080103a4
 800884c:	08010570 	.word	0x08010570
 8008850:	080105a0 	.word	0x080105a0

08008854 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	2300      	movs	r3, #0
 8008864:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d008      	beq.n	800887e <pbuf_copy+0x2a>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <pbuf_copy+0x2a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	891a      	ldrh	r2, [r3, #8]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	891b      	ldrh	r3, [r3, #8]
 800887a:	429a      	cmp	r2, r3
 800887c:	d209      	bcs.n	8008892 <pbuf_copy+0x3e>
 800887e:	4b57      	ldr	r3, [pc, #348]	; (80089dc <pbuf_copy+0x188>)
 8008880:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008884:	4956      	ldr	r1, [pc, #344]	; (80089e0 <pbuf_copy+0x18c>)
 8008886:	4857      	ldr	r0, [pc, #348]	; (80089e4 <pbuf_copy+0x190>)
 8008888:	f005 feba 	bl	800e600 <iprintf>
 800888c:	f06f 030f 	mvn.w	r3, #15
 8008890:	e09f      	b.n	80089d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	895b      	ldrh	r3, [r3, #10]
 8008896:	461a      	mov	r2, r3
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	1ad2      	subs	r2, r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	895b      	ldrh	r3, [r3, #10]
 80088a0:	4619      	mov	r1, r3
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1acb      	subs	r3, r1, r3
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d306      	bcc.n	80088b8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	895b      	ldrh	r3, [r3, #10]
 80088ae:	461a      	mov	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	e005      	b.n	80088c4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	895b      	ldrh	r3, [r3, #10]
 80088bc:	461a      	mov	r2, r3
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	18d0      	adds	r0, r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	4413      	add	r3, r2
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4619      	mov	r1, r3
 80088d8:	f005 ff6d 	bl	800e7b6 <memcpy>
    offset_to += len;
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4413      	add	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	895b      	ldrh	r3, [r3, #10]
 80088f0:	461a      	mov	r2, r3
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d906      	bls.n	8008906 <pbuf_copy+0xb2>
 80088f8:	4b38      	ldr	r3, [pc, #224]	; (80089dc <pbuf_copy+0x188>)
 80088fa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80088fe:	493a      	ldr	r1, [pc, #232]	; (80089e8 <pbuf_copy+0x194>)
 8008900:	4838      	ldr	r0, [pc, #224]	; (80089e4 <pbuf_copy+0x190>)
 8008902:	f005 fe7d 	bl	800e600 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	895b      	ldrh	r3, [r3, #10]
 800890a:	461a      	mov	r2, r3
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	4293      	cmp	r3, r2
 8008910:	d906      	bls.n	8008920 <pbuf_copy+0xcc>
 8008912:	4b32      	ldr	r3, [pc, #200]	; (80089dc <pbuf_copy+0x188>)
 8008914:	f240 32da 	movw	r2, #986	; 0x3da
 8008918:	4934      	ldr	r1, [pc, #208]	; (80089ec <pbuf_copy+0x198>)
 800891a:	4832      	ldr	r0, [pc, #200]	; (80089e4 <pbuf_copy+0x190>)
 800891c:	f005 fe70 	bl	800e600 <iprintf>
    if (offset_from >= p_from->len) {
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	895b      	ldrh	r3, [r3, #10]
 8008924:	461a      	mov	r2, r3
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4293      	cmp	r3, r2
 800892a:	d304      	bcc.n	8008936 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	895b      	ldrh	r3, [r3, #10]
 800893a:	461a      	mov	r2, r3
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	4293      	cmp	r3, r2
 8008940:	d114      	bne.n	800896c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10c      	bne.n	800896c <pbuf_copy+0x118>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d009      	beq.n	800896c <pbuf_copy+0x118>
 8008958:	4b20      	ldr	r3, [pc, #128]	; (80089dc <pbuf_copy+0x188>)
 800895a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800895e:	4924      	ldr	r1, [pc, #144]	; (80089f0 <pbuf_copy+0x19c>)
 8008960:	4820      	ldr	r0, [pc, #128]	; (80089e4 <pbuf_copy+0x190>)
 8008962:	f005 fe4d 	bl	800e600 <iprintf>
 8008966:	f06f 030f 	mvn.w	r3, #15
 800896a:	e032      	b.n	80089d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d013      	beq.n	800899a <pbuf_copy+0x146>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	895a      	ldrh	r2, [r3, #10]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	891b      	ldrh	r3, [r3, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	d10d      	bne.n	800899a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <pbuf_copy+0x146>
 8008986:	4b15      	ldr	r3, [pc, #84]	; (80089dc <pbuf_copy+0x188>)
 8008988:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800898c:	4919      	ldr	r1, [pc, #100]	; (80089f4 <pbuf_copy+0x1a0>)
 800898e:	4815      	ldr	r0, [pc, #84]	; (80089e4 <pbuf_copy+0x190>)
 8008990:	f005 fe36 	bl	800e600 <iprintf>
 8008994:	f06f 0305 	mvn.w	r3, #5
 8008998:	e01b      	b.n	80089d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d013      	beq.n	80089c8 <pbuf_copy+0x174>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	895a      	ldrh	r2, [r3, #10]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	891b      	ldrh	r3, [r3, #8]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d10d      	bne.n	80089c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <pbuf_copy+0x174>
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <pbuf_copy+0x188>)
 80089b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80089ba:	490e      	ldr	r1, [pc, #56]	; (80089f4 <pbuf_copy+0x1a0>)
 80089bc:	4809      	ldr	r0, [pc, #36]	; (80089e4 <pbuf_copy+0x190>)
 80089be:	f005 fe1f 	bl	800e600 <iprintf>
 80089c2:	f06f 0305 	mvn.w	r3, #5
 80089c6:	e004      	b.n	80089d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f47f af61 	bne.w	8008892 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3718      	adds	r7, #24
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	080102fc 	.word	0x080102fc
 80089e0:	080105ec 	.word	0x080105ec
 80089e4:	080103a4 	.word	0x080103a4
 80089e8:	0801061c 	.word	0x0801061c
 80089ec:	08010634 	.word	0x08010634
 80089f0:	08010650 	.word	0x08010650
 80089f4:	08010660 	.word	0x08010660

080089f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4611      	mov	r1, r2
 8008a04:	461a      	mov	r2, r3
 8008a06:	460b      	mov	r3, r1
 8008a08:	80fb      	strh	r3, [r7, #6]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d108      	bne.n	8008a2e <pbuf_copy_partial+0x36>
 8008a1c:	4b2b      	ldr	r3, [pc, #172]	; (8008acc <pbuf_copy_partial+0xd4>)
 8008a1e:	f240 420a 	movw	r2, #1034	; 0x40a
 8008a22:	492b      	ldr	r1, [pc, #172]	; (8008ad0 <pbuf_copy_partial+0xd8>)
 8008a24:	482b      	ldr	r0, [pc, #172]	; (8008ad4 <pbuf_copy_partial+0xdc>)
 8008a26:	f005 fdeb 	bl	800e600 <iprintf>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e04a      	b.n	8008ac4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d108      	bne.n	8008a46 <pbuf_copy_partial+0x4e>
 8008a34:	4b25      	ldr	r3, [pc, #148]	; (8008acc <pbuf_copy_partial+0xd4>)
 8008a36:	f240 420b 	movw	r2, #1035	; 0x40b
 8008a3a:	4927      	ldr	r1, [pc, #156]	; (8008ad8 <pbuf_copy_partial+0xe0>)
 8008a3c:	4825      	ldr	r0, [pc, #148]	; (8008ad4 <pbuf_copy_partial+0xdc>)
 8008a3e:	f005 fddf 	bl	800e600 <iprintf>
 8008a42:	2300      	movs	r3, #0
 8008a44:	e03e      	b.n	8008ac4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	e034      	b.n	8008ab6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008a4c:	88bb      	ldrh	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <pbuf_copy_partial+0x70>
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	895b      	ldrh	r3, [r3, #10]
 8008a56:	88ba      	ldrh	r2, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d305      	bcc.n	8008a68 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	895b      	ldrh	r3, [r3, #10]
 8008a60:	88ba      	ldrh	r2, [r7, #4]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	80bb      	strh	r3, [r7, #4]
 8008a66:	e023      	b.n	8008ab0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	895a      	ldrh	r2, [r3, #10]
 8008a6c:	88bb      	ldrh	r3, [r7, #4]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008a72:	8b3a      	ldrh	r2, [r7, #24]
 8008a74:	88fb      	ldrh	r3, [r7, #6]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d901      	bls.n	8008a7e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008a7a:	88fb      	ldrh	r3, [r7, #6]
 8008a7c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a7e:	8b7b      	ldrh	r3, [r7, #26]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	18d0      	adds	r0, r2, r3
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	88bb      	ldrh	r3, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	8b3a      	ldrh	r2, [r7, #24]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	f005 fe91 	bl	800e7b6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a94:	8afa      	ldrh	r2, [r7, #22]
 8008a96:	8b3b      	ldrh	r3, [r7, #24]
 8008a98:	4413      	add	r3, r2
 8008a9a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008a9c:	8b7a      	ldrh	r2, [r7, #26]
 8008a9e:	8b3b      	ldrh	r3, [r7, #24]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	8b3b      	ldrh	r3, [r7, #24]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <pbuf_copy_partial+0xca>
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1c4      	bne.n	8008a4c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008ac2:	8afb      	ldrh	r3, [r7, #22]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3720      	adds	r7, #32
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	080102fc 	.word	0x080102fc
 8008ad0:	0801068c 	.word	0x0801068c
 8008ad4:	080103a4 	.word	0x080103a4
 8008ad8:	080106ac 	.word	0x080106ac

08008adc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	603a      	str	r2, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	8919      	ldrh	r1, [r3, #8]
 8008af0:	88ba      	ldrh	r2, [r7, #4]
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff fab1 	bl	800805c <pbuf_alloc>
 8008afa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <pbuf_clone+0x2a>
    return NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e011      	b.n	8008b2a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff fea3 	bl	8008854 <pbuf_copy>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008b12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d006      	beq.n	8008b28 <pbuf_clone+0x4c>
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <pbuf_clone+0x58>)
 8008b1c:	f240 5224 	movw	r2, #1316	; 0x524
 8008b20:	4905      	ldr	r1, [pc, #20]	; (8008b38 <pbuf_clone+0x5c>)
 8008b22:	4806      	ldr	r0, [pc, #24]	; (8008b3c <pbuf_clone+0x60>)
 8008b24:	f005 fd6c 	bl	800e600 <iprintf>
  return q;
 8008b28:	68fb      	ldr	r3, [r7, #12]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	080102fc 	.word	0x080102fc
 8008b38:	080107b8 	.word	0x080107b8
 8008b3c:	080103a4 	.word	0x080103a4

08008b40 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008b44:	f005 fc5c 	bl	800e400 <rand>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	4b01      	ldr	r3, [pc, #4]	; (8008b60 <tcp_init+0x20>)
 8008b5a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008b5c:	bf00      	nop
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	2400002c 	.word	0x2400002c

08008b64 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7d1b      	ldrb	r3, [r3, #20]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d105      	bne.n	8008b80 <tcp_free+0x1c>
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <tcp_free+0x2c>)
 8008b76:	22d4      	movs	r2, #212	; 0xd4
 8008b78:	4906      	ldr	r1, [pc, #24]	; (8008b94 <tcp_free+0x30>)
 8008b7a:	4807      	ldr	r0, [pc, #28]	; (8008b98 <tcp_free+0x34>)
 8008b7c:	f005 fd40 	bl	800e600 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	2001      	movs	r0, #1
 8008b84:	f7fe fed8 	bl	8007938 <memp_free>
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	08010844 	.word	0x08010844
 8008b94:	080108bc 	.word	0x080108bc
 8008b98:	080108d0 	.word	0x080108d0

08008b9c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7d1b      	ldrb	r3, [r3, #20]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d105      	bne.n	8008bb8 <tcp_free_listen+0x1c>
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <tcp_free_listen+0x2c>)
 8008bae:	22df      	movs	r2, #223	; 0xdf
 8008bb0:	4906      	ldr	r1, [pc, #24]	; (8008bcc <tcp_free_listen+0x30>)
 8008bb2:	4807      	ldr	r0, [pc, #28]	; (8008bd0 <tcp_free_listen+0x34>)
 8008bb4:	f005 fd24 	bl	800e600 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	2002      	movs	r0, #2
 8008bbc:	f7fe febc 	bl	8007938 <memp_free>
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	08010844 	.word	0x08010844
 8008bcc:	080108f8 	.word	0x080108f8
 8008bd0:	080108d0 	.word	0x080108d0

08008bd4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008bd8:	f000 fea2 	bl	8009920 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <tcp_tmr+0x28>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <tcp_tmr+0x28>)
 8008be6:	701a      	strb	r2, [r3, #0]
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <tcp_tmr+0x28>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008bf4:	f000 fb54 	bl	80092a0 <tcp_slowtmr>
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	24007bc9 	.word	0x24007bc9

08008c00 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d105      	bne.n	8008c1c <tcp_remove_listener+0x1c>
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <tcp_remove_listener+0x48>)
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	490d      	ldr	r1, [pc, #52]	; (8008c4c <tcp_remove_listener+0x4c>)
 8008c16:	480e      	ldr	r0, [pc, #56]	; (8008c50 <tcp_remove_listener+0x50>)
 8008c18:	f005 fcf2 	bl	800e600 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e00a      	b.n	8008c38 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d102      	bne.n	8008c32 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1f1      	bne.n	8008c22 <tcp_remove_listener+0x22>
    }
  }
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	08010844 	.word	0x08010844
 8008c4c:	08010914 	.word	0x08010914
 8008c50:	080108d0 	.word	0x080108d0

08008c54 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <tcp_listen_closed+0x1c>
 8008c62:	4b14      	ldr	r3, [pc, #80]	; (8008cb4 <tcp_listen_closed+0x60>)
 8008c64:	f240 1211 	movw	r2, #273	; 0x111
 8008c68:	4913      	ldr	r1, [pc, #76]	; (8008cb8 <tcp_listen_closed+0x64>)
 8008c6a:	4814      	ldr	r0, [pc, #80]	; (8008cbc <tcp_listen_closed+0x68>)
 8008c6c:	f005 fcc8 	bl	800e600 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	7d1b      	ldrb	r3, [r3, #20]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d006      	beq.n	8008c86 <tcp_listen_closed+0x32>
 8008c78:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <tcp_listen_closed+0x60>)
 8008c7a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008c7e:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <tcp_listen_closed+0x6c>)
 8008c80:	480e      	ldr	r0, [pc, #56]	; (8008cbc <tcp_listen_closed+0x68>)
 8008c82:	f005 fcbd 	bl	800e600 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c86:	2301      	movs	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e00b      	b.n	8008ca4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008c8c:	4a0d      	ldr	r2, [pc, #52]	; (8008cc4 <tcp_listen_closed+0x70>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff ffb1 	bl	8008c00 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d9f0      	bls.n	8008c8c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	08010844 	.word	0x08010844
 8008cb8:	0801093c 	.word	0x0801093c
 8008cbc:	080108d0 	.word	0x080108d0
 8008cc0:	08010948 	.word	0x08010948
 8008cc4:	080122d4 	.word	0x080122d4

08008cc8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008cc8:	b5b0      	push	{r4, r5, r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af04      	add	r7, sp, #16
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d106      	bne.n	8008ce8 <tcp_close_shutdown+0x20>
 8008cda:	4b63      	ldr	r3, [pc, #396]	; (8008e68 <tcp_close_shutdown+0x1a0>)
 8008cdc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008ce0:	4962      	ldr	r1, [pc, #392]	; (8008e6c <tcp_close_shutdown+0x1a4>)
 8008ce2:	4863      	ldr	r0, [pc, #396]	; (8008e70 <tcp_close_shutdown+0x1a8>)
 8008ce4:	f005 fc8c 	bl	800e600 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d066      	beq.n	8008dbc <tcp_close_shutdown+0xf4>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d003      	beq.n	8008cfe <tcp_close_shutdown+0x36>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	7d1b      	ldrb	r3, [r3, #20]
 8008cfa:	2b07      	cmp	r3, #7
 8008cfc:	d15e      	bne.n	8008dbc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <tcp_close_shutdown+0x48>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008d0e:	d055      	beq.n	8008dbc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	8b5b      	ldrh	r3, [r3, #26]
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <tcp_close_shutdown+0x62>
 8008d1c:	4b52      	ldr	r3, [pc, #328]	; (8008e68 <tcp_close_shutdown+0x1a0>)
 8008d1e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008d22:	4954      	ldr	r1, [pc, #336]	; (8008e74 <tcp_close_shutdown+0x1ac>)
 8008d24:	4852      	ldr	r0, [pc, #328]	; (8008e70 <tcp_close_shutdown+0x1a8>)
 8008d26:	f005 fc6b 	bl	800e600 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d32:	687d      	ldr	r5, [r7, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3304      	adds	r3, #4
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	8ad2      	ldrh	r2, [r2, #22]
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	8b09      	ldrh	r1, [r1, #24]
 8008d40:	9102      	str	r1, [sp, #8]
 8008d42:	9201      	str	r2, [sp, #4]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	462b      	mov	r3, r5
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f004 fe91 	bl	800da74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 f8c6 	bl	8009ee4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008d58:	4b47      	ldr	r3, [pc, #284]	; (8008e78 <tcp_close_shutdown+0x1b0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d105      	bne.n	8008d6e <tcp_close_shutdown+0xa6>
 8008d62:	4b45      	ldr	r3, [pc, #276]	; (8008e78 <tcp_close_shutdown+0x1b0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	4a43      	ldr	r2, [pc, #268]	; (8008e78 <tcp_close_shutdown+0x1b0>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	e013      	b.n	8008d96 <tcp_close_shutdown+0xce>
 8008d6e:	4b42      	ldr	r3, [pc, #264]	; (8008e78 <tcp_close_shutdown+0x1b0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	e00c      	b.n	8008d90 <tcp_close_shutdown+0xc8>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d104      	bne.n	8008d8a <tcp_close_shutdown+0xc2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	60da      	str	r2, [r3, #12]
 8008d88:	e005      	b.n	8008d96 <tcp_close_shutdown+0xce>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1ef      	bne.n	8008d76 <tcp_close_shutdown+0xae>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	60da      	str	r2, [r3, #12]
 8008d9c:	4b37      	ldr	r3, [pc, #220]	; (8008e7c <tcp_close_shutdown+0x1b4>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008da2:	4b37      	ldr	r3, [pc, #220]	; (8008e80 <tcp_close_shutdown+0x1b8>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d102      	bne.n	8008db2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008dac:	f003 fd5e 	bl	800c86c <tcp_trigger_input_pcb_close>
 8008db0:	e002      	b.n	8008db8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff fed6 	bl	8008b64 <tcp_free>
      }
      return ERR_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e050      	b.n	8008e5e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d03b      	beq.n	8008e3c <tcp_close_shutdown+0x174>
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	dc44      	bgt.n	8008e52 <tcp_close_shutdown+0x18a>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <tcp_close_shutdown+0x10a>
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d02a      	beq.n	8008e26 <tcp_close_shutdown+0x15e>
 8008dd0:	e03f      	b.n	8008e52 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8adb      	ldrh	r3, [r3, #22]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d021      	beq.n	8008e1e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <tcp_close_shutdown+0x1bc>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d105      	bne.n	8008df0 <tcp_close_shutdown+0x128>
 8008de4:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <tcp_close_shutdown+0x1bc>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	4a26      	ldr	r2, [pc, #152]	; (8008e84 <tcp_close_shutdown+0x1bc>)
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	e013      	b.n	8008e18 <tcp_close_shutdown+0x150>
 8008df0:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <tcp_close_shutdown+0x1bc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60bb      	str	r3, [r7, #8]
 8008df6:	e00c      	b.n	8008e12 <tcp_close_shutdown+0x14a>
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d104      	bne.n	8008e0c <tcp_close_shutdown+0x144>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	60da      	str	r2, [r3, #12]
 8008e0a:	e005      	b.n	8008e18 <tcp_close_shutdown+0x150>
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ef      	bne.n	8008df8 <tcp_close_shutdown+0x130>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fea0 	bl	8008b64 <tcp_free>
      break;
 8008e24:	e01a      	b.n	8008e5c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff ff14 	bl	8008c54 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4816      	ldr	r0, [pc, #88]	; (8008e88 <tcp_close_shutdown+0x1c0>)
 8008e30:	f001 f8a8 	bl	8009f84 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff feb1 	bl	8008b9c <tcp_free_listen>
      break;
 8008e3a:	e00f      	b.n	8008e5c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	480e      	ldr	r0, [pc, #56]	; (8008e78 <tcp_close_shutdown+0x1b0>)
 8008e40:	f001 f8a0 	bl	8009f84 <tcp_pcb_remove>
 8008e44:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <tcp_close_shutdown+0x1b4>)
 8008e46:	2201      	movs	r2, #1
 8008e48:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff fe8a 	bl	8008b64 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008e50:	e004      	b.n	8008e5c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f81a 	bl	8008e8c <tcp_close_shutdown_fin>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	e000      	b.n	8008e5e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bdb0      	pop	{r4, r5, r7, pc}
 8008e66:	bf00      	nop
 8008e68:	08010844 	.word	0x08010844
 8008e6c:	08010960 	.word	0x08010960
 8008e70:	080108d0 	.word	0x080108d0
 8008e74:	08010980 	.word	0x08010980
 8008e78:	24007bc0 	.word	0x24007bc0
 8008e7c:	24007bc8 	.word	0x24007bc8
 8008e80:	24007c00 	.word	0x24007c00
 8008e84:	24007bb8 	.word	0x24007bb8
 8008e88:	24007bbc 	.word	0x24007bbc

08008e8c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <tcp_close_shutdown_fin+0x1c>
 8008e9a:	4b2e      	ldr	r3, [pc, #184]	; (8008f54 <tcp_close_shutdown_fin+0xc8>)
 8008e9c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008ea0:	492d      	ldr	r1, [pc, #180]	; (8008f58 <tcp_close_shutdown_fin+0xcc>)
 8008ea2:	482e      	ldr	r0, [pc, #184]	; (8008f5c <tcp_close_shutdown_fin+0xd0>)
 8008ea4:	f005 fbac 	bl	800e600 <iprintf>

  switch (pcb->state) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7d1b      	ldrb	r3, [r3, #20]
 8008eac:	2b07      	cmp	r3, #7
 8008eae:	d020      	beq.n	8008ef2 <tcp_close_shutdown_fin+0x66>
 8008eb0:	2b07      	cmp	r3, #7
 8008eb2:	dc2b      	bgt.n	8008f0c <tcp_close_shutdown_fin+0x80>
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d002      	beq.n	8008ebe <tcp_close_shutdown_fin+0x32>
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d00d      	beq.n	8008ed8 <tcp_close_shutdown_fin+0x4c>
 8008ebc:	e026      	b.n	8008f0c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f003 fee6 	bl	800cc90 <tcp_send_fin>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11f      	bne.n	8008f10 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2205      	movs	r2, #5
 8008ed4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ed6:	e01b      	b.n	8008f10 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f003 fed9 	bl	800cc90 <tcp_send_fin>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d114      	bne.n	8008f14 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2205      	movs	r2, #5
 8008eee:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ef0:	e010      	b.n	8008f14 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f003 fecc 	bl	800cc90 <tcp_send_fin>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2209      	movs	r2, #9
 8008f08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f0a:	e005      	b.n	8008f18 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e01c      	b.n	8008f4a <tcp_close_shutdown_fin+0xbe>
      break;
 8008f10:	bf00      	nop
 8008f12:	e002      	b.n	8008f1a <tcp_close_shutdown_fin+0x8e>
      break;
 8008f14:	bf00      	nop
 8008f16:	e000      	b.n	8008f1a <tcp_close_shutdown_fin+0x8e>
      break;
 8008f18:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d103      	bne.n	8008f2a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f003 fff2 	bl	800cf0c <tcp_output>
 8008f28:	e00d      	b.n	8008f46 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f32:	d108      	bne.n	8008f46 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	8b5b      	ldrh	r3, [r3, #26]
 8008f38:	f043 0308 	orr.w	r3, r3, #8
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e001      	b.n	8008f4a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	08010844 	.word	0x08010844
 8008f58:	0801093c 	.word	0x0801093c
 8008f5c:	080108d0 	.word	0x080108d0

08008f60 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <tcp_close+0x22>
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <tcp_close+0x4c>)
 8008f70:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008f74:	490e      	ldr	r1, [pc, #56]	; (8008fb0 <tcp_close+0x50>)
 8008f76:	480f      	ldr	r0, [pc, #60]	; (8008fb4 <tcp_close+0x54>)
 8008f78:	f005 fb42 	bl	800e600 <iprintf>
 8008f7c:	f06f 030f 	mvn.w	r3, #15
 8008f80:	e00f      	b.n	8008fa2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7d1b      	ldrb	r3, [r3, #20]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d006      	beq.n	8008f98 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8b5b      	ldrh	r3, [r3, #26]
 8008f8e:	f043 0310 	orr.w	r3, r3, #16
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008f98:	2101      	movs	r1, #1
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff fe94 	bl	8008cc8 <tcp_close_shutdown>
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	08010844 	.word	0x08010844
 8008fb0:	0801099c 	.word	0x0801099c
 8008fb4:	080108d0 	.word	0x080108d0

08008fb8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08e      	sub	sp, #56	; 0x38
 8008fbc:	af04      	add	r7, sp, #16
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d107      	bne.n	8008fd8 <tcp_abandon+0x20>
 8008fc8:	4b52      	ldr	r3, [pc, #328]	; (8009114 <tcp_abandon+0x15c>)
 8008fca:	f240 223d 	movw	r2, #573	; 0x23d
 8008fce:	4952      	ldr	r1, [pc, #328]	; (8009118 <tcp_abandon+0x160>)
 8008fd0:	4852      	ldr	r0, [pc, #328]	; (800911c <tcp_abandon+0x164>)
 8008fd2:	f005 fb15 	bl	800e600 <iprintf>
 8008fd6:	e099      	b.n	800910c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7d1b      	ldrb	r3, [r3, #20]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d106      	bne.n	8008fee <tcp_abandon+0x36>
 8008fe0:	4b4c      	ldr	r3, [pc, #304]	; (8009114 <tcp_abandon+0x15c>)
 8008fe2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008fe6:	494e      	ldr	r1, [pc, #312]	; (8009120 <tcp_abandon+0x168>)
 8008fe8:	484c      	ldr	r0, [pc, #304]	; (800911c <tcp_abandon+0x164>)
 8008fea:	f005 fb09 	bl	800e600 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	7d1b      	ldrb	r3, [r3, #20]
 8008ff2:	2b0a      	cmp	r3, #10
 8008ff4:	d107      	bne.n	8009006 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	484a      	ldr	r0, [pc, #296]	; (8009124 <tcp_abandon+0x16c>)
 8008ffa:	f000 ffc3 	bl	8009f84 <tcp_pcb_remove>
    tcp_free(pcb);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fdb0 	bl	8008b64 <tcp_free>
 8009004:	e082      	b.n	800910c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009012:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009020:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	7d1b      	ldrb	r3, [r3, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d126      	bne.n	800907e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8adb      	ldrh	r3, [r3, #22]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02e      	beq.n	8009096 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009038:	4b3b      	ldr	r3, [pc, #236]	; (8009128 <tcp_abandon+0x170>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	429a      	cmp	r2, r3
 8009040:	d105      	bne.n	800904e <tcp_abandon+0x96>
 8009042:	4b39      	ldr	r3, [pc, #228]	; (8009128 <tcp_abandon+0x170>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	4a37      	ldr	r2, [pc, #220]	; (8009128 <tcp_abandon+0x170>)
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	e013      	b.n	8009076 <tcp_abandon+0xbe>
 800904e:	4b36      	ldr	r3, [pc, #216]	; (8009128 <tcp_abandon+0x170>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e00c      	b.n	8009070 <tcp_abandon+0xb8>
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	429a      	cmp	r2, r3
 800905e:	d104      	bne.n	800906a <tcp_abandon+0xb2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	60da      	str	r2, [r3, #12]
 8009068:	e005      	b.n	8009076 <tcp_abandon+0xbe>
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1ef      	bne.n	8009056 <tcp_abandon+0x9e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	60da      	str	r2, [r3, #12]
 800907c:	e00b      	b.n	8009096 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	8adb      	ldrh	r3, [r3, #22]
 8009086:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	4828      	ldr	r0, [pc, #160]	; (800912c <tcp_abandon+0x174>)
 800908c:	f000 ff7a 	bl	8009f84 <tcp_pcb_remove>
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <tcp_abandon+0x178>)
 8009092:	2201      	movs	r2, #1
 8009094:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800909a:	2b00      	cmp	r3, #0
 800909c:	d004      	beq.n	80090a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fd1c 	bl	8009ae0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 fd13 	bl	8009ae0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fd0a 	bl	8009ae0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00e      	beq.n	80090f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3304      	adds	r3, #4
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	8b12      	ldrh	r2, [r2, #24]
 80090dc:	9202      	str	r2, [sp, #8]
 80090de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80090e0:	9201      	str	r2, [sp, #4]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	460b      	mov	r3, r1
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	69b9      	ldr	r1, [r7, #24]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f004 fcc2 	bl	800da74 <tcp_rst>
    }
    last_state = pcb->state;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7d1b      	ldrb	r3, [r3, #20]
 80090f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fd34 	bl	8008b64 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <tcp_abandon+0x154>
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f06f 010c 	mvn.w	r1, #12
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	4798      	blx	r3
  }
}
 800910c:	3728      	adds	r7, #40	; 0x28
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	08010844 	.word	0x08010844
 8009118:	080109d0 	.word	0x080109d0
 800911c:	080108d0 	.word	0x080108d0
 8009120:	080109ec 	.word	0x080109ec
 8009124:	24007bc4 	.word	0x24007bc4
 8009128:	24007bb8 	.word	0x24007bb8
 800912c:	24007bc0 	.word	0x24007bc0
 8009130:	24007bc8 	.word	0x24007bc8

08009134 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800913c:	2101      	movs	r1, #1
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff ff3a 	bl	8008fb8 <tcp_abandon>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <tcp_update_rcv_ann_wnd+0x1c>
 800915a:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800915c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009160:	4924      	ldr	r1, [pc, #144]	; (80091f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009162:	4825      	ldr	r0, [pc, #148]	; (80091f8 <tcp_update_rcv_ann_wnd+0xac>)
 8009164:	f005 fa4c 	bl	800e600 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009170:	4413      	add	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800917c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009180:	bf28      	it	cs
 8009182:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009186:	b292      	uxth	r2, r2
 8009188:	4413      	add	r3, r2
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	db08      	blt.n	80091a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	e020      	b.n	80091e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dd03      	ble.n	80091ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091b8:	e014      	b.n	80091e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091cc:	d306      	bcc.n	80091dc <tcp_update_rcv_ann_wnd+0x90>
 80091ce:	4b08      	ldr	r3, [pc, #32]	; (80091f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80091d0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80091d4:	4909      	ldr	r1, [pc, #36]	; (80091fc <tcp_update_rcv_ann_wnd+0xb0>)
 80091d6:	4808      	ldr	r0, [pc, #32]	; (80091f8 <tcp_update_rcv_ann_wnd+0xac>)
 80091d8:	f005 fa12 	bl	800e600 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80091e4:	2300      	movs	r3, #0
  }
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	08010844 	.word	0x08010844
 80091f4:	08010ae8 	.word	0x08010ae8
 80091f8:	080108d0 	.word	0x080108d0
 80091fc:	08010b0c 	.word	0x08010b0c

08009200 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d107      	bne.n	8009222 <tcp_recved+0x22>
 8009212:	4b1f      	ldr	r3, [pc, #124]	; (8009290 <tcp_recved+0x90>)
 8009214:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009218:	491e      	ldr	r1, [pc, #120]	; (8009294 <tcp_recved+0x94>)
 800921a:	481f      	ldr	r0, [pc, #124]	; (8009298 <tcp_recved+0x98>)
 800921c:	f005 f9f0 	bl	800e600 <iprintf>
 8009220:	e032      	b.n	8009288 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7d1b      	ldrb	r3, [r3, #20]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d106      	bne.n	8009238 <tcp_recved+0x38>
 800922a:	4b19      	ldr	r3, [pc, #100]	; (8009290 <tcp_recved+0x90>)
 800922c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009230:	491a      	ldr	r1, [pc, #104]	; (800929c <tcp_recved+0x9c>)
 8009232:	4819      	ldr	r0, [pc, #100]	; (8009298 <tcp_recved+0x98>)
 8009234:	f005 f9e4 	bl	800e600 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800923c:	887b      	ldrh	r3, [r7, #2]
 800923e:	4413      	add	r3, r2
 8009240:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009242:	89fb      	ldrh	r3, [r7, #14]
 8009244:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009248:	d804      	bhi.n	8009254 <tcp_recved+0x54>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924e:	89fa      	ldrh	r2, [r7, #14]
 8009250:	429a      	cmp	r2, r3
 8009252:	d204      	bcs.n	800925e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800925a:	851a      	strh	r2, [r3, #40]	; 0x28
 800925c:	e002      	b.n	8009264 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	89fa      	ldrh	r2, [r7, #14]
 8009262:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ff71 	bl	800914c <tcp_update_rcv_ann_wnd>
 800926a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009272:	d309      	bcc.n	8009288 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8b5b      	ldrh	r3, [r3, #26]
 8009278:	f043 0302 	orr.w	r3, r3, #2
 800927c:	b29a      	uxth	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f003 fe42 	bl	800cf0c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	08010844 	.word	0x08010844
 8009294:	08010b28 	.word	0x08010b28
 8009298:	080108d0 	.word	0x080108d0
 800929c:	08010b40 	.word	0x08010b40

080092a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80092a0:	b5b0      	push	{r4, r5, r7, lr}
 80092a2:	b090      	sub	sp, #64	; 0x40
 80092a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80092ac:	4b94      	ldr	r3, [pc, #592]	; (8009500 <tcp_slowtmr+0x260>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a93      	ldr	r2, [pc, #588]	; (8009500 <tcp_slowtmr+0x260>)
 80092b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80092b6:	4b93      	ldr	r3, [pc, #588]	; (8009504 <tcp_slowtmr+0x264>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	3301      	adds	r3, #1
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	4b91      	ldr	r3, [pc, #580]	; (8009504 <tcp_slowtmr+0x264>)
 80092c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80092c6:	4b90      	ldr	r3, [pc, #576]	; (8009508 <tcp_slowtmr+0x268>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80092cc:	e29d      	b.n	800980a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	7d1b      	ldrb	r3, [r3, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <tcp_slowtmr+0x44>
 80092d6:	4b8d      	ldr	r3, [pc, #564]	; (800950c <tcp_slowtmr+0x26c>)
 80092d8:	f240 42be 	movw	r2, #1214	; 0x4be
 80092dc:	498c      	ldr	r1, [pc, #560]	; (8009510 <tcp_slowtmr+0x270>)
 80092de:	488d      	ldr	r0, [pc, #564]	; (8009514 <tcp_slowtmr+0x274>)
 80092e0:	f005 f98e 	bl	800e600 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	7d1b      	ldrb	r3, [r3, #20]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d106      	bne.n	80092fa <tcp_slowtmr+0x5a>
 80092ec:	4b87      	ldr	r3, [pc, #540]	; (800950c <tcp_slowtmr+0x26c>)
 80092ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80092f2:	4989      	ldr	r1, [pc, #548]	; (8009518 <tcp_slowtmr+0x278>)
 80092f4:	4887      	ldr	r0, [pc, #540]	; (8009514 <tcp_slowtmr+0x274>)
 80092f6:	f005 f983 	bl	800e600 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	7d1b      	ldrb	r3, [r3, #20]
 80092fe:	2b0a      	cmp	r3, #10
 8009300:	d106      	bne.n	8009310 <tcp_slowtmr+0x70>
 8009302:	4b82      	ldr	r3, [pc, #520]	; (800950c <tcp_slowtmr+0x26c>)
 8009304:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009308:	4984      	ldr	r1, [pc, #528]	; (800951c <tcp_slowtmr+0x27c>)
 800930a:	4882      	ldr	r0, [pc, #520]	; (8009514 <tcp_slowtmr+0x274>)
 800930c:	f005 f978 	bl	800e600 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	7f9a      	ldrb	r2, [r3, #30]
 8009314:	4b7b      	ldr	r3, [pc, #492]	; (8009504 <tcp_slowtmr+0x264>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d105      	bne.n	8009328 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009326:	e270      	b.n	800980a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009328:	4b76      	ldr	r3, [pc, #472]	; (8009504 <tcp_slowtmr+0x264>)
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009330:	2300      	movs	r3, #0
 8009332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800933c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933e:	7d1b      	ldrb	r3, [r3, #20]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d10a      	bne.n	800935a <tcp_slowtmr+0xba>
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800934a:	2b05      	cmp	r3, #5
 800934c:	d905      	bls.n	800935a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800934e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009352:	3301      	adds	r3, #1
 8009354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009358:	e11e      	b.n	8009598 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009360:	2b0b      	cmp	r3, #11
 8009362:	d905      	bls.n	8009370 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009368:	3301      	adds	r3, #1
 800936a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800936e:	e113      	b.n	8009598 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009376:	2b00      	cmp	r3, #0
 8009378:	d075      	beq.n	8009466 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937e:	2b00      	cmp	r3, #0
 8009380:	d006      	beq.n	8009390 <tcp_slowtmr+0xf0>
 8009382:	4b62      	ldr	r3, [pc, #392]	; (800950c <tcp_slowtmr+0x26c>)
 8009384:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009388:	4965      	ldr	r1, [pc, #404]	; (8009520 <tcp_slowtmr+0x280>)
 800938a:	4862      	ldr	r0, [pc, #392]	; (8009514 <tcp_slowtmr+0x274>)
 800938c:	f005 f938 	bl	800e600 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <tcp_slowtmr+0x106>
 8009398:	4b5c      	ldr	r3, [pc, #368]	; (800950c <tcp_slowtmr+0x26c>)
 800939a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800939e:	4961      	ldr	r1, [pc, #388]	; (8009524 <tcp_slowtmr+0x284>)
 80093a0:	485c      	ldr	r0, [pc, #368]	; (8009514 <tcp_slowtmr+0x274>)
 80093a2:	f005 f92d 	bl	800e600 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80093ac:	2b0b      	cmp	r3, #11
 80093ae:	d905      	bls.n	80093bc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80093b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093b4:	3301      	adds	r3, #1
 80093b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093ba:	e0ed      	b.n	8009598 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80093c2:	3b01      	subs	r3, #1
 80093c4:	4a58      	ldr	r2, [pc, #352]	; (8009528 <tcp_slowtmr+0x288>)
 80093c6:	5cd3      	ldrb	r3, [r2, r3]
 80093c8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093d0:	7c7a      	ldrb	r2, [r7, #17]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d907      	bls.n	80093e6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093dc:	3301      	adds	r3, #1
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80093ec:	7c7a      	ldrb	r2, [r7, #17]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	f200 80d2 	bhi.w	8009598 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80093f4:	2301      	movs	r3, #1
 80093f6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d108      	bne.n	8009414 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009404:	f004 fc2a 	bl	800dc5c <tcp_zero_window_probe>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d014      	beq.n	8009438 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800940e:	2300      	movs	r3, #0
 8009410:	623b      	str	r3, [r7, #32]
 8009412:	e011      	b.n	8009438 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800941a:	4619      	mov	r1, r3
 800941c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800941e:	f003 faef 	bl	800ca00 <tcp_split_unsent_seg>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d107      	bne.n	8009438 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800942a:	f003 fd6f 	bl	800cf0c <tcp_output>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80ac 	beq.w	8009598 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800944e:	2b06      	cmp	r3, #6
 8009450:	f200 80a2 	bhi.w	8009598 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800945a:	3301      	adds	r3, #1
 800945c:	b2da      	uxtb	r2, r3
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009464:	e098      	b.n	8009598 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800946c:	2b00      	cmp	r3, #0
 800946e:	db0f      	blt.n	8009490 <tcp_slowtmr+0x1f0>
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009476:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800947a:	4293      	cmp	r3, r2
 800947c:	d008      	beq.n	8009490 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009484:	b29b      	uxth	r3, r3
 8009486:	3301      	adds	r3, #1
 8009488:	b29b      	uxth	r3, r3
 800948a:	b21a      	sxth	r2, r3
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800949c:	429a      	cmp	r2, r3
 800949e:	db7b      	blt.n	8009598 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80094a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094a2:	f004 f827 	bl	800d4f4 <tcp_rexmit_rto_prepare>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <tcp_slowtmr+0x21c>
 80094ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d171      	bne.n	8009598 <tcp_slowtmr+0x2f8>
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d06d      	beq.n	8009598 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	7d1b      	ldrb	r3, [r3, #20]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d03a      	beq.n	800953a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094ca:	2b0c      	cmp	r3, #12
 80094cc:	bf28      	it	cs
 80094ce:	230c      	movcs	r3, #12
 80094d0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80094d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80094d8:	10db      	asrs	r3, r3, #3
 80094da:	b21b      	sxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80094e4:	4413      	add	r3, r2
 80094e6:	7efa      	ldrb	r2, [r7, #27]
 80094e8:	4910      	ldr	r1, [pc, #64]	; (800952c <tcp_slowtmr+0x28c>)
 80094ea:	5c8a      	ldrb	r2, [r1, r2]
 80094ec:	4093      	lsls	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80094f6:	4293      	cmp	r3, r2
 80094f8:	dc1a      	bgt.n	8009530 <tcp_slowtmr+0x290>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	b21a      	sxth	r2, r3
 80094fe:	e019      	b.n	8009534 <tcp_slowtmr+0x294>
 8009500:	24007bb4 	.word	0x24007bb4
 8009504:	24007bca 	.word	0x24007bca
 8009508:	24007bc0 	.word	0x24007bc0
 800950c:	08010844 	.word	0x08010844
 8009510:	08010bd0 	.word	0x08010bd0
 8009514:	080108d0 	.word	0x080108d0
 8009518:	08010bfc 	.word	0x08010bfc
 800951c:	08010c28 	.word	0x08010c28
 8009520:	08010c58 	.word	0x08010c58
 8009524:	08010c8c 	.word	0x08010c8c
 8009528:	080122cc 	.word	0x080122cc
 800952c:	080122bc 	.word	0x080122bc
 8009530:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	2200      	movs	r2, #0
 800953e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800954c:	4293      	cmp	r3, r2
 800954e:	bf28      	it	cs
 8009550:	4613      	movcs	r3, r2
 8009552:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009554:	8a7b      	ldrh	r3, [r7, #18]
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	b29b      	uxth	r3, r3
 800956e:	429a      	cmp	r2, r3
 8009570:	d206      	bcs.n	8009580 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	2200      	movs	r2, #0
 800958e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009594:	f004 f81e 	bl	800d5d4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	7d1b      	ldrb	r3, [r3, #20]
 800959c:	2b06      	cmp	r3, #6
 800959e:	d111      	bne.n	80095c4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	8b5b      	ldrh	r3, [r3, #26]
 80095a4:	f003 0310 	and.w	r3, r3, #16
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095ac:	4b9c      	ldr	r3, [pc, #624]	; (8009820 <tcp_slowtmr+0x580>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	2b28      	cmp	r3, #40	; 0x28
 80095b8:	d904      	bls.n	80095c4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80095ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095be:	3301      	adds	r3, #1
 80095c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	7a5b      	ldrb	r3, [r3, #9]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d04a      	beq.n	8009666 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d003      	beq.n	80095e0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80095dc:	2b07      	cmp	r3, #7
 80095de:	d142      	bne.n	8009666 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095e0:	4b8f      	ldr	r3, [pc, #572]	; (8009820 <tcp_slowtmr+0x580>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80095f0:	4b8c      	ldr	r3, [pc, #560]	; (8009824 <tcp_slowtmr+0x584>)
 80095f2:	440b      	add	r3, r1
 80095f4:	498c      	ldr	r1, [pc, #560]	; (8009828 <tcp_slowtmr+0x588>)
 80095f6:	fba1 1303 	umull	r1, r3, r1, r3
 80095fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d90a      	bls.n	8009616 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009604:	3301      	adds	r3, #1
 8009606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800960a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800960e:	3301      	adds	r3, #1
 8009610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009614:	e027      	b.n	8009666 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009616:	4b82      	ldr	r3, [pc, #520]	; (8009820 <tcp_slowtmr+0x580>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800962c:	4618      	mov	r0, r3
 800962e:	4b7f      	ldr	r3, [pc, #508]	; (800982c <tcp_slowtmr+0x58c>)
 8009630:	fb00 f303 	mul.w	r3, r0, r3
 8009634:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009636:	497c      	ldr	r1, [pc, #496]	; (8009828 <tcp_slowtmr+0x588>)
 8009638:	fba1 1303 	umull	r1, r3, r1, r3
 800963c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800963e:	429a      	cmp	r2, r3
 8009640:	d911      	bls.n	8009666 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009644:	f004 faca 	bl	800dbdc <tcp_keepalive>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800964e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009652:	2b00      	cmp	r3, #0
 8009654:	d107      	bne.n	8009666 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009658:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800965c:	3301      	adds	r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966a:	2b00      	cmp	r3, #0
 800966c:	d011      	beq.n	8009692 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800966e:	4b6c      	ldr	r3, [pc, #432]	; (8009820 <tcp_slowtmr+0x580>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	1ad2      	subs	r2, r2, r3
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800967e:	4619      	mov	r1, r3
 8009680:	460b      	mov	r3, r1
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	440b      	add	r3, r1
 8009686:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009688:	429a      	cmp	r2, r3
 800968a:	d302      	bcc.n	8009692 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800968c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800968e:	f000 fddd 	bl	800a24c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	7d1b      	ldrb	r3, [r3, #20]
 8009696:	2b03      	cmp	r3, #3
 8009698:	d10b      	bne.n	80096b2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800969a:	4b61      	ldr	r3, [pc, #388]	; (8009820 <tcp_slowtmr+0x580>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b28      	cmp	r3, #40	; 0x28
 80096a6:	d904      	bls.n	80096b2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ac:	3301      	adds	r3, #1
 80096ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	7d1b      	ldrb	r3, [r3, #20]
 80096b6:	2b09      	cmp	r3, #9
 80096b8:	d10b      	bne.n	80096d2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80096ba:	4b59      	ldr	r3, [pc, #356]	; (8009820 <tcp_slowtmr+0x580>)
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2bf0      	cmp	r3, #240	; 0xf0
 80096c6:	d904      	bls.n	80096d2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80096c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096cc:	3301      	adds	r3, #1
 80096ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80096d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d060      	beq.n	800979c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80096e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e4:	f000 fbfe 	bl	8009ee4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80096ee:	4b50      	ldr	r3, [pc, #320]	; (8009830 <tcp_slowtmr+0x590>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d106      	bne.n	8009706 <tcp_slowtmr+0x466>
 80096f8:	4b4e      	ldr	r3, [pc, #312]	; (8009834 <tcp_slowtmr+0x594>)
 80096fa:	f240 526d 	movw	r2, #1389	; 0x56d
 80096fe:	494e      	ldr	r1, [pc, #312]	; (8009838 <tcp_slowtmr+0x598>)
 8009700:	484e      	ldr	r0, [pc, #312]	; (800983c <tcp_slowtmr+0x59c>)
 8009702:	f004 ff7d 	bl	800e600 <iprintf>
        prev->next = pcb->next;
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	60da      	str	r2, [r3, #12]
 800970e:	e00f      	b.n	8009730 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009710:	4b47      	ldr	r3, [pc, #284]	; (8009830 <tcp_slowtmr+0x590>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009716:	429a      	cmp	r2, r3
 8009718:	d006      	beq.n	8009728 <tcp_slowtmr+0x488>
 800971a:	4b46      	ldr	r3, [pc, #280]	; (8009834 <tcp_slowtmr+0x594>)
 800971c:	f240 5271 	movw	r2, #1393	; 0x571
 8009720:	4947      	ldr	r1, [pc, #284]	; (8009840 <tcp_slowtmr+0x5a0>)
 8009722:	4846      	ldr	r0, [pc, #280]	; (800983c <tcp_slowtmr+0x59c>)
 8009724:	f004 ff6c 	bl	800e600 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4a40      	ldr	r2, [pc, #256]	; (8009830 <tcp_slowtmr+0x590>)
 800972e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009734:	2b00      	cmp	r3, #0
 8009736:	d013      	beq.n	8009760 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009740:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009744:	3304      	adds	r3, #4
 8009746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009748:	8ad2      	ldrh	r2, [r2, #22]
 800974a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800974c:	8b09      	ldrh	r1, [r1, #24]
 800974e:	9102      	str	r1, [sp, #8]
 8009750:	9201      	str	r2, [sp, #4]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	462b      	mov	r3, r5
 8009756:	4622      	mov	r2, r4
 8009758:	4601      	mov	r1, r0
 800975a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800975c:	f004 f98a 	bl	800da74 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009768:	7d1b      	ldrb	r3, [r3, #20]
 800976a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800976c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f7ff f9f4 	bl	8008b64 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800977c:	4b31      	ldr	r3, [pc, #196]	; (8009844 <tcp_slowtmr+0x5a4>)
 800977e:	2200      	movs	r2, #0
 8009780:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <tcp_slowtmr+0x4f2>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f06f 010c 	mvn.w	r1, #12
 800978e:	68b8      	ldr	r0, [r7, #8]
 8009790:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009792:	4b2c      	ldr	r3, [pc, #176]	; (8009844 <tcp_slowtmr+0x5a4>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d037      	beq.n	800980a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800979a:	e592      	b.n	80092c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	7f1b      	ldrb	r3, [r3, #28]
 80097aa:	3301      	adds	r3, #1
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	7f1a      	ldrb	r2, [r3, #28]
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	7f5b      	ldrb	r3, [r3, #29]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d325      	bcc.n	800980a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	2200      	movs	r2, #0
 80097c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80097c4:	4b1f      	ldr	r3, [pc, #124]	; (8009844 <tcp_slowtmr+0x5a4>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <tcp_slowtmr+0x54c>
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097dc:	6912      	ldr	r2, [r2, #16]
 80097de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e0:	4610      	mov	r0, r2
 80097e2:	4798      	blx	r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80097ea:	e002      	b.n	80097f2 <tcp_slowtmr+0x552>
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80097f2:	4b14      	ldr	r3, [pc, #80]	; (8009844 <tcp_slowtmr+0x5a4>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d000      	beq.n	80097fc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80097fa:	e562      	b.n	80092c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80097fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009806:	f003 fb81 	bl	800cf0c <tcp_output>
  while (pcb != NULL) {
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	f47f ad5e 	bne.w	80092ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009812:	2300      	movs	r3, #0
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <tcp_slowtmr+0x5a8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800981c:	e069      	b.n	80098f2 <tcp_slowtmr+0x652>
 800981e:	bf00      	nop
 8009820:	24007bb4 	.word	0x24007bb4
 8009824:	000a4cb8 	.word	0x000a4cb8
 8009828:	10624dd3 	.word	0x10624dd3
 800982c:	000124f8 	.word	0x000124f8
 8009830:	24007bc0 	.word	0x24007bc0
 8009834:	08010844 	.word	0x08010844
 8009838:	08010cc4 	.word	0x08010cc4
 800983c:	080108d0 	.word	0x080108d0
 8009840:	08010cf0 	.word	0x08010cf0
 8009844:	24007bc8 	.word	0x24007bc8
 8009848:	24007bc4 	.word	0x24007bc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	7d1b      	ldrb	r3, [r3, #20]
 8009850:	2b0a      	cmp	r3, #10
 8009852:	d006      	beq.n	8009862 <tcp_slowtmr+0x5c2>
 8009854:	4b2b      	ldr	r3, [pc, #172]	; (8009904 <tcp_slowtmr+0x664>)
 8009856:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800985a:	492b      	ldr	r1, [pc, #172]	; (8009908 <tcp_slowtmr+0x668>)
 800985c:	482b      	ldr	r0, [pc, #172]	; (800990c <tcp_slowtmr+0x66c>)
 800985e:	f004 fecf 	bl	800e600 <iprintf>
    pcb_remove = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009868:	4b29      	ldr	r3, [pc, #164]	; (8009910 <tcp_slowtmr+0x670>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	2bf0      	cmp	r3, #240	; 0xf0
 8009874:	d904      	bls.n	8009880 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800987a:	3301      	adds	r3, #1
 800987c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02f      	beq.n	80098e8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800988a:	f000 fb2b 	bl	8009ee4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d010      	beq.n	80098b6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009894:	4b1f      	ldr	r3, [pc, #124]	; (8009914 <tcp_slowtmr+0x674>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800989a:	429a      	cmp	r2, r3
 800989c:	d106      	bne.n	80098ac <tcp_slowtmr+0x60c>
 800989e:	4b19      	ldr	r3, [pc, #100]	; (8009904 <tcp_slowtmr+0x664>)
 80098a0:	f240 52af 	movw	r2, #1455	; 0x5af
 80098a4:	491c      	ldr	r1, [pc, #112]	; (8009918 <tcp_slowtmr+0x678>)
 80098a6:	4819      	ldr	r0, [pc, #100]	; (800990c <tcp_slowtmr+0x66c>)
 80098a8:	f004 feaa 	bl	800e600 <iprintf>
        prev->next = pcb->next;
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	60da      	str	r2, [r3, #12]
 80098b4:	e00f      	b.n	80098d6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80098b6:	4b17      	ldr	r3, [pc, #92]	; (8009914 <tcp_slowtmr+0x674>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098bc:	429a      	cmp	r2, r3
 80098be:	d006      	beq.n	80098ce <tcp_slowtmr+0x62e>
 80098c0:	4b10      	ldr	r3, [pc, #64]	; (8009904 <tcp_slowtmr+0x664>)
 80098c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80098c6:	4915      	ldr	r1, [pc, #84]	; (800991c <tcp_slowtmr+0x67c>)
 80098c8:	4810      	ldr	r0, [pc, #64]	; (800990c <tcp_slowtmr+0x66c>)
 80098ca:	f004 fe99 	bl	800e600 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	4a10      	ldr	r2, [pc, #64]	; (8009914 <tcp_slowtmr+0x674>)
 80098d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80098d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80098e0:	69f8      	ldr	r0, [r7, #28]
 80098e2:	f7ff f93f 	bl	8008b64 <tcp_free>
 80098e6:	e004      	b.n	80098f2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1a9      	bne.n	800984c <tcp_slowtmr+0x5ac>
    }
  }
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	3730      	adds	r7, #48	; 0x30
 80098fe:	46bd      	mov	sp, r7
 8009900:	bdb0      	pop	{r4, r5, r7, pc}
 8009902:	bf00      	nop
 8009904:	08010844 	.word	0x08010844
 8009908:	08010d1c 	.word	0x08010d1c
 800990c:	080108d0 	.word	0x080108d0
 8009910:	24007bb4 	.word	0x24007bb4
 8009914:	24007bc4 	.word	0x24007bc4
 8009918:	08010d4c 	.word	0x08010d4c
 800991c:	08010d74 	.word	0x08010d74

08009920 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009926:	4b2d      	ldr	r3, [pc, #180]	; (80099dc <tcp_fasttmr+0xbc>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	4b2b      	ldr	r3, [pc, #172]	; (80099dc <tcp_fasttmr+0xbc>)
 8009930:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009932:	4b2b      	ldr	r3, [pc, #172]	; (80099e0 <tcp_fasttmr+0xc0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009938:	e048      	b.n	80099cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7f9a      	ldrb	r2, [r3, #30]
 800993e:	4b27      	ldr	r3, [pc, #156]	; (80099dc <tcp_fasttmr+0xbc>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d03f      	beq.n	80099c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009946:	4b25      	ldr	r3, [pc, #148]	; (80099dc <tcp_fasttmr+0xbc>)
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	8b5b      	ldrh	r3, [r3, #26]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d010      	beq.n	800997c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	8b5b      	ldrh	r3, [r3, #26]
 800995e:	f043 0302 	orr.w	r3, r3, #2
 8009962:	b29a      	uxth	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f003 facf 	bl	800cf0c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	8b5b      	ldrh	r3, [r3, #26]
 8009972:	f023 0303 	bic.w	r3, r3, #3
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	8b5b      	ldrh	r3, [r3, #26]
 8009980:	f003 0308 	and.w	r3, r3, #8
 8009984:	2b00      	cmp	r3, #0
 8009986:	d009      	beq.n	800999c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	8b5b      	ldrh	r3, [r3, #26]
 800998c:	f023 0308 	bic.w	r3, r3, #8
 8009990:	b29a      	uxth	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fa78 	bl	8008e8c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80099aa:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <tcp_fasttmr+0xc4>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f819 	bl	80099e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <tcp_fasttmr+0xc4>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d000      	beq.n	80099c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80099be:	e7b8      	b.n	8009932 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	e002      	b.n	80099cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1b3      	bne.n	800993a <tcp_fasttmr+0x1a>
    }
  }
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	24007bca 	.word	0x24007bca
 80099e0:	24007bc0 	.word	0x24007bc0
 80099e4:	24007bc8 	.word	0x24007bc8

080099e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <tcp_process_refused_data+0x22>
 80099f6:	4b37      	ldr	r3, [pc, #220]	; (8009ad4 <tcp_process_refused_data+0xec>)
 80099f8:	f240 6209 	movw	r2, #1545	; 0x609
 80099fc:	4936      	ldr	r1, [pc, #216]	; (8009ad8 <tcp_process_refused_data+0xf0>)
 80099fe:	4837      	ldr	r0, [pc, #220]	; (8009adc <tcp_process_refused_data+0xf4>)
 8009a00:	f004 fdfe 	bl	800e600 <iprintf>
 8009a04:	f06f 030f 	mvn.w	r3, #15
 8009a08:	e060      	b.n	8009acc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a0e:	7b5b      	ldrb	r3, [r3, #13]
 8009a10:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a16:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <tcp_process_refused_data+0x58>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6918      	ldr	r0, [r3, #16]
 8009a32:	2300      	movs	r3, #0
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	47a0      	blx	r4
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
 8009a3e:	e007      	b.n	8009a50 <tcp_process_refused_data+0x68>
 8009a40:	2300      	movs	r3, #0
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	2000      	movs	r0, #0
 8009a48:	f000 f8a4 	bl	8009b94 <tcp_recv_null>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d12a      	bne.n	8009aae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d033      	beq.n	8009aca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a6a:	d005      	beq.n	8009a78 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a70:	3301      	adds	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <tcp_process_refused_data+0xb2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6918      	ldr	r0, [r3, #16]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	2200      	movs	r2, #0
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	47a0      	blx	r4
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]
 8009a98:	e001      	b.n	8009a9e <tcp_process_refused_data+0xb6>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa2:	f113 0f0d 	cmn.w	r3, #13
 8009aa6:	d110      	bne.n	8009aca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009aa8:	f06f 030c 	mvn.w	r3, #12
 8009aac:	e00e      	b.n	8009acc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ab2:	f113 0f0d 	cmn.w	r3, #13
 8009ab6:	d102      	bne.n	8009abe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009ab8:	f06f 030c 	mvn.w	r3, #12
 8009abc:	e006      	b.n	8009acc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009ac4:	f06f 0304 	mvn.w	r3, #4
 8009ac8:	e000      	b.n	8009acc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd90      	pop	{r4, r7, pc}
 8009ad4:	08010844 	.word	0x08010844
 8009ad8:	08010d9c 	.word	0x08010d9c
 8009adc:	080108d0 	.word	0x080108d0

08009ae0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009ae8:	e007      	b.n	8009afa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f80a 	bl	8009b0a <tcp_seg_free>
    seg = next;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f4      	bne.n	8009aea <tcp_segs_free+0xa>
  }
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00c      	beq.n	8009b32 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d004      	beq.n	8009b2a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fd7d 	bl	8008624 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	2003      	movs	r0, #3
 8009b2e:	f7fd ff03 	bl	8007938 <memp_free>
  }
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <tcp_seg_copy+0x1c>
 8009b4a:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <tcp_seg_copy+0x4c>)
 8009b4c:	f240 6282 	movw	r2, #1666	; 0x682
 8009b50:	490e      	ldr	r1, [pc, #56]	; (8009b8c <tcp_seg_copy+0x50>)
 8009b52:	480f      	ldr	r0, [pc, #60]	; (8009b90 <tcp_seg_copy+0x54>)
 8009b54:	f004 fd54 	bl	800e600 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009b58:	2003      	movs	r0, #3
 8009b5a:	f7fd fe7d 	bl	8007858 <memp_malloc>
 8009b5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <tcp_seg_copy+0x2e>
    return NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e00a      	b.n	8009b80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f004 fe21 	bl	800e7b6 <memcpy>
  pbuf_ref(cseg->p);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fdf3 	bl	8008764 <pbuf_ref>
  return cseg;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	08010844 	.word	0x08010844
 8009b8c:	08010de0 	.word	0x08010de0
 8009b90:	080108d0 	.word	0x080108d0

08009b94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d109      	bne.n	8009bbc <tcp_recv_null+0x28>
 8009ba8:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <tcp_recv_null+0x60>)
 8009baa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009bae:	4912      	ldr	r1, [pc, #72]	; (8009bf8 <tcp_recv_null+0x64>)
 8009bb0:	4812      	ldr	r0, [pc, #72]	; (8009bfc <tcp_recv_null+0x68>)
 8009bb2:	f004 fd25 	bl	800e600 <iprintf>
 8009bb6:	f06f 030f 	mvn.w	r3, #15
 8009bba:	e016      	b.n	8009bea <tcp_recv_null+0x56>

  if (p != NULL) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d009      	beq.n	8009bd6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	891b      	ldrh	r3, [r3, #8]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	68b8      	ldr	r0, [r7, #8]
 8009bca:	f7ff fb19 	bl	8009200 <tcp_recved>
    pbuf_free(p);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7fe fd28 	bl	8008624 <pbuf_free>
 8009bd4:	e008      	b.n	8009be8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d104      	bne.n	8009be8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009bde:	68b8      	ldr	r0, [r7, #8]
 8009be0:	f7ff f9be 	bl	8008f60 <tcp_close>
 8009be4:	4603      	mov	r3, r0
 8009be6:	e000      	b.n	8009bea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	08010844 	.word	0x08010844
 8009bf8:	08010dfc 	.word	0x08010dfc
 8009bfc:	080108d0 	.word	0x080108d0

08009c00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	db01      	blt.n	8009c16 <tcp_kill_prio+0x16>
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	e000      	b.n	8009c18 <tcp_kill_prio+0x18>
 8009c16:	237f      	movs	r3, #127	; 0x7f
 8009c18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009c1a:	7afb      	ldrb	r3, [r7, #11]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d034      	beq.n	8009c8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009c20:	7afb      	ldrb	r3, [r7, #11]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c2e:	4b19      	ldr	r3, [pc, #100]	; (8009c94 <tcp_kill_prio+0x94>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e01f      	b.n	8009c76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	7d5b      	ldrb	r3, [r3, #21]
 8009c3a:	7afa      	ldrb	r2, [r7, #11]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d80c      	bhi.n	8009c5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009c44:	7afa      	ldrb	r2, [r7, #11]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d112      	bne.n	8009c70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009c4a:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <tcp_kill_prio+0x98>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d80a      	bhi.n	8009c70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <tcp_kill_prio+0x98>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	7d5b      	ldrb	r3, [r3, #21]
 8009c6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	617b      	str	r3, [r7, #20]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1dc      	bne.n	8009c36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009c82:	6938      	ldr	r0, [r7, #16]
 8009c84:	f7ff fa56 	bl	8009134 <tcp_abort>
 8009c88:	e000      	b.n	8009c8c <tcp_kill_prio+0x8c>
    return;
 8009c8a:	bf00      	nop
  }
}
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	24007bc0 	.word	0x24007bc0
 8009c98:	24007bb4 	.word	0x24007bb4

08009c9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d009      	beq.n	8009cc0 <tcp_kill_state+0x24>
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	2b09      	cmp	r3, #9
 8009cb0:	d006      	beq.n	8009cc0 <tcp_kill_state+0x24>
 8009cb2:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <tcp_kill_state+0x80>)
 8009cb4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009cb8:	4919      	ldr	r1, [pc, #100]	; (8009d20 <tcp_kill_state+0x84>)
 8009cba:	481a      	ldr	r0, [pc, #104]	; (8009d24 <tcp_kill_state+0x88>)
 8009cbc:	f004 fca0 	bl	800e600 <iprintf>

  inactivity = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cc8:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <tcp_kill_state+0x8c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	e017      	b.n	8009d00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	7d1b      	ldrb	r3, [r3, #20]
 8009cd4:	79fa      	ldrb	r2, [r7, #7]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d10f      	bne.n	8009cfa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009cda:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <tcp_kill_state+0x90>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d807      	bhi.n	8009cfa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009cea:	4b10      	ldr	r3, [pc, #64]	; (8009d2c <tcp_kill_state+0x90>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e4      	bne.n	8009cd0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6938      	ldr	r0, [r7, #16]
 8009d10:	f7ff f952 	bl	8008fb8 <tcp_abandon>
  }
}
 8009d14:	bf00      	nop
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	08010844 	.word	0x08010844
 8009d20:	08010e18 	.word	0x08010e18
 8009d24:	080108d0 	.word	0x080108d0
 8009d28:	24007bc0 	.word	0x24007bc0
 8009d2c:	24007bb4 	.word	0x24007bb4

08009d30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d3e:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <tcp_kill_timewait+0x58>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	e012      	b.n	8009d6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d46:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <tcp_kill_timewait+0x5c>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d807      	bhi.n	8009d66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009d56:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <tcp_kill_timewait+0x5c>)
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e9      	bne.n	8009d46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d78:	68b8      	ldr	r0, [r7, #8]
 8009d7a:	f7ff f9db 	bl	8009134 <tcp_abort>
  }
}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	24007bc4 	.word	0x24007bc4
 8009d8c:	24007bb4 	.word	0x24007bb4

08009d90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009d96:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <tcp_handle_closepend+0x48>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d9c:	e014      	b.n	8009dc8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	8b5b      	ldrh	r3, [r3, #26]
 8009da8:	f003 0308 	and.w	r3, r3, #8
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	8b5b      	ldrh	r3, [r3, #26]
 8009db4:	f023 0308 	bic.w	r3, r3, #8
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff f864 	bl	8008e8c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e7      	bne.n	8009d9e <tcp_handle_closepend+0xe>
  }
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	24007bc0 	.word	0x24007bc0

08009ddc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009de6:	2001      	movs	r0, #1
 8009de8:	f7fd fd36 	bl	8007858 <memp_malloc>
 8009dec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d126      	bne.n	8009e42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009df4:	f7ff ffcc 	bl	8009d90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009df8:	f7ff ff9a 	bl	8009d30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	f7fd fd2b 	bl	8007858 <memp_malloc>
 8009e02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d11b      	bne.n	8009e42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009e0a:	2009      	movs	r0, #9
 8009e0c:	f7ff ff46 	bl	8009c9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e10:	2001      	movs	r0, #1
 8009e12:	f7fd fd21 	bl	8007858 <memp_malloc>
 8009e16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d111      	bne.n	8009e42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009e1e:	2008      	movs	r0, #8
 8009e20:	f7ff ff3c 	bl	8009c9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7fd fd17 	bl	8007858 <memp_malloc>
 8009e2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d107      	bne.n	8009e42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff fee3 	bl	8009c00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f7fd fd0c 	bl	8007858 <memp_malloc>
 8009e40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d03f      	beq.n	8009ec8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009e48:	229c      	movs	r2, #156	; 0x9c
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f004 fc3c 	bl	800e6ca <memset>
    pcb->prio = prio;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	79fa      	ldrb	r2, [r7, #7]
 8009e56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009e5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009e68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	22ff      	movs	r2, #255	; 0xff
 8009e76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009e7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2206      	movs	r2, #6
 8009e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2206      	movs	r2, #6
 8009e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <tcp_alloc+0xf8>)
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009ea6:	4b0c      	ldr	r3, [pc, #48]	; (8009ed8 <tcp_alloc+0xfc>)
 8009ea8:	781a      	ldrb	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009eb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4a08      	ldr	r2, [pc, #32]	; (8009edc <tcp_alloc+0x100>)
 8009ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a07      	ldr	r2, [pc, #28]	; (8009ee0 <tcp_alloc+0x104>)
 8009ec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	24007bb4 	.word	0x24007bb4
 8009ed8:	24007bca 	.word	0x24007bca
 8009edc:	08009b95 	.word	0x08009b95
 8009ee0:	006ddd00 	.word	0x006ddd00

08009ee4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d107      	bne.n	8009f02 <tcp_pcb_purge+0x1e>
 8009ef2:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <tcp_pcb_purge+0x94>)
 8009ef4:	f640 0251 	movw	r2, #2129	; 0x851
 8009ef8:	4920      	ldr	r1, [pc, #128]	; (8009f7c <tcp_pcb_purge+0x98>)
 8009efa:	4821      	ldr	r0, [pc, #132]	; (8009f80 <tcp_pcb_purge+0x9c>)
 8009efc:	f004 fb80 	bl	800e600 <iprintf>
 8009f00:	e037      	b.n	8009f72 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7d1b      	ldrb	r3, [r3, #20]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d033      	beq.n	8009f72 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009f0e:	2b0a      	cmp	r3, #10
 8009f10:	d02f      	beq.n	8009f72 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d02b      	beq.n	8009f72 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fb7c 	bl	8008624 <pbuf_free>
      pcb->refused_data = NULL;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f986 	bl	800a24c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f46:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff fdc7 	bl	8009ae0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff fdc2 	bl	8009ae0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	08010844 	.word	0x08010844
 8009f7c:	08010ed8 	.word	0x08010ed8
 8009f80:	080108d0 	.word	0x080108d0

08009f84 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <tcp_pcb_remove+0x1e>
 8009f94:	4b3e      	ldr	r3, [pc, #248]	; (800a090 <tcp_pcb_remove+0x10c>)
 8009f96:	f640 0283 	movw	r2, #2179	; 0x883
 8009f9a:	493e      	ldr	r1, [pc, #248]	; (800a094 <tcp_pcb_remove+0x110>)
 8009f9c:	483e      	ldr	r0, [pc, #248]	; (800a098 <tcp_pcb_remove+0x114>)
 8009f9e:	f004 fb2f 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <tcp_pcb_remove+0x32>
 8009fa8:	4b39      	ldr	r3, [pc, #228]	; (800a090 <tcp_pcb_remove+0x10c>)
 8009faa:	f640 0284 	movw	r2, #2180	; 0x884
 8009fae:	493b      	ldr	r1, [pc, #236]	; (800a09c <tcp_pcb_remove+0x118>)
 8009fb0:	4839      	ldr	r0, [pc, #228]	; (800a098 <tcp_pcb_remove+0x114>)
 8009fb2:	f004 fb25 	bl	800e600 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d105      	bne.n	8009fcc <tcp_pcb_remove+0x48>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	e013      	b.n	8009ff4 <tcp_pcb_remove+0x70>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e00c      	b.n	8009fee <tcp_pcb_remove+0x6a>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d104      	bne.n	8009fe8 <tcp_pcb_remove+0x64>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	60da      	str	r2, [r3, #12]
 8009fe6:	e005      	b.n	8009ff4 <tcp_pcb_remove+0x70>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1ef      	bne.n	8009fd4 <tcp_pcb_remove+0x50>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009ffa:	6838      	ldr	r0, [r7, #0]
 8009ffc:	f7ff ff72 	bl	8009ee4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	7d1b      	ldrb	r3, [r3, #20]
 800a004:	2b0a      	cmp	r3, #10
 800a006:	d013      	beq.n	800a030 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d00f      	beq.n	800a030 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	8b5b      	ldrh	r3, [r3, #26]
 800a014:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	8b5b      	ldrh	r3, [r3, #26]
 800a020:	f043 0302 	orr.w	r3, r3, #2
 800a024:	b29a      	uxth	r2, r3
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a02a:	6838      	ldr	r0, [r7, #0]
 800a02c:	f002 ff6e 	bl	800cf0c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	7d1b      	ldrb	r3, [r3, #20]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d020      	beq.n	800a07a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d006      	beq.n	800a04e <tcp_pcb_remove+0xca>
 800a040:	4b13      	ldr	r3, [pc, #76]	; (800a090 <tcp_pcb_remove+0x10c>)
 800a042:	f640 0293 	movw	r2, #2195	; 0x893
 800a046:	4916      	ldr	r1, [pc, #88]	; (800a0a0 <tcp_pcb_remove+0x11c>)
 800a048:	4813      	ldr	r0, [pc, #76]	; (800a098 <tcp_pcb_remove+0x114>)
 800a04a:	f004 fad9 	bl	800e600 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a052:	2b00      	cmp	r3, #0
 800a054:	d006      	beq.n	800a064 <tcp_pcb_remove+0xe0>
 800a056:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <tcp_pcb_remove+0x10c>)
 800a058:	f640 0294 	movw	r2, #2196	; 0x894
 800a05c:	4911      	ldr	r1, [pc, #68]	; (800a0a4 <tcp_pcb_remove+0x120>)
 800a05e:	480e      	ldr	r0, [pc, #56]	; (800a098 <tcp_pcb_remove+0x114>)
 800a060:	f004 face 	bl	800e600 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <tcp_pcb_remove+0xf6>
 800a06c:	4b08      	ldr	r3, [pc, #32]	; (800a090 <tcp_pcb_remove+0x10c>)
 800a06e:	f640 0296 	movw	r2, #2198	; 0x896
 800a072:	490d      	ldr	r1, [pc, #52]	; (800a0a8 <tcp_pcb_remove+0x124>)
 800a074:	4808      	ldr	r0, [pc, #32]	; (800a098 <tcp_pcb_remove+0x114>)
 800a076:	f004 fac3 	bl	800e600 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2200      	movs	r2, #0
 800a07e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2200      	movs	r2, #0
 800a084:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	08010844 	.word	0x08010844
 800a094:	08010ef4 	.word	0x08010ef4
 800a098:	080108d0 	.word	0x080108d0
 800a09c:	08010f10 	.word	0x08010f10
 800a0a0:	08010f30 	.word	0x08010f30
 800a0a4:	08010f48 	.word	0x08010f48
 800a0a8:	08010f64 	.word	0x08010f64

0800a0ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <tcp_next_iss+0x1c>
 800a0ba:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <tcp_next_iss+0x38>)
 800a0bc:	f640 02af 	movw	r2, #2223	; 0x8af
 800a0c0:	4909      	ldr	r1, [pc, #36]	; (800a0e8 <tcp_next_iss+0x3c>)
 800a0c2:	480a      	ldr	r0, [pc, #40]	; (800a0ec <tcp_next_iss+0x40>)
 800a0c4:	f004 fa9c 	bl	800e600 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a0c8:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <tcp_next_iss+0x44>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <tcp_next_iss+0x48>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	4a07      	ldr	r2, [pc, #28]	; (800a0f0 <tcp_next_iss+0x44>)
 800a0d4:	6013      	str	r3, [r2, #0]
  return iss;
 800a0d6:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <tcp_next_iss+0x44>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	08010844 	.word	0x08010844
 800a0e8:	08010f7c 	.word	0x08010f7c
 800a0ec:	080108d0 	.word	0x080108d0
 800a0f0:	24000030 	.word	0x24000030
 800a0f4:	24007bb4 	.word	0x24007bb4

0800a0f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <tcp_eff_send_mss_netif+0x22>
 800a10c:	4b14      	ldr	r3, [pc, #80]	; (800a160 <tcp_eff_send_mss_netif+0x68>)
 800a10e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a112:	4914      	ldr	r1, [pc, #80]	; (800a164 <tcp_eff_send_mss_netif+0x6c>)
 800a114:	4814      	ldr	r0, [pc, #80]	; (800a168 <tcp_eff_send_mss_netif+0x70>)
 800a116:	f004 fa73 	bl	800e600 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a120:	89fb      	ldrh	r3, [r7, #14]
 800a122:	e019      	b.n	800a158 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a128:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a12a:	8afb      	ldrh	r3, [r7, #22]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d012      	beq.n	800a156 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a130:	2328      	movs	r3, #40	; 0x28
 800a132:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a134:	8afa      	ldrh	r2, [r7, #22]
 800a136:	8abb      	ldrh	r3, [r7, #20]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d904      	bls.n	800a146 <tcp_eff_send_mss_netif+0x4e>
 800a13c:	8afa      	ldrh	r2, [r7, #22]
 800a13e:	8abb      	ldrh	r3, [r7, #20]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	b29b      	uxth	r3, r3
 800a144:	e000      	b.n	800a148 <tcp_eff_send_mss_netif+0x50>
 800a146:	2300      	movs	r3, #0
 800a148:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a14a:	8a7a      	ldrh	r2, [r7, #18]
 800a14c:	89fb      	ldrh	r3, [r7, #14]
 800a14e:	4293      	cmp	r3, r2
 800a150:	bf28      	it	cs
 800a152:	4613      	movcs	r3, r2
 800a154:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a156:	89fb      	ldrh	r3, [r7, #14]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	08010844 	.word	0x08010844
 800a164:	08010f98 	.word	0x08010f98
 800a168:	080108d0 	.word	0x080108d0

0800a16c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d119      	bne.n	800a1b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a180:	4b10      	ldr	r3, [pc, #64]	; (800a1c4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a182:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a186:	4910      	ldr	r1, [pc, #64]	; (800a1c8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a188:	4810      	ldr	r0, [pc, #64]	; (800a1cc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a18a:	f004 fa39 	bl	800e600 <iprintf>

  while (pcb != NULL) {
 800a18e:	e011      	b.n	800a1b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d108      	bne.n	800a1ae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7fe ffc6 	bl	8009134 <tcp_abort>
      pcb = next;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e002      	b.n	800a1b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1ea      	bne.n	800a190 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	08010844 	.word	0x08010844
 800a1c8:	08010fc0 	.word	0x08010fc0
 800a1cc:	080108d0 	.word	0x080108d0

0800a1d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d02a      	beq.n	800a236 <tcp_netif_ip_addr_changed+0x66>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d026      	beq.n	800a236 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a1e8:	4b15      	ldr	r3, [pc, #84]	; (800a240 <tcp_netif_ip_addr_changed+0x70>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff ffbc 	bl	800a16c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a1f4:	4b13      	ldr	r3, [pc, #76]	; (800a244 <tcp_netif_ip_addr_changed+0x74>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff ffb6 	bl	800a16c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d017      	beq.n	800a236 <tcp_netif_ip_addr_changed+0x66>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d013      	beq.n	800a236 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a20e:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <tcp_netif_ip_addr_changed+0x78>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e00c      	b.n	800a230 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d103      	bne.n	800a22a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1ef      	bne.n	800a216 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	24007bc0 	.word	0x24007bc0
 800a244:	24007bb8 	.word	0x24007bb8
 800a248:	24007bbc 	.word	0x24007bbc

0800a24c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d007      	beq.n	800a26c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff fc3d 	bl	8009ae0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b08d      	sub	sp, #52	; 0x34
 800a278:	af04      	add	r7, sp, #16
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d105      	bne.n	800a290 <tcp_input+0x1c>
 800a284:	4b9b      	ldr	r3, [pc, #620]	; (800a4f4 <tcp_input+0x280>)
 800a286:	2283      	movs	r2, #131	; 0x83
 800a288:	499b      	ldr	r1, [pc, #620]	; (800a4f8 <tcp_input+0x284>)
 800a28a:	489c      	ldr	r0, [pc, #624]	; (800a4fc <tcp_input+0x288>)
 800a28c:	f004 f9b8 	bl	800e600 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	4a9a      	ldr	r2, [pc, #616]	; (800a500 <tcp_input+0x28c>)
 800a296:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	895b      	ldrh	r3, [r3, #10]
 800a29c:	2b13      	cmp	r3, #19
 800a29e:	f240 83d1 	bls.w	800aa44 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2a2:	4b98      	ldr	r3, [pc, #608]	; (800a504 <tcp_input+0x290>)
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	4a97      	ldr	r2, [pc, #604]	; (800a504 <tcp_input+0x290>)
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fc f823 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f040 83c7 	bne.w	800aa48 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a2ba:	4b92      	ldr	r3, [pc, #584]	; (800a504 <tcp_input+0x290>)
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a2c2:	2be0      	cmp	r3, #224	; 0xe0
 800a2c4:	f000 83c0 	beq.w	800aa48 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a2c8:	4b8d      	ldr	r3, [pc, #564]	; (800a500 <tcp_input+0x28c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	899b      	ldrh	r3, [r3, #12]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fa faa5 	bl	8004820 <lwip_htons>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	0b1b      	lsrs	r3, r3, #12
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a2e2:	7cbb      	ldrb	r3, [r7, #18]
 800a2e4:	2b13      	cmp	r3, #19
 800a2e6:	f240 83b1 	bls.w	800aa4c <tcp_input+0x7d8>
 800a2ea:	7cbb      	ldrb	r3, [r7, #18]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	891b      	ldrh	r3, [r3, #8]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	f200 83aa 	bhi.w	800aa4c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a2f8:	7cbb      	ldrb	r3, [r7, #18]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b14      	subs	r3, #20
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	4b81      	ldr	r3, [pc, #516]	; (800a508 <tcp_input+0x294>)
 800a302:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a304:	4b81      	ldr	r3, [pc, #516]	; (800a50c <tcp_input+0x298>)
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	895a      	ldrh	r2, [r3, #10]
 800a30e:	7cbb      	ldrb	r3, [r7, #18]
 800a310:	b29b      	uxth	r3, r3
 800a312:	429a      	cmp	r2, r3
 800a314:	d309      	bcc.n	800a32a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a316:	4b7c      	ldr	r3, [pc, #496]	; (800a508 <tcp_input+0x294>)
 800a318:	881a      	ldrh	r2, [r3, #0]
 800a31a:	4b7d      	ldr	r3, [pc, #500]	; (800a510 <tcp_input+0x29c>)
 800a31c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a31e:	7cbb      	ldrb	r3, [r7, #18]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fe f8f8 	bl	8008518 <pbuf_remove_header>
 800a328:	e04e      	b.n	800a3c8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d105      	bne.n	800a33e <tcp_input+0xca>
 800a332:	4b70      	ldr	r3, [pc, #448]	; (800a4f4 <tcp_input+0x280>)
 800a334:	22c2      	movs	r2, #194	; 0xc2
 800a336:	4977      	ldr	r1, [pc, #476]	; (800a514 <tcp_input+0x2a0>)
 800a338:	4870      	ldr	r0, [pc, #448]	; (800a4fc <tcp_input+0x288>)
 800a33a:	f004 f961 	bl	800e600 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a33e:	2114      	movs	r1, #20
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7fe f8e9 	bl	8008518 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	895a      	ldrh	r2, [r3, #10]
 800a34a:	4b71      	ldr	r3, [pc, #452]	; (800a510 <tcp_input+0x29c>)
 800a34c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a34e:	4b6e      	ldr	r3, [pc, #440]	; (800a508 <tcp_input+0x294>)
 800a350:	881a      	ldrh	r2, [r3, #0]
 800a352:	4b6f      	ldr	r3, [pc, #444]	; (800a510 <tcp_input+0x29c>)
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a35a:	4b6d      	ldr	r3, [pc, #436]	; (800a510 <tcp_input+0x29c>)
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7fe f8d9 	bl	8008518 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	895b      	ldrh	r3, [r3, #10]
 800a36c:	8a3a      	ldrh	r2, [r7, #16]
 800a36e:	429a      	cmp	r2, r3
 800a370:	f200 836e 	bhi.w	800aa50 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	4a64      	ldr	r2, [pc, #400]	; (800a50c <tcp_input+0x298>)
 800a37c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	8a3a      	ldrh	r2, [r7, #16]
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe f8c6 	bl	8008518 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	891a      	ldrh	r2, [r3, #8]
 800a390:	8a3b      	ldrh	r3, [r7, #16]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	895b      	ldrh	r3, [r3, #10]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <tcp_input+0x13a>
 800a3a2:	4b54      	ldr	r3, [pc, #336]	; (800a4f4 <tcp_input+0x280>)
 800a3a4:	22df      	movs	r2, #223	; 0xdf
 800a3a6:	495c      	ldr	r1, [pc, #368]	; (800a518 <tcp_input+0x2a4>)
 800a3a8:	4854      	ldr	r0, [pc, #336]	; (800a4fc <tcp_input+0x288>)
 800a3aa:	f004 f929 	bl	800e600 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	891a      	ldrh	r2, [r3, #8]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	891b      	ldrh	r3, [r3, #8]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d005      	beq.n	800a3c8 <tcp_input+0x154>
 800a3bc:	4b4d      	ldr	r3, [pc, #308]	; (800a4f4 <tcp_input+0x280>)
 800a3be:	22e0      	movs	r2, #224	; 0xe0
 800a3c0:	4956      	ldr	r1, [pc, #344]	; (800a51c <tcp_input+0x2a8>)
 800a3c2:	484e      	ldr	r0, [pc, #312]	; (800a4fc <tcp_input+0x288>)
 800a3c4:	f004 f91c 	bl	800e600 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a3c8:	4b4d      	ldr	r3, [pc, #308]	; (800a500 <tcp_input+0x28c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	4a4b      	ldr	r2, [pc, #300]	; (800a500 <tcp_input+0x28c>)
 800a3d2:	6814      	ldr	r4, [r2, #0]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fa fa23 	bl	8004820 <lwip_htons>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a3de:	4b48      	ldr	r3, [pc, #288]	; (800a500 <tcp_input+0x28c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4a46      	ldr	r2, [pc, #280]	; (800a500 <tcp_input+0x28c>)
 800a3e8:	6814      	ldr	r4, [r2, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fa fa18 	bl	8004820 <lwip_htons>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a3f4:	4b42      	ldr	r3, [pc, #264]	; (800a500 <tcp_input+0x28c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	4a41      	ldr	r2, [pc, #260]	; (800a500 <tcp_input+0x28c>)
 800a3fc:	6814      	ldr	r4, [r2, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fa fa23 	bl	800484a <lwip_htonl>
 800a404:	4603      	mov	r3, r0
 800a406:	6063      	str	r3, [r4, #4]
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	4a45      	ldr	r2, [pc, #276]	; (800a520 <tcp_input+0x2ac>)
 800a40c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a40e:	4b3c      	ldr	r3, [pc, #240]	; (800a500 <tcp_input+0x28c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	4a3a      	ldr	r2, [pc, #232]	; (800a500 <tcp_input+0x28c>)
 800a416:	6814      	ldr	r4, [r2, #0]
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fa fa16 	bl	800484a <lwip_htonl>
 800a41e:	4603      	mov	r3, r0
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	68a3      	ldr	r3, [r4, #8]
 800a424:	4a3f      	ldr	r2, [pc, #252]	; (800a524 <tcp_input+0x2b0>)
 800a426:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a428:	4b35      	ldr	r3, [pc, #212]	; (800a500 <tcp_input+0x28c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	89db      	ldrh	r3, [r3, #14]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	4a33      	ldr	r2, [pc, #204]	; (800a500 <tcp_input+0x28c>)
 800a432:	6814      	ldr	r4, [r2, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f7fa f9f3 	bl	8004820 <lwip_htons>
 800a43a:	4603      	mov	r3, r0
 800a43c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a43e:	4b30      	ldr	r3, [pc, #192]	; (800a500 <tcp_input+0x28c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	899b      	ldrh	r3, [r3, #12]
 800a444:	b29b      	uxth	r3, r3
 800a446:	4618      	mov	r0, r3
 800a448:	f7fa f9ea 	bl	8004820 <lwip_htons>
 800a44c:	4603      	mov	r3, r0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a454:	b2da      	uxtb	r2, r3
 800a456:	4b34      	ldr	r3, [pc, #208]	; (800a528 <tcp_input+0x2b4>)
 800a458:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	891a      	ldrh	r2, [r3, #8]
 800a45e:	4b33      	ldr	r3, [pc, #204]	; (800a52c <tcp_input+0x2b8>)
 800a460:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a462:	4b31      	ldr	r3, [pc, #196]	; (800a528 <tcp_input+0x2b4>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <tcp_input+0x214>
    tcplen++;
 800a46e:	4b2f      	ldr	r3, [pc, #188]	; (800a52c <tcp_input+0x2b8>)
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	b29a      	uxth	r2, r3
 800a476:	4b2d      	ldr	r3, [pc, #180]	; (800a52c <tcp_input+0x2b8>)
 800a478:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	891a      	ldrh	r2, [r3, #8]
 800a47e:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <tcp_input+0x2b8>)
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	f200 82e6 	bhi.w	800aa54 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a48c:	4b28      	ldr	r3, [pc, #160]	; (800a530 <tcp_input+0x2bc>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	e09d      	b.n	800a5d0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	7d1b      	ldrb	r3, [r3, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <tcp_input+0x234>
 800a49c:	4b15      	ldr	r3, [pc, #84]	; (800a4f4 <tcp_input+0x280>)
 800a49e:	22fb      	movs	r2, #251	; 0xfb
 800a4a0:	4924      	ldr	r1, [pc, #144]	; (800a534 <tcp_input+0x2c0>)
 800a4a2:	4816      	ldr	r0, [pc, #88]	; (800a4fc <tcp_input+0x288>)
 800a4a4:	f004 f8ac 	bl	800e600 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	7d1b      	ldrb	r3, [r3, #20]
 800a4ac:	2b0a      	cmp	r3, #10
 800a4ae:	d105      	bne.n	800a4bc <tcp_input+0x248>
 800a4b0:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <tcp_input+0x280>)
 800a4b2:	22fc      	movs	r2, #252	; 0xfc
 800a4b4:	4920      	ldr	r1, [pc, #128]	; (800a538 <tcp_input+0x2c4>)
 800a4b6:	4811      	ldr	r0, [pc, #68]	; (800a4fc <tcp_input+0x288>)
 800a4b8:	f004 f8a2 	bl	800e600 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	7d1b      	ldrb	r3, [r3, #20]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d105      	bne.n	800a4d0 <tcp_input+0x25c>
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <tcp_input+0x280>)
 800a4c6:	22fd      	movs	r2, #253	; 0xfd
 800a4c8:	491c      	ldr	r1, [pc, #112]	; (800a53c <tcp_input+0x2c8>)
 800a4ca:	480c      	ldr	r0, [pc, #48]	; (800a4fc <tcp_input+0x288>)
 800a4cc:	f004 f898 	bl	800e600 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	7a1b      	ldrb	r3, [r3, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d033      	beq.n	800a540 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	7a1a      	ldrb	r2, [r3, #8]
 800a4dc:	4b09      	ldr	r3, [pc, #36]	; (800a504 <tcp_input+0x290>)
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d029      	beq.n	800a540 <tcp_input+0x2cc>
      prev = pcb;
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	61bb      	str	r3, [r7, #24]
      continue;
 800a4f0:	e06b      	b.n	800a5ca <tcp_input+0x356>
 800a4f2:	bf00      	nop
 800a4f4:	08010ff4 	.word	0x08010ff4
 800a4f8:	08011070 	.word	0x08011070
 800a4fc:	08011088 	.word	0x08011088
 800a500:	24007bdc 	.word	0x24007bdc
 800a504:	24004c8c 	.word	0x24004c8c
 800a508:	24007be0 	.word	0x24007be0
 800a50c:	24007be4 	.word	0x24007be4
 800a510:	24007be2 	.word	0x24007be2
 800a514:	080110b0 	.word	0x080110b0
 800a518:	080110c0 	.word	0x080110c0
 800a51c:	080110cc 	.word	0x080110cc
 800a520:	24007bec 	.word	0x24007bec
 800a524:	24007bf0 	.word	0x24007bf0
 800a528:	24007bf8 	.word	0x24007bf8
 800a52c:	24007bf6 	.word	0x24007bf6
 800a530:	24007bc0 	.word	0x24007bc0
 800a534:	080110ec 	.word	0x080110ec
 800a538:	08011114 	.word	0x08011114
 800a53c:	08011140 	.word	0x08011140
    }

    if (pcb->remote_port == tcphdr->src &&
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	8b1a      	ldrh	r2, [r3, #24]
 800a544:	4b72      	ldr	r3, [pc, #456]	; (800a710 <tcp_input+0x49c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d13a      	bne.n	800a5c6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	8ada      	ldrh	r2, [r3, #22]
 800a554:	4b6e      	ldr	r3, [pc, #440]	; (800a710 <tcp_input+0x49c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d132      	bne.n	800a5c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b6b      	ldr	r3, [pc, #428]	; (800a714 <tcp_input+0x4a0>)
 800a566:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a568:	429a      	cmp	r2, r3
 800a56a:	d12c      	bne.n	800a5c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	4b68      	ldr	r3, [pc, #416]	; (800a714 <tcp_input+0x4a0>)
 800a572:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a574:	429a      	cmp	r2, r3
 800a576:	d126      	bne.n	800a5c6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d106      	bne.n	800a590 <tcp_input+0x31c>
 800a582:	4b65      	ldr	r3, [pc, #404]	; (800a718 <tcp_input+0x4a4>)
 800a584:	f240 120d 	movw	r2, #269	; 0x10d
 800a588:	4964      	ldr	r1, [pc, #400]	; (800a71c <tcp_input+0x4a8>)
 800a58a:	4865      	ldr	r0, [pc, #404]	; (800a720 <tcp_input+0x4ac>)
 800a58c:	f004 f838 	bl	800e600 <iprintf>
      if (prev != NULL) {
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <tcp_input+0x338>
        prev->next = pcb->next;
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a59e:	4b61      	ldr	r3, [pc, #388]	; (800a724 <tcp_input+0x4b0>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a5a6:	4a5f      	ldr	r2, [pc, #380]	; (800a724 <tcp_input+0x4b0>)
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d111      	bne.n	800a5da <tcp_input+0x366>
 800a5b6:	4b58      	ldr	r3, [pc, #352]	; (800a718 <tcp_input+0x4a4>)
 800a5b8:	f240 1215 	movw	r2, #277	; 0x115
 800a5bc:	495a      	ldr	r1, [pc, #360]	; (800a728 <tcp_input+0x4b4>)
 800a5be:	4858      	ldr	r0, [pc, #352]	; (800a720 <tcp_input+0x4ac>)
 800a5c0:	f004 f81e 	bl	800e600 <iprintf>
      break;
 800a5c4:	e009      	b.n	800a5da <tcp_input+0x366>
    }
    prev = pcb;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	61fb      	str	r3, [r7, #28]
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f47f af5e 	bne.w	800a494 <tcp_input+0x220>
 800a5d8:	e000      	b.n	800a5dc <tcp_input+0x368>
      break;
 800a5da:	bf00      	nop
  }

  if (pcb == NULL) {
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f040 80aa 	bne.w	800a738 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5e4:	4b51      	ldr	r3, [pc, #324]	; (800a72c <tcp_input+0x4b8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	61fb      	str	r3, [r7, #28]
 800a5ea:	e03f      	b.n	800a66c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	7d1b      	ldrb	r3, [r3, #20]
 800a5f0:	2b0a      	cmp	r3, #10
 800a5f2:	d006      	beq.n	800a602 <tcp_input+0x38e>
 800a5f4:	4b48      	ldr	r3, [pc, #288]	; (800a718 <tcp_input+0x4a4>)
 800a5f6:	f240 121f 	movw	r2, #287	; 0x11f
 800a5fa:	494d      	ldr	r1, [pc, #308]	; (800a730 <tcp_input+0x4bc>)
 800a5fc:	4848      	ldr	r0, [pc, #288]	; (800a720 <tcp_input+0x4ac>)
 800a5fe:	f003 ffff 	bl	800e600 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	7a1b      	ldrb	r3, [r3, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d009      	beq.n	800a61e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	7a1a      	ldrb	r2, [r3, #8]
 800a60e:	4b41      	ldr	r3, [pc, #260]	; (800a714 <tcp_input+0x4a0>)
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a616:	3301      	adds	r3, #1
 800a618:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d122      	bne.n	800a664 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	8b1a      	ldrh	r2, [r3, #24]
 800a622:	4b3b      	ldr	r3, [pc, #236]	; (800a710 <tcp_input+0x49c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d11b      	bne.n	800a666 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	8ada      	ldrh	r2, [r3, #22]
 800a632:	4b37      	ldr	r3, [pc, #220]	; (800a710 <tcp_input+0x49c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	885b      	ldrh	r3, [r3, #2]
 800a638:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d113      	bne.n	800a666 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	4b34      	ldr	r3, [pc, #208]	; (800a714 <tcp_input+0x4a0>)
 800a644:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a646:	429a      	cmp	r2, r3
 800a648:	d10d      	bne.n	800a666 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b31      	ldr	r3, [pc, #196]	; (800a714 <tcp_input+0x4a0>)
 800a650:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a652:	429a      	cmp	r2, r3
 800a654:	d107      	bne.n	800a666 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a656:	69f8      	ldr	r0, [r7, #28]
 800a658:	f000 fb56 	bl	800ad08 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7fd ffe1 	bl	8008624 <pbuf_free>
        return;
 800a662:	e1fd      	b.n	800aa60 <tcp_input+0x7ec>
        continue;
 800a664:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1bc      	bne.n	800a5ec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a676:	4b2f      	ldr	r3, [pc, #188]	; (800a734 <tcp_input+0x4c0>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	e02a      	b.n	800a6d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	7a1b      	ldrb	r3, [r3, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00c      	beq.n	800a6a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	7a1a      	ldrb	r2, [r3, #8]
 800a68a:	4b22      	ldr	r3, [pc, #136]	; (800a714 <tcp_input+0x4a0>)
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a692:	3301      	adds	r3, #1
 800a694:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a696:	429a      	cmp	r2, r3
 800a698:	d002      	beq.n	800a6a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	61bb      	str	r3, [r7, #24]
        continue;
 800a69e:	e016      	b.n	800a6ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	8ada      	ldrh	r2, [r3, #22]
 800a6a4:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <tcp_input+0x49c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	885b      	ldrh	r3, [r3, #2]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d10c      	bne.n	800a6ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	4b17      	ldr	r3, [pc, #92]	; (800a714 <tcp_input+0x4a0>)
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d00f      	beq.n	800a6dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00d      	beq.n	800a6de <tcp_input+0x46a>
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1d1      	bne.n	800a67e <tcp_input+0x40a>
 800a6da:	e000      	b.n	800a6de <tcp_input+0x46a>
            break;
 800a6dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d029      	beq.n	800a738 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a6f2:	4b10      	ldr	r3, [pc, #64]	; (800a734 <tcp_input+0x4c0>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a6fa:	4a0e      	ldr	r2, [pc, #56]	; (800a734 <tcp_input+0x4c0>)
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a700:	6978      	ldr	r0, [r7, #20]
 800a702:	f000 fa03 	bl	800ab0c <tcp_listen_input>
      }
      pbuf_free(p);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7fd ff8c 	bl	8008624 <pbuf_free>
      return;
 800a70c:	e1a8      	b.n	800aa60 <tcp_input+0x7ec>
 800a70e:	bf00      	nop
 800a710:	24007bdc 	.word	0x24007bdc
 800a714:	24004c8c 	.word	0x24004c8c
 800a718:	08010ff4 	.word	0x08010ff4
 800a71c:	08011168 	.word	0x08011168
 800a720:	08011088 	.word	0x08011088
 800a724:	24007bc0 	.word	0x24007bc0
 800a728:	08011194 	.word	0x08011194
 800a72c:	24007bc4 	.word	0x24007bc4
 800a730:	080111c0 	.word	0x080111c0
 800a734:	24007bbc 	.word	0x24007bbc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8158 	beq.w	800a9f0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a740:	4b95      	ldr	r3, [pc, #596]	; (800a998 <tcp_input+0x724>)
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	891a      	ldrh	r2, [r3, #8]
 800a74a:	4b93      	ldr	r3, [pc, #588]	; (800a998 <tcp_input+0x724>)
 800a74c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a74e:	4a92      	ldr	r2, [pc, #584]	; (800a998 <tcp_input+0x724>)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a754:	4b91      	ldr	r3, [pc, #580]	; (800a99c <tcp_input+0x728>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a8f      	ldr	r2, [pc, #572]	; (800a998 <tcp_input+0x724>)
 800a75a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a75c:	4b90      	ldr	r3, [pc, #576]	; (800a9a0 <tcp_input+0x72c>)
 800a75e:	2200      	movs	r2, #0
 800a760:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a762:	4b90      	ldr	r3, [pc, #576]	; (800a9a4 <tcp_input+0x730>)
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a768:	4b8f      	ldr	r3, [pc, #572]	; (800a9a8 <tcp_input+0x734>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a76e:	4b8f      	ldr	r3, [pc, #572]	; (800a9ac <tcp_input+0x738>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d006      	beq.n	800a788 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7b5b      	ldrb	r3, [r3, #13]
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d017      	beq.n	800a7c0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a790:	69f8      	ldr	r0, [r7, #28]
 800a792:	f7ff f929 	bl	80099e8 <tcp_process_refused_data>
 800a796:	4603      	mov	r3, r0
 800a798:	f113 0f0d 	cmn.w	r3, #13
 800a79c:	d007      	beq.n	800a7ae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00c      	beq.n	800a7c0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a7a6:	4b82      	ldr	r3, [pc, #520]	; (800a9b0 <tcp_input+0x73c>)
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 80e3 	bne.w	800a97e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a7b8:	69f8      	ldr	r0, [r7, #28]
 800a7ba:	f003 f9ad 	bl	800db18 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a7be:	e0de      	b.n	800a97e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a7c0:	4a7c      	ldr	r2, [pc, #496]	; (800a9b4 <tcp_input+0x740>)
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a7c6:	69f8      	ldr	r0, [r7, #28]
 800a7c8:	f000 fb18 	bl	800adfc <tcp_process>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a7d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7d4:	f113 0f0d 	cmn.w	r3, #13
 800a7d8:	f000 80d3 	beq.w	800a982 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a7dc:	4b71      	ldr	r3, [pc, #452]	; (800a9a4 <tcp_input+0x730>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	f003 0308 	and.w	r3, r3, #8
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d015      	beq.n	800a814 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d008      	beq.n	800a804 <tcp_input+0x590>
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f8:	69fa      	ldr	r2, [r7, #28]
 800a7fa:	6912      	ldr	r2, [r2, #16]
 800a7fc:	f06f 010d 	mvn.w	r1, #13
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a804:	69f9      	ldr	r1, [r7, #28]
 800a806:	486c      	ldr	r0, [pc, #432]	; (800a9b8 <tcp_input+0x744>)
 800a808:	f7ff fbbc 	bl	8009f84 <tcp_pcb_remove>
        tcp_free(pcb);
 800a80c:	69f8      	ldr	r0, [r7, #28]
 800a80e:	f7fe f9a9 	bl	8008b64 <tcp_free>
 800a812:	e0da      	b.n	800a9ca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a818:	4b63      	ldr	r3, [pc, #396]	; (800a9a8 <tcp_input+0x734>)
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01d      	beq.n	800a85c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a820:	4b61      	ldr	r3, [pc, #388]	; (800a9a8 <tcp_input+0x734>)
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00a      	beq.n	800a846 <tcp_input+0x5d2>
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	6910      	ldr	r0, [r2, #16]
 800a83a:	89fa      	ldrh	r2, [r7, #14]
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	4798      	blx	r3
 800a840:	4603      	mov	r3, r0
 800a842:	74fb      	strb	r3, [r7, #19]
 800a844:	e001      	b.n	800a84a <tcp_input+0x5d6>
 800a846:	2300      	movs	r3, #0
 800a848:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a84a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a84e:	f113 0f0d 	cmn.w	r3, #13
 800a852:	f000 8098 	beq.w	800a986 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a856:	4b54      	ldr	r3, [pc, #336]	; (800a9a8 <tcp_input+0x734>)
 800a858:	2200      	movs	r2, #0
 800a85a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a85c:	69f8      	ldr	r0, [r7, #28]
 800a85e:	f000 f915 	bl	800aa8c <tcp_input_delayed_close>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	f040 8090 	bne.w	800a98a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a86a:	4b4d      	ldr	r3, [pc, #308]	; (800a9a0 <tcp_input+0x72c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d041      	beq.n	800a8f6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <tcp_input+0x614>
 800a87a:	4b50      	ldr	r3, [pc, #320]	; (800a9bc <tcp_input+0x748>)
 800a87c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a880:	494f      	ldr	r1, [pc, #316]	; (800a9c0 <tcp_input+0x74c>)
 800a882:	4850      	ldr	r0, [pc, #320]	; (800a9c4 <tcp_input+0x750>)
 800a884:	f003 febc 	bl	800e600 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	8b5b      	ldrh	r3, [r3, #26]
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a894:	4b42      	ldr	r3, [pc, #264]	; (800a9a0 <tcp_input+0x72c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fd fec3 	bl	8008624 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a89e:	69f8      	ldr	r0, [r7, #28]
 800a8a0:	f7fe fc48 	bl	8009134 <tcp_abort>
            goto aborted;
 800a8a4:	e091      	b.n	800a9ca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00c      	beq.n	800a8ca <tcp_input+0x656>
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	6918      	ldr	r0, [r3, #16]
 800a8ba:	4b39      	ldr	r3, [pc, #228]	; (800a9a0 <tcp_input+0x72c>)
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	69f9      	ldr	r1, [r7, #28]
 800a8c2:	47a0      	blx	r4
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	74fb      	strb	r3, [r7, #19]
 800a8c8:	e008      	b.n	800a8dc <tcp_input+0x668>
 800a8ca:	4b35      	ldr	r3, [pc, #212]	; (800a9a0 <tcp_input+0x72c>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	69f9      	ldr	r1, [r7, #28]
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f7ff f95e 	bl	8009b94 <tcp_recv_null>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a8dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8e0:	f113 0f0d 	cmn.w	r3, #13
 800a8e4:	d053      	beq.n	800a98e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a8e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a8ee:	4b2c      	ldr	r3, [pc, #176]	; (800a9a0 <tcp_input+0x72c>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a8f6:	4b2b      	ldr	r3, [pc, #172]	; (800a9a4 <tcp_input+0x730>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d030      	beq.n	800a964 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a906:	2b00      	cmp	r3, #0
 800a908:	d009      	beq.n	800a91e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a90e:	7b5a      	ldrb	r2, [r3, #13]
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a914:	f042 0220 	orr.w	r2, r2, #32
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	735a      	strb	r2, [r3, #13]
 800a91c:	e022      	b.n	800a964 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a922:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a926:	d005      	beq.n	800a934 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a92c:	3301      	adds	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <tcp_input+0x6e2>
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	6918      	ldr	r0, [r3, #16]
 800a948:	2300      	movs	r3, #0
 800a94a:	2200      	movs	r2, #0
 800a94c:	69f9      	ldr	r1, [r7, #28]
 800a94e:	47a0      	blx	r4
 800a950:	4603      	mov	r3, r0
 800a952:	74fb      	strb	r3, [r7, #19]
 800a954:	e001      	b.n	800a95a <tcp_input+0x6e6>
 800a956:	2300      	movs	r3, #0
 800a958:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a95a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a95e:	f113 0f0d 	cmn.w	r3, #13
 800a962:	d016      	beq.n	800a992 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a964:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <tcp_input+0x740>)
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a96a:	69f8      	ldr	r0, [r7, #28]
 800a96c:	f000 f88e 	bl	800aa8c <tcp_input_delayed_close>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d128      	bne.n	800a9c8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a976:	69f8      	ldr	r0, [r7, #28]
 800a978:	f002 fac8 	bl	800cf0c <tcp_output>
 800a97c:	e025      	b.n	800a9ca <tcp_input+0x756>
        goto aborted;
 800a97e:	bf00      	nop
 800a980:	e023      	b.n	800a9ca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a982:	bf00      	nop
 800a984:	e021      	b.n	800a9ca <tcp_input+0x756>
              goto aborted;
 800a986:	bf00      	nop
 800a988:	e01f      	b.n	800a9ca <tcp_input+0x756>
          goto aborted;
 800a98a:	bf00      	nop
 800a98c:	e01d      	b.n	800a9ca <tcp_input+0x756>
            goto aborted;
 800a98e:	bf00      	nop
 800a990:	e01b      	b.n	800a9ca <tcp_input+0x756>
              goto aborted;
 800a992:	bf00      	nop
 800a994:	e019      	b.n	800a9ca <tcp_input+0x756>
 800a996:	bf00      	nop
 800a998:	24007bcc 	.word	0x24007bcc
 800a99c:	24007bdc 	.word	0x24007bdc
 800a9a0:	24007bfc 	.word	0x24007bfc
 800a9a4:	24007bf9 	.word	0x24007bf9
 800a9a8:	24007bf4 	.word	0x24007bf4
 800a9ac:	24007bf8 	.word	0x24007bf8
 800a9b0:	24007bf6 	.word	0x24007bf6
 800a9b4:	24007c00 	.word	0x24007c00
 800a9b8:	24007bc0 	.word	0x24007bc0
 800a9bc:	08010ff4 	.word	0x08010ff4
 800a9c0:	080111f0 	.word	0x080111f0
 800a9c4:	08011088 	.word	0x08011088
          goto aborted;
 800a9c8:	bf00      	nop
    tcp_input_pcb = NULL;
 800a9ca:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <tcp_input+0x7f4>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a9d0:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <tcp_input+0x7f8>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a9d6:	4b26      	ldr	r3, [pc, #152]	; (800aa70 <tcp_input+0x7fc>)
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d03f      	beq.n	800aa5e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a9de:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <tcp_input+0x7fc>)
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fd fe1e 	bl	8008624 <pbuf_free>
      inseg.p = NULL;
 800a9e8:	4b21      	ldr	r3, [pc, #132]	; (800aa70 <tcp_input+0x7fc>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a9ee:	e036      	b.n	800aa5e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a9f0:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <tcp_input+0x800>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	899b      	ldrh	r3, [r3, #12]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7f9 ff11 	bl	8004820 <lwip_htons>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f003 0304 	and.w	r3, r3, #4
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d118      	bne.n	800aa3c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa0a:	4b1b      	ldr	r3, [pc, #108]	; (800aa78 <tcp_input+0x804>)
 800aa0c:	6819      	ldr	r1, [r3, #0]
 800aa0e:	4b1b      	ldr	r3, [pc, #108]	; (800aa7c <tcp_input+0x808>)
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <tcp_input+0x80c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa1a:	4b16      	ldr	r3, [pc, #88]	; (800aa74 <tcp_input+0x800>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa1e:	885b      	ldrh	r3, [r3, #2]
 800aa20:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa22:	4a14      	ldr	r2, [pc, #80]	; (800aa74 <tcp_input+0x800>)
 800aa24:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa26:	8812      	ldrh	r2, [r2, #0]
 800aa28:	b292      	uxth	r2, r2
 800aa2a:	9202      	str	r2, [sp, #8]
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	4b15      	ldr	r3, [pc, #84]	; (800aa84 <tcp_input+0x810>)
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	4b15      	ldr	r3, [pc, #84]	; (800aa88 <tcp_input+0x814>)
 800aa34:	4602      	mov	r2, r0
 800aa36:	2000      	movs	r0, #0
 800aa38:	f003 f81c 	bl	800da74 <tcp_rst>
    pbuf_free(p);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7fd fdf1 	bl	8008624 <pbuf_free>
  return;
 800aa42:	e00c      	b.n	800aa5e <tcp_input+0x7ea>
    goto dropped;
 800aa44:	bf00      	nop
 800aa46:	e006      	b.n	800aa56 <tcp_input+0x7e2>
    goto dropped;
 800aa48:	bf00      	nop
 800aa4a:	e004      	b.n	800aa56 <tcp_input+0x7e2>
    goto dropped;
 800aa4c:	bf00      	nop
 800aa4e:	e002      	b.n	800aa56 <tcp_input+0x7e2>
      goto dropped;
 800aa50:	bf00      	nop
 800aa52:	e000      	b.n	800aa56 <tcp_input+0x7e2>
      goto dropped;
 800aa54:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7fd fde4 	bl	8008624 <pbuf_free>
 800aa5c:	e000      	b.n	800aa60 <tcp_input+0x7ec>
  return;
 800aa5e:	bf00      	nop
}
 800aa60:	3724      	adds	r7, #36	; 0x24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd90      	pop	{r4, r7, pc}
 800aa66:	bf00      	nop
 800aa68:	24007c00 	.word	0x24007c00
 800aa6c:	24007bfc 	.word	0x24007bfc
 800aa70:	24007bcc 	.word	0x24007bcc
 800aa74:	24007bdc 	.word	0x24007bdc
 800aa78:	24007bf0 	.word	0x24007bf0
 800aa7c:	24007bf6 	.word	0x24007bf6
 800aa80:	24007bec 	.word	0x24007bec
 800aa84:	24004c9c 	.word	0x24004c9c
 800aa88:	24004ca0 	.word	0x24004ca0

0800aa8c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <tcp_input_delayed_close+0x1c>
 800aa9a:	4b17      	ldr	r3, [pc, #92]	; (800aaf8 <tcp_input_delayed_close+0x6c>)
 800aa9c:	f240 225a 	movw	r2, #602	; 0x25a
 800aaa0:	4916      	ldr	r1, [pc, #88]	; (800aafc <tcp_input_delayed_close+0x70>)
 800aaa2:	4817      	ldr	r0, [pc, #92]	; (800ab00 <tcp_input_delayed_close+0x74>)
 800aaa4:	f003 fdac 	bl	800e600 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aaa8:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <tcp_input_delayed_close+0x78>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	f003 0310 	and.w	r3, r3, #16
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01c      	beq.n	800aaee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	8b5b      	ldrh	r3, [r3, #26]
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10d      	bne.n	800aadc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d008      	beq.n	800aadc <tcp_input_delayed_close+0x50>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6912      	ldr	r2, [r2, #16]
 800aad4:	f06f 010e 	mvn.w	r1, #14
 800aad8:	4610      	mov	r0, r2
 800aada:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	480a      	ldr	r0, [pc, #40]	; (800ab08 <tcp_input_delayed_close+0x7c>)
 800aae0:	f7ff fa50 	bl	8009f84 <tcp_pcb_remove>
    tcp_free(pcb);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7fe f83d 	bl	8008b64 <tcp_free>
    return 1;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	08010ff4 	.word	0x08010ff4
 800aafc:	0801120c 	.word	0x0801120c
 800ab00:	08011088 	.word	0x08011088
 800ab04:	24007bf9 	.word	0x24007bf9
 800ab08:	24007bc0 	.word	0x24007bc0

0800ab0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ab0c:	b590      	push	{r4, r7, lr}
 800ab0e:	b08b      	sub	sp, #44	; 0x2c
 800ab10:	af04      	add	r7, sp, #16
 800ab12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ab14:	4b6f      	ldr	r3, [pc, #444]	; (800acd4 <tcp_listen_input+0x1c8>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f040 80d2 	bne.w	800acc6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d106      	bne.n	800ab36 <tcp_listen_input+0x2a>
 800ab28:	4b6b      	ldr	r3, [pc, #428]	; (800acd8 <tcp_listen_input+0x1cc>)
 800ab2a:	f240 2281 	movw	r2, #641	; 0x281
 800ab2e:	496b      	ldr	r1, [pc, #428]	; (800acdc <tcp_listen_input+0x1d0>)
 800ab30:	486b      	ldr	r0, [pc, #428]	; (800ace0 <tcp_listen_input+0x1d4>)
 800ab32:	f003 fd65 	bl	800e600 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ab36:	4b67      	ldr	r3, [pc, #412]	; (800acd4 <tcp_listen_input+0x1c8>)
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f003 0310 	and.w	r3, r3, #16
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d019      	beq.n	800ab76 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab42:	4b68      	ldr	r3, [pc, #416]	; (800ace4 <tcp_listen_input+0x1d8>)
 800ab44:	6819      	ldr	r1, [r3, #0]
 800ab46:	4b68      	ldr	r3, [pc, #416]	; (800ace8 <tcp_listen_input+0x1dc>)
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	4b67      	ldr	r3, [pc, #412]	; (800acec <tcp_listen_input+0x1e0>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab52:	4b67      	ldr	r3, [pc, #412]	; (800acf0 <tcp_listen_input+0x1e4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab56:	885b      	ldrh	r3, [r3, #2]
 800ab58:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab5a:	4a65      	ldr	r2, [pc, #404]	; (800acf0 <tcp_listen_input+0x1e4>)
 800ab5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab5e:	8812      	ldrh	r2, [r2, #0]
 800ab60:	b292      	uxth	r2, r2
 800ab62:	9202      	str	r2, [sp, #8]
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	4b63      	ldr	r3, [pc, #396]	; (800acf4 <tcp_listen_input+0x1e8>)
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4b63      	ldr	r3, [pc, #396]	; (800acf8 <tcp_listen_input+0x1ec>)
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f002 ff80 	bl	800da74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab74:	e0a9      	b.n	800acca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ab76:	4b57      	ldr	r3, [pc, #348]	; (800acd4 <tcp_listen_input+0x1c8>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 80a3 	beq.w	800acca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7d5b      	ldrb	r3, [r3, #21]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff f927 	bl	8009ddc <tcp_alloc>
 800ab8e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d111      	bne.n	800abba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00a      	beq.n	800abb4 <tcp_listen_input+0xa8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	6910      	ldr	r0, [r2, #16]
 800aba6:	f04f 32ff 	mov.w	r2, #4294967295
 800abaa:	2100      	movs	r1, #0
 800abac:	4798      	blx	r3
 800abae:	4603      	mov	r3, r0
 800abb0:	73bb      	strb	r3, [r7, #14]
      return;
 800abb2:	e08b      	b.n	800accc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800abb4:	23f0      	movs	r3, #240	; 0xf0
 800abb6:	73bb      	strb	r3, [r7, #14]
      return;
 800abb8:	e088      	b.n	800accc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800abba:	4b50      	ldr	r3, [pc, #320]	; (800acfc <tcp_listen_input+0x1f0>)
 800abbc:	695a      	ldr	r2, [r3, #20]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800abc2:	4b4e      	ldr	r3, [pc, #312]	; (800acfc <tcp_listen_input+0x1f0>)
 800abc4:	691a      	ldr	r2, [r3, #16]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8ada      	ldrh	r2, [r3, #22]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800abd2:	4b47      	ldr	r3, [pc, #284]	; (800acf0 <tcp_listen_input+0x1e4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2203      	movs	r2, #3
 800abe2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800abe4:	4b41      	ldr	r3, [pc, #260]	; (800acec <tcp_listen_input+0x1e0>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800abf6:	6978      	ldr	r0, [r7, #20]
 800abf8:	f7ff fa58 	bl	800a0ac <tcp_next_iss>
 800abfc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ac16:	4b35      	ldr	r3, [pc, #212]	; (800acec <tcp_listen_input+0x1e0>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	1e5a      	subs	r2, r3, #1
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691a      	ldr	r2, [r3, #16]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
 800ac32:	f003 030c 	and.w	r3, r3, #12
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7a1a      	ldrb	r2, [r3, #8]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ac44:	4b2e      	ldr	r3, [pc, #184]	; (800ad00 <tcp_listen_input+0x1f4>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	60da      	str	r2, [r3, #12]
 800ac4c:	4a2c      	ldr	r2, [pc, #176]	; (800ad00 <tcp_listen_input+0x1f4>)
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	f003 f8d1 	bl	800ddf8 <tcp_timer_needed>
 800ac56:	4b2b      	ldr	r3, [pc, #172]	; (800ad04 <tcp_listen_input+0x1f8>)
 800ac58:	2201      	movs	r2, #1
 800ac5a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ac5c:	6978      	ldr	r0, [r7, #20]
 800ac5e:	f001 fd8f 	bl	800c780 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ac62:	4b23      	ldr	r3, [pc, #140]	; (800acf0 <tcp_listen_input+0x1e4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	89db      	ldrh	r3, [r3, #14]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fb f8a1 	bl	8005dcc <ip4_route>
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	461a      	mov	r2, r3
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff fa30 	bl	800a0f8 <tcp_eff_send_mss_netif>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800aca0:	2112      	movs	r1, #18
 800aca2:	6978      	ldr	r0, [r7, #20]
 800aca4:	f002 f844 	bl	800cd30 <tcp_enqueue_flags>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800acac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d004      	beq.n	800acbe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800acb4:	2100      	movs	r1, #0
 800acb6:	6978      	ldr	r0, [r7, #20]
 800acb8:	f7fe f97e 	bl	8008fb8 <tcp_abandon>
      return;
 800acbc:	e006      	b.n	800accc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800acbe:	6978      	ldr	r0, [r7, #20]
 800acc0:	f002 f924 	bl	800cf0c <tcp_output>
  return;
 800acc4:	e001      	b.n	800acca <tcp_listen_input+0x1be>
    return;
 800acc6:	bf00      	nop
 800acc8:	e000      	b.n	800accc <tcp_listen_input+0x1c0>
  return;
 800acca:	bf00      	nop
}
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd90      	pop	{r4, r7, pc}
 800acd2:	bf00      	nop
 800acd4:	24007bf8 	.word	0x24007bf8
 800acd8:	08010ff4 	.word	0x08010ff4
 800acdc:	08011234 	.word	0x08011234
 800ace0:	08011088 	.word	0x08011088
 800ace4:	24007bf0 	.word	0x24007bf0
 800ace8:	24007bf6 	.word	0x24007bf6
 800acec:	24007bec 	.word	0x24007bec
 800acf0:	24007bdc 	.word	0x24007bdc
 800acf4:	24004c9c 	.word	0x24004c9c
 800acf8:	24004ca0 	.word	0x24004ca0
 800acfc:	24004c8c 	.word	0x24004c8c
 800ad00:	24007bc0 	.word	0x24007bc0
 800ad04:	24007bc8 	.word	0x24007bc8

0800ad08 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ad10:	4b2f      	ldr	r3, [pc, #188]	; (800add0 <tcp_timewait_input+0xc8>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d153      	bne.n	800adc4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <tcp_timewait_input+0x28>
 800ad22:	4b2c      	ldr	r3, [pc, #176]	; (800add4 <tcp_timewait_input+0xcc>)
 800ad24:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ad28:	492b      	ldr	r1, [pc, #172]	; (800add8 <tcp_timewait_input+0xd0>)
 800ad2a:	482c      	ldr	r0, [pc, #176]	; (800addc <tcp_timewait_input+0xd4>)
 800ad2c:	f003 fc68 	bl	800e600 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ad30:	4b27      	ldr	r3, [pc, #156]	; (800add0 <tcp_timewait_input+0xc8>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 0302 	and.w	r3, r3, #2
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d02a      	beq.n	800ad92 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ad3c:	4b28      	ldr	r3, [pc, #160]	; (800ade0 <tcp_timewait_input+0xd8>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	db2d      	blt.n	800ada6 <tcp_timewait_input+0x9e>
 800ad4a:	4b25      	ldr	r3, [pc, #148]	; (800ade0 <tcp_timewait_input+0xd8>)
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad56:	440b      	add	r3, r1
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dc23      	bgt.n	800ada6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad5e:	4b21      	ldr	r3, [pc, #132]	; (800ade4 <tcp_timewait_input+0xdc>)
 800ad60:	6819      	ldr	r1, [r3, #0]
 800ad62:	4b21      	ldr	r3, [pc, #132]	; (800ade8 <tcp_timewait_input+0xe0>)
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <tcp_timewait_input+0xd8>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad6e:	4b1f      	ldr	r3, [pc, #124]	; (800adec <tcp_timewait_input+0xe4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad72:	885b      	ldrh	r3, [r3, #2]
 800ad74:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad76:	4a1d      	ldr	r2, [pc, #116]	; (800adec <tcp_timewait_input+0xe4>)
 800ad78:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7a:	8812      	ldrh	r2, [r2, #0]
 800ad7c:	b292      	uxth	r2, r2
 800ad7e:	9202      	str	r2, [sp, #8]
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	4b1b      	ldr	r3, [pc, #108]	; (800adf0 <tcp_timewait_input+0xe8>)
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4b1b      	ldr	r3, [pc, #108]	; (800adf4 <tcp_timewait_input+0xec>)
 800ad88:	4602      	mov	r2, r0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f002 fe72 	bl	800da74 <tcp_rst>
      return;
 800ad90:	e01b      	b.n	800adca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ad92:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <tcp_timewait_input+0xc8>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ad9e:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <tcp_timewait_input+0xf0>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ada6:	4b10      	ldr	r3, [pc, #64]	; (800ade8 <tcp_timewait_input+0xe0>)
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00c      	beq.n	800adc8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	8b5b      	ldrh	r3, [r3, #26]
 800adb2:	f043 0302 	orr.w	r3, r3, #2
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f002 f8a5 	bl	800cf0c <tcp_output>
  }
  return;
 800adc2:	e001      	b.n	800adc8 <tcp_timewait_input+0xc0>
    return;
 800adc4:	bf00      	nop
 800adc6:	e000      	b.n	800adca <tcp_timewait_input+0xc2>
  return;
 800adc8:	bf00      	nop
}
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	24007bf8 	.word	0x24007bf8
 800add4:	08010ff4 	.word	0x08010ff4
 800add8:	08011254 	.word	0x08011254
 800addc:	08011088 	.word	0x08011088
 800ade0:	24007bec 	.word	0x24007bec
 800ade4:	24007bf0 	.word	0x24007bf0
 800ade8:	24007bf6 	.word	0x24007bf6
 800adec:	24007bdc 	.word	0x24007bdc
 800adf0:	24004c9c 	.word	0x24004c9c
 800adf4:	24004ca0 	.word	0x24004ca0
 800adf8:	24007bb4 	.word	0x24007bb4

0800adfc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800adfc:	b590      	push	{r4, r7, lr}
 800adfe:	b08d      	sub	sp, #52	; 0x34
 800ae00:	af04      	add	r7, sp, #16
 800ae02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d106      	bne.n	800ae20 <tcp_process+0x24>
 800ae12:	4b9d      	ldr	r3, [pc, #628]	; (800b088 <tcp_process+0x28c>)
 800ae14:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ae18:	499c      	ldr	r1, [pc, #624]	; (800b08c <tcp_process+0x290>)
 800ae1a:	489d      	ldr	r0, [pc, #628]	; (800b090 <tcp_process+0x294>)
 800ae1c:	f003 fbf0 	bl	800e600 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ae20:	4b9c      	ldr	r3, [pc, #624]	; (800b094 <tcp_process+0x298>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d04e      	beq.n	800aeca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d108      	bne.n	800ae46 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae38:	4b97      	ldr	r3, [pc, #604]	; (800b098 <tcp_process+0x29c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d123      	bne.n	800ae88 <tcp_process+0x8c>
        acceptable = 1;
 800ae40:	2301      	movs	r3, #1
 800ae42:	76fb      	strb	r3, [r7, #27]
 800ae44:	e020      	b.n	800ae88 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae4a:	4b94      	ldr	r3, [pc, #592]	; (800b09c <tcp_process+0x2a0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d102      	bne.n	800ae58 <tcp_process+0x5c>
        acceptable = 1;
 800ae52:	2301      	movs	r3, #1
 800ae54:	76fb      	strb	r3, [r7, #27]
 800ae56:	e017      	b.n	800ae88 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae58:	4b90      	ldr	r3, [pc, #576]	; (800b09c <tcp_process+0x2a0>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	db10      	blt.n	800ae88 <tcp_process+0x8c>
 800ae66:	4b8d      	ldr	r3, [pc, #564]	; (800b09c <tcp_process+0x2a0>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae72:	440b      	add	r3, r1
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	dc06      	bgt.n	800ae88 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	8b5b      	ldrh	r3, [r3, #26]
 800ae7e:	f043 0302 	orr.w	r3, r3, #2
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ae88:	7efb      	ldrb	r3, [r7, #27]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01b      	beq.n	800aec6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7d1b      	ldrb	r3, [r3, #20]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d106      	bne.n	800aea4 <tcp_process+0xa8>
 800ae96:	4b7c      	ldr	r3, [pc, #496]	; (800b088 <tcp_process+0x28c>)
 800ae98:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ae9c:	4980      	ldr	r1, [pc, #512]	; (800b0a0 <tcp_process+0x2a4>)
 800ae9e:	487c      	ldr	r0, [pc, #496]	; (800b090 <tcp_process+0x294>)
 800aea0:	f003 fbae 	bl	800e600 <iprintf>
      recv_flags |= TF_RESET;
 800aea4:	4b7f      	ldr	r3, [pc, #508]	; (800b0a4 <tcp_process+0x2a8>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	f043 0308 	orr.w	r3, r3, #8
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	4b7d      	ldr	r3, [pc, #500]	; (800b0a4 <tcp_process+0x2a8>)
 800aeb0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	8b5b      	ldrh	r3, [r3, #26]
 800aeb6:	f023 0301 	bic.w	r3, r3, #1
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aec0:	f06f 030d 	mvn.w	r3, #13
 800aec4:	e37a      	b.n	800b5bc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e378      	b.n	800b5bc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aeca:	4b72      	ldr	r3, [pc, #456]	; (800b094 <tcp_process+0x298>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d010      	beq.n	800aef8 <tcp_process+0xfc>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7d1b      	ldrb	r3, [r3, #20]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d00c      	beq.n	800aef8 <tcp_process+0xfc>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	7d1b      	ldrb	r3, [r3, #20]
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d008      	beq.n	800aef8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	8b5b      	ldrh	r3, [r3, #26]
 800aeea:	f043 0302 	orr.w	r3, r3, #2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	e361      	b.n	800b5bc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	8b5b      	ldrh	r3, [r3, #26]
 800aefc:	f003 0310 	and.w	r3, r3, #16
 800af00:	2b00      	cmp	r3, #0
 800af02:	d103      	bne.n	800af0c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800af04:	4b68      	ldr	r3, [pc, #416]	; (800b0a8 <tcp_process+0x2ac>)
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f001 fc2f 	bl	800c780 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	7d1b      	ldrb	r3, [r3, #20]
 800af26:	3b02      	subs	r3, #2
 800af28:	2b07      	cmp	r3, #7
 800af2a:	f200 8337 	bhi.w	800b59c <tcp_process+0x7a0>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <tcp_process+0x138>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af55 	.word	0x0800af55
 800af38:	0800b185 	.word	0x0800b185
 800af3c:	0800b2fd 	.word	0x0800b2fd
 800af40:	0800b327 	.word	0x0800b327
 800af44:	0800b44b 	.word	0x0800b44b
 800af48:	0800b2fd 	.word	0x0800b2fd
 800af4c:	0800b4d7 	.word	0x0800b4d7
 800af50:	0800b567 	.word	0x0800b567
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800af54:	4b4f      	ldr	r3, [pc, #316]	; (800b094 <tcp_process+0x298>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 0310 	and.w	r3, r3, #16
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 80e4 	beq.w	800b12a <tcp_process+0x32e>
 800af62:	4b4c      	ldr	r3, [pc, #304]	; (800b094 <tcp_process+0x298>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 80dd 	beq.w	800b12a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	4b48      	ldr	r3, [pc, #288]	; (800b098 <tcp_process+0x29c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	f040 80d5 	bne.w	800b12a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800af80:	4b46      	ldr	r3, [pc, #280]	; (800b09c <tcp_process+0x2a0>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800af92:	4b41      	ldr	r3, [pc, #260]	; (800b098 <tcp_process+0x29c>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800af9a:	4b44      	ldr	r3, [pc, #272]	; (800b0ac <tcp_process+0x2b0>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	89db      	ldrh	r3, [r3, #14]
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800afb4:	4b39      	ldr	r3, [pc, #228]	; (800b09c <tcp_process+0x2a0>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	1e5a      	subs	r2, r3, #1
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2204      	movs	r2, #4
 800afc2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3304      	adds	r3, #4
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fa fefd 	bl	8005dcc <ip4_route>
 800afd2:	4601      	mov	r1, r0
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3304      	adds	r3, #4
 800afd8:	461a      	mov	r2, r3
 800afda:	4620      	mov	r0, r4
 800afdc:	f7ff f88c 	bl	800a0f8 <tcp_eff_send_mss_netif>
 800afe0:	4603      	mov	r3, r0
 800afe2:	461a      	mov	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800afec:	009a      	lsls	r2, r3, #2
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	f241 111c 	movw	r1, #4380	; 0x111c
 800aff8:	428b      	cmp	r3, r1
 800affa:	bf38      	it	cc
 800affc:	460b      	movcc	r3, r1
 800affe:	429a      	cmp	r2, r3
 800b000:	d204      	bcs.n	800b00c <tcp_process+0x210>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	b29b      	uxth	r3, r3
 800b00a:	e00d      	b.n	800b028 <tcp_process+0x22c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	f241 121c 	movw	r2, #4380	; 0x111c
 800b016:	4293      	cmp	r3, r2
 800b018:	d904      	bls.n	800b024 <tcp_process+0x228>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	b29b      	uxth	r3, r3
 800b022:	e001      	b.n	800b028 <tcp_process+0x22c>
 800b024:	f241 131c 	movw	r3, #4380	; 0x111c
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b034:	2b00      	cmp	r3, #0
 800b036:	d106      	bne.n	800b046 <tcp_process+0x24a>
 800b038:	4b13      	ldr	r3, [pc, #76]	; (800b088 <tcp_process+0x28c>)
 800b03a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b03e:	491c      	ldr	r1, [pc, #112]	; (800b0b0 <tcp_process+0x2b4>)
 800b040:	4813      	ldr	r0, [pc, #76]	; (800b090 <tcp_process+0x294>)
 800b042:	f003 fadd 	bl	800e600 <iprintf>
        --pcb->snd_queuelen;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d12a      	bne.n	800b0b8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b066:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d106      	bne.n	800b07c <tcp_process+0x280>
 800b06e:	4b06      	ldr	r3, [pc, #24]	; (800b088 <tcp_process+0x28c>)
 800b070:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b074:	490f      	ldr	r1, [pc, #60]	; (800b0b4 <tcp_process+0x2b8>)
 800b076:	4806      	ldr	r0, [pc, #24]	; (800b090 <tcp_process+0x294>)
 800b078:	f003 fac2 	bl	800e600 <iprintf>
          pcb->unsent = rseg->next;
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	66da      	str	r2, [r3, #108]	; 0x6c
 800b084:	e01c      	b.n	800b0c0 <tcp_process+0x2c4>
 800b086:	bf00      	nop
 800b088:	08010ff4 	.word	0x08010ff4
 800b08c:	08011274 	.word	0x08011274
 800b090:	08011088 	.word	0x08011088
 800b094:	24007bf8 	.word	0x24007bf8
 800b098:	24007bf0 	.word	0x24007bf0
 800b09c:	24007bec 	.word	0x24007bec
 800b0a0:	08011290 	.word	0x08011290
 800b0a4:	24007bf9 	.word	0x24007bf9
 800b0a8:	24007bb4 	.word	0x24007bb4
 800b0ac:	24007bdc 	.word	0x24007bdc
 800b0b0:	080112b0 	.word	0x080112b0
 800b0b4:	080112c8 	.word	0x080112c8
        } else {
          pcb->unacked = rseg->next;
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b0c0:	69f8      	ldr	r0, [r7, #28]
 800b0c2:	f7fe fd22 	bl	8009b0a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0d4:	861a      	strh	r2, [r3, #48]	; 0x30
 800b0d6:	e006      	b.n	800b0e6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <tcp_process+0x30a>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6910      	ldr	r0, [r2, #16]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4798      	blx	r3
 800b100:	4603      	mov	r3, r0
 800b102:	76bb      	strb	r3, [r7, #26]
 800b104:	e001      	b.n	800b10a <tcp_process+0x30e>
 800b106:	2300      	movs	r3, #0
 800b108:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b10a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b10e:	f113 0f0d 	cmn.w	r3, #13
 800b112:	d102      	bne.n	800b11a <tcp_process+0x31e>
          return ERR_ABRT;
 800b114:	f06f 030c 	mvn.w	r3, #12
 800b118:	e250      	b.n	800b5bc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	8b5b      	ldrh	r3, [r3, #26]
 800b11e:	f043 0302 	orr.w	r3, r3, #2
 800b122:	b29a      	uxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b128:	e23a      	b.n	800b5a0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b12a:	4b98      	ldr	r3, [pc, #608]	; (800b38c <tcp_process+0x590>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 0310 	and.w	r3, r3, #16
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 8234 	beq.w	800b5a0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b138:	4b95      	ldr	r3, [pc, #596]	; (800b390 <tcp_process+0x594>)
 800b13a:	6819      	ldr	r1, [r3, #0]
 800b13c:	4b95      	ldr	r3, [pc, #596]	; (800b394 <tcp_process+0x598>)
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	4b95      	ldr	r3, [pc, #596]	; (800b398 <tcp_process+0x59c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b148:	4b94      	ldr	r3, [pc, #592]	; (800b39c <tcp_process+0x5a0>)
 800b14a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b14c:	885b      	ldrh	r3, [r3, #2]
 800b14e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b150:	4a92      	ldr	r2, [pc, #584]	; (800b39c <tcp_process+0x5a0>)
 800b152:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b154:	8812      	ldrh	r2, [r2, #0]
 800b156:	b292      	uxth	r2, r2
 800b158:	9202      	str	r2, [sp, #8]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	4b90      	ldr	r3, [pc, #576]	; (800b3a0 <tcp_process+0x5a4>)
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	4b90      	ldr	r3, [pc, #576]	; (800b3a4 <tcp_process+0x5a8>)
 800b162:	4602      	mov	r2, r0
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f002 fc85 	bl	800da74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b170:	2b05      	cmp	r3, #5
 800b172:	f200 8215 	bhi.w	800b5a0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 fa51 	bl	800d624 <tcp_rexmit_rto>
      break;
 800b182:	e20d      	b.n	800b5a0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b184:	4b81      	ldr	r3, [pc, #516]	; (800b38c <tcp_process+0x590>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f003 0310 	and.w	r3, r3, #16
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 80a1 	beq.w	800b2d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b192:	4b7f      	ldr	r3, [pc, #508]	; (800b390 <tcp_process+0x594>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	3b01      	subs	r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	db7e      	blt.n	800b2a0 <tcp_process+0x4a4>
 800b1a2:	4b7b      	ldr	r3, [pc, #492]	; (800b390 <tcp_process+0x594>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dc77      	bgt.n	800b2a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d102      	bne.n	800b1c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b1be:	23fa      	movs	r3, #250	; 0xfa
 800b1c0:	76bb      	strb	r3, [r7, #26]
 800b1c2:	e01d      	b.n	800b200 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <tcp_process+0x3e0>
 800b1ce:	4b76      	ldr	r3, [pc, #472]	; (800b3a8 <tcp_process+0x5ac>)
 800b1d0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b1d4:	4975      	ldr	r1, [pc, #468]	; (800b3ac <tcp_process+0x5b0>)
 800b1d6:	4876      	ldr	r0, [pc, #472]	; (800b3b0 <tcp_process+0x5b4>)
 800b1d8:	f003 fa12 	bl	800e600 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00a      	beq.n	800b1fc <tcp_process+0x400>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6910      	ldr	r0, [r2, #16]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	4798      	blx	r3
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	76bb      	strb	r3, [r7, #26]
 800b1fa:	e001      	b.n	800b200 <tcp_process+0x404>
 800b1fc:	23f0      	movs	r3, #240	; 0xf0
 800b1fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b200:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00a      	beq.n	800b21e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b208:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b20c:	f113 0f0d 	cmn.w	r3, #13
 800b210:	d002      	beq.n	800b218 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fd ff8e 	bl	8009134 <tcp_abort>
            }
            return ERR_ABRT;
 800b218:	f06f 030c 	mvn.w	r3, #12
 800b21c:	e1ce      	b.n	800b5bc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fae0 	bl	800b7e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b224:	4b63      	ldr	r3, [pc, #396]	; (800b3b4 <tcp_process+0x5b8>)
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d005      	beq.n	800b238 <tcp_process+0x43c>
            recv_acked--;
 800b22c:	4b61      	ldr	r3, [pc, #388]	; (800b3b4 <tcp_process+0x5b8>)
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	3b01      	subs	r3, #1
 800b232:	b29a      	uxth	r2, r3
 800b234:	4b5f      	ldr	r3, [pc, #380]	; (800b3b4 <tcp_process+0x5b8>)
 800b236:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b23c:	009a      	lsls	r2, r3, #2
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	f241 111c 	movw	r1, #4380	; 0x111c
 800b248:	428b      	cmp	r3, r1
 800b24a:	bf38      	it	cc
 800b24c:	460b      	movcc	r3, r1
 800b24e:	429a      	cmp	r2, r3
 800b250:	d204      	bcs.n	800b25c <tcp_process+0x460>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	b29b      	uxth	r3, r3
 800b25a:	e00d      	b.n	800b278 <tcp_process+0x47c>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	f241 121c 	movw	r2, #4380	; 0x111c
 800b266:	4293      	cmp	r3, r2
 800b268:	d904      	bls.n	800b274 <tcp_process+0x478>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	b29b      	uxth	r3, r3
 800b272:	e001      	b.n	800b278 <tcp_process+0x47c>
 800b274:	f241 131c 	movw	r3, #4380	; 0x111c
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b27e:	4b4e      	ldr	r3, [pc, #312]	; (800b3b8 <tcp_process+0x5bc>)
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	f003 0320 	and.w	r3, r3, #32
 800b286:	2b00      	cmp	r3, #0
 800b288:	d037      	beq.n	800b2fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	8b5b      	ldrh	r3, [r3, #26]
 800b28e:	f043 0302 	orr.w	r3, r3, #2
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2207      	movs	r2, #7
 800b29c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b29e:	e02c      	b.n	800b2fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2a0:	4b3b      	ldr	r3, [pc, #236]	; (800b390 <tcp_process+0x594>)
 800b2a2:	6819      	ldr	r1, [r3, #0]
 800b2a4:	4b3b      	ldr	r3, [pc, #236]	; (800b394 <tcp_process+0x598>)
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4b3b      	ldr	r3, [pc, #236]	; (800b398 <tcp_process+0x59c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2b0:	4b3a      	ldr	r3, [pc, #232]	; (800b39c <tcp_process+0x5a0>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2b4:	885b      	ldrh	r3, [r3, #2]
 800b2b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2b8:	4a38      	ldr	r2, [pc, #224]	; (800b39c <tcp_process+0x5a0>)
 800b2ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2bc:	8812      	ldrh	r2, [r2, #0]
 800b2be:	b292      	uxth	r2, r2
 800b2c0:	9202      	str	r2, [sp, #8]
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	4b36      	ldr	r3, [pc, #216]	; (800b3a0 <tcp_process+0x5a4>)
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4b36      	ldr	r3, [pc, #216]	; (800b3a4 <tcp_process+0x5a8>)
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f002 fbd1 	bl	800da74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b2d2:	e167      	b.n	800b5a4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b2d4:	4b2d      	ldr	r3, [pc, #180]	; (800b38c <tcp_process+0x590>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 8161 	beq.w	800b5a4 <tcp_process+0x7a8>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e6:	1e5a      	subs	r2, r3, #1
 800b2e8:	4b2b      	ldr	r3, [pc, #172]	; (800b398 <tcp_process+0x59c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	f040 8159 	bne.w	800b5a4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f002 f9b8 	bl	800d668 <tcp_rexmit>
      break;
 800b2f8:	e154      	b.n	800b5a4 <tcp_process+0x7a8>
 800b2fa:	e153      	b.n	800b5a4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fa71 	bl	800b7e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b302:	4b2d      	ldr	r3, [pc, #180]	; (800b3b8 <tcp_process+0x5bc>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 814c 	beq.w	800b5a8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	8b5b      	ldrh	r3, [r3, #26]
 800b314:	f043 0302 	orr.w	r3, r3, #2
 800b318:	b29a      	uxth	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2207      	movs	r2, #7
 800b322:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b324:	e140      	b.n	800b5a8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 fa5c 	bl	800b7e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b32c:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <tcp_process+0x5bc>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b00      	cmp	r3, #0
 800b336:	d071      	beq.n	800b41c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b338:	4b14      	ldr	r3, [pc, #80]	; (800b38c <tcp_process+0x590>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 0310 	and.w	r3, r3, #16
 800b340:	2b00      	cmp	r3, #0
 800b342:	d060      	beq.n	800b406 <tcp_process+0x60a>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b348:	4b11      	ldr	r3, [pc, #68]	; (800b390 <tcp_process+0x594>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d15a      	bne.n	800b406 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b354:	2b00      	cmp	r3, #0
 800b356:	d156      	bne.n	800b406 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	8b5b      	ldrh	r3, [r3, #26]
 800b35c:	f043 0302 	orr.w	r3, r3, #2
 800b360:	b29a      	uxth	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7fe fdbc 	bl	8009ee4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b36c:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <tcp_process+0x5c0>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	429a      	cmp	r2, r3
 800b374:	d105      	bne.n	800b382 <tcp_process+0x586>
 800b376:	4b11      	ldr	r3, [pc, #68]	; (800b3bc <tcp_process+0x5c0>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	4a0f      	ldr	r2, [pc, #60]	; (800b3bc <tcp_process+0x5c0>)
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	e02e      	b.n	800b3e0 <tcp_process+0x5e4>
 800b382:	4b0e      	ldr	r3, [pc, #56]	; (800b3bc <tcp_process+0x5c0>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	617b      	str	r3, [r7, #20]
 800b388:	e027      	b.n	800b3da <tcp_process+0x5de>
 800b38a:	bf00      	nop
 800b38c:	24007bf8 	.word	0x24007bf8
 800b390:	24007bf0 	.word	0x24007bf0
 800b394:	24007bf6 	.word	0x24007bf6
 800b398:	24007bec 	.word	0x24007bec
 800b39c:	24007bdc 	.word	0x24007bdc
 800b3a0:	24004c9c 	.word	0x24004c9c
 800b3a4:	24004ca0 	.word	0x24004ca0
 800b3a8:	08010ff4 	.word	0x08010ff4
 800b3ac:	080112dc 	.word	0x080112dc
 800b3b0:	08011088 	.word	0x08011088
 800b3b4:	24007bf4 	.word	0x24007bf4
 800b3b8:	24007bf9 	.word	0x24007bf9
 800b3bc:	24007bc0 	.word	0x24007bc0
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d104      	bne.n	800b3d4 <tcp_process+0x5d8>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	60da      	str	r2, [r3, #12]
 800b3d2:	e005      	b.n	800b3e0 <tcp_process+0x5e4>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1ef      	bne.n	800b3c0 <tcp_process+0x5c4>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	60da      	str	r2, [r3, #12]
 800b3e6:	4b77      	ldr	r3, [pc, #476]	; (800b5c4 <tcp_process+0x7c8>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	220a      	movs	r2, #10
 800b3f0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b3f2:	4b75      	ldr	r3, [pc, #468]	; (800b5c8 <tcp_process+0x7cc>)
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	60da      	str	r2, [r3, #12]
 800b3fa:	4a73      	ldr	r2, [pc, #460]	; (800b5c8 <tcp_process+0x7cc>)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	f002 fcfa 	bl	800ddf8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b404:	e0d2      	b.n	800b5ac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	8b5b      	ldrh	r3, [r3, #26]
 800b40a:	f043 0302 	orr.w	r3, r3, #2
 800b40e:	b29a      	uxth	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2208      	movs	r2, #8
 800b418:	751a      	strb	r2, [r3, #20]
      break;
 800b41a:	e0c7      	b.n	800b5ac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b41c:	4b6b      	ldr	r3, [pc, #428]	; (800b5cc <tcp_process+0x7d0>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	f003 0310 	and.w	r3, r3, #16
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80c1 	beq.w	800b5ac <tcp_process+0x7b0>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b42e:	4b68      	ldr	r3, [pc, #416]	; (800b5d0 <tcp_process+0x7d4>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	f040 80ba 	bne.w	800b5ac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 80b5 	bne.w	800b5ac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2206      	movs	r2, #6
 800b446:	751a      	strb	r2, [r3, #20]
      break;
 800b448:	e0b0      	b.n	800b5ac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9ca 	bl	800b7e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b450:	4b60      	ldr	r3, [pc, #384]	; (800b5d4 <tcp_process+0x7d8>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 80a9 	beq.w	800b5b0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	8b5b      	ldrh	r3, [r3, #26]
 800b462:	f043 0302 	orr.w	r3, r3, #2
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7fe fd39 	bl	8009ee4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b472:	4b59      	ldr	r3, [pc, #356]	; (800b5d8 <tcp_process+0x7dc>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d105      	bne.n	800b488 <tcp_process+0x68c>
 800b47c:	4b56      	ldr	r3, [pc, #344]	; (800b5d8 <tcp_process+0x7dc>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	4a55      	ldr	r2, [pc, #340]	; (800b5d8 <tcp_process+0x7dc>)
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	e013      	b.n	800b4b0 <tcp_process+0x6b4>
 800b488:	4b53      	ldr	r3, [pc, #332]	; (800b5d8 <tcp_process+0x7dc>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	e00c      	b.n	800b4aa <tcp_process+0x6ae>
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	429a      	cmp	r2, r3
 800b498:	d104      	bne.n	800b4a4 <tcp_process+0x6a8>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	60da      	str	r2, [r3, #12]
 800b4a2:	e005      	b.n	800b4b0 <tcp_process+0x6b4>
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	613b      	str	r3, [r7, #16]
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1ef      	bne.n	800b490 <tcp_process+0x694>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	60da      	str	r2, [r3, #12]
 800b4b6:	4b43      	ldr	r3, [pc, #268]	; (800b5c4 <tcp_process+0x7c8>)
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	220a      	movs	r2, #10
 800b4c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4c2:	4b41      	ldr	r3, [pc, #260]	; (800b5c8 <tcp_process+0x7cc>)
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60da      	str	r2, [r3, #12]
 800b4ca:	4a3f      	ldr	r2, [pc, #252]	; (800b5c8 <tcp_process+0x7cc>)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	f002 fc92 	bl	800ddf8 <tcp_timer_needed>
      }
      break;
 800b4d4:	e06c      	b.n	800b5b0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f984 	bl	800b7e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4dc:	4b3b      	ldr	r3, [pc, #236]	; (800b5cc <tcp_process+0x7d0>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	f003 0310 	and.w	r3, r3, #16
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d065      	beq.n	800b5b4 <tcp_process+0x7b8>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b4ec:	4b38      	ldr	r3, [pc, #224]	; (800b5d0 <tcp_process+0x7d4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d15f      	bne.n	800b5b4 <tcp_process+0x7b8>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d15b      	bne.n	800b5b4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7fe fcf1 	bl	8009ee4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b502:	4b35      	ldr	r3, [pc, #212]	; (800b5d8 <tcp_process+0x7dc>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d105      	bne.n	800b518 <tcp_process+0x71c>
 800b50c:	4b32      	ldr	r3, [pc, #200]	; (800b5d8 <tcp_process+0x7dc>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	4a31      	ldr	r2, [pc, #196]	; (800b5d8 <tcp_process+0x7dc>)
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	e013      	b.n	800b540 <tcp_process+0x744>
 800b518:	4b2f      	ldr	r3, [pc, #188]	; (800b5d8 <tcp_process+0x7dc>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e00c      	b.n	800b53a <tcp_process+0x73e>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	429a      	cmp	r2, r3
 800b528:	d104      	bne.n	800b534 <tcp_process+0x738>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68da      	ldr	r2, [r3, #12]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	e005      	b.n	800b540 <tcp_process+0x744>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1ef      	bne.n	800b520 <tcp_process+0x724>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	60da      	str	r2, [r3, #12]
 800b546:	4b1f      	ldr	r3, [pc, #124]	; (800b5c4 <tcp_process+0x7c8>)
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	220a      	movs	r2, #10
 800b550:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b552:	4b1d      	ldr	r3, [pc, #116]	; (800b5c8 <tcp_process+0x7cc>)
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60da      	str	r2, [r3, #12]
 800b55a:	4a1b      	ldr	r2, [pc, #108]	; (800b5c8 <tcp_process+0x7cc>)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	f002 fc4a 	bl	800ddf8 <tcp_timer_needed>
      }
      break;
 800b564:	e026      	b.n	800b5b4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f93c 	bl	800b7e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b56c:	4b17      	ldr	r3, [pc, #92]	; (800b5cc <tcp_process+0x7d0>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	f003 0310 	and.w	r3, r3, #16
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01f      	beq.n	800b5b8 <tcp_process+0x7bc>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b57c:	4b14      	ldr	r3, [pc, #80]	; (800b5d0 <tcp_process+0x7d4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d119      	bne.n	800b5b8 <tcp_process+0x7bc>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d115      	bne.n	800b5b8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b58c:	4b11      	ldr	r3, [pc, #68]	; (800b5d4 <tcp_process+0x7d8>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f043 0310 	orr.w	r3, r3, #16
 800b594:	b2da      	uxtb	r2, r3
 800b596:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <tcp_process+0x7d8>)
 800b598:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b59a:	e00d      	b.n	800b5b8 <tcp_process+0x7bc>
    default:
      break;
 800b59c:	bf00      	nop
 800b59e:	e00c      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e00a      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5a4:	bf00      	nop
 800b5a6:	e008      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5a8:	bf00      	nop
 800b5aa:	e006      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5ac:	bf00      	nop
 800b5ae:	e004      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5b0:	bf00      	nop
 800b5b2:	e002      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <tcp_process+0x7be>
      break;
 800b5b8:	bf00      	nop
  }
  return ERR_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3724      	adds	r7, #36	; 0x24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd90      	pop	{r4, r7, pc}
 800b5c4:	24007bc8 	.word	0x24007bc8
 800b5c8:	24007bc4 	.word	0x24007bc4
 800b5cc:	24007bf8 	.word	0x24007bf8
 800b5d0:	24007bf0 	.word	0x24007bf0
 800b5d4:	24007bf9 	.word	0x24007bf9
 800b5d8:	24007bc0 	.word	0x24007bc0

0800b5dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <tcp_oos_insert_segment+0x1e>
 800b5ec:	4b3b      	ldr	r3, [pc, #236]	; (800b6dc <tcp_oos_insert_segment+0x100>)
 800b5ee:	f240 421f 	movw	r2, #1055	; 0x41f
 800b5f2:	493b      	ldr	r1, [pc, #236]	; (800b6e0 <tcp_oos_insert_segment+0x104>)
 800b5f4:	483b      	ldr	r0, [pc, #236]	; (800b6e4 <tcp_oos_insert_segment+0x108>)
 800b5f6:	f003 f803 	bl	800e600 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	899b      	ldrh	r3, [r3, #12]
 800b600:	b29b      	uxth	r3, r3
 800b602:	4618      	mov	r0, r3
 800b604:	f7f9 f90c 	bl	8004820 <lwip_htons>
 800b608:	4603      	mov	r3, r0
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d028      	beq.n	800b666 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b614:	6838      	ldr	r0, [r7, #0]
 800b616:	f7fe fa63 	bl	8009ae0 <tcp_segs_free>
    next = NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	603b      	str	r3, [r7, #0]
 800b61e:	e056      	b.n	800b6ce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	899b      	ldrh	r3, [r3, #12]
 800b626:	b29b      	uxth	r3, r3
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f9 f8f9 	bl	8004820 <lwip_htons>
 800b62e:	4603      	mov	r3, r0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00d      	beq.n	800b656 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	899b      	ldrh	r3, [r3, #12]
 800b640:	b29c      	uxth	r4, r3
 800b642:	2001      	movs	r0, #1
 800b644:	f7f9 f8ec 	bl	8004820 <lwip_htons>
 800b648:	4603      	mov	r3, r0
 800b64a:	461a      	mov	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	4322      	orrs	r2, r4
 800b652:	b292      	uxth	r2, r2
 800b654:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7fe fa52 	bl	8009b0a <tcp_seg_free>
    while (next &&
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00e      	beq.n	800b68a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	891b      	ldrh	r3, [r3, #8]
 800b670:	461a      	mov	r2, r3
 800b672:	4b1d      	ldr	r3, [pc, #116]	; (800b6e8 <tcp_oos_insert_segment+0x10c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	441a      	add	r2, r3
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	8909      	ldrh	r1, [r1, #8]
 800b682:	440b      	add	r3, r1
 800b684:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b686:	2b00      	cmp	r3, #0
 800b688:	daca      	bge.n	800b620 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01e      	beq.n	800b6ce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	891b      	ldrh	r3, [r3, #8]
 800b694:	461a      	mov	r2, r3
 800b696:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <tcp_oos_insert_segment+0x10c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	441a      	add	r2, r3
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dd12      	ble.n	800b6ce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <tcp_oos_insert_segment+0x10c>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685a      	ldr	r2, [r3, #4]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	891b      	ldrh	r3, [r3, #8]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	f7fc fe25 	bl	8008318 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	601a      	str	r2, [r3, #0]
}
 800b6d4:	bf00      	nop
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd90      	pop	{r4, r7, pc}
 800b6dc:	08010ff4 	.word	0x08010ff4
 800b6e0:	080112fc 	.word	0x080112fc
 800b6e4:	08011088 	.word	0x08011088
 800b6e8:	24007bec 	.word	0x24007bec

0800b6ec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b6ec:	b5b0      	push	{r4, r5, r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b6fa:	e03e      	b.n	800b77a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd f812 	bl	8008734 <pbuf_clen>
 800b710:	4603      	mov	r3, r0
 800b712:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b71a:	8a7a      	ldrh	r2, [r7, #18]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d906      	bls.n	800b72e <tcp_free_acked_segments+0x42>
 800b720:	4b2a      	ldr	r3, [pc, #168]	; (800b7cc <tcp_free_acked_segments+0xe0>)
 800b722:	f240 4257 	movw	r2, #1111	; 0x457
 800b726:	492a      	ldr	r1, [pc, #168]	; (800b7d0 <tcp_free_acked_segments+0xe4>)
 800b728:	482a      	ldr	r0, [pc, #168]	; (800b7d4 <tcp_free_acked_segments+0xe8>)
 800b72a:	f002 ff69 	bl	800e600 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b734:	8a7b      	ldrh	r3, [r7, #18]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	891a      	ldrh	r2, [r3, #8]
 800b744:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <tcp_free_acked_segments+0xec>)
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	4413      	add	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	4b22      	ldr	r3, [pc, #136]	; (800b7d8 <tcp_free_acked_segments+0xec>)
 800b74e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b750:	6978      	ldr	r0, [r7, #20]
 800b752:	f7fe f9da 	bl	8009b0a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00c      	beq.n	800b77a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <tcp_free_acked_segments+0x8e>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d106      	bne.n	800b77a <tcp_free_acked_segments+0x8e>
 800b76c:	4b17      	ldr	r3, [pc, #92]	; (800b7cc <tcp_free_acked_segments+0xe0>)
 800b76e:	f240 4261 	movw	r2, #1121	; 0x461
 800b772:	491a      	ldr	r1, [pc, #104]	; (800b7dc <tcp_free_acked_segments+0xf0>)
 800b774:	4817      	ldr	r0, [pc, #92]	; (800b7d4 <tcp_free_acked_segments+0xe8>)
 800b776:	f002 ff43 	bl	800e600 <iprintf>
  while (seg_list != NULL &&
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d020      	beq.n	800b7c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	4618      	mov	r0, r3
 800b788:	f7f9 f85f 	bl	800484a <lwip_htonl>
 800b78c:	4604      	mov	r4, r0
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	891b      	ldrh	r3, [r3, #8]
 800b792:	461d      	mov	r5, r3
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	899b      	ldrh	r3, [r3, #12]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f9 f83f 	bl	8004820 <lwip_htons>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <tcp_free_acked_segments+0xc6>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <tcp_free_acked_segments+0xc8>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	442b      	add	r3, r5
 800b7b6:	18e2      	adds	r2, r4, r3
 800b7b8:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <tcp_free_acked_segments+0xf4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dd9c      	ble.n	800b6fc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b7c2:	68bb      	ldr	r3, [r7, #8]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bdb0      	pop	{r4, r5, r7, pc}
 800b7cc:	08010ff4 	.word	0x08010ff4
 800b7d0:	08011324 	.word	0x08011324
 800b7d4:	08011088 	.word	0x08011088
 800b7d8:	24007bf4 	.word	0x24007bf4
 800b7dc:	0801134c 	.word	0x0801134c
 800b7e0:	24007bf0 	.word	0x24007bf0

0800b7e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b7e4:	b5b0      	push	{r4, r5, r7, lr}
 800b7e6:	b094      	sub	sp, #80	; 0x50
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d106      	bne.n	800b804 <tcp_receive+0x20>
 800b7f6:	4b91      	ldr	r3, [pc, #580]	; (800ba3c <tcp_receive+0x258>)
 800b7f8:	f240 427b 	movw	r2, #1147	; 0x47b
 800b7fc:	4990      	ldr	r1, [pc, #576]	; (800ba40 <tcp_receive+0x25c>)
 800b7fe:	4891      	ldr	r0, [pc, #580]	; (800ba44 <tcp_receive+0x260>)
 800b800:	f002 fefe 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7d1b      	ldrb	r3, [r3, #20]
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d806      	bhi.n	800b81a <tcp_receive+0x36>
 800b80c:	4b8b      	ldr	r3, [pc, #556]	; (800ba3c <tcp_receive+0x258>)
 800b80e:	f240 427c 	movw	r2, #1148	; 0x47c
 800b812:	498d      	ldr	r1, [pc, #564]	; (800ba48 <tcp_receive+0x264>)
 800b814:	488b      	ldr	r0, [pc, #556]	; (800ba44 <tcp_receive+0x260>)
 800b816:	f002 fef3 	bl	800e600 <iprintf>

  if (flags & TCP_ACK) {
 800b81a:	4b8c      	ldr	r3, [pc, #560]	; (800ba4c <tcp_receive+0x268>)
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	f003 0310 	and.w	r3, r3, #16
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8264 	beq.w	800bcf0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b82e:	461a      	mov	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b834:	4413      	add	r3, r2
 800b836:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b83c:	4b84      	ldr	r3, [pc, #528]	; (800ba50 <tcp_receive+0x26c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	db1b      	blt.n	800b87e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b84a:	4b81      	ldr	r3, [pc, #516]	; (800ba50 <tcp_receive+0x26c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b84e:	429a      	cmp	r2, r3
 800b850:	d106      	bne.n	800b860 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b856:	4b7f      	ldr	r3, [pc, #508]	; (800ba54 <tcp_receive+0x270>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	db0e      	blt.n	800b87e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b864:	4b7b      	ldr	r3, [pc, #492]	; (800ba54 <tcp_receive+0x270>)
 800b866:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b868:	429a      	cmp	r2, r3
 800b86a:	d125      	bne.n	800b8b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b86c:	4b7a      	ldr	r3, [pc, #488]	; (800ba58 <tcp_receive+0x274>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	89db      	ldrh	r3, [r3, #14]
 800b872:	b29a      	uxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d91c      	bls.n	800b8b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b87e:	4b76      	ldr	r3, [pc, #472]	; (800ba58 <tcp_receive+0x274>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	89db      	ldrh	r3, [r3, #14]
 800b884:	b29a      	uxth	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b898:	429a      	cmp	r2, r3
 800b89a:	d205      	bcs.n	800b8a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b8a8:	4b69      	ldr	r3, [pc, #420]	; (800ba50 <tcp_receive+0x26c>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b8b0:	4b68      	ldr	r3, [pc, #416]	; (800ba54 <tcp_receive+0x270>)
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b8b8:	4b66      	ldr	r3, [pc, #408]	; (800ba54 <tcp_receive+0x270>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dc58      	bgt.n	800b978 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b8c6:	4b65      	ldr	r3, [pc, #404]	; (800ba5c <tcp_receive+0x278>)
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d14b      	bne.n	800b966 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b8d8:	4413      	add	r3, r2
 800b8da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d142      	bne.n	800b966 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	db3d      	blt.n	800b966 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8ee:	4b59      	ldr	r3, [pc, #356]	; (800ba54 <tcp_receive+0x270>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d137      	bne.n	800b966 <tcp_receive+0x182>
              found_dupack = 1;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b900:	2bff      	cmp	r3, #255	; 0xff
 800b902:	d007      	beq.n	800b914 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b90a:	3301      	adds	r3, #1
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d91b      	bls.n	800b956 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b928:	4413      	add	r3, r2
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b932:	429a      	cmp	r2, r3
 800b934:	d30a      	bcc.n	800b94c <tcp_receive+0x168>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b940:	4413      	add	r3, r2
 800b942:	b29a      	uxth	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b94a:	e004      	b.n	800b956 <tcp_receive+0x172>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d902      	bls.n	800b966 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f001 feed 	bl	800d740 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f040 8161 	bne.w	800bc30 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b976:	e15b      	b.n	800bc30 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b978:	4b36      	ldr	r3, [pc, #216]	; (800ba54 <tcp_receive+0x270>)
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	f2c0 814e 	blt.w	800bc26 <tcp_receive+0x442>
 800b98a:	4b32      	ldr	r3, [pc, #200]	; (800ba54 <tcp_receive+0x270>)
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	2b00      	cmp	r3, #0
 800b996:	f300 8146 	bgt.w	800bc26 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	8b5b      	ldrh	r3, [r3, #26]
 800b99e:	f003 0304 	and.w	r3, r3, #4
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d010      	beq.n	800b9c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	8b5b      	ldrh	r3, [r3, #26]
 800b9aa:	f023 0304 	bic.w	r3, r3, #4
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b9d6:	10db      	asrs	r3, r3, #3
 800b9d8:	b21b      	sxth	r3, r3
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	4413      	add	r3, r2
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	b21a      	sxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b9f0:	4b18      	ldr	r3, [pc, #96]	; (800ba54 <tcp_receive+0x270>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ba08:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <tcp_receive+0x270>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	7d1b      	ldrb	r3, [r3, #20]
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	f240 8097 	bls.w	800bb48 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d245      	bcs.n	800bab6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	8b5b      	ldrh	r3, [r3, #26]
 800ba2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d014      	beq.n	800ba60 <tcp_receive+0x27c>
 800ba36:	2301      	movs	r3, #1
 800ba38:	e013      	b.n	800ba62 <tcp_receive+0x27e>
 800ba3a:	bf00      	nop
 800ba3c:	08010ff4 	.word	0x08010ff4
 800ba40:	0801136c 	.word	0x0801136c
 800ba44:	08011088 	.word	0x08011088
 800ba48:	08011388 	.word	0x08011388
 800ba4c:	24007bf8 	.word	0x24007bf8
 800ba50:	24007bec 	.word	0x24007bec
 800ba54:	24007bf0 	.word	0x24007bf0
 800ba58:	24007bdc 	.word	0x24007bdc
 800ba5c:	24007bf6 	.word	0x24007bf6
 800ba60:	2302      	movs	r3, #2
 800ba62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ba66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba70:	fb12 f303 	smulbb	r3, r2, r3
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	bf28      	it	cs
 800ba7c:	4613      	movcs	r3, r2
 800ba7e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba88:	4413      	add	r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d309      	bcc.n	800baaa <tcp_receive+0x2c6>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba9e:	4413      	add	r3, r2
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800baa8:	e04e      	b.n	800bb48 <tcp_receive+0x364>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bab0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bab4:	e048      	b.n	800bb48 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800babc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800babe:	4413      	add	r3, r2
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bac8:	429a      	cmp	r2, r3
 800baca:	d309      	bcc.n	800bae0 <tcp_receive+0x2fc>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bad4:	4413      	add	r3, r2
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bade:	e004      	b.n	800baea <tcp_receive+0x306>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d326      	bcc.n	800bb48 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb1a:	4413      	add	r3, r2
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d30a      	bcc.n	800bb3e <tcp_receive+0x35a>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb32:	4413      	add	r3, r2
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bb3c:	e004      	b.n	800bb48 <tcp_receive+0x364>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb50:	4a98      	ldr	r2, [pc, #608]	; (800bdb4 <tcp_receive+0x5d0>)
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff fdca 	bl	800b6ec <tcp_free_acked_segments>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb66:	4a94      	ldr	r2, [pc, #592]	; (800bdb8 <tcp_receive+0x5d4>)
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fdbf 	bl	800b6ec <tcp_free_acked_segments>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb82:	861a      	strh	r2, [r3, #48]	; 0x30
 800bb84:	e002      	b.n	800bb8c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d103      	bne.n	800bba2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bba8:	4b84      	ldr	r3, [pc, #528]	; (800bdbc <tcp_receive+0x5d8>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	4413      	add	r3, r2
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	8b5b      	ldrh	r3, [r3, #26]
 800bbba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d035      	beq.n	800bc2e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d118      	bne.n	800bbfc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00c      	beq.n	800bbec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f8 fe33 	bl	800484a <lwip_htonl>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	dc20      	bgt.n	800bc2e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	8b5b      	ldrh	r3, [r3, #26]
 800bbf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbfa:	e018      	b.n	800bc2e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7f8 fe1e 	bl	800484a <lwip_htonl>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	1ae3      	subs	r3, r4, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dc0b      	bgt.n	800bc2e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8b5b      	ldrh	r3, [r3, #26]
 800bc1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc24:	e003      	b.n	800bc2e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 ff76 	bl	800db18 <tcp_send_empty_ack>
 800bc2c:	e000      	b.n	800bc30 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc2e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d05b      	beq.n	800bcf0 <tcp_receive+0x50c>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc3c:	4b60      	ldr	r3, [pc, #384]	; (800bdc0 <tcp_receive+0x5dc>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	da54      	bge.n	800bcf0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bc46:	4b5f      	ldr	r3, [pc, #380]	; (800bdc4 <tcp_receive+0x5e0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bc5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc64:	10db      	asrs	r3, r3, #3
 800bc66:	b21b      	sxth	r3, r3
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bc7e:	4413      	add	r3, r2
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	b21a      	sxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bc88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	da05      	bge.n	800bc9c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bc90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bc94:	425b      	negs	r3, r3
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bc9c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bca6:	109b      	asrs	r3, r3, #2
 800bca8:	b21b      	sxth	r3, r3
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bcc0:	4413      	add	r3, r2
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	b21a      	sxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bcd0:	10db      	asrs	r3, r3, #3
 800bcd2:	b21b      	sxth	r3, r3
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	4413      	add	r3, r2
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	b21a      	sxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bcf0:	4b35      	ldr	r3, [pc, #212]	; (800bdc8 <tcp_receive+0x5e4>)
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 84e2 	beq.w	800c6be <tcp_receive+0xeda>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7d1b      	ldrb	r3, [r3, #20]
 800bcfe:	2b06      	cmp	r3, #6
 800bd00:	f200 84dd 	bhi.w	800c6be <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd08:	4b30      	ldr	r3, [pc, #192]	; (800bdcc <tcp_receive+0x5e8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f2c0 808f 	blt.w	800be34 <tcp_receive+0x650>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd1a:	4b2b      	ldr	r3, [pc, #172]	; (800bdc8 <tcp_receive+0x5e4>)
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4b2a      	ldr	r3, [pc, #168]	; (800bdcc <tcp_receive+0x5e8>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	440b      	add	r3, r1
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	3301      	adds	r3, #1
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f300 8082 	bgt.w	800be34 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bd30:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <tcp_receive+0x5ec>)
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd3a:	4b24      	ldr	r3, [pc, #144]	; (800bdcc <tcp_receive+0x5e8>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bd42:	4b23      	ldr	r3, [pc, #140]	; (800bdd0 <tcp_receive+0x5ec>)
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <tcp_receive+0x574>
 800bd4a:	4b22      	ldr	r3, [pc, #136]	; (800bdd4 <tcp_receive+0x5f0>)
 800bd4c:	f240 5294 	movw	r2, #1428	; 0x594
 800bd50:	4921      	ldr	r1, [pc, #132]	; (800bdd8 <tcp_receive+0x5f4>)
 800bd52:	4822      	ldr	r0, [pc, #136]	; (800bddc <tcp_receive+0x5f8>)
 800bd54:	f002 fc54 	bl	800e600 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d906      	bls.n	800bd70 <tcp_receive+0x58c>
 800bd62:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <tcp_receive+0x5f0>)
 800bd64:	f240 5295 	movw	r2, #1429	; 0x595
 800bd68:	491d      	ldr	r1, [pc, #116]	; (800bde0 <tcp_receive+0x5fc>)
 800bd6a:	481c      	ldr	r0, [pc, #112]	; (800bddc <tcp_receive+0x5f8>)
 800bd6c:	f002 fc48 	bl	800e600 <iprintf>
      off = (u16_t)off32;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bd76:	4b16      	ldr	r3, [pc, #88]	; (800bdd0 <tcp_receive+0x5ec>)
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	891b      	ldrh	r3, [r3, #8]
 800bd7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d906      	bls.n	800bd92 <tcp_receive+0x5ae>
 800bd84:	4b13      	ldr	r3, [pc, #76]	; (800bdd4 <tcp_receive+0x5f0>)
 800bd86:	f240 5297 	movw	r2, #1431	; 0x597
 800bd8a:	4916      	ldr	r1, [pc, #88]	; (800bde4 <tcp_receive+0x600>)
 800bd8c:	4813      	ldr	r0, [pc, #76]	; (800bddc <tcp_receive+0x5f8>)
 800bd8e:	f002 fc37 	bl	800e600 <iprintf>
      inseg.len -= off;
 800bd92:	4b0f      	ldr	r3, [pc, #60]	; (800bdd0 <tcp_receive+0x5ec>)
 800bd94:	891a      	ldrh	r2, [r3, #8]
 800bd96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <tcp_receive+0x5ec>)
 800bda0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bda2:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <tcp_receive+0x5ec>)
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	891a      	ldrh	r2, [r3, #8]
 800bda8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bdb0:	e02a      	b.n	800be08 <tcp_receive+0x624>
 800bdb2:	bf00      	nop
 800bdb4:	080113a4 	.word	0x080113a4
 800bdb8:	080113ac 	.word	0x080113ac
 800bdbc:	24007bf4 	.word	0x24007bf4
 800bdc0:	24007bf0 	.word	0x24007bf0
 800bdc4:	24007bb4 	.word	0x24007bb4
 800bdc8:	24007bf6 	.word	0x24007bf6
 800bdcc:	24007bec 	.word	0x24007bec
 800bdd0:	24007bcc 	.word	0x24007bcc
 800bdd4:	08010ff4 	.word	0x08010ff4
 800bdd8:	080113b4 	.word	0x080113b4
 800bddc:	08011088 	.word	0x08011088
 800bde0:	080113c4 	.word	0x080113c4
 800bde4:	080113d4 	.word	0x080113d4
        off -= p->len;
 800bde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdea:	895b      	ldrh	r3, [r3, #10]
 800bdec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bdf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdf8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bdfa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bdfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdfe:	2200      	movs	r2, #0
 800be00:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800be02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800be08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be0a:	895b      	ldrh	r3, [r3, #10]
 800be0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be10:	429a      	cmp	r2, r3
 800be12:	d8e9      	bhi.n	800bde8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800be14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be18:	4619      	mov	r1, r3
 800be1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be1c:	f7fc fb7c 	bl	8008518 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	4a91      	ldr	r2, [pc, #580]	; (800c06c <tcp_receive+0x888>)
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	4b91      	ldr	r3, [pc, #580]	; (800c070 <tcp_receive+0x88c>)
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	4a8f      	ldr	r2, [pc, #572]	; (800c06c <tcp_receive+0x888>)
 800be2e:	6812      	ldr	r2, [r2, #0]
 800be30:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be32:	e00d      	b.n	800be50 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800be34:	4b8d      	ldr	r3, [pc, #564]	; (800c06c <tcp_receive+0x888>)
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da06      	bge.n	800be50 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8b5b      	ldrh	r3, [r3, #26]
 800be46:	f043 0302 	orr.w	r3, r3, #2
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be50:	4b86      	ldr	r3, [pc, #536]	; (800c06c <tcp_receive+0x888>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f2c0 842a 	blt.w	800c6b4 <tcp_receive+0xed0>
 800be60:	4b82      	ldr	r3, [pc, #520]	; (800c06c <tcp_receive+0x888>)
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be6c:	440b      	add	r3, r1
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	3301      	adds	r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	f300 841e 	bgt.w	800c6b4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be7c:	4b7b      	ldr	r3, [pc, #492]	; (800c06c <tcp_receive+0x888>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	f040 829a 	bne.w	800c3ba <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800be86:	4b7a      	ldr	r3, [pc, #488]	; (800c070 <tcp_receive+0x88c>)
 800be88:	891c      	ldrh	r4, [r3, #8]
 800be8a:	4b79      	ldr	r3, [pc, #484]	; (800c070 <tcp_receive+0x88c>)
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	899b      	ldrh	r3, [r3, #12]
 800be90:	b29b      	uxth	r3, r3
 800be92:	4618      	mov	r0, r3
 800be94:	f7f8 fcc4 	bl	8004820 <lwip_htons>
 800be98:	4603      	mov	r3, r0
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0303 	and.w	r3, r3, #3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <tcp_receive+0x6c4>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e000      	b.n	800beaa <tcp_receive+0x6c6>
 800bea8:	2300      	movs	r3, #0
 800beaa:	4423      	add	r3, r4
 800beac:	b29a      	uxth	r2, r3
 800beae:	4b71      	ldr	r3, [pc, #452]	; (800c074 <tcp_receive+0x890>)
 800beb0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800beb6:	4b6f      	ldr	r3, [pc, #444]	; (800c074 <tcp_receive+0x890>)
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d275      	bcs.n	800bfaa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bebe:	4b6c      	ldr	r3, [pc, #432]	; (800c070 <tcp_receive+0x88c>)
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	899b      	ldrh	r3, [r3, #12]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f8 fcaa 	bl	8004820 <lwip_htons>
 800becc:	4603      	mov	r3, r0
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01f      	beq.n	800bf18 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bed8:	4b65      	ldr	r3, [pc, #404]	; (800c070 <tcp_receive+0x88c>)
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	899b      	ldrh	r3, [r3, #12]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bee6:	b21c      	sxth	r4, r3
 800bee8:	4b61      	ldr	r3, [pc, #388]	; (800c070 <tcp_receive+0x88c>)
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	899b      	ldrh	r3, [r3, #12]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7f8 fc95 	bl	8004820 <lwip_htons>
 800bef6:	4603      	mov	r3, r0
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	b29b      	uxth	r3, r3
 800befc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7f8 fc8c 	bl	8004820 <lwip_htons>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	b21b      	sxth	r3, r3
 800bf0c:	4323      	orrs	r3, r4
 800bf0e:	b21a      	sxth	r2, r3
 800bf10:	4b57      	ldr	r3, [pc, #348]	; (800c070 <tcp_receive+0x88c>)
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	b292      	uxth	r2, r2
 800bf16:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf1c:	4b54      	ldr	r3, [pc, #336]	; (800c070 <tcp_receive+0x88c>)
 800bf1e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf20:	4b53      	ldr	r3, [pc, #332]	; (800c070 <tcp_receive+0x88c>)
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	899b      	ldrh	r3, [r3, #12]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7f8 fc79 	bl	8004820 <lwip_htons>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d005      	beq.n	800bf46 <tcp_receive+0x762>
            inseg.len -= 1;
 800bf3a:	4b4d      	ldr	r3, [pc, #308]	; (800c070 <tcp_receive+0x88c>)
 800bf3c:	891b      	ldrh	r3, [r3, #8]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	4b4b      	ldr	r3, [pc, #300]	; (800c070 <tcp_receive+0x88c>)
 800bf44:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bf46:	4b4a      	ldr	r3, [pc, #296]	; (800c070 <tcp_receive+0x88c>)
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	4a49      	ldr	r2, [pc, #292]	; (800c070 <tcp_receive+0x88c>)
 800bf4c:	8912      	ldrh	r2, [r2, #8]
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fc f9e1 	bl	8008318 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf56:	4b46      	ldr	r3, [pc, #280]	; (800c070 <tcp_receive+0x88c>)
 800bf58:	891c      	ldrh	r4, [r3, #8]
 800bf5a:	4b45      	ldr	r3, [pc, #276]	; (800c070 <tcp_receive+0x88c>)
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	899b      	ldrh	r3, [r3, #12]
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f8 fc5c 	bl	8004820 <lwip_htons>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	f003 0303 	and.w	r3, r3, #3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <tcp_receive+0x794>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e000      	b.n	800bf7a <tcp_receive+0x796>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4423      	add	r3, r4
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	4b3d      	ldr	r3, [pc, #244]	; (800c074 <tcp_receive+0x890>)
 800bf80:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf82:	4b3c      	ldr	r3, [pc, #240]	; (800c074 <tcp_receive+0x890>)
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	4b38      	ldr	r3, [pc, #224]	; (800c06c <tcp_receive+0x888>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	441a      	add	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf96:	440b      	add	r3, r1
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d006      	beq.n	800bfaa <tcp_receive+0x7c6>
 800bf9c:	4b36      	ldr	r3, [pc, #216]	; (800c078 <tcp_receive+0x894>)
 800bf9e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bfa2:	4936      	ldr	r1, [pc, #216]	; (800c07c <tcp_receive+0x898>)
 800bfa4:	4836      	ldr	r0, [pc, #216]	; (800c080 <tcp_receive+0x89c>)
 800bfa6:	f002 fb2b 	bl	800e600 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 80e7 	beq.w	800c182 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bfb4:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <tcp_receive+0x88c>)
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	899b      	ldrh	r3, [r3, #12]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7f8 fc2f 	bl	8004820 <lwip_htons>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d010      	beq.n	800bff0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bfce:	e00a      	b.n	800bfe6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f7fd fd92 	bl	8009b0a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1f0      	bne.n	800bfd0 <tcp_receive+0x7ec>
 800bfee:	e0c8      	b.n	800c182 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bff6:	e052      	b.n	800c09e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	899b      	ldrh	r3, [r3, #12]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	4618      	mov	r0, r3
 800c002:	f7f8 fc0d 	bl	8004820 <lwip_htons>
 800c006:	4603      	mov	r3, r0
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d03d      	beq.n	800c08e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c012:	4b17      	ldr	r3, [pc, #92]	; (800c070 <tcp_receive+0x88c>)
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	899b      	ldrh	r3, [r3, #12]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f8 fc00 	bl	8004820 <lwip_htons>
 800c020:	4603      	mov	r3, r0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d130      	bne.n	800c08e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c02c:	4b10      	ldr	r3, [pc, #64]	; (800c070 <tcp_receive+0x88c>)
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	899b      	ldrh	r3, [r3, #12]
 800c032:	b29c      	uxth	r4, r3
 800c034:	2001      	movs	r0, #1
 800c036:	f7f8 fbf3 	bl	8004820 <lwip_htons>
 800c03a:	4603      	mov	r3, r0
 800c03c:	461a      	mov	r2, r3
 800c03e:	4b0c      	ldr	r3, [pc, #48]	; (800c070 <tcp_receive+0x88c>)
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	4322      	orrs	r2, r4
 800c044:	b292      	uxth	r2, r2
 800c046:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c048:	4b09      	ldr	r3, [pc, #36]	; (800c070 <tcp_receive+0x88c>)
 800c04a:	891c      	ldrh	r4, [r3, #8]
 800c04c:	4b08      	ldr	r3, [pc, #32]	; (800c070 <tcp_receive+0x88c>)
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	899b      	ldrh	r3, [r3, #12]
 800c052:	b29b      	uxth	r3, r3
 800c054:	4618      	mov	r0, r3
 800c056:	f7f8 fbe3 	bl	8004820 <lwip_htons>
 800c05a:	4603      	mov	r3, r0
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	f003 0303 	and.w	r3, r3, #3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00e      	beq.n	800c084 <tcp_receive+0x8a0>
 800c066:	2301      	movs	r3, #1
 800c068:	e00d      	b.n	800c086 <tcp_receive+0x8a2>
 800c06a:	bf00      	nop
 800c06c:	24007bec 	.word	0x24007bec
 800c070:	24007bcc 	.word	0x24007bcc
 800c074:	24007bf6 	.word	0x24007bf6
 800c078:	08010ff4 	.word	0x08010ff4
 800c07c:	080113e4 	.word	0x080113e4
 800c080:	08011088 	.word	0x08011088
 800c084:	2300      	movs	r3, #0
 800c086:	4423      	add	r3, r4
 800c088:	b29a      	uxth	r2, r3
 800c08a:	4b98      	ldr	r3, [pc, #608]	; (800c2ec <tcp_receive+0xb08>)
 800c08c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c090:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c098:	6938      	ldr	r0, [r7, #16]
 800c09a:	f7fd fd36 	bl	8009b0a <tcp_seg_free>
            while (next &&
 800c09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00e      	beq.n	800c0c2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c0a4:	4b91      	ldr	r3, [pc, #580]	; (800c2ec <tcp_receive+0xb08>)
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b91      	ldr	r3, [pc, #580]	; (800c2f0 <tcp_receive+0xb0c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	441a      	add	r2, r3
 800c0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0b8:	8909      	ldrh	r1, [r1, #8]
 800c0ba:	440b      	add	r3, r1
 800c0bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da9a      	bge.n	800bff8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d059      	beq.n	800c17c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c0c8:	4b88      	ldr	r3, [pc, #544]	; (800c2ec <tcp_receive+0xb08>)
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4b88      	ldr	r3, [pc, #544]	; (800c2f0 <tcp_receive+0xb0c>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dd4d      	ble.n	800c17c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	4b81      	ldr	r3, [pc, #516]	; (800c2f0 <tcp_receive+0xb0c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	4b80      	ldr	r3, [pc, #512]	; (800c2f4 <tcp_receive+0xb10>)
 800c0f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c0f6:	4b7f      	ldr	r3, [pc, #508]	; (800c2f4 <tcp_receive+0xb10>)
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	899b      	ldrh	r3, [r3, #12]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7f8 fb8e 	bl	8004820 <lwip_htons>
 800c104:	4603      	mov	r3, r0
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f003 0302 	and.w	r3, r3, #2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <tcp_receive+0x938>
                inseg.len -= 1;
 800c110:	4b78      	ldr	r3, [pc, #480]	; (800c2f4 <tcp_receive+0xb10>)
 800c112:	891b      	ldrh	r3, [r3, #8]
 800c114:	3b01      	subs	r3, #1
 800c116:	b29a      	uxth	r2, r3
 800c118:	4b76      	ldr	r3, [pc, #472]	; (800c2f4 <tcp_receive+0xb10>)
 800c11a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c11c:	4b75      	ldr	r3, [pc, #468]	; (800c2f4 <tcp_receive+0xb10>)
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a74      	ldr	r2, [pc, #464]	; (800c2f4 <tcp_receive+0xb10>)
 800c122:	8912      	ldrh	r2, [r2, #8]
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7fc f8f6 	bl	8008318 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c12c:	4b71      	ldr	r3, [pc, #452]	; (800c2f4 <tcp_receive+0xb10>)
 800c12e:	891c      	ldrh	r4, [r3, #8]
 800c130:	4b70      	ldr	r3, [pc, #448]	; (800c2f4 <tcp_receive+0xb10>)
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	899b      	ldrh	r3, [r3, #12]
 800c136:	b29b      	uxth	r3, r3
 800c138:	4618      	mov	r0, r3
 800c13a:	f7f8 fb71 	bl	8004820 <lwip_htons>
 800c13e:	4603      	mov	r3, r0
 800c140:	b2db      	uxtb	r3, r3
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <tcp_receive+0x96a>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e000      	b.n	800c150 <tcp_receive+0x96c>
 800c14e:	2300      	movs	r3, #0
 800c150:	4423      	add	r3, r4
 800c152:	b29a      	uxth	r2, r3
 800c154:	4b65      	ldr	r3, [pc, #404]	; (800c2ec <tcp_receive+0xb08>)
 800c156:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c158:	4b64      	ldr	r3, [pc, #400]	; (800c2ec <tcp_receive+0xb08>)
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	461a      	mov	r2, r3
 800c15e:	4b64      	ldr	r3, [pc, #400]	; (800c2f0 <tcp_receive+0xb0c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	441a      	add	r2, r3
 800c164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d006      	beq.n	800c17c <tcp_receive+0x998>
 800c16e:	4b62      	ldr	r3, [pc, #392]	; (800c2f8 <tcp_receive+0xb14>)
 800c170:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c174:	4961      	ldr	r1, [pc, #388]	; (800c2fc <tcp_receive+0xb18>)
 800c176:	4862      	ldr	r0, [pc, #392]	; (800c300 <tcp_receive+0xb1c>)
 800c178:	f002 fa42 	bl	800e600 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c180:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c182:	4b5a      	ldr	r3, [pc, #360]	; (800c2ec <tcp_receive+0xb08>)
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	4b59      	ldr	r3, [pc, #356]	; (800c2f0 <tcp_receive+0xb0c>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	441a      	add	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c196:	4b55      	ldr	r3, [pc, #340]	; (800c2ec <tcp_receive+0xb08>)
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d206      	bcs.n	800c1ac <tcp_receive+0x9c8>
 800c19e:	4b56      	ldr	r3, [pc, #344]	; (800c2f8 <tcp_receive+0xb14>)
 800c1a0:	f240 6207 	movw	r2, #1543	; 0x607
 800c1a4:	4957      	ldr	r1, [pc, #348]	; (800c304 <tcp_receive+0xb20>)
 800c1a6:	4856      	ldr	r0, [pc, #344]	; (800c300 <tcp_receive+0xb1c>)
 800c1a8:	f002 fa2a 	bl	800e600 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1b0:	4b4e      	ldr	r3, [pc, #312]	; (800c2ec <tcp_receive+0xb08>)
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7fc ffc5 	bl	800914c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c1c2:	4b4c      	ldr	r3, [pc, #304]	; (800c2f4 <tcp_receive+0xb10>)
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	891b      	ldrh	r3, [r3, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d006      	beq.n	800c1da <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c1cc:	4b49      	ldr	r3, [pc, #292]	; (800c2f4 <tcp_receive+0xb10>)
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	4a4d      	ldr	r2, [pc, #308]	; (800c308 <tcp_receive+0xb24>)
 800c1d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c1d4:	4b47      	ldr	r3, [pc, #284]	; (800c2f4 <tcp_receive+0xb10>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1da:	4b46      	ldr	r3, [pc, #280]	; (800c2f4 <tcp_receive+0xb10>)
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	899b      	ldrh	r3, [r3, #12]
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f8 fb1c 	bl	8004820 <lwip_htons>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 80b8 	beq.w	800c366 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c1f6:	4b45      	ldr	r3, [pc, #276]	; (800c30c <tcp_receive+0xb28>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	f043 0320 	orr.w	r3, r3, #32
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	4b42      	ldr	r3, [pc, #264]	; (800c30c <tcp_receive+0xb28>)
 800c202:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c204:	e0af      	b.n	800c366 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c20a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	4a36      	ldr	r2, [pc, #216]	; (800c2f0 <tcp_receive+0xb0c>)
 800c216:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	891b      	ldrh	r3, [r3, #8]
 800c21c:	461c      	mov	r4, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	b29b      	uxth	r3, r3
 800c226:	4618      	mov	r0, r3
 800c228:	f7f8 fafa 	bl	8004820 <lwip_htons>
 800c22c:	4603      	mov	r3, r0
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	f003 0303 	and.w	r3, r3, #3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <tcp_receive+0xa58>
 800c238:	2301      	movs	r3, #1
 800c23a:	e000      	b.n	800c23e <tcp_receive+0xa5a>
 800c23c:	2300      	movs	r3, #0
 800c23e:	191a      	adds	r2, r3, r4
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c24e:	461c      	mov	r4, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	891b      	ldrh	r3, [r3, #8]
 800c254:	461d      	mov	r5, r3
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	899b      	ldrh	r3, [r3, #12]
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f8 fade 	bl	8004820 <lwip_htons>
 800c264:	4603      	mov	r3, r0
 800c266:	b2db      	uxtb	r3, r3
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <tcp_receive+0xa90>
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <tcp_receive+0xa92>
 800c274:	2300      	movs	r3, #0
 800c276:	442b      	add	r3, r5
 800c278:	429c      	cmp	r4, r3
 800c27a:	d206      	bcs.n	800c28a <tcp_receive+0xaa6>
 800c27c:	4b1e      	ldr	r3, [pc, #120]	; (800c2f8 <tcp_receive+0xb14>)
 800c27e:	f240 622b 	movw	r2, #1579	; 0x62b
 800c282:	4923      	ldr	r1, [pc, #140]	; (800c310 <tcp_receive+0xb2c>)
 800c284:	481e      	ldr	r0, [pc, #120]	; (800c300 <tcp_receive+0xb1c>)
 800c286:	f002 f9bb 	bl	800e600 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	891b      	ldrh	r3, [r3, #8]
 800c28e:	461c      	mov	r4, r3
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	899b      	ldrh	r3, [r3, #12]
 800c296:	b29b      	uxth	r3, r3
 800c298:	4618      	mov	r0, r3
 800c29a:	f7f8 fac1 	bl	8004820 <lwip_htons>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	f003 0303 	and.w	r3, r3, #3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d001      	beq.n	800c2ae <tcp_receive+0xaca>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <tcp_receive+0xacc>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	1919      	adds	r1, r3, r4
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c2b6:	b28b      	uxth	r3, r1
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7fc ff43 	bl	800914c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	891b      	ldrh	r3, [r3, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d028      	beq.n	800c322 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c2d0:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <tcp_receive+0xb24>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01d      	beq.n	800c314 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c2d8:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <tcp_receive+0xb24>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7fc fa60 	bl	80087a8 <pbuf_cat>
 800c2e8:	e018      	b.n	800c31c <tcp_receive+0xb38>
 800c2ea:	bf00      	nop
 800c2ec:	24007bf6 	.word	0x24007bf6
 800c2f0:	24007bec 	.word	0x24007bec
 800c2f4:	24007bcc 	.word	0x24007bcc
 800c2f8:	08010ff4 	.word	0x08010ff4
 800c2fc:	0801141c 	.word	0x0801141c
 800c300:	08011088 	.word	0x08011088
 800c304:	08011458 	.word	0x08011458
 800c308:	24007bfc 	.word	0x24007bfc
 800c30c:	24007bf9 	.word	0x24007bf9
 800c310:	08011478 	.word	0x08011478
            } else {
              recv_data = cseg->p;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	4a70      	ldr	r2, [pc, #448]	; (800c4dc <tcp_receive+0xcf8>)
 800c31a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2200      	movs	r2, #0
 800c320:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	899b      	ldrh	r3, [r3, #12]
 800c328:	b29b      	uxth	r3, r3
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7f8 fa78 	bl	8004820 <lwip_htons>
 800c330:	4603      	mov	r3, r0
 800c332:	b2db      	uxtb	r3, r3
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00d      	beq.n	800c358 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c33c:	4b68      	ldr	r3, [pc, #416]	; (800c4e0 <tcp_receive+0xcfc>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	f043 0320 	orr.w	r3, r3, #32
 800c344:	b2da      	uxtb	r2, r3
 800c346:	4b66      	ldr	r3, [pc, #408]	; (800c4e0 <tcp_receive+0xcfc>)
 800c348:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7d1b      	ldrb	r3, [r3, #20]
 800c34e:	2b04      	cmp	r3, #4
 800c350:	d102      	bne.n	800c358 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2207      	movs	r2, #7
 800c356:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c360:	68b8      	ldr	r0, [r7, #8]
 800c362:	f7fd fbd2 	bl	8009b0a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d008      	beq.n	800c380 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c37a:	429a      	cmp	r2, r3
 800c37c:	f43f af43 	beq.w	800c206 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	8b5b      	ldrh	r3, [r3, #26]
 800c384:	f003 0301 	and.w	r3, r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00e      	beq.n	800c3aa <tcp_receive+0xbc6>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	8b5b      	ldrh	r3, [r3, #26]
 800c390:	f023 0301 	bic.w	r3, r3, #1
 800c394:	b29a      	uxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	835a      	strh	r2, [r3, #26]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	8b5b      	ldrh	r3, [r3, #26]
 800c39e:	f043 0302 	orr.w	r3, r3, #2
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3a8:	e188      	b.n	800c6bc <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8b5b      	ldrh	r3, [r3, #26]
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c3b8:	e180      	b.n	800c6bc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c3c2:	4848      	ldr	r0, [pc, #288]	; (800c4e4 <tcp_receive+0xd00>)
 800c3c4:	f7fd fbba 	bl	8009b3c <tcp_seg_copy>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	675a      	str	r2, [r3, #116]	; 0x74
 800c3ce:	e16d      	b.n	800c6ac <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3da:	e157      	b.n	800c68c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	4b41      	ldr	r3, [pc, #260]	; (800c4e8 <tcp_receive+0xd04>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d11d      	bne.n	800c426 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c3ea:	4b3e      	ldr	r3, [pc, #248]	; (800c4e4 <tcp_receive+0xd00>)
 800c3ec:	891a      	ldrh	r2, [r3, #8]
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	891b      	ldrh	r3, [r3, #8]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	f240 814f 	bls.w	800c696 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3f8:	483a      	ldr	r0, [pc, #232]	; (800c4e4 <tcp_receive+0xd00>)
 800c3fa:	f7fd fb9f 	bl	8009b3c <tcp_seg_copy>
 800c3fe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 8149 	beq.w	800c69a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d003      	beq.n	800c416 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	e002      	b.n	800c41c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c41c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c41e:	6978      	ldr	r0, [r7, #20]
 800c420:	f7ff f8dc 	bl	800b5dc <tcp_oos_insert_segment>
                }
                break;
 800c424:	e139      	b.n	800c69a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d117      	bne.n	800c45c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c42c:	4b2e      	ldr	r3, [pc, #184]	; (800c4e8 <tcp_receive+0xd04>)
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	da57      	bge.n	800c4ec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c43c:	4829      	ldr	r0, [pc, #164]	; (800c4e4 <tcp_receive+0xd00>)
 800c43e:	f7fd fb7d 	bl	8009b3c <tcp_seg_copy>
 800c442:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f000 8129 	beq.w	800c69e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	69ba      	ldr	r2, [r7, #24]
 800c450:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c454:	69b8      	ldr	r0, [r7, #24]
 800c456:	f7ff f8c1 	bl	800b5dc <tcp_oos_insert_segment>
                  }
                  break;
 800c45a:	e120      	b.n	800c69e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c45c:	4b22      	ldr	r3, [pc, #136]	; (800c4e8 <tcp_receive+0xd04>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	3b01      	subs	r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	db3e      	blt.n	800c4ec <tcp_receive+0xd08>
 800c46e:	4b1e      	ldr	r3, [pc, #120]	; (800c4e8 <tcp_receive+0xd04>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	3301      	adds	r3, #1
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	dc35      	bgt.n	800c4ec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c480:	4818      	ldr	r0, [pc, #96]	; (800c4e4 <tcp_receive+0xd00>)
 800c482:	f7fd fb5b 	bl	8009b3c <tcp_seg_copy>
 800c486:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 8109 	beq.w	800c6a2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c498:	8912      	ldrh	r2, [r2, #8]
 800c49a:	441a      	add	r2, r3
 800c49c:	4b12      	ldr	r3, [pc, #72]	; (800c4e8 <tcp_receive+0xd04>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dd12      	ble.n	800c4cc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c4a6:	4b10      	ldr	r3, [pc, #64]	; (800c4e8 <tcp_receive+0xd04>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4be:	685a      	ldr	r2, [r3, #4]
 800c4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c2:	891b      	ldrh	r3, [r3, #8]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	f7fb ff26 	bl	8008318 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ce:	69fa      	ldr	r2, [r7, #28]
 800c4d0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c4d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4d4:	69f8      	ldr	r0, [r7, #28]
 800c4d6:	f7ff f881 	bl	800b5dc <tcp_oos_insert_segment>
                  }
                  break;
 800c4da:	e0e2      	b.n	800c6a2 <tcp_receive+0xebe>
 800c4dc:	24007bfc 	.word	0x24007bfc
 800c4e0:	24007bf9 	.word	0x24007bf9
 800c4e4:	24007bcc 	.word	0x24007bcc
 800c4e8:	24007bec 	.word	0x24007bec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f040 80c6 	bne.w	800c686 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c4fa:	4b80      	ldr	r3, [pc, #512]	; (800c6fc <tcp_receive+0xf18>)
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c506:	2b00      	cmp	r3, #0
 800c508:	f340 80bd 	ble.w	800c686 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	899b      	ldrh	r3, [r3, #12]
 800c512:	b29b      	uxth	r3, r3
 800c514:	4618      	mov	r0, r3
 800c516:	f7f8 f983 	bl	8004820 <lwip_htons>
 800c51a:	4603      	mov	r3, r0
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 80bf 	bne.w	800c6a6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c528:	4875      	ldr	r0, [pc, #468]	; (800c700 <tcp_receive+0xf1c>)
 800c52a:	f7fd fb07 	bl	8009b3c <tcp_seg_copy>
 800c52e:	4602      	mov	r2, r0
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f000 80b6 	beq.w	800c6aa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c546:	8912      	ldrh	r2, [r2, #8]
 800c548:	441a      	add	r2, r3
 800c54a:	4b6c      	ldr	r3, [pc, #432]	; (800c6fc <tcp_receive+0xf18>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b00      	cmp	r3, #0
 800c552:	dd12      	ble.n	800c57a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c554:	4b69      	ldr	r3, [pc, #420]	; (800c6fc <tcp_receive+0xf18>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	b29a      	uxth	r2, r3
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	b29b      	uxth	r3, r3
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	b29a      	uxth	r2, r3
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c570:	891b      	ldrh	r3, [r3, #8]
 800c572:	4619      	mov	r1, r3
 800c574:	4610      	mov	r0, r2
 800c576:	f7fb fecf 	bl	8008318 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c57a:	4b62      	ldr	r3, [pc, #392]	; (800c704 <tcp_receive+0xf20>)
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	461a      	mov	r2, r3
 800c580:	4b5e      	ldr	r3, [pc, #376]	; (800c6fc <tcp_receive+0xf18>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	441a      	add	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c58e:	440b      	add	r3, r1
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	f340 8089 	ble.w	800c6aa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	899b      	ldrh	r3, [r3, #12]
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7f8 f93c 	bl	8004820 <lwip_htons>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d022      	beq.n	800c5fa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	899b      	ldrh	r3, [r3, #12]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	b21b      	sxth	r3, r3
 800c5c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5c4:	b21c      	sxth	r4, r3
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	899b      	ldrh	r3, [r3, #12]
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7f8 f925 	bl	8004820 <lwip_htons>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f8 f91c 	bl	8004820 <lwip_htons>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	b21b      	sxth	r3, r3
 800c5ec:	4323      	orrs	r3, r4
 800c5ee:	b21a      	sxth	r2, r3
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c604:	4413      	add	r3, r2
 800c606:	b299      	uxth	r1, r3
 800c608:	4b3c      	ldr	r3, [pc, #240]	; (800c6fc <tcp_receive+0xf18>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	1a8a      	subs	r2, r1, r2
 800c614:	b292      	uxth	r2, r2
 800c616:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	891b      	ldrh	r3, [r3, #8]
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f7fb fe76 	bl	8008318 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	891c      	ldrh	r4, [r3, #8]
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	899b      	ldrh	r3, [r3, #12]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7f8 f8ef 	bl	8004820 <lwip_htons>
 800c642:	4603      	mov	r3, r0
 800c644:	b2db      	uxtb	r3, r3
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <tcp_receive+0xe6e>
 800c64e:	2301      	movs	r3, #1
 800c650:	e000      	b.n	800c654 <tcp_receive+0xe70>
 800c652:	2300      	movs	r3, #0
 800c654:	4423      	add	r3, r4
 800c656:	b29a      	uxth	r2, r3
 800c658:	4b2a      	ldr	r3, [pc, #168]	; (800c704 <tcp_receive+0xf20>)
 800c65a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c65c:	4b29      	ldr	r3, [pc, #164]	; (800c704 <tcp_receive+0xf20>)
 800c65e:	881b      	ldrh	r3, [r3, #0]
 800c660:	461a      	mov	r2, r3
 800c662:	4b26      	ldr	r3, [pc, #152]	; (800c6fc <tcp_receive+0xf18>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	441a      	add	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66c:	6879      	ldr	r1, [r7, #4]
 800c66e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c670:	440b      	add	r3, r1
 800c672:	429a      	cmp	r2, r3
 800c674:	d019      	beq.n	800c6aa <tcp_receive+0xec6>
 800c676:	4b24      	ldr	r3, [pc, #144]	; (800c708 <tcp_receive+0xf24>)
 800c678:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c67c:	4923      	ldr	r1, [pc, #140]	; (800c70c <tcp_receive+0xf28>)
 800c67e:	4824      	ldr	r0, [pc, #144]	; (800c710 <tcp_receive+0xf2c>)
 800c680:	f001 ffbe 	bl	800e600 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c684:	e011      	b.n	800c6aa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f47f aea4 	bne.w	800c3dc <tcp_receive+0xbf8>
 800c694:	e00a      	b.n	800c6ac <tcp_receive+0xec8>
                break;
 800c696:	bf00      	nop
 800c698:	e008      	b.n	800c6ac <tcp_receive+0xec8>
                break;
 800c69a:	bf00      	nop
 800c69c:	e006      	b.n	800c6ac <tcp_receive+0xec8>
                  break;
 800c69e:	bf00      	nop
 800c6a0:	e004      	b.n	800c6ac <tcp_receive+0xec8>
                  break;
 800c6a2:	bf00      	nop
 800c6a4:	e002      	b.n	800c6ac <tcp_receive+0xec8>
                  break;
 800c6a6:	bf00      	nop
 800c6a8:	e000      	b.n	800c6ac <tcp_receive+0xec8>
                break;
 800c6aa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f001 fa33 	bl	800db18 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c6b2:	e003      	b.n	800c6bc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f001 fa2f 	bl	800db18 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c6ba:	e01a      	b.n	800c6f2 <tcp_receive+0xf0e>
 800c6bc:	e019      	b.n	800c6f2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c6be:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <tcp_receive+0xf18>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db0a      	blt.n	800c6e2 <tcp_receive+0xefe>
 800c6cc:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <tcp_receive+0xf18>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6d8:	440b      	add	r3, r1
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	3301      	adds	r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	dd07      	ble.n	800c6f2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8b5b      	ldrh	r3, [r3, #26]
 800c6e6:	f043 0302 	orr.w	r3, r3, #2
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c6f0:	e7ff      	b.n	800c6f2 <tcp_receive+0xf0e>
 800c6f2:	bf00      	nop
 800c6f4:	3750      	adds	r7, #80	; 0x50
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	24007bec 	.word	0x24007bec
 800c700:	24007bcc 	.word	0x24007bcc
 800c704:	24007bf6 	.word	0x24007bf6
 800c708:	08010ff4 	.word	0x08010ff4
 800c70c:	080113e4 	.word	0x080113e4
 800c710:	08011088 	.word	0x08011088

0800c714 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c71a:	4b15      	ldr	r3, [pc, #84]	; (800c770 <tcp_get_next_optbyte+0x5c>)
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	b291      	uxth	r1, r2
 800c722:	4a13      	ldr	r2, [pc, #76]	; (800c770 <tcp_get_next_optbyte+0x5c>)
 800c724:	8011      	strh	r1, [r2, #0]
 800c726:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c728:	4b12      	ldr	r3, [pc, #72]	; (800c774 <tcp_get_next_optbyte+0x60>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <tcp_get_next_optbyte+0x26>
 800c730:	4b11      	ldr	r3, [pc, #68]	; (800c778 <tcp_get_next_optbyte+0x64>)
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	88fa      	ldrh	r2, [r7, #6]
 800c736:	429a      	cmp	r2, r3
 800c738:	d208      	bcs.n	800c74c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c73a:	4b10      	ldr	r3, [pc, #64]	; (800c77c <tcp_get_next_optbyte+0x68>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	3314      	adds	r3, #20
 800c740:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c742:	88fb      	ldrh	r3, [r7, #6]
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	4413      	add	r3, r2
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	e00b      	b.n	800c764 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c74c:	88fb      	ldrh	r3, [r7, #6]
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	4b09      	ldr	r3, [pc, #36]	; (800c778 <tcp_get_next_optbyte+0x64>)
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c75a:	4b06      	ldr	r3, [pc, #24]	; (800c774 <tcp_get_next_optbyte+0x60>)
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	797b      	ldrb	r3, [r7, #5]
 800c760:	4413      	add	r3, r2
 800c762:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	24007be8 	.word	0x24007be8
 800c774:	24007be4 	.word	0x24007be4
 800c778:	24007be2 	.word	0x24007be2
 800c77c:	24007bdc 	.word	0x24007bdc

0800c780 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d106      	bne.n	800c79c <tcp_parseopt+0x1c>
 800c78e:	4b32      	ldr	r3, [pc, #200]	; (800c858 <tcp_parseopt+0xd8>)
 800c790:	f240 727d 	movw	r2, #1917	; 0x77d
 800c794:	4931      	ldr	r1, [pc, #196]	; (800c85c <tcp_parseopt+0xdc>)
 800c796:	4832      	ldr	r0, [pc, #200]	; (800c860 <tcp_parseopt+0xe0>)
 800c798:	f001 ff32 	bl	800e600 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c79c:	4b31      	ldr	r3, [pc, #196]	; (800c864 <tcp_parseopt+0xe4>)
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d055      	beq.n	800c850 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7a4:	4b30      	ldr	r3, [pc, #192]	; (800c868 <tcp_parseopt+0xe8>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	801a      	strh	r2, [r3, #0]
 800c7aa:	e045      	b.n	800c838 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c7ac:	f7ff ffb2 	bl	800c714 <tcp_get_next_optbyte>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d006      	beq.n	800c7c8 <tcp_parseopt+0x48>
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	dc2b      	bgt.n	800c816 <tcp_parseopt+0x96>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d041      	beq.n	800c846 <tcp_parseopt+0xc6>
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d127      	bne.n	800c816 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c7c6:	e037      	b.n	800c838 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c7c8:	f7ff ffa4 	bl	800c714 <tcp_get_next_optbyte>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	d13b      	bne.n	800c84a <tcp_parseopt+0xca>
 800c7d2:	4b25      	ldr	r3, [pc, #148]	; (800c868 <tcp_parseopt+0xe8>)
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	4a22      	ldr	r2, [pc, #136]	; (800c864 <tcp_parseopt+0xe4>)
 800c7da:	8812      	ldrh	r2, [r2, #0]
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	da34      	bge.n	800c84a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c7e0:	f7ff ff98 	bl	800c714 <tcp_get_next_optbyte>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c7ec:	f7ff ff92 	bl	800c714 <tcp_get_next_optbyte>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	89bb      	ldrh	r3, [r7, #12]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c7fa:	89bb      	ldrh	r3, [r7, #12]
 800c7fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c800:	d804      	bhi.n	800c80c <tcp_parseopt+0x8c>
 800c802:	89bb      	ldrh	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <tcp_parseopt+0x8c>
 800c808:	89ba      	ldrh	r2, [r7, #12]
 800c80a:	e001      	b.n	800c810 <tcp_parseopt+0x90>
 800c80c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c814:	e010      	b.n	800c838 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c816:	f7ff ff7d 	bl	800c714 <tcp_get_next_optbyte>
 800c81a:	4603      	mov	r3, r0
 800c81c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c81e:	7afb      	ldrb	r3, [r7, #11]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d914      	bls.n	800c84e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	b29a      	uxth	r2, r3
 800c828:	4b0f      	ldr	r3, [pc, #60]	; (800c868 <tcp_parseopt+0xe8>)
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	4413      	add	r3, r2
 800c82e:	b29b      	uxth	r3, r3
 800c830:	3b02      	subs	r3, #2
 800c832:	b29a      	uxth	r2, r3
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <tcp_parseopt+0xe8>)
 800c836:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c838:	4b0b      	ldr	r3, [pc, #44]	; (800c868 <tcp_parseopt+0xe8>)
 800c83a:	881a      	ldrh	r2, [r3, #0]
 800c83c:	4b09      	ldr	r3, [pc, #36]	; (800c864 <tcp_parseopt+0xe4>)
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	429a      	cmp	r2, r3
 800c842:	d3b3      	bcc.n	800c7ac <tcp_parseopt+0x2c>
 800c844:	e004      	b.n	800c850 <tcp_parseopt+0xd0>
          return;
 800c846:	bf00      	nop
 800c848:	e002      	b.n	800c850 <tcp_parseopt+0xd0>
            return;
 800c84a:	bf00      	nop
 800c84c:	e000      	b.n	800c850 <tcp_parseopt+0xd0>
            return;
 800c84e:	bf00      	nop
      }
    }
  }
}
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	08010ff4 	.word	0x08010ff4
 800c85c:	080114a0 	.word	0x080114a0
 800c860:	08011088 	.word	0x08011088
 800c864:	24007be0 	.word	0x24007be0
 800c868:	24007be8 	.word	0x24007be8

0800c86c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c86c:	b480      	push	{r7}
 800c86e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c870:	4b05      	ldr	r3, [pc, #20]	; (800c888 <tcp_trigger_input_pcb_close+0x1c>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f043 0310 	orr.w	r3, r3, #16
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b03      	ldr	r3, [pc, #12]	; (800c888 <tcp_trigger_input_pcb_close+0x1c>)
 800c87c:	701a      	strb	r2, [r3, #0]
}
 800c87e:	bf00      	nop
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	24007bf9 	.word	0x24007bf9

0800c88c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <tcp_route+0x28>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	7a1b      	ldrb	r3, [r3, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d006      	beq.n	800c8b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	7a1b      	ldrb	r3, [r3, #8]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fb fb5a 	bl	8007f64 <netif_get_by_index>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	e003      	b.n	800c8bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7f9 fa89 	bl	8005dcc <ip4_route>
 800c8ba:	4603      	mov	r3, r0
  }
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c8c4:	b590      	push	{r4, r7, lr}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	603b      	str	r3, [r7, #0]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d105      	bne.n	800c8e6 <tcp_create_segment+0x22>
 800c8da:	4b44      	ldr	r3, [pc, #272]	; (800c9ec <tcp_create_segment+0x128>)
 800c8dc:	22a3      	movs	r2, #163	; 0xa3
 800c8de:	4944      	ldr	r1, [pc, #272]	; (800c9f0 <tcp_create_segment+0x12c>)
 800c8e0:	4844      	ldr	r0, [pc, #272]	; (800c9f4 <tcp_create_segment+0x130>)
 800c8e2:	f001 fe8d 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d105      	bne.n	800c8f8 <tcp_create_segment+0x34>
 800c8ec:	4b3f      	ldr	r3, [pc, #252]	; (800c9ec <tcp_create_segment+0x128>)
 800c8ee:	22a4      	movs	r2, #164	; 0xa4
 800c8f0:	4941      	ldr	r1, [pc, #260]	; (800c9f8 <tcp_create_segment+0x134>)
 800c8f2:	4840      	ldr	r0, [pc, #256]	; (800c9f4 <tcp_create_segment+0x130>)
 800c8f4:	f001 fe84 	bl	800e600 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c8f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c906:	2003      	movs	r0, #3
 800c908:	f7fa ffa6 	bl	8007858 <memp_malloc>
 800c90c:	6138      	str	r0, [r7, #16]
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d104      	bne.n	800c91e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c914:	68b8      	ldr	r0, [r7, #8]
 800c916:	f7fb fe85 	bl	8008624 <pbuf_free>
    return NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	e061      	b.n	800c9e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c924:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	891a      	ldrh	r2, [r3, #8]
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d205      	bcs.n	800c94a <tcp_create_segment+0x86>
 800c93e:	4b2b      	ldr	r3, [pc, #172]	; (800c9ec <tcp_create_segment+0x128>)
 800c940:	22b0      	movs	r2, #176	; 0xb0
 800c942:	492e      	ldr	r1, [pc, #184]	; (800c9fc <tcp_create_segment+0x138>)
 800c944:	482b      	ldr	r0, [pc, #172]	; (800c9f4 <tcp_create_segment+0x130>)
 800c946:	f001 fe5b 	bl	800e600 <iprintf>
  seg->len = p->tot_len - optlen;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	891a      	ldrh	r2, [r3, #8]
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	b29b      	uxth	r3, r3
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	b29a      	uxth	r2, r3
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c95a:	2114      	movs	r1, #20
 800c95c:	68b8      	ldr	r0, [r7, #8]
 800c95e:	f7fb fdcb 	bl	80084f8 <pbuf_add_header>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d004      	beq.n	800c972 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c968:	6938      	ldr	r0, [r7, #16]
 800c96a:	f7fd f8ce 	bl	8009b0a <tcp_seg_free>
    return NULL;
 800c96e:	2300      	movs	r3, #0
 800c970:	e037      	b.n	800c9e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8ada      	ldrh	r2, [r3, #22]
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	68dc      	ldr	r4, [r3, #12]
 800c984:	4610      	mov	r0, r2
 800c986:	f7f7 ff4b 	bl	8004820 <lwip_htons>
 800c98a:	4603      	mov	r3, r0
 800c98c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	8b1a      	ldrh	r2, [r3, #24]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	68dc      	ldr	r4, [r3, #12]
 800c996:	4610      	mov	r0, r2
 800c998:	f7f7 ff42 	bl	8004820 <lwip_htons>
 800c99c:	4603      	mov	r3, r0
 800c99e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	68dc      	ldr	r4, [r3, #12]
 800c9a4:	6838      	ldr	r0, [r7, #0]
 800c9a6:	f7f7 ff50 	bl	800484a <lwip_htonl>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
 800c9b0:	089b      	lsrs	r3, r3, #2
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	3305      	adds	r3, #5
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	031b      	lsls	r3, r3, #12
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	68dc      	ldr	r4, [r3, #12]
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	f7f7 ff28 	bl	8004820 <lwip_htons>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	749a      	strb	r2, [r3, #18]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	74da      	strb	r2, [r3, #19]
  return seg;
 800c9e0:	693b      	ldr	r3, [r7, #16]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd90      	pop	{r4, r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	080114bc 	.word	0x080114bc
 800c9f0:	08011538 	.word	0x08011538
 800c9f4:	08011558 	.word	0x08011558
 800c9f8:	08011580 	.word	0x08011580
 800c9fc:	080115a4 	.word	0x080115a4

0800ca00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ca00:	b590      	push	{r4, r7, lr}
 800ca02:	b08b      	sub	sp, #44	; 0x2c
 800ca04:	af02      	add	r7, sp, #8
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	61fb      	str	r3, [r7, #28]
 800ca10:	2300      	movs	r3, #0
 800ca12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d106      	bne.n	800ca2c <tcp_split_unsent_seg+0x2c>
 800ca1e:	4b95      	ldr	r3, [pc, #596]	; (800cc74 <tcp_split_unsent_seg+0x274>)
 800ca20:	f240 324b 	movw	r2, #843	; 0x34b
 800ca24:	4994      	ldr	r1, [pc, #592]	; (800cc78 <tcp_split_unsent_seg+0x278>)
 800ca26:	4895      	ldr	r0, [pc, #596]	; (800cc7c <tcp_split_unsent_seg+0x27c>)
 800ca28:	f001 fdea 	bl	800e600 <iprintf>

  useg = pcb->unsent;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ca38:	f04f 33ff 	mov.w	r3, #4294967295
 800ca3c:	e116      	b.n	800cc6c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ca3e:	887b      	ldrh	r3, [r7, #2]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d109      	bne.n	800ca58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca44:	4b8b      	ldr	r3, [pc, #556]	; (800cc74 <tcp_split_unsent_seg+0x274>)
 800ca46:	f240 3253 	movw	r2, #851	; 0x353
 800ca4a:	498d      	ldr	r1, [pc, #564]	; (800cc80 <tcp_split_unsent_seg+0x280>)
 800ca4c:	488b      	ldr	r0, [pc, #556]	; (800cc7c <tcp_split_unsent_seg+0x27c>)
 800ca4e:	f001 fdd7 	bl	800e600 <iprintf>
    return ERR_VAL;
 800ca52:	f06f 0305 	mvn.w	r3, #5
 800ca56:	e109      	b.n	800cc6c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	891b      	ldrh	r3, [r3, #8]
 800ca5c:	887a      	ldrh	r2, [r7, #2]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d301      	bcc.n	800ca66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	e102      	b.n	800cc6c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca6a:	887a      	ldrh	r2, [r7, #2]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d906      	bls.n	800ca7e <tcp_split_unsent_seg+0x7e>
 800ca70:	4b80      	ldr	r3, [pc, #512]	; (800cc74 <tcp_split_unsent_seg+0x274>)
 800ca72:	f240 325b 	movw	r2, #859	; 0x35b
 800ca76:	4983      	ldr	r1, [pc, #524]	; (800cc84 <tcp_split_unsent_seg+0x284>)
 800ca78:	4880      	ldr	r0, [pc, #512]	; (800cc7c <tcp_split_unsent_seg+0x27c>)
 800ca7a:	f001 fdc1 	bl	800e600 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	891b      	ldrh	r3, [r3, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d106      	bne.n	800ca94 <tcp_split_unsent_seg+0x94>
 800ca86:	4b7b      	ldr	r3, [pc, #492]	; (800cc74 <tcp_split_unsent_seg+0x274>)
 800ca88:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ca8c:	497e      	ldr	r1, [pc, #504]	; (800cc88 <tcp_split_unsent_seg+0x288>)
 800ca8e:	487b      	ldr	r0, [pc, #492]	; (800cc7c <tcp_split_unsent_seg+0x27c>)
 800ca90:	f001 fdb6 	bl	800e600 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	7a9b      	ldrb	r3, [r3, #10]
 800ca98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f003 0304 	and.w	r3, r3, #4
 800caa4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	891a      	ldrh	r2, [r3, #8]
 800caaa:	887b      	ldrh	r3, [r7, #2]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	89bb      	ldrh	r3, [r7, #12]
 800cab6:	4413      	add	r3, r2
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cabe:	4619      	mov	r1, r3
 800cac0:	2036      	movs	r0, #54	; 0x36
 800cac2:	f7fb facb 	bl	800805c <pbuf_alloc>
 800cac6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 80b7 	beq.w	800cc3e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	891a      	ldrh	r2, [r3, #8]
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	891b      	ldrh	r3, [r3, #8]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	b29a      	uxth	r2, r3
 800cade:	887b      	ldrh	r3, [r7, #2]
 800cae0:	4413      	add	r3, r2
 800cae2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	6858      	ldr	r0, [r3, #4]
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	18d1      	adds	r1, r2, r3
 800caf0:	897b      	ldrh	r3, [r7, #10]
 800caf2:	89ba      	ldrh	r2, [r7, #12]
 800caf4:	f7fb ff80 	bl	80089f8 <pbuf_copy_partial>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	89bb      	ldrh	r3, [r7, #12]
 800cafe:	4293      	cmp	r3, r2
 800cb00:	f040 809f 	bne.w	800cc42 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	899b      	ldrh	r3, [r3, #12]
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7f7 fe87 	bl	8004820 <lwip_htons>
 800cb12:	4603      	mov	r3, r0
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb1a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cb20:	7efb      	ldrb	r3, [r7, #27]
 800cb22:	f003 0308 	and.w	r3, r3, #8
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d007      	beq.n	800cb3a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cb2a:	7efb      	ldrb	r3, [r7, #27]
 800cb2c:	f023 0308 	bic.w	r3, r3, #8
 800cb30:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cb32:	7ebb      	ldrb	r3, [r7, #26]
 800cb34:	f043 0308 	orr.w	r3, r3, #8
 800cb38:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cb3a:	7efb      	ldrb	r3, [r7, #27]
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d007      	beq.n	800cb54 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cb44:	7efb      	ldrb	r3, [r7, #27]
 800cb46:	f023 0301 	bic.w	r3, r3, #1
 800cb4a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cb4c:	7ebb      	ldrb	r3, [r7, #26]
 800cb4e:	f043 0301 	orr.w	r3, r3, #1
 800cb52:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7f7 fe75 	bl	800484a <lwip_htonl>
 800cb60:	4602      	mov	r2, r0
 800cb62:	887b      	ldrh	r3, [r7, #2]
 800cb64:	18d1      	adds	r1, r2, r3
 800cb66:	7eba      	ldrb	r2, [r7, #26]
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	6939      	ldr	r1, [r7, #16]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff fea7 	bl	800c8c4 <tcp_create_segment>
 800cb76:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d063      	beq.n	800cc46 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fb fdd6 	bl	8008734 <pbuf_clen>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	6858      	ldr	r0, [r3, #4]
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	891a      	ldrh	r2, [r3, #8]
 800cba6:	89bb      	ldrh	r3, [r7, #12]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4619      	mov	r1, r3
 800cbae:	f7fb fbb3 	bl	8008318 <pbuf_realloc>
  useg->len -= remainder;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	891a      	ldrh	r2, [r3, #8]
 800cbb6:	89bb      	ldrh	r3, [r7, #12]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	899b      	ldrh	r3, [r3, #12]
 800cbc6:	b29c      	uxth	r4, r3
 800cbc8:	7efb      	ldrb	r3, [r7, #27]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7f7 fe27 	bl	8004820 <lwip_htons>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	4322      	orrs	r2, r4
 800cbdc:	b292      	uxth	r2, r2
 800cbde:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fb fda5 	bl	8008734 <pbuf_clen>
 800cbea:	4603      	mov	r3, r0
 800cbec:	461a      	mov	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbf4:	4413      	add	r3, r2
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fb fd96 	bl	8008734 <pbuf_clen>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc12:	4413      	add	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d103      	bne.n	800cc3a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e016      	b.n	800cc6c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cc3e:	bf00      	nop
 800cc40:	e002      	b.n	800cc48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc42:	bf00      	nop
 800cc44:	e000      	b.n	800cc48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cc46:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <tcp_split_unsent_seg+0x25c>
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <tcp_split_unsent_seg+0x274>)
 800cc50:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cc54:	490d      	ldr	r1, [pc, #52]	; (800cc8c <tcp_split_unsent_seg+0x28c>)
 800cc56:	4809      	ldr	r0, [pc, #36]	; (800cc7c <tcp_split_unsent_seg+0x27c>)
 800cc58:	f001 fcd2 	bl	800e600 <iprintf>
  if (p != NULL) {
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f7fb fcde 	bl	8008624 <pbuf_free>
  }

  return ERR_MEM;
 800cc68:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3724      	adds	r7, #36	; 0x24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd90      	pop	{r4, r7, pc}
 800cc74:	080114bc 	.word	0x080114bc
 800cc78:	08011898 	.word	0x08011898
 800cc7c:	08011558 	.word	0x08011558
 800cc80:	080118bc 	.word	0x080118bc
 800cc84:	080118e0 	.word	0x080118e0
 800cc88:	080118f0 	.word	0x080118f0
 800cc8c:	08011900 	.word	0x08011900

0800cc90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cc90:	b590      	push	{r4, r7, lr}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <tcp_send_fin+0x1c>
 800cc9e:	4b21      	ldr	r3, [pc, #132]	; (800cd24 <tcp_send_fin+0x94>)
 800cca0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cca4:	4920      	ldr	r1, [pc, #128]	; (800cd28 <tcp_send_fin+0x98>)
 800cca6:	4821      	ldr	r0, [pc, #132]	; (800cd2c <tcp_send_fin+0x9c>)
 800cca8:	f001 fcaa 	bl	800e600 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d02e      	beq.n	800cd12 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb8:	60fb      	str	r3, [r7, #12]
 800ccba:	e002      	b.n	800ccc2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1f8      	bne.n	800ccbc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	899b      	ldrh	r3, [r3, #12]
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7f7 fda4 	bl	8004820 <lwip_htons>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 0307 	and.w	r3, r3, #7
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d116      	bne.n	800cd12 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	899b      	ldrh	r3, [r3, #12]
 800ccea:	b29c      	uxth	r4, r3
 800ccec:	2001      	movs	r0, #1
 800ccee:	f7f7 fd97 	bl	8004820 <lwip_htons>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	4322      	orrs	r2, r4
 800ccfc:	b292      	uxth	r2, r2
 800ccfe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8b5b      	ldrh	r3, [r3, #26]
 800cd04:	f043 0320 	orr.w	r3, r3, #32
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e004      	b.n	800cd1c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd12:	2101      	movs	r1, #1
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f80b 	bl	800cd30 <tcp_enqueue_flags>
 800cd1a:	4603      	mov	r3, r0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd90      	pop	{r4, r7, pc}
 800cd24:	080114bc 	.word	0x080114bc
 800cd28:	0801190c 	.word	0x0801190c
 800cd2c:	08011558 	.word	0x08011558

0800cd30 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b08a      	sub	sp, #40	; 0x28
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	f003 0303 	and.w	r3, r3, #3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <tcp_enqueue_flags+0x2c>
 800cd4e:	4b67      	ldr	r3, [pc, #412]	; (800ceec <tcp_enqueue_flags+0x1bc>)
 800cd50:	f240 4211 	movw	r2, #1041	; 0x411
 800cd54:	4966      	ldr	r1, [pc, #408]	; (800cef0 <tcp_enqueue_flags+0x1c0>)
 800cd56:	4867      	ldr	r0, [pc, #412]	; (800cef4 <tcp_enqueue_flags+0x1c4>)
 800cd58:	f001 fc52 	bl	800e600 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d106      	bne.n	800cd70 <tcp_enqueue_flags+0x40>
 800cd62:	4b62      	ldr	r3, [pc, #392]	; (800ceec <tcp_enqueue_flags+0x1bc>)
 800cd64:	f240 4213 	movw	r2, #1043	; 0x413
 800cd68:	4963      	ldr	r1, [pc, #396]	; (800cef8 <tcp_enqueue_flags+0x1c8>)
 800cd6a:	4862      	ldr	r0, [pc, #392]	; (800cef4 <tcp_enqueue_flags+0x1c4>)
 800cd6c:	f001 fc48 	bl	800e600 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 0302 	and.w	r3, r3, #2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cd7e:	7ffb      	ldrb	r3, [r7, #31]
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd92:	4619      	mov	r1, r3
 800cd94:	2036      	movs	r0, #54	; 0x36
 800cd96:	f7fb f961 	bl	800805c <pbuf_alloc>
 800cd9a:	6138      	str	r0, [r7, #16]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d109      	bne.n	800cdb6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	8b5b      	ldrh	r3, [r3, #26]
 800cda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb4:	e095      	b.n	800cee2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	895a      	ldrh	r2, [r3, #10]
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d206      	bcs.n	800cdd0 <tcp_enqueue_flags+0xa0>
 800cdc2:	4b4a      	ldr	r3, [pc, #296]	; (800ceec <tcp_enqueue_flags+0x1bc>)
 800cdc4:	f240 4239 	movw	r2, #1081	; 0x439
 800cdc8:	494c      	ldr	r1, [pc, #304]	; (800cefc <tcp_enqueue_flags+0x1cc>)
 800cdca:	484a      	ldr	r0, [pc, #296]	; (800cef4 <tcp_enqueue_flags+0x1c4>)
 800cdcc:	f001 fc18 	bl	800e600 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cdd4:	78fa      	ldrb	r2, [r7, #3]
 800cdd6:	7ffb      	ldrb	r3, [r7, #31]
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	460b      	mov	r3, r1
 800cddc:	6939      	ldr	r1, [r7, #16]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fd70 	bl	800c8c4 <tcp_create_segment>
 800cde4:	60f8      	str	r0, [r7, #12]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d109      	bne.n	800ce00 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	8b5b      	ldrh	r3, [r3, #26]
 800cdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfe:	e070      	b.n	800cee2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	f003 0303 	and.w	r3, r3, #3
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d006      	beq.n	800ce1a <tcp_enqueue_flags+0xea>
 800ce0c:	4b37      	ldr	r3, [pc, #220]	; (800ceec <tcp_enqueue_flags+0x1bc>)
 800ce0e:	f240 4242 	movw	r2, #1090	; 0x442
 800ce12:	493b      	ldr	r1, [pc, #236]	; (800cf00 <tcp_enqueue_flags+0x1d0>)
 800ce14:	4837      	ldr	r0, [pc, #220]	; (800cef4 <tcp_enqueue_flags+0x1c4>)
 800ce16:	f001 fbf3 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	891b      	ldrh	r3, [r3, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d006      	beq.n	800ce30 <tcp_enqueue_flags+0x100>
 800ce22:	4b32      	ldr	r3, [pc, #200]	; (800ceec <tcp_enqueue_flags+0x1bc>)
 800ce24:	f240 4243 	movw	r2, #1091	; 0x443
 800ce28:	4936      	ldr	r1, [pc, #216]	; (800cf04 <tcp_enqueue_flags+0x1d4>)
 800ce2a:	4832      	ldr	r0, [pc, #200]	; (800cef4 <tcp_enqueue_flags+0x1c4>)
 800ce2c:	f001 fbe8 	bl	800e600 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d103      	bne.n	800ce40 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ce3e:	e00d      	b.n	800ce5c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce44:	61bb      	str	r3, [r7, #24]
 800ce46:	e002      	b.n	800ce4e <tcp_enqueue_flags+0x11e>
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	61bb      	str	r3, [r7, #24]
 800ce4e:	69bb      	ldr	r3, [r7, #24]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1f8      	bne.n	800ce48 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	f003 0302 	and.w	r3, r3, #2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d104      	bne.n	800ce78 <tcp_enqueue_flags+0x148>
 800ce6e:	78fb      	ldrb	r3, [r7, #3]
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d004      	beq.n	800ce82 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce7c:	1c5a      	adds	r2, r3, #1
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d006      	beq.n	800ce9a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	8b5b      	ldrh	r3, [r3, #26]
 800ce90:	f043 0320 	orr.w	r3, r3, #32
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fb fc48 	bl	8008734 <pbuf_clen>
 800cea4:	4603      	mov	r3, r0
 800cea6:	461a      	mov	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ceae:	4413      	add	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00e      	beq.n	800cee0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <tcp_enqueue_flags+0x1b0>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <tcp_enqueue_flags+0x1b0>
 800ced2:	4b06      	ldr	r3, [pc, #24]	; (800ceec <tcp_enqueue_flags+0x1bc>)
 800ced4:	f240 4265 	movw	r2, #1125	; 0x465
 800ced8:	490b      	ldr	r1, [pc, #44]	; (800cf08 <tcp_enqueue_flags+0x1d8>)
 800ceda:	4806      	ldr	r0, [pc, #24]	; (800cef4 <tcp_enqueue_flags+0x1c4>)
 800cedc:	f001 fb90 	bl	800e600 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3720      	adds	r7, #32
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	080114bc 	.word	0x080114bc
 800cef0:	08011928 	.word	0x08011928
 800cef4:	08011558 	.word	0x08011558
 800cef8:	08011980 	.word	0x08011980
 800cefc:	080119a0 	.word	0x080119a0
 800cf00:	080119dc 	.word	0x080119dc
 800cf04:	080119f4 	.word	0x080119f4
 800cf08:	08011a20 	.word	0x08011a20

0800cf0c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cf0c:	b5b0      	push	{r4, r5, r7, lr}
 800cf0e:	b08a      	sub	sp, #40	; 0x28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <tcp_output+0x1c>
 800cf1a:	4b8a      	ldr	r3, [pc, #552]	; (800d144 <tcp_output+0x238>)
 800cf1c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cf20:	4989      	ldr	r1, [pc, #548]	; (800d148 <tcp_output+0x23c>)
 800cf22:	488a      	ldr	r0, [pc, #552]	; (800d14c <tcp_output+0x240>)
 800cf24:	f001 fb6c 	bl	800e600 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	7d1b      	ldrb	r3, [r3, #20]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d106      	bne.n	800cf3e <tcp_output+0x32>
 800cf30:	4b84      	ldr	r3, [pc, #528]	; (800d144 <tcp_output+0x238>)
 800cf32:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cf36:	4986      	ldr	r1, [pc, #536]	; (800d150 <tcp_output+0x244>)
 800cf38:	4884      	ldr	r0, [pc, #528]	; (800d14c <tcp_output+0x240>)
 800cf3a:	f001 fb61 	bl	800e600 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cf3e:	4b85      	ldr	r3, [pc, #532]	; (800d154 <tcp_output+0x248>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d101      	bne.n	800cf4c <tcp_output+0x40>
    return ERR_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e1ce      	b.n	800d2ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	bf28      	it	cs
 800cf5c:	4613      	movcs	r3, r2
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf66:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10b      	bne.n	800cf86 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	8b5b      	ldrh	r3, [r3, #26]
 800cf72:	f003 0302 	and.w	r3, r3, #2
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f000 81aa 	beq.w	800d2d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fdcb 	bl	800db18 <tcp_send_empty_ack>
 800cf82:	4603      	mov	r3, r0
 800cf84:	e1b1      	b.n	800d2ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fc7c 	bl	800c88c <tcp_route>
 800cf94:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <tcp_output+0x96>
    return ERR_RTE;
 800cf9c:	f06f 0303 	mvn.w	r3, #3
 800cfa0:	e1a3      	b.n	800d2ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d003      	beq.n	800cfb0 <tcp_output+0xa4>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d111      	bne.n	800cfd4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <tcp_output+0xb0>
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	e000      	b.n	800cfbe <tcp_output+0xb2>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d102      	bne.n	800cfcc <tcp_output+0xc0>
      return ERR_RTE;
 800cfc6:	f06f 0303 	mvn.w	r3, #3
 800cfca:	e18e      	b.n	800d2ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f7 fc35 	bl	800484a <lwip_htonl>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfea:	8912      	ldrh	r2, [r2, #8]
 800cfec:	4413      	add	r3, r2
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d227      	bcs.n	800d044 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cffa:	461a      	mov	r2, r3
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	4293      	cmp	r3, r2
 800d000:	d114      	bne.n	800d02c <tcp_output+0x120>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d006:	2b00      	cmp	r3, #0
 800d008:	d110      	bne.n	800d02c <tcp_output+0x120>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10b      	bne.n	800d02c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	8b5b      	ldrh	r3, [r3, #26]
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 814d 	beq.w	800d2d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fd6c 	bl	800db18 <tcp_send_empty_ack>
 800d040:	4603      	mov	r3, r0
 800d042:	e152      	b.n	800d2ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d050:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 811c 	beq.w	800d292 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d05a:	e002      	b.n	800d062 <tcp_output+0x156>
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	623b      	str	r3, [r7, #32]
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1f8      	bne.n	800d05c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d06a:	e112      	b.n	800d292 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	899b      	ldrh	r3, [r3, #12]
 800d072:	b29b      	uxth	r3, r3
 800d074:	4618      	mov	r0, r3
 800d076:	f7f7 fbd3 	bl	8004820 <lwip_htons>
 800d07a:	4603      	mov	r3, r0
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	2b00      	cmp	r3, #0
 800d084:	d006      	beq.n	800d094 <tcp_output+0x188>
 800d086:	4b2f      	ldr	r3, [pc, #188]	; (800d144 <tcp_output+0x238>)
 800d088:	f240 5236 	movw	r2, #1334	; 0x536
 800d08c:	4932      	ldr	r1, [pc, #200]	; (800d158 <tcp_output+0x24c>)
 800d08e:	482f      	ldr	r0, [pc, #188]	; (800d14c <tcp_output+0x240>)
 800d090:	f001 fab6 	bl	800e600 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d01f      	beq.n	800d0dc <tcp_output+0x1d0>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	8b5b      	ldrh	r3, [r3, #26]
 800d0a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d119      	bne.n	800d0dc <tcp_output+0x1d0>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00b      	beq.n	800d0c8 <tcp_output+0x1bc>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d110      	bne.n	800d0dc <tcp_output+0x1d0>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0be:	891a      	ldrh	r2, [r3, #8]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d209      	bcs.n	800d0dc <tcp_output+0x1d0>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d004      	beq.n	800d0dc <tcp_output+0x1d0>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d901      	bls.n	800d0e0 <tcp_output+0x1d4>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e000      	b.n	800d0e2 <tcp_output+0x1d6>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 80e4 	beq.w	800d2bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	7d1b      	ldrb	r3, [r3, #20]
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d00d      	beq.n	800d118 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	899b      	ldrh	r3, [r3, #12]
 800d102:	b29c      	uxth	r4, r3
 800d104:	2010      	movs	r0, #16
 800d106:	f7f7 fb8b 	bl	8004820 <lwip_htons>
 800d10a:	4603      	mov	r3, r0
 800d10c:	461a      	mov	r2, r3
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	4322      	orrs	r2, r4
 800d114:	b292      	uxth	r2, r2
 800d116:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d11e:	f000 f909 	bl	800d334 <tcp_output_segment>
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d016      	beq.n	800d15c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	8b5b      	ldrh	r3, [r3, #26]
 800d132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d136:	b29a      	uxth	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	835a      	strh	r2, [r3, #26]
      return err;
 800d13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d140:	e0d3      	b.n	800d2ea <tcp_output+0x3de>
 800d142:	bf00      	nop
 800d144:	080114bc 	.word	0x080114bc
 800d148:	08011a48 	.word	0x08011a48
 800d14c:	08011558 	.word	0x08011558
 800d150:	08011a60 	.word	0x08011a60
 800d154:	24007c00 	.word	0x24007c00
 800d158:	08011a88 	.word	0x08011a88
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d006      	beq.n	800d17a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	8b5b      	ldrh	r3, [r3, #26]
 800d170:	f023 0303 	bic.w	r3, r3, #3
 800d174:	b29a      	uxth	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	4618      	mov	r0, r3
 800d182:	f7f7 fb62 	bl	800484a <lwip_htonl>
 800d186:	4604      	mov	r4, r0
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	891b      	ldrh	r3, [r3, #8]
 800d18c:	461d      	mov	r5, r3
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	899b      	ldrh	r3, [r3, #12]
 800d194:	b29b      	uxth	r3, r3
 800d196:	4618      	mov	r0, r3
 800d198:	f7f7 fb42 	bl	8004820 <lwip_htons>
 800d19c:	4603      	mov	r3, r0
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	f003 0303 	and.w	r3, r3, #3
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d001      	beq.n	800d1ac <tcp_output+0x2a0>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <tcp_output+0x2a2>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	442b      	add	r3, r5
 800d1b0:	4423      	add	r3, r4
 800d1b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	da02      	bge.n	800d1c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	891b      	ldrh	r3, [r3, #8]
 800d1ca:	461c      	mov	r4, r3
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	899b      	ldrh	r3, [r3, #12]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f7 fb23 	bl	8004820 <lwip_htons>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	f003 0303 	and.w	r3, r3, #3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <tcp_output+0x2de>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e000      	b.n	800d1ec <tcp_output+0x2e0>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4423      	add	r3, r4
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d049      	beq.n	800d286 <tcp_output+0x37a>
      seg->next = NULL;
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d105      	bne.n	800d20c <tcp_output+0x300>
        pcb->unacked = seg;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d204:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	623b      	str	r3, [r7, #32]
 800d20a:	e03f      	b.n	800d28c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	4618      	mov	r0, r3
 800d214:	f7f7 fb19 	bl	800484a <lwip_htonl>
 800d218:	4604      	mov	r4, r0
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	4618      	mov	r0, r3
 800d222:	f7f7 fb12 	bl	800484a <lwip_htonl>
 800d226:	4603      	mov	r3, r0
 800d228:	1ae3      	subs	r3, r4, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	da24      	bge.n	800d278 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3370      	adds	r3, #112	; 0x70
 800d232:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d234:	e002      	b.n	800d23c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d011      	beq.n	800d268 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7f7 fafc 	bl	800484a <lwip_htonl>
 800d252:	4604      	mov	r4, r0
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f7 faf5 	bl	800484a <lwip_htonl>
 800d260:	4603      	mov	r3, r0
 800d262:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d264:	2b00      	cmp	r3, #0
 800d266:	dbe6      	blt.n	800d236 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d274:	601a      	str	r2, [r3, #0]
 800d276:	e009      	b.n	800d28c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d278:	6a3b      	ldr	r3, [r7, #32]
 800d27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d27c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	623b      	str	r3, [r7, #32]
 800d284:	e002      	b.n	800d28c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d288:	f7fc fc3f 	bl	8009b0a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d012      	beq.n	800d2be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f7 fad3 	bl	800484a <lwip_htonl>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ae:	8912      	ldrh	r2, [r2, #8]
 800d2b0:	4413      	add	r3, r2
  while (seg != NULL &&
 800d2b2:	69ba      	ldr	r2, [r7, #24]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	f4bf aed9 	bcs.w	800d06c <tcp_output+0x160>
 800d2ba:	e000      	b.n	800d2be <tcp_output+0x3b2>
      break;
 800d2bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d108      	bne.n	800d2d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d2ce:	e004      	b.n	800d2da <tcp_output+0x3ce>
    goto output_done;
 800d2d0:	bf00      	nop
 800d2d2:	e002      	b.n	800d2da <tcp_output+0x3ce>
    goto output_done;
 800d2d4:	bf00      	nop
 800d2d6:	e000      	b.n	800d2da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d2d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	8b5b      	ldrh	r3, [r3, #26]
 800d2de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3728      	adds	r7, #40	; 0x28
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800d2f2:	bf00      	nop

0800d2f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d106      	bne.n	800d310 <tcp_output_segment_busy+0x1c>
 800d302:	4b09      	ldr	r3, [pc, #36]	; (800d328 <tcp_output_segment_busy+0x34>)
 800d304:	f240 529a 	movw	r2, #1434	; 0x59a
 800d308:	4908      	ldr	r1, [pc, #32]	; (800d32c <tcp_output_segment_busy+0x38>)
 800d30a:	4809      	ldr	r0, [pc, #36]	; (800d330 <tcp_output_segment_busy+0x3c>)
 800d30c:	f001 f978 	bl	800e600 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	7b9b      	ldrb	r3, [r3, #14]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d001      	beq.n	800d31e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e000      	b.n	800d320 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	080114bc 	.word	0x080114bc
 800d32c:	08011aa0 	.word	0x08011aa0
 800d330:	08011558 	.word	0x08011558

0800d334 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d334:	b5b0      	push	{r4, r5, r7, lr}
 800d336:	b08c      	sub	sp, #48	; 0x30
 800d338:	af04      	add	r7, sp, #16
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <tcp_output_segment+0x20>
 800d346:	4b64      	ldr	r3, [pc, #400]	; (800d4d8 <tcp_output_segment+0x1a4>)
 800d348:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d34c:	4963      	ldr	r1, [pc, #396]	; (800d4dc <tcp_output_segment+0x1a8>)
 800d34e:	4864      	ldr	r0, [pc, #400]	; (800d4e0 <tcp_output_segment+0x1ac>)
 800d350:	f001 f956 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <tcp_output_segment+0x34>
 800d35a:	4b5f      	ldr	r3, [pc, #380]	; (800d4d8 <tcp_output_segment+0x1a4>)
 800d35c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d360:	4960      	ldr	r1, [pc, #384]	; (800d4e4 <tcp_output_segment+0x1b0>)
 800d362:	485f      	ldr	r0, [pc, #380]	; (800d4e0 <tcp_output_segment+0x1ac>)
 800d364:	f001 f94c 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <tcp_output_segment+0x48>
 800d36e:	4b5a      	ldr	r3, [pc, #360]	; (800d4d8 <tcp_output_segment+0x1a4>)
 800d370:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d374:	495c      	ldr	r1, [pc, #368]	; (800d4e8 <tcp_output_segment+0x1b4>)
 800d376:	485a      	ldr	r0, [pc, #360]	; (800d4e0 <tcp_output_segment+0x1ac>)
 800d378:	f001 f942 	bl	800e600 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7ff ffb9 	bl	800d2f4 <tcp_output_segment_busy>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	e0a1      	b.n	800d4d0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	68dc      	ldr	r4, [r3, #12]
 800d394:	4610      	mov	r0, r2
 800d396:	f7f7 fa58 	bl	800484a <lwip_htonl>
 800d39a:	4603      	mov	r3, r0
 800d39c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	68dc      	ldr	r4, [r3, #12]
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	f7f7 fa3a 	bl	8004820 <lwip_htons>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d3b8:	441a      	add	r2, r3
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	3314      	adds	r3, #20
 800d3c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	7a9b      	ldrb	r3, [r3, #10]
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d015      	beq.n	800d3fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d3de:	f7fc fe8b 	bl	800a0f8 <tcp_eff_send_mss_netif>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d3e6:	8b7b      	ldrh	r3, [r7, #26]
 800d3e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f7 fa2c 	bl	800484a <lwip_htonl>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d404:	2b00      	cmp	r3, #0
 800d406:	da02      	bge.n	800d40e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	2200      	movs	r2, #0
 800d40c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d412:	2b00      	cmp	r3, #0
 800d414:	d10c      	bne.n	800d430 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d416:	4b35      	ldr	r3, [pc, #212]	; (800d4ec <tcp_output_segment+0x1b8>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4618      	mov	r0, r3
 800d426:	f7f7 fa10 	bl	800484a <lwip_htonl>
 800d42a:	4602      	mov	r2, r0
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	68da      	ldr	r2, [r3, #12]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	8959      	ldrh	r1, [r3, #10]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	8b3a      	ldrh	r2, [r7, #24]
 800d44a:	1a8a      	subs	r2, r1, r2
 800d44c:	b292      	uxth	r2, r2
 800d44e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	8919      	ldrh	r1, [r3, #8]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	8b3a      	ldrh	r2, [r7, #24]
 800d45c:	1a8a      	subs	r2, r1, r2
 800d45e:	b292      	uxth	r2, r2
 800d460:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	68d2      	ldr	r2, [r2, #12]
 800d46a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	741a      	strb	r2, [r3, #16]
 800d474:	2200      	movs	r2, #0
 800d476:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	68da      	ldr	r2, [r3, #12]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	7a9b      	ldrb	r3, [r3, #10]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <tcp_output_segment+0x158>
 800d488:	2318      	movs	r3, #24
 800d48a:	e000      	b.n	800d48e <tcp_output_segment+0x15a>
 800d48c:	2314      	movs	r3, #20
 800d48e:	4413      	add	r3, r2
 800d490:	69fa      	ldr	r2, [r7, #28]
 800d492:	429a      	cmp	r2, r3
 800d494:	d006      	beq.n	800d4a4 <tcp_output_segment+0x170>
 800d496:	4b10      	ldr	r3, [pc, #64]	; (800d4d8 <tcp_output_segment+0x1a4>)
 800d498:	f240 621c 	movw	r2, #1564	; 0x61c
 800d49c:	4914      	ldr	r1, [pc, #80]	; (800d4f0 <tcp_output_segment+0x1bc>)
 800d49e:	4810      	ldr	r0, [pc, #64]	; (800d4e0 <tcp_output_segment+0x1ac>)
 800d4a0:	f001 f8ae 	bl	800e600 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6858      	ldr	r0, [r3, #4]
 800d4a8:	68b9      	ldr	r1, [r7, #8]
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	1d1c      	adds	r4, r3, #4
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	7add      	ldrb	r5, [r3, #11]
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	7a9b      	ldrb	r3, [r3, #10]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	9202      	str	r2, [sp, #8]
 800d4ba:	2206      	movs	r2, #6
 800d4bc:	9201      	str	r2, [sp, #4]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	462b      	mov	r3, r5
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	f7f8 fe40 	bl	8006148 <ip4_output_if>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d4cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3720      	adds	r7, #32
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d4d8:	080114bc 	.word	0x080114bc
 800d4dc:	08011ac8 	.word	0x08011ac8
 800d4e0:	08011558 	.word	0x08011558
 800d4e4:	08011ae8 	.word	0x08011ae8
 800d4e8:	08011b08 	.word	0x08011b08
 800d4ec:	24007bb4 	.word	0x24007bb4
 800d4f0:	08011b2c 	.word	0x08011b2c

0800d4f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d4f4:	b5b0      	push	{r4, r5, r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <tcp_rexmit_rto_prepare+0x1c>
 800d502:	4b31      	ldr	r3, [pc, #196]	; (800d5c8 <tcp_rexmit_rto_prepare+0xd4>)
 800d504:	f240 6263 	movw	r2, #1635	; 0x663
 800d508:	4930      	ldr	r1, [pc, #192]	; (800d5cc <tcp_rexmit_rto_prepare+0xd8>)
 800d50a:	4831      	ldr	r0, [pc, #196]	; (800d5d0 <tcp_rexmit_rto_prepare+0xdc>)
 800d50c:	f001 f878 	bl	800e600 <iprintf>

  if (pcb->unacked == NULL) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d518:	f06f 0305 	mvn.w	r3, #5
 800d51c:	e050      	b.n	800d5c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	e00b      	b.n	800d53e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff fee4 	bl	800d2f4 <tcp_output_segment_busy>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d532:	f06f 0305 	mvn.w	r3, #5
 800d536:	e043      	b.n	800d5c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1ef      	bne.n	800d526 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f7ff fed4 	bl	800d2f4 <tcp_output_segment_busy>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d552:	f06f 0305 	mvn.w	r3, #5
 800d556:	e033      	b.n	800d5c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8b5b      	ldrh	r3, [r3, #26]
 800d572:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d576:	b29a      	uxth	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	4618      	mov	r0, r3
 800d584:	f7f7 f961 	bl	800484a <lwip_htonl>
 800d588:	4604      	mov	r4, r0
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	891b      	ldrh	r3, [r3, #8]
 800d58e:	461d      	mov	r5, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	899b      	ldrh	r3, [r3, #12]
 800d596:	b29b      	uxth	r3, r3
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f7 f941 	bl	8004820 <lwip_htons>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 0303 	and.w	r3, r3, #3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d001      	beq.n	800d5ae <tcp_rexmit_rto_prepare+0xba>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <tcp_rexmit_rto_prepare+0xbc>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	442b      	add	r3, r5
 800d5b2:	18e2      	adds	r2, r4, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c8:	080114bc 	.word	0x080114bc
 800d5cc:	08011b40 	.word	0x08011b40
 800d5d0:	08011558 	.word	0x08011558

0800d5d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <tcp_rexmit_rto_commit+0x1c>
 800d5e2:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <tcp_rexmit_rto_commit+0x44>)
 800d5e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d5e8:	490c      	ldr	r1, [pc, #48]	; (800d61c <tcp_rexmit_rto_commit+0x48>)
 800d5ea:	480d      	ldr	r0, [pc, #52]	; (800d620 <tcp_rexmit_rto_commit+0x4c>)
 800d5ec:	f001 f808 	bl	800e600 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5f6:	2bff      	cmp	r3, #255	; 0xff
 800d5f8:	d007      	beq.n	800d60a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d600:	3301      	adds	r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7ff fc7e 	bl	800cf0c <tcp_output>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	080114bc 	.word	0x080114bc
 800d61c:	08011b64 	.word	0x08011b64
 800d620:	08011558 	.word	0x08011558

0800d624 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <tcp_rexmit_rto+0x1c>
 800d632:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <tcp_rexmit_rto+0x38>)
 800d634:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d638:	4909      	ldr	r1, [pc, #36]	; (800d660 <tcp_rexmit_rto+0x3c>)
 800d63a:	480a      	ldr	r0, [pc, #40]	; (800d664 <tcp_rexmit_rto+0x40>)
 800d63c:	f000 ffe0 	bl	800e600 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff ff57 	bl	800d4f4 <tcp_rexmit_rto_prepare>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff ffc1 	bl	800d5d4 <tcp_rexmit_rto_commit>
  }
}
 800d652:	bf00      	nop
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	080114bc 	.word	0x080114bc
 800d660:	08011b88 	.word	0x08011b88
 800d664:	08011558 	.word	0x08011558

0800d668 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d668:	b590      	push	{r4, r7, lr}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <tcp_rexmit+0x1c>
 800d676:	4b2f      	ldr	r3, [pc, #188]	; (800d734 <tcp_rexmit+0xcc>)
 800d678:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d67c:	492e      	ldr	r1, [pc, #184]	; (800d738 <tcp_rexmit+0xd0>)
 800d67e:	482f      	ldr	r0, [pc, #188]	; (800d73c <tcp_rexmit+0xd4>)
 800d680:	f000 ffbe 	bl	800e600 <iprintf>

  if (pcb->unacked == NULL) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d68c:	f06f 0305 	mvn.w	r3, #5
 800d690:	e04c      	b.n	800d72c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d696:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d698:	68b8      	ldr	r0, [r7, #8]
 800d69a:	f7ff fe2b 	bl	800d2f4 <tcp_output_segment_busy>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d6a4:	f06f 0305 	mvn.w	r3, #5
 800d6a8:	e040      	b.n	800d72c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	336c      	adds	r3, #108	; 0x6c
 800d6b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6b8:	e002      	b.n	800d6c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d011      	beq.n	800d6ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7f7 f8ba 	bl	800484a <lwip_htonl>
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f7 f8b3 	bl	800484a <lwip_htonl>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	dbe6      	blt.n	800d6ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d103      	bne.n	800d70a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d710:	2bff      	cmp	r3, #255	; 0xff
 800d712:	d007      	beq.n	800d724 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d71a:	3301      	adds	r3, #1
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	bd90      	pop	{r4, r7, pc}
 800d734:	080114bc 	.word	0x080114bc
 800d738:	08011ba4 	.word	0x08011ba4
 800d73c:	08011558 	.word	0x08011558

0800d740 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_rexmit_fast+0x1c>
 800d74e:	4b2a      	ldr	r3, [pc, #168]	; (800d7f8 <tcp_rexmit_fast+0xb8>)
 800d750:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d754:	4929      	ldr	r1, [pc, #164]	; (800d7fc <tcp_rexmit_fast+0xbc>)
 800d756:	482a      	ldr	r0, [pc, #168]	; (800d800 <tcp_rexmit_fast+0xc0>)
 800d758:	f000 ff52 	bl	800e600 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d760:	2b00      	cmp	r3, #0
 800d762:	d045      	beq.n	800d7f0 <tcp_rexmit_fast+0xb0>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	8b5b      	ldrh	r3, [r3, #26]
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d13f      	bne.n	800d7f0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff ff79 	bl	800d668 <tcp_rexmit>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d139      	bne.n	800d7f0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d788:	4293      	cmp	r3, r2
 800d78a:	bf28      	it	cs
 800d78c:	4613      	movcs	r3, r2
 800d78e:	b29b      	uxth	r3, r3
 800d790:	2b00      	cmp	r3, #0
 800d792:	da00      	bge.n	800d796 <tcp_rexmit_fast+0x56>
 800d794:	3301      	adds	r3, #1
 800d796:	105b      	asrs	r3, r3, #1
 800d798:	b29a      	uxth	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ac:	005b      	lsls	r3, r3, #1
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d206      	bcs.n	800d7c0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7b6:	005b      	lsls	r3, r3, #1
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	0049      	lsls	r1, r1, #1
 800d7ce:	440b      	add	r3, r1
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	4413      	add	r3, r2
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	8b5b      	ldrh	r3, [r3, #26]
 800d7e0:	f043 0304 	orr.w	r3, r3, #4
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d7f0:	bf00      	nop
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	080114bc 	.word	0x080114bc
 800d7fc:	08011bbc 	.word	0x08011bbc
 800d800:	08011558 	.word	0x08011558

0800d804 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	607b      	str	r3, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	817b      	strh	r3, [r7, #10]
 800d812:	4613      	mov	r3, r2
 800d814:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d816:	897a      	ldrh	r2, [r7, #10]
 800d818:	893b      	ldrh	r3, [r7, #8]
 800d81a:	4413      	add	r3, r2
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	3314      	adds	r3, #20
 800d820:	b29b      	uxth	r3, r3
 800d822:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d826:	4619      	mov	r1, r3
 800d828:	2022      	movs	r0, #34	; 0x22
 800d82a:	f7fa fc17 	bl	800805c <pbuf_alloc>
 800d82e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d04d      	beq.n	800d8d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d836:	897b      	ldrh	r3, [r7, #10]
 800d838:	3313      	adds	r3, #19
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	8952      	ldrh	r2, [r2, #10]
 800d83e:	4293      	cmp	r3, r2
 800d840:	db06      	blt.n	800d850 <tcp_output_alloc_header_common+0x4c>
 800d842:	4b26      	ldr	r3, [pc, #152]	; (800d8dc <tcp_output_alloc_header_common+0xd8>)
 800d844:	f240 7223 	movw	r2, #1827	; 0x723
 800d848:	4925      	ldr	r1, [pc, #148]	; (800d8e0 <tcp_output_alloc_header_common+0xdc>)
 800d84a:	4826      	ldr	r0, [pc, #152]	; (800d8e4 <tcp_output_alloc_header_common+0xe0>)
 800d84c:	f000 fed8 	bl	800e600 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d856:	8c3b      	ldrh	r3, [r7, #32]
 800d858:	4618      	mov	r0, r3
 800d85a:	f7f6 ffe1 	bl	8004820 <lwip_htons>
 800d85e:	4603      	mov	r3, r0
 800d860:	461a      	mov	r2, r3
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d868:	4618      	mov	r0, r3
 800d86a:	f7f6 ffd9 	bl	8004820 <lwip_htons>
 800d86e:	4603      	mov	r3, r0
 800d870:	461a      	mov	r2, r3
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7f6 ffe4 	bl	800484a <lwip_htonl>
 800d882:	4602      	mov	r2, r0
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d888:	897b      	ldrh	r3, [r7, #10]
 800d88a:	089b      	lsrs	r3, r3, #2
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	3305      	adds	r3, #5
 800d890:	b29b      	uxth	r3, r3
 800d892:	031b      	lsls	r3, r3, #12
 800d894:	b29a      	uxth	r2, r3
 800d896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4313      	orrs	r3, r2
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7f6 ffbd 	bl	8004820 <lwip_htons>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d8ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7f6 ffb5 	bl	8004820 <lwip_htons>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	741a      	strb	r2, [r3, #16]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	749a      	strb	r2, [r3, #18]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d8d2:	697b      	ldr	r3, [r7, #20]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	080114bc 	.word	0x080114bc
 800d8e0:	08011bdc 	.word	0x08011bdc
 800d8e4:	08011558 	.word	0x08011558

0800d8e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d8e8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ea:	b08a      	sub	sp, #40	; 0x28
 800d8ec:	af04      	add	r7, sp, #16
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	607b      	str	r3, [r7, #4]
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	817b      	strh	r3, [r7, #10]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <tcp_output_alloc_header+0x26>
 800d900:	4b15      	ldr	r3, [pc, #84]	; (800d958 <tcp_output_alloc_header+0x70>)
 800d902:	f240 7242 	movw	r2, #1858	; 0x742
 800d906:	4915      	ldr	r1, [pc, #84]	; (800d95c <tcp_output_alloc_header+0x74>)
 800d908:	4815      	ldr	r0, [pc, #84]	; (800d960 <tcp_output_alloc_header+0x78>)
 800d90a:	f000 fe79 	bl	800e600 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	8adb      	ldrh	r3, [r3, #22]
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	8b12      	ldrh	r2, [r2, #24]
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d91e:	893d      	ldrh	r5, [r7, #8]
 800d920:	897c      	ldrh	r4, [r7, #10]
 800d922:	9103      	str	r1, [sp, #12]
 800d924:	2110      	movs	r1, #16
 800d926:	9102      	str	r1, [sp, #8]
 800d928:	9201      	str	r2, [sp, #4]
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	462a      	mov	r2, r5
 800d930:	4621      	mov	r1, r4
 800d932:	f7ff ff67 	bl	800d804 <tcp_output_alloc_header_common>
 800d936:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d946:	441a      	add	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d94c:	697b      	ldr	r3, [r7, #20]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bdb0      	pop	{r4, r5, r7, pc}
 800d956:	bf00      	nop
 800d958:	080114bc 	.word	0x080114bc
 800d95c:	08011c0c 	.word	0x08011c0c
 800d960:	08011558 	.word	0x08011558

0800d964 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b088      	sub	sp, #32
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	4611      	mov	r1, r2
 800d970:	461a      	mov	r2, r3
 800d972:	460b      	mov	r3, r1
 800d974:	71fb      	strb	r3, [r7, #7]
 800d976:	4613      	mov	r3, r2
 800d978:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d106      	bne.n	800d992 <tcp_output_fill_options+0x2e>
 800d984:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <tcp_output_fill_options+0x6c>)
 800d986:	f240 7256 	movw	r2, #1878	; 0x756
 800d98a:	4912      	ldr	r1, [pc, #72]	; (800d9d4 <tcp_output_fill_options+0x70>)
 800d98c:	4812      	ldr	r0, [pc, #72]	; (800d9d8 <tcp_output_fill_options+0x74>)
 800d98e:	f000 fe37 	bl	800e600 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	3314      	adds	r3, #20
 800d99c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d99e:	8bfb      	ldrh	r3, [r7, #30]
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	4413      	add	r3, r2
 800d9ae:	3314      	adds	r3, #20
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	697a      	ldr	r2, [r7, #20]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d006      	beq.n	800d9c8 <tcp_output_fill_options+0x64>
 800d9ba:	4b05      	ldr	r3, [pc, #20]	; (800d9d0 <tcp_output_fill_options+0x6c>)
 800d9bc:	f240 7275 	movw	r2, #1909	; 0x775
 800d9c0:	4906      	ldr	r1, [pc, #24]	; (800d9dc <tcp_output_fill_options+0x78>)
 800d9c2:	4805      	ldr	r0, [pc, #20]	; (800d9d8 <tcp_output_fill_options+0x74>)
 800d9c4:	f000 fe1c 	bl	800e600 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d9c8:	bf00      	nop
 800d9ca:	3720      	adds	r7, #32
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	080114bc 	.word	0x080114bc
 800d9d4:	08011c34 	.word	0x08011c34
 800d9d8:	08011558 	.word	0x08011558
 800d9dc:	08011b2c 	.word	0x08011b2c

0800d9e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08a      	sub	sp, #40	; 0x28
 800d9e4:	af04      	add	r7, sp, #16
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
 800d9ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d106      	bne.n	800da02 <tcp_output_control_segment+0x22>
 800d9f4:	4b1c      	ldr	r3, [pc, #112]	; (800da68 <tcp_output_control_segment+0x88>)
 800d9f6:	f240 7287 	movw	r2, #1927	; 0x787
 800d9fa:	491c      	ldr	r1, [pc, #112]	; (800da6c <tcp_output_control_segment+0x8c>)
 800d9fc:	481c      	ldr	r0, [pc, #112]	; (800da70 <tcp_output_control_segment+0x90>)
 800d9fe:	f000 fdff 	bl	800e600 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	6879      	ldr	r1, [r7, #4]
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7fe ff40 	bl	800c88c <tcp_route>
 800da0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800da14:	23fc      	movs	r3, #252	; 0xfc
 800da16:	75fb      	strb	r3, [r7, #23]
 800da18:	e01c      	b.n	800da54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d006      	beq.n	800da2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	7adb      	ldrb	r3, [r3, #11]
 800da24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	7a9b      	ldrb	r3, [r3, #10]
 800da2a:	757b      	strb	r3, [r7, #21]
 800da2c:	e003      	b.n	800da36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800da2e:	23ff      	movs	r3, #255	; 0xff
 800da30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800da36:	7dba      	ldrb	r2, [r7, #22]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	9302      	str	r3, [sp, #8]
 800da3c:	2306      	movs	r3, #6
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	7d7b      	ldrb	r3, [r7, #21]
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	4613      	mov	r3, r2
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	6879      	ldr	r1, [r7, #4]
 800da4a:	68b8      	ldr	r0, [r7, #8]
 800da4c:	f7f8 fb7c 	bl	8006148 <ip4_output_if>
 800da50:	4603      	mov	r3, r0
 800da52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800da54:	68b8      	ldr	r0, [r7, #8]
 800da56:	f7fa fde5 	bl	8008624 <pbuf_free>
  return err;
 800da5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	080114bc 	.word	0x080114bc
 800da6c:	08011c5c 	.word	0x08011c5c
 800da70:	08011558 	.word	0x08011558

0800da74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800da74:	b590      	push	{r4, r7, lr}
 800da76:	b08b      	sub	sp, #44	; 0x2c
 800da78:	af04      	add	r7, sp, #16
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
 800da80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <tcp_rst+0x22>
 800da88:	4b1f      	ldr	r3, [pc, #124]	; (800db08 <tcp_rst+0x94>)
 800da8a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800da8e:	491f      	ldr	r1, [pc, #124]	; (800db0c <tcp_rst+0x98>)
 800da90:	481f      	ldr	r0, [pc, #124]	; (800db10 <tcp_rst+0x9c>)
 800da92:	f000 fdb5 	bl	800e600 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800da96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <tcp_rst+0x36>
 800da9c:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <tcp_rst+0x94>)
 800da9e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800daa2:	491c      	ldr	r1, [pc, #112]	; (800db14 <tcp_rst+0xa0>)
 800daa4:	481a      	ldr	r0, [pc, #104]	; (800db10 <tcp_rst+0x9c>)
 800daa6:	f000 fdab 	bl	800e600 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800daaa:	2300      	movs	r3, #0
 800daac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800daae:	f246 0308 	movw	r3, #24584	; 0x6008
 800dab2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
 800dab6:	b29c      	uxth	r4, r3
 800dab8:	68b8      	ldr	r0, [r7, #8]
 800daba:	f7f6 fec6 	bl	800484a <lwip_htonl>
 800dabe:	4602      	mov	r2, r0
 800dac0:	8abb      	ldrh	r3, [r7, #20]
 800dac2:	9303      	str	r3, [sp, #12]
 800dac4:	2314      	movs	r3, #20
 800dac6:	9302      	str	r3, [sp, #8]
 800dac8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800daca:	9301      	str	r3, [sp, #4]
 800dacc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	4613      	mov	r3, r2
 800dad2:	2200      	movs	r2, #0
 800dad4:	4621      	mov	r1, r4
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fe94 	bl	800d804 <tcp_output_alloc_header_common>
 800dadc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00c      	beq.n	800dafe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dae4:	7dfb      	ldrb	r3, [r7, #23]
 800dae6:	2200      	movs	r2, #0
 800dae8:	6939      	ldr	r1, [r7, #16]
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f7ff ff3a 	bl	800d964 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	683a      	ldr	r2, [r7, #0]
 800daf4:	6939      	ldr	r1, [r7, #16]
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7ff ff72 	bl	800d9e0 <tcp_output_control_segment>
 800dafc:	e000      	b.n	800db00 <tcp_rst+0x8c>
    return;
 800dafe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd90      	pop	{r4, r7, pc}
 800db06:	bf00      	nop
 800db08:	080114bc 	.word	0x080114bc
 800db0c:	08011c88 	.word	0x08011c88
 800db10:	08011558 	.word	0x08011558
 800db14:	08011ca4 	.word	0x08011ca4

0800db18 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800db18:	b590      	push	{r4, r7, lr}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <tcp_send_empty_ack+0x24>
 800db2e:	4b28      	ldr	r3, [pc, #160]	; (800dbd0 <tcp_send_empty_ack+0xb8>)
 800db30:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800db34:	4927      	ldr	r1, [pc, #156]	; (800dbd4 <tcp_send_empty_ack+0xbc>)
 800db36:	4828      	ldr	r0, [pc, #160]	; (800dbd8 <tcp_send_empty_ack+0xc0>)
 800db38:	f000 fd62 	bl	800e600 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 0304 	and.w	r3, r3, #4
 800db46:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800db48:	7d7b      	ldrb	r3, [r7, #21]
 800db4a:	b29c      	uxth	r4, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db50:	4618      	mov	r0, r3
 800db52:	f7f6 fe7a 	bl	800484a <lwip_htonl>
 800db56:	4603      	mov	r3, r0
 800db58:	2200      	movs	r2, #0
 800db5a:	4621      	mov	r1, r4
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff fec3 	bl	800d8e8 <tcp_output_alloc_header>
 800db62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d109      	bne.n	800db7e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8b5b      	ldrh	r3, [r3, #26]
 800db6e:	f043 0303 	orr.w	r3, r3, #3
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800db78:	f06f 0301 	mvn.w	r3, #1
 800db7c:	e023      	b.n	800dbc6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800db7e:	7dbb      	ldrb	r3, [r7, #22]
 800db80:	7dfa      	ldrb	r2, [r7, #23]
 800db82:	6939      	ldr	r1, [r7, #16]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff feed 	bl	800d964 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	3304      	adds	r3, #4
 800db90:	6939      	ldr	r1, [r7, #16]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff ff24 	bl	800d9e0 <tcp_output_control_segment>
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800db9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d007      	beq.n	800dbb4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8b5b      	ldrh	r3, [r3, #26]
 800dba8:	f043 0303 	orr.w	r3, r3, #3
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	835a      	strh	r2, [r3, #26]
 800dbb2:	e006      	b.n	800dbc2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	8b5b      	ldrh	r3, [r3, #26]
 800dbb8:	f023 0303 	bic.w	r3, r3, #3
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dbc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	371c      	adds	r7, #28
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd90      	pop	{r4, r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	080114bc 	.word	0x080114bc
 800dbd4:	08011cc0 	.word	0x08011cc0
 800dbd8:	08011558 	.word	0x08011558

0800dbdc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dbdc:	b590      	push	{r4, r7, lr}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <tcp_keepalive+0x20>
 800dbee:	4b18      	ldr	r3, [pc, #96]	; (800dc50 <tcp_keepalive+0x74>)
 800dbf0:	f640 0224 	movw	r2, #2084	; 0x824
 800dbf4:	4917      	ldr	r1, [pc, #92]	; (800dc54 <tcp_keepalive+0x78>)
 800dbf6:	4818      	ldr	r0, [pc, #96]	; (800dc58 <tcp_keepalive+0x7c>)
 800dbf8:	f000 fd02 	bl	800e600 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dbfc:	7dfb      	ldrb	r3, [r7, #23]
 800dbfe:	b29c      	uxth	r4, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc04:	3b01      	subs	r3, #1
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7f6 fe1f 	bl	800484a <lwip_htonl>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2200      	movs	r2, #0
 800dc10:	4621      	mov	r1, r4
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff fe68 	bl	800d8e8 <tcp_output_alloc_header>
 800dc18:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d102      	bne.n	800dc26 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	e010      	b.n	800dc48 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	6939      	ldr	r1, [r7, #16]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff fe99 	bl	800d964 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	3304      	adds	r3, #4
 800dc38:	6939      	ldr	r1, [r7, #16]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff fed0 	bl	800d9e0 <tcp_output_control_segment>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	371c      	adds	r7, #28
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd90      	pop	{r4, r7, pc}
 800dc50:	080114bc 	.word	0x080114bc
 800dc54:	08011ce0 	.word	0x08011ce0
 800dc58:	08011558 	.word	0x08011558

0800dc5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b08b      	sub	sp, #44	; 0x2c
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc64:	2300      	movs	r3, #0
 800dc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d106      	bne.n	800dc7e <tcp_zero_window_probe+0x22>
 800dc70:	4b4c      	ldr	r3, [pc, #304]	; (800dda4 <tcp_zero_window_probe+0x148>)
 800dc72:	f640 024f 	movw	r2, #2127	; 0x84f
 800dc76:	494c      	ldr	r1, [pc, #304]	; (800dda8 <tcp_zero_window_probe+0x14c>)
 800dc78:	484c      	ldr	r0, [pc, #304]	; (800ddac <tcp_zero_window_probe+0x150>)
 800dc7a:	f000 fcc1 	bl	800e600 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc82:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	e086      	b.n	800dd9c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dc94:	2bff      	cmp	r3, #255	; 0xff
 800dc96:	d007      	beq.n	800dca8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dc9e:	3301      	adds	r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	899b      	ldrh	r3, [r3, #12]
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7f6 fdb5 	bl	8004820 <lwip_htons>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f003 0301 	and.w	r3, r3, #1
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d005      	beq.n	800dcce <tcp_zero_window_probe+0x72>
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	891b      	ldrh	r3, [r3, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d101      	bne.n	800dcce <tcp_zero_window_probe+0x72>
 800dcca:	2301      	movs	r3, #1
 800dccc:	e000      	b.n	800dcd0 <tcp_zero_window_probe+0x74>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dcd2:	7ffb      	ldrb	r3, [r7, #31]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	bf0c      	ite	eq
 800dcd8:	2301      	moveq	r3, #1
 800dcda:	2300      	movne	r3, #0
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce4:	b299      	uxth	r1, r3
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	8bba      	ldrh	r2, [r7, #28]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fdfa 	bl	800d8e8 <tcp_output_alloc_header>
 800dcf4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d102      	bne.n	800dd02 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dcfc:	f04f 33ff 	mov.w	r3, #4294967295
 800dd00:	e04c      	b.n	800dd9c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dd08:	7ffb      	ldrb	r3, [r7, #31]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d011      	beq.n	800dd32 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	899b      	ldrh	r3, [r3, #12]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	b21b      	sxth	r3, r3
 800dd16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dd1a:	b21c      	sxth	r4, r3
 800dd1c:	2011      	movs	r0, #17
 800dd1e:	f7f6 fd7f 	bl	8004820 <lwip_htons>
 800dd22:	4603      	mov	r3, r0
 800dd24:	b21b      	sxth	r3, r3
 800dd26:	4323      	orrs	r3, r4
 800dd28:	b21b      	sxth	r3, r3
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	819a      	strh	r2, [r3, #12]
 800dd30:	e010      	b.n	800dd54 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	3314      	adds	r3, #20
 800dd38:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	6858      	ldr	r0, [r3, #4]
 800dd3e:	6a3b      	ldr	r3, [r7, #32]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	891a      	ldrh	r2, [r3, #8]
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	891b      	ldrh	r3, [r3, #8]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	6939      	ldr	r1, [r7, #16]
 800dd50:	f7fa fe52 	bl	80089f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f6 fd75 	bl	800484a <lwip_htonl>
 800dd60:	4603      	mov	r3, r0
 800dd62:	3301      	adds	r3, #1
 800dd64:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	da02      	bge.n	800dd78 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	69b9      	ldr	r1, [r7, #24]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff fdef 	bl	800d964 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3304      	adds	r3, #4
 800dd8c:	69b9      	ldr	r1, [r7, #24]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7ff fe26 	bl	800d9e0 <tcp_output_control_segment>
 800dd94:	4603      	mov	r3, r0
 800dd96:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dd98:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	372c      	adds	r7, #44	; 0x2c
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd90      	pop	{r4, r7, pc}
 800dda4:	080114bc 	.word	0x080114bc
 800dda8:	08011cfc 	.word	0x08011cfc
 800ddac:	08011558 	.word	0x08011558

0800ddb0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ddb8:	f7fa ff0c 	bl	8008bd4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ddbc:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <tcpip_tcp_timer+0x38>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d103      	bne.n	800ddcc <tcpip_tcp_timer+0x1c>
 800ddc4:	4b09      	ldr	r3, [pc, #36]	; (800ddec <tcpip_tcp_timer+0x3c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d005      	beq.n	800ddd8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4908      	ldr	r1, [pc, #32]	; (800ddf0 <tcpip_tcp_timer+0x40>)
 800ddd0:	20fa      	movs	r0, #250	; 0xfa
 800ddd2:	f000 f8f3 	bl	800dfbc <sys_timeout>
 800ddd6:	e003      	b.n	800dde0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ddd8:	4b06      	ldr	r3, [pc, #24]	; (800ddf4 <tcpip_tcp_timer+0x44>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]
  }
}
 800ddde:	bf00      	nop
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	24007bc0 	.word	0x24007bc0
 800ddec:	24007bc4 	.word	0x24007bc4
 800ddf0:	0800ddb1 	.word	0x0800ddb1
 800ddf4:	24007c0c 	.word	0x24007c0c

0800ddf8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	; (800de28 <tcp_timer_needed+0x30>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10f      	bne.n	800de24 <tcp_timer_needed+0x2c>
 800de04:	4b09      	ldr	r3, [pc, #36]	; (800de2c <tcp_timer_needed+0x34>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d103      	bne.n	800de14 <tcp_timer_needed+0x1c>
 800de0c:	4b08      	ldr	r3, [pc, #32]	; (800de30 <tcp_timer_needed+0x38>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800de14:	4b04      	ldr	r3, [pc, #16]	; (800de28 <tcp_timer_needed+0x30>)
 800de16:	2201      	movs	r2, #1
 800de18:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de1a:	2200      	movs	r2, #0
 800de1c:	4905      	ldr	r1, [pc, #20]	; (800de34 <tcp_timer_needed+0x3c>)
 800de1e:	20fa      	movs	r0, #250	; 0xfa
 800de20:	f000 f8cc 	bl	800dfbc <sys_timeout>
  }
}
 800de24:	bf00      	nop
 800de26:	bd80      	pop	{r7, pc}
 800de28:	24007c0c 	.word	0x24007c0c
 800de2c:	24007bc0 	.word	0x24007bc0
 800de30:	24007bc4 	.word	0x24007bc4
 800de34:	0800ddb1 	.word	0x0800ddb1

0800de38 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de44:	2006      	movs	r0, #6
 800de46:	f7f9 fd07 	bl	8007858 <memp_malloc>
 800de4a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d151      	bne.n	800defc <sys_timeout_abs+0xc4>
 800de58:	4b2a      	ldr	r3, [pc, #168]	; (800df04 <sys_timeout_abs+0xcc>)
 800de5a:	22be      	movs	r2, #190	; 0xbe
 800de5c:	492a      	ldr	r1, [pc, #168]	; (800df08 <sys_timeout_abs+0xd0>)
 800de5e:	482b      	ldr	r0, [pc, #172]	; (800df0c <sys_timeout_abs+0xd4>)
 800de60:	f000 fbce 	bl	800e600 <iprintf>
    return;
 800de64:	e04a      	b.n	800defc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800de7e:	4b24      	ldr	r3, [pc, #144]	; (800df10 <sys_timeout_abs+0xd8>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d103      	bne.n	800de8e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800de86:	4a22      	ldr	r2, [pc, #136]	; (800df10 <sys_timeout_abs+0xd8>)
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	6013      	str	r3, [r2, #0]
    return;
 800de8c:	e037      	b.n	800defe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	4b1f      	ldr	r3, [pc, #124]	; (800df10 <sys_timeout_abs+0xd8>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	0fdb      	lsrs	r3, r3, #31
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d007      	beq.n	800deb6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dea6:	4b1a      	ldr	r3, [pc, #104]	; (800df10 <sys_timeout_abs+0xd8>)
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800deae:	4a18      	ldr	r2, [pc, #96]	; (800df10 <sys_timeout_abs+0xd8>)
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	6013      	str	r3, [r2, #0]
 800deb4:	e023      	b.n	800defe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800deb6:	4b16      	ldr	r3, [pc, #88]	; (800df10 <sys_timeout_abs+0xd8>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	617b      	str	r3, [r7, #20]
 800debc:	e01a      	b.n	800def4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00b      	beq.n	800dede <sys_timeout_abs+0xa6>
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	685a      	ldr	r2, [r3, #4]
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	0fdb      	lsrs	r3, r3, #31
 800ded4:	f003 0301 	and.w	r3, r3, #1
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d007      	beq.n	800deee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	601a      	str	r2, [r3, #0]
        break;
 800deec:	e007      	b.n	800defe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e1      	bne.n	800debe <sys_timeout_abs+0x86>
 800defa:	e000      	b.n	800defe <sys_timeout_abs+0xc6>
    return;
 800defc:	bf00      	nop
      }
    }
  }
}
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	08011d20 	.word	0x08011d20
 800df08:	08011d9c 	.word	0x08011d9c
 800df0c:	08011ddc 	.word	0x08011ddc
 800df10:	24007c04 	.word	0x24007c04

0800df14 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	4798      	blx	r3

  now = sys_now();
 800df26:	f7f6 fa13 	bl	8004350 <sys_now>
 800df2a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	4b0f      	ldr	r3, [pc, #60]	; (800df70 <lwip_cyclic_timer+0x5c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4413      	add	r3, r2
 800df36:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	0fdb      	lsrs	r3, r3, #31
 800df40:	f003 0301 	and.w	r3, r3, #1
 800df44:	b2db      	uxtb	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	d009      	beq.n	800df5e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	4413      	add	r3, r2
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	4907      	ldr	r1, [pc, #28]	; (800df74 <lwip_cyclic_timer+0x60>)
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff ff6e 	bl	800de38 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800df5c:	e004      	b.n	800df68 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	4904      	ldr	r1, [pc, #16]	; (800df74 <lwip_cyclic_timer+0x60>)
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f7ff ff68 	bl	800de38 <sys_timeout_abs>
}
 800df68:	bf00      	nop
 800df6a:	3718      	adds	r7, #24
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	24007c08 	.word	0x24007c08
 800df74:	0800df15 	.word	0x0800df15

0800df78 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df7e:	2301      	movs	r3, #1
 800df80:	607b      	str	r3, [r7, #4]
 800df82:	e00e      	b.n	800dfa2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800df84:	4a0b      	ldr	r2, [pc, #44]	; (800dfb4 <sys_timeouts_init+0x3c>)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	4a08      	ldr	r2, [pc, #32]	; (800dfb4 <sys_timeouts_init+0x3c>)
 800df92:	4413      	add	r3, r2
 800df94:	461a      	mov	r2, r3
 800df96:	4908      	ldr	r1, [pc, #32]	; (800dfb8 <sys_timeouts_init+0x40>)
 800df98:	f000 f810 	bl	800dfbc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	607b      	str	r3, [r7, #4]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b02      	cmp	r3, #2
 800dfa6:	d9ed      	bls.n	800df84 <sys_timeouts_init+0xc>
  }
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	080122e4 	.word	0x080122e4
 800dfb8:	0800df15 	.word	0x0800df15

0800dfbc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfce:	d306      	bcc.n	800dfde <sys_timeout+0x22>
 800dfd0:	4b0a      	ldr	r3, [pc, #40]	; (800dffc <sys_timeout+0x40>)
 800dfd2:	f240 1229 	movw	r2, #297	; 0x129
 800dfd6:	490a      	ldr	r1, [pc, #40]	; (800e000 <sys_timeout+0x44>)
 800dfd8:	480a      	ldr	r0, [pc, #40]	; (800e004 <sys_timeout+0x48>)
 800dfda:	f000 fb11 	bl	800e600 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dfde:	f7f6 f9b7 	bl	8004350 <sys_now>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	68b9      	ldr	r1, [r7, #8]
 800dfee:	6978      	ldr	r0, [r7, #20]
 800dff0:	f7ff ff22 	bl	800de38 <sys_timeout_abs>
#endif
}
 800dff4:	bf00      	nop
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	08011d20 	.word	0x08011d20
 800e000:	08011e04 	.word	0x08011e04
 800e004:	08011ddc 	.word	0x08011ddc

0800e008 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e00e:	f7f6 f99f 	bl	8004350 <sys_now>
 800e012:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e014:	4b1a      	ldr	r3, [pc, #104]	; (800e080 <sys_check_timeouts+0x78>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <sys_check_timeouts+0x1a>
 800e01e:	f7f9 ffc7 	bl	8007fb0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e022:	4b18      	ldr	r3, [pc, #96]	; (800e084 <sys_check_timeouts+0x7c>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d022      	beq.n	800e074 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	0fdb      	lsrs	r3, r3, #31
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d11a      	bne.n	800e078 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a0f      	ldr	r2, [pc, #60]	; (800e084 <sys_check_timeouts+0x7c>)
 800e048:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	4a0b      	ldr	r2, [pc, #44]	; (800e088 <sys_check_timeouts+0x80>)
 800e05c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e05e:	68b9      	ldr	r1, [r7, #8]
 800e060:	2006      	movs	r0, #6
 800e062:	f7f9 fc69 	bl	8007938 <memp_free>
    if (handler != NULL) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0d3      	beq.n	800e014 <sys_check_timeouts+0xc>
      handler(arg);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6838      	ldr	r0, [r7, #0]
 800e070:	4798      	blx	r3
  do {
 800e072:	e7cf      	b.n	800e014 <sys_check_timeouts+0xc>
      return;
 800e074:	bf00      	nop
 800e076:	e000      	b.n	800e07a <sys_check_timeouts+0x72>
      return;
 800e078:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	24007bb1 	.word	0x24007bb1
 800e084:	24007c04 	.word	0x24007c04
 800e088:	24007c08 	.word	0x24007c08

0800e08c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e090:	f000 f9b6 	bl	800e400 <rand>
 800e094:	4603      	mov	r3, r0
 800e096:	b29b      	uxth	r3, r3
 800e098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	4b01      	ldr	r3, [pc, #4]	; (800e0ac <udp_init+0x20>)
 800e0a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	24000034 	.word	0x24000034

0800e0b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d105      	bne.n	800e0d0 <udp_input_local_match+0x20>
 800e0c4:	4b27      	ldr	r3, [pc, #156]	; (800e164 <udp_input_local_match+0xb4>)
 800e0c6:	2287      	movs	r2, #135	; 0x87
 800e0c8:	4927      	ldr	r1, [pc, #156]	; (800e168 <udp_input_local_match+0xb8>)
 800e0ca:	4828      	ldr	r0, [pc, #160]	; (800e16c <udp_input_local_match+0xbc>)
 800e0cc:	f000 fa98 	bl	800e600 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d105      	bne.n	800e0e2 <udp_input_local_match+0x32>
 800e0d6:	4b23      	ldr	r3, [pc, #140]	; (800e164 <udp_input_local_match+0xb4>)
 800e0d8:	2288      	movs	r2, #136	; 0x88
 800e0da:	4925      	ldr	r1, [pc, #148]	; (800e170 <udp_input_local_match+0xc0>)
 800e0dc:	4823      	ldr	r0, [pc, #140]	; (800e16c <udp_input_local_match+0xbc>)
 800e0de:	f000 fa8f 	bl	800e600 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	7a1b      	ldrb	r3, [r3, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00b      	beq.n	800e102 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	7a1a      	ldrb	r2, [r3, #8]
 800e0ee:	4b21      	ldr	r3, [pc, #132]	; (800e174 <udp_input_local_match+0xc4>)
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d001      	beq.n	800e102 <udp_input_local_match+0x52>
    return 0;
 800e0fe:	2300      	movs	r3, #0
 800e100:	e02b      	b.n	800e15a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d018      	beq.n	800e13a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d013      	beq.n	800e136 <udp_input_local_match+0x86>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00f      	beq.n	800e136 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e116:	4b17      	ldr	r3, [pc, #92]	; (800e174 <udp_input_local_match+0xc4>)
 800e118:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11e:	d00a      	beq.n	800e136 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	4b13      	ldr	r3, [pc, #76]	; (800e174 <udp_input_local_match+0xc4>)
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	405a      	eors	r2, r3
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	3308      	adds	r3, #8
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e132:	2b00      	cmp	r3, #0
 800e134:	d110      	bne.n	800e158 <udp_input_local_match+0xa8>
          return 1;
 800e136:	2301      	movs	r3, #1
 800e138:	e00f      	b.n	800e15a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d009      	beq.n	800e154 <udp_input_local_match+0xa4>
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d005      	beq.n	800e154 <udp_input_local_match+0xa4>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	4b09      	ldr	r3, [pc, #36]	; (800e174 <udp_input_local_match+0xc4>)
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	d101      	bne.n	800e158 <udp_input_local_match+0xa8>
        return 1;
 800e154:	2301      	movs	r3, #1
 800e156:	e000      	b.n	800e15a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	08011e50 	.word	0x08011e50
 800e168:	08011ec8 	.word	0x08011ec8
 800e16c:	08011eec 	.word	0x08011eec
 800e170:	08011f14 	.word	0x08011f14
 800e174:	24004c8c 	.word	0x24004c8c

0800e178 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b08d      	sub	sp, #52	; 0x34
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e182:	2300      	movs	r3, #0
 800e184:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d105      	bne.n	800e198 <udp_input+0x20>
 800e18c:	4b7c      	ldr	r3, [pc, #496]	; (800e380 <udp_input+0x208>)
 800e18e:	22cf      	movs	r2, #207	; 0xcf
 800e190:	497c      	ldr	r1, [pc, #496]	; (800e384 <udp_input+0x20c>)
 800e192:	487d      	ldr	r0, [pc, #500]	; (800e388 <udp_input+0x210>)
 800e194:	f000 fa34 	bl	800e600 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d105      	bne.n	800e1aa <udp_input+0x32>
 800e19e:	4b78      	ldr	r3, [pc, #480]	; (800e380 <udp_input+0x208>)
 800e1a0:	22d0      	movs	r2, #208	; 0xd0
 800e1a2:	497a      	ldr	r1, [pc, #488]	; (800e38c <udp_input+0x214>)
 800e1a4:	4878      	ldr	r0, [pc, #480]	; (800e388 <udp_input+0x210>)
 800e1a6:	f000 fa2b 	bl	800e600 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	895b      	ldrh	r3, [r3, #10]
 800e1ae:	2b07      	cmp	r3, #7
 800e1b0:	d803      	bhi.n	800e1ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7fa fa36 	bl	8008624 <pbuf_free>
    goto end;
 800e1b8:	e0de      	b.n	800e378 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e1c0:	4b73      	ldr	r3, [pc, #460]	; (800e390 <udp_input+0x218>)
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	4a72      	ldr	r2, [pc, #456]	; (800e390 <udp_input+0x218>)
 800e1c6:	6812      	ldr	r2, [r2, #0]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f8 f894 	bl	80062f8 <ip4_addr_isbroadcast_u32>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	881b      	ldrh	r3, [r3, #0]
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7f6 fb20 	bl	8004820 <lwip_htons>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	885b      	ldrh	r3, [r3, #2]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7f6 fb18 	bl	8004820 <lwip_htons>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e200:	4b64      	ldr	r3, [pc, #400]	; (800e394 <udp_input+0x21c>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	627b      	str	r3, [r7, #36]	; 0x24
 800e206:	e054      	b.n	800e2b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	8a5b      	ldrh	r3, [r3, #18]
 800e20c:	89fa      	ldrh	r2, [r7, #14]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d14a      	bne.n	800e2a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e212:	7cfb      	ldrb	r3, [r7, #19]
 800e214:	461a      	mov	r2, r3
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e21a:	f7ff ff49 	bl	800e0b0 <udp_input_local_match>
 800e21e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e220:	2b00      	cmp	r3, #0
 800e222:	d041      	beq.n	800e2a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	7c1b      	ldrb	r3, [r3, #16]
 800e228:	f003 0304 	and.w	r3, r3, #4
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d11d      	bne.n	800e26c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d102      	bne.n	800e23c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	61fb      	str	r3, [r7, #28]
 800e23a:	e017      	b.n	800e26c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e23c:	7cfb      	ldrb	r3, [r7, #19]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d014      	beq.n	800e26c <udp_input+0xf4>
 800e242:	4b53      	ldr	r3, [pc, #332]	; (800e390 <udp_input+0x218>)
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24a:	d10f      	bne.n	800e26c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	3304      	adds	r3, #4
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	429a      	cmp	r2, r3
 800e258:	d008      	beq.n	800e26c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	3304      	adds	r3, #4
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d101      	bne.n	800e26c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	8a9b      	ldrh	r3, [r3, #20]
 800e270:	8a3a      	ldrh	r2, [r7, #16]
 800e272:	429a      	cmp	r2, r3
 800e274:	d118      	bne.n	800e2a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d005      	beq.n	800e28a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	4b43      	ldr	r3, [pc, #268]	; (800e390 <udp_input+0x218>)
 800e284:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e286:	429a      	cmp	r2, r3
 800e288:	d10e      	bne.n	800e2a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d014      	beq.n	800e2ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	68da      	ldr	r2, [r3, #12]
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e298:	4b3e      	ldr	r3, [pc, #248]	; (800e394 <udp_input+0x21c>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e2a0:	4a3c      	ldr	r2, [pc, #240]	; (800e394 <udp_input+0x21c>)
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e2a6:	e008      	b.n	800e2ba <udp_input+0x142>
      }
    }

    prev = pcb;
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d1a7      	bne.n	800e208 <udp_input+0x90>
 800e2b8:	e000      	b.n	800e2bc <udp_input+0x144>
        break;
 800e2ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <udp_input+0x15a>
    for_us = 1;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	76fb      	strb	r3, [r7, #27]
 800e2d0:	e00a      	b.n	800e2e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	4b2d      	ldr	r3, [pc, #180]	; (800e390 <udp_input+0x218>)
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	bf0c      	ite	eq
 800e2e0:	2301      	moveq	r3, #1
 800e2e2:	2300      	movne	r3, #0
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e2e8:	7efb      	ldrb	r3, [r7, #27]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d041      	beq.n	800e372 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e2ee:	2108      	movs	r1, #8
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7fa f911 	bl	8008518 <pbuf_remove_header>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00a      	beq.n	800e312 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e2fc:	4b20      	ldr	r3, [pc, #128]	; (800e380 <udp_input+0x208>)
 800e2fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e302:	4925      	ldr	r1, [pc, #148]	; (800e398 <udp_input+0x220>)
 800e304:	4820      	ldr	r0, [pc, #128]	; (800e388 <udp_input+0x210>)
 800e306:	f000 f97b 	bl	800e600 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7fa f98a 	bl	8008624 <pbuf_free>
      goto end;
 800e310:	e032      	b.n	800e378 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e314:	2b00      	cmp	r3, #0
 800e316:	d012      	beq.n	800e33e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	699b      	ldr	r3, [r3, #24]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	699c      	ldr	r4, [r3, #24]
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	69d8      	ldr	r0, [r3, #28]
 800e328:	8a3b      	ldrh	r3, [r7, #16]
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	4b1b      	ldr	r3, [pc, #108]	; (800e39c <udp_input+0x224>)
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e332:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e334:	e021      	b.n	800e37a <udp_input+0x202>
        pbuf_free(p);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7fa f974 	bl	8008624 <pbuf_free>
        goto end;
 800e33c:	e01c      	b.n	800e378 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e33e:	7cfb      	ldrb	r3, [r7, #19]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d112      	bne.n	800e36a <udp_input+0x1f2>
 800e344:	4b12      	ldr	r3, [pc, #72]	; (800e390 <udp_input+0x218>)
 800e346:	695b      	ldr	r3, [r3, #20]
 800e348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e34c:	2be0      	cmp	r3, #224	; 0xe0
 800e34e:	d00c      	beq.n	800e36a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e350:	4b0f      	ldr	r3, [pc, #60]	; (800e390 <udp_input+0x218>)
 800e352:	899b      	ldrh	r3, [r3, #12]
 800e354:	3308      	adds	r3, #8
 800e356:	b29b      	uxth	r3, r3
 800e358:	b21b      	sxth	r3, r3
 800e35a:	4619      	mov	r1, r3
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7fa f94e 	bl	80085fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e362:	2103      	movs	r1, #3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7f7 fbcb 	bl	8005b00 <icmp_dest_unreach>
      pbuf_free(p);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7fa f95a 	bl	8008624 <pbuf_free>
  return;
 800e370:	e003      	b.n	800e37a <udp_input+0x202>
    pbuf_free(p);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7fa f956 	bl	8008624 <pbuf_free>
  return;
 800e378:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e37a:	372c      	adds	r7, #44	; 0x2c
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}
 800e380:	08011e50 	.word	0x08011e50
 800e384:	08011f3c 	.word	0x08011f3c
 800e388:	08011eec 	.word	0x08011eec
 800e38c:	08011f54 	.word	0x08011f54
 800e390:	24004c8c 	.word	0x24004c8c
 800e394:	24007c10 	.word	0x24007c10
 800e398:	08011f70 	.word	0x08011f70
 800e39c:	24004c9c 	.word	0x24004c9c

0800e3a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d01e      	beq.n	800e3ee <udp_netif_ip_addr_changed+0x4e>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d01a      	beq.n	800e3ee <udp_netif_ip_addr_changed+0x4e>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d017      	beq.n	800e3ee <udp_netif_ip_addr_changed+0x4e>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d013      	beq.n	800e3ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e3c6:	4b0d      	ldr	r3, [pc, #52]	; (800e3fc <udp_netif_ip_addr_changed+0x5c>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	e00c      	b.n	800e3e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d103      	bne.n	800e3e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	60fb      	str	r3, [r7, #12]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1ef      	bne.n	800e3ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e3ee:	bf00      	nop
 800e3f0:	3714      	adds	r7, #20
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	24007c10 	.word	0x24007c10

0800e400 <rand>:
 800e400:	4b16      	ldr	r3, [pc, #88]	; (800e45c <rand+0x5c>)
 800e402:	b510      	push	{r4, lr}
 800e404:	681c      	ldr	r4, [r3, #0]
 800e406:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e408:	b9b3      	cbnz	r3, 800e438 <rand+0x38>
 800e40a:	2018      	movs	r0, #24
 800e40c:	f000 fa4c 	bl	800e8a8 <malloc>
 800e410:	4602      	mov	r2, r0
 800e412:	6320      	str	r0, [r4, #48]	; 0x30
 800e414:	b920      	cbnz	r0, 800e420 <rand+0x20>
 800e416:	4b12      	ldr	r3, [pc, #72]	; (800e460 <rand+0x60>)
 800e418:	4812      	ldr	r0, [pc, #72]	; (800e464 <rand+0x64>)
 800e41a:	2152      	movs	r1, #82	; 0x52
 800e41c:	f000 f9da 	bl	800e7d4 <__assert_func>
 800e420:	4911      	ldr	r1, [pc, #68]	; (800e468 <rand+0x68>)
 800e422:	4b12      	ldr	r3, [pc, #72]	; (800e46c <rand+0x6c>)
 800e424:	e9c0 1300 	strd	r1, r3, [r0]
 800e428:	4b11      	ldr	r3, [pc, #68]	; (800e470 <rand+0x70>)
 800e42a:	6083      	str	r3, [r0, #8]
 800e42c:	230b      	movs	r3, #11
 800e42e:	8183      	strh	r3, [r0, #12]
 800e430:	2100      	movs	r1, #0
 800e432:	2001      	movs	r0, #1
 800e434:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e438:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e43a:	480e      	ldr	r0, [pc, #56]	; (800e474 <rand+0x74>)
 800e43c:	690b      	ldr	r3, [r1, #16]
 800e43e:	694c      	ldr	r4, [r1, #20]
 800e440:	4a0d      	ldr	r2, [pc, #52]	; (800e478 <rand+0x78>)
 800e442:	4358      	muls	r0, r3
 800e444:	fb02 0004 	mla	r0, r2, r4, r0
 800e448:	fba3 3202 	umull	r3, r2, r3, r2
 800e44c:	3301      	adds	r3, #1
 800e44e:	eb40 0002 	adc.w	r0, r0, r2
 800e452:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e456:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e45a:	bd10      	pop	{r4, pc}
 800e45c:	24000090 	.word	0x24000090
 800e460:	080122fc 	.word	0x080122fc
 800e464:	08012313 	.word	0x08012313
 800e468:	abcd330e 	.word	0xabcd330e
 800e46c:	e66d1234 	.word	0xe66d1234
 800e470:	0005deec 	.word	0x0005deec
 800e474:	5851f42d 	.word	0x5851f42d
 800e478:	4c957f2d 	.word	0x4c957f2d

0800e47c <std>:
 800e47c:	2300      	movs	r3, #0
 800e47e:	b510      	push	{r4, lr}
 800e480:	4604      	mov	r4, r0
 800e482:	e9c0 3300 	strd	r3, r3, [r0]
 800e486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e48a:	6083      	str	r3, [r0, #8]
 800e48c:	8181      	strh	r1, [r0, #12]
 800e48e:	6643      	str	r3, [r0, #100]	; 0x64
 800e490:	81c2      	strh	r2, [r0, #14]
 800e492:	6183      	str	r3, [r0, #24]
 800e494:	4619      	mov	r1, r3
 800e496:	2208      	movs	r2, #8
 800e498:	305c      	adds	r0, #92	; 0x5c
 800e49a:	f000 f916 	bl	800e6ca <memset>
 800e49e:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <std+0x58>)
 800e4a0:	6263      	str	r3, [r4, #36]	; 0x24
 800e4a2:	4b0d      	ldr	r3, [pc, #52]	; (800e4d8 <std+0x5c>)
 800e4a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4a6:	4b0d      	ldr	r3, [pc, #52]	; (800e4dc <std+0x60>)
 800e4a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4aa:	4b0d      	ldr	r3, [pc, #52]	; (800e4e0 <std+0x64>)
 800e4ac:	6323      	str	r3, [r4, #48]	; 0x30
 800e4ae:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <std+0x68>)
 800e4b0:	6224      	str	r4, [r4, #32]
 800e4b2:	429c      	cmp	r4, r3
 800e4b4:	d006      	beq.n	800e4c4 <std+0x48>
 800e4b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e4ba:	4294      	cmp	r4, r2
 800e4bc:	d002      	beq.n	800e4c4 <std+0x48>
 800e4be:	33d0      	adds	r3, #208	; 0xd0
 800e4c0:	429c      	cmp	r4, r3
 800e4c2:	d105      	bne.n	800e4d0 <std+0x54>
 800e4c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4cc:	f000 b970 	b.w	800e7b0 <__retarget_lock_init_recursive>
 800e4d0:	bd10      	pop	{r4, pc}
 800e4d2:	bf00      	nop
 800e4d4:	0800e625 	.word	0x0800e625
 800e4d8:	0800e647 	.word	0x0800e647
 800e4dc:	0800e67f 	.word	0x0800e67f
 800e4e0:	0800e6a3 	.word	0x0800e6a3
 800e4e4:	24007c14 	.word	0x24007c14

0800e4e8 <stdio_exit_handler>:
 800e4e8:	4a02      	ldr	r2, [pc, #8]	; (800e4f4 <stdio_exit_handler+0xc>)
 800e4ea:	4903      	ldr	r1, [pc, #12]	; (800e4f8 <stdio_exit_handler+0x10>)
 800e4ec:	4803      	ldr	r0, [pc, #12]	; (800e4fc <stdio_exit_handler+0x14>)
 800e4ee:	f000 b869 	b.w	800e5c4 <_fwalk_sglue>
 800e4f2:	bf00      	nop
 800e4f4:	24000038 	.word	0x24000038
 800e4f8:	0800f0c5 	.word	0x0800f0c5
 800e4fc:	24000044 	.word	0x24000044

0800e500 <cleanup_stdio>:
 800e500:	6841      	ldr	r1, [r0, #4]
 800e502:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <cleanup_stdio+0x34>)
 800e504:	4299      	cmp	r1, r3
 800e506:	b510      	push	{r4, lr}
 800e508:	4604      	mov	r4, r0
 800e50a:	d001      	beq.n	800e510 <cleanup_stdio+0x10>
 800e50c:	f000 fdda 	bl	800f0c4 <_fflush_r>
 800e510:	68a1      	ldr	r1, [r4, #8]
 800e512:	4b09      	ldr	r3, [pc, #36]	; (800e538 <cleanup_stdio+0x38>)
 800e514:	4299      	cmp	r1, r3
 800e516:	d002      	beq.n	800e51e <cleanup_stdio+0x1e>
 800e518:	4620      	mov	r0, r4
 800e51a:	f000 fdd3 	bl	800f0c4 <_fflush_r>
 800e51e:	68e1      	ldr	r1, [r4, #12]
 800e520:	4b06      	ldr	r3, [pc, #24]	; (800e53c <cleanup_stdio+0x3c>)
 800e522:	4299      	cmp	r1, r3
 800e524:	d004      	beq.n	800e530 <cleanup_stdio+0x30>
 800e526:	4620      	mov	r0, r4
 800e528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e52c:	f000 bdca 	b.w	800f0c4 <_fflush_r>
 800e530:	bd10      	pop	{r4, pc}
 800e532:	bf00      	nop
 800e534:	24007c14 	.word	0x24007c14
 800e538:	24007c7c 	.word	0x24007c7c
 800e53c:	24007ce4 	.word	0x24007ce4

0800e540 <global_stdio_init.part.0>:
 800e540:	b510      	push	{r4, lr}
 800e542:	4b0b      	ldr	r3, [pc, #44]	; (800e570 <global_stdio_init.part.0+0x30>)
 800e544:	4c0b      	ldr	r4, [pc, #44]	; (800e574 <global_stdio_init.part.0+0x34>)
 800e546:	4a0c      	ldr	r2, [pc, #48]	; (800e578 <global_stdio_init.part.0+0x38>)
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	4620      	mov	r0, r4
 800e54c:	2200      	movs	r2, #0
 800e54e:	2104      	movs	r1, #4
 800e550:	f7ff ff94 	bl	800e47c <std>
 800e554:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e558:	2201      	movs	r2, #1
 800e55a:	2109      	movs	r1, #9
 800e55c:	f7ff ff8e 	bl	800e47c <std>
 800e560:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e564:	2202      	movs	r2, #2
 800e566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56a:	2112      	movs	r1, #18
 800e56c:	f7ff bf86 	b.w	800e47c <std>
 800e570:	24007d4c 	.word	0x24007d4c
 800e574:	24007c14 	.word	0x24007c14
 800e578:	0800e4e9 	.word	0x0800e4e9

0800e57c <__sfp_lock_acquire>:
 800e57c:	4801      	ldr	r0, [pc, #4]	; (800e584 <__sfp_lock_acquire+0x8>)
 800e57e:	f000 b918 	b.w	800e7b2 <__retarget_lock_acquire_recursive>
 800e582:	bf00      	nop
 800e584:	24007d55 	.word	0x24007d55

0800e588 <__sfp_lock_release>:
 800e588:	4801      	ldr	r0, [pc, #4]	; (800e590 <__sfp_lock_release+0x8>)
 800e58a:	f000 b913 	b.w	800e7b4 <__retarget_lock_release_recursive>
 800e58e:	bf00      	nop
 800e590:	24007d55 	.word	0x24007d55

0800e594 <__sinit>:
 800e594:	b510      	push	{r4, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	f7ff fff0 	bl	800e57c <__sfp_lock_acquire>
 800e59c:	6a23      	ldr	r3, [r4, #32]
 800e59e:	b11b      	cbz	r3, 800e5a8 <__sinit+0x14>
 800e5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5a4:	f7ff bff0 	b.w	800e588 <__sfp_lock_release>
 800e5a8:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <__sinit+0x28>)
 800e5aa:	6223      	str	r3, [r4, #32]
 800e5ac:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <__sinit+0x2c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1f5      	bne.n	800e5a0 <__sinit+0xc>
 800e5b4:	f7ff ffc4 	bl	800e540 <global_stdio_init.part.0>
 800e5b8:	e7f2      	b.n	800e5a0 <__sinit+0xc>
 800e5ba:	bf00      	nop
 800e5bc:	0800e501 	.word	0x0800e501
 800e5c0:	24007d4c 	.word	0x24007d4c

0800e5c4 <_fwalk_sglue>:
 800e5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	4688      	mov	r8, r1
 800e5cc:	4614      	mov	r4, r2
 800e5ce:	2600      	movs	r6, #0
 800e5d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5d4:	f1b9 0901 	subs.w	r9, r9, #1
 800e5d8:	d505      	bpl.n	800e5e6 <_fwalk_sglue+0x22>
 800e5da:	6824      	ldr	r4, [r4, #0]
 800e5dc:	2c00      	cmp	r4, #0
 800e5de:	d1f7      	bne.n	800e5d0 <_fwalk_sglue+0xc>
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d907      	bls.n	800e5fc <_fwalk_sglue+0x38>
 800e5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	d003      	beq.n	800e5fc <_fwalk_sglue+0x38>
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	47c0      	blx	r8
 800e5fa:	4306      	orrs	r6, r0
 800e5fc:	3568      	adds	r5, #104	; 0x68
 800e5fe:	e7e9      	b.n	800e5d4 <_fwalk_sglue+0x10>

0800e600 <iprintf>:
 800e600:	b40f      	push	{r0, r1, r2, r3}
 800e602:	b507      	push	{r0, r1, r2, lr}
 800e604:	4906      	ldr	r1, [pc, #24]	; (800e620 <iprintf+0x20>)
 800e606:	ab04      	add	r3, sp, #16
 800e608:	6808      	ldr	r0, [r1, #0]
 800e60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e60e:	6881      	ldr	r1, [r0, #8]
 800e610:	9301      	str	r3, [sp, #4]
 800e612:	f000 fa27 	bl	800ea64 <_vfiprintf_r>
 800e616:	b003      	add	sp, #12
 800e618:	f85d eb04 	ldr.w	lr, [sp], #4
 800e61c:	b004      	add	sp, #16
 800e61e:	4770      	bx	lr
 800e620:	24000090 	.word	0x24000090

0800e624 <__sread>:
 800e624:	b510      	push	{r4, lr}
 800e626:	460c      	mov	r4, r1
 800e628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e62c:	f000 f878 	bl	800e720 <_read_r>
 800e630:	2800      	cmp	r0, #0
 800e632:	bfab      	itete	ge
 800e634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e636:	89a3      	ldrhlt	r3, [r4, #12]
 800e638:	181b      	addge	r3, r3, r0
 800e63a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e63e:	bfac      	ite	ge
 800e640:	6563      	strge	r3, [r4, #84]	; 0x54
 800e642:	81a3      	strhlt	r3, [r4, #12]
 800e644:	bd10      	pop	{r4, pc}

0800e646 <__swrite>:
 800e646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64a:	461f      	mov	r7, r3
 800e64c:	898b      	ldrh	r3, [r1, #12]
 800e64e:	05db      	lsls	r3, r3, #23
 800e650:	4605      	mov	r5, r0
 800e652:	460c      	mov	r4, r1
 800e654:	4616      	mov	r6, r2
 800e656:	d505      	bpl.n	800e664 <__swrite+0x1e>
 800e658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e65c:	2302      	movs	r3, #2
 800e65e:	2200      	movs	r2, #0
 800e660:	f000 f84c 	bl	800e6fc <_lseek_r>
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e66e:	81a3      	strh	r3, [r4, #12]
 800e670:	4632      	mov	r2, r6
 800e672:	463b      	mov	r3, r7
 800e674:	4628      	mov	r0, r5
 800e676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e67a:	f000 b863 	b.w	800e744 <_write_r>

0800e67e <__sseek>:
 800e67e:	b510      	push	{r4, lr}
 800e680:	460c      	mov	r4, r1
 800e682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e686:	f000 f839 	bl	800e6fc <_lseek_r>
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	89a3      	ldrh	r3, [r4, #12]
 800e68e:	bf15      	itete	ne
 800e690:	6560      	strne	r0, [r4, #84]	; 0x54
 800e692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e69a:	81a3      	strheq	r3, [r4, #12]
 800e69c:	bf18      	it	ne
 800e69e:	81a3      	strhne	r3, [r4, #12]
 800e6a0:	bd10      	pop	{r4, pc}

0800e6a2 <__sclose>:
 800e6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a6:	f000 b819 	b.w	800e6dc <_close_r>

0800e6aa <memcmp>:
 800e6aa:	b510      	push	{r4, lr}
 800e6ac:	3901      	subs	r1, #1
 800e6ae:	4402      	add	r2, r0
 800e6b0:	4290      	cmp	r0, r2
 800e6b2:	d101      	bne.n	800e6b8 <memcmp+0xe>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	e005      	b.n	800e6c4 <memcmp+0x1a>
 800e6b8:	7803      	ldrb	r3, [r0, #0]
 800e6ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e6be:	42a3      	cmp	r3, r4
 800e6c0:	d001      	beq.n	800e6c6 <memcmp+0x1c>
 800e6c2:	1b18      	subs	r0, r3, r4
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	3001      	adds	r0, #1
 800e6c8:	e7f2      	b.n	800e6b0 <memcmp+0x6>

0800e6ca <memset>:
 800e6ca:	4402      	add	r2, r0
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d100      	bne.n	800e6d4 <memset+0xa>
 800e6d2:	4770      	bx	lr
 800e6d4:	f803 1b01 	strb.w	r1, [r3], #1
 800e6d8:	e7f9      	b.n	800e6ce <memset+0x4>
	...

0800e6dc <_close_r>:
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	4d06      	ldr	r5, [pc, #24]	; (800e6f8 <_close_r+0x1c>)
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	4608      	mov	r0, r1
 800e6e6:	602b      	str	r3, [r5, #0]
 800e6e8:	f7f2 f9a1 	bl	8000a2e <_close>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d102      	bne.n	800e6f6 <_close_r+0x1a>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	b103      	cbz	r3, 800e6f6 <_close_r+0x1a>
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	24007d50 	.word	0x24007d50

0800e6fc <_lseek_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4d07      	ldr	r5, [pc, #28]	; (800e71c <_lseek_r+0x20>)
 800e700:	4604      	mov	r4, r0
 800e702:	4608      	mov	r0, r1
 800e704:	4611      	mov	r1, r2
 800e706:	2200      	movs	r2, #0
 800e708:	602a      	str	r2, [r5, #0]
 800e70a:	461a      	mov	r2, r3
 800e70c:	f7f2 f9b6 	bl	8000a7c <_lseek>
 800e710:	1c43      	adds	r3, r0, #1
 800e712:	d102      	bne.n	800e71a <_lseek_r+0x1e>
 800e714:	682b      	ldr	r3, [r5, #0]
 800e716:	b103      	cbz	r3, 800e71a <_lseek_r+0x1e>
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	bd38      	pop	{r3, r4, r5, pc}
 800e71c:	24007d50 	.word	0x24007d50

0800e720 <_read_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	4d07      	ldr	r5, [pc, #28]	; (800e740 <_read_r+0x20>)
 800e724:	4604      	mov	r4, r0
 800e726:	4608      	mov	r0, r1
 800e728:	4611      	mov	r1, r2
 800e72a:	2200      	movs	r2, #0
 800e72c:	602a      	str	r2, [r5, #0]
 800e72e:	461a      	mov	r2, r3
 800e730:	f7f2 f944 	bl	80009bc <_read>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	d102      	bne.n	800e73e <_read_r+0x1e>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	b103      	cbz	r3, 800e73e <_read_r+0x1e>
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	24007d50 	.word	0x24007d50

0800e744 <_write_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4d07      	ldr	r5, [pc, #28]	; (800e764 <_write_r+0x20>)
 800e748:	4604      	mov	r4, r0
 800e74a:	4608      	mov	r0, r1
 800e74c:	4611      	mov	r1, r2
 800e74e:	2200      	movs	r2, #0
 800e750:	602a      	str	r2, [r5, #0]
 800e752:	461a      	mov	r2, r3
 800e754:	f7f2 f94f 	bl	80009f6 <_write>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d102      	bne.n	800e762 <_write_r+0x1e>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	b103      	cbz	r3, 800e762 <_write_r+0x1e>
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	24007d50 	.word	0x24007d50

0800e768 <__libc_init_array>:
 800e768:	b570      	push	{r4, r5, r6, lr}
 800e76a:	4d0d      	ldr	r5, [pc, #52]	; (800e7a0 <__libc_init_array+0x38>)
 800e76c:	4c0d      	ldr	r4, [pc, #52]	; (800e7a4 <__libc_init_array+0x3c>)
 800e76e:	1b64      	subs	r4, r4, r5
 800e770:	10a4      	asrs	r4, r4, #2
 800e772:	2600      	movs	r6, #0
 800e774:	42a6      	cmp	r6, r4
 800e776:	d109      	bne.n	800e78c <__libc_init_array+0x24>
 800e778:	4d0b      	ldr	r5, [pc, #44]	; (800e7a8 <__libc_init_array+0x40>)
 800e77a:	4c0c      	ldr	r4, [pc, #48]	; (800e7ac <__libc_init_array+0x44>)
 800e77c:	f000 fe52 	bl	800f424 <_init>
 800e780:	1b64      	subs	r4, r4, r5
 800e782:	10a4      	asrs	r4, r4, #2
 800e784:	2600      	movs	r6, #0
 800e786:	42a6      	cmp	r6, r4
 800e788:	d105      	bne.n	800e796 <__libc_init_array+0x2e>
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e790:	4798      	blx	r3
 800e792:	3601      	adds	r6, #1
 800e794:	e7ee      	b.n	800e774 <__libc_init_array+0xc>
 800e796:	f855 3b04 	ldr.w	r3, [r5], #4
 800e79a:	4798      	blx	r3
 800e79c:	3601      	adds	r6, #1
 800e79e:	e7f2      	b.n	800e786 <__libc_init_array+0x1e>
 800e7a0:	080123dc 	.word	0x080123dc
 800e7a4:	080123dc 	.word	0x080123dc
 800e7a8:	080123dc 	.word	0x080123dc
 800e7ac:	080123e0 	.word	0x080123e0

0800e7b0 <__retarget_lock_init_recursive>:
 800e7b0:	4770      	bx	lr

0800e7b2 <__retarget_lock_acquire_recursive>:
 800e7b2:	4770      	bx	lr

0800e7b4 <__retarget_lock_release_recursive>:
 800e7b4:	4770      	bx	lr

0800e7b6 <memcpy>:
 800e7b6:	440a      	add	r2, r1
 800e7b8:	4291      	cmp	r1, r2
 800e7ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7be:	d100      	bne.n	800e7c2 <memcpy+0xc>
 800e7c0:	4770      	bx	lr
 800e7c2:	b510      	push	{r4, lr}
 800e7c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7cc:	4291      	cmp	r1, r2
 800e7ce:	d1f9      	bne.n	800e7c4 <memcpy+0xe>
 800e7d0:	bd10      	pop	{r4, pc}
	...

0800e7d4 <__assert_func>:
 800e7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7d6:	4614      	mov	r4, r2
 800e7d8:	461a      	mov	r2, r3
 800e7da:	4b09      	ldr	r3, [pc, #36]	; (800e800 <__assert_func+0x2c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	68d8      	ldr	r0, [r3, #12]
 800e7e2:	b14c      	cbz	r4, 800e7f8 <__assert_func+0x24>
 800e7e4:	4b07      	ldr	r3, [pc, #28]	; (800e804 <__assert_func+0x30>)
 800e7e6:	9100      	str	r1, [sp, #0]
 800e7e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7ec:	4906      	ldr	r1, [pc, #24]	; (800e808 <__assert_func+0x34>)
 800e7ee:	462b      	mov	r3, r5
 800e7f0:	f000 fc90 	bl	800f114 <fiprintf>
 800e7f4:	f000 fd46 	bl	800f284 <abort>
 800e7f8:	4b04      	ldr	r3, [pc, #16]	; (800e80c <__assert_func+0x38>)
 800e7fa:	461c      	mov	r4, r3
 800e7fc:	e7f3      	b.n	800e7e6 <__assert_func+0x12>
 800e7fe:	bf00      	nop
 800e800:	24000090 	.word	0x24000090
 800e804:	0801236b 	.word	0x0801236b
 800e808:	08012378 	.word	0x08012378
 800e80c:	080123a6 	.word	0x080123a6

0800e810 <_free_r>:
 800e810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e812:	2900      	cmp	r1, #0
 800e814:	d044      	beq.n	800e8a0 <_free_r+0x90>
 800e816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e81a:	9001      	str	r0, [sp, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f1a1 0404 	sub.w	r4, r1, #4
 800e822:	bfb8      	it	lt
 800e824:	18e4      	addlt	r4, r4, r3
 800e826:	f000 f8e7 	bl	800e9f8 <__malloc_lock>
 800e82a:	4a1e      	ldr	r2, [pc, #120]	; (800e8a4 <_free_r+0x94>)
 800e82c:	9801      	ldr	r0, [sp, #4]
 800e82e:	6813      	ldr	r3, [r2, #0]
 800e830:	b933      	cbnz	r3, 800e840 <_free_r+0x30>
 800e832:	6063      	str	r3, [r4, #4]
 800e834:	6014      	str	r4, [r2, #0]
 800e836:	b003      	add	sp, #12
 800e838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e83c:	f000 b8e2 	b.w	800ea04 <__malloc_unlock>
 800e840:	42a3      	cmp	r3, r4
 800e842:	d908      	bls.n	800e856 <_free_r+0x46>
 800e844:	6825      	ldr	r5, [r4, #0]
 800e846:	1961      	adds	r1, r4, r5
 800e848:	428b      	cmp	r3, r1
 800e84a:	bf01      	itttt	eq
 800e84c:	6819      	ldreq	r1, [r3, #0]
 800e84e:	685b      	ldreq	r3, [r3, #4]
 800e850:	1949      	addeq	r1, r1, r5
 800e852:	6021      	streq	r1, [r4, #0]
 800e854:	e7ed      	b.n	800e832 <_free_r+0x22>
 800e856:	461a      	mov	r2, r3
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	b10b      	cbz	r3, 800e860 <_free_r+0x50>
 800e85c:	42a3      	cmp	r3, r4
 800e85e:	d9fa      	bls.n	800e856 <_free_r+0x46>
 800e860:	6811      	ldr	r1, [r2, #0]
 800e862:	1855      	adds	r5, r2, r1
 800e864:	42a5      	cmp	r5, r4
 800e866:	d10b      	bne.n	800e880 <_free_r+0x70>
 800e868:	6824      	ldr	r4, [r4, #0]
 800e86a:	4421      	add	r1, r4
 800e86c:	1854      	adds	r4, r2, r1
 800e86e:	42a3      	cmp	r3, r4
 800e870:	6011      	str	r1, [r2, #0]
 800e872:	d1e0      	bne.n	800e836 <_free_r+0x26>
 800e874:	681c      	ldr	r4, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	6053      	str	r3, [r2, #4]
 800e87a:	440c      	add	r4, r1
 800e87c:	6014      	str	r4, [r2, #0]
 800e87e:	e7da      	b.n	800e836 <_free_r+0x26>
 800e880:	d902      	bls.n	800e888 <_free_r+0x78>
 800e882:	230c      	movs	r3, #12
 800e884:	6003      	str	r3, [r0, #0]
 800e886:	e7d6      	b.n	800e836 <_free_r+0x26>
 800e888:	6825      	ldr	r5, [r4, #0]
 800e88a:	1961      	adds	r1, r4, r5
 800e88c:	428b      	cmp	r3, r1
 800e88e:	bf04      	itt	eq
 800e890:	6819      	ldreq	r1, [r3, #0]
 800e892:	685b      	ldreq	r3, [r3, #4]
 800e894:	6063      	str	r3, [r4, #4]
 800e896:	bf04      	itt	eq
 800e898:	1949      	addeq	r1, r1, r5
 800e89a:	6021      	streq	r1, [r4, #0]
 800e89c:	6054      	str	r4, [r2, #4]
 800e89e:	e7ca      	b.n	800e836 <_free_r+0x26>
 800e8a0:	b003      	add	sp, #12
 800e8a2:	bd30      	pop	{r4, r5, pc}
 800e8a4:	24007d58 	.word	0x24007d58

0800e8a8 <malloc>:
 800e8a8:	4b02      	ldr	r3, [pc, #8]	; (800e8b4 <malloc+0xc>)
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	6818      	ldr	r0, [r3, #0]
 800e8ae:	f000 b823 	b.w	800e8f8 <_malloc_r>
 800e8b2:	bf00      	nop
 800e8b4:	24000090 	.word	0x24000090

0800e8b8 <sbrk_aligned>:
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	4e0e      	ldr	r6, [pc, #56]	; (800e8f4 <sbrk_aligned+0x3c>)
 800e8bc:	460c      	mov	r4, r1
 800e8be:	6831      	ldr	r1, [r6, #0]
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	b911      	cbnz	r1, 800e8ca <sbrk_aligned+0x12>
 800e8c4:	f000 fcce 	bl	800f264 <_sbrk_r>
 800e8c8:	6030      	str	r0, [r6, #0]
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	f000 fcc9 	bl	800f264 <_sbrk_r>
 800e8d2:	1c43      	adds	r3, r0, #1
 800e8d4:	d00a      	beq.n	800e8ec <sbrk_aligned+0x34>
 800e8d6:	1cc4      	adds	r4, r0, #3
 800e8d8:	f024 0403 	bic.w	r4, r4, #3
 800e8dc:	42a0      	cmp	r0, r4
 800e8de:	d007      	beq.n	800e8f0 <sbrk_aligned+0x38>
 800e8e0:	1a21      	subs	r1, r4, r0
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f000 fcbe 	bl	800f264 <_sbrk_r>
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	d101      	bne.n	800e8f0 <sbrk_aligned+0x38>
 800e8ec:	f04f 34ff 	mov.w	r4, #4294967295
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	bd70      	pop	{r4, r5, r6, pc}
 800e8f4:	24007d5c 	.word	0x24007d5c

0800e8f8 <_malloc_r>:
 800e8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	1ccd      	adds	r5, r1, #3
 800e8fe:	f025 0503 	bic.w	r5, r5, #3
 800e902:	3508      	adds	r5, #8
 800e904:	2d0c      	cmp	r5, #12
 800e906:	bf38      	it	cc
 800e908:	250c      	movcc	r5, #12
 800e90a:	2d00      	cmp	r5, #0
 800e90c:	4607      	mov	r7, r0
 800e90e:	db01      	blt.n	800e914 <_malloc_r+0x1c>
 800e910:	42a9      	cmp	r1, r5
 800e912:	d905      	bls.n	800e920 <_malloc_r+0x28>
 800e914:	230c      	movs	r3, #12
 800e916:	603b      	str	r3, [r7, #0]
 800e918:	2600      	movs	r6, #0
 800e91a:	4630      	mov	r0, r6
 800e91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e920:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9f4 <_malloc_r+0xfc>
 800e924:	f000 f868 	bl	800e9f8 <__malloc_lock>
 800e928:	f8d8 3000 	ldr.w	r3, [r8]
 800e92c:	461c      	mov	r4, r3
 800e92e:	bb5c      	cbnz	r4, 800e988 <_malloc_r+0x90>
 800e930:	4629      	mov	r1, r5
 800e932:	4638      	mov	r0, r7
 800e934:	f7ff ffc0 	bl	800e8b8 <sbrk_aligned>
 800e938:	1c43      	adds	r3, r0, #1
 800e93a:	4604      	mov	r4, r0
 800e93c:	d155      	bne.n	800e9ea <_malloc_r+0xf2>
 800e93e:	f8d8 4000 	ldr.w	r4, [r8]
 800e942:	4626      	mov	r6, r4
 800e944:	2e00      	cmp	r6, #0
 800e946:	d145      	bne.n	800e9d4 <_malloc_r+0xdc>
 800e948:	2c00      	cmp	r4, #0
 800e94a:	d048      	beq.n	800e9de <_malloc_r+0xe6>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	4631      	mov	r1, r6
 800e950:	4638      	mov	r0, r7
 800e952:	eb04 0903 	add.w	r9, r4, r3
 800e956:	f000 fc85 	bl	800f264 <_sbrk_r>
 800e95a:	4581      	cmp	r9, r0
 800e95c:	d13f      	bne.n	800e9de <_malloc_r+0xe6>
 800e95e:	6821      	ldr	r1, [r4, #0]
 800e960:	1a6d      	subs	r5, r5, r1
 800e962:	4629      	mov	r1, r5
 800e964:	4638      	mov	r0, r7
 800e966:	f7ff ffa7 	bl	800e8b8 <sbrk_aligned>
 800e96a:	3001      	adds	r0, #1
 800e96c:	d037      	beq.n	800e9de <_malloc_r+0xe6>
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	442b      	add	r3, r5
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	f8d8 3000 	ldr.w	r3, [r8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d038      	beq.n	800e9ee <_malloc_r+0xf6>
 800e97c:	685a      	ldr	r2, [r3, #4]
 800e97e:	42a2      	cmp	r2, r4
 800e980:	d12b      	bne.n	800e9da <_malloc_r+0xe2>
 800e982:	2200      	movs	r2, #0
 800e984:	605a      	str	r2, [r3, #4]
 800e986:	e00f      	b.n	800e9a8 <_malloc_r+0xb0>
 800e988:	6822      	ldr	r2, [r4, #0]
 800e98a:	1b52      	subs	r2, r2, r5
 800e98c:	d41f      	bmi.n	800e9ce <_malloc_r+0xd6>
 800e98e:	2a0b      	cmp	r2, #11
 800e990:	d917      	bls.n	800e9c2 <_malloc_r+0xca>
 800e992:	1961      	adds	r1, r4, r5
 800e994:	42a3      	cmp	r3, r4
 800e996:	6025      	str	r5, [r4, #0]
 800e998:	bf18      	it	ne
 800e99a:	6059      	strne	r1, [r3, #4]
 800e99c:	6863      	ldr	r3, [r4, #4]
 800e99e:	bf08      	it	eq
 800e9a0:	f8c8 1000 	streq.w	r1, [r8]
 800e9a4:	5162      	str	r2, [r4, r5]
 800e9a6:	604b      	str	r3, [r1, #4]
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f104 060b 	add.w	r6, r4, #11
 800e9ae:	f000 f829 	bl	800ea04 <__malloc_unlock>
 800e9b2:	f026 0607 	bic.w	r6, r6, #7
 800e9b6:	1d23      	adds	r3, r4, #4
 800e9b8:	1af2      	subs	r2, r6, r3
 800e9ba:	d0ae      	beq.n	800e91a <_malloc_r+0x22>
 800e9bc:	1b9b      	subs	r3, r3, r6
 800e9be:	50a3      	str	r3, [r4, r2]
 800e9c0:	e7ab      	b.n	800e91a <_malloc_r+0x22>
 800e9c2:	42a3      	cmp	r3, r4
 800e9c4:	6862      	ldr	r2, [r4, #4]
 800e9c6:	d1dd      	bne.n	800e984 <_malloc_r+0x8c>
 800e9c8:	f8c8 2000 	str.w	r2, [r8]
 800e9cc:	e7ec      	b.n	800e9a8 <_malloc_r+0xb0>
 800e9ce:	4623      	mov	r3, r4
 800e9d0:	6864      	ldr	r4, [r4, #4]
 800e9d2:	e7ac      	b.n	800e92e <_malloc_r+0x36>
 800e9d4:	4634      	mov	r4, r6
 800e9d6:	6876      	ldr	r6, [r6, #4]
 800e9d8:	e7b4      	b.n	800e944 <_malloc_r+0x4c>
 800e9da:	4613      	mov	r3, r2
 800e9dc:	e7cc      	b.n	800e978 <_malloc_r+0x80>
 800e9de:	230c      	movs	r3, #12
 800e9e0:	603b      	str	r3, [r7, #0]
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	f000 f80e 	bl	800ea04 <__malloc_unlock>
 800e9e8:	e797      	b.n	800e91a <_malloc_r+0x22>
 800e9ea:	6025      	str	r5, [r4, #0]
 800e9ec:	e7dc      	b.n	800e9a8 <_malloc_r+0xb0>
 800e9ee:	605b      	str	r3, [r3, #4]
 800e9f0:	deff      	udf	#255	; 0xff
 800e9f2:	bf00      	nop
 800e9f4:	24007d58 	.word	0x24007d58

0800e9f8 <__malloc_lock>:
 800e9f8:	4801      	ldr	r0, [pc, #4]	; (800ea00 <__malloc_lock+0x8>)
 800e9fa:	f7ff beda 	b.w	800e7b2 <__retarget_lock_acquire_recursive>
 800e9fe:	bf00      	nop
 800ea00:	24007d54 	.word	0x24007d54

0800ea04 <__malloc_unlock>:
 800ea04:	4801      	ldr	r0, [pc, #4]	; (800ea0c <__malloc_unlock+0x8>)
 800ea06:	f7ff bed5 	b.w	800e7b4 <__retarget_lock_release_recursive>
 800ea0a:	bf00      	nop
 800ea0c:	24007d54 	.word	0x24007d54

0800ea10 <__sfputc_r>:
 800ea10:	6893      	ldr	r3, [r2, #8]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	b410      	push	{r4}
 800ea18:	6093      	str	r3, [r2, #8]
 800ea1a:	da08      	bge.n	800ea2e <__sfputc_r+0x1e>
 800ea1c:	6994      	ldr	r4, [r2, #24]
 800ea1e:	42a3      	cmp	r3, r4
 800ea20:	db01      	blt.n	800ea26 <__sfputc_r+0x16>
 800ea22:	290a      	cmp	r1, #10
 800ea24:	d103      	bne.n	800ea2e <__sfputc_r+0x1e>
 800ea26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea2a:	f000 bb85 	b.w	800f138 <__swbuf_r>
 800ea2e:	6813      	ldr	r3, [r2, #0]
 800ea30:	1c58      	adds	r0, r3, #1
 800ea32:	6010      	str	r0, [r2, #0]
 800ea34:	7019      	strb	r1, [r3, #0]
 800ea36:	4608      	mov	r0, r1
 800ea38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <__sfputs_r>:
 800ea3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea40:	4606      	mov	r6, r0
 800ea42:	460f      	mov	r7, r1
 800ea44:	4614      	mov	r4, r2
 800ea46:	18d5      	adds	r5, r2, r3
 800ea48:	42ac      	cmp	r4, r5
 800ea4a:	d101      	bne.n	800ea50 <__sfputs_r+0x12>
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	e007      	b.n	800ea60 <__sfputs_r+0x22>
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	463a      	mov	r2, r7
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7ff ffda 	bl	800ea10 <__sfputc_r>
 800ea5c:	1c43      	adds	r3, r0, #1
 800ea5e:	d1f3      	bne.n	800ea48 <__sfputs_r+0xa>
 800ea60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea64 <_vfiprintf_r>:
 800ea64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea68:	460d      	mov	r5, r1
 800ea6a:	b09d      	sub	sp, #116	; 0x74
 800ea6c:	4614      	mov	r4, r2
 800ea6e:	4698      	mov	r8, r3
 800ea70:	4606      	mov	r6, r0
 800ea72:	b118      	cbz	r0, 800ea7c <_vfiprintf_r+0x18>
 800ea74:	6a03      	ldr	r3, [r0, #32]
 800ea76:	b90b      	cbnz	r3, 800ea7c <_vfiprintf_r+0x18>
 800ea78:	f7ff fd8c 	bl	800e594 <__sinit>
 800ea7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea7e:	07d9      	lsls	r1, r3, #31
 800ea80:	d405      	bmi.n	800ea8e <_vfiprintf_r+0x2a>
 800ea82:	89ab      	ldrh	r3, [r5, #12]
 800ea84:	059a      	lsls	r2, r3, #22
 800ea86:	d402      	bmi.n	800ea8e <_vfiprintf_r+0x2a>
 800ea88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea8a:	f7ff fe92 	bl	800e7b2 <__retarget_lock_acquire_recursive>
 800ea8e:	89ab      	ldrh	r3, [r5, #12]
 800ea90:	071b      	lsls	r3, r3, #28
 800ea92:	d501      	bpl.n	800ea98 <_vfiprintf_r+0x34>
 800ea94:	692b      	ldr	r3, [r5, #16]
 800ea96:	b99b      	cbnz	r3, 800eac0 <_vfiprintf_r+0x5c>
 800ea98:	4629      	mov	r1, r5
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f000 fb8a 	bl	800f1b4 <__swsetup_r>
 800eaa0:	b170      	cbz	r0, 800eac0 <_vfiprintf_r+0x5c>
 800eaa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaa4:	07dc      	lsls	r4, r3, #31
 800eaa6:	d504      	bpl.n	800eab2 <_vfiprintf_r+0x4e>
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	b01d      	add	sp, #116	; 0x74
 800eaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab2:	89ab      	ldrh	r3, [r5, #12]
 800eab4:	0598      	lsls	r0, r3, #22
 800eab6:	d4f7      	bmi.n	800eaa8 <_vfiprintf_r+0x44>
 800eab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eaba:	f7ff fe7b 	bl	800e7b4 <__retarget_lock_release_recursive>
 800eabe:	e7f3      	b.n	800eaa8 <_vfiprintf_r+0x44>
 800eac0:	2300      	movs	r3, #0
 800eac2:	9309      	str	r3, [sp, #36]	; 0x24
 800eac4:	2320      	movs	r3, #32
 800eac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaca:	f8cd 800c 	str.w	r8, [sp, #12]
 800eace:	2330      	movs	r3, #48	; 0x30
 800ead0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ec84 <_vfiprintf_r+0x220>
 800ead4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ead8:	f04f 0901 	mov.w	r9, #1
 800eadc:	4623      	mov	r3, r4
 800eade:	469a      	mov	sl, r3
 800eae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eae4:	b10a      	cbz	r2, 800eaea <_vfiprintf_r+0x86>
 800eae6:	2a25      	cmp	r2, #37	; 0x25
 800eae8:	d1f9      	bne.n	800eade <_vfiprintf_r+0x7a>
 800eaea:	ebba 0b04 	subs.w	fp, sl, r4
 800eaee:	d00b      	beq.n	800eb08 <_vfiprintf_r+0xa4>
 800eaf0:	465b      	mov	r3, fp
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f7ff ffa1 	bl	800ea3e <__sfputs_r>
 800eafc:	3001      	adds	r0, #1
 800eafe:	f000 80a9 	beq.w	800ec54 <_vfiprintf_r+0x1f0>
 800eb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb04:	445a      	add	r2, fp
 800eb06:	9209      	str	r2, [sp, #36]	; 0x24
 800eb08:	f89a 3000 	ldrb.w	r3, [sl]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 80a1 	beq.w	800ec54 <_vfiprintf_r+0x1f0>
 800eb12:	2300      	movs	r3, #0
 800eb14:	f04f 32ff 	mov.w	r2, #4294967295
 800eb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb1c:	f10a 0a01 	add.w	sl, sl, #1
 800eb20:	9304      	str	r3, [sp, #16]
 800eb22:	9307      	str	r3, [sp, #28]
 800eb24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb28:	931a      	str	r3, [sp, #104]	; 0x68
 800eb2a:	4654      	mov	r4, sl
 800eb2c:	2205      	movs	r2, #5
 800eb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb32:	4854      	ldr	r0, [pc, #336]	; (800ec84 <_vfiprintf_r+0x220>)
 800eb34:	f7f1 fbd4 	bl	80002e0 <memchr>
 800eb38:	9a04      	ldr	r2, [sp, #16]
 800eb3a:	b9d8      	cbnz	r0, 800eb74 <_vfiprintf_r+0x110>
 800eb3c:	06d1      	lsls	r1, r2, #27
 800eb3e:	bf44      	itt	mi
 800eb40:	2320      	movmi	r3, #32
 800eb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb46:	0713      	lsls	r3, r2, #28
 800eb48:	bf44      	itt	mi
 800eb4a:	232b      	movmi	r3, #43	; 0x2b
 800eb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb50:	f89a 3000 	ldrb.w	r3, [sl]
 800eb54:	2b2a      	cmp	r3, #42	; 0x2a
 800eb56:	d015      	beq.n	800eb84 <_vfiprintf_r+0x120>
 800eb58:	9a07      	ldr	r2, [sp, #28]
 800eb5a:	4654      	mov	r4, sl
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	f04f 0c0a 	mov.w	ip, #10
 800eb62:	4621      	mov	r1, r4
 800eb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb68:	3b30      	subs	r3, #48	; 0x30
 800eb6a:	2b09      	cmp	r3, #9
 800eb6c:	d94d      	bls.n	800ec0a <_vfiprintf_r+0x1a6>
 800eb6e:	b1b0      	cbz	r0, 800eb9e <_vfiprintf_r+0x13a>
 800eb70:	9207      	str	r2, [sp, #28]
 800eb72:	e014      	b.n	800eb9e <_vfiprintf_r+0x13a>
 800eb74:	eba0 0308 	sub.w	r3, r0, r8
 800eb78:	fa09 f303 	lsl.w	r3, r9, r3
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	46a2      	mov	sl, r4
 800eb82:	e7d2      	b.n	800eb2a <_vfiprintf_r+0xc6>
 800eb84:	9b03      	ldr	r3, [sp, #12]
 800eb86:	1d19      	adds	r1, r3, #4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	9103      	str	r1, [sp, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	bfbb      	ittet	lt
 800eb90:	425b      	neglt	r3, r3
 800eb92:	f042 0202 	orrlt.w	r2, r2, #2
 800eb96:	9307      	strge	r3, [sp, #28]
 800eb98:	9307      	strlt	r3, [sp, #28]
 800eb9a:	bfb8      	it	lt
 800eb9c:	9204      	strlt	r2, [sp, #16]
 800eb9e:	7823      	ldrb	r3, [r4, #0]
 800eba0:	2b2e      	cmp	r3, #46	; 0x2e
 800eba2:	d10c      	bne.n	800ebbe <_vfiprintf_r+0x15a>
 800eba4:	7863      	ldrb	r3, [r4, #1]
 800eba6:	2b2a      	cmp	r3, #42	; 0x2a
 800eba8:	d134      	bne.n	800ec14 <_vfiprintf_r+0x1b0>
 800ebaa:	9b03      	ldr	r3, [sp, #12]
 800ebac:	1d1a      	adds	r2, r3, #4
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	9203      	str	r2, [sp, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	bfb8      	it	lt
 800ebb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebba:	3402      	adds	r4, #2
 800ebbc:	9305      	str	r3, [sp, #20]
 800ebbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ec94 <_vfiprintf_r+0x230>
 800ebc2:	7821      	ldrb	r1, [r4, #0]
 800ebc4:	2203      	movs	r2, #3
 800ebc6:	4650      	mov	r0, sl
 800ebc8:	f7f1 fb8a 	bl	80002e0 <memchr>
 800ebcc:	b138      	cbz	r0, 800ebde <_vfiprintf_r+0x17a>
 800ebce:	9b04      	ldr	r3, [sp, #16]
 800ebd0:	eba0 000a 	sub.w	r0, r0, sl
 800ebd4:	2240      	movs	r2, #64	; 0x40
 800ebd6:	4082      	lsls	r2, r0
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	3401      	adds	r4, #1
 800ebdc:	9304      	str	r3, [sp, #16]
 800ebde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe2:	4829      	ldr	r0, [pc, #164]	; (800ec88 <_vfiprintf_r+0x224>)
 800ebe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebe8:	2206      	movs	r2, #6
 800ebea:	f7f1 fb79 	bl	80002e0 <memchr>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d03f      	beq.n	800ec72 <_vfiprintf_r+0x20e>
 800ebf2:	4b26      	ldr	r3, [pc, #152]	; (800ec8c <_vfiprintf_r+0x228>)
 800ebf4:	bb1b      	cbnz	r3, 800ec3e <_vfiprintf_r+0x1da>
 800ebf6:	9b03      	ldr	r3, [sp, #12]
 800ebf8:	3307      	adds	r3, #7
 800ebfa:	f023 0307 	bic.w	r3, r3, #7
 800ebfe:	3308      	adds	r3, #8
 800ec00:	9303      	str	r3, [sp, #12]
 800ec02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec04:	443b      	add	r3, r7
 800ec06:	9309      	str	r3, [sp, #36]	; 0x24
 800ec08:	e768      	b.n	800eadc <_vfiprintf_r+0x78>
 800ec0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec0e:	460c      	mov	r4, r1
 800ec10:	2001      	movs	r0, #1
 800ec12:	e7a6      	b.n	800eb62 <_vfiprintf_r+0xfe>
 800ec14:	2300      	movs	r3, #0
 800ec16:	3401      	adds	r4, #1
 800ec18:	9305      	str	r3, [sp, #20]
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	f04f 0c0a 	mov.w	ip, #10
 800ec20:	4620      	mov	r0, r4
 800ec22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec26:	3a30      	subs	r2, #48	; 0x30
 800ec28:	2a09      	cmp	r2, #9
 800ec2a:	d903      	bls.n	800ec34 <_vfiprintf_r+0x1d0>
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d0c6      	beq.n	800ebbe <_vfiprintf_r+0x15a>
 800ec30:	9105      	str	r1, [sp, #20]
 800ec32:	e7c4      	b.n	800ebbe <_vfiprintf_r+0x15a>
 800ec34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec38:	4604      	mov	r4, r0
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e7f0      	b.n	800ec20 <_vfiprintf_r+0x1bc>
 800ec3e:	ab03      	add	r3, sp, #12
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	462a      	mov	r2, r5
 800ec44:	4b12      	ldr	r3, [pc, #72]	; (800ec90 <_vfiprintf_r+0x22c>)
 800ec46:	a904      	add	r1, sp, #16
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f3af 8000 	nop.w
 800ec4e:	4607      	mov	r7, r0
 800ec50:	1c78      	adds	r0, r7, #1
 800ec52:	d1d6      	bne.n	800ec02 <_vfiprintf_r+0x19e>
 800ec54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec56:	07d9      	lsls	r1, r3, #31
 800ec58:	d405      	bmi.n	800ec66 <_vfiprintf_r+0x202>
 800ec5a:	89ab      	ldrh	r3, [r5, #12]
 800ec5c:	059a      	lsls	r2, r3, #22
 800ec5e:	d402      	bmi.n	800ec66 <_vfiprintf_r+0x202>
 800ec60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec62:	f7ff fda7 	bl	800e7b4 <__retarget_lock_release_recursive>
 800ec66:	89ab      	ldrh	r3, [r5, #12]
 800ec68:	065b      	lsls	r3, r3, #25
 800ec6a:	f53f af1d 	bmi.w	800eaa8 <_vfiprintf_r+0x44>
 800ec6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec70:	e71c      	b.n	800eaac <_vfiprintf_r+0x48>
 800ec72:	ab03      	add	r3, sp, #12
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	462a      	mov	r2, r5
 800ec78:	4b05      	ldr	r3, [pc, #20]	; (800ec90 <_vfiprintf_r+0x22c>)
 800ec7a:	a904      	add	r1, sp, #16
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f000 f879 	bl	800ed74 <_printf_i>
 800ec82:	e7e4      	b.n	800ec4e <_vfiprintf_r+0x1ea>
 800ec84:	080123a7 	.word	0x080123a7
 800ec88:	080123b1 	.word	0x080123b1
 800ec8c:	00000000 	.word	0x00000000
 800ec90:	0800ea3f 	.word	0x0800ea3f
 800ec94:	080123ad 	.word	0x080123ad

0800ec98 <_printf_common>:
 800ec98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec9c:	4616      	mov	r6, r2
 800ec9e:	4699      	mov	r9, r3
 800eca0:	688a      	ldr	r2, [r1, #8]
 800eca2:	690b      	ldr	r3, [r1, #16]
 800eca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	bfb8      	it	lt
 800ecac:	4613      	movlt	r3, r2
 800ecae:	6033      	str	r3, [r6, #0]
 800ecb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecb4:	4607      	mov	r7, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	b10a      	cbz	r2, 800ecbe <_printf_common+0x26>
 800ecba:	3301      	adds	r3, #1
 800ecbc:	6033      	str	r3, [r6, #0]
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	0699      	lsls	r1, r3, #26
 800ecc2:	bf42      	ittt	mi
 800ecc4:	6833      	ldrmi	r3, [r6, #0]
 800ecc6:	3302      	addmi	r3, #2
 800ecc8:	6033      	strmi	r3, [r6, #0]
 800ecca:	6825      	ldr	r5, [r4, #0]
 800eccc:	f015 0506 	ands.w	r5, r5, #6
 800ecd0:	d106      	bne.n	800ece0 <_printf_common+0x48>
 800ecd2:	f104 0a19 	add.w	sl, r4, #25
 800ecd6:	68e3      	ldr	r3, [r4, #12]
 800ecd8:	6832      	ldr	r2, [r6, #0]
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	42ab      	cmp	r3, r5
 800ecde:	dc26      	bgt.n	800ed2e <_printf_common+0x96>
 800ece0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ece4:	1e13      	subs	r3, r2, #0
 800ece6:	6822      	ldr	r2, [r4, #0]
 800ece8:	bf18      	it	ne
 800ecea:	2301      	movne	r3, #1
 800ecec:	0692      	lsls	r2, r2, #26
 800ecee:	d42b      	bmi.n	800ed48 <_printf_common+0xb0>
 800ecf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	47c0      	blx	r8
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	d01e      	beq.n	800ed3c <_printf_common+0xa4>
 800ecfe:	6823      	ldr	r3, [r4, #0]
 800ed00:	6922      	ldr	r2, [r4, #16]
 800ed02:	f003 0306 	and.w	r3, r3, #6
 800ed06:	2b04      	cmp	r3, #4
 800ed08:	bf02      	ittt	eq
 800ed0a:	68e5      	ldreq	r5, [r4, #12]
 800ed0c:	6833      	ldreq	r3, [r6, #0]
 800ed0e:	1aed      	subeq	r5, r5, r3
 800ed10:	68a3      	ldr	r3, [r4, #8]
 800ed12:	bf0c      	ite	eq
 800ed14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed18:	2500      	movne	r5, #0
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	bfc4      	itt	gt
 800ed1e:	1a9b      	subgt	r3, r3, r2
 800ed20:	18ed      	addgt	r5, r5, r3
 800ed22:	2600      	movs	r6, #0
 800ed24:	341a      	adds	r4, #26
 800ed26:	42b5      	cmp	r5, r6
 800ed28:	d11a      	bne.n	800ed60 <_printf_common+0xc8>
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	e008      	b.n	800ed40 <_printf_common+0xa8>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	4652      	mov	r2, sl
 800ed32:	4649      	mov	r1, r9
 800ed34:	4638      	mov	r0, r7
 800ed36:	47c0      	blx	r8
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d103      	bne.n	800ed44 <_printf_common+0xac>
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed44:	3501      	adds	r5, #1
 800ed46:	e7c6      	b.n	800ecd6 <_printf_common+0x3e>
 800ed48:	18e1      	adds	r1, r4, r3
 800ed4a:	1c5a      	adds	r2, r3, #1
 800ed4c:	2030      	movs	r0, #48	; 0x30
 800ed4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed52:	4422      	add	r2, r4
 800ed54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed5c:	3302      	adds	r3, #2
 800ed5e:	e7c7      	b.n	800ecf0 <_printf_common+0x58>
 800ed60:	2301      	movs	r3, #1
 800ed62:	4622      	mov	r2, r4
 800ed64:	4649      	mov	r1, r9
 800ed66:	4638      	mov	r0, r7
 800ed68:	47c0      	blx	r8
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	d0e6      	beq.n	800ed3c <_printf_common+0xa4>
 800ed6e:	3601      	adds	r6, #1
 800ed70:	e7d9      	b.n	800ed26 <_printf_common+0x8e>
	...

0800ed74 <_printf_i>:
 800ed74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed78:	7e0f      	ldrb	r7, [r1, #24]
 800ed7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed7c:	2f78      	cmp	r7, #120	; 0x78
 800ed7e:	4691      	mov	r9, r2
 800ed80:	4680      	mov	r8, r0
 800ed82:	460c      	mov	r4, r1
 800ed84:	469a      	mov	sl, r3
 800ed86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed8a:	d807      	bhi.n	800ed9c <_printf_i+0x28>
 800ed8c:	2f62      	cmp	r7, #98	; 0x62
 800ed8e:	d80a      	bhi.n	800eda6 <_printf_i+0x32>
 800ed90:	2f00      	cmp	r7, #0
 800ed92:	f000 80d4 	beq.w	800ef3e <_printf_i+0x1ca>
 800ed96:	2f58      	cmp	r7, #88	; 0x58
 800ed98:	f000 80c0 	beq.w	800ef1c <_printf_i+0x1a8>
 800ed9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eda0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eda4:	e03a      	b.n	800ee1c <_printf_i+0xa8>
 800eda6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edaa:	2b15      	cmp	r3, #21
 800edac:	d8f6      	bhi.n	800ed9c <_printf_i+0x28>
 800edae:	a101      	add	r1, pc, #4	; (adr r1, 800edb4 <_printf_i+0x40>)
 800edb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edb4:	0800ee0d 	.word	0x0800ee0d
 800edb8:	0800ee21 	.word	0x0800ee21
 800edbc:	0800ed9d 	.word	0x0800ed9d
 800edc0:	0800ed9d 	.word	0x0800ed9d
 800edc4:	0800ed9d 	.word	0x0800ed9d
 800edc8:	0800ed9d 	.word	0x0800ed9d
 800edcc:	0800ee21 	.word	0x0800ee21
 800edd0:	0800ed9d 	.word	0x0800ed9d
 800edd4:	0800ed9d 	.word	0x0800ed9d
 800edd8:	0800ed9d 	.word	0x0800ed9d
 800eddc:	0800ed9d 	.word	0x0800ed9d
 800ede0:	0800ef25 	.word	0x0800ef25
 800ede4:	0800ee4d 	.word	0x0800ee4d
 800ede8:	0800eedf 	.word	0x0800eedf
 800edec:	0800ed9d 	.word	0x0800ed9d
 800edf0:	0800ed9d 	.word	0x0800ed9d
 800edf4:	0800ef47 	.word	0x0800ef47
 800edf8:	0800ed9d 	.word	0x0800ed9d
 800edfc:	0800ee4d 	.word	0x0800ee4d
 800ee00:	0800ed9d 	.word	0x0800ed9d
 800ee04:	0800ed9d 	.word	0x0800ed9d
 800ee08:	0800eee7 	.word	0x0800eee7
 800ee0c:	682b      	ldr	r3, [r5, #0]
 800ee0e:	1d1a      	adds	r2, r3, #4
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	602a      	str	r2, [r5, #0]
 800ee14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e09f      	b.n	800ef60 <_printf_i+0x1ec>
 800ee20:	6820      	ldr	r0, [r4, #0]
 800ee22:	682b      	ldr	r3, [r5, #0]
 800ee24:	0607      	lsls	r7, r0, #24
 800ee26:	f103 0104 	add.w	r1, r3, #4
 800ee2a:	6029      	str	r1, [r5, #0]
 800ee2c:	d501      	bpl.n	800ee32 <_printf_i+0xbe>
 800ee2e:	681e      	ldr	r6, [r3, #0]
 800ee30:	e003      	b.n	800ee3a <_printf_i+0xc6>
 800ee32:	0646      	lsls	r6, r0, #25
 800ee34:	d5fb      	bpl.n	800ee2e <_printf_i+0xba>
 800ee36:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ee3a:	2e00      	cmp	r6, #0
 800ee3c:	da03      	bge.n	800ee46 <_printf_i+0xd2>
 800ee3e:	232d      	movs	r3, #45	; 0x2d
 800ee40:	4276      	negs	r6, r6
 800ee42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee46:	485a      	ldr	r0, [pc, #360]	; (800efb0 <_printf_i+0x23c>)
 800ee48:	230a      	movs	r3, #10
 800ee4a:	e012      	b.n	800ee72 <_printf_i+0xfe>
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	6820      	ldr	r0, [r4, #0]
 800ee50:	1d19      	adds	r1, r3, #4
 800ee52:	6029      	str	r1, [r5, #0]
 800ee54:	0605      	lsls	r5, r0, #24
 800ee56:	d501      	bpl.n	800ee5c <_printf_i+0xe8>
 800ee58:	681e      	ldr	r6, [r3, #0]
 800ee5a:	e002      	b.n	800ee62 <_printf_i+0xee>
 800ee5c:	0641      	lsls	r1, r0, #25
 800ee5e:	d5fb      	bpl.n	800ee58 <_printf_i+0xe4>
 800ee60:	881e      	ldrh	r6, [r3, #0]
 800ee62:	4853      	ldr	r0, [pc, #332]	; (800efb0 <_printf_i+0x23c>)
 800ee64:	2f6f      	cmp	r7, #111	; 0x6f
 800ee66:	bf0c      	ite	eq
 800ee68:	2308      	moveq	r3, #8
 800ee6a:	230a      	movne	r3, #10
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee72:	6865      	ldr	r5, [r4, #4]
 800ee74:	60a5      	str	r5, [r4, #8]
 800ee76:	2d00      	cmp	r5, #0
 800ee78:	bfa2      	ittt	ge
 800ee7a:	6821      	ldrge	r1, [r4, #0]
 800ee7c:	f021 0104 	bicge.w	r1, r1, #4
 800ee80:	6021      	strge	r1, [r4, #0]
 800ee82:	b90e      	cbnz	r6, 800ee88 <_printf_i+0x114>
 800ee84:	2d00      	cmp	r5, #0
 800ee86:	d04b      	beq.n	800ef20 <_printf_i+0x1ac>
 800ee88:	4615      	mov	r5, r2
 800ee8a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee8e:	fb03 6711 	mls	r7, r3, r1, r6
 800ee92:	5dc7      	ldrb	r7, [r0, r7]
 800ee94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee98:	4637      	mov	r7, r6
 800ee9a:	42bb      	cmp	r3, r7
 800ee9c:	460e      	mov	r6, r1
 800ee9e:	d9f4      	bls.n	800ee8a <_printf_i+0x116>
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d10b      	bne.n	800eebc <_printf_i+0x148>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	07de      	lsls	r6, r3, #31
 800eea8:	d508      	bpl.n	800eebc <_printf_i+0x148>
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	6861      	ldr	r1, [r4, #4]
 800eeae:	4299      	cmp	r1, r3
 800eeb0:	bfde      	ittt	le
 800eeb2:	2330      	movle	r3, #48	; 0x30
 800eeb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eeb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eebc:	1b52      	subs	r2, r2, r5
 800eebe:	6122      	str	r2, [r4, #16]
 800eec0:	f8cd a000 	str.w	sl, [sp]
 800eec4:	464b      	mov	r3, r9
 800eec6:	aa03      	add	r2, sp, #12
 800eec8:	4621      	mov	r1, r4
 800eeca:	4640      	mov	r0, r8
 800eecc:	f7ff fee4 	bl	800ec98 <_printf_common>
 800eed0:	3001      	adds	r0, #1
 800eed2:	d14a      	bne.n	800ef6a <_printf_i+0x1f6>
 800eed4:	f04f 30ff 	mov.w	r0, #4294967295
 800eed8:	b004      	add	sp, #16
 800eeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	f043 0320 	orr.w	r3, r3, #32
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	4833      	ldr	r0, [pc, #204]	; (800efb4 <_printf_i+0x240>)
 800eee8:	2778      	movs	r7, #120	; 0x78
 800eeea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	6829      	ldr	r1, [r5, #0]
 800eef2:	061f      	lsls	r7, r3, #24
 800eef4:	f851 6b04 	ldr.w	r6, [r1], #4
 800eef8:	d402      	bmi.n	800ef00 <_printf_i+0x18c>
 800eefa:	065f      	lsls	r7, r3, #25
 800eefc:	bf48      	it	mi
 800eefe:	b2b6      	uxthmi	r6, r6
 800ef00:	07df      	lsls	r7, r3, #31
 800ef02:	bf48      	it	mi
 800ef04:	f043 0320 	orrmi.w	r3, r3, #32
 800ef08:	6029      	str	r1, [r5, #0]
 800ef0a:	bf48      	it	mi
 800ef0c:	6023      	strmi	r3, [r4, #0]
 800ef0e:	b91e      	cbnz	r6, 800ef18 <_printf_i+0x1a4>
 800ef10:	6823      	ldr	r3, [r4, #0]
 800ef12:	f023 0320 	bic.w	r3, r3, #32
 800ef16:	6023      	str	r3, [r4, #0]
 800ef18:	2310      	movs	r3, #16
 800ef1a:	e7a7      	b.n	800ee6c <_printf_i+0xf8>
 800ef1c:	4824      	ldr	r0, [pc, #144]	; (800efb0 <_printf_i+0x23c>)
 800ef1e:	e7e4      	b.n	800eeea <_printf_i+0x176>
 800ef20:	4615      	mov	r5, r2
 800ef22:	e7bd      	b.n	800eea0 <_printf_i+0x12c>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	6826      	ldr	r6, [r4, #0]
 800ef28:	6961      	ldr	r1, [r4, #20]
 800ef2a:	1d18      	adds	r0, r3, #4
 800ef2c:	6028      	str	r0, [r5, #0]
 800ef2e:	0635      	lsls	r5, r6, #24
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	d501      	bpl.n	800ef38 <_printf_i+0x1c4>
 800ef34:	6019      	str	r1, [r3, #0]
 800ef36:	e002      	b.n	800ef3e <_printf_i+0x1ca>
 800ef38:	0670      	lsls	r0, r6, #25
 800ef3a:	d5fb      	bpl.n	800ef34 <_printf_i+0x1c0>
 800ef3c:	8019      	strh	r1, [r3, #0]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	6123      	str	r3, [r4, #16]
 800ef42:	4615      	mov	r5, r2
 800ef44:	e7bc      	b.n	800eec0 <_printf_i+0x14c>
 800ef46:	682b      	ldr	r3, [r5, #0]
 800ef48:	1d1a      	adds	r2, r3, #4
 800ef4a:	602a      	str	r2, [r5, #0]
 800ef4c:	681d      	ldr	r5, [r3, #0]
 800ef4e:	6862      	ldr	r2, [r4, #4]
 800ef50:	2100      	movs	r1, #0
 800ef52:	4628      	mov	r0, r5
 800ef54:	f7f1 f9c4 	bl	80002e0 <memchr>
 800ef58:	b108      	cbz	r0, 800ef5e <_printf_i+0x1ea>
 800ef5a:	1b40      	subs	r0, r0, r5
 800ef5c:	6060      	str	r0, [r4, #4]
 800ef5e:	6863      	ldr	r3, [r4, #4]
 800ef60:	6123      	str	r3, [r4, #16]
 800ef62:	2300      	movs	r3, #0
 800ef64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef68:	e7aa      	b.n	800eec0 <_printf_i+0x14c>
 800ef6a:	6923      	ldr	r3, [r4, #16]
 800ef6c:	462a      	mov	r2, r5
 800ef6e:	4649      	mov	r1, r9
 800ef70:	4640      	mov	r0, r8
 800ef72:	47d0      	blx	sl
 800ef74:	3001      	adds	r0, #1
 800ef76:	d0ad      	beq.n	800eed4 <_printf_i+0x160>
 800ef78:	6823      	ldr	r3, [r4, #0]
 800ef7a:	079b      	lsls	r3, r3, #30
 800ef7c:	d413      	bmi.n	800efa6 <_printf_i+0x232>
 800ef7e:	68e0      	ldr	r0, [r4, #12]
 800ef80:	9b03      	ldr	r3, [sp, #12]
 800ef82:	4298      	cmp	r0, r3
 800ef84:	bfb8      	it	lt
 800ef86:	4618      	movlt	r0, r3
 800ef88:	e7a6      	b.n	800eed8 <_printf_i+0x164>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	4632      	mov	r2, r6
 800ef8e:	4649      	mov	r1, r9
 800ef90:	4640      	mov	r0, r8
 800ef92:	47d0      	blx	sl
 800ef94:	3001      	adds	r0, #1
 800ef96:	d09d      	beq.n	800eed4 <_printf_i+0x160>
 800ef98:	3501      	adds	r5, #1
 800ef9a:	68e3      	ldr	r3, [r4, #12]
 800ef9c:	9903      	ldr	r1, [sp, #12]
 800ef9e:	1a5b      	subs	r3, r3, r1
 800efa0:	42ab      	cmp	r3, r5
 800efa2:	dcf2      	bgt.n	800ef8a <_printf_i+0x216>
 800efa4:	e7eb      	b.n	800ef7e <_printf_i+0x20a>
 800efa6:	2500      	movs	r5, #0
 800efa8:	f104 0619 	add.w	r6, r4, #25
 800efac:	e7f5      	b.n	800ef9a <_printf_i+0x226>
 800efae:	bf00      	nop
 800efb0:	080123b8 	.word	0x080123b8
 800efb4:	080123c9 	.word	0x080123c9

0800efb8 <__sflush_r>:
 800efb8:	898a      	ldrh	r2, [r1, #12]
 800efba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efbe:	4605      	mov	r5, r0
 800efc0:	0710      	lsls	r0, r2, #28
 800efc2:	460c      	mov	r4, r1
 800efc4:	d458      	bmi.n	800f078 <__sflush_r+0xc0>
 800efc6:	684b      	ldr	r3, [r1, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	dc05      	bgt.n	800efd8 <__sflush_r+0x20>
 800efcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efce:	2b00      	cmp	r3, #0
 800efd0:	dc02      	bgt.n	800efd8 <__sflush_r+0x20>
 800efd2:	2000      	movs	r0, #0
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efda:	2e00      	cmp	r6, #0
 800efdc:	d0f9      	beq.n	800efd2 <__sflush_r+0x1a>
 800efde:	2300      	movs	r3, #0
 800efe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efe4:	682f      	ldr	r7, [r5, #0]
 800efe6:	6a21      	ldr	r1, [r4, #32]
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	d032      	beq.n	800f052 <__sflush_r+0x9a>
 800efec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efee:	89a3      	ldrh	r3, [r4, #12]
 800eff0:	075a      	lsls	r2, r3, #29
 800eff2:	d505      	bpl.n	800f000 <__sflush_r+0x48>
 800eff4:	6863      	ldr	r3, [r4, #4]
 800eff6:	1ac0      	subs	r0, r0, r3
 800eff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800effa:	b10b      	cbz	r3, 800f000 <__sflush_r+0x48>
 800effc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800effe:	1ac0      	subs	r0, r0, r3
 800f000:	2300      	movs	r3, #0
 800f002:	4602      	mov	r2, r0
 800f004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f006:	6a21      	ldr	r1, [r4, #32]
 800f008:	4628      	mov	r0, r5
 800f00a:	47b0      	blx	r6
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	d106      	bne.n	800f020 <__sflush_r+0x68>
 800f012:	6829      	ldr	r1, [r5, #0]
 800f014:	291d      	cmp	r1, #29
 800f016:	d82b      	bhi.n	800f070 <__sflush_r+0xb8>
 800f018:	4a29      	ldr	r2, [pc, #164]	; (800f0c0 <__sflush_r+0x108>)
 800f01a:	410a      	asrs	r2, r1
 800f01c:	07d6      	lsls	r6, r2, #31
 800f01e:	d427      	bmi.n	800f070 <__sflush_r+0xb8>
 800f020:	2200      	movs	r2, #0
 800f022:	6062      	str	r2, [r4, #4]
 800f024:	04d9      	lsls	r1, r3, #19
 800f026:	6922      	ldr	r2, [r4, #16]
 800f028:	6022      	str	r2, [r4, #0]
 800f02a:	d504      	bpl.n	800f036 <__sflush_r+0x7e>
 800f02c:	1c42      	adds	r2, r0, #1
 800f02e:	d101      	bne.n	800f034 <__sflush_r+0x7c>
 800f030:	682b      	ldr	r3, [r5, #0]
 800f032:	b903      	cbnz	r3, 800f036 <__sflush_r+0x7e>
 800f034:	6560      	str	r0, [r4, #84]	; 0x54
 800f036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f038:	602f      	str	r7, [r5, #0]
 800f03a:	2900      	cmp	r1, #0
 800f03c:	d0c9      	beq.n	800efd2 <__sflush_r+0x1a>
 800f03e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f042:	4299      	cmp	r1, r3
 800f044:	d002      	beq.n	800f04c <__sflush_r+0x94>
 800f046:	4628      	mov	r0, r5
 800f048:	f7ff fbe2 	bl	800e810 <_free_r>
 800f04c:	2000      	movs	r0, #0
 800f04e:	6360      	str	r0, [r4, #52]	; 0x34
 800f050:	e7c0      	b.n	800efd4 <__sflush_r+0x1c>
 800f052:	2301      	movs	r3, #1
 800f054:	4628      	mov	r0, r5
 800f056:	47b0      	blx	r6
 800f058:	1c41      	adds	r1, r0, #1
 800f05a:	d1c8      	bne.n	800efee <__sflush_r+0x36>
 800f05c:	682b      	ldr	r3, [r5, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d0c5      	beq.n	800efee <__sflush_r+0x36>
 800f062:	2b1d      	cmp	r3, #29
 800f064:	d001      	beq.n	800f06a <__sflush_r+0xb2>
 800f066:	2b16      	cmp	r3, #22
 800f068:	d101      	bne.n	800f06e <__sflush_r+0xb6>
 800f06a:	602f      	str	r7, [r5, #0]
 800f06c:	e7b1      	b.n	800efd2 <__sflush_r+0x1a>
 800f06e:	89a3      	ldrh	r3, [r4, #12]
 800f070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f074:	81a3      	strh	r3, [r4, #12]
 800f076:	e7ad      	b.n	800efd4 <__sflush_r+0x1c>
 800f078:	690f      	ldr	r7, [r1, #16]
 800f07a:	2f00      	cmp	r7, #0
 800f07c:	d0a9      	beq.n	800efd2 <__sflush_r+0x1a>
 800f07e:	0793      	lsls	r3, r2, #30
 800f080:	680e      	ldr	r6, [r1, #0]
 800f082:	bf08      	it	eq
 800f084:	694b      	ldreq	r3, [r1, #20]
 800f086:	600f      	str	r7, [r1, #0]
 800f088:	bf18      	it	ne
 800f08a:	2300      	movne	r3, #0
 800f08c:	eba6 0807 	sub.w	r8, r6, r7
 800f090:	608b      	str	r3, [r1, #8]
 800f092:	f1b8 0f00 	cmp.w	r8, #0
 800f096:	dd9c      	ble.n	800efd2 <__sflush_r+0x1a>
 800f098:	6a21      	ldr	r1, [r4, #32]
 800f09a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f09c:	4643      	mov	r3, r8
 800f09e:	463a      	mov	r2, r7
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	47b0      	blx	r6
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dc06      	bgt.n	800f0b6 <__sflush_r+0xfe>
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ae:	81a3      	strh	r3, [r4, #12]
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e78e      	b.n	800efd4 <__sflush_r+0x1c>
 800f0b6:	4407      	add	r7, r0
 800f0b8:	eba8 0800 	sub.w	r8, r8, r0
 800f0bc:	e7e9      	b.n	800f092 <__sflush_r+0xda>
 800f0be:	bf00      	nop
 800f0c0:	dfbffffe 	.word	0xdfbffffe

0800f0c4 <_fflush_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	690b      	ldr	r3, [r1, #16]
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	b913      	cbnz	r3, 800f0d4 <_fflush_r+0x10>
 800f0ce:	2500      	movs	r5, #0
 800f0d0:	4628      	mov	r0, r5
 800f0d2:	bd38      	pop	{r3, r4, r5, pc}
 800f0d4:	b118      	cbz	r0, 800f0de <_fflush_r+0x1a>
 800f0d6:	6a03      	ldr	r3, [r0, #32]
 800f0d8:	b90b      	cbnz	r3, 800f0de <_fflush_r+0x1a>
 800f0da:	f7ff fa5b 	bl	800e594 <__sinit>
 800f0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d0f3      	beq.n	800f0ce <_fflush_r+0xa>
 800f0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0e8:	07d0      	lsls	r0, r2, #31
 800f0ea:	d404      	bmi.n	800f0f6 <_fflush_r+0x32>
 800f0ec:	0599      	lsls	r1, r3, #22
 800f0ee:	d402      	bmi.n	800f0f6 <_fflush_r+0x32>
 800f0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0f2:	f7ff fb5e 	bl	800e7b2 <__retarget_lock_acquire_recursive>
 800f0f6:	4628      	mov	r0, r5
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	f7ff ff5d 	bl	800efb8 <__sflush_r>
 800f0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f100:	07da      	lsls	r2, r3, #31
 800f102:	4605      	mov	r5, r0
 800f104:	d4e4      	bmi.n	800f0d0 <_fflush_r+0xc>
 800f106:	89a3      	ldrh	r3, [r4, #12]
 800f108:	059b      	lsls	r3, r3, #22
 800f10a:	d4e1      	bmi.n	800f0d0 <_fflush_r+0xc>
 800f10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f10e:	f7ff fb51 	bl	800e7b4 <__retarget_lock_release_recursive>
 800f112:	e7dd      	b.n	800f0d0 <_fflush_r+0xc>

0800f114 <fiprintf>:
 800f114:	b40e      	push	{r1, r2, r3}
 800f116:	b503      	push	{r0, r1, lr}
 800f118:	4601      	mov	r1, r0
 800f11a:	ab03      	add	r3, sp, #12
 800f11c:	4805      	ldr	r0, [pc, #20]	; (800f134 <fiprintf+0x20>)
 800f11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f122:	6800      	ldr	r0, [r0, #0]
 800f124:	9301      	str	r3, [sp, #4]
 800f126:	f7ff fc9d 	bl	800ea64 <_vfiprintf_r>
 800f12a:	b002      	add	sp, #8
 800f12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f130:	b003      	add	sp, #12
 800f132:	4770      	bx	lr
 800f134:	24000090 	.word	0x24000090

0800f138 <__swbuf_r>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	460e      	mov	r6, r1
 800f13c:	4614      	mov	r4, r2
 800f13e:	4605      	mov	r5, r0
 800f140:	b118      	cbz	r0, 800f14a <__swbuf_r+0x12>
 800f142:	6a03      	ldr	r3, [r0, #32]
 800f144:	b90b      	cbnz	r3, 800f14a <__swbuf_r+0x12>
 800f146:	f7ff fa25 	bl	800e594 <__sinit>
 800f14a:	69a3      	ldr	r3, [r4, #24]
 800f14c:	60a3      	str	r3, [r4, #8]
 800f14e:	89a3      	ldrh	r3, [r4, #12]
 800f150:	071a      	lsls	r2, r3, #28
 800f152:	d525      	bpl.n	800f1a0 <__swbuf_r+0x68>
 800f154:	6923      	ldr	r3, [r4, #16]
 800f156:	b31b      	cbz	r3, 800f1a0 <__swbuf_r+0x68>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	6922      	ldr	r2, [r4, #16]
 800f15c:	1a98      	subs	r0, r3, r2
 800f15e:	6963      	ldr	r3, [r4, #20]
 800f160:	b2f6      	uxtb	r6, r6
 800f162:	4283      	cmp	r3, r0
 800f164:	4637      	mov	r7, r6
 800f166:	dc04      	bgt.n	800f172 <__swbuf_r+0x3a>
 800f168:	4621      	mov	r1, r4
 800f16a:	4628      	mov	r0, r5
 800f16c:	f7ff ffaa 	bl	800f0c4 <_fflush_r>
 800f170:	b9e0      	cbnz	r0, 800f1ac <__swbuf_r+0x74>
 800f172:	68a3      	ldr	r3, [r4, #8]
 800f174:	3b01      	subs	r3, #1
 800f176:	60a3      	str	r3, [r4, #8]
 800f178:	6823      	ldr	r3, [r4, #0]
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	6022      	str	r2, [r4, #0]
 800f17e:	701e      	strb	r6, [r3, #0]
 800f180:	6962      	ldr	r2, [r4, #20]
 800f182:	1c43      	adds	r3, r0, #1
 800f184:	429a      	cmp	r2, r3
 800f186:	d004      	beq.n	800f192 <__swbuf_r+0x5a>
 800f188:	89a3      	ldrh	r3, [r4, #12]
 800f18a:	07db      	lsls	r3, r3, #31
 800f18c:	d506      	bpl.n	800f19c <__swbuf_r+0x64>
 800f18e:	2e0a      	cmp	r6, #10
 800f190:	d104      	bne.n	800f19c <__swbuf_r+0x64>
 800f192:	4621      	mov	r1, r4
 800f194:	4628      	mov	r0, r5
 800f196:	f7ff ff95 	bl	800f0c4 <_fflush_r>
 800f19a:	b938      	cbnz	r0, 800f1ac <__swbuf_r+0x74>
 800f19c:	4638      	mov	r0, r7
 800f19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	f000 f806 	bl	800f1b4 <__swsetup_r>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d0d5      	beq.n	800f158 <__swbuf_r+0x20>
 800f1ac:	f04f 37ff 	mov.w	r7, #4294967295
 800f1b0:	e7f4      	b.n	800f19c <__swbuf_r+0x64>
	...

0800f1b4 <__swsetup_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4b2a      	ldr	r3, [pc, #168]	; (800f260 <__swsetup_r+0xac>)
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	6818      	ldr	r0, [r3, #0]
 800f1bc:	460c      	mov	r4, r1
 800f1be:	b118      	cbz	r0, 800f1c8 <__swsetup_r+0x14>
 800f1c0:	6a03      	ldr	r3, [r0, #32]
 800f1c2:	b90b      	cbnz	r3, 800f1c8 <__swsetup_r+0x14>
 800f1c4:	f7ff f9e6 	bl	800e594 <__sinit>
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1ce:	0718      	lsls	r0, r3, #28
 800f1d0:	d422      	bmi.n	800f218 <__swsetup_r+0x64>
 800f1d2:	06d9      	lsls	r1, r3, #27
 800f1d4:	d407      	bmi.n	800f1e6 <__swsetup_r+0x32>
 800f1d6:	2309      	movs	r3, #9
 800f1d8:	602b      	str	r3, [r5, #0]
 800f1da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e4:	e034      	b.n	800f250 <__swsetup_r+0x9c>
 800f1e6:	0758      	lsls	r0, r3, #29
 800f1e8:	d512      	bpl.n	800f210 <__swsetup_r+0x5c>
 800f1ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1ec:	b141      	cbz	r1, 800f200 <__swsetup_r+0x4c>
 800f1ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1f2:	4299      	cmp	r1, r3
 800f1f4:	d002      	beq.n	800f1fc <__swsetup_r+0x48>
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	f7ff fb0a 	bl	800e810 <_free_r>
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	6363      	str	r3, [r4, #52]	; 0x34
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	2300      	movs	r3, #0
 800f20a:	6063      	str	r3, [r4, #4]
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	6023      	str	r3, [r4, #0]
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	f043 0308 	orr.w	r3, r3, #8
 800f216:	81a3      	strh	r3, [r4, #12]
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	b94b      	cbnz	r3, 800f230 <__swsetup_r+0x7c>
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f226:	d003      	beq.n	800f230 <__swsetup_r+0x7c>
 800f228:	4621      	mov	r1, r4
 800f22a:	4628      	mov	r0, r5
 800f22c:	f000 f857 	bl	800f2de <__smakebuf_r>
 800f230:	89a0      	ldrh	r0, [r4, #12]
 800f232:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f236:	f010 0301 	ands.w	r3, r0, #1
 800f23a:	d00a      	beq.n	800f252 <__swsetup_r+0x9e>
 800f23c:	2300      	movs	r3, #0
 800f23e:	60a3      	str	r3, [r4, #8]
 800f240:	6963      	ldr	r3, [r4, #20]
 800f242:	425b      	negs	r3, r3
 800f244:	61a3      	str	r3, [r4, #24]
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	b943      	cbnz	r3, 800f25c <__swsetup_r+0xa8>
 800f24a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f24e:	d1c4      	bne.n	800f1da <__swsetup_r+0x26>
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	0781      	lsls	r1, r0, #30
 800f254:	bf58      	it	pl
 800f256:	6963      	ldrpl	r3, [r4, #20]
 800f258:	60a3      	str	r3, [r4, #8]
 800f25a:	e7f4      	b.n	800f246 <__swsetup_r+0x92>
 800f25c:	2000      	movs	r0, #0
 800f25e:	e7f7      	b.n	800f250 <__swsetup_r+0x9c>
 800f260:	24000090 	.word	0x24000090

0800f264 <_sbrk_r>:
 800f264:	b538      	push	{r3, r4, r5, lr}
 800f266:	4d06      	ldr	r5, [pc, #24]	; (800f280 <_sbrk_r+0x1c>)
 800f268:	2300      	movs	r3, #0
 800f26a:	4604      	mov	r4, r0
 800f26c:	4608      	mov	r0, r1
 800f26e:	602b      	str	r3, [r5, #0]
 800f270:	f7f1 fc12 	bl	8000a98 <_sbrk>
 800f274:	1c43      	adds	r3, r0, #1
 800f276:	d102      	bne.n	800f27e <_sbrk_r+0x1a>
 800f278:	682b      	ldr	r3, [r5, #0]
 800f27a:	b103      	cbz	r3, 800f27e <_sbrk_r+0x1a>
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	bd38      	pop	{r3, r4, r5, pc}
 800f280:	24007d50 	.word	0x24007d50

0800f284 <abort>:
 800f284:	b508      	push	{r3, lr}
 800f286:	2006      	movs	r0, #6
 800f288:	f000 f88e 	bl	800f3a8 <raise>
 800f28c:	2001      	movs	r0, #1
 800f28e:	f7f1 fb8b 	bl	80009a8 <_exit>

0800f292 <__swhatbuf_r>:
 800f292:	b570      	push	{r4, r5, r6, lr}
 800f294:	460c      	mov	r4, r1
 800f296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f29a:	2900      	cmp	r1, #0
 800f29c:	b096      	sub	sp, #88	; 0x58
 800f29e:	4615      	mov	r5, r2
 800f2a0:	461e      	mov	r6, r3
 800f2a2:	da0d      	bge.n	800f2c0 <__swhatbuf_r+0x2e>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f2aa:	f04f 0100 	mov.w	r1, #0
 800f2ae:	bf0c      	ite	eq
 800f2b0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f2b4:	2340      	movne	r3, #64	; 0x40
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	6031      	str	r1, [r6, #0]
 800f2ba:	602b      	str	r3, [r5, #0]
 800f2bc:	b016      	add	sp, #88	; 0x58
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	466a      	mov	r2, sp
 800f2c2:	f000 f879 	bl	800f3b8 <_fstat_r>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	dbec      	blt.n	800f2a4 <__swhatbuf_r+0x12>
 800f2ca:	9901      	ldr	r1, [sp, #4]
 800f2cc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f2d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f2d4:	4259      	negs	r1, r3
 800f2d6:	4159      	adcs	r1, r3
 800f2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2dc:	e7eb      	b.n	800f2b6 <__swhatbuf_r+0x24>

0800f2de <__smakebuf_r>:
 800f2de:	898b      	ldrh	r3, [r1, #12]
 800f2e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2e2:	079d      	lsls	r5, r3, #30
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	d507      	bpl.n	800f2fa <__smakebuf_r+0x1c>
 800f2ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2ee:	6023      	str	r3, [r4, #0]
 800f2f0:	6123      	str	r3, [r4, #16]
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	6163      	str	r3, [r4, #20]
 800f2f6:	b002      	add	sp, #8
 800f2f8:	bd70      	pop	{r4, r5, r6, pc}
 800f2fa:	ab01      	add	r3, sp, #4
 800f2fc:	466a      	mov	r2, sp
 800f2fe:	f7ff ffc8 	bl	800f292 <__swhatbuf_r>
 800f302:	9900      	ldr	r1, [sp, #0]
 800f304:	4605      	mov	r5, r0
 800f306:	4630      	mov	r0, r6
 800f308:	f7ff faf6 	bl	800e8f8 <_malloc_r>
 800f30c:	b948      	cbnz	r0, 800f322 <__smakebuf_r+0x44>
 800f30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f312:	059a      	lsls	r2, r3, #22
 800f314:	d4ef      	bmi.n	800f2f6 <__smakebuf_r+0x18>
 800f316:	f023 0303 	bic.w	r3, r3, #3
 800f31a:	f043 0302 	orr.w	r3, r3, #2
 800f31e:	81a3      	strh	r3, [r4, #12]
 800f320:	e7e3      	b.n	800f2ea <__smakebuf_r+0xc>
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	6020      	str	r0, [r4, #0]
 800f326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f32a:	81a3      	strh	r3, [r4, #12]
 800f32c:	9b00      	ldr	r3, [sp, #0]
 800f32e:	6163      	str	r3, [r4, #20]
 800f330:	9b01      	ldr	r3, [sp, #4]
 800f332:	6120      	str	r0, [r4, #16]
 800f334:	b15b      	cbz	r3, 800f34e <__smakebuf_r+0x70>
 800f336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f33a:	4630      	mov	r0, r6
 800f33c:	f000 f84e 	bl	800f3dc <_isatty_r>
 800f340:	b128      	cbz	r0, 800f34e <__smakebuf_r+0x70>
 800f342:	89a3      	ldrh	r3, [r4, #12]
 800f344:	f023 0303 	bic.w	r3, r3, #3
 800f348:	f043 0301 	orr.w	r3, r3, #1
 800f34c:	81a3      	strh	r3, [r4, #12]
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	431d      	orrs	r5, r3
 800f352:	81a5      	strh	r5, [r4, #12]
 800f354:	e7cf      	b.n	800f2f6 <__smakebuf_r+0x18>

0800f356 <_raise_r>:
 800f356:	291f      	cmp	r1, #31
 800f358:	b538      	push	{r3, r4, r5, lr}
 800f35a:	4604      	mov	r4, r0
 800f35c:	460d      	mov	r5, r1
 800f35e:	d904      	bls.n	800f36a <_raise_r+0x14>
 800f360:	2316      	movs	r3, #22
 800f362:	6003      	str	r3, [r0, #0]
 800f364:	f04f 30ff 	mov.w	r0, #4294967295
 800f368:	bd38      	pop	{r3, r4, r5, pc}
 800f36a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f36c:	b112      	cbz	r2, 800f374 <_raise_r+0x1e>
 800f36e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f372:	b94b      	cbnz	r3, 800f388 <_raise_r+0x32>
 800f374:	4620      	mov	r0, r4
 800f376:	f000 f853 	bl	800f420 <_getpid_r>
 800f37a:	462a      	mov	r2, r5
 800f37c:	4601      	mov	r1, r0
 800f37e:	4620      	mov	r0, r4
 800f380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f384:	f000 b83a 	b.w	800f3fc <_kill_r>
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d00a      	beq.n	800f3a2 <_raise_r+0x4c>
 800f38c:	1c59      	adds	r1, r3, #1
 800f38e:	d103      	bne.n	800f398 <_raise_r+0x42>
 800f390:	2316      	movs	r3, #22
 800f392:	6003      	str	r3, [r0, #0]
 800f394:	2001      	movs	r0, #1
 800f396:	e7e7      	b.n	800f368 <_raise_r+0x12>
 800f398:	2400      	movs	r4, #0
 800f39a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f39e:	4628      	mov	r0, r5
 800f3a0:	4798      	blx	r3
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	e7e0      	b.n	800f368 <_raise_r+0x12>
	...

0800f3a8 <raise>:
 800f3a8:	4b02      	ldr	r3, [pc, #8]	; (800f3b4 <raise+0xc>)
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	f7ff bfd2 	b.w	800f356 <_raise_r>
 800f3b2:	bf00      	nop
 800f3b4:	24000090 	.word	0x24000090

0800f3b8 <_fstat_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4d07      	ldr	r5, [pc, #28]	; (800f3d8 <_fstat_r+0x20>)
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4604      	mov	r4, r0
 800f3c0:	4608      	mov	r0, r1
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	f7f1 fb3e 	bl	8000a46 <_fstat>
 800f3ca:	1c43      	adds	r3, r0, #1
 800f3cc:	d102      	bne.n	800f3d4 <_fstat_r+0x1c>
 800f3ce:	682b      	ldr	r3, [r5, #0]
 800f3d0:	b103      	cbz	r3, 800f3d4 <_fstat_r+0x1c>
 800f3d2:	6023      	str	r3, [r4, #0]
 800f3d4:	bd38      	pop	{r3, r4, r5, pc}
 800f3d6:	bf00      	nop
 800f3d8:	24007d50 	.word	0x24007d50

0800f3dc <_isatty_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	4d06      	ldr	r5, [pc, #24]	; (800f3f8 <_isatty_r+0x1c>)
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4608      	mov	r0, r1
 800f3e6:	602b      	str	r3, [r5, #0]
 800f3e8:	f7f1 fb3d 	bl	8000a66 <_isatty>
 800f3ec:	1c43      	adds	r3, r0, #1
 800f3ee:	d102      	bne.n	800f3f6 <_isatty_r+0x1a>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	b103      	cbz	r3, 800f3f6 <_isatty_r+0x1a>
 800f3f4:	6023      	str	r3, [r4, #0]
 800f3f6:	bd38      	pop	{r3, r4, r5, pc}
 800f3f8:	24007d50 	.word	0x24007d50

0800f3fc <_kill_r>:
 800f3fc:	b538      	push	{r3, r4, r5, lr}
 800f3fe:	4d07      	ldr	r5, [pc, #28]	; (800f41c <_kill_r+0x20>)
 800f400:	2300      	movs	r3, #0
 800f402:	4604      	mov	r4, r0
 800f404:	4608      	mov	r0, r1
 800f406:	4611      	mov	r1, r2
 800f408:	602b      	str	r3, [r5, #0]
 800f40a:	f7f1 fabb 	bl	8000984 <_kill>
 800f40e:	1c43      	adds	r3, r0, #1
 800f410:	d102      	bne.n	800f418 <_kill_r+0x1c>
 800f412:	682b      	ldr	r3, [r5, #0]
 800f414:	b103      	cbz	r3, 800f418 <_kill_r+0x1c>
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	bd38      	pop	{r3, r4, r5, pc}
 800f41a:	bf00      	nop
 800f41c:	24007d50 	.word	0x24007d50

0800f420 <_getpid_r>:
 800f420:	f7f1 baa8 	b.w	8000974 <_getpid>

0800f424 <_init>:
 800f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f426:	bf00      	nop
 800f428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f42a:	bc08      	pop	{r3}
 800f42c:	469e      	mov	lr, r3
 800f42e:	4770      	bx	lr

0800f430 <_fini>:
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f432:	bf00      	nop
 800f434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f436:	bc08      	pop	{r3}
 800f438:	469e      	mov	lr, r3
 800f43a:	4770      	bx	lr
