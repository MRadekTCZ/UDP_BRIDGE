
UDP_v2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d2c  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08100fc4  08100fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100fd4  08100fd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08100fd8  08100fd8  00010fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  10000000  08100fdc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000018  08100ff4  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000038  08100ff4  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005e06  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000011ab  00000000  00000000  00025e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000680  00000000  00000000  00027040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000004c6  00000000  00000000  000276c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037836  00000000  00000000  00027b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000749e  00000000  00000000  0005f3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173a7b  00000000  00000000  0006685a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001954  00000000  00000000  001da2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000086  00000000  00000000  001dbc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000018 	.word	0x10000018
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100fac 	.word	0x08100fac

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000001c 	.word	0x1000001c
 81002d4:	08100fac 	.word	0x08100fac

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100650:	b480      	push	{r7}
 8100652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100654:	4b09      	ldr	r3, [pc, #36]	; (810067c <SystemInit+0x2c>)
 8100656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810065a:	4a08      	ldr	r2, [pc, #32]	; (810067c <SystemInit+0x2c>)
 810065c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100664:	4b05      	ldr	r3, [pc, #20]	; (810067c <SystemInit+0x2c>)
 8100666:	691b      	ldr	r3, [r3, #16]
 8100668:	4a04      	ldr	r2, [pc, #16]	; (810067c <SystemInit+0x2c>)
 810066a:	f043 0310 	orr.w	r3, r3, #16
 810066e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100670:	bf00      	nop
 8100672:	46bd      	mov	sp, r7
 8100674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100678:	4770      	bx	lr
 810067a:	bf00      	nop
 810067c:	e000ed00 	.word	0xe000ed00

08100680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100680:	b580      	push	{r7, lr}
 8100682:	b082      	sub	sp, #8
 8100684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	i = i+0.001;
 8100686:	4b22      	ldr	r3, [pc, #136]	; (8100710 <main+0x90>)
 8100688:	e9d3 0100 	ldrd	r0, r1, [r3]
 810068c:	a31e      	add	r3, pc, #120	; (adr r3, 8100708 <main+0x88>)
 810068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100692:	f7ff fe27 	bl	81002e4 <__adddf3>
 8100696:	4602      	mov	r2, r0
 8100698:	460b      	mov	r3, r1
 810069a:	491d      	ldr	r1, [pc, #116]	; (8100710 <main+0x90>)
 810069c:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81006a0:	4b1c      	ldr	r3, [pc, #112]	; (8100714 <main+0x94>)
 81006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006a6:	4a1b      	ldr	r2, [pc, #108]	; (8100714 <main+0x94>)
 81006a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006b0:	4b18      	ldr	r3, [pc, #96]	; (8100714 <main+0x94>)
 81006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81006ba:	607b      	str	r3, [r7, #4]
 81006bc:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006be:	2001      	movs	r0, #1
 81006c0:	f000 fa3c 	bl	8100b3c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006c4:	f000 fac6 	bl	8100c54 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006c8:	2201      	movs	r2, #1
 81006ca:	2102      	movs	r1, #2
 81006cc:	2000      	movs	r0, #0
 81006ce:	f000 fa47 	bl	8100b60 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006d2:	4b11      	ldr	r3, [pc, #68]	; (8100718 <main+0x98>)
 81006d4:	681b      	ldr	r3, [r3, #0]
 81006d6:	091b      	lsrs	r3, r3, #4
 81006d8:	f003 030f 	and.w	r3, r3, #15
 81006dc:	2b07      	cmp	r3, #7
 81006de:	d108      	bne.n	81006f2 <main+0x72>
 81006e0:	4b0e      	ldr	r3, [pc, #56]	; (810071c <main+0x9c>)
 81006e2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81006e6:	4a0d      	ldr	r2, [pc, #52]	; (810071c <main+0x9c>)
 81006e8:	f043 0301 	orr.w	r3, r3, #1
 81006ec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81006f0:	e007      	b.n	8100702 <main+0x82>
 81006f2:	4b0a      	ldr	r3, [pc, #40]	; (810071c <main+0x9c>)
 81006f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81006f8:	4a08      	ldr	r2, [pc, #32]	; (810071c <main+0x9c>)
 81006fa:	f043 0301 	orr.w	r3, r3, #1
 81006fe:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100702:	f000 f87b 	bl	81007fc <HAL_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100706:	e7fe      	b.n	8100706 <main+0x86>
 8100708:	d2f1a9fc 	.word	0xd2f1a9fc
 810070c:	3f50624d 	.word	0x3f50624d
 8100710:	10000008 	.word	0x10000008
 8100714:	58024400 	.word	0x58024400
 8100718:	e000ed00 	.word	0xe000ed00
 810071c:	58026400 	.word	0x58026400

08100720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100720:	b480      	push	{r7}
 8100722:	b083      	sub	sp, #12
 8100724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100726:	4b0a      	ldr	r3, [pc, #40]	; (8100750 <HAL_MspInit+0x30>)
 8100728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810072c:	4a08      	ldr	r2, [pc, #32]	; (8100750 <HAL_MspInit+0x30>)
 810072e:	f043 0302 	orr.w	r3, r3, #2
 8100732:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100736:	4b06      	ldr	r3, [pc, #24]	; (8100750 <HAL_MspInit+0x30>)
 8100738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810073c:	f003 0302 	and.w	r3, r3, #2
 8100740:	607b      	str	r3, [r7, #4]
 8100742:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100744:	bf00      	nop
 8100746:	370c      	adds	r7, #12
 8100748:	46bd      	mov	sp, r7
 810074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810074e:	4770      	bx	lr
 8100750:	58024400 	.word	0x58024400

08100754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100754:	b480      	push	{r7}
 8100756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100758:	e7fe      	b.n	8100758 <NMI_Handler+0x4>

0810075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810075a:	b480      	push	{r7}
 810075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810075e:	e7fe      	b.n	810075e <HardFault_Handler+0x4>

08100760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100760:	b480      	push	{r7}
 8100762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100764:	e7fe      	b.n	8100764 <MemManage_Handler+0x4>

08100766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100766:	b480      	push	{r7}
 8100768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810076a:	e7fe      	b.n	810076a <BusFault_Handler+0x4>

0810076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810076c:	b480      	push	{r7}
 810076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100770:	e7fe      	b.n	8100770 <UsageFault_Handler+0x4>

08100772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100772:	b480      	push	{r7}
 8100774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100776:	bf00      	nop
 8100778:	46bd      	mov	sp, r7
 810077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810077e:	4770      	bx	lr

08100780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100780:	b480      	push	{r7}
 8100782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100784:	bf00      	nop
 8100786:	46bd      	mov	sp, r7
 8100788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810078c:	4770      	bx	lr

0810078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810078e:	b480      	push	{r7}
 8100790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100792:	bf00      	nop
 8100794:	46bd      	mov	sp, r7
 8100796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810079a:	4770      	bx	lr

0810079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810079c:	b580      	push	{r7, lr}
 810079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81007a0:	f000 f8c0 	bl	8100924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81007a4:	bf00      	nop
 81007a6:	bd80      	pop	{r7, pc}

081007a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 81007e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81007ac:	f7ff ff50 	bl	8100650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007b0:	480c      	ldr	r0, [pc, #48]	; (81007e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007b2:	490d      	ldr	r1, [pc, #52]	; (81007e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007b4:	4a0d      	ldr	r2, [pc, #52]	; (81007ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007b8:	e002      	b.n	81007c0 <LoopCopyDataInit>

081007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007be:	3304      	adds	r3, #4

081007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007c4:	d3f9      	bcc.n	81007ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007c6:	4a0a      	ldr	r2, [pc, #40]	; (81007f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81007c8:	4c0a      	ldr	r4, [pc, #40]	; (81007f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 81007cc:	e001      	b.n	81007d2 <LoopFillZerobss>

081007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81007d0:	3204      	adds	r2, #4

081007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81007d4:	d3fb      	bcc.n	81007ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81007d6:	f000 fbc5 	bl	8100f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81007da:	f7ff ff51 	bl	8100680 <main>
  bx  lr
 81007de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007e0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007e4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007e8:	10000018 	.word	0x10000018
  ldr r2, =_sidata
 81007ec:	08100fdc 	.word	0x08100fdc
  ldr r2, =_sbss
 81007f0:	10000018 	.word	0x10000018
  ldr r4, =_ebss
 81007f4:	10000038 	.word	0x10000038

081007f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007f8:	e7fe      	b.n	81007f8 <ADC3_IRQHandler>
	...

081007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007fc:	b580      	push	{r7, lr}
 81007fe:	b082      	sub	sp, #8
 8100800:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100802:	4b28      	ldr	r3, [pc, #160]	; (81008a4 <HAL_Init+0xa8>)
 8100804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100808:	4a26      	ldr	r2, [pc, #152]	; (81008a4 <HAL_Init+0xa8>)
 810080a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810080e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100812:	4b24      	ldr	r3, [pc, #144]	; (81008a4 <HAL_Init+0xa8>)
 8100814:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810081c:	603b      	str	r3, [r7, #0]
 810081e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100820:	4b21      	ldr	r3, [pc, #132]	; (81008a8 <HAL_Init+0xac>)
 8100822:	681b      	ldr	r3, [r3, #0]
 8100824:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810082c:	4a1e      	ldr	r2, [pc, #120]	; (81008a8 <HAL_Init+0xac>)
 810082e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100832:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100834:	4b1c      	ldr	r3, [pc, #112]	; (81008a8 <HAL_Init+0xac>)
 8100836:	681b      	ldr	r3, [r3, #0]
 8100838:	4a1b      	ldr	r2, [pc, #108]	; (81008a8 <HAL_Init+0xac>)
 810083a:	f043 0301 	orr.w	r3, r3, #1
 810083e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100840:	2003      	movs	r0, #3
 8100842:	f000 f935 	bl	8100ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100846:	f000 fa13 	bl	8100c70 <HAL_RCC_GetSysClockFreq>
 810084a:	4602      	mov	r2, r0
 810084c:	4b15      	ldr	r3, [pc, #84]	; (81008a4 <HAL_Init+0xa8>)
 810084e:	699b      	ldr	r3, [r3, #24]
 8100850:	0a1b      	lsrs	r3, r3, #8
 8100852:	f003 030f 	and.w	r3, r3, #15
 8100856:	4915      	ldr	r1, [pc, #84]	; (81008ac <HAL_Init+0xb0>)
 8100858:	5ccb      	ldrb	r3, [r1, r3]
 810085a:	f003 031f 	and.w	r3, r3, #31
 810085e:	fa22 f303 	lsr.w	r3, r2, r3
 8100862:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100864:	4b0f      	ldr	r3, [pc, #60]	; (81008a4 <HAL_Init+0xa8>)
 8100866:	699b      	ldr	r3, [r3, #24]
 8100868:	f003 030f 	and.w	r3, r3, #15
 810086c:	4a0f      	ldr	r2, [pc, #60]	; (81008ac <HAL_Init+0xb0>)
 810086e:	5cd3      	ldrb	r3, [r2, r3]
 8100870:	f003 031f 	and.w	r3, r3, #31
 8100874:	687a      	ldr	r2, [r7, #4]
 8100876:	fa22 f303 	lsr.w	r3, r2, r3
 810087a:	4a0d      	ldr	r2, [pc, #52]	; (81008b0 <HAL_Init+0xb4>)
 810087c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810087e:	4b0c      	ldr	r3, [pc, #48]	; (81008b0 <HAL_Init+0xb4>)
 8100880:	681b      	ldr	r3, [r3, #0]
 8100882:	4a0c      	ldr	r2, [pc, #48]	; (81008b4 <HAL_Init+0xb8>)
 8100884:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100886:	2000      	movs	r0, #0
 8100888:	f000 f816 	bl	81008b8 <HAL_InitTick>
 810088c:	4603      	mov	r3, r0
 810088e:	2b00      	cmp	r3, #0
 8100890:	d001      	beq.n	8100896 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100892:	2301      	movs	r3, #1
 8100894:	e002      	b.n	810089c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100896:	f7ff ff43 	bl	8100720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810089a:	2300      	movs	r3, #0
}
 810089c:	4618      	mov	r0, r3
 810089e:	3708      	adds	r7, #8
 81008a0:	46bd      	mov	sp, r7
 81008a2:	bd80      	pop	{r7, pc}
 81008a4:	58024400 	.word	0x58024400
 81008a8:	40024400 	.word	0x40024400
 81008ac:	08100fc4 	.word	0x08100fc4
 81008b0:	10000004 	.word	0x10000004
 81008b4:	10000000 	.word	0x10000000

081008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008b8:	b580      	push	{r7, lr}
 81008ba:	b082      	sub	sp, #8
 81008bc:	af00      	add	r7, sp, #0
 81008be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81008c0:	4b15      	ldr	r3, [pc, #84]	; (8100918 <HAL_InitTick+0x60>)
 81008c2:	781b      	ldrb	r3, [r3, #0]
 81008c4:	2b00      	cmp	r3, #0
 81008c6:	d101      	bne.n	81008cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81008c8:	2301      	movs	r3, #1
 81008ca:	e021      	b.n	8100910 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81008cc:	4b13      	ldr	r3, [pc, #76]	; (810091c <HAL_InitTick+0x64>)
 81008ce:	681a      	ldr	r2, [r3, #0]
 81008d0:	4b11      	ldr	r3, [pc, #68]	; (8100918 <HAL_InitTick+0x60>)
 81008d2:	781b      	ldrb	r3, [r3, #0]
 81008d4:	4619      	mov	r1, r3
 81008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81008da:	fbb3 f3f1 	udiv	r3, r3, r1
 81008de:	fbb2 f3f3 	udiv	r3, r2, r3
 81008e2:	4618      	mov	r0, r3
 81008e4:	f000 f909 	bl	8100afa <HAL_SYSTICK_Config>
 81008e8:	4603      	mov	r3, r0
 81008ea:	2b00      	cmp	r3, #0
 81008ec:	d001      	beq.n	81008f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81008ee:	2301      	movs	r3, #1
 81008f0:	e00e      	b.n	8100910 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008f2:	687b      	ldr	r3, [r7, #4]
 81008f4:	2b0f      	cmp	r3, #15
 81008f6:	d80a      	bhi.n	810090e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81008f8:	2200      	movs	r2, #0
 81008fa:	6879      	ldr	r1, [r7, #4]
 81008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8100900:	f000 f8e1 	bl	8100ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100904:	4a06      	ldr	r2, [pc, #24]	; (8100920 <HAL_InitTick+0x68>)
 8100906:	687b      	ldr	r3, [r7, #4]
 8100908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810090a:	2300      	movs	r3, #0
 810090c:	e000      	b.n	8100910 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810090e:	2301      	movs	r3, #1
}
 8100910:	4618      	mov	r0, r3
 8100912:	3708      	adds	r7, #8
 8100914:	46bd      	mov	sp, r7
 8100916:	bd80      	pop	{r7, pc}
 8100918:	10000014 	.word	0x10000014
 810091c:	10000000 	.word	0x10000000
 8100920:	10000010 	.word	0x10000010

08100924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100924:	b480      	push	{r7}
 8100926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100928:	4b06      	ldr	r3, [pc, #24]	; (8100944 <HAL_IncTick+0x20>)
 810092a:	781b      	ldrb	r3, [r3, #0]
 810092c:	461a      	mov	r2, r3
 810092e:	4b06      	ldr	r3, [pc, #24]	; (8100948 <HAL_IncTick+0x24>)
 8100930:	681b      	ldr	r3, [r3, #0]
 8100932:	4413      	add	r3, r2
 8100934:	4a04      	ldr	r2, [pc, #16]	; (8100948 <HAL_IncTick+0x24>)
 8100936:	6013      	str	r3, [r2, #0]
}
 8100938:	bf00      	nop
 810093a:	46bd      	mov	sp, r7
 810093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100940:	4770      	bx	lr
 8100942:	bf00      	nop
 8100944:	10000014 	.word	0x10000014
 8100948:	10000034 	.word	0x10000034

0810094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810094c:	b480      	push	{r7}
 810094e:	b085      	sub	sp, #20
 8100950:	af00      	add	r7, sp, #0
 8100952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	f003 0307 	and.w	r3, r3, #7
 810095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810095c:	4b0c      	ldr	r3, [pc, #48]	; (8100990 <__NVIC_SetPriorityGrouping+0x44>)
 810095e:	68db      	ldr	r3, [r3, #12]
 8100960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100962:	68ba      	ldr	r2, [r7, #8]
 8100964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100968:	4013      	ands	r3, r2
 810096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810096c:	68fb      	ldr	r3, [r7, #12]
 810096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100970:	68bb      	ldr	r3, [r7, #8]
 8100972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810097e:	4a04      	ldr	r2, [pc, #16]	; (8100990 <__NVIC_SetPriorityGrouping+0x44>)
 8100980:	68bb      	ldr	r3, [r7, #8]
 8100982:	60d3      	str	r3, [r2, #12]
}
 8100984:	bf00      	nop
 8100986:	3714      	adds	r7, #20
 8100988:	46bd      	mov	sp, r7
 810098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810098e:	4770      	bx	lr
 8100990:	e000ed00 	.word	0xe000ed00

08100994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100994:	b480      	push	{r7}
 8100996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100998:	4b04      	ldr	r3, [pc, #16]	; (81009ac <__NVIC_GetPriorityGrouping+0x18>)
 810099a:	68db      	ldr	r3, [r3, #12]
 810099c:	0a1b      	lsrs	r3, r3, #8
 810099e:	f003 0307 	and.w	r3, r3, #7
}
 81009a2:	4618      	mov	r0, r3
 81009a4:	46bd      	mov	sp, r7
 81009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009aa:	4770      	bx	lr
 81009ac:	e000ed00 	.word	0xe000ed00

081009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81009b0:	b480      	push	{r7}
 81009b2:	b083      	sub	sp, #12
 81009b4:	af00      	add	r7, sp, #0
 81009b6:	4603      	mov	r3, r0
 81009b8:	6039      	str	r1, [r7, #0]
 81009ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009c0:	2b00      	cmp	r3, #0
 81009c2:	db0a      	blt.n	81009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009c4:	683b      	ldr	r3, [r7, #0]
 81009c6:	b2da      	uxtb	r2, r3
 81009c8:	490c      	ldr	r1, [pc, #48]	; (81009fc <__NVIC_SetPriority+0x4c>)
 81009ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009ce:	0112      	lsls	r2, r2, #4
 81009d0:	b2d2      	uxtb	r2, r2
 81009d2:	440b      	add	r3, r1
 81009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81009d8:	e00a      	b.n	81009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009da:	683b      	ldr	r3, [r7, #0]
 81009dc:	b2da      	uxtb	r2, r3
 81009de:	4908      	ldr	r1, [pc, #32]	; (8100a00 <__NVIC_SetPriority+0x50>)
 81009e0:	88fb      	ldrh	r3, [r7, #6]
 81009e2:	f003 030f 	and.w	r3, r3, #15
 81009e6:	3b04      	subs	r3, #4
 81009e8:	0112      	lsls	r2, r2, #4
 81009ea:	b2d2      	uxtb	r2, r2
 81009ec:	440b      	add	r3, r1
 81009ee:	761a      	strb	r2, [r3, #24]
}
 81009f0:	bf00      	nop
 81009f2:	370c      	adds	r7, #12
 81009f4:	46bd      	mov	sp, r7
 81009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009fa:	4770      	bx	lr
 81009fc:	e000e100 	.word	0xe000e100
 8100a00:	e000ed00 	.word	0xe000ed00

08100a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a04:	b480      	push	{r7}
 8100a06:	b089      	sub	sp, #36	; 0x24
 8100a08:	af00      	add	r7, sp, #0
 8100a0a:	60f8      	str	r0, [r7, #12]
 8100a0c:	60b9      	str	r1, [r7, #8]
 8100a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a10:	68fb      	ldr	r3, [r7, #12]
 8100a12:	f003 0307 	and.w	r3, r3, #7
 8100a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a18:	69fb      	ldr	r3, [r7, #28]
 8100a1a:	f1c3 0307 	rsb	r3, r3, #7
 8100a1e:	2b04      	cmp	r3, #4
 8100a20:	bf28      	it	cs
 8100a22:	2304      	movcs	r3, #4
 8100a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100a26:	69fb      	ldr	r3, [r7, #28]
 8100a28:	3304      	adds	r3, #4
 8100a2a:	2b06      	cmp	r3, #6
 8100a2c:	d902      	bls.n	8100a34 <NVIC_EncodePriority+0x30>
 8100a2e:	69fb      	ldr	r3, [r7, #28]
 8100a30:	3b03      	subs	r3, #3
 8100a32:	e000      	b.n	8100a36 <NVIC_EncodePriority+0x32>
 8100a34:	2300      	movs	r3, #0
 8100a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a38:	f04f 32ff 	mov.w	r2, #4294967295
 8100a3c:	69bb      	ldr	r3, [r7, #24]
 8100a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a42:	43da      	mvns	r2, r3
 8100a44:	68bb      	ldr	r3, [r7, #8]
 8100a46:	401a      	ands	r2, r3
 8100a48:	697b      	ldr	r3, [r7, #20]
 8100a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8100a50:	697b      	ldr	r3, [r7, #20]
 8100a52:	fa01 f303 	lsl.w	r3, r1, r3
 8100a56:	43d9      	mvns	r1, r3
 8100a58:	687b      	ldr	r3, [r7, #4]
 8100a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a5c:	4313      	orrs	r3, r2
         );
}
 8100a5e:	4618      	mov	r0, r3
 8100a60:	3724      	adds	r7, #36	; 0x24
 8100a62:	46bd      	mov	sp, r7
 8100a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a68:	4770      	bx	lr
	...

08100a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100a6c:	b580      	push	{r7, lr}
 8100a6e:	b082      	sub	sp, #8
 8100a70:	af00      	add	r7, sp, #0
 8100a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100a74:	687b      	ldr	r3, [r7, #4]
 8100a76:	3b01      	subs	r3, #1
 8100a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100a7c:	d301      	bcc.n	8100a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100a7e:	2301      	movs	r3, #1
 8100a80:	e00f      	b.n	8100aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100a82:	4a0a      	ldr	r2, [pc, #40]	; (8100aac <SysTick_Config+0x40>)
 8100a84:	687b      	ldr	r3, [r7, #4]
 8100a86:	3b01      	subs	r3, #1
 8100a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100a8a:	210f      	movs	r1, #15
 8100a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8100a90:	f7ff ff8e 	bl	81009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100a94:	4b05      	ldr	r3, [pc, #20]	; (8100aac <SysTick_Config+0x40>)
 8100a96:	2200      	movs	r2, #0
 8100a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100a9a:	4b04      	ldr	r3, [pc, #16]	; (8100aac <SysTick_Config+0x40>)
 8100a9c:	2207      	movs	r2, #7
 8100a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100aa0:	2300      	movs	r3, #0
}
 8100aa2:	4618      	mov	r0, r3
 8100aa4:	3708      	adds	r7, #8
 8100aa6:	46bd      	mov	sp, r7
 8100aa8:	bd80      	pop	{r7, pc}
 8100aaa:	bf00      	nop
 8100aac:	e000e010 	.word	0xe000e010

08100ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ab0:	b580      	push	{r7, lr}
 8100ab2:	b082      	sub	sp, #8
 8100ab4:	af00      	add	r7, sp, #0
 8100ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100ab8:	6878      	ldr	r0, [r7, #4]
 8100aba:	f7ff ff47 	bl	810094c <__NVIC_SetPriorityGrouping>
}
 8100abe:	bf00      	nop
 8100ac0:	3708      	adds	r7, #8
 8100ac2:	46bd      	mov	sp, r7
 8100ac4:	bd80      	pop	{r7, pc}

08100ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ac6:	b580      	push	{r7, lr}
 8100ac8:	b086      	sub	sp, #24
 8100aca:	af00      	add	r7, sp, #0
 8100acc:	4603      	mov	r3, r0
 8100ace:	60b9      	str	r1, [r7, #8]
 8100ad0:	607a      	str	r2, [r7, #4]
 8100ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ad4:	f7ff ff5e 	bl	8100994 <__NVIC_GetPriorityGrouping>
 8100ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100ada:	687a      	ldr	r2, [r7, #4]
 8100adc:	68b9      	ldr	r1, [r7, #8]
 8100ade:	6978      	ldr	r0, [r7, #20]
 8100ae0:	f7ff ff90 	bl	8100a04 <NVIC_EncodePriority>
 8100ae4:	4602      	mov	r2, r0
 8100ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100aea:	4611      	mov	r1, r2
 8100aec:	4618      	mov	r0, r3
 8100aee:	f7ff ff5f 	bl	81009b0 <__NVIC_SetPriority>
}
 8100af2:	bf00      	nop
 8100af4:	3718      	adds	r7, #24
 8100af6:	46bd      	mov	sp, r7
 8100af8:	bd80      	pop	{r7, pc}

08100afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100afa:	b580      	push	{r7, lr}
 8100afc:	b082      	sub	sp, #8
 8100afe:	af00      	add	r7, sp, #0
 8100b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b02:	6878      	ldr	r0, [r7, #4]
 8100b04:	f7ff ffb2 	bl	8100a6c <SysTick_Config>
 8100b08:	4603      	mov	r3, r0
}
 8100b0a:	4618      	mov	r0, r3
 8100b0c:	3708      	adds	r7, #8
 8100b0e:	46bd      	mov	sp, r7
 8100b10:	bd80      	pop	{r7, pc}
	...

08100b14 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b14:	b480      	push	{r7}
 8100b16:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b18:	4b07      	ldr	r3, [pc, #28]	; (8100b38 <HAL_GetCurrentCPUID+0x24>)
 8100b1a:	681b      	ldr	r3, [r3, #0]
 8100b1c:	091b      	lsrs	r3, r3, #4
 8100b1e:	f003 030f 	and.w	r3, r3, #15
 8100b22:	2b07      	cmp	r3, #7
 8100b24:	d101      	bne.n	8100b2a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b26:	2303      	movs	r3, #3
 8100b28:	e000      	b.n	8100b2c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b2a:	2301      	movs	r3, #1
  }
}
 8100b2c:	4618      	mov	r0, r3
 8100b2e:	46bd      	mov	sp, r7
 8100b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b34:	4770      	bx	lr
 8100b36:	bf00      	nop
 8100b38:	e000ed00 	.word	0xe000ed00

08100b3c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100b3c:	b480      	push	{r7}
 8100b3e:	b083      	sub	sp, #12
 8100b40:	af00      	add	r7, sp, #0
 8100b42:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100b44:	4b05      	ldr	r3, [pc, #20]	; (8100b5c <HAL_HSEM_ActivateNotification+0x20>)
 8100b46:	681a      	ldr	r2, [r3, #0]
 8100b48:	4904      	ldr	r1, [pc, #16]	; (8100b5c <HAL_HSEM_ActivateNotification+0x20>)
 8100b4a:	687b      	ldr	r3, [r7, #4]
 8100b4c:	4313      	orrs	r3, r2
 8100b4e:	600b      	str	r3, [r1, #0]
#endif
}
 8100b50:	bf00      	nop
 8100b52:	370c      	adds	r7, #12
 8100b54:	46bd      	mov	sp, r7
 8100b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b5a:	4770      	bx	lr
 8100b5c:	58026510 	.word	0x58026510

08100b60 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100b60:	b580      	push	{r7, lr}
 8100b62:	b084      	sub	sp, #16
 8100b64:	af00      	add	r7, sp, #0
 8100b66:	60f8      	str	r0, [r7, #12]
 8100b68:	460b      	mov	r3, r1
 8100b6a:	607a      	str	r2, [r7, #4]
 8100b6c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100b6e:	4b37      	ldr	r3, [pc, #220]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100b70:	681b      	ldr	r3, [r3, #0]
 8100b72:	f023 0201 	bic.w	r2, r3, #1
 8100b76:	4935      	ldr	r1, [pc, #212]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100b78:	68fb      	ldr	r3, [r7, #12]
 8100b7a:	4313      	orrs	r3, r2
 8100b7c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	2b00      	cmp	r3, #0
 8100b82:	d123      	bne.n	8100bcc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100b84:	f7ff ffc6 	bl	8100b14 <HAL_GetCurrentCPUID>
 8100b88:	4603      	mov	r3, r0
 8100b8a:	2b03      	cmp	r3, #3
 8100b8c:	d158      	bne.n	8100c40 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100b8e:	4b2f      	ldr	r3, [pc, #188]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100b90:	691b      	ldr	r3, [r3, #16]
 8100b92:	4a2e      	ldr	r2, [pc, #184]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100b94:	f023 0301 	bic.w	r3, r3, #1
 8100b98:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100b9a:	4b2d      	ldr	r3, [pc, #180]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100b9c:	691b      	ldr	r3, [r3, #16]
 8100b9e:	4a2c      	ldr	r2, [pc, #176]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ba0:	f043 0304 	orr.w	r3, r3, #4
 8100ba4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100ba6:	f3bf 8f4f 	dsb	sy
}
 8100baa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100bac:	f3bf 8f6f 	isb	sy
}
 8100bb0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100bb2:	7afb      	ldrb	r3, [r7, #11]
 8100bb4:	2b01      	cmp	r3, #1
 8100bb6:	d101      	bne.n	8100bbc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100bb8:	bf30      	wfi
 8100bba:	e000      	b.n	8100bbe <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100bbc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100bbe:	4b24      	ldr	r3, [pc, #144]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100bc0:	691b      	ldr	r3, [r3, #16]
 8100bc2:	4a23      	ldr	r2, [pc, #140]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100bc4:	f023 0304 	bic.w	r3, r3, #4
 8100bc8:	6113      	str	r3, [r2, #16]
 8100bca:	e03c      	b.n	8100c46 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100bcc:	687b      	ldr	r3, [r7, #4]
 8100bce:	2b01      	cmp	r3, #1
 8100bd0:	d123      	bne.n	8100c1a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100bd2:	f7ff ff9f 	bl	8100b14 <HAL_GetCurrentCPUID>
 8100bd6:	4603      	mov	r3, r0
 8100bd8:	2b01      	cmp	r3, #1
 8100bda:	d133      	bne.n	8100c44 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100bdc:	4b1b      	ldr	r3, [pc, #108]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100bde:	695b      	ldr	r3, [r3, #20]
 8100be0:	4a1a      	ldr	r2, [pc, #104]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100be2:	f023 0302 	bic.w	r3, r3, #2
 8100be6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100be8:	4b19      	ldr	r3, [pc, #100]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100bea:	691b      	ldr	r3, [r3, #16]
 8100bec:	4a18      	ldr	r2, [pc, #96]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100bee:	f043 0304 	orr.w	r3, r3, #4
 8100bf2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100bf4:	f3bf 8f4f 	dsb	sy
}
 8100bf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100bfa:	f3bf 8f6f 	isb	sy
}
 8100bfe:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100c00:	7afb      	ldrb	r3, [r7, #11]
 8100c02:	2b01      	cmp	r3, #1
 8100c04:	d101      	bne.n	8100c0a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100c06:	bf30      	wfi
 8100c08:	e000      	b.n	8100c0c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100c0a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100c0c:	4b10      	ldr	r3, [pc, #64]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c0e:	691b      	ldr	r3, [r3, #16]
 8100c10:	4a0f      	ldr	r2, [pc, #60]	; (8100c50 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c12:	f023 0304 	bic.w	r3, r3, #4
 8100c16:	6113      	str	r3, [r2, #16]
 8100c18:	e015      	b.n	8100c46 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100c1a:	f7ff ff7b 	bl	8100b14 <HAL_GetCurrentCPUID>
 8100c1e:	4603      	mov	r3, r0
 8100c20:	2b03      	cmp	r3, #3
 8100c22:	d106      	bne.n	8100c32 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100c24:	4b09      	ldr	r3, [pc, #36]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c26:	691b      	ldr	r3, [r3, #16]
 8100c28:	4a08      	ldr	r2, [pc, #32]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c2a:	f023 0304 	bic.w	r3, r3, #4
 8100c2e:	6113      	str	r3, [r2, #16]
 8100c30:	e009      	b.n	8100c46 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100c32:	4b06      	ldr	r3, [pc, #24]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c34:	695b      	ldr	r3, [r3, #20]
 8100c36:	4a05      	ldr	r2, [pc, #20]	; (8100c4c <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c38:	f023 0304 	bic.w	r3, r3, #4
 8100c3c:	6153      	str	r3, [r2, #20]
 8100c3e:	e002      	b.n	8100c46 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100c40:	bf00      	nop
 8100c42:	e000      	b.n	8100c46 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100c44:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100c46:	3710      	adds	r7, #16
 8100c48:	46bd      	mov	sp, r7
 8100c4a:	bd80      	pop	{r7, pc}
 8100c4c:	58024800 	.word	0x58024800
 8100c50:	e000ed00 	.word	0xe000ed00

08100c54 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100c54:	b580      	push	{r7, lr}
 8100c56:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100c58:	f7ff ff5c 	bl	8100b14 <HAL_GetCurrentCPUID>
 8100c5c:	4603      	mov	r3, r0
 8100c5e:	2b03      	cmp	r3, #3
 8100c60:	d101      	bne.n	8100c66 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100c62:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100c64:	e001      	b.n	8100c6a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100c66:	bf40      	sev
    __WFE ();
 8100c68:	bf20      	wfe
}
 8100c6a:	bf00      	nop
 8100c6c:	bd80      	pop	{r7, pc}
	...

08100c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100c70:	b480      	push	{r7}
 8100c72:	b089      	sub	sp, #36	; 0x24
 8100c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100c76:	4bb3      	ldr	r3, [pc, #716]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c78:	691b      	ldr	r3, [r3, #16]
 8100c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100c7e:	2b18      	cmp	r3, #24
 8100c80:	f200 8155 	bhi.w	8100f2e <HAL_RCC_GetSysClockFreq+0x2be>
 8100c84:	a201      	add	r2, pc, #4	; (adr r2, 8100c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8100c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100c8a:	bf00      	nop
 8100c8c:	08100cf1 	.word	0x08100cf1
 8100c90:	08100f2f 	.word	0x08100f2f
 8100c94:	08100f2f 	.word	0x08100f2f
 8100c98:	08100f2f 	.word	0x08100f2f
 8100c9c:	08100f2f 	.word	0x08100f2f
 8100ca0:	08100f2f 	.word	0x08100f2f
 8100ca4:	08100f2f 	.word	0x08100f2f
 8100ca8:	08100f2f 	.word	0x08100f2f
 8100cac:	08100d17 	.word	0x08100d17
 8100cb0:	08100f2f 	.word	0x08100f2f
 8100cb4:	08100f2f 	.word	0x08100f2f
 8100cb8:	08100f2f 	.word	0x08100f2f
 8100cbc:	08100f2f 	.word	0x08100f2f
 8100cc0:	08100f2f 	.word	0x08100f2f
 8100cc4:	08100f2f 	.word	0x08100f2f
 8100cc8:	08100f2f 	.word	0x08100f2f
 8100ccc:	08100d1d 	.word	0x08100d1d
 8100cd0:	08100f2f 	.word	0x08100f2f
 8100cd4:	08100f2f 	.word	0x08100f2f
 8100cd8:	08100f2f 	.word	0x08100f2f
 8100cdc:	08100f2f 	.word	0x08100f2f
 8100ce0:	08100f2f 	.word	0x08100f2f
 8100ce4:	08100f2f 	.word	0x08100f2f
 8100ce8:	08100f2f 	.word	0x08100f2f
 8100cec:	08100d23 	.word	0x08100d23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100cf0:	4b94      	ldr	r3, [pc, #592]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100cf2:	681b      	ldr	r3, [r3, #0]
 8100cf4:	f003 0320 	and.w	r3, r3, #32
 8100cf8:	2b00      	cmp	r3, #0
 8100cfa:	d009      	beq.n	8100d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100cfc:	4b91      	ldr	r3, [pc, #580]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100cfe:	681b      	ldr	r3, [r3, #0]
 8100d00:	08db      	lsrs	r3, r3, #3
 8100d02:	f003 0303 	and.w	r3, r3, #3
 8100d06:	4a90      	ldr	r2, [pc, #576]	; (8100f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100d08:	fa22 f303 	lsr.w	r3, r2, r3
 8100d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100d0e:	e111      	b.n	8100f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100d10:	4b8d      	ldr	r3, [pc, #564]	; (8100f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100d12:	61bb      	str	r3, [r7, #24]
      break;
 8100d14:	e10e      	b.n	8100f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100d16:	4b8d      	ldr	r3, [pc, #564]	; (8100f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100d18:	61bb      	str	r3, [r7, #24]
      break;
 8100d1a:	e10b      	b.n	8100f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100d1c:	4b8c      	ldr	r3, [pc, #560]	; (8100f50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100d1e:	61bb      	str	r3, [r7, #24]
      break;
 8100d20:	e108      	b.n	8100f34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100d22:	4b88      	ldr	r3, [pc, #544]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100d26:	f003 0303 	and.w	r3, r3, #3
 8100d2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100d2c:	4b85      	ldr	r3, [pc, #532]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100d30:	091b      	lsrs	r3, r3, #4
 8100d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100d36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100d38:	4b82      	ldr	r3, [pc, #520]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100d3c:	f003 0301 	and.w	r3, r3, #1
 8100d40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100d42:	4b80      	ldr	r3, [pc, #512]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100d46:	08db      	lsrs	r3, r3, #3
 8100d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100d4c:	68fa      	ldr	r2, [r7, #12]
 8100d4e:	fb02 f303 	mul.w	r3, r2, r3
 8100d52:	ee07 3a90 	vmov	s15, r3
 8100d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100d5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100d5e:	693b      	ldr	r3, [r7, #16]
 8100d60:	2b00      	cmp	r3, #0
 8100d62:	f000 80e1 	beq.w	8100f28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100d66:	697b      	ldr	r3, [r7, #20]
 8100d68:	2b02      	cmp	r3, #2
 8100d6a:	f000 8083 	beq.w	8100e74 <HAL_RCC_GetSysClockFreq+0x204>
 8100d6e:	697b      	ldr	r3, [r7, #20]
 8100d70:	2b02      	cmp	r3, #2
 8100d72:	f200 80a1 	bhi.w	8100eb8 <HAL_RCC_GetSysClockFreq+0x248>
 8100d76:	697b      	ldr	r3, [r7, #20]
 8100d78:	2b00      	cmp	r3, #0
 8100d7a:	d003      	beq.n	8100d84 <HAL_RCC_GetSysClockFreq+0x114>
 8100d7c:	697b      	ldr	r3, [r7, #20]
 8100d7e:	2b01      	cmp	r3, #1
 8100d80:	d056      	beq.n	8100e30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100d82:	e099      	b.n	8100eb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100d84:	4b6f      	ldr	r3, [pc, #444]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d86:	681b      	ldr	r3, [r3, #0]
 8100d88:	f003 0320 	and.w	r3, r3, #32
 8100d8c:	2b00      	cmp	r3, #0
 8100d8e:	d02d      	beq.n	8100dec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100d90:	4b6c      	ldr	r3, [pc, #432]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d92:	681b      	ldr	r3, [r3, #0]
 8100d94:	08db      	lsrs	r3, r3, #3
 8100d96:	f003 0303 	and.w	r3, r3, #3
 8100d9a:	4a6b      	ldr	r2, [pc, #428]	; (8100f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8100da0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	ee07 3a90 	vmov	s15, r3
 8100da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100dac:	693b      	ldr	r3, [r7, #16]
 8100dae:	ee07 3a90 	vmov	s15, r3
 8100db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100dba:	4b62      	ldr	r3, [pc, #392]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100dc2:	ee07 3a90 	vmov	s15, r3
 8100dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8100dce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8100f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100de6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100dea:	e087      	b.n	8100efc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100dec:	693b      	ldr	r3, [r7, #16]
 8100dee:	ee07 3a90 	vmov	s15, r3
 8100df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100df6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8100f58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100dfe:	4b51      	ldr	r3, [pc, #324]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100e06:	ee07 3a90 	vmov	s15, r3
 8100e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100e12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8100f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100e2e:	e065      	b.n	8100efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100e30:	693b      	ldr	r3, [r7, #16]
 8100e32:	ee07 3a90 	vmov	s15, r3
 8100e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8100f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8100e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100e42:	4b40      	ldr	r3, [pc, #256]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100e4a:	ee07 3a90 	vmov	s15, r3
 8100e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8100e56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8100f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100e72:	e043      	b.n	8100efc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100e74:	693b      	ldr	r3, [r7, #16]
 8100e76:	ee07 3a90 	vmov	s15, r3
 8100e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8100f60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100e86:	4b2f      	ldr	r3, [pc, #188]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100e8e:	ee07 3a90 	vmov	s15, r3
 8100e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8100e9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8100f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100eb6:	e021      	b.n	8100efc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100eb8:	693b      	ldr	r3, [r7, #16]
 8100eba:	ee07 3a90 	vmov	s15, r3
 8100ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ec2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8100f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8100ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100eca:	4b1e      	ldr	r3, [pc, #120]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ed2:	ee07 3a90 	vmov	s15, r3
 8100ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8100ede:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8100f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100efa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100efc:	4b11      	ldr	r3, [pc, #68]	; (8100f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f00:	0a5b      	lsrs	r3, r3, #9
 8100f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100f06:	3301      	adds	r3, #1
 8100f08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100f0a:	683b      	ldr	r3, [r7, #0]
 8100f0c:	ee07 3a90 	vmov	s15, r3
 8100f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8100f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100f20:	ee17 3a90 	vmov	r3, s15
 8100f24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100f26:	e005      	b.n	8100f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100f28:	2300      	movs	r3, #0
 8100f2a:	61bb      	str	r3, [r7, #24]
      break;
 8100f2c:	e002      	b.n	8100f34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100f2e:	4b07      	ldr	r3, [pc, #28]	; (8100f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100f30:	61bb      	str	r3, [r7, #24]
      break;
 8100f32:	bf00      	nop
  }

  return sysclockfreq;
 8100f34:	69bb      	ldr	r3, [r7, #24]
}
 8100f36:	4618      	mov	r0, r3
 8100f38:	3724      	adds	r7, #36	; 0x24
 8100f3a:	46bd      	mov	sp, r7
 8100f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f40:	4770      	bx	lr
 8100f42:	bf00      	nop
 8100f44:	58024400 	.word	0x58024400
 8100f48:	03d09000 	.word	0x03d09000
 8100f4c:	003d0900 	.word	0x003d0900
 8100f50:	007a1200 	.word	0x007a1200
 8100f54:	46000000 	.word	0x46000000
 8100f58:	4c742400 	.word	0x4c742400
 8100f5c:	4a742400 	.word	0x4a742400
 8100f60:	4af42400 	.word	0x4af42400

08100f64 <__libc_init_array>:
 8100f64:	b570      	push	{r4, r5, r6, lr}
 8100f66:	4d0d      	ldr	r5, [pc, #52]	; (8100f9c <__libc_init_array+0x38>)
 8100f68:	4c0d      	ldr	r4, [pc, #52]	; (8100fa0 <__libc_init_array+0x3c>)
 8100f6a:	1b64      	subs	r4, r4, r5
 8100f6c:	10a4      	asrs	r4, r4, #2
 8100f6e:	2600      	movs	r6, #0
 8100f70:	42a6      	cmp	r6, r4
 8100f72:	d109      	bne.n	8100f88 <__libc_init_array+0x24>
 8100f74:	4d0b      	ldr	r5, [pc, #44]	; (8100fa4 <__libc_init_array+0x40>)
 8100f76:	4c0c      	ldr	r4, [pc, #48]	; (8100fa8 <__libc_init_array+0x44>)
 8100f78:	f000 f818 	bl	8100fac <_init>
 8100f7c:	1b64      	subs	r4, r4, r5
 8100f7e:	10a4      	asrs	r4, r4, #2
 8100f80:	2600      	movs	r6, #0
 8100f82:	42a6      	cmp	r6, r4
 8100f84:	d105      	bne.n	8100f92 <__libc_init_array+0x2e>
 8100f86:	bd70      	pop	{r4, r5, r6, pc}
 8100f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f8c:	4798      	blx	r3
 8100f8e:	3601      	adds	r6, #1
 8100f90:	e7ee      	b.n	8100f70 <__libc_init_array+0xc>
 8100f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8100f96:	4798      	blx	r3
 8100f98:	3601      	adds	r6, #1
 8100f9a:	e7f2      	b.n	8100f82 <__libc_init_array+0x1e>
 8100f9c:	08100fd4 	.word	0x08100fd4
 8100fa0:	08100fd4 	.word	0x08100fd4
 8100fa4:	08100fd4 	.word	0x08100fd4
 8100fa8:	08100fd8 	.word	0x08100fd8

08100fac <_init>:
 8100fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100fae:	bf00      	nop
 8100fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100fb2:	bc08      	pop	{r3}
 8100fb4:	469e      	mov	lr, r3
 8100fb6:	4770      	bx	lr

08100fb8 <_fini>:
 8100fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100fba:	bf00      	nop
 8100fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100fbe:	bc08      	pop	{r3}
 8100fc0:	469e      	mov	lr, r3
 8100fc2:	4770      	bx	lr
