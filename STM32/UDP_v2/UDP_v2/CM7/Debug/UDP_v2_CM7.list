
UDP_v2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b0  080131c4  080131c4  000231c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016274  08016274  0003014c  2**0
                  CONTENTS
  4 .ARM          00000008  08016274  08016274  00026274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801627c  0801627c  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801627c  0801627c  0002627c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016280  08016280  00026280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  08016284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400008c  08016310  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000ec  08016370  000300ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008284  24000150  080163d0  00030150  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  240083d4  080163d0  000383d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00029720  00000000  00000000  000301bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006612  00000000  00000000  000598dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001c58  00000000  00000000  0005fef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001663  00000000  00000000  00061b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00047b0a  00000000  00000000  000631ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033166  00000000  00000000  000aacb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00193a86  00000000  00000000  000dde1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007cdc  00000000  00000000  002718a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000086  00000000  00000000  00279580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000150 	.word	0x24000150
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080131ac 	.word	0x080131ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000154 	.word	0x24000154
 80002dc:	080131ac 	.word	0x080131ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_GPIO_Init+0xe4>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a35      	ldr	r2, [pc, #212]	; (800088c <MX_GPIO_Init+0xe4>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_GPIO_Init+0xe4>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0310 	and.w	r3, r3, #16
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0xe4>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0xe4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_GPIO_Init+0xe4>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_GPIO_Init+0xe4>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a26      	ldr	r2, [pc, #152]	; (800088c <MX_GPIO_Init+0xe4>)
 80007f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_GPIO_Init+0xe4>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xe4>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	4a1f      	ldr	r2, [pc, #124]	; (800088c <MX_GPIO_Init+0xe4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xe4>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xe4>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0xe4>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xe4>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0xe4>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_GPIO_Init+0xe4>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_GPIO_Init+0xe4>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_GPIO_Init+0xe4>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0xe4>)
 800086a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0xe4>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

}
 8000880:	bf00      	nop
 8000882:	3724      	adds	r7, #36	; 0x24
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	58024400 	.word	0x58024400

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000896:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <main+0x188>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d11b      	bne.n	80008da <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a2:	f3bf 8f4f 	dsb	sy
}
 80008a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008a8:	f3bf 8f6f 	isb	sy
}
 80008ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ae:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <main+0x188>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008b6:	f3bf 8f4f 	dsb	sy
}
 80008ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008bc:	f3bf 8f6f 	isb	sy
}
 80008c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008c2:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <main+0x188>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a54      	ldr	r2, [pc, #336]	; (8000a18 <main+0x188>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ce:	f3bf 8f4f 	dsb	sy
}
 80008d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
}
 80008d8:	e000      	b.n	80008dc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008dc:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <main+0x188>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d138      	bne.n	800095a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <main+0x188>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008f0:	f3bf 8f4f 	dsb	sy
}
 80008f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <main+0x188>)
 80008f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008fc:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	0b5b      	lsrs	r3, r3, #13
 8000902:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000906:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000910:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	015a      	lsls	r2, r3, #5
 8000916:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800091a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000920:	493d      	ldr	r1, [pc, #244]	; (8000a18 <main+0x188>)
 8000922:	4313      	orrs	r3, r2
 8000924:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1ef      	bne.n	8000912 <main+0x82>
    } while(sets-- != 0U);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	60fa      	str	r2, [r7, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1e5      	bne.n	8000908 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800093c:	f3bf 8f4f 	dsb	sy
}
 8000940:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <main+0x188>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a34      	ldr	r2, [pc, #208]	; (8000a18 <main+0x188>)
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800094e:	f3bf 8f4f 	dsb	sy
}
 8000952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000954:	f3bf 8f6f 	isb	sy
}
 8000958:	e000      	b.n	800095c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800095a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800095c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000960:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000962:	bf00      	nop
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <main+0x18c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d004      	beq.n	800097a <main+0xea>
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	617a      	str	r2, [r7, #20]
 8000976:	2b00      	cmp	r3, #0
 8000978:	dcf4      	bgt.n	8000964 <main+0xd4>
  if ( timeout < 0 )
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	2b00      	cmp	r3, #0
 800097e:	da01      	bge.n	8000984 <main+0xf4>
  {
  Error_Handler();
 8000980:	f000 f8ca 	bl	8000b18 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fcda 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f84c 	bl	8000a24 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <main+0x18c>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <main+0x18c>)
 8000994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <main+0x18c>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f002 fbf0 	bl	8003190 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009b0:	2100      	movs	r1, #0
 80009b2:	2000      	movs	r0, #0
 80009b4:	f002 fc06 	bl	80031c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009bc:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009be:	bf00      	nop
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <main+0x18c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d104      	bne.n	80009d6 <main+0x146>
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	1e5a      	subs	r2, r3, #1
 80009d0:	617a      	str	r2, [r7, #20]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	dcf4      	bgt.n	80009c0 <main+0x130>
if ( timeout < 0 )
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	da01      	bge.n	80009e0 <main+0x150>
{
Error_Handler();
 80009dc:	f000 f89c 	bl	8000b18 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f7ff fee2 	bl	80007a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009e4:	f000 f9ac 	bl	8000d40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009e8:	f000 fa60 	bl	8000eac <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80009ec:	f006 ffa2 	bl	8007934 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  j = j+ 0.0001;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <main+0x190>)
 80009f2:	ed93 7b00 	vldr	d7, [r3]
 80009f6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a10 <main+0x180>
 80009fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <main+0x190>)
 8000a00:	ed83 7b00 	vstr	d7, [r3]
	  MX_LWIP_Process();
 8000a04:	f007 f8e2 	bl	8007bcc <MX_LWIP_Process>
	  j = j+ 0.0001;
 8000a08:	e7f2      	b.n	80009f0 <main+0x160>
 8000a0a:	bf00      	nop
 8000a0c:	f3af 8000 	nop.w
 8000a10:	eb1c432d 	.word	0xeb1c432d
 8000a14:	3f1a36e2 	.word	0x3f1a36e2
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	58024400 	.word	0x58024400
 8000a20:	24000170 	.word	0x24000170

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09c      	sub	sp, #112	; 0x70
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	224c      	movs	r2, #76	; 0x4c
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f011 fd0d 	bl	8012452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f011 fd07 	bl	8012452 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a44:	2004      	movs	r0, #4
 8000a46:	f002 fd19 	bl	800347c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <SystemClock_Config+0xec>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	4a2f      	ldr	r2, [pc, #188]	; (8000b10 <SystemClock_Config+0xec>)
 8000a54:	f023 0301 	bic.w	r3, r3, #1
 8000a58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <SystemClock_Config+0xec>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a7c:	bf00      	nop
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <SystemClock_Config+0xf0>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a8a:	d1f8      	bne.n	8000a7e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000aa2:	2364      	movs	r3, #100	; 0x64
 8000aa4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fd44 	bl	8003550 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ace:	f000 f823 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	233f      	movs	r3, #63	; 0x3f
 8000ad4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000af0:	2340      	movs	r3, #64	; 0x40
 8000af2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2102      	movs	r1, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f983 	bl	8003e04 <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b04:	f000 f808 	bl	8000b18 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3770      	adds	r7, #112	; 0x70
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	58000400 	.word	0x58000400
 8000b14:	58024800 	.word	0x58024800

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x30>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58024400 	.word	0x58024400

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 fc3c 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return 1;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_kill>:

int _kill(int pid, int sig)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <_kill+0x20>)
 8000bc8:	2216      	movs	r2, #22
 8000bca:	601a      	str	r2, [r3, #0]
  return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	240083c4 	.word	0x240083c4

08000be0 <_exit>:

void _exit (int status)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffe5 	bl	8000bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf2:	e7fe      	b.n	8000bf2 <_exit+0x12>

08000bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d205      	bcs.n	8000d0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <_sbrk+0x6c>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	24080000 	.word	0x24080000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	24000178 	.word	0x24000178
 8000d38:	240083d8 	.word	0x240083d8
 8000d3c:	240083c4 	.word	0x240083c4

08000d40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <MX_USART3_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d8a:	f005 f9f3 	bl	8006174 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f7ff fec0 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d9c:	f006 f9f5 	bl	800718a <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f7ff feb7 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dae:	f006 fa2a 	bl	8007206 <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f7ff feae 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f006 f9ab 	bl	8007118 <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f7ff fea6 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2400017c 	.word	0x2400017c
 8000dd4:	40004800 	.word	0x40004800

08000dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ba      	sub	sp, #232	; 0xe8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	22c0      	movs	r2, #192	; 0xc0
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f011 fb2a 	bl	8012452 <memset>
  if(uartHandle->Instance==USART3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_UART_MspInit+0xc8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d146      	bne.n	8000e96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e08:	f04f 0202 	mov.w	r2, #2
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fb7c 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e2a:	f7ff fe75 	bl	8000b18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0xcc>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0xd0>)
 8000e92:	f001 ffcd 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	37e8      	adds	r7, #232	; 0xe8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020c00 	.word	0x58020c00

08000eac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb8:	2209      	movs	r2, #9
 8000eba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef4:	f002 f97a 	bl	80031ec <HAL_PCD_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000efe:	f7ff fe0b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	24000210 	.word	0x24000210
 8000f0c:	40080000 	.word	0x40080000

08000f10 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ba      	sub	sp, #232	; 0xe8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22c0      	movs	r2, #192	; 0xc0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f011 fa8e 	bl	8012452 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a38      	ldr	r2, [pc, #224]	; (800101c <HAL_PCD_MspInit+0x10c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d169      	bne.n	8001014 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000f50:	2312      	movs	r3, #18
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f64:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 facf 	bl	800451c <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000f84:	f7ff fdc8 	bl	8000b18 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f88:	f002 fad2 	bl	8003530 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_PCD_MspInit+0x110>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <HAL_PCD_MspInit+0x110>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_PCD_MspInit+0x110>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000faa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <HAL_PCD_MspInit+0x114>)
 8000fd2:	f001 ff2d 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <HAL_PCD_MspInit+0x114>)
 8000ff2:	f001 ff1d 	bl	8002e30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_PCD_MspInit+0x110>)
 8000ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_PCD_MspInit+0x110>)
 8000ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001002:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_PCD_MspInit+0x110>)
 8001008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800100c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	37e8      	adds	r7, #232	; 0xe8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40080000 	.word	0x40080000
 8001020:	58024400 	.word	0x58024400
 8001024:	58020000 	.word	0x58020000

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800102c:	f7ff fb26 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f011 fa4b 	bl	80124f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fc19 	bl	8000890 <main>
  bx  lr
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001064:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001068:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 800106c:	08016284 	.word	0x08016284
  ldr r2, =_sbss
 8001070:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8001074:	240083d4 	.word	0x240083d4

08001078 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC3_IRQHandler>

0800107a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <LAN8742_RegisterBusIO+0x28>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <LAN8742_RegisterBusIO+0x28>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <LAN8742_RegisterBusIO+0x28>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e014      	b.n	80010d2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d17c      	bne.n	80011f8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e01c      	b.n	8001152 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f107 0208 	add.w	r2, r7, #8
 8001120:	2112      	movs	r1, #18
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	4798      	blx	r3
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	da03      	bge.n	8001134 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800112c:	f06f 0304 	mvn.w	r3, #4
 8001130:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001132:	e00b      	b.n	800114c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	d105      	bne.n	800114c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
         break;
 800114a:	e005      	b.n	8001158 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d9df      	bls.n	8001118 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b1f      	cmp	r3, #31
 800115e:	d902      	bls.n	8001166 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001160:	f06f 0302 	mvn.w	r3, #2
 8001164:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d145      	bne.n	80011f8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6810      	ldr	r0, [r2, #0]
 8001174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001178:	2100      	movs	r1, #0
 800117a:	4798      	blx	r3
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	db37      	blt.n	80011f2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6810      	ldr	r0, [r2, #0]
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	2100      	movs	r1, #0
 8001190:	4798      	blx	r3
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	db28      	blt.n	80011ea <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4798      	blx	r3
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011a2:	e01c      	b.n	80011de <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4798      	blx	r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b6:	d80e      	bhi.n	80011d6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6810      	ldr	r0, [r2, #0]
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2100      	movs	r1, #0
 80011c6:	4798      	blx	r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da07      	bge.n	80011de <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80011ce:	f06f 0304 	mvn.w	r3, #4
 80011d2:	613b      	str	r3, [r7, #16]
                 break;
 80011d4:	e010      	b.n	80011f8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80011d6:	f06f 0301 	mvn.w	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
               break;
 80011dc:	e00c      	b.n	80011f8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1dd      	bne.n	80011a4 <LAN8742_Init+0xc6>
 80011e8:	e006      	b.n	80011f8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80011ea:	f06f 0304 	mvn.w	r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e002      	b.n	80011f8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80011f2:	f06f 0303 	mvn.w	r3, #3
 80011f6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d112      	bne.n	8001224 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4798      	blx	r3
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001208:	bf00      	nop
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800121c:	d9f5      	bls.n	800120a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001224:	693b      	ldr	r3, [r7, #16]
 }
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	f107 020c 	add.w	r2, r7, #12
 8001246:	2101      	movs	r1, #1
 8001248:	4798      	blx	r3
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	da02      	bge.n	8001256 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001250:	f06f 0304 	mvn.w	r3, #4
 8001254:	e06e      	b.n	8001334 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6810      	ldr	r0, [r2, #0]
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	2101      	movs	r1, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	da02      	bge.n	8001272 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800126c:	f06f 0304 	mvn.w	r3, #4
 8001270:	e060      	b.n	8001334 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800127c:	2301      	movs	r3, #1
 800127e:	e059      	b.n	8001334 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6810      	ldr	r0, [r2, #0]
 8001288:	f107 020c 	add.w	r2, r7, #12
 800128c:	2100      	movs	r1, #0
 800128e:	4798      	blx	r3
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	da02      	bge.n	800129c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001296:	f06f 0304 	mvn.w	r3, #4
 800129a:	e04b      	b.n	8001334 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d11b      	bne.n	80012de <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <LAN8742_GetLinkState+0x90>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ba:	2302      	movs	r3, #2
 80012bc:	e03a      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e033      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012d6:	2304      	movs	r3, #4
 80012d8:	e02c      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012da:	2305      	movs	r3, #5
 80012dc:	e02a      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	211f      	movs	r1, #31
 80012ec:	4798      	blx	r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da02      	bge.n	80012fa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80012f4:	f06f 0304 	mvn.w	r3, #4
 80012f8:	e01c      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001304:	2306      	movs	r3, #6
 8001306:	e015      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 031c 	and.w	r3, r3, #28
 800130e:	2b18      	cmp	r3, #24
 8001310:	d101      	bne.n	8001316 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001312:	2302      	movs	r3, #2
 8001314:	e00e      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 031c 	and.w	r3, r3, #28
 800131c:	2b08      	cmp	r3, #8
 800131e:	d101      	bne.n	8001324 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001320:	2303      	movs	r3, #3
 8001322:	e007      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 031c 	and.w	r3, r3, #28
 800132a:	2b14      	cmp	r3, #20
 800132c:	d101      	bne.n	8001332 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800132e:	2304      	movs	r3, #4
 8001330:	e000      	b.n	8001334 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001332:	2305      	movs	r3, #5
    }				
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f000 f982 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001348:	f002 ff12 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4913      	ldr	r1, [pc, #76]	; (80013a8 <HAL_Init+0x6c>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_Init+0x6c>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_Init+0x70>)
 800137e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_Init+0x74>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f814 	bl	80013b4 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e002      	b.n	800139c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001396:	f7ff fbc5 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400
 80013a8:	0801606c 	.word	0x0801606c
 80013ac:	24000004 	.word	0x24000004
 80013b0:	24000000 	.word	0x24000000

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_InitTick+0x64>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_InitTick+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f959 	bl	8001696 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f931 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x68>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2400000c 	.word	0x2400000c
 8001418:	24000000 	.word	0x24000000
 800141c:	24000008 	.word	0x24000008

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2400000c 	.word	0x2400000c
 8001444:	2400071c 	.word	0x2400071c

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2400071c 	.word	0x2400071c

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2400000c 	.word	0x2400000c

080014a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetREVID+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0c1b      	lsrs	r3, r3, #16
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	5c001000 	.word	0x5c001000

080014c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014d0:	4904      	ldr	r1, [pc, #16]	; (80014e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	58000400 	.word	0x58000400

080014e8 <__NVIC_SetPriorityGrouping>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <__NVIC_SetPriorityGrouping+0x40>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	4313      	orrs	r3, r2
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x40>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	05fa0000 	.word	0x05fa0000

08001530 <__NVIC_GetPriorityGrouping>:
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_SetPriority>:
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff47 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff5e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff90 	bl	80015a0 <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5f 	bl	800154c <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffb2 	bl	8001608 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0cf      	b.n	8001862 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2223      	movs	r2, #35	; 0x23
 80016d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f006 fc33 	bl	8007f40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_ETH_Init+0x1bc>)
 80016dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e0:	4a62      	ldr	r2, [pc, #392]	; (800186c <HAL_ETH_Init+0x1bc>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_ETH_Init+0x1bc>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7a1b      	ldrb	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fedd 	bl	80014c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001706:	e003      	b.n	8001710 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001708:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800170c:	f7ff fed8 	bl	80014c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001710:	4b57      	ldr	r3, [pc, #348]	; (8001870 <HAL_ETH_Init+0x1c0>)
 8001712:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172c:	f7ff fe8c 	bl	8001448 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001732:	e011      	b.n	8001758 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001734:	f7ff fe88 	bl	8001448 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001742:	d909      	bls.n	8001758 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2204      	movs	r2, #4
 8001748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	22e0      	movs	r2, #224	; 0xe0
 8001750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e084      	b.n	8001862 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e4      	bne.n	8001734 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fd94 	bl	8002298 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001770:	f002 fe78 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8001774:	4603      	mov	r3, r0
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <HAL_ETH_Init+0x1c4>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0c9a      	lsrs	r2, r3, #18
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3a01      	subs	r2, #1
 8001784:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 ff7f 	bl	800268c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800179a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	22e0      	movs	r2, #224	; 0xe0
 80017c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e049      	b.n	8001862 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_ETH_Init+0x1c8>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6952      	ldr	r2, [r2, #20]
 80017e2:	0051      	lsls	r1, r2, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 ffe7 	bl	80027c6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f001 f82d 	bl	8002858 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	3305      	adds	r3, #5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021a      	lsls	r2, r3, #8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	3304      	adds	r3, #4
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	3303      	adds	r3, #3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	061a      	lsls	r2, r3, #24
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	3302      	adds	r3, #2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800183c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800184a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800184c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2210      	movs	r2, #16
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	58024400 	.word	0x58024400
 8001870:	58000400 	.word	0x58000400
 8001874:	431bde83 	.word	0x431bde83
 8001878:	ffff8001 	.word	0xffff8001

0800187c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800188a:	2b10      	cmp	r3, #16
 800188c:	d153      	bne.n	8001936 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2223      	movs	r2, #35	; 0x23
 8001892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2204      	movs	r2, #4
 800189a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f9f6 	bl	8001c8e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0202 	orr.w	r2, r2, #2
 80018b0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800190a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001926:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2223      	movs	r2, #35	; 0x23
 800192e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800194e:	2b23      	cmp	r3, #35	; 0x23
 8001950:	d13f      	bne.n	80019d2 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2223      	movs	r2, #35	; 0x23
 8001956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001972:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800198e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0202 	bic.w	r2, r2, #2
 80019c4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2210      	movs	r2, #16
 80019ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a0c:	2b23      	cmp	r3, #35	; 0x23
 8001a0e:	d179      	bne.n	8001b04 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001a10:	2200      	movs	r2, #0
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 ff7d 	bl	8002914 <ETH_Prepare_Tx_Descriptors>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	f043 0202 	orr.w	r2, r3, #2
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e068      	b.n	8001b06 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a34:	f3bf 8f4f 	dsb	sy
}
 8001a38:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3206      	adds	r2, #6
 8001a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a46:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d904      	bls.n	8001a64 <HAL_ETH_Transmit+0x84>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	1f1a      	subs	r2, r3, #4
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3106      	adds	r1, #6
 8001a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a78:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001a7c:	f7ff fce4 	bl	8001448 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001a82:	e039      	b.n	8001af8 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d012      	beq.n	8001abe <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	f043 0208 	orr.w	r2, r3, #8
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e023      	b.n	8001b06 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d018      	beq.n	8001af8 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ac6:	f7ff fcbf 	bl	8001448 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <HAL_ETH_Transmit+0xfc>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10d      	bne.n	8001af8 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	f043 0204 	orr.w	r2, r3, #4
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001af2:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e006      	b.n	8001b06 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dbc1      	blt.n	8001a84 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0a5      	b.n	8001c86 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b40:	2b23      	cmp	r3, #35	; 0x23
 8001b42:	d001      	beq.n	8001b48 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e09e      	b.n	8001c86 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	3212      	adds	r2, #18
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5e:	f1c3 0304 	rsb	r3, r3, #4
 8001b62:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b64:	e067      	b.n	8001c36 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <HAL_ETH_ReadData+0x88>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03d      	beq.n	8001c12 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00d      	beq.n	8001bdc <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001bec:	461a      	mov	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f006 fb9d 	bl	8008330 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	441a      	add	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3301      	adds	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d902      	bls.n	8001c24 <HAL_ETH_ReadData+0x116>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b04      	subs	r3, #4
 8001c22:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	3212      	adds	r2, #18
 8001c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db06      	blt.n	8001c4c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d202      	bcs.n	8001c4c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d08c      	beq.n	8001b66 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	441a      	add	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f814 	bl	8001c8e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b088      	sub	sp, #32
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ca2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	3212      	adds	r2, #18
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001cb6:	e03b      	b.n	8001d30 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d112      	bne.n	8001ce6 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 fb03 	bl	80082d0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74fb      	strb	r3, [r7, #19]
 8001cd4:	e007      	b.n	8001ce6 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001ce6:	7cfb      	ldrb	r3, [r7, #19]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cec:	f3bf 8f5f 	dmb	sy
}
 8001cf0:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	e003      	b.n	8001d0c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001d0a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d902      	bls.n	8001d1e <ETH_UpdateDescriptor+0x90>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	3212      	adds	r2, #18
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <ETH_UpdateDescriptor+0xae>
 8001d36:	7cfb      	ldrb	r3, [r7, #19]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1bd      	bne.n	8001cb8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d00d      	beq.n	8001d62 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e03e      	b.n	8001e0a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d94:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	055b      	lsls	r3, r3, #21
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f043 030c 	orr.w	r3, r3, #12
 8001db8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001dcc:	f7ff fb3c 	bl	8001448 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001dd2:	e009      	b.n	8001de8 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001dd4:	f7ff fb38 	bl	8001448 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de2:	d901      	bls.n	8001de8 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e010      	b.n	8001e0a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ed      	bne.n	8001dd4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e03c      	b.n	8001eb0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e3e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	055b      	lsls	r3, r3, #21
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f023 030c 	bic.w	r3, r3, #12
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001e76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e82:	f7ff fae1 	bl	8001448 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e88:	e009      	b.n	8001e9e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e8a:	f7ff fadd 	bl	8001448 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e98:	d901      	bls.n	8001e9e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e008      	b.n	8001eb0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40028000 	.word	0x40028000

08001ebc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e1c3      	b.n	8002258 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 020c 	and.w	r2, r3, #12
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf0c      	ite	eq
 8001f16:	2301      	moveq	r3, #1
 8001f18:	2300      	movne	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf14      	ite	ne
 8001f66:	2301      	movne	r3, #1
 8001f68:	2300      	moveq	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800204a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf14      	ite	ne
 800207a:	2301      	movne	r3, #1
 800207c:	2300      	moveq	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80020e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0e5b      	lsrs	r3, r3, #25
 800211a:	f003 021f 	and.w	r2, r3, #31
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	b29a      	uxth	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80021e4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80021f4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e00b      	b.n	8002290 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227e:	2b10      	cmp	r3, #16
 8002280:	d105      	bne.n	800228e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002282:	6839      	ldr	r1, [r7, #0]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f85f 	bl	8002348 <ETH_SetMACConfig>

    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022b2:	f002 f8d7 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80022b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d908      	bls.n	80022d2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d804      	bhi.n	80022d2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e027      	b.n	8002322 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d908      	bls.n	80022ec <HAL_ETH_SetMDIOClockRange+0x54>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4a17      	ldr	r2, [pc, #92]	; (800233c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d204      	bcs.n	80022ec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e01a      	b.n	8002322 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d303      	bcc.n	80022fc <HAL_ETH_SetMDIOClockRange+0x64>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d911      	bls.n	8002320 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d908      	bls.n	8002316 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d804      	bhi.n	8002316 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e005      	b.n	8002322 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e000      	b.n	8002322 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002320:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	01312cff 	.word	0x01312cff
 8002338:	02160ebf 	.word	0x02160ebf
 800233c:	03938700 	.word	0x03938700
 8002340:	05f5e0ff 	.word	0x05f5e0ff
 8002344:	08f0d17f 	.word	0x08f0d17f

08002348 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800235a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	791b      	ldrb	r3, [r3, #4]
 8002360:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
 8002368:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800236a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	7b5b      	ldrb	r3, [r3, #13]
 8002370:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002372:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	7b9b      	ldrb	r3, [r3, #14]
 8002378:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800237a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	7bdb      	ldrb	r3, [r3, #15]
 8002380:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002382:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	7c12      	ldrb	r2, [r2, #16]
 8002388:	2a00      	cmp	r2, #0
 800238a:	d102      	bne.n	8002392 <ETH_SetMACConfig+0x4a>
 800238c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002390:	e000      	b.n	8002394 <ETH_SetMACConfig+0x4c>
 8002392:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002394:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	7c52      	ldrb	r2, [r2, #17]
 800239a:	2a00      	cmp	r2, #0
 800239c:	d102      	bne.n	80023a4 <ETH_SetMACConfig+0x5c>
 800239e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a2:	e000      	b.n	80023a6 <ETH_SetMACConfig+0x5e>
 80023a4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	7c9b      	ldrb	r3, [r3, #18]
 80023ac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023ae:	431a      	orrs	r2, r3
               macconf->Speed |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80023b4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80023ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7f1b      	ldrb	r3, [r3, #28]
 80023c0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80023c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7f5b      	ldrb	r3, [r3, #29]
 80023c8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80023ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	7f92      	ldrb	r2, [r2, #30]
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d102      	bne.n	80023da <ETH_SetMACConfig+0x92>
 80023d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d8:	e000      	b.n	80023dc <ETH_SetMACConfig+0x94>
 80023da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80023dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	7fdb      	ldrb	r3, [r3, #31]
 80023e2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80023e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d102      	bne.n	80023f6 <ETH_SetMACConfig+0xae>
 80023f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f4:	e000      	b.n	80023f8 <ETH_SetMACConfig+0xb0>
 80023f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80023f8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002406:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002408:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b56      	ldr	r3, [pc, #344]	; (8002574 <ETH_SetMACConfig+0x22c>)
 800241a:	4013      	ands	r3, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	430b      	orrs	r3, r1
 8002424:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002432:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002434:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800243c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800243e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002446:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002448:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002450:	2a00      	cmp	r2, #0
 8002452:	d102      	bne.n	800245a <ETH_SetMACConfig+0x112>
 8002454:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002458:	e000      	b.n	800245c <ETH_SetMACConfig+0x114>
 800245a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800245c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <ETH_SetMACConfig+0x230>)
 800246e:	4013      	ands	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	68f9      	ldr	r1, [r7, #12]
 8002476:	430b      	orrs	r3, r1
 8002478:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002480:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4b3a      	ldr	r3, [pc, #232]	; (800257c <ETH_SetMACConfig+0x234>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d101      	bne.n	80024ba <ETH_SetMACConfig+0x172>
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	e000      	b.n	80024bc <ETH_SetMACConfig+0x174>
 80024ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80024bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024ce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80024d2:	4013      	ands	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	430b      	orrs	r3, r1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80024e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80024ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f023 0103 	bic.w	r1, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	430a      	orrs	r2, r1
 8002506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002512:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800252e:	2a00      	cmp	r2, #0
 8002530:	d101      	bne.n	8002536 <ETH_SetMACConfig+0x1ee>
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0x1f0>
 8002536:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002538:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002540:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800254a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002558:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	430a      	orrs	r2, r1
 8002564:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	00048083 	.word	0x00048083
 8002578:	c0f88000 	.word	0xc0f88000
 800257c:	fffffef0 	.word	0xfffffef0

08002580 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b38      	ldr	r3, [pc, #224]	; (8002678 <ETH_SetDMAConfig+0xf8>)
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	6811      	ldr	r1, [r2, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025a6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	791b      	ldrb	r3, [r3, #4]
 80025ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	7b1b      	ldrb	r3, [r3, #12]
 80025b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4b2c      	ldr	r3, [pc, #176]	; (800267c <ETH_SetDMAConfig+0xfc>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	68f9      	ldr	r1, [r7, #12]
 80025d2:	430b      	orrs	r3, r1
 80025d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025d8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	7b5b      	ldrb	r3, [r3, #13]
 80025de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <ETH_SetDMAConfig+0x100>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	430b      	orrs	r3, r1
 8002600:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002604:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7d1b      	ldrb	r3, [r3, #20]
 8002610:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002612:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7f5b      	ldrb	r3, [r3, #29]
 8002618:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002626:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <ETH_SetDMAConfig+0x104>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	430b      	orrs	r3, r1
 8002636:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800263a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	7f1b      	ldrb	r3, [r3, #28]
 8002642:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <ETH_SetDMAConfig+0x108>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	430b      	orrs	r3, r1
 8002664:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002668:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	ffff87fd 	.word	0xffff87fd
 800267c:	ffff2ffe 	.word	0xffff2ffe
 8002680:	fffec000 	.word	0xfffec000
 8002684:	ffc0efef 	.word	0xffc0efef
 8002688:	7fc0ffff 	.word	0x7fc0ffff

0800268c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0a4      	sub	sp, #144	; 0x90
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800269a:	2300      	movs	r3, #0
 800269c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80026e4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80026e8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002706:	2300      	movs	r3, #0
 8002708:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800270a:	2300      	movs	r3, #0
 800270c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800270e:	2300      	movs	r3, #0
 8002710:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002724:	2320      	movs	r3, #32
 8002726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002736:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800273c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002740:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002766:	2300      	movs	r3, #0
 8002768:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fde6 	bl	8002348 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800277c:	2301      	movs	r3, #1
 800277e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002796:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800279a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80027ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fee1 	bl	8002580 <ETH_SetDMAConfig>
}
 80027be:	bf00      	nop
 80027c0:	3790      	adds	r7, #144	; 0x90
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e01d      	b.n	8002810 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68d9      	ldr	r1, [r3, #12]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	3206      	adds	r2, #6
 8002806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3301      	adds	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d9de      	bls.n	80027d4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002824:	461a      	mov	r2, r3
 8002826:	2303      	movs	r3, #3
 8002828:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002838:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e023      	b.n	80028ae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	3212      	adds	r2, #18
 80028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d9d8      	bls.n	8002866 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028da:	461a      	mov	r2, r3
 80028dc:	2303      	movs	r3, #3
 80028de:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002914:	b480      	push	{r7}
 8002916:	b08d      	sub	sp, #52	; 0x34
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3318      	adds	r3, #24
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002956:	d007      	beq.n	8002968 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	3304      	adds	r3, #4
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002968:	2302      	movs	r3, #2
 800296a:	e259      	b.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d044      	beq.n	8002a02 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4b75      	ldr	r3, [pc, #468]	; (8002b54 <ETH_Prepare_Tx_Descriptors+0x240>)
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002984:	431a      	orrs	r2, r3
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d027      	beq.n	8002a02 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	431a      	orrs	r2, r3
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029f0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a00:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	6992      	ldr	r2, [r2, #24]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d036      	beq.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a50:	f3bf 8f5f 	dmb	sy
}
 8002a54:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	3301      	adds	r3, #1
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d902      	bls.n	8002a74 <ETH_Prepare_Tx_Descriptors+0x160>
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	3b04      	subs	r3, #4
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	3301      	adds	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a90:	d10f      	bne.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a9c:	f3bf 8f5f 	dmb	sy
}
 8002aa0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e1b6      	b.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	6852      	ldr	r2, [r2, #4]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	6852      	ldr	r2, [r2, #4]
 8002af8:	0412      	lsls	r2, r2, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e008      	b.n	8002b14 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d021      	beq.n	8002b64 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	04db      	lsls	r3, r3, #19
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	69d2      	ldr	r2, [r2, #28]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e02e      	b.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002b54:	ffff0000 	.word	0xffff0000
 8002b58:	ffffc000 	.word	0xffffc000
 8002b5c:	c000ffff 	.word	0xc000ffff
 8002b60:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	4b7b      	ldr	r3, [pc, #492]	; (8002d58 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	6852      	ldr	r2, [r2, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002be8:	f3bf 8f5f 	dmb	sy
}
 8002bec:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80da 	beq.w	8002dbc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c1a:	e0cf      	b.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d902      	bls.n	8002c3a <ETH_Prepare_Tx_Descriptors+0x326>
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	3b04      	subs	r3, #4
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c42:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c5c:	d007      	beq.n	8002c6e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	3304      	adds	r3, #4
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d029      	beq.n	8002cc2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	e019      	b.n	8002cb6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c82:	f3bf 8f5f 	dmb	sy
}
 8002c86:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	3301      	adds	r3, #1
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d902      	bls.n	8002ca6 <ETH_Prepare_Tx_Descriptors+0x392>
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cae:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3e1      	bcc.n	8002c82 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0ae      	b.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	6852      	ldr	r2, [r2, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	6852      	ldr	r2, [r2, #4]
 8002d0e:	0412      	lsls	r2, r2, #16
 8002d10:	431a      	orrs	r2, r3
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	e008      	b.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	6a3a      	ldr	r2, [r7, #32]
 8002d28:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d018      	beq.n	8002d68 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	69d2      	ldr	r2, [r2, #28]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	e020      	b.n	8002d98 <ETH_Prepare_Tx_Descriptors+0x484>
 8002d56:	bf00      	nop
 8002d58:	ffff8000 	.word	0xffff8000
 8002d5c:	ffffc000 	.word	0xffffc000
 8002d60:	c000ffff 	.word	0xc000ffff
 8002d64:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <ETH_Prepare_Tx_Descriptors+0x518>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d9e:	f3bf 8f5f 	dmb	sy
}
 8002da2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f af2b 	bne.w	8002c1c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	e005      	b.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df6:	6979      	ldr	r1, [r7, #20]
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002e1a:	b662      	cpsie	i
}
 8002e1c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3734      	adds	r7, #52	; 0x34
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	ffff8000 	.word	0xffff8000

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e3e:	4b89      	ldr	r3, [pc, #548]	; (8003064 <HAL_GPIO_Init+0x234>)
 8002e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e42:	e194      	b.n	800316e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8186 	beq.w	8003168 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d005      	beq.n	8002e74 <HAL_GPIO_Init+0x44>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d130      	bne.n	8002ed6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eaa:	2201      	movs	r2, #1
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 0201 	and.w	r2, r3, #1
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d017      	beq.n	8002f12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d123      	bne.n	8002f66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	69b9      	ldr	r1, [r7, #24]
 8002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0203 	and.w	r2, r3, #3
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80e0 	beq.w	8003168 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_GPIO_Init+0x238>)
 8002faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fae:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_GPIO_Init+0x238>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_GPIO_Init+0x238>)
 8002fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a29      	ldr	r2, [pc, #164]	; (800306c <HAL_GPIO_Init+0x23c>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <HAL_GPIO_Init+0x240>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d052      	beq.n	8003098 <HAL_GPIO_Init+0x268>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_GPIO_Init+0x244>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d031      	beq.n	800305e <HAL_GPIO_Init+0x22e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_GPIO_Init+0x248>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d02b      	beq.n	800305a <HAL_GPIO_Init+0x22a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_GPIO_Init+0x24c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d025      	beq.n	8003056 <HAL_GPIO_Init+0x226>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_GPIO_Init+0x250>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01f      	beq.n	8003052 <HAL_GPIO_Init+0x222>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <HAL_GPIO_Init+0x254>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d019      	beq.n	800304e <HAL_GPIO_Init+0x21e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_GPIO_Init+0x258>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_GPIO_Init+0x21a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_GPIO_Init+0x25c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00d      	beq.n	8003046 <HAL_GPIO_Init+0x216>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_GPIO_Init+0x260>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <HAL_GPIO_Init+0x212>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a17      	ldr	r2, [pc, #92]	; (8003094 <HAL_GPIO_Init+0x264>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_GPIO_Init+0x20e>
 800303a:	2309      	movs	r3, #9
 800303c:	e02d      	b.n	800309a <HAL_GPIO_Init+0x26a>
 800303e:	230a      	movs	r3, #10
 8003040:	e02b      	b.n	800309a <HAL_GPIO_Init+0x26a>
 8003042:	2308      	movs	r3, #8
 8003044:	e029      	b.n	800309a <HAL_GPIO_Init+0x26a>
 8003046:	2307      	movs	r3, #7
 8003048:	e027      	b.n	800309a <HAL_GPIO_Init+0x26a>
 800304a:	2306      	movs	r3, #6
 800304c:	e025      	b.n	800309a <HAL_GPIO_Init+0x26a>
 800304e:	2305      	movs	r3, #5
 8003050:	e023      	b.n	800309a <HAL_GPIO_Init+0x26a>
 8003052:	2304      	movs	r3, #4
 8003054:	e021      	b.n	800309a <HAL_GPIO_Init+0x26a>
 8003056:	2303      	movs	r3, #3
 8003058:	e01f      	b.n	800309a <HAL_GPIO_Init+0x26a>
 800305a:	2302      	movs	r3, #2
 800305c:	e01d      	b.n	800309a <HAL_GPIO_Init+0x26a>
 800305e:	2301      	movs	r3, #1
 8003060:	e01b      	b.n	800309a <HAL_GPIO_Init+0x26a>
 8003062:	bf00      	nop
 8003064:	58000080 	.word	0x58000080
 8003068:	58024400 	.word	0x58024400
 800306c:	58000400 	.word	0x58000400
 8003070:	58020000 	.word	0x58020000
 8003074:	58020400 	.word	0x58020400
 8003078:	58020800 	.word	0x58020800
 800307c:	58020c00 	.word	0x58020c00
 8003080:	58021000 	.word	0x58021000
 8003084:	58021400 	.word	0x58021400
 8003088:	58021800 	.word	0x58021800
 800308c:	58021c00 	.word	0x58021c00
 8003090:	58022000 	.word	0x58022000
 8003094:	58022400 	.word	0x58022400
 8003098:	2300      	movs	r3, #0
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	f002 0203 	and.w	r2, r2, #3
 80030a0:	0092      	lsls	r2, r2, #2
 80030a2:	4093      	lsls	r3, r2
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030aa:	4938      	ldr	r1, [pc, #224]	; (800318c <HAL_GPIO_Init+0x35c>)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80030de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f ae63 	bne.w	8002e44 <HAL_GPIO_Init+0x14>
  }
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	3724      	adds	r7, #36	; 0x24
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	58000400 	.word	0x58000400

08003190 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <HAL_HSEM_FastTake+0x2c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3320      	adds	r3, #32
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <HAL_HSEM_FastTake+0x30>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	58026400 	.word	0x58026400
 80031c0:	80000300 	.word	0x80000300

080031c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80031ce:	4906      	ldr	r1, [pc, #24]	; (80031e8 <HAL_HSEM_Release+0x24>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	58026400 	.word	0x58026400

080031ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b08f      	sub	sp, #60	; 0x3c
 80031f0:	af0a      	add	r7, sp, #40	; 0x28
 80031f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e116      	b.n	800342c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fe79 	bl	8000f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2203      	movs	r2, #3
 8003222:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f004 f8dd 	bl	80073fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	687e      	ldr	r6, [r7, #4]
 800324a:	466d      	mov	r5, sp
 800324c:	f106 0410 	add.w	r4, r6, #16
 8003250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003258:	e894 0003 	ldmia.w	r4, {r0, r1}
 800325c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003260:	1d33      	adds	r3, r6, #4
 8003262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f004 f85b 	bl	8007320 <USB_CoreInit>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0d7      	b.n	800342c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f004 f8cb 	bl	800741e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e04a      	b.n	8003324 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	333d      	adds	r3, #61	; 0x3d
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	333c      	adds	r3, #60	; 0x3c
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	b298      	uxth	r0, r3
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3356      	adds	r3, #86	; 0x56
 80032ca:	4602      	mov	r2, r0
 80032cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3340      	adds	r3, #64	; 0x40
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3344      	adds	r3, #68	; 0x44
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	3348      	adds	r3, #72	; 0x48
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334c      	adds	r3, #76	; 0x4c
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3301      	adds	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d3af      	bcc.n	800328e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e044      	b.n	80033be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	3301      	adds	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d3b5      	bcc.n	8003334 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	687e      	ldr	r6, [r7, #4]
 80033d0:	466d      	mov	r5, sp
 80033d2:	f106 0410 	add.w	r4, r6, #16
 80033d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033e6:	1d33      	adds	r3, r6, #4
 80033e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	f004 f864 	bl	80074b8 <USB_DevInit>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e014      	b.n	800342c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f80a 	bl	8003434 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fa22 	bl	800786e <USB_DevDisconnect>

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003434 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_PCDEx_ActivateLPM+0x44>)
 8003464:	4313      	orrs	r3, r2
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	10000003 	.word	0x10000003

0800347c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_PWREx_ConfigSupply+0xb0>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	2b06      	cmp	r3, #6
 800348e:	d00a      	beq.n	80034a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_PWREx_ConfigSupply+0xb0>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d001      	beq.n	80034a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e040      	b.n	8003524 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e03e      	b.n	8003524 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_PWREx_ConfigSupply+0xb0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80034ae:	491f      	ldr	r1, [pc, #124]	; (800352c <HAL_PWREx_ConfigSupply+0xb0>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034b6:	f7fd ffc7 	bl	8001448 <HAL_GetTick>
 80034ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034bc:	e009      	b.n	80034d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034be:	f7fd ffc3 	bl	8001448 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034cc:	d901      	bls.n	80034d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e028      	b.n	8003524 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_PWREx_ConfigSupply+0xb0>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	d1ee      	bne.n	80034be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b1e      	cmp	r3, #30
 80034e4:	d008      	beq.n	80034f8 <HAL_PWREx_ConfigSupply+0x7c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ea:	d005      	beq.n	80034f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b1d      	cmp	r3, #29
 80034f0:	d002      	beq.n	80034f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b2d      	cmp	r3, #45	; 0x2d
 80034f6:	d114      	bne.n	8003522 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034f8:	f7fd ffa6 	bl	8001448 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034fe:	e009      	b.n	8003514 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003500:	f7fd ffa2 	bl	8001448 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350e:	d901      	bls.n	8003514 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e007      	b.n	8003524 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_PWREx_ConfigSupply+0xb0>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d1ee      	bne.n	8003500 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	58024800 	.word	0x58024800

08003530 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	58024800 	.word	0x58024800

08003550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f000 bc48 	b.w	8003df4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8088 	beq.w	8003682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	4b99      	ldr	r3, [pc, #612]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800357c:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b10      	cmp	r3, #16
 8003586:	d007      	beq.n	8003598 <HAL_RCC_OscConfig+0x48>
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	2b18      	cmp	r3, #24
 800358c:	d111      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62>
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b8f      	ldr	r3, [pc, #572]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d06d      	beq.n	8003680 <HAL_RCC_OscConfig+0x130>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d169      	bne.n	8003680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f000 bc21 	b.w	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x7a>
 80035bc:	4b86      	ldr	r3, [pc, #536]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a85      	ldr	r2, [pc, #532]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e02e      	b.n	8003628 <HAL_RCC_OscConfig+0xd8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0x9c>
 80035d2:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b7e      	ldr	r3, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7d      	ldr	r2, [pc, #500]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0xd8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0xc0>
 80035f6:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a77      	ldr	r2, [pc, #476]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a74      	ldr	r2, [pc, #464]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0xd8>
 8003610:	4b71      	ldr	r3, [pc, #452]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a70      	ldr	r2, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b6e      	ldr	r3, [pc, #440]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6d      	ldr	r2, [pc, #436]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fd ff0a 	bl	8001448 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fd ff06 	bl	8001448 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e3d4      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0xe8>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fef6 	bl	8001448 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7fd fef2 	bl	8001448 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e3c0      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003672:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x110>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80ca 	beq.w	8003824 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003698:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_RCC_OscConfig+0x166>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2b18      	cmp	r3, #24
 80036aa:	d156      	bne.n	800375a <HAL_RCC_OscConfig+0x20a>
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d151      	bne.n	800375a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b6:	4b48      	ldr	r3, [pc, #288]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x17e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e392      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036ce:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0219 	bic.w	r2, r3, #25
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	493f      	ldr	r1, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd feb2 	bl	8001448 <HAL_GetTick>
 80036e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fd feae 	bl	8001448 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e37c      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003706:	f7fd fecf 	bl	80014a8 <HAL_GetREVID>
 800370a:	4603      	mov	r3, r0
 800370c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003710:	4293      	cmp	r3, r2
 8003712:	d817      	bhi.n	8003744 <HAL_RCC_OscConfig+0x1f4>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d108      	bne.n	800372e <HAL_RCC_OscConfig+0x1de>
 800371c:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372c:	e07a      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	031b      	lsls	r3, r3, #12
 800373c:	4926      	ldr	r1, [pc, #152]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003742:	e06f      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	4921      	ldr	r1, [pc, #132]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003758:	e064      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d047      	beq.n	80037f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003762:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 0219 	bic.w	r2, r3, #25
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	491a      	ldr	r1, [pc, #104]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd fe68 	bl	8001448 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377c:	f7fd fe64 	bl	8001448 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e332      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	f7fd fe85 	bl	80014a8 <HAL_GetREVID>
 800379e:	4603      	mov	r3, r0
 80037a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d819      	bhi.n	80037dc <HAL_RCC_OscConfig+0x28c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d108      	bne.n	80037c2 <HAL_RCC_OscConfig+0x272>
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037b8:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037be:	6053      	str	r3, [r2, #4]
 80037c0:	e030      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	031b      	lsls	r3, r3, #12
 80037d0:	4901      	ldr	r1, [pc, #4]	; (80037d8 <HAL_RCC_OscConfig+0x288>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
 80037d6:	e025      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
 80037d8:	58024400 	.word	0x58024400
 80037dc:	4b9a      	ldr	r3, [pc, #616]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	4997      	ldr	r1, [pc, #604]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
 80037f0:	e018      	b.n	8003824 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f2:	4b95      	ldr	r3, [pc, #596]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a94      	ldr	r2, [pc, #592]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fe23 	bl	8001448 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003806:	f7fd fe1f 	bl	8001448 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e2ed      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003818:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80a9 	beq.w	8003984 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003832:	4b85      	ldr	r3, [pc, #532]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800383a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800383c:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d007      	beq.n	8003858 <HAL_RCC_OscConfig+0x308>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b18      	cmp	r3, #24
 800384c:	d13a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x374>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d135      	bne.n	80038c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003858:	4b7b      	ldr	r3, [pc, #492]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_OscConfig+0x320>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2b80      	cmp	r3, #128	; 0x80
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e2c1      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003870:	f7fd fe1a 	bl	80014a8 <HAL_GetREVID>
 8003874:	4603      	mov	r3, r0
 8003876:	f241 0203 	movw	r2, #4099	; 0x1003
 800387a:	4293      	cmp	r3, r2
 800387c:	d817      	bhi.n	80038ae <HAL_RCC_OscConfig+0x35e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	2b20      	cmp	r3, #32
 8003884:	d108      	bne.n	8003898 <HAL_RCC_OscConfig+0x348>
 8003886:	4b70      	ldr	r3, [pc, #448]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800388e:	4a6e      	ldr	r2, [pc, #440]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003894:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003896:	e075      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003898:	4b6b      	ldr	r3, [pc, #428]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	069b      	lsls	r3, r3, #26
 80038a6:	4968      	ldr	r1, [pc, #416]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ac:	e06a      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ae:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	4962      	ldr	r1, [pc, #392]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c2:	e05f      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d042      	beq.n	8003952 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038cc:	4b5e      	ldr	r3, [pc, #376]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fdb6 	bl	8001448 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038e0:	f7fd fdb2 	bl	8001448 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e280      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038f2:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038fe:	f7fd fdd3 	bl	80014a8 <HAL_GetREVID>
 8003902:	4603      	mov	r3, r0
 8003904:	f241 0203 	movw	r2, #4099	; 0x1003
 8003908:	4293      	cmp	r3, r2
 800390a:	d817      	bhi.n	800393c <HAL_RCC_OscConfig+0x3ec>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	2b20      	cmp	r3, #32
 8003912:	d108      	bne.n	8003926 <HAL_RCC_OscConfig+0x3d6>
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800391c:	4a4a      	ldr	r2, [pc, #296]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800391e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003922:	6053      	str	r3, [r2, #4]
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
 8003926:	4b48      	ldr	r3, [pc, #288]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	4944      	ldr	r1, [pc, #272]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
 800393a:	e023      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
 800393c:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	493f      	ldr	r1, [pc, #252]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	60cb      	str	r3, [r1, #12]
 8003950:	e018      	b.n	8003984 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003952:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fd73 	bl	8001448 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003966:	f7fd fd6f 	bl	8001448 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e23d      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003978:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d036      	beq.n	80039fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d019      	beq.n	80039cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fd50 	bl	8001448 <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd fd4c 	bl	8001448 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e21a      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x45c>
 80039ca:	e018      	b.n	80039fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd fd36 	bl	8001448 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fd fd32 	bl	8001448 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e200      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d039      	beq.n	8003a7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a1e:	f7fd fd13 	bl	8001448 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a26:	f7fd fd0f 	bl	8001448 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1dd      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x4d6>
 8003a44:	e01b      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4c:	4b9b      	ldr	r3, [pc, #620]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a9a      	ldr	r2, [pc, #616]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a58:	f7fd fcf6 	bl	8001448 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a60:	f7fd fcf2 	bl	8001448 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1c0      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a72:	4b92      	ldr	r3, [pc, #584]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8081 	beq.w	8003b8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a8c:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <HAL_RCC_OscConfig+0x770>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a8b      	ldr	r2, [pc, #556]	; (8003cc0 <HAL_RCC_OscConfig+0x770>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fcd6 	bl	8001448 <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fd fcd2 	bl	8001448 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1a0      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	4b83      	ldr	r3, [pc, #524]	; (8003cc0 <HAL_RCC_OscConfig+0x770>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x584>
 8003ac6:	4b7d      	ldr	r3, [pc, #500]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	e02d      	b.n	8003b30 <HAL_RCC_OscConfig+0x5e0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x5a6>
 8003adc:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae8:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a73      	ldr	r2, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003aee:	f023 0304 	bic.w	r3, r3, #4
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x5e0>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c8>
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b6c      	ldr	r3, [pc, #432]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a6b      	ldr	r2, [pc, #428]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x5e0>
 8003b18:	4b68      	ldr	r3, [pc, #416]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a64      	ldr	r2, [pc, #400]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fc86 	bl	8001448 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd fc82 	bl	8001448 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e14e      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b56:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x5f0>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd fc70 	bl	8001448 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fc6c 	bl	8001448 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e138      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b82:	4b4e      	ldr	r3, [pc, #312]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 812d 	beq.w	8003df2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba0:	2b18      	cmp	r3, #24
 8003ba2:	f000 80bd 	beq.w	8003d20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	f040 809e 	bne.w	8003cec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a41      	ldr	r2, [pc, #260]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd fc44 	bl	8001448 <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fd fc40 	bl	8001448 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e10e      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be6:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x774>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4931      	ldr	r1, [pc, #196]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	3b01      	subs	r3, #1
 8003c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	3b01      	subs	r3, #1
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c2c:	4923      	ldr	r1, [pc, #140]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c42:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCC_OscConfig+0x778>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	491b      	ldr	r1, [pc, #108]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f023 020c 	bic.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4917      	ldr	r1, [pc, #92]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f023 0202 	bic.w	r2, r3, #2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	4912      	ldr	r1, [pc, #72]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_RCC_OscConfig+0x76c>)
 8003cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fbc9 	bl	8001448 <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cb8:	e011      	b.n	8003cde <HAL_RCC_OscConfig+0x78e>
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
 8003cc0:	58024800 	.word	0x58024800
 8003cc4:	fffffc0c 	.word	0xfffffc0c
 8003cc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd fbbc 	bl	8001448 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e08a      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cde:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x77c>
 8003cea:	e082      	b.n	8003df2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a42      	ldr	r2, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fba6 	bl	8001448 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fba2 	bl	8001448 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e070      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d12:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x7b0>
 8003d1e:	e068      	b.n	8003df2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d031      	beq.n	8003d98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d12a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d122      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d108      	bne.n	8003d98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e02b      	b.n	8003df4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	08db      	lsrs	r3, r3, #3
 8003da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003da6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d01f      	beq.n	8003df2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dbe:	f7fd fb43 	bl	8001448 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dc4:	bf00      	nop
 8003dc6:	f7fd fb3f 	bl	8001448 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d0f9      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_RCC_OscConfig+0x8b0>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dde:	00d2      	lsls	r2, r2, #3
 8003de0:	4906      	ldr	r1, [pc, #24]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_RCC_OscConfig+0x8ac>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3730      	adds	r7, #48	; 0x30
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	ffff0007 	.word	0xffff0007

08003e04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e19c      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b8a      	ldr	r3, [pc, #552]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d910      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b87      	ldr	r3, [pc, #540]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 020f 	bic.w	r2, r3, #15
 8003e2e:	4985      	ldr	r1, [pc, #532]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b83      	ldr	r3, [pc, #524]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e184      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d908      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e64:	4b78      	ldr	r3, [pc, #480]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	4975      	ldr	r1, [pc, #468]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	4b70      	ldr	r3, [pc, #448]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d908      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e92:	4b6d      	ldr	r3, [pc, #436]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	496a      	ldr	r1, [pc, #424]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	4b64      	ldr	r3, [pc, #400]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d908      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ec0:	4b61      	ldr	r3, [pc, #388]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	495e      	ldr	r1, [pc, #376]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d010      	beq.n	8003f00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d908      	bls.n	8003f00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4953      	ldr	r1, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d908      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f023 020f 	bic.w	r2, r3, #15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4947      	ldr	r1, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d055      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f3a:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4940      	ldr	r1, [pc, #256]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f54:	4b3c      	ldr	r3, [pc, #240]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d121      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0f6      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d115      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0ea      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f84:	4b30      	ldr	r3, [pc, #192]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0de      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f94:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d6      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa4:	4b28      	ldr	r3, [pc, #160]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4925      	ldr	r1, [pc, #148]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb6:	f7fd fa47 	bl	8001448 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbe:	f7fd fa43 	bl	8001448 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0be      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d1eb      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d010      	beq.n	8004014 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d208      	bcs.n	8004014 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f023 020f 	bic.w	r2, r3, #15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	490e      	ldr	r1, [pc, #56]	; (8004048 <HAL_RCC_ClockConfig+0x244>)
 8004010:	4313      	orrs	r3, r2
 8004012:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d214      	bcs.n	800404c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 020f 	bic.w	r2, r3, #15
 800402a:	4906      	ldr	r1, [pc, #24]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b04      	ldr	r3, [pc, #16]	; (8004044 <HAL_RCC_ClockConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e086      	b.n	8004152 <HAL_RCC_ClockConfig+0x34e>
 8004044:	52002000 	.word	0x52002000
 8004048:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004064:	429a      	cmp	r2, r3
 8004066:	d208      	bcs.n	800407a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004068:	4b3c      	ldr	r3, [pc, #240]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4939      	ldr	r1, [pc, #228]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 8004076:	4313      	orrs	r3, r2
 8004078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004092:	429a      	cmp	r2, r3
 8004094:	d208      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	492e      	ldr	r1, [pc, #184]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d208      	bcs.n	80040d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c4:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	4922      	ldr	r1, [pc, #136]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d010      	beq.n	8004104 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d208      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4917      	ldr	r1, [pc, #92]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 8004100:	4313      	orrs	r3, r2
 8004102:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004104:	f000 f834 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	4912      	ldr	r1, [pc, #72]	; (8004160 <HAL_RCC_ClockConfig+0x35c>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <HAL_RCC_ClockConfig+0x358>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <HAL_RCC_ClockConfig+0x35c>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x360>)
 800413a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x364>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x368>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd f934 	bl	80013b4 <HAL_InitTick>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
 8004160:	0801606c 	.word	0x0801606c
 8004164:	24000004 	.word	0x24000004
 8004168:	24000000 	.word	0x24000000
 800416c:	24000008 	.word	0x24000008

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	; 0x24
 8004174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004176:	4bb3      	ldr	r3, [pc, #716]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800417e:	2b18      	cmp	r3, #24
 8004180:	f200 8155 	bhi.w	800442e <HAL_RCC_GetSysClockFreq+0x2be>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041f1 	.word	0x080041f1
 8004190:	0800442f 	.word	0x0800442f
 8004194:	0800442f 	.word	0x0800442f
 8004198:	0800442f 	.word	0x0800442f
 800419c:	0800442f 	.word	0x0800442f
 80041a0:	0800442f 	.word	0x0800442f
 80041a4:	0800442f 	.word	0x0800442f
 80041a8:	0800442f 	.word	0x0800442f
 80041ac:	08004217 	.word	0x08004217
 80041b0:	0800442f 	.word	0x0800442f
 80041b4:	0800442f 	.word	0x0800442f
 80041b8:	0800442f 	.word	0x0800442f
 80041bc:	0800442f 	.word	0x0800442f
 80041c0:	0800442f 	.word	0x0800442f
 80041c4:	0800442f 	.word	0x0800442f
 80041c8:	0800442f 	.word	0x0800442f
 80041cc:	0800421d 	.word	0x0800421d
 80041d0:	0800442f 	.word	0x0800442f
 80041d4:	0800442f 	.word	0x0800442f
 80041d8:	0800442f 	.word	0x0800442f
 80041dc:	0800442f 	.word	0x0800442f
 80041e0:	0800442f 	.word	0x0800442f
 80041e4:	0800442f 	.word	0x0800442f
 80041e8:	0800442f 	.word	0x0800442f
 80041ec:	08004223 	.word	0x08004223
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f0:	4b94      	ldr	r3, [pc, #592]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041fc:	4b91      	ldr	r3, [pc, #580]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	08db      	lsrs	r3, r3, #3
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	4a90      	ldr	r2, [pc, #576]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800420e:	e111      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004210:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004212:	61bb      	str	r3, [r7, #24]
      break;
 8004214:	e10e      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004216:	4b8d      	ldr	r3, [pc, #564]	; (800444c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004218:	61bb      	str	r3, [r7, #24]
      break;
 800421a:	e10b      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800421c:	4b8c      	ldr	r3, [pc, #560]	; (8004450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800421e:	61bb      	str	r3, [r7, #24]
      break;
 8004220:	e108      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004222:	4b88      	ldr	r3, [pc, #544]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800422c:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004236:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004238:	4b82      	ldr	r3, [pc, #520]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004242:	4b80      	ldr	r3, [pc, #512]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	08db      	lsrs	r3, r3, #3
 8004248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80e1 	beq.w	8004428 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b02      	cmp	r3, #2
 800426a:	f000 8083 	beq.w	8004374 <HAL_RCC_GetSysClockFreq+0x204>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b02      	cmp	r3, #2
 8004272:	f200 80a1 	bhi.w	80043b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x114>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d056      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004282:	e099      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004284:	4b6f      	ldr	r3, [pc, #444]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02d      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004290:	4b6c      	ldr	r3, [pc, #432]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	4a6b      	ldr	r2, [pc, #428]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b62      	ldr	r3, [pc, #392]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042ea:	e087      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fe:	4b51      	ldr	r3, [pc, #324]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004312:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800432e:	e065      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800445c <HAL_RCC_GetSysClockFreq+0x2ec>
 800433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004342:	4b40      	ldr	r3, [pc, #256]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004352:	ed97 6a02 	vldr	s12, [r7, #8]
 8004356:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004372:	e043      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004460 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a02 	vldr	s12, [r7, #8]
 800439a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043b6:	e021      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800445c <HAL_RCC_GetSysClockFreq+0x2ec>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a02 	vldr	s12, [r7, #8]
 80043de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	0a5b      	lsrs	r3, r3, #9
 8004402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004406:	3301      	adds	r3, #1
 8004408:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004414:	edd7 6a07 	vldr	s13, [r7, #28]
 8004418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004420:	ee17 3a90 	vmov	r3, s15
 8004424:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004426:	e005      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
      break;
 800442c:	e002      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800442e:	4b07      	ldr	r3, [pc, #28]	; (800444c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004430:	61bb      	str	r3, [r7, #24]
      break;
 8004432:	bf00      	nop
  }

  return sysclockfreq;
 8004434:	69bb      	ldr	r3, [r7, #24]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
 8004448:	03d09000 	.word	0x03d09000
 800444c:	003d0900 	.word	0x003d0900
 8004450:	007a1200 	.word	0x007a1200
 8004454:	46000000 	.word	0x46000000
 8004458:	4c742400 	.word	0x4c742400
 800445c:	4a742400 	.word	0x4a742400
 8004460:	4af42400 	.word	0x4af42400

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800446a:	f7ff fe81 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800446e:	4602      	mov	r2, r0
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	490f      	ldr	r1, [pc, #60]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800447c:	5ccb      	ldrb	r3, [r1, r3]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_GetHCLKFreq+0x58>)
 80044a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCC_GetHCLKFreq+0x58>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	58024400 	.word	0x58024400
 80044b8:	0801606c 	.word	0x0801606c
 80044bc:	24000004 	.word	0x24000004
 80044c0:	24000000 	.word	0x24000000

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044c8:	f7ff ffcc 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	58024400 	.word	0x58024400
 80044ec:	0801606c 	.word	0x0801606c

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044f4:	f7ff ffb6 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400
 8004518:	0801606c 	.word	0x0801606c

0800451c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800451c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004520:	b0ca      	sub	sp, #296	; 0x128
 8004522:	af00      	add	r7, sp, #0
 8004524:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004540:	2500      	movs	r5, #0
 8004542:	ea54 0305 	orrs.w	r3, r4, r5
 8004546:	d049      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004552:	d02f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004558:	d828      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800455a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800455e:	d01a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004564:	d822      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456e:	d007      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004570:	e01c      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004572:	4bb8      	ldr	r3, [pc, #736]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4ab7      	ldr	r2, [pc, #732]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800457e:	e01a      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004584:	3308      	adds	r3, #8
 8004586:	2102      	movs	r1, #2
 8004588:	4618      	mov	r0, r3
 800458a:	f001 fc8f 	bl	8005eac <RCCEx_PLL2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004594:	e00f      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459a:	3328      	adds	r3, #40	; 0x28
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fd36 	bl	8006010 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045aa:	e004      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045be:	4ba5      	ldr	r3, [pc, #660]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045cc:	4aa1      	ldr	r2, [pc, #644]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6513      	str	r3, [r2, #80]	; 0x50
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80045e8:	f04f 0900 	mov.w	r9, #0
 80045ec:	ea58 0309 	orrs.w	r3, r8, r9
 80045f0:	d047      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d82a      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045fc:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004619 	.word	0x08004619
 8004608:	08004627 	.word	0x08004627
 800460c:	0800463d 	.word	0x0800463d
 8004610:	0800465b 	.word	0x0800465b
 8004614:	0800465b 	.word	0x0800465b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4b8e      	ldr	r3, [pc, #568]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a8d      	ldr	r2, [pc, #564]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800461e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004624:	e01a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462a:	3308      	adds	r3, #8
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fc3c 	bl	8005eac <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463a:	e00f      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004640:	3328      	adds	r3, #40	; 0x28
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fce3 	bl	8006010 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004650:	e004      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800465a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004664:	4b7b      	ldr	r3, [pc, #492]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004668:	f023 0107 	bic.w	r1, r3, #7
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	4a78      	ldr	r2, [pc, #480]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004674:	430b      	orrs	r3, r1
 8004676:	6513      	str	r3, [r2, #80]	; 0x50
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800467e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800468e:	f04f 0b00 	mov.w	fp, #0
 8004692:	ea5a 030b 	orrs.w	r3, sl, fp
 8004696:	d04c      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d030      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a8:	d829      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046aa:	2bc0      	cmp	r3, #192	; 0xc0
 80046ac:	d02d      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80046ae:	2bc0      	cmp	r3, #192	; 0xc0
 80046b0:	d825      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d018      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d821      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d007      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046c2:	e01c      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4b63      	ldr	r3, [pc, #396]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a62      	ldr	r2, [pc, #392]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046d0:	e01c      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	3308      	adds	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fbe6 	bl	8005eac <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e6:	e011      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fc8d 	bl	8006010 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004704:	e002      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800470a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004714:	4b4f      	ldr	r3, [pc, #316]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004718:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004722:	4a4c      	ldr	r2, [pc, #304]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6513      	str	r3, [r2, #80]	; 0x50
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800473e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004748:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d053      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800475a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800475e:	d035      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004764:	d82e      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004766:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800476a:	d031      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800476c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004770:	d828      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004776:	d01a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477c:	d822      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004786:	d007      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004788:	e01c      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478a:	4b32      	ldr	r3, [pc, #200]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	4a31      	ldr	r2, [pc, #196]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004796:	e01c      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479c:	3308      	adds	r3, #8
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fb83 	bl	8005eac <RCCEx_PLL2_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047ac:	e011      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	3328      	adds	r3, #40	; 0x28
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fc2a 	bl	8006010 <RCCEx_PLL3_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047c2:	e006      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047ea:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6593      	str	r3, [r2, #88]	; 0x58
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004806:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800480a:	2300      	movs	r3, #0
 800480c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004810:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d056      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004826:	d038      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800482c:	d831      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800482e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004832:	d034      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004838:	d82b      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800483a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800483e:	d01d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004844:	d825      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800484a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004850:	e01f      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004858:	4ba2      	ldr	r3, [pc, #648]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4aa1      	ldr	r2, [pc, #644]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004864:	e01c      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486a:	3308      	adds	r3, #8
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fb1c 	bl	8005eac <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	3328      	adds	r3, #40	; 0x28
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fbc3 	bl	8006010 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004890:	e006      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004898:	e002      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800489e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048a8:	4b8e      	ldr	r3, [pc, #568]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048b8:	4a8a      	ldr	r2, [pc, #552]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	6593      	str	r3, [r2, #88]	; 0x58
 80048be:	e003      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80048e2:	460b      	mov	r3, r1
 80048e4:	4313      	orrs	r3, r2
 80048e6:	d03a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d01f      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d819      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d00c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d815      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d019      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004902:	2b10      	cmp	r3, #16
 8004904:	d111      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4b77      	ldr	r3, [pc, #476]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a76      	ldr	r2, [pc, #472]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004912:	e011      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004918:	3308      	adds	r3, #8
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fac5 	bl	8005eac <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004930:	e002      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004940:	4b68      	ldr	r3, [pc, #416]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004950:	430b      	orrs	r3, r1
 8004952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800496a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004974:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d051      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004988:	d035      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498e:	d82e      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004994:	d031      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800499a:	d828      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a0:	d01a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d822      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80049b2:	e01c      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a4a      	ldr	r2, [pc, #296]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049c0:	e01c      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	3308      	adds	r3, #8
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fa6e 	bl	8005eac <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	3328      	adds	r3, #40	; 0x28
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fb15 	bl	8006010 <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049ec:	e006      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049f4:	e002      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80049fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	4a34      	ldr	r2, [pc, #208]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6513      	str	r3, [r2, #80]	; 0x50
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a32:	2300      	movs	r3, #0
 8004a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d056      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4c:	d033      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a52:	d82c      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a58:	d02f      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a5e:	d826      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a64:	d02b      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6a:	d820      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a70:	d012      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a76:	d81a      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d022      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a80:	d115      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a86:	3308      	adds	r3, #8
 8004a88:	2101      	movs	r1, #1
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 fa0e 	bl	8005eac <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004a96:	e015      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9c:	3328      	adds	r3, #40	; 0x28
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 fab5 	bl	8006010 <RCCEx_PLL3_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ab6:	bf00      	nop
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ada:	4a02      	ldr	r2, [pc, #8]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6513      	str	r3, [r2, #80]	; 0x50
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d055      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b1c:	d033      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b22:	d82c      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d02f      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2e:	d826      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b34:	d02b      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b3a:	d820      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b40:	d012      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b46:	d81a      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b50:	d115      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b56:	3308      	adds	r3, #8
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f9a6 	bl	8005eac <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b66:	e015      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6c:	3328      	adds	r3, #40	; 0x28
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fa4d 	bl	8006010 <RCCEx_PLL3_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b84:	e006      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b9c:	4ba3      	ldr	r3, [pc, #652]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bac:	4a9f      	ldr	r2, [pc, #636]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bb2:	e003      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d037      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be6:	d00e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bec:	d816      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf6:	d111      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf8:	4b8c      	ldr	r3, [pc, #560]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4a8b      	ldr	r2, [pc, #556]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c04:	e00f      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f94c 	bl	8005eac <RCCEx_PLL2_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c1a:	e004      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a7b      	ldr	r2, [pc, #492]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6513      	str	r3, [r2, #80]	; 0x50
 8004c42:	e003      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	d039      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d81c      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004c8d 	.word	0x08004c8d
 8004c84:	08004c9b 	.word	0x08004c9b
 8004c88:	08004cb9 	.word	0x08004cb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8c:	4b67      	ldr	r3, [pc, #412]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4a66      	ldr	r2, [pc, #408]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004c98:	e00f      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f902 	bl	8005eac <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cc2:	4b5a      	ldr	r3, [pc, #360]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	f023 0103 	bic.w	r1, r3, #3
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	4a56      	ldr	r2, [pc, #344]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f000 809f 	beq.w	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fb9b 	bl	8001448 <HAL_GetTick>
 8004d12:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d16:	e00b      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fc fb96 	bl	8001448 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b64      	cmp	r3, #100	; 0x64
 8004d26:	d903      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d30:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ed      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d179      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d44:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d50:	4053      	eors	r3, r2
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d015      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d5a:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d66:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a30      	ldr	r2, [pc, #192]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d72:	4b2e      	ldr	r3, [pc, #184]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d7e:	4a2b      	ldr	r2, [pc, #172]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	d118      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fc fb58 	bl	8001448 <HAL_GetTick>
 8004d98:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d9c:	e00d      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fc fb53 	bl	8001448 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d903      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004db8:	e005      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dba:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0eb      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d129      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dde:	d10e      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004df0:	091a      	lsrs	r2, r3, #4
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6113      	str	r3, [r2, #16]
 8004dfc:	e005      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e08:	6113      	str	r3, [r2, #16]
 8004e0a:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1a:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e20:	e00e      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	58024800 	.word	0x58024800
 8004e34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f002 0301 	and.w	r3, r2, #1
 8004e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f000 8089 	beq.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e68:	2b28      	cmp	r3, #40	; 0x28
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004f4d 	.word	0x08004f4d
 8004e78:	08004f45 	.word	0x08004f45
 8004e7c:	08004f45 	.word	0x08004f45
 8004e80:	08004f45 	.word	0x08004f45
 8004e84:	08004f45 	.word	0x08004f45
 8004e88:	08004f45 	.word	0x08004f45
 8004e8c:	08004f45 	.word	0x08004f45
 8004e90:	08004f45 	.word	0x08004f45
 8004e94:	08004f19 	.word	0x08004f19
 8004e98:	08004f45 	.word	0x08004f45
 8004e9c:	08004f45 	.word	0x08004f45
 8004ea0:	08004f45 	.word	0x08004f45
 8004ea4:	08004f45 	.word	0x08004f45
 8004ea8:	08004f45 	.word	0x08004f45
 8004eac:	08004f45 	.word	0x08004f45
 8004eb0:	08004f45 	.word	0x08004f45
 8004eb4:	08004f2f 	.word	0x08004f2f
 8004eb8:	08004f45 	.word	0x08004f45
 8004ebc:	08004f45 	.word	0x08004f45
 8004ec0:	08004f45 	.word	0x08004f45
 8004ec4:	08004f45 	.word	0x08004f45
 8004ec8:	08004f45 	.word	0x08004f45
 8004ecc:	08004f45 	.word	0x08004f45
 8004ed0:	08004f45 	.word	0x08004f45
 8004ed4:	08004f4d 	.word	0x08004f4d
 8004ed8:	08004f45 	.word	0x08004f45
 8004edc:	08004f45 	.word	0x08004f45
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08004f45 	.word	0x08004f45
 8004ee8:	08004f45 	.word	0x08004f45
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f45 	.word	0x08004f45
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08004f4d 	.word	0x08004f4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 ffc3 	bl	8005eac <RCCEx_PLL2_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e00f      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f32:	3328      	adds	r3, #40	; 0x28
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f86a 	bl	8006010 <RCCEx_PLL3_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f42:	e004      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f56:	4bbf      	ldr	r3, [pc, #764]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f64:	4abb      	ldr	r2, [pc, #748]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6553      	str	r3, [r2, #84]	; 0x54
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f002 0302 	and.w	r3, r2, #2
 8004f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d041      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d824      	bhi.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004fbd 	.word	0x08004fbd
 8004fac:	08004fd3 	.word	0x08004fd3
 8004fb0:	08004ff1 	.word	0x08004ff1
 8004fb4:	08004ff1 	.word	0x08004ff1
 8004fb8:	08004ff1 	.word	0x08004ff1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 ff71 	bl	8005eac <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fd0:	e00f      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd6:	3328      	adds	r3, #40	; 0x28
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 f818 	bl	8006010 <RCCEx_PLL3_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fe6:	e004      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004fee:	e000      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ffa:	4b96      	ldr	r3, [pc, #600]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f023 0107 	bic.w	r1, r3, #7
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005008:	4a92      	ldr	r2, [pc, #584]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800500a:	430b      	orrs	r3, r1
 800500c:	6553      	str	r3, [r2, #84]	; 0x54
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f002 0304 	and.w	r3, r2, #4
 8005024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800502e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d044      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005040:	2b05      	cmp	r3, #5
 8005042:	d825      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005099 	.word	0x08005099
 8005050:	08005065 	.word	0x08005065
 8005054:	0800507b 	.word	0x0800507b
 8005058:	08005099 	.word	0x08005099
 800505c:	08005099 	.word	0x08005099
 8005060:	08005099 	.word	0x08005099
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	3308      	adds	r3, #8
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f000 ff1d 	bl	8005eac <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005078:	e00f      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507e:	3328      	adds	r3, #40	; 0x28
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ffc4 	bl	8006010 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800508e:	e004      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050a2:	4b6c      	ldr	r3, [pc, #432]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	f023 0107 	bic.w	r1, r3, #7
 80050aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b2:	4a68      	ldr	r2, [pc, #416]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6593      	str	r3, [r2, #88]	; 0x58
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f002 0320 	and.w	r3, r2, #32
 80050ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d055      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ee:	d033      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80050f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f4:	d82c      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d02f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005100:	d826      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005106:	d02b      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005108:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800510c:	d820      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800510e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005112:	d012      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005118:	d81a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d022      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800511e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005122:	d115      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005128:	3308      	adds	r3, #8
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f000 febd 	bl	8005eac <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005138:	e015      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	3328      	adds	r3, #40	; 0x28
 8005140:	2102      	movs	r1, #2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 ff64 	bl	8006010 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800514e:	e00a      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005156:	e006      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005158:	bf00      	nop
 800515a:	e004      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800515c:	bf00      	nop
 800515e:	e002      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800516e:	4b39      	ldr	r3, [pc, #228]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	4a35      	ldr	r2, [pc, #212]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005180:	430b      	orrs	r3, r1
 8005182:	6553      	str	r3, [r2, #84]	; 0x54
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800518a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80051a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4313      	orrs	r3, r2
 80051ac:	d058      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051ba:	d033      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051c0:	d82c      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d02f      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d826      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051d2:	d02b      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051d8:	d820      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051de:	d012      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e4:	d81a      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d022      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d115      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f4:	3308      	adds	r3, #8
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fe57 	bl	8005eac <RCCEx_PLL2_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005204:	e015      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520a:	3328      	adds	r3, #40	; 0x28
 800520c:	2102      	movs	r1, #2
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fefe 	bl	8006010 <RCCEx_PLL3_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800521a:	e00a      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005222:	e006      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005224:	bf00      	nop
 8005226:	e004      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10e      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800523c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524a:	4a02      	ldr	r2, [pc, #8]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800524c:	430b      	orrs	r3, r1
 800524e:	6593      	str	r3, [r2, #88]	; 0x58
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005252:	bf00      	nop
 8005254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800526c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005276:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800527a:	460b      	mov	r3, r1
 800527c:	4313      	orrs	r3, r2
 800527e:	d055      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005288:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800528c:	d033      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800528e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005292:	d82c      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d02f      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	d826      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052a4:	d02b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80052a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052aa:	d820      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b0:	d012      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80052b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b6:	d81a      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d022      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c0:	d115      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	3308      	adds	r3, #8
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fdee 	bl	8005eac <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052d6:	e015      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052dc:	3328      	adds	r3, #40	; 0x28
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fe95 	bl	8006010 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052ec:	e00a      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052f6:	bf00      	nop
 80052f8:	e004      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800530c:	4ba1      	ldr	r3, [pc, #644]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800531c:	4a9d      	ldr	r2, [pc, #628]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800531e:	430b      	orrs	r3, r1
 8005320:	6593      	str	r3, [r2, #88]	; 0x58
 8005322:	e003      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f002 0308 	and.w	r3, r2, #8
 8005338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533c:	2300      	movs	r3, #0
 800533e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005342:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005346:	460b      	mov	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	d01e      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800534c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d10c      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535e:	3328      	adds	r3, #40	; 0x28
 8005360:	2102      	movs	r1, #2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fe54 	bl	8006010 <RCCEx_PLL3_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005374:	4b87      	ldr	r3, [pc, #540]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005384:	4a83      	ldr	r2, [pc, #524]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005386:	430b      	orrs	r3, r1
 8005388:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f002 0310 	and.w	r3, r2, #16
 8005396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800539a:	2300      	movs	r3, #0
 800539c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80053a4:	460b      	mov	r3, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d01e      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b6:	d10c      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053bc:	3328      	adds	r3, #40	; 0x28
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fe25 	bl	8006010 <RCCEx_PLL3_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053d2:	4b70      	ldr	r3, [pc, #448]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e2:	4a6c      	ldr	r2, [pc, #432]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80053f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005402:	460b      	mov	r3, r1
 8005404:	4313      	orrs	r3, r2
 8005406:	d03e      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005414:	d022      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541a:	d81b      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005424:	d00b      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005426:	e015      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542c:	3308      	adds	r3, #8
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fd3b 	bl	8005eac <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800543c:	e00f      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	3328      	adds	r3, #40	; 0x28
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fde2 	bl	8006010 <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005466:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005476:	4a47      	ldr	r2, [pc, #284]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005478:	430b      	orrs	r3, r1
 800547a:	6593      	str	r3, [r2, #88]	; 0x58
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005492:	67bb      	str	r3, [r7, #120]	; 0x78
 8005494:	2300      	movs	r3, #0
 8005496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005498:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800549c:	460b      	mov	r3, r1
 800549e:	4313      	orrs	r3, r2
 80054a0:	d03b      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054ae:	d01f      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80054b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054b4:	d818      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ba:	d003      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054c0:	d007      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c4:	4b33      	ldr	r3, [pc, #204]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	4a32      	ldr	r2, [pc, #200]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054d0:	e00f      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d6:	3328      	adds	r3, #40	; 0x28
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd98 	bl	8006010 <RCCEx_PLL3_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054e6:	e004      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054ee:	e000      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80054f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10b      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054fa:	4b26      	ldr	r3, [pc, #152]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	4a22      	ldr	r2, [pc, #136]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800550c:	430b      	orrs	r3, r1
 800550e:	6553      	str	r3, [r2, #84]	; 0x54
 8005510:	e003      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005526:	673b      	str	r3, [r7, #112]	; 0x70
 8005528:	2300      	movs	r3, #0
 800552a:	677b      	str	r3, [r7, #116]	; 0x74
 800552c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d034      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005544:	d007      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005548:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a11      	ldr	r2, [pc, #68]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005554:	e00e      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555a:	3308      	adds	r3, #8
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fca4 	bl	8005eac <RCCEx_PLL2_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800556a:	e003      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558a:	4a02      	ldr	r2, [pc, #8]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800558c:	430b      	orrs	r3, r1
 800558e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005590:	e006      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80055ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ae:	2300      	movs	r3, #0
 80055b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d00c      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c0:	3328      	adds	r3, #40	; 0x28
 80055c2:	2102      	movs	r1, #2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd23 	bl	8006010 <RCCEx_PLL3_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055e2:	663b      	str	r3, [r7, #96]	; 0x60
 80055e4:	2300      	movs	r3, #0
 80055e6:	667b      	str	r3, [r7, #100]	; 0x64
 80055e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80055ec:	460b      	mov	r3, r1
 80055ee:	4313      	orrs	r3, r2
 80055f0:	d038      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80055f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fe:	d018      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005604:	d811      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560a:	d014      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800560c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005610:	d80b      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561a:	d106      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800561c:	4bc3      	ldr	r3, [pc, #780]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	4ac2      	ldr	r2, [pc, #776]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005628:	e008      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005630:	e004      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800563a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005644:	4bb9      	ldr	r3, [pc, #740]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005654:	4ab5      	ldr	r2, [pc, #724]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005656:	430b      	orrs	r3, r1
 8005658:	6553      	str	r3, [r2, #84]	; 0x54
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005660:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005670:	65bb      	str	r3, [r7, #88]	; 0x58
 8005672:	2300      	movs	r3, #0
 8005674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005676:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005680:	4baa      	ldr	r3, [pc, #680]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568e:	4aa7      	ldr	r2, [pc, #668]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005690:	430b      	orrs	r3, r1
 8005692:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80056a0:	653b      	str	r3, [r7, #80]	; 0x50
 80056a2:	2300      	movs	r3, #0
 80056a4:	657b      	str	r3, [r7, #84]	; 0x54
 80056a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056b0:	4b9e      	ldr	r3, [pc, #632]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056c0:	4a9a      	ldr	r2, [pc, #616]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80056d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d4:	2300      	movs	r3, #0
 80056d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80056dc:	460b      	mov	r3, r1
 80056de:	4313      	orrs	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056e2:	4b92      	ldr	r3, [pc, #584]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f0:	4a8e      	ldr	r2, [pc, #568]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056f2:	430b      	orrs	r3, r1
 80056f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005702:	643b      	str	r3, [r7, #64]	; 0x40
 8005704:	2300      	movs	r3, #0
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
 8005708:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005712:	4b86      	ldr	r3, [pc, #536]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	4a85      	ldr	r2, [pc, #532]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005718:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800571c:	6113      	str	r3, [r2, #16]
 800571e:	4b83      	ldr	r3, [pc, #524]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005720:	6919      	ldr	r1, [r3, #16]
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005726:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800572a:	4a80      	ldr	r2, [pc, #512]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800572c:	430b      	orrs	r3, r1
 800572e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
 800573e:	2300      	movs	r3, #0
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005742:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800574c:	4b77      	ldr	r3, [pc, #476]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800574e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005750:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	4a74      	ldr	r2, [pc, #464]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800575c:	430b      	orrs	r3, r1
 800575e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800576c:	633b      	str	r3, [r7, #48]	; 0x30
 800576e:	2300      	movs	r3, #0
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
 8005772:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800577c:	4b6b      	ldr	r3, [pc, #428]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800578c:	4a67      	ldr	r2, [pc, #412]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800578e:	430b      	orrs	r3, r1
 8005790:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	2100      	movs	r1, #0
 800579c:	62b9      	str	r1, [r7, #40]	; 0x28
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d011      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	3308      	adds	r3, #8
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fb78 	bl	8005eac <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	2100      	movs	r1, #0
 80057dc:	6239      	str	r1, [r7, #32]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80057e8:	460b      	mov	r3, r1
 80057ea:	4313      	orrs	r3, r2
 80057ec:	d011      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f2:	3308      	adds	r3, #8
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb58 	bl	8005eac <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800580e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	2100      	movs	r1, #0
 800581c:	61b9      	str	r1, [r7, #24]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d011      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	3308      	adds	r3, #8
 8005834:	2102      	movs	r1, #2
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fb38 	bl	8005eac <RCCEx_PLL2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800584e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	2100      	movs	r1, #0
 800585c:	6139      	str	r1, [r7, #16]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d011      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005872:	3328      	adds	r3, #40	; 0x28
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fbca 	bl	8006010 <RCCEx_PLL3_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800588e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	2100      	movs	r1, #0
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058a8:	460b      	mov	r3, r1
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d011      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b2:	3328      	adds	r3, #40	; 0x28
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fbaa 	bl	8006010 <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	2100      	movs	r1, #0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d011      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f2:	3328      	adds	r3, #40	; 0x28
 80058f4:	2102      	movs	r1, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb8a 	bl	8006010 <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005912:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
}
 8005920:	4618      	mov	r0, r3
 8005922:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005926:	46bd      	mov	sp, r7
 8005928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800592c:	58024400 	.word	0x58024400

08005930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005934:	f7fe fd96 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	58024400 	.word	0x58024400
 8005958:	0801606c 	.word	0x0801606c

0800595c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	; 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005964:	4ba1      	ldr	r3, [pc, #644]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800596e:	4b9f      	ldr	r3, [pc, #636]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	0b1b      	lsrs	r3, r3, #12
 8005974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800597a:	4b9c      	ldr	r3, [pc, #624]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005986:	4b99      	ldr	r3, [pc, #612]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8111 	beq.w	8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f000 8083 	beq.w	8005ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f200 80a1 	bhi.w	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d056      	beq.n	8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80059c6:	e099      	b.n	8005afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c8:	4b88      	ldr	r3, [pc, #544]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02d      	beq.n	8005a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d4:	4b85      	ldr	r3, [pc, #532]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	08db      	lsrs	r3, r3, #3
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	4a84      	ldr	r2, [pc, #528]	; (8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b7b      	ldr	r3, [pc, #492]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a2e:	e087      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a72:	e065      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b59      	ldr	r3, [pc, #356]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab6:	e043      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aca:	4b48      	ldr	r3, [pc, #288]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ade:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afa:	e021      	b.n	8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0e:	4b37      	ldr	r3, [pc, #220]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b40:	4b2a      	ldr	r3, [pc, #168]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b66:	ee17 2a90 	vmov	r2, s15
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b94:	ee17 2a90 	vmov	r2, s15
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b9c:	4b13      	ldr	r3, [pc, #76]	; (8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc2:	ee17 2a90 	vmov	r2, s15
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
}
 8005bde:	bf00      	nop
 8005be0:	3724      	adds	r7, #36	; 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	03d09000 	.word	0x03d09000
 8005bf4:	46000000 	.word	0x46000000
 8005bf8:	4c742400 	.word	0x4c742400
 8005bfc:	4a742400 	.word	0x4a742400
 8005c00:	4af42400 	.word	0x4af42400

08005c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c0c:	4ba1      	ldr	r3, [pc, #644]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c16:	4b9f      	ldr	r3, [pc, #636]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	0d1b      	lsrs	r3, r3, #20
 8005c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c22:	4b9c      	ldr	r3, [pc, #624]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c2e:	4b99      	ldr	r3, [pc, #612]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8111 	beq.w	8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	f000 8083 	beq.w	8005d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	f200 80a1 	bhi.w	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d056      	beq.n	8005d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c6e:	e099      	b.n	8005da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c70:	4b88      	ldr	r3, [pc, #544]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d02d      	beq.n	8005cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c7c:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	08db      	lsrs	r3, r3, #3
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	4a84      	ldr	r2, [pc, #528]	; (8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	ee07 3a90 	vmov	s15, r3
 8005c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca6:	4b7b      	ldr	r3, [pc, #492]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cd6:	e087      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cea:	4b6a      	ldr	r3, [pc, #424]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1a:	e065      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2e:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5e:	e043      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d72:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da2:	e021      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db6:	4b37      	ldr	r3, [pc, #220]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005de8:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	0a5b      	lsrs	r3, r3, #9
 8005dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 2a90 	vmov	r2, s15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e16:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	0c1b      	lsrs	r3, r3, #16
 8005e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3c:	ee17 2a90 	vmov	r2, s15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	0e1b      	lsrs	r3, r3, #24
 8005e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6a:	ee17 2a90 	vmov	r2, s15
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e72:	e008      	b.n	8005e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	609a      	str	r2, [r3, #8]
}
 8005e86:	bf00      	nop
 8005e88:	3724      	adds	r7, #36	; 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	46000000 	.word	0x46000000
 8005ea0:	4c742400 	.word	0x4c742400
 8005ea4:	4a742400 	.word	0x4a742400
 8005ea8:	4af42400 	.word	0x4af42400

08005eac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eba:	4b53      	ldr	r3, [pc, #332]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d101      	bne.n	8005eca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e099      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a4e      	ldr	r2, [pc, #312]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed6:	f7fb fab7 	bl	8001448 <HAL_GetTick>
 8005eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005edc:	e008      	b.n	8005ef0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ede:	f7fb fab3 	bl	8001448 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e086      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef0:	4b45      	ldr	r3, [pc, #276]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005efc:	4b42      	ldr	r3, [pc, #264]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	493f      	ldr	r1, [pc, #252]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	025b      	lsls	r3, r3, #9
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f40:	4931      	ldr	r1, [pc, #196]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f46:	4b30      	ldr	r3, [pc, #192]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	492d      	ldr	r1, [pc, #180]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f58:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f023 0220 	bic.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4928      	ldr	r1, [pc, #160]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f6a:	4b27      	ldr	r3, [pc, #156]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4a26      	ldr	r2, [pc, #152]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f70:	f023 0310 	bic.w	r3, r3, #16
 8005f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f7a:	4b24      	ldr	r3, [pc, #144]	; (800600c <RCCEx_PLL2_Config+0x160>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	69d2      	ldr	r2, [r2, #28]
 8005f82:	00d2      	lsls	r2, r2, #3
 8005f84:	4920      	ldr	r1, [pc, #128]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f8a:	4b1f      	ldr	r3, [pc, #124]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f90:	f043 0310 	orr.w	r3, r3, #16
 8005f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fa8:	e00f      	b.n	8005fca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d106      	bne.n	8005fbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fb0:	4b15      	ldr	r3, [pc, #84]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a14      	ldr	r2, [pc, #80]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fbc:	e005      	b.n	8005fca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fca:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fb fa37 	bl	8001448 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fdc:	e008      	b.n	8005ff0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fde:	f7fb fa33 	bl	8001448 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e006      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	ffff0007 	.word	0xffff0007

08006010 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800601e:	4b53      	ldr	r3, [pc, #332]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d101      	bne.n	800602e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e099      	b.n	8006162 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800602e:	4b4f      	ldr	r3, [pc, #316]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4e      	ldr	r2, [pc, #312]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603a:	f7fb fa05 	bl	8001448 <HAL_GetTick>
 800603e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006040:	e008      	b.n	8006054 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006042:	f7fb fa01 	bl	8001448 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e086      	b.n	8006162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006054:	4b45      	ldr	r3, [pc, #276]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f0      	bne.n	8006042 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006060:	4b42      	ldr	r3, [pc, #264]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	051b      	lsls	r3, r3, #20
 800606e:	493f      	ldr	r1, [pc, #252]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	628b      	str	r3, [r1, #40]	; 0x28
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	3b01      	subs	r3, #1
 800607a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	3b01      	subs	r3, #1
 8006084:	025b      	lsls	r3, r3, #9
 8006086:	b29b      	uxth	r3, r3
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	3b01      	subs	r3, #1
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	3b01      	subs	r3, #1
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060a4:	4931      	ldr	r1, [pc, #196]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060aa:	4b30      	ldr	r3, [pc, #192]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	492d      	ldr	r1, [pc, #180]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	4928      	ldr	r1, [pc, #160]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060ce:	4b27      	ldr	r3, [pc, #156]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	4a26      	ldr	r2, [pc, #152]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <RCCEx_PLL3_Config+0x160>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	69d2      	ldr	r2, [r2, #28]
 80060e6:	00d2      	lsls	r2, r2, #3
 80060e8:	4920      	ldr	r1, [pc, #128]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060ee:	4b1f      	ldr	r3, [pc, #124]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	4a1e      	ldr	r2, [pc, #120]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006100:	4b1a      	ldr	r3, [pc, #104]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800610a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800610c:	e00f      	b.n	800612e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d106      	bne.n	8006122 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006114:	4b15      	ldr	r3, [pc, #84]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 800611a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800611e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006120:	e005      	b.n	800612e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	4a11      	ldr	r2, [pc, #68]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800612c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0e      	ldr	r2, [pc, #56]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613a:	f7fb f985 	bl	8001448 <HAL_GetTick>
 800613e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006140:	e008      	b.n	8006154 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006142:	f7fb f981 	bl	8001448 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f0      	beq.n	8006142 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
 8006170:	ffff0007 	.word	0xffff0007

08006174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e042      	b.n	800620c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fa fe1d 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	; 0x24
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f82c 	bl	8006214 <UART_SetConfig>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e022      	b.n	800620c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fd88 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fe0f 	bl	8006e28 <UART_CheckIdleState>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b092      	sub	sp, #72	; 0x48
 800621a:	af00      	add	r7, sp, #0
 800621c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4bbe      	ldr	r3, [pc, #760]	; (800653c <UART_SetConfig+0x328>)
 8006244:	4013      	ands	r3, r2
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800624c:	430b      	orrs	r3, r1
 800624e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4ab3      	ldr	r2, [pc, #716]	; (8006540 <UART_SetConfig+0x32c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627c:	4313      	orrs	r3, r2
 800627e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	4baf      	ldr	r3, [pc, #700]	; (8006544 <UART_SetConfig+0x330>)
 8006288:	4013      	ands	r3, r2
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006290:	430b      	orrs	r3, r1
 8006292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	f023 010f 	bic.w	r1, r3, #15
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4aa6      	ldr	r2, [pc, #664]	; (8006548 <UART_SetConfig+0x334>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d177      	bne.n	80063a4 <UART_SetConfig+0x190>
 80062b4:	4ba5      	ldr	r3, [pc, #660]	; (800654c <UART_SetConfig+0x338>)
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062bc:	2b28      	cmp	r3, #40	; 0x28
 80062be:	d86d      	bhi.n	800639c <UART_SetConfig+0x188>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0xb4>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	0800636d 	.word	0x0800636d
 80062cc:	0800639d 	.word	0x0800639d
 80062d0:	0800639d 	.word	0x0800639d
 80062d4:	0800639d 	.word	0x0800639d
 80062d8:	0800639d 	.word	0x0800639d
 80062dc:	0800639d 	.word	0x0800639d
 80062e0:	0800639d 	.word	0x0800639d
 80062e4:	0800639d 	.word	0x0800639d
 80062e8:	08006375 	.word	0x08006375
 80062ec:	0800639d 	.word	0x0800639d
 80062f0:	0800639d 	.word	0x0800639d
 80062f4:	0800639d 	.word	0x0800639d
 80062f8:	0800639d 	.word	0x0800639d
 80062fc:	0800639d 	.word	0x0800639d
 8006300:	0800639d 	.word	0x0800639d
 8006304:	0800639d 	.word	0x0800639d
 8006308:	0800637d 	.word	0x0800637d
 800630c:	0800639d 	.word	0x0800639d
 8006310:	0800639d 	.word	0x0800639d
 8006314:	0800639d 	.word	0x0800639d
 8006318:	0800639d 	.word	0x0800639d
 800631c:	0800639d 	.word	0x0800639d
 8006320:	0800639d 	.word	0x0800639d
 8006324:	0800639d 	.word	0x0800639d
 8006328:	08006385 	.word	0x08006385
 800632c:	0800639d 	.word	0x0800639d
 8006330:	0800639d 	.word	0x0800639d
 8006334:	0800639d 	.word	0x0800639d
 8006338:	0800639d 	.word	0x0800639d
 800633c:	0800639d 	.word	0x0800639d
 8006340:	0800639d 	.word	0x0800639d
 8006344:	0800639d 	.word	0x0800639d
 8006348:	0800638d 	.word	0x0800638d
 800634c:	0800639d 	.word	0x0800639d
 8006350:	0800639d 	.word	0x0800639d
 8006354:	0800639d 	.word	0x0800639d
 8006358:	0800639d 	.word	0x0800639d
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
 8006364:	0800639d 	.word	0x0800639d
 8006368:	08006395 	.word	0x08006395
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e222      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e21e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e21a      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e216      	b.n	80067ba <UART_SetConfig+0x5a6>
 800638c:	2320      	movs	r3, #32
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e212      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006394:	2340      	movs	r3, #64	; 0x40
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e20e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e20a      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a69      	ldr	r2, [pc, #420]	; (8006550 <UART_SetConfig+0x33c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d130      	bne.n	8006410 <UART_SetConfig+0x1fc>
 80063ae:	4b67      	ldr	r3, [pc, #412]	; (800654c <UART_SetConfig+0x338>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d826      	bhi.n	8006408 <UART_SetConfig+0x1f4>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0x1ac>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e1ec      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e1e8      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e1e4      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e1e0      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063f8:	2320      	movs	r3, #32
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e1dc      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e1d8      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e1d4      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a4f      	ldr	r2, [pc, #316]	; (8006554 <UART_SetConfig+0x340>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d130      	bne.n	800647c <UART_SetConfig+0x268>
 800641a:	4b4c      	ldr	r3, [pc, #304]	; (800654c <UART_SetConfig+0x338>)
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b05      	cmp	r3, #5
 8006424:	d826      	bhi.n	8006474 <UART_SetConfig+0x260>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x218>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006445 	.word	0x08006445
 8006430:	0800644d 	.word	0x0800644d
 8006434:	08006455 	.word	0x08006455
 8006438:	0800645d 	.word	0x0800645d
 800643c:	08006465 	.word	0x08006465
 8006440:	0800646d 	.word	0x0800646d
 8006444:	2300      	movs	r3, #0
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e1b6      	b.n	80067ba <UART_SetConfig+0x5a6>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e1b2      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e1ae      	b.n	80067ba <UART_SetConfig+0x5a6>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e1aa      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006464:	2320      	movs	r3, #32
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e1a6      	b.n	80067ba <UART_SetConfig+0x5a6>
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e1a2      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e19e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a35      	ldr	r2, [pc, #212]	; (8006558 <UART_SetConfig+0x344>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d130      	bne.n	80064e8 <UART_SetConfig+0x2d4>
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <UART_SetConfig+0x338>)
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b05      	cmp	r3, #5
 8006490:	d826      	bhi.n	80064e0 <UART_SetConfig+0x2cc>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <UART_SetConfig+0x284>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064b1 	.word	0x080064b1
 800649c:	080064b9 	.word	0x080064b9
 80064a0:	080064c1 	.word	0x080064c1
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e180      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e17c      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e178      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e174      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064d0:	2320      	movs	r3, #32
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e170      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e16c      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e168      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1b      	ldr	r2, [pc, #108]	; (800655c <UART_SetConfig+0x348>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d142      	bne.n	8006578 <UART_SetConfig+0x364>
 80064f2:	4b16      	ldr	r3, [pc, #88]	; (800654c <UART_SetConfig+0x338>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d838      	bhi.n	8006570 <UART_SetConfig+0x35c>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0x2f0>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	0800651d 	.word	0x0800651d
 8006508:	08006525 	.word	0x08006525
 800650c:	0800652d 	.word	0x0800652d
 8006510:	08006535 	.word	0x08006535
 8006514:	08006561 	.word	0x08006561
 8006518:	08006569 	.word	0x08006569
 800651c:	2300      	movs	r3, #0
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e14a      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e146      	b.n	80067ba <UART_SetConfig+0x5a6>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e142      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e13e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800653c:	cfff69f3 	.word	0xcfff69f3
 8006540:	58000c00 	.word	0x58000c00
 8006544:	11fff4ff 	.word	0x11fff4ff
 8006548:	40011000 	.word	0x40011000
 800654c:	58024400 	.word	0x58024400
 8006550:	40004400 	.word	0x40004400
 8006554:	40004800 	.word	0x40004800
 8006558:	40004c00 	.word	0x40004c00
 800655c:	40005000 	.word	0x40005000
 8006560:	2320      	movs	r3, #32
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e128      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006568:	2340      	movs	r3, #64	; 0x40
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e124      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e120      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4acb      	ldr	r2, [pc, #812]	; (80068ac <UART_SetConfig+0x698>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d176      	bne.n	8006670 <UART_SetConfig+0x45c>
 8006582:	4bcb      	ldr	r3, [pc, #812]	; (80068b0 <UART_SetConfig+0x69c>)
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658a:	2b28      	cmp	r3, #40	; 0x28
 800658c:	d86c      	bhi.n	8006668 <UART_SetConfig+0x454>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x380>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	08006639 	.word	0x08006639
 8006598:	08006669 	.word	0x08006669
 800659c:	08006669 	.word	0x08006669
 80065a0:	08006669 	.word	0x08006669
 80065a4:	08006669 	.word	0x08006669
 80065a8:	08006669 	.word	0x08006669
 80065ac:	08006669 	.word	0x08006669
 80065b0:	08006669 	.word	0x08006669
 80065b4:	08006641 	.word	0x08006641
 80065b8:	08006669 	.word	0x08006669
 80065bc:	08006669 	.word	0x08006669
 80065c0:	08006669 	.word	0x08006669
 80065c4:	08006669 	.word	0x08006669
 80065c8:	08006669 	.word	0x08006669
 80065cc:	08006669 	.word	0x08006669
 80065d0:	08006669 	.word	0x08006669
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006669 	.word	0x08006669
 80065dc:	08006669 	.word	0x08006669
 80065e0:	08006669 	.word	0x08006669
 80065e4:	08006669 	.word	0x08006669
 80065e8:	08006669 	.word	0x08006669
 80065ec:	08006669 	.word	0x08006669
 80065f0:	08006669 	.word	0x08006669
 80065f4:	08006651 	.word	0x08006651
 80065f8:	08006669 	.word	0x08006669
 80065fc:	08006669 	.word	0x08006669
 8006600:	08006669 	.word	0x08006669
 8006604:	08006669 	.word	0x08006669
 8006608:	08006669 	.word	0x08006669
 800660c:	08006669 	.word	0x08006669
 8006610:	08006669 	.word	0x08006669
 8006614:	08006659 	.word	0x08006659
 8006618:	08006669 	.word	0x08006669
 800661c:	08006669 	.word	0x08006669
 8006620:	08006669 	.word	0x08006669
 8006624:	08006669 	.word	0x08006669
 8006628:	08006669 	.word	0x08006669
 800662c:	08006669 	.word	0x08006669
 8006630:	08006669 	.word	0x08006669
 8006634:	08006661 	.word	0x08006661
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e0bc      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e0b8      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e0b4      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e0b0      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006658:	2320      	movs	r3, #32
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e0ac      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e0a8      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e0a4      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a8f      	ldr	r2, [pc, #572]	; (80068b4 <UART_SetConfig+0x6a0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d130      	bne.n	80066dc <UART_SetConfig+0x4c8>
 800667a:	4b8d      	ldr	r3, [pc, #564]	; (80068b0 <UART_SetConfig+0x69c>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b05      	cmp	r3, #5
 8006684:	d826      	bhi.n	80066d4 <UART_SetConfig+0x4c0>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x478>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066a5 	.word	0x080066a5
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066b5 	.word	0x080066b5
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066aa:	e086      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e082      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e07e      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e07a      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066c4:	2320      	movs	r3, #32
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e076      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e072      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e06e      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a75      	ldr	r2, [pc, #468]	; (80068b8 <UART_SetConfig+0x6a4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d130      	bne.n	8006748 <UART_SetConfig+0x534>
 80066e6:	4b72      	ldr	r3, [pc, #456]	; (80068b0 <UART_SetConfig+0x69c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d826      	bhi.n	8006740 <UART_SetConfig+0x52c>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x4e4>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006711 	.word	0x08006711
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006721 	.word	0x08006721
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	08006739 	.word	0x08006739
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e050      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e04c      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e048      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e044      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006730:	2320      	movs	r3, #32
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e040      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e03c      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e038      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5b      	ldr	r2, [pc, #364]	; (80068bc <UART_SetConfig+0x6a8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d130      	bne.n	80067b4 <UART_SetConfig+0x5a0>
 8006752:	4b57      	ldr	r3, [pc, #348]	; (80068b0 <UART_SetConfig+0x69c>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b05      	cmp	r3, #5
 800675c:	d826      	bhi.n	80067ac <UART_SetConfig+0x598>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0x550>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	0800677d 	.word	0x0800677d
 8006768:	08006785 	.word	0x08006785
 800676c:	0800678d 	.word	0x0800678d
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	2302      	movs	r3, #2
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e01a      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e016      	b.n	80067ba <UART_SetConfig+0x5a6>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e012      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e00e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800679c:	2320      	movs	r3, #32
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e00a      	b.n	80067ba <UART_SetConfig+0x5a6>
 80067a4:	2340      	movs	r3, #64	; 0x40
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e006      	b.n	80067ba <UART_SetConfig+0x5a6>
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e002      	b.n	80067ba <UART_SetConfig+0x5a6>
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a3f      	ldr	r2, [pc, #252]	; (80068bc <UART_SetConfig+0x6a8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	f040 80f8 	bne.w	80069b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	dc46      	bgt.n	800685c <UART_SetConfig+0x648>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	f2c0 8082 	blt.w	80068d8 <UART_SetConfig+0x6c4>
 80067d4:	3b02      	subs	r3, #2
 80067d6:	2b1e      	cmp	r3, #30
 80067d8:	d87e      	bhi.n	80068d8 <UART_SetConfig+0x6c4>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <UART_SetConfig+0x5cc>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006863 	.word	0x08006863
 80067e4:	080068d9 	.word	0x080068d9
 80067e8:	0800686b 	.word	0x0800686b
 80067ec:	080068d9 	.word	0x080068d9
 80067f0:	080068d9 	.word	0x080068d9
 80067f4:	080068d9 	.word	0x080068d9
 80067f8:	0800687b 	.word	0x0800687b
 80067fc:	080068d9 	.word	0x080068d9
 8006800:	080068d9 	.word	0x080068d9
 8006804:	080068d9 	.word	0x080068d9
 8006808:	080068d9 	.word	0x080068d9
 800680c:	080068d9 	.word	0x080068d9
 8006810:	080068d9 	.word	0x080068d9
 8006814:	080068d9 	.word	0x080068d9
 8006818:	0800688b 	.word	0x0800688b
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068d9 	.word	0x080068d9
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068d9 	.word	0x080068d9
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068d9 	.word	0x080068d9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068cb 	.word	0x080068cb
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d037      	beq.n	80068d0 <UART_SetConfig+0x6bc>
 8006860:	e03a      	b.n	80068d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006862:	f7ff f865 	bl	8005930 <HAL_RCCEx_GetD3PCLK1Freq>
 8006866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006868:	e03c      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff f874 	bl	800595c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006878:	e034      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687a:	f107 0318 	add.w	r3, r7, #24
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f9c0 	bl	8005c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006888:	e02c      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <UART_SetConfig+0x69c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <UART_SetConfig+0x69c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	08db      	lsrs	r3, r3, #3
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	4a07      	ldr	r2, [pc, #28]	; (80068c0 <UART_SetConfig+0x6ac>)
 80068a2:	fa22 f303 	lsr.w	r3, r2, r3
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068a8:	e01c      	b.n	80068e4 <UART_SetConfig+0x6d0>
 80068aa:	bf00      	nop
 80068ac:	40011400 	.word	0x40011400
 80068b0:	58024400 	.word	0x58024400
 80068b4:	40007800 	.word	0x40007800
 80068b8:	40007c00 	.word	0x40007c00
 80068bc:	58000c00 	.word	0x58000c00
 80068c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b9d      	ldr	r3, [pc, #628]	; (8006b3c <UART_SetConfig+0x928>)
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c8:	e00c      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068ca:	4b9d      	ldr	r3, [pc, #628]	; (8006b40 <UART_SetConfig+0x92c>)
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ce:	e009      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d6:	e005      	b.n	80068e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 81de 	beq.w	8006ca8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	4a94      	ldr	r2, [pc, #592]	; (8006b44 <UART_SetConfig+0x930>)
 80068f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690c:	429a      	cmp	r2, r3
 800690e:	d305      	bcc.n	800691c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006918:	429a      	cmp	r2, r3
 800691a:	d903      	bls.n	8006924 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006922:	e1c1      	b.n	8006ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	2200      	movs	r2, #0
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	60fa      	str	r2, [r7, #12]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	4a84      	ldr	r2, [pc, #528]	; (8006b44 <UART_SetConfig+0x930>)
 8006932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006936:	b29b      	uxth	r3, r3
 8006938:	2200      	movs	r2, #0
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006946:	f7f9 fd1b 	bl	8000380 <__aeabi_uldivmod>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	020b      	lsls	r3, r1, #8
 800695c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006960:	0202      	lsls	r2, r0, #8
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	6849      	ldr	r1, [r1, #4]
 8006966:	0849      	lsrs	r1, r1, #1
 8006968:	2000      	movs	r0, #0
 800696a:	460c      	mov	r4, r1
 800696c:	4605      	mov	r5, r0
 800696e:	eb12 0804 	adds.w	r8, r2, r4
 8006972:	eb43 0905 	adc.w	r9, r3, r5
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	469a      	mov	sl, r3
 800697e:	4693      	mov	fp, r2
 8006980:	4652      	mov	r2, sl
 8006982:	465b      	mov	r3, fp
 8006984:	4640      	mov	r0, r8
 8006986:	4649      	mov	r1, r9
 8006988:	f7f9 fcfa 	bl	8000380 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4613      	mov	r3, r2
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800699a:	d308      	bcc.n	80069ae <UART_SetConfig+0x79a>
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a2:	d204      	bcs.n	80069ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069aa:	60da      	str	r2, [r3, #12]
 80069ac:	e17c      	b.n	8006ca8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069b4:	e178      	b.n	8006ca8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069be:	f040 80c5 	bne.w	8006b4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80069c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	dc48      	bgt.n	8006a5c <UART_SetConfig+0x848>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db7b      	blt.n	8006ac6 <UART_SetConfig+0x8b2>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d879      	bhi.n	8006ac6 <UART_SetConfig+0x8b2>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0x7c4>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a63 	.word	0x08006a63
 80069dc:	08006a6b 	.word	0x08006a6b
 80069e0:	08006ac7 	.word	0x08006ac7
 80069e4:	08006ac7 	.word	0x08006ac7
 80069e8:	08006a73 	.word	0x08006a73
 80069ec:	08006ac7 	.word	0x08006ac7
 80069f0:	08006ac7 	.word	0x08006ac7
 80069f4:	08006ac7 	.word	0x08006ac7
 80069f8:	08006a83 	.word	0x08006a83
 80069fc:	08006ac7 	.word	0x08006ac7
 8006a00:	08006ac7 	.word	0x08006ac7
 8006a04:	08006ac7 	.word	0x08006ac7
 8006a08:	08006ac7 	.word	0x08006ac7
 8006a0c:	08006ac7 	.word	0x08006ac7
 8006a10:	08006ac7 	.word	0x08006ac7
 8006a14:	08006ac7 	.word	0x08006ac7
 8006a18:	08006a93 	.word	0x08006a93
 8006a1c:	08006ac7 	.word	0x08006ac7
 8006a20:	08006ac7 	.word	0x08006ac7
 8006a24:	08006ac7 	.word	0x08006ac7
 8006a28:	08006ac7 	.word	0x08006ac7
 8006a2c:	08006ac7 	.word	0x08006ac7
 8006a30:	08006ac7 	.word	0x08006ac7
 8006a34:	08006ac7 	.word	0x08006ac7
 8006a38:	08006ac7 	.word	0x08006ac7
 8006a3c:	08006ac7 	.word	0x08006ac7
 8006a40:	08006ac7 	.word	0x08006ac7
 8006a44:	08006ac7 	.word	0x08006ac7
 8006a48:	08006ac7 	.word	0x08006ac7
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006ac7 	.word	0x08006ac7
 8006a54:	08006ac7 	.word	0x08006ac7
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d02e      	beq.n	8006abe <UART_SetConfig+0x8aa>
 8006a60:	e031      	b.n	8006ac6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a62:	f7fd fd2f 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8006a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a68:	e033      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6a:	f7fd fd41 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8006a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a70:	e02f      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe ff70 	bl	800595c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a80:	e027      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a82:	f107 0318 	add.w	r3, r7, #24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff f8bc 	bl	8005c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a90:	e01f      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a92:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <UART_SetConfig+0x934>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a9e:	4b2a      	ldr	r3, [pc, #168]	; (8006b48 <UART_SetConfig+0x934>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	08db      	lsrs	r3, r3, #3
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <UART_SetConfig+0x928>)
 8006aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ab0:	e00f      	b.n	8006ad2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006ab2:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <UART_SetConfig+0x928>)
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab6:	e00c      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ab8:	4b21      	ldr	r3, [pc, #132]	; (8006b40 <UART_SetConfig+0x92c>)
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006abc:	e009      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac4:	e005      	b.n	8006ad2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80e7 	beq.w	8006ca8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <UART_SetConfig+0x930>)
 8006ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aec:	005a      	lsls	r2, r3, #1
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	441a      	add	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d916      	bls.n	8006b34 <UART_SetConfig+0x920>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d212      	bcs.n	8006b34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f023 030f 	bic.w	r3, r3, #15
 8006b16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b26:	4313      	orrs	r3, r2
 8006b28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b30:	60da      	str	r2, [r3, #12]
 8006b32:	e0b9      	b.n	8006ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b3a:	e0b5      	b.n	8006ca8 <UART_SetConfig+0xa94>
 8006b3c:	03d09000 	.word	0x03d09000
 8006b40:	003d0900 	.word	0x003d0900
 8006b44:	0801607c 	.word	0x0801607c
 8006b48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	dc49      	bgt.n	8006be8 <UART_SetConfig+0x9d4>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db7c      	blt.n	8006c52 <UART_SetConfig+0xa3e>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d87a      	bhi.n	8006c52 <UART_SetConfig+0xa3e>
 8006b5c:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x950>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006bef 	.word	0x08006bef
 8006b68:	08006bf7 	.word	0x08006bf7
 8006b6c:	08006c53 	.word	0x08006c53
 8006b70:	08006c53 	.word	0x08006c53
 8006b74:	08006bff 	.word	0x08006bff
 8006b78:	08006c53 	.word	0x08006c53
 8006b7c:	08006c53 	.word	0x08006c53
 8006b80:	08006c53 	.word	0x08006c53
 8006b84:	08006c0f 	.word	0x08006c0f
 8006b88:	08006c53 	.word	0x08006c53
 8006b8c:	08006c53 	.word	0x08006c53
 8006b90:	08006c53 	.word	0x08006c53
 8006b94:	08006c53 	.word	0x08006c53
 8006b98:	08006c53 	.word	0x08006c53
 8006b9c:	08006c53 	.word	0x08006c53
 8006ba0:	08006c53 	.word	0x08006c53
 8006ba4:	08006c1f 	.word	0x08006c1f
 8006ba8:	08006c53 	.word	0x08006c53
 8006bac:	08006c53 	.word	0x08006c53
 8006bb0:	08006c53 	.word	0x08006c53
 8006bb4:	08006c53 	.word	0x08006c53
 8006bb8:	08006c53 	.word	0x08006c53
 8006bbc:	08006c53 	.word	0x08006c53
 8006bc0:	08006c53 	.word	0x08006c53
 8006bc4:	08006c53 	.word	0x08006c53
 8006bc8:	08006c53 	.word	0x08006c53
 8006bcc:	08006c53 	.word	0x08006c53
 8006bd0:	08006c53 	.word	0x08006c53
 8006bd4:	08006c53 	.word	0x08006c53
 8006bd8:	08006c53 	.word	0x08006c53
 8006bdc:	08006c53 	.word	0x08006c53
 8006be0:	08006c53 	.word	0x08006c53
 8006be4:	08006c45 	.word	0x08006c45
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d02e      	beq.n	8006c4a <UART_SetConfig+0xa36>
 8006bec:	e031      	b.n	8006c52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bee:	f7fd fc69 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8006bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bf4:	e033      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf6:	f7fd fc7b 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8006bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bfc:	e02f      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe feaa 	bl	800595c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0c:	e027      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c0e:	f107 0318 	add.w	r3, r7, #24
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fff6 	bl	8005c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1c:	e01f      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <UART_SetConfig+0xac0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c2a:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <UART_SetConfig+0xac0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	08db      	lsrs	r3, r3, #3
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <UART_SetConfig+0xac4>)
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c3c:	e00f      	b.n	8006c5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <UART_SetConfig+0xac4>)
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c42:	e00c      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <UART_SetConfig+0xac8>)
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c48:	e009      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c50:	e005      	b.n	8006c5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d021      	beq.n	8006ca8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	4a1d      	ldr	r2, [pc, #116]	; (8006ce0 <UART_SetConfig+0xacc>)
 8006c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	441a      	add	r2, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d909      	bls.n	8006ca2 <UART_SetConfig+0xa8e>
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d205      	bcs.n	8006ca2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	e002      	b.n	8006ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006cc4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3748      	adds	r7, #72	; 0x48
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	03d09000 	.word	0x03d09000
 8006cdc:	003d0900 	.word	0x003d0900
 8006ce0:	0801607c 	.word	0x0801607c

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b098      	sub	sp, #96	; 0x60
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e38:	f7fa fb06 	bl	8001448 <HAL_GetTick>
 8006e3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d12f      	bne.n	8006eac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f88e 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d022      	beq.n	8006eac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e84:	647b      	str	r3, [r7, #68]	; 0x44
 8006e86:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e6      	bne.n	8006e66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e063      	b.n	8006f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d149      	bne.n	8006f4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f857 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03c      	beq.n	8006f4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f26:	61fa      	str	r2, [r7, #28]
 8006f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	69b9      	ldr	r1, [r7, #24]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	617b      	str	r3, [r7, #20]
   return(result);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e012      	b.n	8006f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3758      	adds	r7, #88	; 0x58
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	e049      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d045      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f96:	f7fa fa57 	bl	8001448 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e048      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d031      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d110      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f839 	bl	800704c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e029      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffc:	d111      	bne.n	8007022 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f81f 	bl	800704c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e00f      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	429a      	cmp	r2, r3
 800703e:	d0a6      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b095      	sub	sp, #84	; 0x54
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
 8007074:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e6      	bne.n	8007054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	61fb      	str	r3, [r7, #28]
   return(result);
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <UART_EndRxTransfer+0xc8>)
 800709a:	4013      	ands	r3, r2
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3308      	adds	r3, #8
 80070a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d118      	bne.n	80070f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	613b      	str	r3, [r7, #16]
   return(result);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007108:	bf00      	nop
 800710a:	3754      	adds	r7, #84	; 0x54
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	effffffe 	.word	0xeffffffe

08007118 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_UARTEx_DisableFifoMode+0x16>
 800712a:	2302      	movs	r3, #2
 800712c:	e027      	b.n	800717e <HAL_UARTEx_DisableFifoMode+0x66>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	; 0x24
 800713a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800715c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800719e:	2302      	movs	r3, #2
 80071a0:	e02d      	b.n	80071fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2224      	movs	r2, #36	; 0x24
 80071ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f850 	bl	8007284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800721a:	2302      	movs	r3, #2
 800721c:	e02d      	b.n	800727a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2224      	movs	r2, #36	; 0x24
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f812 	bl	8007284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007290:	2b00      	cmp	r3, #0
 8007292:	d108      	bne.n	80072a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072a4:	e031      	b.n	800730a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072a6:	2310      	movs	r3, #16
 80072a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072aa:	2310      	movs	r3, #16
 80072ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	0e5b      	lsrs	r3, r3, #25
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	0f5b      	lsrs	r3, r3, #29
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	7b3a      	ldrb	r2, [r7, #12]
 80072d2:	4911      	ldr	r1, [pc, #68]	; (8007318 <UARTEx_SetNbDataToProcess+0x94>)
 80072d4:	5c8a      	ldrb	r2, [r1, r2]
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072da:	7b3a      	ldrb	r2, [r7, #12]
 80072dc:	490f      	ldr	r1, [pc, #60]	; (800731c <UARTEx_SetNbDataToProcess+0x98>)
 80072de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	7b7a      	ldrb	r2, [r7, #13]
 80072f0:	4909      	ldr	r1, [pc, #36]	; (8007318 <UARTEx_SetNbDataToProcess+0x94>)
 80072f2:	5c8a      	ldrb	r2, [r1, r2]
 80072f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072f8:	7b7a      	ldrb	r2, [r7, #13]
 80072fa:	4908      	ldr	r1, [pc, #32]	; (800731c <UARTEx_SetNbDataToProcess+0x98>)
 80072fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	08016094 	.word	0x08016094
 800731c:	0801609c 	.word	0x0801609c

08007320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007320:	b084      	sub	sp, #16
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	f107 001c 	add.w	r0, r7, #28
 800732e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	2b01      	cmp	r3, #1
 8007336:	d120      	bne.n	800737a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	4b2a      	ldr	r3, [pc, #168]	; (80073f4 <USB_CoreInit+0xd4>)
 800734a:	4013      	ands	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800735c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 faac 	bl	80078cc <USB_CoreReset>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
 8007378:	e01a      	b.n	80073b0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 faa0 	bl	80078cc <USB_CoreReset>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38
 80073a2:	e005      	b.n	80073b0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d116      	bne.n	80073e4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <USB_CoreInit+0xd8>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f043 0206 	orr.w	r2, r3, #6
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f043 0220 	orr.w	r2, r3, #32
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073f0:	b004      	add	sp, #16
 80073f2:	4770      	bx	lr
 80073f4:	ffbdffbf 	.word	0xffbdffbf
 80073f8:	03ee0000 	.word	0x03ee0000

080073fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f023 0201 	bic.w	r2, r3, #1
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d115      	bne.n	800746c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800744c:	2001      	movs	r0, #1
 800744e:	f7fa f807 	bl	8001460 <HAL_Delay>
      ms++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa29 	bl	80078b0 <USB_GetMode>
 800745e:	4603      	mov	r3, r0
 8007460:	2b01      	cmp	r3, #1
 8007462:	d01e      	beq.n	80074a2 <USB_SetCurrentMode+0x84>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b31      	cmp	r3, #49	; 0x31
 8007468:	d9f0      	bls.n	800744c <USB_SetCurrentMode+0x2e>
 800746a:	e01a      	b.n	80074a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d115      	bne.n	800749e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800747e:	2001      	movs	r0, #1
 8007480:	f7f9 ffee 	bl	8001460 <HAL_Delay>
      ms++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa10 	bl	80078b0 <USB_GetMode>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <USB_SetCurrentMode+0x84>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b31      	cmp	r3, #49	; 0x31
 800749a:	d9f0      	bls.n	800747e <USB_SetCurrentMode+0x60>
 800749c:	e001      	b.n	80074a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e005      	b.n	80074ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b32      	cmp	r3, #50	; 0x32
 80074a6:	d101      	bne.n	80074ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074b8:	b084      	sub	sp, #16
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b086      	sub	sp, #24
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	e009      	b.n	80074ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	3340      	adds	r3, #64	; 0x40
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	2200      	movs	r2, #0
 80074e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b0e      	cmp	r3, #14
 80074f0:	d9f2      	bls.n	80074d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11c      	bne.n	8007532 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007506:	f043 0302 	orr.w	r3, r3, #2
 800750a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	e005      	b.n	800753e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007544:	461a      	mov	r2, r3
 8007546:	2300      	movs	r3, #0
 8007548:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007550:	4619      	mov	r1, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	461a      	mov	r2, r3
 800755a:	680b      	ldr	r3, [r1, #0]
 800755c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	2b01      	cmp	r3, #1
 8007562:	d10c      	bne.n	800757e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800756a:	2100      	movs	r1, #0
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f965 	bl	800783c <USB_SetDevSpeed>
 8007572:	e008      	b.n	8007586 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007574:	2101      	movs	r1, #1
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f960 	bl	800783c <USB_SetDevSpeed>
 800757c:	e003      	b.n	8007586 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800757e:	2103      	movs	r1, #3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f95b 	bl	800783c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007586:	2110      	movs	r1, #16
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8f3 	bl	8007774 <USB_FlushTxFifo>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f91f 	bl	80077dc <USB_FlushRxFifo>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	461a      	mov	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ba:	461a      	mov	r2, r3
 80075bc:	2300      	movs	r3, #0
 80075be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c6:	461a      	mov	r2, r3
 80075c8:	2300      	movs	r3, #0
 80075ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	e043      	b.n	800765a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e8:	d118      	bne.n	800761c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	461a      	mov	r2, r3
 80075fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e013      	b.n	800762e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007612:	461a      	mov	r2, r3
 8007614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e008      	b.n	800762e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007628:	461a      	mov	r2, r3
 800762a:	2300      	movs	r3, #0
 800762c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763a:	461a      	mov	r2, r3
 800763c:	2300      	movs	r3, #0
 800763e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	461a      	mov	r2, r3
 800764e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3301      	adds	r3, #1
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	429a      	cmp	r2, r3
 8007660:	d3b7      	bcc.n	80075d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007662:	2300      	movs	r3, #0
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	e043      	b.n	80076f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800767a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800767e:	d118      	bne.n	80076b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007692:	461a      	mov	r2, r3
 8007694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	e013      	b.n	80076c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	461a      	mov	r2, r3
 80076aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	e008      	b.n	80076c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	461a      	mov	r2, r3
 80076c0:	2300      	movs	r3, #0
 80076c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d0:	461a      	mov	r2, r3
 80076d2:	2300      	movs	r3, #0
 80076d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	461a      	mov	r2, r3
 80076e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	3301      	adds	r3, #1
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3b7      	bcc.n	8007668 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800770a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007718:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f043 0210 	orr.w	r2, r3, #16
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	4b0e      	ldr	r3, [pc, #56]	; (800776c <USB_DevInit+0x2b4>)
 8007732:	4313      	orrs	r3, r2
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f043 0208 	orr.w	r2, r3, #8
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800774a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d105      	bne.n	800775c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <USB_DevInit+0x2b8>)
 8007756:	4313      	orrs	r3, r2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007768:	b004      	add	sp, #16
 800776a:	4770      	bx	lr
 800776c:	803c3800 	.word	0x803c3800
 8007770:	40000004 	.word	0x40000004

08007774 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <USB_FlushTxFifo+0x64>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d901      	bls.n	8007794 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e01b      	b.n	80077cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	daf2      	bge.n	8007782 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	019b      	lsls	r3, r3, #6
 80077a4:	f043 0220 	orr.w	r2, r3, #32
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <USB_FlushTxFifo+0x64>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e006      	b.n	80077cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d0f0      	beq.n	80077ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	00030d40 	.word	0x00030d40

080077dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a11      	ldr	r2, [pc, #68]	; (8007838 <USB_FlushRxFifo+0x5c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d901      	bls.n	80077fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e018      	b.n	800782c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	daf2      	bge.n	80077e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2210      	movs	r2, #16
 800780a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4a08      	ldr	r2, [pc, #32]	; (8007838 <USB_FlushRxFifo+0x5c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d901      	bls.n	800781e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e006      	b.n	800782c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0310 	and.w	r3, r3, #16
 8007826:	2b10      	cmp	r3, #16
 8007828:	d0f0      	beq.n	800780c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	00030d40 	.word	0x00030d40

0800783c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	68f9      	ldr	r1, [r7, #12]
 8007858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800785c:	4313      	orrs	r3, r2
 800785e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0301 	and.w	r3, r3, #1
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3301      	adds	r3, #1
 80078dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4a13      	ldr	r2, [pc, #76]	; (8007930 <USB_CoreReset+0x64>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e01b      	b.n	8007922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	daf2      	bge.n	80078d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f043 0201 	orr.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a09      	ldr	r2, [pc, #36]	; (8007930 <USB_CoreReset+0x64>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d901      	bls.n	8007914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b01      	cmp	r3, #1
 800791e:	d0f0      	beq.n	8007902 <USB_CoreReset+0x36>

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	00030d40 	.word	0x00030d40

08007934 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800793a:	4b8d      	ldr	r3, [pc, #564]	; (8007b70 <MX_LWIP_Init+0x23c>)
 800793c:	22c0      	movs	r2, #192	; 0xc0
 800793e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007940:	4b8b      	ldr	r3, [pc, #556]	; (8007b70 <MX_LWIP_Init+0x23c>)
 8007942:	22a8      	movs	r2, #168	; 0xa8
 8007944:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8007946:	4b8a      	ldr	r3, [pc, #552]	; (8007b70 <MX_LWIP_Init+0x23c>)
 8007948:	2264      	movs	r2, #100	; 0x64
 800794a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 800794c:	4b88      	ldr	r3, [pc, #544]	; (8007b70 <MX_LWIP_Init+0x23c>)
 800794e:	22c9      	movs	r2, #201	; 0xc9
 8007950:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007952:	4b88      	ldr	r3, [pc, #544]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007954:	22ff      	movs	r2, #255	; 0xff
 8007956:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007958:	4b86      	ldr	r3, [pc, #536]	; (8007b74 <MX_LWIP_Init+0x240>)
 800795a:	22ff      	movs	r2, #255	; 0xff
 800795c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800795e:	4b85      	ldr	r3, [pc, #532]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007960:	22ff      	movs	r2, #255	; 0xff
 8007962:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007964:	4b83      	ldr	r3, [pc, #524]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007966:	2200      	movs	r2, #0
 8007968:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800796a:	4b83      	ldr	r3, [pc, #524]	; (8007b78 <MX_LWIP_Init+0x244>)
 800796c:	22c0      	movs	r2, #192	; 0xc0
 800796e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007970:	4b81      	ldr	r3, [pc, #516]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007972:	22a8      	movs	r2, #168	; 0xa8
 8007974:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8007976:	4b80      	ldr	r3, [pc, #512]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007978:	2264      	movs	r2, #100	; 0x64
 800797a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800797c:	4b7e      	ldr	r3, [pc, #504]	; (8007b78 <MX_LWIP_Init+0x244>)
 800797e:	2201      	movs	r2, #1
 8007980:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007982:	f001 fffd 	bl	8009980 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007986:	4b7a      	ldr	r3, [pc, #488]	; (8007b70 <MX_LWIP_Init+0x23c>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	061a      	lsls	r2, r3, #24
 800798c:	4b78      	ldr	r3, [pc, #480]	; (8007b70 <MX_LWIP_Init+0x23c>)
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	431a      	orrs	r2, r3
 8007994:	4b76      	ldr	r3, [pc, #472]	; (8007b70 <MX_LWIP_Init+0x23c>)
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	4313      	orrs	r3, r2
 800799c:	4a74      	ldr	r2, [pc, #464]	; (8007b70 <MX_LWIP_Init+0x23c>)
 800799e:	78d2      	ldrb	r2, [r2, #3]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	061a      	lsls	r2, r3, #24
 80079a4:	4b72      	ldr	r3, [pc, #456]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	0619      	lsls	r1, r3, #24
 80079aa:	4b71      	ldr	r3, [pc, #452]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	4319      	orrs	r1, r3
 80079b2:	4b6f      	ldr	r3, [pc, #444]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079b4:	789b      	ldrb	r3, [r3, #2]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	430b      	orrs	r3, r1
 80079ba:	496d      	ldr	r1, [pc, #436]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079bc:	78c9      	ldrb	r1, [r1, #3]
 80079be:	430b      	orrs	r3, r1
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079c6:	431a      	orrs	r2, r3
 80079c8:	4b69      	ldr	r3, [pc, #420]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	0619      	lsls	r1, r3, #24
 80079ce:	4b68      	ldr	r3, [pc, #416]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	4319      	orrs	r1, r3
 80079d6:	4b66      	ldr	r3, [pc, #408]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079d8:	789b      	ldrb	r3, [r3, #2]
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	430b      	orrs	r3, r1
 80079de:	4964      	ldr	r1, [pc, #400]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079e0:	78c9      	ldrb	r1, [r1, #3]
 80079e2:	430b      	orrs	r3, r1
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079ea:	431a      	orrs	r2, r3
 80079ec:	4b60      	ldr	r3, [pc, #384]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	0619      	lsls	r1, r3, #24
 80079f2:	4b5f      	ldr	r3, [pc, #380]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	4319      	orrs	r1, r3
 80079fa:	4b5d      	ldr	r3, [pc, #372]	; (8007b70 <MX_LWIP_Init+0x23c>)
 80079fc:	789b      	ldrb	r3, [r3, #2]
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	430b      	orrs	r3, r1
 8007a02:	495b      	ldr	r1, [pc, #364]	; (8007b70 <MX_LWIP_Init+0x23c>)
 8007a04:	78c9      	ldrb	r1, [r1, #3]
 8007a06:	430b      	orrs	r3, r1
 8007a08:	0e1b      	lsrs	r3, r3, #24
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	4a5b      	ldr	r2, [pc, #364]	; (8007b7c <MX_LWIP_Init+0x248>)
 8007a0e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007a10:	4b58      	ldr	r3, [pc, #352]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	061a      	lsls	r2, r3, #24
 8007a16:	4b57      	ldr	r3, [pc, #348]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	041b      	lsls	r3, r3, #16
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	4b55      	ldr	r3, [pc, #340]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a20:	789b      	ldrb	r3, [r3, #2]
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	4313      	orrs	r3, r2
 8007a26:	4a53      	ldr	r2, [pc, #332]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a28:	78d2      	ldrb	r2, [r2, #3]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	061a      	lsls	r2, r3, #24
 8007a2e:	4b51      	ldr	r3, [pc, #324]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	0619      	lsls	r1, r3, #24
 8007a34:	4b4f      	ldr	r3, [pc, #316]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	041b      	lsls	r3, r3, #16
 8007a3a:	4319      	orrs	r1, r3
 8007a3c:	4b4d      	ldr	r3, [pc, #308]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a3e:	789b      	ldrb	r3, [r3, #2]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	430b      	orrs	r3, r1
 8007a44:	494b      	ldr	r1, [pc, #300]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a46:	78c9      	ldrb	r1, [r1, #3]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a50:	431a      	orrs	r2, r3
 8007a52:	4b48      	ldr	r3, [pc, #288]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	0619      	lsls	r1, r3, #24
 8007a58:	4b46      	ldr	r3, [pc, #280]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	4319      	orrs	r1, r3
 8007a60:	4b44      	ldr	r3, [pc, #272]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a62:	789b      	ldrb	r3, [r3, #2]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	430b      	orrs	r3, r1
 8007a68:	4942      	ldr	r1, [pc, #264]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a6a:	78c9      	ldrb	r1, [r1, #3]
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a74:	431a      	orrs	r2, r3
 8007a76:	4b3f      	ldr	r3, [pc, #252]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	0619      	lsls	r1, r3, #24
 8007a7c:	4b3d      	ldr	r3, [pc, #244]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	041b      	lsls	r3, r3, #16
 8007a82:	4319      	orrs	r1, r3
 8007a84:	4b3b      	ldr	r3, [pc, #236]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a86:	789b      	ldrb	r3, [r3, #2]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	4939      	ldr	r1, [pc, #228]	; (8007b74 <MX_LWIP_Init+0x240>)
 8007a8e:	78c9      	ldrb	r1, [r1, #3]
 8007a90:	430b      	orrs	r3, r1
 8007a92:	0e1b      	lsrs	r3, r3, #24
 8007a94:	4313      	orrs	r3, r2
 8007a96:	4a3a      	ldr	r2, [pc, #232]	; (8007b80 <MX_LWIP_Init+0x24c>)
 8007a98:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007a9a:	4b37      	ldr	r3, [pc, #220]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	061a      	lsls	r2, r3, #24
 8007aa0:	4b35      	ldr	r3, [pc, #212]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	041b      	lsls	r3, r3, #16
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	4b33      	ldr	r3, [pc, #204]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007aaa:	789b      	ldrb	r3, [r3, #2]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	4a31      	ldr	r2, [pc, #196]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007ab2:	78d2      	ldrb	r2, [r2, #3]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	061a      	lsls	r2, r3, #24
 8007ab8:	4b2f      	ldr	r3, [pc, #188]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	0619      	lsls	r1, r3, #24
 8007abe:	4b2e      	ldr	r3, [pc, #184]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	4319      	orrs	r1, r3
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007ac8:	789b      	ldrb	r3, [r3, #2]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	430b      	orrs	r3, r1
 8007ace:	492a      	ldr	r1, [pc, #168]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007ad0:	78c9      	ldrb	r1, [r1, #3]
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	021b      	lsls	r3, r3, #8
 8007ad6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ada:	431a      	orrs	r2, r3
 8007adc:	4b26      	ldr	r3, [pc, #152]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	0619      	lsls	r1, r3, #24
 8007ae2:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	041b      	lsls	r3, r3, #16
 8007ae8:	4319      	orrs	r1, r3
 8007aea:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007aec:	789b      	ldrb	r3, [r3, #2]
 8007aee:	021b      	lsls	r3, r3, #8
 8007af0:	430b      	orrs	r3, r1
 8007af2:	4921      	ldr	r1, [pc, #132]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007af4:	78c9      	ldrb	r1, [r1, #3]
 8007af6:	430b      	orrs	r3, r1
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007afe:	431a      	orrs	r2, r3
 8007b00:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	0619      	lsls	r1, r3, #24
 8007b06:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	041b      	lsls	r3, r3, #16
 8007b0c:	4319      	orrs	r1, r3
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007b10:	789b      	ldrb	r3, [r3, #2]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	430b      	orrs	r3, r1
 8007b16:	4918      	ldr	r1, [pc, #96]	; (8007b78 <MX_LWIP_Init+0x244>)
 8007b18:	78c9      	ldrb	r1, [r1, #3]
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	0e1b      	lsrs	r3, r3, #24
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <MX_LWIP_Init+0x250>)
 8007b22:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007b24:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <MX_LWIP_Init+0x254>)
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	4b18      	ldr	r3, [pc, #96]	; (8007b8c <MX_LWIP_Init+0x258>)
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <MX_LWIP_Init+0x250>)
 8007b32:	4a13      	ldr	r2, [pc, #76]	; (8007b80 <MX_LWIP_Init+0x24c>)
 8007b34:	4911      	ldr	r1, [pc, #68]	; (8007b7c <MX_LWIP_Init+0x248>)
 8007b36:	4816      	ldr	r0, [pc, #88]	; (8007b90 <MX_LWIP_Init+0x25c>)
 8007b38:	f003 fd20 	bl	800b57c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007b3c:	4814      	ldr	r0, [pc, #80]	; (8007b90 <MX_LWIP_Init+0x25c>)
 8007b3e:	f003 ff3d 	bl	800b9bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007b42:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <MX_LWIP_Init+0x25c>)
 8007b44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b48:	089b      	lsrs	r3, r3, #2
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007b54:	480e      	ldr	r0, [pc, #56]	; (8007b90 <MX_LWIP_Init+0x25c>)
 8007b56:	f003 ff41 	bl	800b9dc <netif_set_up>
 8007b5a:	e002      	b.n	8007b62 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007b5c:	480c      	ldr	r0, [pc, #48]	; (8007b90 <MX_LWIP_Init+0x25c>)
 8007b5e:	f003 ffbb 	bl	800bad8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007b62:	490c      	ldr	r1, [pc, #48]	; (8007b94 <MX_LWIP_Init+0x260>)
 8007b64:	480a      	ldr	r0, [pc, #40]	; (8007b90 <MX_LWIP_Init+0x25c>)
 8007b66:	f004 f873 	bl	800bc50 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007b6a:	bf00      	nop
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	24000768 	.word	0x24000768
 8007b74:	2400076c 	.word	0x2400076c
 8007b78:	24000770 	.word	0x24000770
 8007b7c:	2400075c 	.word	0x2400075c
 8007b80:	24000760 	.word	0x24000760
 8007b84:	24000764 	.word	0x24000764
 8007b88:	080092f5 	.word	0x080092f5
 8007b8c:	08007ea1 	.word	0x08007ea1
 8007b90:	24000724 	.word	0x24000724
 8007b94:	08007be9 	.word	0x08007be9

08007b98 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007ba0:	f7f9 fc52 	bl	8001448 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <Ethernet_Link_Periodic_Handle+0x30>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b63      	cmp	r3, #99	; 0x63
 8007bae:	d907      	bls.n	8007bc0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007bb0:	f7f9 fc4a 	bl	8001448 <HAL_GetTick>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	4a04      	ldr	r2, [pc, #16]	; (8007bc8 <Ethernet_Link_Periodic_Handle+0x30>)
 8007bb8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fafc 	bl	80081b8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	24000720 	.word	0x24000720

08007bcc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007bd0:	4804      	ldr	r0, [pc, #16]	; (8007be4 <MX_LWIP_Process+0x18>)
 8007bd2:	f000 f945 	bl	8007e60 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007bd6:	f00a f8db 	bl	8011d90 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007bda:	4802      	ldr	r0, [pc, #8]	; (8007be4 <MX_LWIP_Process+0x18>)
 8007bdc:	f7ff ffdc 	bl	8007b98 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007be0:	bf00      	nop
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	24000724 	.word	0x24000724

08007be8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007c08:	4b3f      	ldr	r3, [pc, #252]	; (8007d08 <low_level_init+0x10c>)
 8007c0a:	4a40      	ldr	r2, [pc, #256]	; (8007d0c <low_level_init+0x110>)
 8007c0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007c12:	2380      	movs	r3, #128	; 0x80
 8007c14:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007c16:	23e1      	movs	r3, #225	; 0xe1
 8007c18:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007c22:	2300      	movs	r3, #0
 8007c24:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <low_level_init+0x10c>)
 8007c28:	f107 0308 	add.w	r3, r7, #8
 8007c2c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8007c2e:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <low_level_init+0x10c>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007c34:	4b34      	ldr	r3, [pc, #208]	; (8007d08 <low_level_init+0x10c>)
 8007c36:	4a36      	ldr	r2, [pc, #216]	; (8007d10 <low_level_init+0x114>)
 8007c38:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007c3a:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <low_level_init+0x10c>)
 8007c3c:	4a35      	ldr	r2, [pc, #212]	; (8007d14 <low_level_init+0x118>)
 8007c3e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007c40:	4b31      	ldr	r3, [pc, #196]	; (8007d08 <low_level_init+0x10c>)
 8007c42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007c46:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007c48:	482f      	ldr	r0, [pc, #188]	; (8007d08 <low_level_init+0x10c>)
 8007c4a:	f7f9 fd31 	bl	80016b0 <HAL_ETH_Init>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007c52:	2238      	movs	r2, #56	; 0x38
 8007c54:	2100      	movs	r1, #0
 8007c56:	4830      	ldr	r0, [pc, #192]	; (8007d18 <low_level_init+0x11c>)
 8007c58:	f00a fbfb 	bl	8012452 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007c5c:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <low_level_init+0x11c>)
 8007c5e:	2221      	movs	r2, #33	; 0x21
 8007c60:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007c62:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <low_level_init+0x11c>)
 8007c64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007c68:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007c6a:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <low_level_init+0x11c>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007c70:	482a      	ldr	r0, [pc, #168]	; (8007d1c <low_level_init+0x120>)
 8007c72:	f003 fb4b 	bl	800b30c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2206      	movs	r2, #6
 8007c7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007c7e:	4b22      	ldr	r3, [pc, #136]	; (8007d08 <low_level_init+0x10c>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007c8a:	4b1f      	ldr	r3, [pc, #124]	; (8007d08 <low_level_init+0x10c>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	785a      	ldrb	r2, [r3, #1]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007c96:	4b1c      	ldr	r3, [pc, #112]	; (8007d08 <low_level_init+0x10c>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	789a      	ldrb	r2, [r3, #2]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007ca2:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <low_level_init+0x10c>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	78da      	ldrb	r2, [r3, #3]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <low_level_init+0x10c>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	791a      	ldrb	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <low_level_init+0x10c>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	795a      	ldrb	r2, [r3, #5]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007ccc:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cd4:	f043 030a 	orr.w	r3, r3, #10
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007ce0:	490f      	ldr	r1, [pc, #60]	; (8007d20 <low_level_init+0x124>)
 8007ce2:	4810      	ldr	r0, [pc, #64]	; (8007d24 <low_level_init+0x128>)
 8007ce4:	f7f9 f9c9 	bl	800107a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007ce8:	480e      	ldr	r0, [pc, #56]	; (8007d24 <low_level_init+0x128>)
 8007cea:	f7f9 f9f8 	bl	80010de <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa5f 	bl	80081b8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007cfa:	e001      	b.n	8007d00 <low_level_init+0x104>
    Error_Handler();
 8007cfc:	f7f8 ff0c 	bl	8000b18 <Error_Handler>
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	24005100 	.word	0x24005100
 8007d0c:	40028000 	.word	0x40028000
 8007d10:	240000ec 	.word	0x240000ec
 8007d14:	2400008c 	.word	0x2400008c
 8007d18:	240051b0 	.word	0x240051b0
 8007d1c:	080160a4 	.word	0x080160a4
 8007d20:	24000010 	.word	0x24000010
 8007d24:	240051e8 	.word	0x240051e8

08007d28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b092      	sub	sp, #72	; 0x48
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007d40:	f107 030c 	add.w	r3, r7, #12
 8007d44:	2230      	movs	r2, #48	; 0x30
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f00a fb82 	bl	8012452 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007d4e:	f107 030c 	add.w	r3, r7, #12
 8007d52:	2230      	movs	r2, #48	; 0x30
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f00a fb7b 	bl	8012452 <memset>

  for(q = p; q != NULL; q = q->next)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d60:	e045      	b.n	8007dee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d902      	bls.n	8007d6e <low_level_output+0x46>
      return ERR_IF;
 8007d68:	f06f 030b 	mvn.w	r3, #11
 8007d6c:	e055      	b.n	8007e1a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	6859      	ldr	r1, [r3, #4]
 8007d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d74:	4613      	mov	r3, r2
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	4413      	add	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	3348      	adds	r3, #72	; 0x48
 8007d7e:	443b      	add	r3, r7
 8007d80:	3b3c      	subs	r3, #60	; 0x3c
 8007d82:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d86:	895b      	ldrh	r3, [r3, #10]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	3348      	adds	r3, #72	; 0x48
 8007d96:	443b      	add	r3, r7
 8007d98:	3b38      	subs	r3, #56	; 0x38
 8007d9a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da4:	1e5a      	subs	r2, r3, #1
 8007da6:	f107 000c 	add.w	r0, r7, #12
 8007daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dac:	460b      	mov	r3, r1
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	440b      	add	r3, r1
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	18c1      	adds	r1, r0, r3
 8007db6:	4613      	mov	r3, r2
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	3348      	adds	r3, #72	; 0x48
 8007dc0:	443b      	add	r3, r7
 8007dc2:	3b34      	subs	r3, #52	; 0x34
 8007dc4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	3348      	adds	r3, #72	; 0x48
 8007dda:	443b      	add	r3, r7
 8007ddc:	3b34      	subs	r3, #52	; 0x34
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de4:	3301      	adds	r3, #1
 8007de6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	643b      	str	r3, [r7, #64]	; 0x40
 8007dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1b6      	bne.n	8007d62 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	891b      	ldrh	r3, [r3, #8]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <low_level_output+0xfc>)
 8007dfc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <low_level_output+0xfc>)
 8007e00:	f107 030c 	add.w	r3, r7, #12
 8007e04:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <low_level_output+0xfc>)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007e0c:	2214      	movs	r2, #20
 8007e0e:	4905      	ldr	r1, [pc, #20]	; (8007e24 <low_level_output+0xfc>)
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <low_level_output+0x100>)
 8007e12:	f7f9 fde5 	bl	80019e0 <HAL_ETH_Transmit>

  return errval;
 8007e16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3748      	adds	r7, #72	; 0x48
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	240051b0 	.word	0x240051b0
 8007e28:	24005100 	.word	0x24005100

08007e2c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <low_level_input+0x2c>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007e40:	f107 030c 	add.w	r3, r7, #12
 8007e44:	4619      	mov	r1, r3
 8007e46:	4805      	ldr	r0, [pc, #20]	; (8007e5c <low_level_input+0x30>)
 8007e48:	f7f9 fe61 	bl	8001b0e <HAL_ETH_ReadData>
  }

  return p;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	240050fc 	.word	0x240050fc
 8007e5c:	24005100 	.word	0x24005100

08007e60 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff ffdd 	bl	8007e2c <low_level_input>
 8007e72:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f004 fa8e 	bl	800c3ac <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1ea      	bne.n	8007e6c <ethernetif_input+0xc>
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <ethernetif_init+0x1c>
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <ethernetif_init+0x48>)
 8007eb0:	f240 127b 	movw	r2, #379	; 0x17b
 8007eb4:	490d      	ldr	r1, [pc, #52]	; (8007eec <ethernetif_init+0x4c>)
 8007eb6:	480e      	ldr	r0, [pc, #56]	; (8007ef0 <ethernetif_init+0x50>)
 8007eb8:	f00a fa66 	bl	8012388 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2273      	movs	r2, #115	; 0x73
 8007ec0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2274      	movs	r2, #116	; 0x74
 8007ec8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <ethernetif_init+0x54>)
 8007ed0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <ethernetif_init+0x58>)
 8007ed6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fe8f 	bl	8007bfc <low_level_init>

  return ERR_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	080131c4 	.word	0x080131c4
 8007eec:	080131e0 	.word	0x080131e0
 8007ef0:	080131f0 	.word	0x080131f0
 8007ef4:	08008cf5 	.word	0x08008cf5
 8007ef8:	08007d29 	.word	0x08007d29

08007efc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	4807      	ldr	r0, [pc, #28]	; (8007f28 <pbuf_free_custom+0x2c>)
 8007f0c:	f003 fae0 	bl	800b4d0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <pbuf_free_custom+0x30>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d102      	bne.n	8007f1e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <pbuf_free_custom+0x30>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	080160a4 	.word	0x080160a4
 8007f2c:	240050fc 	.word	0x240050fc

08007f30 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f34:	f7f9 fa88 	bl	8001448 <HAL_GetTick>
 8007f38:	4603      	mov	r3, r0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b090      	sub	sp, #64	; 0x40
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	605a      	str	r2, [r3, #4]
 8007f52:	609a      	str	r2, [r3, #8]
 8007f54:	60da      	str	r2, [r3, #12]
 8007f56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a68      	ldr	r2, [pc, #416]	; (8008100 <HAL_ETH_MspInit+0x1c0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	f040 80ca 	bne.w	80080f8 <HAL_ETH_MspInit+0x1b8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007f64:	4b67      	ldr	r3, [pc, #412]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f6a:	4a66      	ldr	r2, [pc, #408]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007f74:	4b63      	ldr	r3, [pc, #396]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007f82:	4b60      	ldr	r3, [pc, #384]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f88:	4a5e      	ldr	r2, [pc, #376]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007f92:	4b5c      	ldr	r3, [pc, #368]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007fa0:	4b58      	ldr	r3, [pc, #352]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fa6:	4a57      	ldr	r2, [pc, #348]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007fb0:	4b54      	ldr	r3, [pc, #336]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fba:	623b      	str	r3, [r7, #32]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007fbe:	4b51      	ldr	r3, [pc, #324]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fc4:	4a4f      	ldr	r2, [pc, #316]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fc6:	f043 0310 	orr.w	r3, r3, #16
 8007fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fce:	4b4d      	ldr	r3, [pc, #308]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fdc:	4b49      	ldr	r3, [pc, #292]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007fe2:	4a48      	ldr	r2, [pc, #288]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fe4:	f043 0304 	orr.w	r3, r3, #4
 8007fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007fec:	4b45      	ldr	r3, [pc, #276]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ffa:	4b42      	ldr	r3, [pc, #264]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8007ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008000:	4a40      	ldr	r2, [pc, #256]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8008002:	f043 0301 	orr.w	r3, r3, #1
 8008006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800800a:	4b3e      	ldr	r3, [pc, #248]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 800800c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008018:	4b3a      	ldr	r3, [pc, #232]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 800801a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800801e:	4a39      	ldr	r2, [pc, #228]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8008020:	f043 0302 	orr.w	r3, r3, #2
 8008024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008028:	4b36      	ldr	r3, [pc, #216]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 800802a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008036:	4b33      	ldr	r3, [pc, #204]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8008038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800803c:	4a31      	ldr	r2, [pc, #196]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 800803e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008046:	4b2f      	ldr	r3, [pc, #188]	; (8008104 <HAL_ETH_MspInit+0x1c4>)
 8008048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> ETH_RXD3
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008054:	2304      	movs	r3, #4
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008058:	2302      	movs	r3, #2
 800805a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805c:	2300      	movs	r3, #0
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008060:	2300      	movs	r3, #0
 8008062:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008064:	230b      	movs	r3, #11
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800806c:	4619      	mov	r1, r3
 800806e:	4826      	ldr	r0, [pc, #152]	; (8008108 <HAL_ETH_MspInit+0x1c8>)
 8008070:	f7fa fede 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8008074:	233e      	movs	r3, #62	; 0x3e
 8008076:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008078:	2302      	movs	r3, #2
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807c:	2300      	movs	r3, #0
 800807e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008080:	2300      	movs	r3, #0
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008084:	230b      	movs	r3, #11
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800808c:	4619      	mov	r1, r3
 800808e:	481f      	ldr	r0, [pc, #124]	; (800810c <HAL_ETH_MspInit+0x1cc>)
 8008090:	f7fa fece 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8008094:	238f      	movs	r3, #143	; 0x8f
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008098:	2302      	movs	r3, #2
 800809a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809c:	2300      	movs	r3, #0
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080a4:	230b      	movs	r3, #11
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080ac:	4619      	mov	r1, r3
 80080ae:	4818      	ldr	r0, [pc, #96]	; (8008110 <HAL_ETH_MspInit+0x1d0>)
 80080b0:	f7fa febe 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80080b4:	f242 0303 	movw	r3, #8195	; 0x2003
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ba:	2302      	movs	r3, #2
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080c6:	230b      	movs	r3, #11
 80080c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080ce:	4619      	mov	r1, r3
 80080d0:	4810      	ldr	r0, [pc, #64]	; (8008114 <HAL_ETH_MspInit+0x1d4>)
 80080d2:	f7fa fead 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80080d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2302      	movs	r3, #2
 80080de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e4:	2300      	movs	r3, #0
 80080e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080e8:	230b      	movs	r3, #11
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80080ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080f0:	4619      	mov	r1, r3
 80080f2:	4809      	ldr	r0, [pc, #36]	; (8008118 <HAL_ETH_MspInit+0x1d8>)
 80080f4:	f7fa fe9c 	bl	8002e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80080f8:	bf00      	nop
 80080fa:	3740      	adds	r7, #64	; 0x40
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40028000 	.word	0x40028000
 8008104:	58024400 	.word	0x58024400
 8008108:	58021000 	.word	0x58021000
 800810c:	58020800 	.word	0x58020800
 8008110:	58020000 	.word	0x58020000
 8008114:	58020400 	.word	0x58020400
 8008118:	58021800 	.word	0x58021800

0800811c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008120:	4802      	ldr	r0, [pc, #8]	; (800812c <ETH_PHY_IO_Init+0x10>)
 8008122:	f7fa f8b9 	bl	8002298 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	bd80      	pop	{r7, pc}
 800812c:	24005100 	.word	0x24005100

08008130 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  return 0;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	68f9      	ldr	r1, [r7, #12]
 8008152:	4807      	ldr	r0, [pc, #28]	; (8008170 <ETH_PHY_IO_ReadReg+0x30>)
 8008154:	f7f9 fe09 	bl	8001d6a <HAL_ETH_ReadPHYRegister>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800815e:	f04f 33ff 	mov.w	r3, #4294967295
 8008162:	e000      	b.n	8008166 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	24005100 	.word	0x24005100

08008174 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	68f9      	ldr	r1, [r7, #12]
 8008186:	4807      	ldr	r0, [pc, #28]	; (80081a4 <ETH_PHY_IO_WriteReg+0x30>)
 8008188:	f7f9 fe44 	bl	8001e14 <HAL_ETH_WritePHYRegister>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008192:	f04f 33ff 	mov.w	r3, #4294967295
 8008196:	e000      	b.n	800819a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	24005100 	.word	0x24005100

080081a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081ac:	f7f9 f94c 	bl	8001448 <HAL_GetTick>
 80081b0:	4603      	mov	r3, r0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b0a0      	sub	sp, #128	; 0x80
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	2264      	movs	r2, #100	; 0x64
 80081c6:	2100      	movs	r1, #0
 80081c8:	4618      	mov	r0, r3
 80081ca:	f00a f942 	bl	8012452 <memset>
  int32_t PHYLinkState = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081d6:	2300      	movs	r3, #0
 80081d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80081da:	2300      	movs	r3, #0
 80081dc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80081de:	483a      	ldr	r0, [pc, #232]	; (80082c8 <ethernet_link_check_state+0x110>)
 80081e0:	f7f9 f825 	bl	800122e <LAN8742_GetLinkState>
 80081e4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80081ec:	089b      	lsrs	r3, r3, #2
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00c      	beq.n	8008212 <ethernet_link_check_state+0x5a>
 80081f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	dc09      	bgt.n	8008212 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80081fe:	4833      	ldr	r0, [pc, #204]	; (80082cc <ethernet_link_check_state+0x114>)
 8008200:	f7f9 fb9e 	bl	8001940 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f003 fc67 	bl	800bad8 <netif_set_down>
    netif_set_link_down(netif);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f003 fce6 	bl	800bbdc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008210:	e055      	b.n	80082be <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d14e      	bne.n	80082be <ethernet_link_check_state+0x106>
 8008220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008222:	2b01      	cmp	r3, #1
 8008224:	dd4b      	ble.n	80082be <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008228:	3b02      	subs	r3, #2
 800822a:	2b03      	cmp	r3, #3
 800822c:	d82a      	bhi.n	8008284 <ethernet_link_check_state+0xcc>
 800822e:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <ethernet_link_check_state+0x7c>)
 8008230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008234:	08008245 	.word	0x08008245
 8008238:	08008257 	.word	0x08008257
 800823c:	08008267 	.word	0x08008267
 8008240:	08008277 	.word	0x08008277
      duplex = ETH_FULLDUPLEX_MODE;
 8008244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008248:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800824a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800824e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008250:	2301      	movs	r3, #1
 8008252:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008254:	e017      	b.n	8008286 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008256:	2300      	movs	r3, #0
 8008258:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800825a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800825e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008260:	2301      	movs	r3, #1
 8008262:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008264:	e00f      	b.n	8008286 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800826a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800826c:	2300      	movs	r3, #0
 800826e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008270:	2301      	movs	r3, #1
 8008272:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008274:	e007      	b.n	8008286 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008276:	2300      	movs	r3, #0
 8008278:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800827a:	2300      	movs	r3, #0
 800827c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008282:	e000      	b.n	8008286 <ethernet_link_check_state+0xce>
      break;
 8008284:	bf00      	nop
    if(linkchanged)
 8008286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d018      	beq.n	80082be <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4619      	mov	r1, r3
 8008292:	480e      	ldr	r0, [pc, #56]	; (80082cc <ethernet_link_check_state+0x114>)
 8008294:	f7f9 fe12 	bl	8001ebc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800829c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800829e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80082a0:	f107 030c 	add.w	r3, r7, #12
 80082a4:	4619      	mov	r1, r3
 80082a6:	4809      	ldr	r0, [pc, #36]	; (80082cc <ethernet_link_check_state+0x114>)
 80082a8:	f7f9 ffdc 	bl	8002264 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80082ac:	4807      	ldr	r0, [pc, #28]	; (80082cc <ethernet_link_check_state+0x114>)
 80082ae:	f7f9 fae5 	bl	800187c <HAL_ETH_Start>
      netif_set_up(netif);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f003 fb92 	bl	800b9dc <netif_set_up>
      netif_set_link_up(netif);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f003 fc51 	bl	800bb60 <netif_set_link_up>
}
 80082be:	bf00      	nop
 80082c0:	3780      	adds	r7, #128	; 0x80
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	240051e8 	.word	0x240051e8
 80082cc:	24005100 	.word	0x24005100

080082d0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80082d8:	4812      	ldr	r0, [pc, #72]	; (8008324 <HAL_ETH_RxAllocateCallback+0x54>)
 80082da:	f003 f88b 	bl	800b3f4 <memp_malloc_pool>
 80082de:	60f8      	str	r0, [r7, #12]
  if (p)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d014      	beq.n	8008310 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f103 0220 	add.w	r2, r3, #32
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a0d      	ldr	r2, [pc, #52]	; (8008328 <HAL_ETH_RxAllocateCallback+0x58>)
 80082f4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80082fe:	9201      	str	r2, [sp, #4]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2241      	movs	r2, #65	; 0x41
 8008306:	2100      	movs	r1, #0
 8008308:	2000      	movs	r0, #0
 800830a:	f003 fe95 	bl	800c038 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800830e:	e005      	b.n	800831c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008310:	4b06      	ldr	r3, [pc, #24]	; (800832c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	080160a4 	.word	0x080160a4
 8008328:	08007efd 	.word	0x08007efd
 800832c:	240050fc 	.word	0x240050fc

08008330 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008330:	b480      	push	{r7}
 8008332:	b08d      	sub	sp, #52	; 0x34
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3b20      	subs	r3, #32
 800834e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	2200      	movs	r2, #0
 800835a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	887a      	ldrh	r2, [r7, #2]
 8008360:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e003      	b.n	800837a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008378:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800837e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008386:	e009      	b.n	800839c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	891a      	ldrh	r2, [r3, #8]
 800838c:	887b      	ldrh	r3, [r7, #2]
 800838e:	4413      	add	r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f2      	bne.n	8008388 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80083a2:	887b      	ldrh	r3, [r7, #2]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	623a      	str	r2, [r7, #32]
 80083a8:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	dd1d      	ble.n	80083ec <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	f003 021f 	and.w	r2, r3, #31
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80083c0:	f3bf 8f4f 	dsb	sy
}
 80083c4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80083c6:	4a0d      	ldr	r2, [pc, #52]	; (80083fc <HAL_ETH_RxLinkCallback+0xcc>)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	3320      	adds	r3, #32
 80083d2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	3b20      	subs	r3, #32
 80083d8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dcf2      	bgt.n	80083c6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80083e0:	f3bf 8f4f 	dsb	sy
}
 80083e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083e6:	f3bf 8f6f 	isb	sy
}
 80083ea:	bf00      	nop
}
 80083ec:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80083ee:	bf00      	nop
 80083f0:	3734      	adds	r7, #52	; 0x34
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	e000ed00 	.word	0xe000ed00

08008400 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	b21a      	sxth	r2, r3
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	b29b      	uxth	r3, r3
 8008416:	b21b      	sxth	r3, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	b21b      	sxth	r3, r3
 800841c:	b29b      	uxth	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	061a      	lsls	r2, r3, #24
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	0a1b      	lsrs	r3, r3, #8
 8008444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	0e1b      	lsrs	r3, r3, #24
 800844e:	4313      	orrs	r3, r2
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008464:	4915      	ldr	r1, [pc, #84]	; (80084bc <etharp_free_entry+0x60>)
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4613      	mov	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	4413      	add	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	440b      	add	r3, r1
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d013      	beq.n	80084a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008478:	4910      	ldr	r1, [pc, #64]	; (80084bc <etharp_free_entry+0x60>)
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	4613      	mov	r3, r2
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	4413      	add	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	440b      	add	r3, r1
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	f003 ff8f 	bl	800c3ac <pbuf_free>
    arp_table[i].q = NULL;
 800848e:	490b      	ldr	r1, [pc, #44]	; (80084bc <etharp_free_entry+0x60>)
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	4613      	mov	r3, r2
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	4413      	add	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	440b      	add	r3, r1
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80084a0:	4906      	ldr	r1, [pc, #24]	; (80084bc <etharp_free_entry+0x60>)
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4613      	mov	r3, r2
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	4413      	add	r3, r2
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	440b      	add	r3, r1
 80084ae:	3314      	adds	r3, #20
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	24005208 	.word	0x24005208

080084c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80084c6:	2300      	movs	r3, #0
 80084c8:	607b      	str	r3, [r7, #4]
 80084ca:	e096      	b.n	80085fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80084cc:	494f      	ldr	r1, [pc, #316]	; (800860c <etharp_tmr+0x14c>)
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	440b      	add	r3, r1
 80084da:	3314      	adds	r3, #20
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8086 	beq.w	80085f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80084e8:	4948      	ldr	r1, [pc, #288]	; (800860c <etharp_tmr+0x14c>)
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	4413      	add	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	440b      	add	r3, r1
 80084f6:	3312      	adds	r3, #18
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	b298      	uxth	r0, r3
 80084fe:	4943      	ldr	r1, [pc, #268]	; (800860c <etharp_tmr+0x14c>)
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	4613      	mov	r3, r2
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	4413      	add	r3, r2
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	440b      	add	r3, r1
 800850c:	3312      	adds	r3, #18
 800850e:	4602      	mov	r2, r0
 8008510:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008512:	493e      	ldr	r1, [pc, #248]	; (800860c <etharp_tmr+0x14c>)
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	4413      	add	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	440b      	add	r3, r1
 8008520:	3312      	adds	r3, #18
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008528:	d215      	bcs.n	8008556 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800852a:	4938      	ldr	r1, [pc, #224]	; (800860c <etharp_tmr+0x14c>)
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	440b      	add	r3, r1
 8008538:	3314      	adds	r3, #20
 800853a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800853c:	2b01      	cmp	r3, #1
 800853e:	d10e      	bne.n	800855e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8008540:	4932      	ldr	r1, [pc, #200]	; (800860c <etharp_tmr+0x14c>)
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4613      	mov	r3, r2
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	4413      	add	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	440b      	add	r3, r1
 800854e:	3312      	adds	r3, #18
 8008550:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008552:	2b04      	cmp	r3, #4
 8008554:	d903      	bls.n	800855e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff80 	bl	800845c <etharp_free_entry>
 800855c:	e04a      	b.n	80085f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800855e:	492b      	ldr	r1, [pc, #172]	; (800860c <etharp_tmr+0x14c>)
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	4613      	mov	r3, r2
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	4413      	add	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	440b      	add	r3, r1
 800856c:	3314      	adds	r3, #20
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b03      	cmp	r3, #3
 8008572:	d10a      	bne.n	800858a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008574:	4925      	ldr	r1, [pc, #148]	; (800860c <etharp_tmr+0x14c>)
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	4613      	mov	r3, r2
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	4413      	add	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	440b      	add	r3, r1
 8008582:	3314      	adds	r3, #20
 8008584:	2204      	movs	r2, #4
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	e034      	b.n	80085f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800858a:	4920      	ldr	r1, [pc, #128]	; (800860c <etharp_tmr+0x14c>)
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	4413      	add	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	440b      	add	r3, r1
 8008598:	3314      	adds	r3, #20
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b04      	cmp	r3, #4
 800859e:	d10a      	bne.n	80085b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80085a0:	491a      	ldr	r1, [pc, #104]	; (800860c <etharp_tmr+0x14c>)
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4613      	mov	r3, r2
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	4413      	add	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	440b      	add	r3, r1
 80085ae:	3314      	adds	r3, #20
 80085b0:	2202      	movs	r2, #2
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e01e      	b.n	80085f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80085b6:	4915      	ldr	r1, [pc, #84]	; (800860c <etharp_tmr+0x14c>)
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4413      	add	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	440b      	add	r3, r1
 80085c4:	3314      	adds	r3, #20
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d113      	bne.n	80085f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80085cc:	490f      	ldr	r1, [pc, #60]	; (800860c <etharp_tmr+0x14c>)
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	4413      	add	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	440b      	add	r3, r1
 80085da:	3308      	adds	r3, #8
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4613      	mov	r3, r2
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4a08      	ldr	r2, [pc, #32]	; (800860c <etharp_tmr+0x14c>)
 80085ea:	4413      	add	r3, r2
 80085ec:	3304      	adds	r3, #4
 80085ee:	4619      	mov	r1, r3
 80085f0:	f000 fe6e 	bl	80092d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3301      	adds	r3, #1
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b09      	cmp	r3, #9
 80085fe:	f77f af65 	ble.w	80084cc <etharp_tmr+0xc>
      }
    }
  }
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	24005208 	.word	0x24005208

08008610 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	; 0x28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	460b      	mov	r3, r1
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800861e:	230a      	movs	r3, #10
 8008620:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008622:	230a      	movs	r3, #10
 8008624:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008626:	230a      	movs	r3, #10
 8008628:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800862e:	230a      	movs	r3, #10
 8008630:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	83bb      	strh	r3, [r7, #28]
 8008636:	2300      	movs	r3, #0
 8008638:	837b      	strh	r3, [r7, #26]
 800863a:	2300      	movs	r3, #0
 800863c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800863e:	2300      	movs	r3, #0
 8008640:	843b      	strh	r3, [r7, #32]
 8008642:	e0ae      	b.n	80087a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008648:	49a6      	ldr	r1, [pc, #664]	; (80088e4 <etharp_find_entry+0x2d4>)
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3314      	adds	r3, #20
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800865a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800865e:	2b0a      	cmp	r3, #10
 8008660:	d105      	bne.n	800866e <etharp_find_entry+0x5e>
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008668:	8c3b      	ldrh	r3, [r7, #32]
 800866a:	847b      	strh	r3, [r7, #34]	; 0x22
 800866c:	e095      	b.n	800879a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8092 	beq.w	800879a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d009      	beq.n	8008690 <etharp_find_entry+0x80>
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d806      	bhi.n	8008690 <etharp_find_entry+0x80>
 8008682:	4b99      	ldr	r3, [pc, #612]	; (80088e8 <etharp_find_entry+0x2d8>)
 8008684:	f240 1223 	movw	r2, #291	; 0x123
 8008688:	4998      	ldr	r1, [pc, #608]	; (80088ec <etharp_find_entry+0x2dc>)
 800868a:	4899      	ldr	r0, [pc, #612]	; (80088f0 <etharp_find_entry+0x2e0>)
 800868c:	f009 fe7c 	bl	8012388 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d020      	beq.n	80086d8 <etharp_find_entry+0xc8>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6819      	ldr	r1, [r3, #0]
 800869a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800869e:	4891      	ldr	r0, [pc, #580]	; (80088e4 <etharp_find_entry+0x2d4>)
 80086a0:	4613      	mov	r3, r2
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	4413      	add	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4403      	add	r3, r0
 80086aa:	3304      	adds	r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4299      	cmp	r1, r3
 80086b0:	d112      	bne.n	80086d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <etharp_find_entry+0xc2>
 80086b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086bc:	4989      	ldr	r1, [pc, #548]	; (80088e4 <etharp_find_entry+0x2d4>)
 80086be:	4613      	mov	r3, r2
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	4413      	add	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	440b      	add	r3, r1
 80086c8:	3308      	adds	r3, #8
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d102      	bne.n	80086d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80086d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80086d6:	e100      	b.n	80088da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d140      	bne.n	8008760 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80086de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086e2:	4980      	ldr	r1, [pc, #512]	; (80088e4 <etharp_find_entry+0x2d4>)
 80086e4:	4613      	mov	r3, r2
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	4413      	add	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	440b      	add	r3, r1
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01a      	beq.n	800872a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80086f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086f8:	497a      	ldr	r1, [pc, #488]	; (80088e4 <etharp_find_entry+0x2d4>)
 80086fa:	4613      	mov	r3, r2
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	4413      	add	r3, r2
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	440b      	add	r3, r1
 8008704:	3312      	adds	r3, #18
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	8bba      	ldrh	r2, [r7, #28]
 800870a:	429a      	cmp	r2, r3
 800870c:	d845      	bhi.n	800879a <etharp_find_entry+0x18a>
            old_queue = i;
 800870e:	8c3b      	ldrh	r3, [r7, #32]
 8008710:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8008712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008716:	4973      	ldr	r1, [pc, #460]	; (80088e4 <etharp_find_entry+0x2d4>)
 8008718:	4613      	mov	r3, r2
 800871a:	005b      	lsls	r3, r3, #1
 800871c:	4413      	add	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	440b      	add	r3, r1
 8008722:	3312      	adds	r3, #18
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	83bb      	strh	r3, [r7, #28]
 8008728:	e037      	b.n	800879a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800872a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800872e:	496d      	ldr	r1, [pc, #436]	; (80088e4 <etharp_find_entry+0x2d4>)
 8008730:	4613      	mov	r3, r2
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	440b      	add	r3, r1
 800873a:	3312      	adds	r3, #18
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	8b7a      	ldrh	r2, [r7, #26]
 8008740:	429a      	cmp	r2, r3
 8008742:	d82a      	bhi.n	800879a <etharp_find_entry+0x18a>
            old_pending = i;
 8008744:	8c3b      	ldrh	r3, [r7, #32]
 8008746:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800874c:	4965      	ldr	r1, [pc, #404]	; (80088e4 <etharp_find_entry+0x2d4>)
 800874e:	4613      	mov	r3, r2
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	4413      	add	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	440b      	add	r3, r1
 8008758:	3312      	adds	r3, #18
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	837b      	strh	r3, [r7, #26]
 800875e:	e01c      	b.n	800879a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d919      	bls.n	800879a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800876a:	495e      	ldr	r1, [pc, #376]	; (80088e4 <etharp_find_entry+0x2d4>)
 800876c:	4613      	mov	r3, r2
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	4413      	add	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	440b      	add	r3, r1
 8008776:	3312      	adds	r3, #18
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	8b3a      	ldrh	r2, [r7, #24]
 800877c:	429a      	cmp	r2, r3
 800877e:	d80c      	bhi.n	800879a <etharp_find_entry+0x18a>
            old_stable = i;
 8008780:	8c3b      	ldrh	r3, [r7, #32]
 8008782:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8008784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008788:	4956      	ldr	r1, [pc, #344]	; (80088e4 <etharp_find_entry+0x2d4>)
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	3312      	adds	r3, #18
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800879a:	8c3b      	ldrh	r3, [r7, #32]
 800879c:	3301      	adds	r3, #1
 800879e:	b29b      	uxth	r3, r3
 80087a0:	843b      	strh	r3, [r7, #32]
 80087a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	f77f af4c 	ble.w	8008644 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d108      	bne.n	80087c8 <etharp_find_entry+0x1b8>
 80087b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80087ba:	2b0a      	cmp	r3, #10
 80087bc:	d107      	bne.n	80087ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80087be:	7afb      	ldrb	r3, [r7, #11]
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80087c8:	f04f 33ff 	mov.w	r3, #4294967295
 80087cc:	e085      	b.n	80088da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80087ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	dc02      	bgt.n	80087dc <etharp_find_entry+0x1cc>
    i = empty;
 80087d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087d8:	843b      	strh	r3, [r7, #32]
 80087da:	e039      	b.n	8008850 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80087dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80087e0:	2b09      	cmp	r3, #9
 80087e2:	dc14      	bgt.n	800880e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80087e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80087e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087ec:	493d      	ldr	r1, [pc, #244]	; (80088e4 <etharp_find_entry+0x2d4>)
 80087ee:	4613      	mov	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	4413      	add	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	440b      	add	r3, r1
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d018      	beq.n	8008830 <etharp_find_entry+0x220>
 80087fe:	4b3a      	ldr	r3, [pc, #232]	; (80088e8 <etharp_find_entry+0x2d8>)
 8008800:	f240 126d 	movw	r2, #365	; 0x16d
 8008804:	493b      	ldr	r1, [pc, #236]	; (80088f4 <etharp_find_entry+0x2e4>)
 8008806:	483a      	ldr	r0, [pc, #232]	; (80088f0 <etharp_find_entry+0x2e0>)
 8008808:	f009 fdbe 	bl	8012388 <iprintf>
 800880c:	e010      	b.n	8008830 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800880e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008812:	2b09      	cmp	r3, #9
 8008814:	dc02      	bgt.n	800881c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8008816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008818:	843b      	strh	r3, [r7, #32]
 800881a:	e009      	b.n	8008830 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800881c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008820:	2b09      	cmp	r3, #9
 8008822:	dc02      	bgt.n	800882a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8008824:	8bfb      	ldrh	r3, [r7, #30]
 8008826:	843b      	strh	r3, [r7, #32]
 8008828:	e002      	b.n	8008830 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800882a:	f04f 33ff 	mov.w	r3, #4294967295
 800882e:	e054      	b.n	80088da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008830:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008834:	2b09      	cmp	r3, #9
 8008836:	dd06      	ble.n	8008846 <etharp_find_entry+0x236>
 8008838:	4b2b      	ldr	r3, [pc, #172]	; (80088e8 <etharp_find_entry+0x2d8>)
 800883a:	f240 127f 	movw	r2, #383	; 0x17f
 800883e:	492e      	ldr	r1, [pc, #184]	; (80088f8 <etharp_find_entry+0x2e8>)
 8008840:	482b      	ldr	r0, [pc, #172]	; (80088f0 <etharp_find_entry+0x2e0>)
 8008842:	f009 fda1 	bl	8012388 <iprintf>
    etharp_free_entry(i);
 8008846:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fe06 	bl	800845c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008850:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008854:	2b09      	cmp	r3, #9
 8008856:	dd06      	ble.n	8008866 <etharp_find_entry+0x256>
 8008858:	4b23      	ldr	r3, [pc, #140]	; (80088e8 <etharp_find_entry+0x2d8>)
 800885a:	f240 1283 	movw	r2, #387	; 0x183
 800885e:	4926      	ldr	r1, [pc, #152]	; (80088f8 <etharp_find_entry+0x2e8>)
 8008860:	4823      	ldr	r0, [pc, #140]	; (80088f0 <etharp_find_entry+0x2e0>)
 8008862:	f009 fd91 	bl	8012388 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008866:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800886a:	491e      	ldr	r1, [pc, #120]	; (80088e4 <etharp_find_entry+0x2d4>)
 800886c:	4613      	mov	r3, r2
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	4413      	add	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	440b      	add	r3, r1
 8008876:	3314      	adds	r3, #20
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <etharp_find_entry+0x27c>
 800887e:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <etharp_find_entry+0x2d8>)
 8008880:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008884:	491d      	ldr	r1, [pc, #116]	; (80088fc <etharp_find_entry+0x2ec>)
 8008886:	481a      	ldr	r0, [pc, #104]	; (80088f0 <etharp_find_entry+0x2e0>)
 8008888:	f009 fd7e 	bl	8012388 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6819      	ldr	r1, [r3, #0]
 800889a:	4812      	ldr	r0, [pc, #72]	; (80088e4 <etharp_find_entry+0x2d4>)
 800889c:	4613      	mov	r3, r2
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	4413      	add	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4403      	add	r3, r0
 80088a6:	3304      	adds	r3, #4
 80088a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80088aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088ae:	490d      	ldr	r1, [pc, #52]	; (80088e4 <etharp_find_entry+0x2d4>)
 80088b0:	4613      	mov	r3, r2
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	440b      	add	r3, r1
 80088ba:	3312      	adds	r3, #18
 80088bc:	2200      	movs	r2, #0
 80088be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80088c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088c4:	4907      	ldr	r1, [pc, #28]	; (80088e4 <etharp_find_entry+0x2d4>)
 80088c6:	4613      	mov	r3, r2
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4413      	add	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	440b      	add	r3, r1
 80088d0:	3308      	adds	r3, #8
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80088d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3728      	adds	r7, #40	; 0x28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	24005208 	.word	0x24005208
 80088e8:	08013218 	.word	0x08013218
 80088ec:	080132a0 	.word	0x080132a0
 80088f0:	080132e0 	.word	0x080132e0
 80088f4:	08013308 	.word	0x08013308
 80088f8:	08013320 	.word	0x08013320
 80088fc:	08013334 	.word	0x08013334

08008900 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008914:	2b06      	cmp	r3, #6
 8008916:	d006      	beq.n	8008926 <etharp_update_arp_entry+0x26>
 8008918:	4b48      	ldr	r3, [pc, #288]	; (8008a3c <etharp_update_arp_entry+0x13c>)
 800891a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800891e:	4948      	ldr	r1, [pc, #288]	; (8008a40 <etharp_update_arp_entry+0x140>)
 8008920:	4848      	ldr	r0, [pc, #288]	; (8008a44 <etharp_update_arp_entry+0x144>)
 8008922:	f009 fd31 	bl	8012388 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d012      	beq.n	8008952 <etharp_update_arp_entry+0x52>
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00e      	beq.n	8008952 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68f9      	ldr	r1, [r7, #12]
 800893a:	4618      	mov	r0, r3
 800893c:	f001 facc 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8008940:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800894e:	2be0      	cmp	r3, #224	; 0xe0
 8008950:	d102      	bne.n	8008958 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008952:	f06f 030f 	mvn.w	r3, #15
 8008956:	e06c      	b.n	8008a32 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4619      	mov	r1, r3
 800895e:	68b8      	ldr	r0, [r7, #8]
 8008960:	f7ff fe56 	bl	8008610 <etharp_find_entry>
 8008964:	4603      	mov	r3, r0
 8008966:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008968:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800896c:	2b00      	cmp	r3, #0
 800896e:	da02      	bge.n	8008976 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8008970:	8afb      	ldrh	r3, [r7, #22]
 8008972:	b25b      	sxtb	r3, r3
 8008974:	e05d      	b.n	8008a32 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008976:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800897a:	4933      	ldr	r1, [pc, #204]	; (8008a48 <etharp_update_arp_entry+0x148>)
 800897c:	4613      	mov	r3, r2
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	4413      	add	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	440b      	add	r3, r1
 8008986:	3314      	adds	r3, #20
 8008988:	2202      	movs	r2, #2
 800898a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800898c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008990:	492d      	ldr	r1, [pc, #180]	; (8008a48 <etharp_update_arp_entry+0x148>)
 8008992:	4613      	mov	r3, r2
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	4413      	add	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	440b      	add	r3, r1
 800899c:	3308      	adds	r3, #8
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80089a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089a6:	4613      	mov	r3, r2
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	4413      	add	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	3308      	adds	r3, #8
 80089b0:	4a25      	ldr	r2, [pc, #148]	; (8008a48 <etharp_update_arp_entry+0x148>)
 80089b2:	4413      	add	r3, r2
 80089b4:	3304      	adds	r3, #4
 80089b6:	2206      	movs	r2, #6
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f009 fdbf 	bl	801253e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80089c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089c4:	4920      	ldr	r1, [pc, #128]	; (8008a48 <etharp_update_arp_entry+0x148>)
 80089c6:	4613      	mov	r3, r2
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4413      	add	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	440b      	add	r3, r1
 80089d0:	3312      	adds	r3, #18
 80089d2:	2200      	movs	r2, #0
 80089d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80089d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089da:	491b      	ldr	r1, [pc, #108]	; (8008a48 <etharp_update_arp_entry+0x148>)
 80089dc:	4613      	mov	r3, r2
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	4413      	add	r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	440b      	add	r3, r1
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d021      	beq.n	8008a30 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80089ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089f0:	4915      	ldr	r1, [pc, #84]	; (8008a48 <etharp_update_arp_entry+0x148>)
 80089f2:	4613      	mov	r3, r2
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	440b      	add	r3, r1
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008a00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a04:	4910      	ldr	r1, [pc, #64]	; (8008a48 <etharp_update_arp_entry+0x148>)
 8008a06:	4613      	mov	r3, r2
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	4413      	add	r3, r2
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	440b      	add	r3, r1
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8008a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6939      	ldr	r1, [r7, #16]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fcf3 	bl	8009410 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008a2a:	6938      	ldr	r0, [r7, #16]
 8008a2c:	f003 fcbe 	bl	800c3ac <pbuf_free>
  }
  return ERR_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	08013218 	.word	0x08013218
 8008a40:	08013360 	.word	0x08013360
 8008a44:	080132e0 	.word	0x080132e0
 8008a48:	24005208 	.word	0x24005208

08008a4c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	e01e      	b.n	8008a98 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008a5a:	4913      	ldr	r1, [pc, #76]	; (8008aa8 <etharp_cleanup_netif+0x5c>)
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	440b      	add	r3, r1
 8008a68:	3314      	adds	r3, #20
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <etharp_cleanup_netif+0x46>
 8008a74:	490c      	ldr	r1, [pc, #48]	; (8008aa8 <etharp_cleanup_netif+0x5c>)
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	440b      	add	r3, r1
 8008a82:	3308      	adds	r3, #8
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d102      	bne.n	8008a92 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7ff fce5 	bl	800845c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3301      	adds	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b09      	cmp	r3, #9
 8008a9c:	dddd      	ble.n	8008a5a <etharp_cleanup_netif+0xe>
    }
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	24005208 	.word	0x24005208

08008aac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8008aac:	b5b0      	push	{r4, r5, r7, lr}
 8008aae:	b08a      	sub	sp, #40	; 0x28
 8008ab0:	af04      	add	r7, sp, #16
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <etharp_input+0x20>
 8008abc:	4b3d      	ldr	r3, [pc, #244]	; (8008bb4 <etharp_input+0x108>)
 8008abe:	f240 228a 	movw	r2, #650	; 0x28a
 8008ac2:	493d      	ldr	r1, [pc, #244]	; (8008bb8 <etharp_input+0x10c>)
 8008ac4:	483d      	ldr	r0, [pc, #244]	; (8008bbc <etharp_input+0x110>)
 8008ac6:	f009 fc5f 	bl	8012388 <iprintf>
 8008aca:	e06f      	b.n	8008bac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008adc:	d10c      	bne.n	8008af8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008ae2:	2b06      	cmp	r3, #6
 8008ae4:	d108      	bne.n	8008af8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d104      	bne.n	8008af8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d003      	beq.n	8008b00 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f003 fc57 	bl	800c3ac <pbuf_free>
    return;
 8008afe:	e055      	b.n	8008bac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	330e      	adds	r3, #14
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	3318      	adds	r3, #24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3304      	adds	r3, #4
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d102      	bne.n	8008b20 <etharp_input+0x74>
    for_us = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]
 8008b1e:	e009      	b.n	8008b34 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	3304      	adds	r3, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2301      	moveq	r3, #1
 8008b2e:	2300      	movne	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f103 0208 	add.w	r2, r3, #8
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <etharp_input+0x98>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <etharp_input+0x9a>
 8008b44:	2302      	movs	r3, #2
 8008b46:	f107 010c 	add.w	r1, r7, #12
 8008b4a:	6838      	ldr	r0, [r7, #0]
 8008b4c:	f7ff fed8 	bl	8008900 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	88db      	ldrh	r3, [r3, #6]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5a:	d003      	beq.n	8008b64 <etharp_input+0xb8>
 8008b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b60:	d01e      	beq.n	8008ba0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008b62:	e020      	b.n	8008ba6 <etharp_input+0xfa>
      if (for_us) {
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d01c      	beq.n	8008ba4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008b84:	2102      	movs	r1, #2
 8008b86:	9103      	str	r1, [sp, #12]
 8008b88:	f107 010c 	add.w	r1, r7, #12
 8008b8c:	9102      	str	r1, [sp, #8]
 8008b8e:	9201      	str	r2, [sp, #4]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	462b      	mov	r3, r5
 8008b94:	4622      	mov	r2, r4
 8008b96:	4601      	mov	r1, r0
 8008b98:	6838      	ldr	r0, [r7, #0]
 8008b9a:	f000 faeb 	bl	8009174 <etharp_raw>
      break;
 8008b9e:	e001      	b.n	8008ba4 <etharp_input+0xf8>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <etharp_input+0xfa>
      break;
 8008ba4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f003 fc00 	bl	800c3ac <pbuf_free>
}
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08013218 	.word	0x08013218
 8008bb8:	080133b8 	.word	0x080133b8
 8008bbc:	080132e0 	.word	0x080132e0

08008bc0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008bce:	79fa      	ldrb	r2, [r7, #7]
 8008bd0:	4944      	ldr	r1, [pc, #272]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	4413      	add	r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	440b      	add	r3, r1
 8008bdc:	3314      	adds	r3, #20
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d806      	bhi.n	8008bf2 <etharp_output_to_arp_index+0x32>
 8008be4:	4b40      	ldr	r3, [pc, #256]	; (8008ce8 <etharp_output_to_arp_index+0x128>)
 8008be6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008bea:	4940      	ldr	r1, [pc, #256]	; (8008cec <etharp_output_to_arp_index+0x12c>)
 8008bec:	4840      	ldr	r0, [pc, #256]	; (8008cf0 <etharp_output_to_arp_index+0x130>)
 8008bee:	f009 fbcb 	bl	8012388 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008bf2:	79fa      	ldrb	r2, [r7, #7]
 8008bf4:	493b      	ldr	r1, [pc, #236]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	4413      	add	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	440b      	add	r3, r1
 8008c00:	3314      	adds	r3, #20
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d153      	bne.n	8008cb0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008c08:	79fa      	ldrb	r2, [r7, #7]
 8008c0a:	4936      	ldr	r1, [pc, #216]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	440b      	add	r3, r1
 8008c16:	3312      	adds	r3, #18
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008c1e:	d919      	bls.n	8008c54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008c20:	79fa      	ldrb	r2, [r7, #7]
 8008c22:	4613      	mov	r3, r2
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	4413      	add	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4a2e      	ldr	r2, [pc, #184]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008c2c:	4413      	add	r3, r2
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fb4c 	bl	80092d0 <etharp_request>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d138      	bne.n	8008cb0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008c3e:	79fa      	ldrb	r2, [r7, #7]
 8008c40:	4928      	ldr	r1, [pc, #160]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008c42:	4613      	mov	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3314      	adds	r3, #20
 8008c4e:	2203      	movs	r2, #3
 8008c50:	701a      	strb	r2, [r3, #0]
 8008c52:	e02d      	b.n	8008cb0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008c54:	79fa      	ldrb	r2, [r7, #7]
 8008c56:	4923      	ldr	r1, [pc, #140]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008c58:	4613      	mov	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	440b      	add	r3, r1
 8008c62:	3312      	adds	r3, #18
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008c6a:	d321      	bcc.n	8008cb0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008c6c:	79fa      	ldrb	r2, [r7, #7]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	4413      	add	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4a1b      	ldr	r2, [pc, #108]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008c78:	4413      	add	r3, r2
 8008c7a:	1d19      	adds	r1, r3, #4
 8008c7c:	79fa      	ldrb	r2, [r7, #7]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	3308      	adds	r3, #8
 8008c88:	4a16      	ldr	r2, [pc, #88]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	461a      	mov	r2, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fafb 	bl	800928c <etharp_request_dst>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d109      	bne.n	8008cb0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008c9c:	79fa      	ldrb	r2, [r7, #7]
 8008c9e:	4911      	ldr	r1, [pc, #68]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	4413      	add	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	440b      	add	r3, r1
 8008caa:	3314      	adds	r3, #20
 8008cac:	2203      	movs	r2, #3
 8008cae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8008cb6:	79fa      	ldrb	r2, [r7, #7]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	4413      	add	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <etharp_output_to_arp_index+0x124>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ccc:	9200      	str	r2, [sp, #0]
 8008cce:	460a      	mov	r2, r1
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fb9c 	bl	8009410 <ethernet_output>
 8008cd8:	4603      	mov	r3, r0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	24005208 	.word	0x24005208
 8008ce8:	08013218 	.word	0x08013218
 8008cec:	080133d8 	.word	0x080133d8
 8008cf0:	080132e0 	.word	0x080132e0

08008cf4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	; 0x28
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <etharp_output+0x24>
 8008d0a:	4b73      	ldr	r3, [pc, #460]	; (8008ed8 <etharp_output+0x1e4>)
 8008d0c:	f240 321e 	movw	r2, #798	; 0x31e
 8008d10:	4972      	ldr	r1, [pc, #456]	; (8008edc <etharp_output+0x1e8>)
 8008d12:	4873      	ldr	r0, [pc, #460]	; (8008ee0 <etharp_output+0x1ec>)
 8008d14:	f009 fb38 	bl	8012388 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d106      	bne.n	8008d2c <etharp_output+0x38>
 8008d1e:	4b6e      	ldr	r3, [pc, #440]	; (8008ed8 <etharp_output+0x1e4>)
 8008d20:	f240 321f 	movw	r2, #799	; 0x31f
 8008d24:	496f      	ldr	r1, [pc, #444]	; (8008ee4 <etharp_output+0x1f0>)
 8008d26:	486e      	ldr	r0, [pc, #440]	; (8008ee0 <etharp_output+0x1ec>)
 8008d28:	f009 fb2e 	bl	8012388 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <etharp_output+0x4c>
 8008d32:	4b69      	ldr	r3, [pc, #420]	; (8008ed8 <etharp_output+0x1e4>)
 8008d34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008d38:	496b      	ldr	r1, [pc, #428]	; (8008ee8 <etharp_output+0x1f4>)
 8008d3a:	4869      	ldr	r0, [pc, #420]	; (8008ee0 <etharp_output+0x1ec>)
 8008d3c:	f009 fb24 	bl	8012388 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68f9      	ldr	r1, [r7, #12]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 f8c6 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008d52:	4b66      	ldr	r3, [pc, #408]	; (8008eec <etharp_output+0x1f8>)
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	e0af      	b.n	8008eb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d60:	2be0      	cmp	r3, #224	; 0xe0
 8008d62:	d118      	bne.n	8008d96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008d64:	2301      	movs	r3, #1
 8008d66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008d6c:	235e      	movs	r3, #94	; 0x5e
 8008d6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3301      	adds	r3, #1
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3302      	adds	r3, #2
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3303      	adds	r3, #3
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008d8e:	f107 0310 	add.w	r3, r7, #16
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e090      	b.n	8008eb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	405a      	eors	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3308      	adds	r3, #8
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d012      	beq.n	8008dd4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008db4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00b      	beq.n	8008dd4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	61bb      	str	r3, [r7, #24]
 8008dcc:	e002      	b.n	8008dd4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008dce:	f06f 0303 	mvn.w	r3, #3
 8008dd2:	e07d      	b.n	8008ed0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008dd4:	4b46      	ldr	r3, [pc, #280]	; (8008ef0 <etharp_output+0x1fc>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4a46      	ldr	r2, [pc, #280]	; (8008ef4 <etharp_output+0x200>)
 8008ddc:	460b      	mov	r3, r1
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	440b      	add	r3, r1
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	3314      	adds	r3, #20
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d925      	bls.n	8008e3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008dee:	4b40      	ldr	r3, [pc, #256]	; (8008ef0 <etharp_output+0x1fc>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4a3f      	ldr	r2, [pc, #252]	; (8008ef4 <etharp_output+0x200>)
 8008df6:	460b      	mov	r3, r1
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	440b      	add	r3, r1
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	4413      	add	r3, r2
 8008e00:	3308      	adds	r3, #8
 8008e02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d117      	bne.n	8008e3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b38      	ldr	r3, [pc, #224]	; (8008ef0 <etharp_output+0x1fc>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	4937      	ldr	r1, [pc, #220]	; (8008ef4 <etharp_output+0x200>)
 8008e16:	4603      	mov	r3, r0
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4403      	add	r3, r0
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	440b      	add	r3, r1
 8008e20:	3304      	adds	r3, #4
 8008e22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d108      	bne.n	8008e3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008e28:	4b31      	ldr	r3, [pc, #196]	; (8008ef0 <etharp_output+0x1fc>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7ff fec5 	bl	8008bc0 <etharp_output_to_arp_index>
 8008e36:	4603      	mov	r3, r0
 8008e38:	e04a      	b.n	8008ed0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
 8008e3e:	e031      	b.n	8008ea4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008e40:	7dfa      	ldrb	r2, [r7, #23]
 8008e42:	492c      	ldr	r1, [pc, #176]	; (8008ef4 <etharp_output+0x200>)
 8008e44:	4613      	mov	r3, r2
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	4413      	add	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	440b      	add	r3, r1
 8008e4e:	3314      	adds	r3, #20
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d923      	bls.n	8008e9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008e56:	7dfa      	ldrb	r2, [r7, #23]
 8008e58:	4926      	ldr	r1, [pc, #152]	; (8008ef4 <etharp_output+0x200>)
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	4413      	add	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	440b      	add	r3, r1
 8008e64:	3308      	adds	r3, #8
 8008e66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d117      	bne.n	8008e9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	6819      	ldr	r1, [r3, #0]
 8008e72:	7dfa      	ldrb	r2, [r7, #23]
 8008e74:	481f      	ldr	r0, [pc, #124]	; (8008ef4 <etharp_output+0x200>)
 8008e76:	4613      	mov	r3, r2
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	4413      	add	r3, r2
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	4403      	add	r3, r0
 8008e80:	3304      	adds	r3, #4
 8008e82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008e84:	4299      	cmp	r1, r3
 8008e86:	d10a      	bne.n	8008e9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008e88:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <etharp_output+0x1fc>)
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	461a      	mov	r2, r3
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7ff fe93 	bl	8008bc0 <etharp_output_to_arp_index>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	e018      	b.n	8008ed0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	2b09      	cmp	r3, #9
 8008ea8:	d9ca      	bls.n	8008e40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	69b9      	ldr	r1, [r7, #24]
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 f822 	bl	8008ef8 <etharp_query>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	e00b      	b.n	8008ed0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8008ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 faa1 	bl	8009410 <ethernet_output>
 8008ece:	4603      	mov	r3, r0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3720      	adds	r7, #32
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	08013218 	.word	0x08013218
 8008edc:	080133b8 	.word	0x080133b8
 8008ee0:	080132e0 	.word	0x080132e0
 8008ee4:	08013408 	.word	0x08013408
 8008ee8:	080133a8 	.word	0x080133a8
 8008eec:	080160b0 	.word	0x080160b0
 8008ef0:	240052f8 	.word	0x240052f8
 8008ef4:	24005208 	.word	0x24005208

08008ef8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08c      	sub	sp, #48	; 0x30
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	332a      	adds	r3, #42	; 0x2a
 8008f08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008f0a:	23ff      	movs	r3, #255	; 0xff
 8008f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68f9      	ldr	r1, [r7, #12]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 ffdc 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10c      	bne.n	8008f40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008f2e:	2be0      	cmp	r3, #224	; 0xe0
 8008f30:	d006      	beq.n	8008f40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008f40:	f06f 030f 	mvn.w	r3, #15
 8008f44:	e101      	b.n	800914a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	2101      	movs	r1, #1
 8008f4a:	68b8      	ldr	r0, [r7, #8]
 8008f4c:	f7ff fb60 	bl	8008610 <etharp_find_entry>
 8008f50:	4603      	mov	r3, r0
 8008f52:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8008f54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da02      	bge.n	8008f62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008f5c:	8a7b      	ldrh	r3, [r7, #18]
 8008f5e:	b25b      	sxtb	r3, r3
 8008f60:	e0f3      	b.n	800914a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008f62:	8a7b      	ldrh	r3, [r7, #18]
 8008f64:	2b7e      	cmp	r3, #126	; 0x7e
 8008f66:	d906      	bls.n	8008f76 <etharp_query+0x7e>
 8008f68:	4b7a      	ldr	r3, [pc, #488]	; (8009154 <etharp_query+0x25c>)
 8008f6a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008f6e:	497a      	ldr	r1, [pc, #488]	; (8009158 <etharp_query+0x260>)
 8008f70:	487a      	ldr	r0, [pc, #488]	; (800915c <etharp_query+0x264>)
 8008f72:	f009 fa09 	bl	8012388 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8008f76:	8a7b      	ldrh	r3, [r7, #18]
 8008f78:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008f7a:	7c7a      	ldrb	r2, [r7, #17]
 8008f7c:	4978      	ldr	r1, [pc, #480]	; (8009160 <etharp_query+0x268>)
 8008f7e:	4613      	mov	r3, r2
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	4413      	add	r3, r2
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	440b      	add	r3, r1
 8008f88:	3314      	adds	r3, #20
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d115      	bne.n	8008fbc <etharp_query+0xc4>
    is_new_entry = 1;
 8008f90:	2301      	movs	r3, #1
 8008f92:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008f94:	7c7a      	ldrb	r2, [r7, #17]
 8008f96:	4972      	ldr	r1, [pc, #456]	; (8009160 <etharp_query+0x268>)
 8008f98:	4613      	mov	r3, r2
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4413      	add	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3314      	adds	r3, #20
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8008fa8:	7c7a      	ldrb	r2, [r7, #17]
 8008faa:	496d      	ldr	r1, [pc, #436]	; (8009160 <etharp_query+0x268>)
 8008fac:	4613      	mov	r3, r2
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	4413      	add	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	440b      	add	r3, r1
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8008fbc:	7c7a      	ldrb	r2, [r7, #17]
 8008fbe:	4968      	ldr	r1, [pc, #416]	; (8009160 <etharp_query+0x268>)
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	440b      	add	r3, r1
 8008fca:	3314      	adds	r3, #20
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d011      	beq.n	8008ff6 <etharp_query+0xfe>
 8008fd2:	7c7a      	ldrb	r2, [r7, #17]
 8008fd4:	4962      	ldr	r1, [pc, #392]	; (8009160 <etharp_query+0x268>)
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	4413      	add	r3, r2
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	440b      	add	r3, r1
 8008fe0:	3314      	adds	r3, #20
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d806      	bhi.n	8008ff6 <etharp_query+0xfe>
 8008fe8:	4b5a      	ldr	r3, [pc, #360]	; (8009154 <etharp_query+0x25c>)
 8008fea:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008fee:	495d      	ldr	r1, [pc, #372]	; (8009164 <etharp_query+0x26c>)
 8008ff0:	485a      	ldr	r0, [pc, #360]	; (800915c <etharp_query+0x264>)
 8008ff2:	f009 f9c9 	bl	8012388 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <etharp_query+0x10a>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10c      	bne.n	800901c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 f963 	bl	80092d0 <etharp_request>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <etharp_query+0x124>
      return result;
 8009016:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800901a:	e096      	b.n	800914a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <etharp_query+0x138>
 8009022:	4b4c      	ldr	r3, [pc, #304]	; (8009154 <etharp_query+0x25c>)
 8009024:	f240 32e1 	movw	r2, #993	; 0x3e1
 8009028:	494f      	ldr	r1, [pc, #316]	; (8009168 <etharp_query+0x270>)
 800902a:	484c      	ldr	r0, [pc, #304]	; (800915c <etharp_query+0x264>)
 800902c:	f009 f9ac 	bl	8012388 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009030:	7c7a      	ldrb	r2, [r7, #17]
 8009032:	494b      	ldr	r1, [pc, #300]	; (8009160 <etharp_query+0x268>)
 8009034:	4613      	mov	r3, r2
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	4413      	add	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	440b      	add	r3, r1
 800903e:	3314      	adds	r3, #20
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d917      	bls.n	8009076 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8009046:	4a49      	ldr	r2, [pc, #292]	; (800916c <etharp_query+0x274>)
 8009048:	7c7b      	ldrb	r3, [r7, #17]
 800904a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800904c:	7c7a      	ldrb	r2, [r7, #17]
 800904e:	4613      	mov	r3, r2
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	4413      	add	r3, r2
 8009054:	00db      	lsls	r3, r3, #3
 8009056:	3308      	adds	r3, #8
 8009058:	4a41      	ldr	r2, [pc, #260]	; (8009160 <etharp_query+0x268>)
 800905a:	4413      	add	r3, r2
 800905c:	3304      	adds	r3, #4
 800905e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009062:	9200      	str	r2, [sp, #0]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f9d1 	bl	8009410 <ethernet_output>
 800906e:	4603      	mov	r3, r0
 8009070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009074:	e067      	b.n	8009146 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009076:	7c7a      	ldrb	r2, [r7, #17]
 8009078:	4939      	ldr	r1, [pc, #228]	; (8009160 <etharp_query+0x268>)
 800907a:	4613      	mov	r3, r2
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	4413      	add	r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	440b      	add	r3, r1
 8009084:	3314      	adds	r3, #20
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d15c      	bne.n	8009146 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009094:	e01c      	b.n	80090d0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	895a      	ldrh	r2, [r3, #10]
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	891b      	ldrh	r3, [r3, #8]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d10a      	bne.n	80090b8 <etharp_query+0x1c0>
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d006      	beq.n	80090b8 <etharp_query+0x1c0>
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <etharp_query+0x25c>)
 80090ac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80090b0:	492f      	ldr	r1, [pc, #188]	; (8009170 <etharp_query+0x278>)
 80090b2:	482a      	ldr	r0, [pc, #168]	; (800915c <etharp_query+0x264>)
 80090b4:	f009 f968 	bl	8012388 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	7b1b      	ldrb	r3, [r3, #12]
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <etharp_query+0x1d2>
        copy_needed = 1;
 80090c4:	2301      	movs	r3, #1
 80090c6:	61bb      	str	r3, [r7, #24]
        break;
 80090c8:	e005      	b.n	80090d6 <etharp_query+0x1de>
      }
      p = p->next;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1df      	bne.n	8009096 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	f44f 7120 	mov.w	r1, #640	; 0x280
 80090e2:	200e      	movs	r0, #14
 80090e4:	f003 fbbe 	bl	800c864 <pbuf_clone>
 80090e8:	61f8      	str	r0, [r7, #28]
 80090ea:	e004      	b.n	80090f6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80090f0:	69f8      	ldr	r0, [r7, #28]
 80090f2:	f003 f9fb 	bl	800c4ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d021      	beq.n	8009140 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80090fc:	7c7a      	ldrb	r2, [r7, #17]
 80090fe:	4918      	ldr	r1, [pc, #96]	; (8009160 <etharp_query+0x268>)
 8009100:	4613      	mov	r3, r2
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	4413      	add	r3, r2
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	440b      	add	r3, r1
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8009110:	7c7a      	ldrb	r2, [r7, #17]
 8009112:	4913      	ldr	r1, [pc, #76]	; (8009160 <etharp_query+0x268>)
 8009114:	4613      	mov	r3, r2
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	4413      	add	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	440b      	add	r3, r1
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4618      	mov	r0, r3
 8009122:	f003 f943 	bl	800c3ac <pbuf_free>
      }
      arp_table[i].q = p;
 8009126:	7c7a      	ldrb	r2, [r7, #17]
 8009128:	490d      	ldr	r1, [pc, #52]	; (8009160 <etharp_query+0x268>)
 800912a:	4613      	mov	r3, r2
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	4413      	add	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	440b      	add	r3, r1
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800913e:	e002      	b.n	8009146 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009140:	23ff      	movs	r3, #255	; 0xff
 8009142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800914a:	4618      	mov	r0, r3
 800914c:	3728      	adds	r7, #40	; 0x28
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	08013218 	.word	0x08013218
 8009158:	08013414 	.word	0x08013414
 800915c:	080132e0 	.word	0x080132e0
 8009160:	24005208 	.word	0x24005208
 8009164:	08013424 	.word	0x08013424
 8009168:	08013408 	.word	0x08013408
 800916c:	240052f8 	.word	0x240052f8
 8009170:	0801344c 	.word	0x0801344c

08009174 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	; 0x28
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d106      	bne.n	800919a <etharp_raw+0x26>
 800918c:	4b3a      	ldr	r3, [pc, #232]	; (8009278 <etharp_raw+0x104>)
 800918e:	f240 4257 	movw	r2, #1111	; 0x457
 8009192:	493a      	ldr	r1, [pc, #232]	; (800927c <etharp_raw+0x108>)
 8009194:	483a      	ldr	r0, [pc, #232]	; (8009280 <etharp_raw+0x10c>)
 8009196:	f009 f8f7 	bl	8012388 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800919a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800919e:	211c      	movs	r1, #28
 80091a0:	200e      	movs	r0, #14
 80091a2:	f002 fe1f 	bl	800bde4 <pbuf_alloc>
 80091a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295
 80091b2:	e05d      	b.n	8009270 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	895b      	ldrh	r3, [r3, #10]
 80091b8:	2b1b      	cmp	r3, #27
 80091ba:	d806      	bhi.n	80091ca <etharp_raw+0x56>
 80091bc:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <etharp_raw+0x104>)
 80091be:	f240 4262 	movw	r2, #1122	; 0x462
 80091c2:	4930      	ldr	r1, [pc, #192]	; (8009284 <etharp_raw+0x110>)
 80091c4:	482e      	ldr	r0, [pc, #184]	; (8009280 <etharp_raw+0x10c>)
 80091c6:	f009 f8df 	bl	8012388 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80091d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff f914 	bl	8008400 <lwip_htons>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091e6:	2b06      	cmp	r3, #6
 80091e8:	d006      	beq.n	80091f8 <etharp_raw+0x84>
 80091ea:	4b23      	ldr	r3, [pc, #140]	; (8009278 <etharp_raw+0x104>)
 80091ec:	f240 4269 	movw	r2, #1129	; 0x469
 80091f0:	4925      	ldr	r1, [pc, #148]	; (8009288 <etharp_raw+0x114>)
 80091f2:	4823      	ldr	r0, [pc, #140]	; (8009280 <etharp_raw+0x10c>)
 80091f4:	f009 f8c8 	bl	8012388 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	3308      	adds	r3, #8
 80091fc:	2206      	movs	r2, #6
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f009 f99c 	bl	801253e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3312      	adds	r3, #18
 800920a:	2206      	movs	r2, #6
 800920c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800920e:	4618      	mov	r0, r3
 8009210:	f009 f995 	bl	801253e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	330e      	adds	r3, #14
 8009218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3318      	adds	r3, #24
 8009222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	f042 0201 	orr.w	r2, r2, #1
 8009234:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2200      	movs	r2, #0
 800923a:	f042 0208 	orr.w	r2, r2, #8
 800923e:	709a      	strb	r2, [r3, #2]
 8009240:	2200      	movs	r2, #0
 8009242:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2206      	movs	r2, #6
 8009248:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2204      	movs	r2, #4
 800924e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009250:	f640 0306 	movw	r3, #2054	; 0x806
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	69b9      	ldr	r1, [r7, #24]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f8d7 	bl	8009410 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009262:	69b8      	ldr	r0, [r7, #24]
 8009264:	f003 f8a2 	bl	800c3ac <pbuf_free>
  p = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800926c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	08013218 	.word	0x08013218
 800927c:	080133b8 	.word	0x080133b8
 8009280:	080132e0 	.word	0x080132e0
 8009284:	08013468 	.word	0x08013468
 8009288:	0801349c 	.word	0x0801349c

0800928c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af04      	add	r7, sp, #16
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092a8:	2201      	movs	r2, #1
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	9202      	str	r2, [sp, #8]
 80092b0:	4a06      	ldr	r2, [pc, #24]	; (80092cc <etharp_request_dst+0x40>)
 80092b2:	9201      	str	r2, [sp, #4]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	4603      	mov	r3, r0
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7ff ff5a 	bl	8009174 <etharp_raw>
 80092c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	080160b8 	.word	0x080160b8

080092d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80092da:	4a05      	ldr	r2, [pc, #20]	; (80092f0 <etharp_request+0x20>)
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7ff ffd4 	bl	800928c <etharp_request_dst>
 80092e4:	4603      	mov	r3, r0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	080160b0 	.word	0x080160b0

080092f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80092fe:	230e      	movs	r3, #14
 8009300:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	895b      	ldrh	r3, [r3, #10]
 8009306:	2b0e      	cmp	r3, #14
 8009308:	d96e      	bls.n	80093e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7bdb      	ldrb	r3, [r3, #15]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009318:	3301      	adds	r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	7b1a      	ldrb	r2, [r3, #12]
 800932a:	7b5b      	ldrb	r3, [r3, #13]
 800932c:	021b      	lsls	r3, r3, #8
 800932e:	4313      	orrs	r3, r2
 8009330:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d023      	beq.n	8009386 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d10f      	bne.n	8009366 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	785b      	ldrb	r3, [r3, #1]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d11b      	bne.n	8009386 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009352:	2b5e      	cmp	r3, #94	; 0x5e
 8009354:	d117      	bne.n	8009386 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	7b5b      	ldrb	r3, [r3, #13]
 800935a:	f043 0310 	orr.w	r3, r3, #16
 800935e:	b2da      	uxtb	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	735a      	strb	r2, [r3, #13]
 8009364:	e00f      	b.n	8009386 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2206      	movs	r2, #6
 800936a:	4928      	ldr	r1, [pc, #160]	; (800940c <ethernet_input+0x118>)
 800936c:	4618      	mov	r0, r3
 800936e:	f009 f860 	bl	8012432 <memcmp>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7b5b      	ldrb	r3, [r3, #13]
 800937c:	f043 0308 	orr.w	r3, r3, #8
 8009380:	b2da      	uxtb	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8009386:	89fb      	ldrh	r3, [r7, #14]
 8009388:	2b08      	cmp	r3, #8
 800938a:	d003      	beq.n	8009394 <ethernet_input+0xa0>
 800938c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8009390:	d014      	beq.n	80093bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8009392:	e032      	b.n	80093fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800939a:	f003 0308 	and.w	r3, r3, #8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d024      	beq.n	80093ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80093a2:	8afb      	ldrh	r3, [r7, #22]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f002 ff7a 	bl	800c2a0 <pbuf_remove_header>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d11e      	bne.n	80093f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb93 	bl	8009ae0 <ip4_input>
      break;
 80093ba:	e013      	b.n	80093e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d014      	beq.n	80093f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80093ca:	8afb      	ldrh	r3, [r7, #22]
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f002 ff66 	bl	800c2a0 <pbuf_remove_header>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10e      	bne.n	80093f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fb65 	bl	8008aac <etharp_input>
      break;
 80093e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e00c      	b.n	8009402 <ethernet_input+0x10e>
    goto free_and_return;
 80093e8:	bf00      	nop
 80093ea:	e006      	b.n	80093fa <ethernet_input+0x106>
        goto free_and_return;
 80093ec:	bf00      	nop
 80093ee:	e004      	b.n	80093fa <ethernet_input+0x106>
        goto free_and_return;
 80093f0:	bf00      	nop
 80093f2:	e002      	b.n	80093fa <ethernet_input+0x106>
        goto free_and_return;
 80093f4:	bf00      	nop
 80093f6:	e000      	b.n	80093fa <ethernet_input+0x106>
        goto free_and_return;
 80093f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f002 ffd6 	bl	800c3ac <pbuf_free>
  return ERR_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	080160b0 	.word	0x080160b0

08009410 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800941e:	8c3b      	ldrh	r3, [r7, #32]
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe ffed 	bl	8008400 <lwip_htons>
 8009426:	4603      	mov	r3, r0
 8009428:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800942a:	210e      	movs	r1, #14
 800942c:	68b8      	ldr	r0, [r7, #8]
 800942e:	f002 ff27 	bl	800c280 <pbuf_add_header>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d125      	bne.n	8009484 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	8afa      	ldrh	r2, [r7, #22]
 8009442:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2206      	movs	r2, #6
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f009 f877 	bl	801253e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	3306      	adds	r3, #6
 8009454:	2206      	movs	r2, #6
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4618      	mov	r0, r3
 800945a:	f009 f870 	bl	801253e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009464:	2b06      	cmp	r3, #6
 8009466:	d006      	beq.n	8009476 <ethernet_output+0x66>
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <ethernet_output+0x84>)
 800946a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800946e:	490a      	ldr	r1, [pc, #40]	; (8009498 <ethernet_output+0x88>)
 8009470:	480a      	ldr	r0, [pc, #40]	; (800949c <ethernet_output+0x8c>)
 8009472:	f008 ff89 	bl	8012388 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	4798      	blx	r3
 8009480:	4603      	mov	r3, r0
 8009482:	e002      	b.n	800948a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8009484:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8009486:	f06f 0301 	mvn.w	r3, #1
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	080134e0 	.word	0x080134e0
 8009498:	08013568 	.word	0x08013568
 800949c:	0801359c 	.word	0x0801359c

080094a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08e      	sub	sp, #56	; 0x38
 80094a4:	af04      	add	r7, sp, #16
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80094aa:	4b87      	ldr	r3, [pc, #540]	; (80096c8 <icmp_input+0x228>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80094c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094c2:	2b13      	cmp	r3, #19
 80094c4:	f240 80e8 	bls.w	8009698 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	895b      	ldrh	r3, [r3, #10]
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	f240 80e5 	bls.w	800969c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80094dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80d2 	beq.w	800968a <icmp_input+0x1ea>
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	f040 80d2 	bne.w	8009690 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80094ec:	4b77      	ldr	r3, [pc, #476]	; (80096cc <icmp_input+0x22c>)
 80094ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80094f0:	4b75      	ldr	r3, [pc, #468]	; (80096c8 <icmp_input+0x228>)
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094f8:	2be0      	cmp	r3, #224	; 0xe0
 80094fa:	f000 80d6 	beq.w	80096aa <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80094fe:	4b72      	ldr	r3, [pc, #456]	; (80096c8 <icmp_input+0x228>)
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	4a71      	ldr	r2, [pc, #452]	; (80096c8 <icmp_input+0x228>)
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	4611      	mov	r1, r2
 8009508:	4618      	mov	r0, r3
 800950a:	f000 fce5 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	f040 80cc 	bne.w	80096ae <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	891b      	ldrh	r3, [r3, #8]
 800951a:	2b07      	cmp	r3, #7
 800951c:	f240 80c0 	bls.w	80096a0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f9e0 	bl	80098e6 <inet_chksum_pbuf>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f002 ff3d 	bl	800c3ac <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8009532:	e0c5      	b.n	80096c0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009536:	330e      	adds	r3, #14
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f002 fea0 	bl	800c280 <pbuf_add_header>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d04b      	beq.n	80095de <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	891a      	ldrh	r2, [r3, #8]
 800954a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800954c:	4413      	add	r3, r2
 800954e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	891b      	ldrh	r3, [r3, #8]
 8009554:	8b7a      	ldrh	r2, [r7, #26]
 8009556:	429a      	cmp	r2, r3
 8009558:	f0c0 80ab 	bcc.w	80096b2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800955c:	8b7b      	ldrh	r3, [r7, #26]
 800955e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009562:	4619      	mov	r1, r3
 8009564:	200e      	movs	r0, #14
 8009566:	f002 fc3d 	bl	800bde4 <pbuf_alloc>
 800956a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80a1 	beq.w	80096b6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	895b      	ldrh	r3, [r3, #10]
 8009578:	461a      	mov	r2, r3
 800957a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800957c:	3308      	adds	r3, #8
 800957e:	429a      	cmp	r2, r3
 8009580:	d203      	bcs.n	800958a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8009582:	6978      	ldr	r0, [r7, #20]
 8009584:	f002 ff12 	bl	800c3ac <pbuf_free>
          goto icmperr;
 8009588:	e096      	b.n	80096b8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009592:	4618      	mov	r0, r3
 8009594:	f008 ffd3 	bl	801253e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800959a:	4619      	mov	r1, r3
 800959c:	6978      	ldr	r0, [r7, #20]
 800959e:	f002 fe7f 	bl	800c2a0 <pbuf_remove_header>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80095a8:	4b49      	ldr	r3, [pc, #292]	; (80096d0 <icmp_input+0x230>)
 80095aa:	22b6      	movs	r2, #182	; 0xb6
 80095ac:	4949      	ldr	r1, [pc, #292]	; (80096d4 <icmp_input+0x234>)
 80095ae:	484a      	ldr	r0, [pc, #296]	; (80096d8 <icmp_input+0x238>)
 80095b0:	f008 feea 	bl	8012388 <iprintf>
          pbuf_free(r);
 80095b4:	6978      	ldr	r0, [r7, #20]
 80095b6:	f002 fef9 	bl	800c3ac <pbuf_free>
          goto icmperr;
 80095ba:	e07d      	b.n	80096b8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	6978      	ldr	r0, [r7, #20]
 80095c0:	f003 f80c 	bl	800c5dc <pbuf_copy>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f002 feee 	bl	800c3ac <pbuf_free>
          goto icmperr;
 80095d0:	e072      	b.n	80096b8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f002 feea 	bl	800c3ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	607b      	str	r3, [r7, #4]
 80095dc:	e00f      	b.n	80095fe <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80095de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095e0:	330e      	adds	r3, #14
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f002 fe5b 	bl	800c2a0 <pbuf_remove_header>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80095f0:	4b37      	ldr	r3, [pc, #220]	; (80096d0 <icmp_input+0x230>)
 80095f2:	22c7      	movs	r2, #199	; 0xc7
 80095f4:	4939      	ldr	r1, [pc, #228]	; (80096dc <icmp_input+0x23c>)
 80095f6:	4838      	ldr	r0, [pc, #224]	; (80096d8 <icmp_input+0x238>)
 80095f8:	f008 fec6 	bl	8012388 <iprintf>
          goto icmperr;
 80095fc:	e05c      	b.n	80096b8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f002 fe39 	bl	800c280 <pbuf_add_header>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d13c      	bne.n	800968e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8009622:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <icmp_input+0x228>)
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	885b      	ldrh	r3, [r3, #2]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800963a:	4293      	cmp	r3, r2
 800963c:	d907      	bls.n	800964e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	b29b      	uxth	r3, r3
 8009644:	3309      	adds	r3, #9
 8009646:	b29a      	uxth	r2, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	805a      	strh	r2, [r3, #2]
 800964c:	e006      	b.n	800965c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	b29b      	uxth	r3, r3
 8009654:	3308      	adds	r3, #8
 8009656:	b29a      	uxth	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	22ff      	movs	r2, #255	; 0xff
 8009660:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	729a      	strb	r2, [r3, #10]
 8009668:	2200      	movs	r2, #0
 800966a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	9302      	str	r3, [sp, #8]
 8009670:	2301      	movs	r3, #1
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	2300      	movs	r3, #0
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	23ff      	movs	r3, #255	; 0xff
 800967a:	2200      	movs	r2, #0
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fb52 	bl	8009d28 <ip4_output_if>
 8009684:	4603      	mov	r3, r0
 8009686:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009688:	e001      	b.n	800968e <icmp_input+0x1ee>
      break;
 800968a:	bf00      	nop
 800968c:	e000      	b.n	8009690 <icmp_input+0x1f0>
      break;
 800968e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f002 fe8b 	bl	800c3ac <pbuf_free>
  return;
 8009696:	e013      	b.n	80096c0 <icmp_input+0x220>
    goto lenerr;
 8009698:	bf00      	nop
 800969a:	e002      	b.n	80096a2 <icmp_input+0x202>
    goto lenerr;
 800969c:	bf00      	nop
 800969e:	e000      	b.n	80096a2 <icmp_input+0x202>
        goto lenerr;
 80096a0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f002 fe82 	bl	800c3ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80096a8:	e00a      	b.n	80096c0 <icmp_input+0x220>
        goto icmperr;
 80096aa:	bf00      	nop
 80096ac:	e004      	b.n	80096b8 <icmp_input+0x218>
        goto icmperr;
 80096ae:	bf00      	nop
 80096b0:	e002      	b.n	80096b8 <icmp_input+0x218>
          goto icmperr;
 80096b2:	bf00      	nop
 80096b4:	e000      	b.n	80096b8 <icmp_input+0x218>
          goto icmperr;
 80096b6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 fe77 	bl	800c3ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80096be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	240052fc 	.word	0x240052fc
 80096cc:	24005310 	.word	0x24005310
 80096d0:	080135c4 	.word	0x080135c4
 80096d4:	0801364c 	.word	0x0801364c
 80096d8:	08013684 	.word	0x08013684
 80096dc:	080136ac 	.word	0x080136ac

080096e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	461a      	mov	r2, r3
 80096f0:	2103      	movs	r1, #3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f814 	bl	8009720 <icmp_send_response>
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	461a      	mov	r2, r3
 8009710:	210b      	movs	r1, #11
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f804 	bl	8009720 <icmp_send_response>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	; 0x30
 8009724:	af04      	add	r7, sp, #16
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
 800972c:	4613      	mov	r3, r2
 800972e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009730:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009734:	2124      	movs	r1, #36	; 0x24
 8009736:	2022      	movs	r0, #34	; 0x22
 8009738:	f002 fb54 	bl	800bde4 <pbuf_alloc>
 800973c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d056      	beq.n	80097f2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	895b      	ldrh	r3, [r3, #10]
 8009748:	2b23      	cmp	r3, #35	; 0x23
 800974a:	d806      	bhi.n	800975a <icmp_send_response+0x3a>
 800974c:	4b2b      	ldr	r3, [pc, #172]	; (80097fc <icmp_send_response+0xdc>)
 800974e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009752:	492b      	ldr	r1, [pc, #172]	; (8009800 <icmp_send_response+0xe0>)
 8009754:	482b      	ldr	r0, [pc, #172]	; (8009804 <icmp_send_response+0xe4>)
 8009756:	f008 fe17 	bl	8012388 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	78ba      	ldrb	r2, [r7, #2]
 8009770:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2200      	movs	r2, #0
 8009776:	711a      	strb	r2, [r3, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2200      	movs	r2, #0
 8009780:	719a      	strb	r2, [r3, #6]
 8009782:	2200      	movs	r2, #0
 8009784:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f103 0008 	add.w	r0, r3, #8
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	221c      	movs	r2, #28
 8009794:	4619      	mov	r1, r3
 8009796:	f008 fed2 	bl	801253e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f901 	bl	80099ac <ip4_route>
 80097aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d01b      	beq.n	80097ea <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2200      	movs	r2, #0
 80097b6:	709a      	strb	r2, [r3, #2]
 80097b8:	2200      	movs	r2, #0
 80097ba:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	895b      	ldrh	r3, [r3, #10]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6978      	ldr	r0, [r7, #20]
 80097c4:	f000 f87d 	bl	80098c2 <inet_chksum>
 80097c8:	4603      	mov	r3, r0
 80097ca:	461a      	mov	r2, r3
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80097d0:	f107 020c 	add.w	r2, r7, #12
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	9302      	str	r3, [sp, #8]
 80097d8:	2301      	movs	r3, #1
 80097da:	9301      	str	r3, [sp, #4]
 80097dc:	2300      	movs	r3, #0
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	23ff      	movs	r3, #255	; 0xff
 80097e2:	2100      	movs	r1, #0
 80097e4:	69f8      	ldr	r0, [r7, #28]
 80097e6:	f000 fa9f 	bl	8009d28 <ip4_output_if>
  }
  pbuf_free(q);
 80097ea:	69f8      	ldr	r0, [r7, #28]
 80097ec:	f002 fdde 	bl	800c3ac <pbuf_free>
 80097f0:	e000      	b.n	80097f4 <icmp_send_response+0xd4>
    return;
 80097f2:	bf00      	nop
}
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	080135c4 	.word	0x080135c4
 8009800:	080136e0 	.word	0x080136e0
 8009804:	08013684 	.word	0x08013684

08009808 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009808:	b480      	push	{r7}
 800980a:	b089      	sub	sp, #36	; 0x24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00d      	beq.n	8009848 <lwip_standard_chksum+0x40>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	dd0a      	ble.n	8009848 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	1c53      	adds	r3, r2, #1
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	f107 030e 	add.w	r3, r7, #14
 800983c:	3301      	adds	r3, #1
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	701a      	strb	r2, [r3, #0]
    len--;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	3b01      	subs	r3, #1
 8009846:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800984c:	e00a      	b.n	8009864 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	1c9a      	adds	r2, r3, #2
 8009852:	61ba      	str	r2, [r7, #24]
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	3b02      	subs	r3, #2
 8009862:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b01      	cmp	r3, #1
 8009868:	dcf1      	bgt.n	800984e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	dd04      	ble.n	800987a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009870:	f107 030e 	add.w	r3, r7, #14
 8009874:	69ba      	ldr	r2, [r7, #24]
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800987a:	89fb      	ldrh	r3, [r7, #14]
 800987c:	461a      	mov	r2, r3
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	4413      	add	r3, r2
 8009882:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	0c1a      	lsrs	r2, r3, #16
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	b29b      	uxth	r3, r3
 800988c:	4413      	add	r3, r2
 800988e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	0c1a      	lsrs	r2, r3, #16
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	b29b      	uxth	r3, r3
 8009898:	4413      	add	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	4313      	orrs	r3, r2
 80098b0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	b29b      	uxth	r3, r3
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3724      	adds	r7, #36	; 0x24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80098ce:	887b      	ldrh	r3, [r7, #2]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff ff98 	bl	8009808 <lwip_standard_chksum>
 80098d8:	4603      	mov	r3, r0
 80098da:	43db      	mvns	r3, r3
 80098dc:	b29b      	uxth	r3, r3
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b086      	sub	sp, #24
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	e02b      	b.n	8009954 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	895b      	ldrh	r3, [r3, #10]
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7ff ff7e 	bl	8009808 <lwip_standard_chksum>
 800990c:	4603      	mov	r3, r0
 800990e:	461a      	mov	r2, r3
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	4413      	add	r3, r2
 8009914:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	0c1a      	lsrs	r2, r3, #16
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	b29b      	uxth	r3, r3
 800991e:	4413      	add	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	895b      	ldrh	r3, [r3, #10]
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	b29b      	uxth	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00e      	beq.n	800994e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	bf0c      	ite	eq
 8009936:	2301      	moveq	r3, #1
 8009938:	2300      	movne	r3, #0
 800993a:	b2db      	uxtb	r3, r3
 800993c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	021b      	lsls	r3, r3, #8
 8009942:	b29a      	uxth	r2, r3
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	b2db      	uxtb	r3, r3
 800994a:	4313      	orrs	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	613b      	str	r3, [r7, #16]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1d0      	bne.n	80098fc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	b29a      	uxth	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	0a1b      	lsrs	r3, r3, #8
 800996a:	b2db      	uxtb	r3, r3
 800996c:	4313      	orrs	r3, r2
 800996e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	b29b      	uxth	r3, r3
 8009974:	43db      	mvns	r3, r3
 8009976:	b29b      	uxth	r3, r3
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800998a:	f001 f9eb 	bl	800ad64 <mem_init>
  memp_init();
 800998e:	f001 fced 	bl	800b36c <memp_init>
  pbuf_init();
  netif_init();
 8009992:	f001 fdeb 	bl	800b56c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009996:	f008 fa3d 	bl	8011e14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800999a:	f002 ff95 	bl	800c8c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800999e:	f008 f9af 	bl	8011d00 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80099b4:	4b33      	ldr	r3, [pc, #204]	; (8009a84 <ip4_route+0xd8>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	e036      	b.n	8009a2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d02b      	beq.n	8009a24 <ip4_route+0x78>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d022      	beq.n	8009a24 <ip4_route+0x78>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	3304      	adds	r3, #4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d01d      	beq.n	8009a24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3304      	adds	r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	405a      	eors	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3308      	adds	r3, #8
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4013      	ands	r3, r2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	e038      	b.n	8009a76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d108      	bne.n	8009a24 <ip4_route+0x78>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	330c      	adds	r3, #12
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d101      	bne.n	8009a24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	e028      	b.n	8009a76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1c5      	bne.n	80099bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009a30:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <ip4_route+0xdc>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01a      	beq.n	8009a6e <ip4_route+0xc2>
 8009a38:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <ip4_route+0xdc>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d012      	beq.n	8009a6e <ip4_route+0xc2>
 8009a48:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <ip4_route+0xdc>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00a      	beq.n	8009a6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <ip4_route+0xdc>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d004      	beq.n	8009a6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a6c:	d101      	bne.n	8009a72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e001      	b.n	8009a76 <ip4_route+0xca>
  }

  return netif_default;
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <ip4_route+0xdc>)
 8009a74:	681b      	ldr	r3, [r3, #0]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	2400821c 	.word	0x2400821c
 8009a88:	24008220 	.word	0x24008220

08009a8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d016      	beq.n	8009ad2 <ip4_input_accept+0x46>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <ip4_input_accept+0x50>)
 8009ab0:	695a      	ldr	r2, [r3, #20]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d008      	beq.n	8009ace <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009abc:	4b07      	ldr	r3, [pc, #28]	; (8009adc <ip4_input_accept+0x50>)
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fa08 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8009ac8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e000      	b.n	8009ad4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	240052fc 	.word	0x240052fc

08009ae0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	091b      	lsrs	r3, r3, #4
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	d004      	beq.n	8009b06 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f002 fc55 	bl	800c3ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	e107      	b.n	8009d16 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	885b      	ldrh	r3, [r3, #2]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fc6f 	bl	8008400 <lwip_htons>
 8009b22:	4603      	mov	r3, r0
 8009b24:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	891b      	ldrh	r3, [r3, #8]
 8009b2a:	89ba      	ldrh	r2, [r7, #12]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d204      	bcs.n	8009b3a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009b30:	89bb      	ldrh	r3, [r7, #12]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f002 fab3 	bl	800c0a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	895b      	ldrh	r3, [r3, #10]
 8009b3e:	89fa      	ldrh	r2, [r7, #14]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d807      	bhi.n	8009b54 <ip4_input+0x74>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	891b      	ldrh	r3, [r3, #8]
 8009b48:	89ba      	ldrh	r2, [r7, #12]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d802      	bhi.n	8009b54 <ip4_input+0x74>
 8009b4e:	89fb      	ldrh	r3, [r7, #14]
 8009b50:	2b13      	cmp	r3, #19
 8009b52:	d804      	bhi.n	8009b5e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f002 fc29 	bl	800c3ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e0db      	b.n	8009d16 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	4a6f      	ldr	r2, [pc, #444]	; (8009d20 <ip4_input+0x240>)
 8009b64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	4a6d      	ldr	r2, [pc, #436]	; (8009d20 <ip4_input+0x240>)
 8009b6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009b6e:	4b6c      	ldr	r3, [pc, #432]	; (8009d20 <ip4_input+0x240>)
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b76:	2be0      	cmp	r3, #224	; 0xe0
 8009b78:	d112      	bne.n	8009ba0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d007      	beq.n	8009b9a <ip4_input+0xba>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <ip4_input+0xba>
      netif = inp;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	613b      	str	r3, [r7, #16]
 8009b98:	e02a      	b.n	8009bf0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	e027      	b.n	8009bf0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009ba0:	6838      	ldr	r0, [r7, #0]
 8009ba2:	f7ff ff73 	bl	8009a8c <ip4_input_accept>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <ip4_input+0xd2>
      netif = inp;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	e01e      	b.n	8009bf0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009bb6:	4b5a      	ldr	r3, [pc, #360]	; (8009d20 <ip4_input+0x240>)
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8009bbe:	d017      	beq.n	8009bf0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009bc0:	4b58      	ldr	r3, [pc, #352]	; (8009d24 <ip4_input+0x244>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	613b      	str	r3, [r7, #16]
 8009bc6:	e00e      	b.n	8009be6 <ip4_input+0x106>
          if (netif == inp) {
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d006      	beq.n	8009bde <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009bd0:	6938      	ldr	r0, [r7, #16]
 8009bd2:	f7ff ff5b 	bl	8009a8c <ip4_input_accept>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d108      	bne.n	8009bee <ip4_input+0x10e>
 8009bdc:	e000      	b.n	8009be0 <ip4_input+0x100>
            continue;
 8009bde:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1ed      	bne.n	8009bc8 <ip4_input+0xe8>
 8009bec:	e000      	b.n	8009bf0 <ip4_input+0x110>
            break;
 8009bee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009bf0:	4b4b      	ldr	r3, [pc, #300]	; (8009d20 <ip4_input+0x240>)
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f96e 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009c02:	4b47      	ldr	r3, [pc, #284]	; (8009d20 <ip4_input+0x240>)
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009c0a:	2be0      	cmp	r3, #224	; 0xe0
 8009c0c:	d104      	bne.n	8009c18 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f002 fbcc 	bl	800c3ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e07e      	b.n	8009d16 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d104      	bne.n	8009c28 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f002 fbc4 	bl	800c3ac <pbuf_free>
    return ERR_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e076      	b.n	8009d16 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	88db      	ldrh	r3, [r3, #6]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009c34:	4013      	ands	r3, r2
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fc92 	bl	800a564 <ip4_reass>
 8009c40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <ip4_input+0x16c>
      return ERR_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e064      	b.n	8009d16 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009c52:	4a33      	ldr	r2, [pc, #204]	; (8009d20 <ip4_input+0x240>)
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009c58:	4a31      	ldr	r2, [pc, #196]	; (8009d20 <ip4_input+0x240>)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009c5e:	4a30      	ldr	r2, [pc, #192]	; (8009d20 <ip4_input+0x240>)
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	f003 030f 	and.w	r3, r3, #15
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	4b2a      	ldr	r3, [pc, #168]	; (8009d20 <ip4_input+0x240>)
 8009c76:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009c78:	89fb      	ldrh	r3, [r7, #14]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 fb0f 	bl	800c2a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	7a5b      	ldrb	r3, [r3, #9]
 8009c86:	2b11      	cmp	r3, #17
 8009c88:	d006      	beq.n	8009c98 <ip4_input+0x1b8>
 8009c8a:	2b11      	cmp	r3, #17
 8009c8c:	dc13      	bgt.n	8009cb6 <ip4_input+0x1d6>
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d00c      	beq.n	8009cac <ip4_input+0x1cc>
 8009c92:	2b06      	cmp	r3, #6
 8009c94:	d005      	beq.n	8009ca2 <ip4_input+0x1c2>
 8009c96:	e00e      	b.n	8009cb6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f008 f930 	bl	8011f00 <udp_input>
        break;
 8009ca0:	e026      	b.n	8009cf0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f004 f9a9 	bl	800dffc <tcp_input>
        break;
 8009caa:	e021      	b.n	8009cf0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7ff fbf6 	bl	80094a0 <icmp_input>
        break;
 8009cb4:	e01c      	b.n	8009cf0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <ip4_input+0x240>)
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	6939      	ldr	r1, [r7, #16]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 f90b 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10f      	bne.n	8009ce8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009cc8:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <ip4_input+0x240>)
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009cd0:	2be0      	cmp	r3, #224	; 0xe0
 8009cd2:	d009      	beq.n	8009ce8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009cd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f002 fb53 	bl	800c386 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009ce0:	2102      	movs	r1, #2
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fcfc 	bl	80096e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f002 fb5f 	bl	800c3ac <pbuf_free>
        break;
 8009cee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009cf0:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <ip4_input+0x240>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009cf6:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <ip4_input+0x240>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009cfc:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <ip4_input+0x240>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009d02:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <ip4_input+0x240>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <ip4_input+0x240>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009d0e:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <ip4_input+0x240>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	240052fc 	.word	0x240052fc
 8009d24:	2400821c 	.word	0x2400821c

08009d28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af04      	add	r7, sp, #16
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d009      	beq.n	8009d54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <ip4_output_if+0x26>
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	3304      	adds	r3, #4
 8009d52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	9302      	str	r3, [sp, #8]
 8009d5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f805 	bl	8009d7c <ip4_output_if_src>
 8009d72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	7b9b      	ldrb	r3, [r3, #14]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d006      	beq.n	8009da0 <ip4_output_if_src+0x24>
 8009d92:	4b4b      	ldr	r3, [pc, #300]	; (8009ec0 <ip4_output_if_src+0x144>)
 8009d94:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009d98:	494a      	ldr	r1, [pc, #296]	; (8009ec4 <ip4_output_if_src+0x148>)
 8009d9a:	484b      	ldr	r0, [pc, #300]	; (8009ec8 <ip4_output_if_src+0x14c>)
 8009d9c:	f008 faf4 	bl	8012388 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d060      	beq.n	8009e68 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009da6:	2314      	movs	r3, #20
 8009da8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009daa:	2114      	movs	r1, #20
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f002 fa67 	bl	800c280 <pbuf_add_header>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009db8:	f06f 0301 	mvn.w	r3, #1
 8009dbc:	e07c      	b.n	8009eb8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	895b      	ldrh	r3, [r3, #10]
 8009dc8:	2b13      	cmp	r3, #19
 8009dca:	d806      	bhi.n	8009dda <ip4_output_if_src+0x5e>
 8009dcc:	4b3c      	ldr	r3, [pc, #240]	; (8009ec0 <ip4_output_if_src+0x144>)
 8009dce:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009dd2:	493e      	ldr	r1, [pc, #248]	; (8009ecc <ip4_output_if_src+0x150>)
 8009dd4:	483c      	ldr	r0, [pc, #240]	; (8009ec8 <ip4_output_if_src+0x14c>)
 8009dd6:	f008 fad7 	bl	8012388 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009de6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009df0:	8b7b      	ldrh	r3, [r7, #26]
 8009df2:	089b      	lsrs	r3, r3, #2
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009e08:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	891b      	ldrh	r3, [r3, #8]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe faf6 	bl	8008400 <lwip_htons>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	719a      	strb	r2, [r3, #6]
 8009e22:	2200      	movs	r2, #0
 8009e24:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009e26:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <ip4_output_if_src+0x154>)
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fae8 	bl	8008400 <lwip_htons>
 8009e30:	4603      	mov	r3, r0
 8009e32:	461a      	mov	r2, r3
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <ip4_output_if_src+0x154>)
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <ip4_output_if_src+0x154>)
 8009e42:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d104      	bne.n	8009e54 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009e4a:	4b22      	ldr	r3, [pc, #136]	; (8009ed4 <ip4_output_if_src+0x158>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	60da      	str	r2, [r3, #12]
 8009e52:	e003      	b.n	8009e5c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	729a      	strb	r2, [r3, #10]
 8009e62:	2200      	movs	r2, #0
 8009e64:	72da      	strb	r2, [r3, #11]
 8009e66:	e00f      	b.n	8009e88 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	895b      	ldrh	r3, [r3, #10]
 8009e6c:	2b13      	cmp	r3, #19
 8009e6e:	d802      	bhi.n	8009e76 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009e70:	f06f 0301 	mvn.w	r3, #1
 8009e74:	e020      	b.n	8009eb8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8009e82:	f107 0314 	add.w	r3, r7, #20
 8009e86:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00c      	beq.n	8009eaa <ip4_output_if_src+0x12e>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	891a      	ldrh	r2, [r3, #8]
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d906      	bls.n	8009eaa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 fd53 	bl	800a94c <ip4_frag>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	e006      	b.n	8009eb8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb4:	4798      	blx	r3
 8009eb6:	4603      	mov	r3, r0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3720      	adds	r7, #32
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	0801370c 	.word	0x0801370c
 8009ec4:	08013794 	.word	0x08013794
 8009ec8:	080137a0 	.word	0x080137a0
 8009ecc:	080137c8 	.word	0x080137c8
 8009ed0:	24005314 	.word	0x24005314
 8009ed4:	080160c0 	.word	0x080160c0

08009ed8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eec:	d002      	beq.n	8009ef4 <ip4_addr_isbroadcast_u32+0x1c>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e02a      	b.n	8009f4e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e021      	b.n	8009f4e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d101      	bne.n	8009f1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e019      	b.n	8009f4e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	405a      	eors	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	3308      	adds	r3, #8
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10d      	bne.n	8009f4c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	43da      	mvns	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d101      	bne.n	8009f4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009f4c:	2300      	movs	r3, #0
  }
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009f66:	4b12      	ldr	r3, [pc, #72]	; (8009fb0 <ip_reass_tmr+0x54>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009f6c:	e018      	b.n	8009fa0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	7fdb      	ldrb	r3, [r3, #31]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00b      	beq.n	8009f8e <ip_reass_tmr+0x32>
      r->timer--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	7fdb      	ldrb	r3, [r3, #31]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e008      	b.n	8009fa0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f80a 	bl	8009fb4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e3      	bne.n	8009f6e <ip_reass_tmr+0x12>
    }
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	24005318 	.word	0x24005318

08009fb4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d105      	bne.n	8009fd6 <ip_reass_free_complete_datagram+0x22>
 8009fca:	4b45      	ldr	r3, [pc, #276]	; (800a0e0 <ip_reass_free_complete_datagram+0x12c>)
 8009fcc:	22ab      	movs	r2, #171	; 0xab
 8009fce:	4945      	ldr	r1, [pc, #276]	; (800a0e4 <ip_reass_free_complete_datagram+0x130>)
 8009fd0:	4845      	ldr	r0, [pc, #276]	; (800a0e8 <ip_reass_free_complete_datagram+0x134>)
 8009fd2:	f008 f9d9 	bl	8012388 <iprintf>
  if (prev != NULL) {
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d005      	beq.n	8009ff2 <ip_reass_free_complete_datagram+0x3e>
 8009fe6:	4b3e      	ldr	r3, [pc, #248]	; (800a0e0 <ip_reass_free_complete_datagram+0x12c>)
 8009fe8:	22ad      	movs	r2, #173	; 0xad
 8009fea:	4940      	ldr	r1, [pc, #256]	; (800a0ec <ip_reass_free_complete_datagram+0x138>)
 8009fec:	483e      	ldr	r0, [pc, #248]	; (800a0e8 <ip_reass_free_complete_datagram+0x134>)
 8009fee:	f008 f9cb 	bl	8012388 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	889b      	ldrh	r3, [r3, #4]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d12a      	bne.n	800a05a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	6858      	ldr	r0, [r3, #4]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3308      	adds	r3, #8
 800a01a:	2214      	movs	r2, #20
 800a01c:	4619      	mov	r1, r3
 800a01e:	f008 fa8e 	bl	801253e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a022:	2101      	movs	r1, #1
 800a024:	69b8      	ldr	r0, [r7, #24]
 800a026:	f7ff fb6b 	bl	8009700 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a02a:	69b8      	ldr	r0, [r7, #24]
 800a02c:	f002 fa46 	bl	800c4bc <pbuf_clen>
 800a030:	4603      	mov	r3, r0
 800a032:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a034:	8bfa      	ldrh	r2, [r7, #30]
 800a036:	8a7b      	ldrh	r3, [r7, #18]
 800a038:	4413      	add	r3, r2
 800a03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03e:	db05      	blt.n	800a04c <ip_reass_free_complete_datagram+0x98>
 800a040:	4b27      	ldr	r3, [pc, #156]	; (800a0e0 <ip_reass_free_complete_datagram+0x12c>)
 800a042:	22bc      	movs	r2, #188	; 0xbc
 800a044:	492a      	ldr	r1, [pc, #168]	; (800a0f0 <ip_reass_free_complete_datagram+0x13c>)
 800a046:	4828      	ldr	r0, [pc, #160]	; (800a0e8 <ip_reass_free_complete_datagram+0x134>)
 800a048:	f008 f99e 	bl	8012388 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a04c:	8bfa      	ldrh	r2, [r7, #30]
 800a04e:	8a7b      	ldrh	r3, [r7, #18]
 800a050:	4413      	add	r3, r2
 800a052:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a054:	69b8      	ldr	r0, [r7, #24]
 800a056:	f002 f9a9 	bl	800c3ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a060:	e01f      	b.n	800a0a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f002 fa22 	bl	800c4bc <pbuf_clen>
 800a078:	4603      	mov	r3, r0
 800a07a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a07c:	8bfa      	ldrh	r2, [r7, #30]
 800a07e:	8a7b      	ldrh	r3, [r7, #18]
 800a080:	4413      	add	r3, r2
 800a082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a086:	db05      	blt.n	800a094 <ip_reass_free_complete_datagram+0xe0>
 800a088:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <ip_reass_free_complete_datagram+0x12c>)
 800a08a:	22cc      	movs	r2, #204	; 0xcc
 800a08c:	4918      	ldr	r1, [pc, #96]	; (800a0f0 <ip_reass_free_complete_datagram+0x13c>)
 800a08e:	4816      	ldr	r0, [pc, #88]	; (800a0e8 <ip_reass_free_complete_datagram+0x134>)
 800a090:	f008 f97a 	bl	8012388 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a094:	8bfa      	ldrh	r2, [r7, #30]
 800a096:	8a7b      	ldrh	r3, [r7, #18]
 800a098:	4413      	add	r3, r2
 800a09a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f002 f985 	bl	800c3ac <pbuf_free>
  while (p != NULL) {
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1dc      	bne.n	800a062 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8c2 	bl	800a234 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a0b0:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <ip_reass_free_complete_datagram+0x140>)
 800a0b2:	881b      	ldrh	r3, [r3, #0]
 800a0b4:	8bfa      	ldrh	r2, [r7, #30]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d905      	bls.n	800a0c6 <ip_reass_free_complete_datagram+0x112>
 800a0ba:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <ip_reass_free_complete_datagram+0x12c>)
 800a0bc:	22d2      	movs	r2, #210	; 0xd2
 800a0be:	490e      	ldr	r1, [pc, #56]	; (800a0f8 <ip_reass_free_complete_datagram+0x144>)
 800a0c0:	4809      	ldr	r0, [pc, #36]	; (800a0e8 <ip_reass_free_complete_datagram+0x134>)
 800a0c2:	f008 f961 	bl	8012388 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a0c6:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <ip_reass_free_complete_datagram+0x140>)
 800a0c8:	881a      	ldrh	r2, [r3, #0]
 800a0ca:	8bfb      	ldrh	r3, [r7, #30]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <ip_reass_free_complete_datagram+0x140>)
 800a0d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a0d4:	8bfb      	ldrh	r3, [r7, #30]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3720      	adds	r7, #32
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	080137f8 	.word	0x080137f8
 800a0e4:	08013884 	.word	0x08013884
 800a0e8:	08013890 	.word	0x08013890
 800a0ec:	080138b8 	.word	0x080138b8
 800a0f0:	080138cc 	.word	0x080138cc
 800a0f4:	2400531c 	.word	0x2400531c
 800a0f8:	080138ec 	.word	0x080138ec

0800a0fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	; 0x28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a11a:	4b28      	ldr	r3, [pc, #160]	; (800a1bc <ip_reass_remove_oldest_datagram+0xc0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a120:	e030      	b.n	800a184 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	695a      	ldr	r2, [r3, #20]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d10c      	bne.n	800a148 <ip_reass_remove_oldest_datagram+0x4c>
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	429a      	cmp	r2, r3
 800a138:	d106      	bne.n	800a148 <ip_reass_remove_oldest_datagram+0x4c>
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	899a      	ldrh	r2, [r3, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	889b      	ldrh	r3, [r3, #4]
 800a142:	b29b      	uxth	r3, r3
 800a144:	429a      	cmp	r2, r3
 800a146:	d014      	beq.n	800a172 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	3301      	adds	r3, #1
 800a14c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d104      	bne.n	800a15e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	61bb      	str	r3, [r7, #24]
 800a15c:	e009      	b.n	800a172 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	7fda      	ldrb	r2, [r3, #31]
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	7fdb      	ldrb	r3, [r3, #31]
 800a166:	429a      	cmp	r2, r3
 800a168:	d803      	bhi.n	800a172 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1cb      	bne.n	800a122 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d008      	beq.n	800a1a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a190:	69b9      	ldr	r1, [r7, #24]
 800a192:	6a38      	ldr	r0, [r7, #32]
 800a194:	f7ff ff0e 	bl	8009fb4 <ip_reass_free_complete_datagram>
 800a198:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	da02      	bge.n	800a1b0 <ip_reass_remove_oldest_datagram+0xb4>
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	dcac      	bgt.n	800a10a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a1b0:	697b      	ldr	r3, [r7, #20]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3728      	adds	r7, #40	; 0x28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	24005318 	.word	0x24005318

0800a1c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a1ca:	2004      	movs	r0, #4
 800a1cc:	f001 f934 	bl	800b438 <memp_malloc>
 800a1d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d110      	bne.n	800a1fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff ff8e 	bl	800a0fc <ip_reass_remove_oldest_datagram>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	dc03      	bgt.n	800a1f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a1e8:	2004      	movs	r0, #4
 800a1ea:	f001 f925 	bl	800b438 <memp_malloc>
 800a1ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e016      	b.n	800a228 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f008 f927 	bl	8012452 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	220f      	movs	r2, #15
 800a208:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <ip_reass_enqueue_new_datagram+0x70>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a212:	4a07      	ldr	r2, [pc, #28]	; (800a230 <ip_reass_enqueue_new_datagram+0x70>)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3308      	adds	r3, #8
 800a21c:	2214      	movs	r2, #20
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	f008 f98c 	bl	801253e <memcpy>
  return ipr;
 800a226:	68fb      	ldr	r3, [r7, #12]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	24005318 	.word	0x24005318

0800a234 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a23e:	4b10      	ldr	r3, [pc, #64]	; (800a280 <ip_reass_dequeue_datagram+0x4c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d104      	bne.n	800a252 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a0c      	ldr	r2, [pc, #48]	; (800a280 <ip_reass_dequeue_datagram+0x4c>)
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	e00d      	b.n	800a26e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d106      	bne.n	800a266 <ip_reass_dequeue_datagram+0x32>
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <ip_reass_dequeue_datagram+0x50>)
 800a25a:	f240 1245 	movw	r2, #325	; 0x145
 800a25e:	490a      	ldr	r1, [pc, #40]	; (800a288 <ip_reass_dequeue_datagram+0x54>)
 800a260:	480a      	ldr	r0, [pc, #40]	; (800a28c <ip_reass_dequeue_datagram+0x58>)
 800a262:	f008 f891 	bl	8012388 <iprintf>
    prev->next = ipr->next;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	2004      	movs	r0, #4
 800a272:	f001 f951 	bl	800b518 <memp_free>
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	24005318 	.word	0x24005318
 800a284:	080137f8 	.word	0x080137f8
 800a288:	08013910 	.word	0x08013910
 800a28c:	08013890 	.word	0x08013890

0800a290 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08c      	sub	sp, #48	; 0x30
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	885b      	ldrh	r3, [r3, #2]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe f8a5 	bl	8008400 <lwip_htons>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a2c8:	7e7b      	ldrb	r3, [r7, #25]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	8b7a      	ldrh	r2, [r7, #26]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d202      	bcs.n	800a2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d6:	e135      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a2d8:	7e7b      	ldrb	r3, [r7, #25]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	8b7a      	ldrh	r2, [r7, #26]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	88db      	ldrh	r3, [r3, #6]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe f889 	bl	8008400 <lwip_htons>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a302:	2200      	movs	r2, #0
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	2200      	movs	r2, #0
 800a308:	705a      	strb	r2, [r3, #1]
 800a30a:	2200      	movs	r2, #0
 800a30c:	709a      	strb	r2, [r3, #2]
 800a30e:	2200      	movs	r2, #0
 800a310:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	8afa      	ldrh	r2, [r7, #22]
 800a316:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a318:	8afa      	ldrh	r2, [r7, #22]
 800a31a:	8b7b      	ldrh	r3, [r7, #26]
 800a31c:	4413      	add	r3, r2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	88db      	ldrh	r3, [r3, #6]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	8afa      	ldrh	r2, [r7, #22]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d902      	bls.n	800a336 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	e106      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
 800a33c:	e068      	b.n	800a410 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	889b      	ldrh	r3, [r3, #4]
 800a348:	b29a      	uxth	r2, r3
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	889b      	ldrh	r3, [r3, #4]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	429a      	cmp	r2, r3
 800a352:	d235      	bcs.n	800a3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a358:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d020      	beq.n	800a3a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a362:	889b      	ldrh	r3, [r3, #4]
 800a364:	b29a      	uxth	r2, r3
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	88db      	ldrh	r3, [r3, #6]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d307      	bcc.n	800a380 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	88db      	ldrh	r3, [r3, #6]
 800a374:	b29a      	uxth	r2, r3
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	889b      	ldrh	r3, [r3, #4]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d902      	bls.n	800a386 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
 800a384:	e0de      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	88db      	ldrh	r3, [r3, #6]
 800a390:	b29a      	uxth	r2, r3
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	889b      	ldrh	r3, [r3, #4]
 800a396:	b29b      	uxth	r3, r3
 800a398:	429a      	cmp	r2, r3
 800a39a:	d03d      	beq.n	800a418 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a3a0:	e03a      	b.n	800a418 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	88db      	ldrh	r3, [r3, #6]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	889b      	ldrh	r3, [r3, #4]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d902      	bls.n	800a3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	e0c5      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	605a      	str	r2, [r3, #4]
      break;
 800a3be:	e02b      	b.n	800a418 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	889b      	ldrh	r3, [r3, #4]
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	889b      	ldrh	r3, [r3, #4]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d102      	bne.n	800a3d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d4:	e0b6      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	889b      	ldrh	r3, [r3, #4]
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	88db      	ldrh	r3, [r3, #6]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d202      	bcs.n	800a3ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ea:	e0ab      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d009      	beq.n	800a406 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	889b      	ldrh	r3, [r3, #4]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d001      	beq.n	800a406 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	2b00      	cmp	r3, #0
 800a414:	d193      	bne.n	800a33e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a416:	e000      	b.n	800a41a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a418:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d12d      	bne.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01c      	beq.n	800a460 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	88db      	ldrh	r3, [r3, #6]
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	889b      	ldrh	r3, [r3, #4]
 800a430:	b29b      	uxth	r3, r3
 800a432:	429a      	cmp	r2, r3
 800a434:	d906      	bls.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a436:	4b45      	ldr	r3, [pc, #276]	; (800a54c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a438:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a43c:	4944      	ldr	r1, [pc, #272]	; (800a550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a43e:	4845      	ldr	r0, [pc, #276]	; (800a554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a440:	f007 ffa2 	bl	8012388 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	88db      	ldrh	r3, [r3, #6]
 800a44e:	b29a      	uxth	r2, r3
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	889b      	ldrh	r3, [r3, #4]
 800a454:	b29b      	uxth	r3, r3
 800a456:	429a      	cmp	r2, r3
 800a458:	d010      	beq.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	623b      	str	r3, [r7, #32]
 800a45e:	e00d      	b.n	800a47c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d006      	beq.n	800a476 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a468:	4b38      	ldr	r3, [pc, #224]	; (800a54c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a46a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a46e:	493a      	ldr	r1, [pc, #232]	; (800a558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a470:	4838      	ldr	r0, [pc, #224]	; (800a554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a472:	f007 ff89 	bl	8012388 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d105      	bne.n	800a48e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	7f9b      	ldrb	r3, [r3, #30]
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d059      	beq.n	800a542 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d04f      	beq.n	800a534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d006      	beq.n	800a4aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	889b      	ldrh	r3, [r3, #4]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	623b      	str	r3, [r7, #32]
 800a4ae:	e041      	b.n	800a534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a4ba:	e012      	b.n	800a4e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	88db      	ldrh	r3, [r3, #6]
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ca:	889b      	ldrh	r3, [r3, #4]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d002      	beq.n	800a4d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	623b      	str	r3, [r7, #32]
            break;
 800a4d6:	e007      	b.n	800a4e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e9      	bne.n	800a4bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d022      	beq.n	800a534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a4f6:	4b15      	ldr	r3, [pc, #84]	; (800a54c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a4f8:	f240 12df 	movw	r2, #479	; 0x1df
 800a4fc:	4917      	ldr	r1, [pc, #92]	; (800a55c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a4fe:	4815      	ldr	r0, [pc, #84]	; (800a554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a500:	f007 ff42 	bl	8012388 <iprintf>
          LWIP_ASSERT("sanity check",
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d106      	bne.n	800a51e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a510:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a512:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a516:	4911      	ldr	r1, [pc, #68]	; (800a55c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a518:	480e      	ldr	r0, [pc, #56]	; (800a554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a51a:	f007 ff35 	bl	8012388 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d006      	beq.n	800a534 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a528:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a52c:	490c      	ldr	r1, [pc, #48]	; (800a560 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a52e:	4809      	ldr	r0, [pc, #36]	; (800a554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a530:	f007 ff2a 	bl	8012388 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	2b00      	cmp	r3, #0
 800a538:	bf14      	ite	ne
 800a53a:	2301      	movne	r3, #1
 800a53c:	2300      	moveq	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	e000      	b.n	800a544 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3730      	adds	r7, #48	; 0x30
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	080137f8 	.word	0x080137f8
 800a550:	0801392c 	.word	0x0801392c
 800a554:	08013890 	.word	0x08013890
 800a558:	0801394c 	.word	0x0801394c
 800a55c:	08013984 	.word	0x08013984
 800a560:	08013994 	.word	0x08013994

0800a564 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b08e      	sub	sp, #56	; 0x38
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	f003 030f 	and.w	r3, r3, #15
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b14      	cmp	r3, #20
 800a582:	f040 8171 	bne.w	800a868 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	88db      	ldrh	r3, [r3, #6]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fd ff37 	bl	8008400 <lwip_htons>
 800a592:	4603      	mov	r3, r0
 800a594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a598:	b29b      	uxth	r3, r3
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a0:	885b      	ldrh	r3, [r3, #2]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd ff2b 	bl	8008400 <lwip_htons>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a5be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	f0c0 8150 	bcc.w	800a86c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a5cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 ff6f 	bl	800c4bc <pbuf_clen>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a5e2:	4b8c      	ldr	r3, [pc, #560]	; (800a814 <ip4_reass+0x2b0>)
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	8c3b      	ldrh	r3, [r7, #32]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	2b0a      	cmp	r3, #10
 800a5ee:	dd10      	ble.n	800a612 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a5f0:	8c3b      	ldrh	r3, [r7, #32]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f6:	f7ff fd81 	bl	800a0fc <ip_reass_remove_oldest_datagram>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 8137 	beq.w	800a870 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a602:	4b84      	ldr	r3, [pc, #528]	; (800a814 <ip4_reass+0x2b0>)
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	8c3b      	ldrh	r3, [r7, #32]
 800a60a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a60c:	2b0a      	cmp	r3, #10
 800a60e:	f300 812f 	bgt.w	800a870 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a612:	4b81      	ldr	r3, [pc, #516]	; (800a818 <ip4_reass+0x2b4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	633b      	str	r3, [r7, #48]	; 0x30
 800a618:	e015      	b.n	800a646 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	695a      	ldr	r2, [r3, #20]
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	429a      	cmp	r2, r3
 800a624:	d10c      	bne.n	800a640 <ip4_reass+0xdc>
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d106      	bne.n	800a640 <ip4_reass+0xdc>
 800a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a634:	899a      	ldrh	r2, [r3, #12]
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	889b      	ldrh	r3, [r3, #4]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d006      	beq.n	800a64e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	633b      	str	r3, [r7, #48]	; 0x30
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <ip4_reass+0xb6>
 800a64c:	e000      	b.n	800a650 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a64e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	2b00      	cmp	r3, #0
 800a654:	d109      	bne.n	800a66a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a656:	8c3b      	ldrh	r3, [r7, #32]
 800a658:	4619      	mov	r1, r3
 800a65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65c:	f7ff fdb0 	bl	800a1c0 <ip_reass_enqueue_new_datagram>
 800a660:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	2b00      	cmp	r3, #0
 800a666:	d11c      	bne.n	800a6a2 <ip4_reass+0x13e>
      goto nullreturn;
 800a668:	e105      	b.n	800a876 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	88db      	ldrh	r3, [r3, #6]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd fec5 	bl	8008400 <lwip_htons>
 800a676:	4603      	mov	r3, r0
 800a678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d110      	bne.n	800a6a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	89db      	ldrh	r3, [r3, #14]
 800a684:	4618      	mov	r0, r3
 800a686:	f7fd febb 	bl	8008400 <lwip_htons>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a690:	2b00      	cmp	r3, #0
 800a692:	d006      	beq.n	800a6a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3308      	adds	r3, #8
 800a698:	2214      	movs	r2, #20
 800a69a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a69c:	4618      	mov	r0, r3
 800a69e:	f007 ff4e 	bl	801253e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	88db      	ldrh	r3, [r3, #6]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	f003 0320 	and.w	r3, r3, #32
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2301      	moveq	r3, #1
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a6be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a6c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6c2:	4413      	add	r3, r2
 800a6c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a6c6:	8b7a      	ldrh	r2, [r7, #26]
 800a6c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	f0c0 80a0 	bcc.w	800a810 <ip4_reass+0x2ac>
 800a6d0:	8b7b      	ldrh	r3, [r7, #26]
 800a6d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	f200 809a 	bhi.w	800a810 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e2:	f7ff fdd5 	bl	800a290 <ip_reass_chain_frag_into_datagram_and_validate>
 800a6e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ee:	f000 809b 	beq.w	800a828 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a6f2:	4b48      	ldr	r3, [pc, #288]	; (800a814 <ip4_reass+0x2b0>)
 800a6f4:	881a      	ldrh	r2, [r3, #0]
 800a6f6:	8c3b      	ldrh	r3, [r7, #32]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	4b45      	ldr	r3, [pc, #276]	; (800a814 <ip4_reass+0x2b0>)
 800a6fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00d      	beq.n	800a722 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a706:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a70a:	4413      	add	r3, r2
 800a70c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	8a7a      	ldrh	r2, [r7, #18]
 800a712:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	7f9b      	ldrb	r3, [r3, #30]
 800a718:	f043 0301 	orr.w	r3, r3, #1
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d171      	bne.n	800a80c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72a:	8b9b      	ldrh	r3, [r3, #28]
 800a72c:	3314      	adds	r3, #20
 800a72e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	3308      	adds	r3, #8
 800a746:	2214      	movs	r2, #20
 800a748:	4619      	mov	r1, r3
 800a74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a74c:	f007 fef7 	bl	801253e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a750:	8a3b      	ldrh	r3, [r7, #16]
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd fe54 	bl	8008400 <lwip_htons>
 800a758:	4603      	mov	r3, r0
 800a75a:	461a      	mov	r2, r3
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	2200      	movs	r2, #0
 800a764:	719a      	strb	r2, [r3, #6]
 800a766:	2200      	movs	r2, #0
 800a768:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	2200      	movs	r2, #0
 800a76e:	729a      	strb	r2, [r3, #10]
 800a770:	2200      	movs	r2, #0
 800a772:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a77a:	e00d      	b.n	800a798 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a782:	2114      	movs	r1, #20
 800a784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a786:	f001 fd8b 	bl	800c2a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a78a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fecf 	bl	800c530 <pbuf_cat>
      r = iprh->next_pbuf;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1ee      	bne.n	800a77c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a79e:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <ip4_reass+0x2b4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d102      	bne.n	800a7ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ac:	e010      	b.n	800a7d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	; (800a818 <ip4_reass+0x2b4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7b4:	e007      	b.n	800a7c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d006      	beq.n	800a7ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1f4      	bne.n	800a7b6 <ip4_reass+0x252>
 800a7cc:	e000      	b.n	800a7d0 <ip4_reass+0x26c>
          break;
 800a7ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a7d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7d4:	f7ff fd2e 	bl	800a234 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 fe6f 	bl	800c4bc <pbuf_clen>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a7e2:	4b0c      	ldr	r3, [pc, #48]	; (800a814 <ip4_reass+0x2b0>)
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	8c3a      	ldrh	r2, [r7, #32]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d906      	bls.n	800a7fa <ip4_reass+0x296>
 800a7ec:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <ip4_reass+0x2b8>)
 800a7ee:	f240 229b 	movw	r2, #667	; 0x29b
 800a7f2:	490b      	ldr	r1, [pc, #44]	; (800a820 <ip4_reass+0x2bc>)
 800a7f4:	480b      	ldr	r0, [pc, #44]	; (800a824 <ip4_reass+0x2c0>)
 800a7f6:	f007 fdc7 	bl	8012388 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a7fa:	4b06      	ldr	r3, [pc, #24]	; (800a814 <ip4_reass+0x2b0>)
 800a7fc:	881a      	ldrh	r2, [r3, #0]
 800a7fe:	8c3b      	ldrh	r3, [r7, #32]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	b29a      	uxth	r2, r3
 800a804:	4b03      	ldr	r3, [pc, #12]	; (800a814 <ip4_reass+0x2b0>)
 800a806:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	e038      	b.n	800a87e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a80c:	2300      	movs	r3, #0
 800a80e:	e036      	b.n	800a87e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800a810:	bf00      	nop
 800a812:	e00a      	b.n	800a82a <ip4_reass+0x2c6>
 800a814:	2400531c 	.word	0x2400531c
 800a818:	24005318 	.word	0x24005318
 800a81c:	080137f8 	.word	0x080137f8
 800a820:	080139b8 	.word	0x080139b8
 800a824:	08013890 	.word	0x08013890
    goto nullreturn_ipr;
 800a828:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <ip4_reass+0x2da>
 800a830:	4b15      	ldr	r3, [pc, #84]	; (800a888 <ip4_reass+0x324>)
 800a832:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a836:	4915      	ldr	r1, [pc, #84]	; (800a88c <ip4_reass+0x328>)
 800a838:	4815      	ldr	r0, [pc, #84]	; (800a890 <ip4_reass+0x32c>)
 800a83a:	f007 fda5 	bl	8012388 <iprintf>
  if (ipr->p == NULL) {
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d116      	bne.n	800a874 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a846:	4b13      	ldr	r3, [pc, #76]	; (800a894 <ip4_reass+0x330>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d006      	beq.n	800a85e <ip4_reass+0x2fa>
 800a850:	4b0d      	ldr	r3, [pc, #52]	; (800a888 <ip4_reass+0x324>)
 800a852:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a856:	4910      	ldr	r1, [pc, #64]	; (800a898 <ip4_reass+0x334>)
 800a858:	480d      	ldr	r0, [pc, #52]	; (800a890 <ip4_reass+0x32c>)
 800a85a:	f007 fd95 	bl	8012388 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a85e:	2100      	movs	r1, #0
 800a860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a862:	f7ff fce7 	bl	800a234 <ip_reass_dequeue_datagram>
 800a866:	e006      	b.n	800a876 <ip4_reass+0x312>
    goto nullreturn;
 800a868:	bf00      	nop
 800a86a:	e004      	b.n	800a876 <ip4_reass+0x312>
    goto nullreturn;
 800a86c:	bf00      	nop
 800a86e:	e002      	b.n	800a876 <ip4_reass+0x312>
      goto nullreturn;
 800a870:	bf00      	nop
 800a872:	e000      	b.n	800a876 <ip4_reass+0x312>
  }

nullreturn:
 800a874:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fd98 	bl	800c3ac <pbuf_free>
  return NULL;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3738      	adds	r7, #56	; 0x38
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	080137f8 	.word	0x080137f8
 800a88c:	080139d4 	.word	0x080139d4
 800a890:	08013890 	.word	0x08013890
 800a894:	24005318 	.word	0x24005318
 800a898:	080139e0 	.word	0x080139e0

0800a89c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a8a0:	2005      	movs	r0, #5
 800a8a2:	f000 fdc9 	bl	800b438 <memp_malloc>
 800a8a6:	4603      	mov	r3, r0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a8bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a8c0:	4906      	ldr	r1, [pc, #24]	; (800a8dc <ip_frag_free_pbuf_custom_ref+0x30>)
 800a8c2:	4807      	ldr	r0, [pc, #28]	; (800a8e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a8c4:	f007 fd60 	bl	8012388 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	2005      	movs	r0, #5
 800a8cc:	f000 fe24 	bl	800b518 <memp_free>
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	080137f8 	.word	0x080137f8
 800a8dc:	08013a00 	.word	0x08013a00
 800a8e0:	08013890 	.word	0x08013890

0800a8e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <ipfrag_free_pbuf_custom+0x20>
 800a8f6:	4b11      	ldr	r3, [pc, #68]	; (800a93c <ipfrag_free_pbuf_custom+0x58>)
 800a8f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a8fc:	4910      	ldr	r1, [pc, #64]	; (800a940 <ipfrag_free_pbuf_custom+0x5c>)
 800a8fe:	4811      	ldr	r0, [pc, #68]	; (800a944 <ipfrag_free_pbuf_custom+0x60>)
 800a900:	f007 fd42 	bl	8012388 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d006      	beq.n	800a91a <ipfrag_free_pbuf_custom+0x36>
 800a90c:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <ipfrag_free_pbuf_custom+0x58>)
 800a90e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a912:	490d      	ldr	r1, [pc, #52]	; (800a948 <ipfrag_free_pbuf_custom+0x64>)
 800a914:	480b      	ldr	r0, [pc, #44]	; (800a944 <ipfrag_free_pbuf_custom+0x60>)
 800a916:	f007 fd37 	bl	8012388 <iprintf>
  if (pcr->original != NULL) {
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	4618      	mov	r0, r3
 800a928:	f001 fd40 	bl	800c3ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f7ff ffbd 	bl	800a8ac <ip_frag_free_pbuf_custom_ref>
}
 800a932:	bf00      	nop
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	080137f8 	.word	0x080137f8
 800a940:	08013a0c 	.word	0x08013a0c
 800a944:	08013890 	.word	0x08013890
 800a948:	08013a18 	.word	0x08013a18

0800a94c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b094      	sub	sp, #80	; 0x50
 800a950:	af02      	add	r7, sp, #8
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a962:	3b14      	subs	r3, #20
 800a964:	2b00      	cmp	r3, #0
 800a966:	da00      	bge.n	800a96a <ip4_frag+0x1e>
 800a968:	3307      	adds	r3, #7
 800a96a:	10db      	asrs	r3, r3, #3
 800a96c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a96e:	2314      	movs	r3, #20
 800a970:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800a978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	f003 030f 	and.w	r3, r3, #15
 800a984:	b2db      	uxtb	r3, r3
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b14      	cmp	r3, #20
 800a98c:	d002      	beq.n	800a994 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a98e:	f06f 0305 	mvn.w	r3, #5
 800a992:	e110      	b.n	800abb6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	895b      	ldrh	r3, [r3, #10]
 800a998:	2b13      	cmp	r3, #19
 800a99a:	d809      	bhi.n	800a9b0 <ip4_frag+0x64>
 800a99c:	4b88      	ldr	r3, [pc, #544]	; (800abc0 <ip4_frag+0x274>)
 800a99e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a9a2:	4988      	ldr	r1, [pc, #544]	; (800abc4 <ip4_frag+0x278>)
 800a9a4:	4888      	ldr	r0, [pc, #544]	; (800abc8 <ip4_frag+0x27c>)
 800a9a6:	f007 fcef 	bl	8012388 <iprintf>
 800a9aa:	f06f 0305 	mvn.w	r3, #5
 800a9ae:	e102      	b.n	800abb6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	88db      	ldrh	r3, [r3, #6]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fd fd22 	bl	8008400 <lwip_htons>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800a9c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a9ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	891b      	ldrh	r3, [r3, #8]
 800a9d6:	3b14      	subs	r3, #20
 800a9d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800a9dc:	e0e1      	b.n	800aba2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a9de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	bf28      	it	cs
 800a9ec:	4613      	movcs	r3, r2
 800a9ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a9f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9f4:	2114      	movs	r1, #20
 800a9f6:	200e      	movs	r0, #14
 800a9f8:	f001 f9f4 	bl	800bde4 <pbuf_alloc>
 800a9fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 80d5 	beq.w	800abb0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	895b      	ldrh	r3, [r3, #10]
 800aa0a:	2b13      	cmp	r3, #19
 800aa0c:	d806      	bhi.n	800aa1c <ip4_frag+0xd0>
 800aa0e:	4b6c      	ldr	r3, [pc, #432]	; (800abc0 <ip4_frag+0x274>)
 800aa10:	f44f 7249 	mov.w	r2, #804	; 0x324
 800aa14:	496d      	ldr	r1, [pc, #436]	; (800abcc <ip4_frag+0x280>)
 800aa16:	486c      	ldr	r0, [pc, #432]	; (800abc8 <ip4_frag+0x27c>)
 800aa18:	f007 fcb6 	bl	8012388 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2214      	movs	r2, #20
 800aa22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa24:	4618      	mov	r0, r3
 800aa26:	f007 fd8a 	bl	801253e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800aa30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800aa36:	e064      	b.n	800ab02 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	895a      	ldrh	r2, [r3, #10]
 800aa3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	895b      	ldrh	r3, [r3, #10]
 800aa46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d906      	bls.n	800aa5a <ip4_frag+0x10e>
 800aa4c:	4b5c      	ldr	r3, [pc, #368]	; (800abc0 <ip4_frag+0x274>)
 800aa4e:	f240 322d 	movw	r2, #813	; 0x32d
 800aa52:	495f      	ldr	r1, [pc, #380]	; (800abd0 <ip4_frag+0x284>)
 800aa54:	485c      	ldr	r0, [pc, #368]	; (800abc8 <ip4_frag+0x27c>)
 800aa56:	f007 fc97 	bl	8012388 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800aa5a:	8bfa      	ldrh	r2, [r7, #30]
 800aa5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bf28      	it	cs
 800aa64:	4613      	movcs	r3, r2
 800aa66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800aa6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <ip4_frag+0x132>
        poff = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	60fb      	str	r3, [r7, #12]
        continue;
 800aa7c:	e041      	b.n	800ab02 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800aa7e:	f7ff ff0d 	bl	800a89c <ip_frag_alloc_pbuf_custom_ref>
 800aa82:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d103      	bne.n	800aa92 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800aa8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa8c:	f001 fc8e 	bl	800c3ac <pbuf_free>
        goto memerr;
 800aa90:	e08f      	b.n	800abb2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aa92:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aa98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800aaa0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800aaa4:	9201      	str	r2, [sp, #4]
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2241      	movs	r2, #65	; 0x41
 800aaac:	2000      	movs	r0, #0
 800aaae:	f001 fac3 	bl	800c038 <pbuf_alloced_custom>
 800aab2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d106      	bne.n	800aac8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800aaba:	69b8      	ldr	r0, [r7, #24]
 800aabc:	f7ff fef6 	bl	800a8ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800aac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aac2:	f001 fc73 	bl	800c3ac <pbuf_free>
        goto memerr;
 800aac6:	e074      	b.n	800abb2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f001 fd0f 	bl	800c4ec <pbuf_ref>
      pcr->original = p;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	4a3f      	ldr	r2, [pc, #252]	; (800abd4 <ip4_frag+0x288>)
 800aad8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800aada:	6979      	ldr	r1, [r7, #20]
 800aadc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aade:	f001 fd27 	bl	800c530 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800aae2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800aae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800aaf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d004      	beq.n	800ab02 <ip4_frag+0x1b6>
        poff = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ab02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d196      	bne.n	800aa38 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ab0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ab0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab10:	4413      	add	r3, r2
 800ab12:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab18:	f1a3 0213 	sub.w	r2, r3, #19
 800ab1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab20:	429a      	cmp	r2, r3
 800ab22:	bfcc      	ite	gt
 800ab24:	2301      	movgt	r3, #1
 800ab26:	2300      	movle	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ab2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <ip4_frag+0x1f6>
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ab42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab48:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ab4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fd fc57 	bl	8008400 <lwip_htons>
 800ab52:	4603      	mov	r3, r0
 800ab54:	461a      	mov	r2, r3
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ab5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab5c:	3314      	adds	r3, #20
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fd fc4d 	bl	8008400 <lwip_htons>
 800ab66:	4603      	mov	r3, r0
 800ab68:	461a      	mov	r2, r3
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2200      	movs	r2, #0
 800ab72:	729a      	strb	r2, [r3, #10]
 800ab74:	2200      	movs	r2, #0
 800ab76:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab80:	68b8      	ldr	r0, [r7, #8]
 800ab82:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ab84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab86:	f001 fc11 	bl	800c3ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ab8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ab8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ab96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ab9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800aba2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f47f af19 	bne.w	800a9de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e002      	b.n	800abb6 <ip4_frag+0x26a>
      goto memerr;
 800abb0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3748      	adds	r7, #72	; 0x48
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	080137f8 	.word	0x080137f8
 800abc4:	08013a24 	.word	0x08013a24
 800abc8:	08013890 	.word	0x08013890
 800abcc:	08013a40 	.word	0x08013a40
 800abd0:	08013a60 	.word	0x08013a60
 800abd4:	0800a8e5 	.word	0x0800a8e5

0800abd8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	4603      	mov	r3, r0
 800abe0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800abe2:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <ptr_to_mem+0x20>)
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	88fb      	ldrh	r3, [r7, #6]
 800abe8:	4413      	add	r3, r2
}
 800abea:	4618      	mov	r0, r3
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	24005320 	.word	0x24005320

0800abfc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <mem_to_ptr+0x20>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	b29b      	uxth	r3, r3
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	24005320 	.word	0x24005320

0800ac20 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ac28:	4b45      	ldr	r3, [pc, #276]	; (800ad40 <plug_holes+0x120>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d206      	bcs.n	800ac40 <plug_holes+0x20>
 800ac32:	4b44      	ldr	r3, [pc, #272]	; (800ad44 <plug_holes+0x124>)
 800ac34:	f240 12df 	movw	r2, #479	; 0x1df
 800ac38:	4943      	ldr	r1, [pc, #268]	; (800ad48 <plug_holes+0x128>)
 800ac3a:	4844      	ldr	r0, [pc, #272]	; (800ad4c <plug_holes+0x12c>)
 800ac3c:	f007 fba4 	bl	8012388 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ac40:	4b43      	ldr	r3, [pc, #268]	; (800ad50 <plug_holes+0x130>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d306      	bcc.n	800ac58 <plug_holes+0x38>
 800ac4a:	4b3e      	ldr	r3, [pc, #248]	; (800ad44 <plug_holes+0x124>)
 800ac4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ac50:	4940      	ldr	r1, [pc, #256]	; (800ad54 <plug_holes+0x134>)
 800ac52:	483e      	ldr	r0, [pc, #248]	; (800ad4c <plug_holes+0x12c>)
 800ac54:	f007 fb98 	bl	8012388 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	791b      	ldrb	r3, [r3, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d006      	beq.n	800ac6e <plug_holes+0x4e>
 800ac60:	4b38      	ldr	r3, [pc, #224]	; (800ad44 <plug_holes+0x124>)
 800ac62:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ac66:	493c      	ldr	r1, [pc, #240]	; (800ad58 <plug_holes+0x138>)
 800ac68:	4838      	ldr	r0, [pc, #224]	; (800ad4c <plug_holes+0x12c>)
 800ac6a:	f007 fb8d 	bl	8012388 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac76:	d906      	bls.n	800ac86 <plug_holes+0x66>
 800ac78:	4b32      	ldr	r3, [pc, #200]	; (800ad44 <plug_holes+0x124>)
 800ac7a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ac7e:	4937      	ldr	r1, [pc, #220]	; (800ad5c <plug_holes+0x13c>)
 800ac80:	4832      	ldr	r0, [pc, #200]	; (800ad4c <plug_holes+0x12c>)
 800ac82:	f007 fb81 	bl	8012388 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff ffa4 	bl	800abd8 <ptr_to_mem>
 800ac90:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d024      	beq.n	800ace4 <plug_holes+0xc4>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	791b      	ldrb	r3, [r3, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d120      	bne.n	800ace4 <plug_holes+0xc4>
 800aca2:	4b2b      	ldr	r3, [pc, #172]	; (800ad50 <plug_holes+0x130>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d01b      	beq.n	800ace4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800acac:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <plug_holes+0x140>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d102      	bne.n	800acbc <plug_holes+0x9c>
      lfree = mem;
 800acb6:	4a2a      	ldr	r2, [pc, #168]	; (800ad60 <plug_holes+0x140>)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	881a      	ldrh	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800accc:	d00a      	beq.n	800ace4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff ff80 	bl	800abd8 <ptr_to_mem>
 800acd8:	4604      	mov	r4, r0
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff ff8e 	bl	800abfc <mem_to_ptr>
 800ace0:	4603      	mov	r3, r0
 800ace2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff ff75 	bl	800abd8 <ptr_to_mem>
 800acee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d01f      	beq.n	800ad38 <plug_holes+0x118>
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	791b      	ldrb	r3, [r3, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11b      	bne.n	800ad38 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ad00:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <plug_holes+0x140>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d102      	bne.n	800ad10 <plug_holes+0xf0>
      lfree = pmem;
 800ad0a:	4a15      	ldr	r2, [pc, #84]	; (800ad60 <plug_holes+0x140>)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	881a      	ldrh	r2, [r3, #0]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad20:	d00a      	beq.n	800ad38 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff ff56 	bl	800abd8 <ptr_to_mem>
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	68b8      	ldr	r0, [r7, #8]
 800ad30:	f7ff ff64 	bl	800abfc <mem_to_ptr>
 800ad34:	4603      	mov	r3, r0
 800ad36:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ad38:	bf00      	nop
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd90      	pop	{r4, r7, pc}
 800ad40:	24005320 	.word	0x24005320
 800ad44:	08013a70 	.word	0x08013a70
 800ad48:	08013af0 	.word	0x08013af0
 800ad4c:	08013b08 	.word	0x08013b08
 800ad50:	24005324 	.word	0x24005324
 800ad54:	08013b30 	.word	0x08013b30
 800ad58:	08013b4c 	.word	0x08013b4c
 800ad5c:	08013b68 	.word	0x08013b68
 800ad60:	24005328 	.word	0x24005328

0800ad64 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ad6a:	4b17      	ldr	r3, [pc, #92]	; (800adc8 <mem_init+0x64>)
 800ad6c:	f04f 7210 	mov.w	r2, #37748736	; 0x2400000
 800ad70:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ad72:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <mem_init+0x64>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad7e:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ad8c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ad90:	f7ff ff22 	bl	800abd8 <ptr_to_mem>
 800ad94:	4603      	mov	r3, r0
 800ad96:	4a0d      	ldr	r2, [pc, #52]	; (800adcc <mem_init+0x68>)
 800ad98:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ad9a:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <mem_init+0x68>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ada2:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <mem_init+0x68>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800adaa:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800adac:	4b07      	ldr	r3, [pc, #28]	; (800adcc <mem_init+0x68>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800adb4:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <mem_init+0x64>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a05      	ldr	r2, [pc, #20]	; (800add0 <mem_init+0x6c>)
 800adbc:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800adbe:	bf00      	nop
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	24005320 	.word	0x24005320
 800adcc:	24005324 	.word	0x24005324
 800add0:	24005328 	.word	0x24005328

0800add4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff ff0d 	bl	800abfc <mem_to_ptr>
 800ade2:	4603      	mov	r3, r0
 800ade4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fef4 	bl	800abd8 <ptr_to_mem>
 800adf0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	885b      	ldrh	r3, [r3, #2]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff feee 	bl	800abd8 <ptr_to_mem>
 800adfc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae06:	d818      	bhi.n	800ae3a <mem_link_valid+0x66>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	885b      	ldrh	r3, [r3, #2]
 800ae0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae10:	d813      	bhi.n	800ae3a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae16:	8afa      	ldrh	r2, [r7, #22]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d004      	beq.n	800ae26 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	8afa      	ldrh	r2, [r7, #22]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d109      	bne.n	800ae3a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae26:	4b08      	ldr	r3, [pc, #32]	; (800ae48 <mem_link_valid+0x74>)
 800ae28:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d006      	beq.n	800ae3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	885b      	ldrh	r3, [r3, #2]
 800ae34:	8afa      	ldrh	r2, [r7, #22]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d001      	beq.n	800ae3e <mem_link_valid+0x6a>
    return 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e000      	b.n	800ae40 <mem_link_valid+0x6c>
  }
  return 1;
 800ae3e:	2301      	movs	r3, #1
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	24005324 	.word	0x24005324

0800ae4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d04c      	beq.n	800aef4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f003 0303 	and.w	r3, r3, #3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ae64:	4b25      	ldr	r3, [pc, #148]	; (800aefc <mem_free+0xb0>)
 800ae66:	f240 2273 	movw	r2, #627	; 0x273
 800ae6a:	4925      	ldr	r1, [pc, #148]	; (800af00 <mem_free+0xb4>)
 800ae6c:	4825      	ldr	r0, [pc, #148]	; (800af04 <mem_free+0xb8>)
 800ae6e:	f007 fa8b 	bl	8012388 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae72:	e040      	b.n	800aef6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3b08      	subs	r3, #8
 800ae78:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ae7a:	4b23      	ldr	r3, [pc, #140]	; (800af08 <mem_free+0xbc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d306      	bcc.n	800ae92 <mem_free+0x46>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f103 020c 	add.w	r2, r3, #12
 800ae8a:	4b20      	ldr	r3, [pc, #128]	; (800af0c <mem_free+0xc0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d907      	bls.n	800aea2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <mem_free+0xb0>)
 800ae94:	f240 227f 	movw	r2, #639	; 0x27f
 800ae98:	491d      	ldr	r1, [pc, #116]	; (800af10 <mem_free+0xc4>)
 800ae9a:	481a      	ldr	r0, [pc, #104]	; (800af04 <mem_free+0xb8>)
 800ae9c:	f007 fa74 	bl	8012388 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aea0:	e029      	b.n	800aef6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	791b      	ldrb	r3, [r3, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d107      	bne.n	800aeba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <mem_free+0xb0>)
 800aeac:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800aeb0:	4918      	ldr	r1, [pc, #96]	; (800af14 <mem_free+0xc8>)
 800aeb2:	4814      	ldr	r0, [pc, #80]	; (800af04 <mem_free+0xb8>)
 800aeb4:	f007 fa68 	bl	8012388 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aeb8:	e01d      	b.n	800aef6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7ff ff8a 	bl	800add4 <mem_link_valid>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d107      	bne.n	800aed6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <mem_free+0xb0>)
 800aec8:	f240 2295 	movw	r2, #661	; 0x295
 800aecc:	4912      	ldr	r1, [pc, #72]	; (800af18 <mem_free+0xcc>)
 800aece:	480d      	ldr	r0, [pc, #52]	; (800af04 <mem_free+0xb8>)
 800aed0:	f007 fa5a 	bl	8012388 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aed4:	e00f      	b.n	800aef6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <mem_free+0xd0>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d202      	bcs.n	800aeec <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aee6:	4a0d      	ldr	r2, [pc, #52]	; (800af1c <mem_free+0xd0>)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff fe97 	bl	800ac20 <plug_holes>
 800aef2:	e000      	b.n	800aef6 <mem_free+0xaa>
    return;
 800aef4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	08013a70 	.word	0x08013a70
 800af00:	08013b94 	.word	0x08013b94
 800af04:	08013b08 	.word	0x08013b08
 800af08:	24005320 	.word	0x24005320
 800af0c:	24005324 	.word	0x24005324
 800af10:	08013bb8 	.word	0x08013bb8
 800af14:	08013bd4 	.word	0x08013bd4
 800af18:	08013bfc 	.word	0x08013bfc
 800af1c:	24005328 	.word	0x24005328

0800af20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800af2c:	887b      	ldrh	r3, [r7, #2]
 800af2e:	3303      	adds	r3, #3
 800af30:	b29b      	uxth	r3, r3
 800af32:	f023 0303 	bic.w	r3, r3, #3
 800af36:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800af38:	8bfb      	ldrh	r3, [r7, #30]
 800af3a:	2b0b      	cmp	r3, #11
 800af3c:	d801      	bhi.n	800af42 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800af3e:	230c      	movs	r3, #12
 800af40:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800af42:	8bfb      	ldrh	r3, [r7, #30]
 800af44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af48:	d803      	bhi.n	800af52 <mem_trim+0x32>
 800af4a:	8bfa      	ldrh	r2, [r7, #30]
 800af4c:	887b      	ldrh	r3, [r7, #2]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d201      	bcs.n	800af56 <mem_trim+0x36>
    return NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	e0cc      	b.n	800b0f0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800af56:	4b68      	ldr	r3, [pc, #416]	; (800b0f8 <mem_trim+0x1d8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d304      	bcc.n	800af6a <mem_trim+0x4a>
 800af60:	4b66      	ldr	r3, [pc, #408]	; (800b0fc <mem_trim+0x1dc>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	429a      	cmp	r2, r3
 800af68:	d306      	bcc.n	800af78 <mem_trim+0x58>
 800af6a:	4b65      	ldr	r3, [pc, #404]	; (800b100 <mem_trim+0x1e0>)
 800af6c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800af70:	4964      	ldr	r1, [pc, #400]	; (800b104 <mem_trim+0x1e4>)
 800af72:	4865      	ldr	r0, [pc, #404]	; (800b108 <mem_trim+0x1e8>)
 800af74:	f007 fa08 	bl	8012388 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800af78:	4b5f      	ldr	r3, [pc, #380]	; (800b0f8 <mem_trim+0x1d8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d304      	bcc.n	800af8c <mem_trim+0x6c>
 800af82:	4b5e      	ldr	r3, [pc, #376]	; (800b0fc <mem_trim+0x1dc>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d301      	bcc.n	800af90 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	e0af      	b.n	800b0f0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3b08      	subs	r3, #8
 800af94:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800af96:	69b8      	ldr	r0, [r7, #24]
 800af98:	f7ff fe30 	bl	800abfc <mem_to_ptr>
 800af9c:	4603      	mov	r3, r0
 800af9e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	881a      	ldrh	r2, [r3, #0]
 800afa4:	8afb      	ldrh	r3, [r7, #22]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	3b08      	subs	r3, #8
 800afac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800afae:	8bfa      	ldrh	r2, [r7, #30]
 800afb0:	8abb      	ldrh	r3, [r7, #20]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d906      	bls.n	800afc4 <mem_trim+0xa4>
 800afb6:	4b52      	ldr	r3, [pc, #328]	; (800b100 <mem_trim+0x1e0>)
 800afb8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800afbc:	4953      	ldr	r1, [pc, #332]	; (800b10c <mem_trim+0x1ec>)
 800afbe:	4852      	ldr	r0, [pc, #328]	; (800b108 <mem_trim+0x1e8>)
 800afc0:	f007 f9e2 	bl	8012388 <iprintf>
  if (newsize > size) {
 800afc4:	8bfa      	ldrh	r2, [r7, #30]
 800afc6:	8abb      	ldrh	r3, [r7, #20]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d901      	bls.n	800afd0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	e08f      	b.n	800b0f0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800afd0:	8bfa      	ldrh	r2, [r7, #30]
 800afd2:	8abb      	ldrh	r3, [r7, #20]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d101      	bne.n	800afdc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	e089      	b.n	800b0f0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7ff fdf9 	bl	800abd8 <ptr_to_mem>
 800afe6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	791b      	ldrb	r3, [r3, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d13f      	bne.n	800b070 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aff8:	d106      	bne.n	800b008 <mem_trim+0xe8>
 800affa:	4b41      	ldr	r3, [pc, #260]	; (800b100 <mem_trim+0x1e0>)
 800affc:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b000:	4943      	ldr	r1, [pc, #268]	; (800b110 <mem_trim+0x1f0>)
 800b002:	4841      	ldr	r0, [pc, #260]	; (800b108 <mem_trim+0x1e8>)
 800b004:	f007 f9c0 	bl	8012388 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b00e:	8afa      	ldrh	r2, [r7, #22]
 800b010:	8bfb      	ldrh	r3, [r7, #30]
 800b012:	4413      	add	r3, r2
 800b014:	b29b      	uxth	r3, r3
 800b016:	3308      	adds	r3, #8
 800b018:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b01a:	4b3e      	ldr	r3, [pc, #248]	; (800b114 <mem_trim+0x1f4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	429a      	cmp	r2, r3
 800b022:	d106      	bne.n	800b032 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b024:	89fb      	ldrh	r3, [r7, #14]
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fdd6 	bl	800abd8 <ptr_to_mem>
 800b02c:	4603      	mov	r3, r0
 800b02e:	4a39      	ldr	r2, [pc, #228]	; (800b114 <mem_trim+0x1f4>)
 800b030:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b032:	89fb      	ldrh	r3, [r7, #14]
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff fdcf 	bl	800abd8 <ptr_to_mem>
 800b03a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	2200      	movs	r2, #0
 800b040:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	89ba      	ldrh	r2, [r7, #12]
 800b046:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	8afa      	ldrh	r2, [r7, #22]
 800b04c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	89fa      	ldrh	r2, [r7, #14]
 800b052:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b05c:	d047      	beq.n	800b0ee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fdb8 	bl	800abd8 <ptr_to_mem>
 800b068:	4602      	mov	r2, r0
 800b06a:	89fb      	ldrh	r3, [r7, #14]
 800b06c:	8053      	strh	r3, [r2, #2]
 800b06e:	e03e      	b.n	800b0ee <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b070:	8bfb      	ldrh	r3, [r7, #30]
 800b072:	f103 0214 	add.w	r2, r3, #20
 800b076:	8abb      	ldrh	r3, [r7, #20]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d838      	bhi.n	800b0ee <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b07c:	8afa      	ldrh	r2, [r7, #22]
 800b07e:	8bfb      	ldrh	r3, [r7, #30]
 800b080:	4413      	add	r3, r2
 800b082:	b29b      	uxth	r3, r3
 800b084:	3308      	adds	r3, #8
 800b086:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b090:	d106      	bne.n	800b0a0 <mem_trim+0x180>
 800b092:	4b1b      	ldr	r3, [pc, #108]	; (800b100 <mem_trim+0x1e0>)
 800b094:	f240 3216 	movw	r2, #790	; 0x316
 800b098:	491d      	ldr	r1, [pc, #116]	; (800b110 <mem_trim+0x1f0>)
 800b09a:	481b      	ldr	r0, [pc, #108]	; (800b108 <mem_trim+0x1e8>)
 800b09c:	f007 f974 	bl	8012388 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b0a0:	89fb      	ldrh	r3, [r7, #14]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7ff fd98 	bl	800abd8 <ptr_to_mem>
 800b0a8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b0aa:	4b1a      	ldr	r3, [pc, #104]	; (800b114 <mem_trim+0x1f4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d202      	bcs.n	800b0ba <mem_trim+0x19a>
      lfree = mem2;
 800b0b4:	4a17      	ldr	r2, [pc, #92]	; (800b114 <mem_trim+0x1f4>)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	881a      	ldrh	r2, [r3, #0]
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	8afa      	ldrh	r2, [r7, #22]
 800b0cc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	89fa      	ldrh	r2, [r7, #14]
 800b0d2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0dc:	d007      	beq.n	800b0ee <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fd78 	bl	800abd8 <ptr_to_mem>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	89fb      	ldrh	r3, [r7, #14]
 800b0ec:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b0ee:	687b      	ldr	r3, [r7, #4]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3720      	adds	r7, #32
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	24005320 	.word	0x24005320
 800b0fc:	24005324 	.word	0x24005324
 800b100:	08013a70 	.word	0x08013a70
 800b104:	08013c30 	.word	0x08013c30
 800b108:	08013b08 	.word	0x08013b08
 800b10c:	08013c48 	.word	0x08013c48
 800b110:	08013c68 	.word	0x08013c68
 800b114:	24005328 	.word	0x24005328

0800b118 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b122:	88fb      	ldrh	r3, [r7, #6]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <mem_malloc+0x14>
    return NULL;
 800b128:	2300      	movs	r3, #0
 800b12a:	e0d9      	b.n	800b2e0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	3303      	adds	r3, #3
 800b130:	b29b      	uxth	r3, r3
 800b132:	f023 0303 	bic.w	r3, r3, #3
 800b136:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b138:	8bbb      	ldrh	r3, [r7, #28]
 800b13a:	2b0b      	cmp	r3, #11
 800b13c:	d801      	bhi.n	800b142 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b13e:	230c      	movs	r3, #12
 800b140:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b142:	8bbb      	ldrh	r3, [r7, #28]
 800b144:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b148:	d803      	bhi.n	800b152 <mem_malloc+0x3a>
 800b14a:	8bba      	ldrh	r2, [r7, #28]
 800b14c:	88fb      	ldrh	r3, [r7, #6]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d201      	bcs.n	800b156 <mem_malloc+0x3e>
    return NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	e0c4      	b.n	800b2e0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b156:	4b64      	ldr	r3, [pc, #400]	; (800b2e8 <mem_malloc+0x1d0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fd4e 	bl	800abfc <mem_to_ptr>
 800b160:	4603      	mov	r3, r0
 800b162:	83fb      	strh	r3, [r7, #30]
 800b164:	e0b4      	b.n	800b2d0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b166:	8bfb      	ldrh	r3, [r7, #30]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fd35 	bl	800abd8 <ptr_to_mem>
 800b16e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	791b      	ldrb	r3, [r3, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f040 80a4 	bne.w	800b2c2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	8bfb      	ldrh	r3, [r7, #30]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	f1a3 0208 	sub.w	r2, r3, #8
 800b188:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b18a:	429a      	cmp	r2, r3
 800b18c:	f0c0 8099 	bcc.w	800b2c2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	8bfb      	ldrh	r3, [r7, #30]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	f1a3 0208 	sub.w	r2, r3, #8
 800b19e:	8bbb      	ldrh	r3, [r7, #28]
 800b1a0:	3314      	adds	r3, #20
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d333      	bcc.n	800b20e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b1a6:	8bfa      	ldrh	r2, [r7, #30]
 800b1a8:	8bbb      	ldrh	r3, [r7, #28]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b1b2:	8a7b      	ldrh	r3, [r7, #18]
 800b1b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1b8:	d106      	bne.n	800b1c8 <mem_malloc+0xb0>
 800b1ba:	4b4c      	ldr	r3, [pc, #304]	; (800b2ec <mem_malloc+0x1d4>)
 800b1bc:	f240 3287 	movw	r2, #903	; 0x387
 800b1c0:	494b      	ldr	r1, [pc, #300]	; (800b2f0 <mem_malloc+0x1d8>)
 800b1c2:	484c      	ldr	r0, [pc, #304]	; (800b2f4 <mem_malloc+0x1dc>)
 800b1c4:	f007 f8e0 	bl	8012388 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b1c8:	8a7b      	ldrh	r3, [r7, #18]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff fd04 	bl	800abd8 <ptr_to_mem>
 800b1d0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	881a      	ldrh	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	8bfa      	ldrh	r2, [r7, #30]
 800b1e4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	8a7a      	ldrh	r2, [r7, #18]
 800b1ea:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1fa:	d00b      	beq.n	800b214 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fce9 	bl	800abd8 <ptr_to_mem>
 800b206:	4602      	mov	r2, r0
 800b208:	8a7b      	ldrh	r3, [r7, #18]
 800b20a:	8053      	strh	r3, [r2, #2]
 800b20c:	e002      	b.n	800b214 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2201      	movs	r2, #1
 800b212:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b214:	4b34      	ldr	r3, [pc, #208]	; (800b2e8 <mem_malloc+0x1d0>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d127      	bne.n	800b26e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b21e:	4b32      	ldr	r3, [pc, #200]	; (800b2e8 <mem_malloc+0x1d0>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b224:	e005      	b.n	800b232 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff fcd4 	bl	800abd8 <ptr_to_mem>
 800b230:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	791b      	ldrb	r3, [r3, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d004      	beq.n	800b244 <mem_malloc+0x12c>
 800b23a:	4b2f      	ldr	r3, [pc, #188]	; (800b2f8 <mem_malloc+0x1e0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	d1f0      	bne.n	800b226 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b244:	4a28      	ldr	r2, [pc, #160]	; (800b2e8 <mem_malloc+0x1d0>)
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b24a:	4b27      	ldr	r3, [pc, #156]	; (800b2e8 <mem_malloc+0x1d0>)
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	4b2a      	ldr	r3, [pc, #168]	; (800b2f8 <mem_malloc+0x1e0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	429a      	cmp	r2, r3
 800b254:	d00b      	beq.n	800b26e <mem_malloc+0x156>
 800b256:	4b24      	ldr	r3, [pc, #144]	; (800b2e8 <mem_malloc+0x1d0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d006      	beq.n	800b26e <mem_malloc+0x156>
 800b260:	4b22      	ldr	r3, [pc, #136]	; (800b2ec <mem_malloc+0x1d4>)
 800b262:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b266:	4925      	ldr	r1, [pc, #148]	; (800b2fc <mem_malloc+0x1e4>)
 800b268:	4822      	ldr	r0, [pc, #136]	; (800b2f4 <mem_malloc+0x1dc>)
 800b26a:	f007 f88d 	bl	8012388 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b26e:	8bba      	ldrh	r2, [r7, #28]
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4413      	add	r3, r2
 800b274:	3308      	adds	r3, #8
 800b276:	4a20      	ldr	r2, [pc, #128]	; (800b2f8 <mem_malloc+0x1e0>)
 800b278:	6812      	ldr	r2, [r2, #0]
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d906      	bls.n	800b28c <mem_malloc+0x174>
 800b27e:	4b1b      	ldr	r3, [pc, #108]	; (800b2ec <mem_malloc+0x1d4>)
 800b280:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b284:	491e      	ldr	r1, [pc, #120]	; (800b300 <mem_malloc+0x1e8>)
 800b286:	481b      	ldr	r0, [pc, #108]	; (800b2f4 <mem_malloc+0x1dc>)
 800b288:	f007 f87e 	bl	8012388 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f003 0303 	and.w	r3, r3, #3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d006      	beq.n	800b2a4 <mem_malloc+0x18c>
 800b296:	4b15      	ldr	r3, [pc, #84]	; (800b2ec <mem_malloc+0x1d4>)
 800b298:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b29c:	4919      	ldr	r1, [pc, #100]	; (800b304 <mem_malloc+0x1ec>)
 800b29e:	4815      	ldr	r0, [pc, #84]	; (800b2f4 <mem_malloc+0x1dc>)
 800b2a0:	f007 f872 	bl	8012388 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	f003 0303 	and.w	r3, r3, #3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d006      	beq.n	800b2bc <mem_malloc+0x1a4>
 800b2ae:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <mem_malloc+0x1d4>)
 800b2b0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b2b4:	4914      	ldr	r1, [pc, #80]	; (800b308 <mem_malloc+0x1f0>)
 800b2b6:	480f      	ldr	r0, [pc, #60]	; (800b2f4 <mem_malloc+0x1dc>)
 800b2b8:	f007 f866 	bl	8012388 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	e00e      	b.n	800b2e0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b2c2:	8bfb      	ldrh	r3, [r7, #30]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7ff fc87 	bl	800abd8 <ptr_to_mem>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	881b      	ldrh	r3, [r3, #0]
 800b2ce:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b2d0:	8bfa      	ldrh	r2, [r7, #30]
 800b2d2:	8bbb      	ldrh	r3, [r7, #28]
 800b2d4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	f4ff af44 	bcc.w	800b166 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3720      	adds	r7, #32
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	24005328 	.word	0x24005328
 800b2ec:	08013a70 	.word	0x08013a70
 800b2f0:	08013c68 	.word	0x08013c68
 800b2f4:	08013b08 	.word	0x08013b08
 800b2f8:	24005324 	.word	0x24005324
 800b2fc:	08013c7c 	.word	0x08013c7c
 800b300:	08013c98 	.word	0x08013c98
 800b304:	08013cc8 	.word	0x08013cc8
 800b308:	08013cf8 	.word	0x08013cf8

0800b30c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	3303      	adds	r3, #3
 800b322:	f023 0303 	bic.w	r3, r3, #3
 800b326:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	e011      	b.n	800b352 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	881b      	ldrh	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	4413      	add	r3, r2
 800b34a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3301      	adds	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	885b      	ldrh	r3, [r3, #2]
 800b356:	461a      	mov	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4293      	cmp	r3, r2
 800b35c:	dbe7      	blt.n	800b32e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b372:	2300      	movs	r3, #0
 800b374:	80fb      	strh	r3, [r7, #6]
 800b376:	e009      	b.n	800b38c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b378:	88fb      	ldrh	r3, [r7, #6]
 800b37a:	4a08      	ldr	r2, [pc, #32]	; (800b39c <memp_init+0x30>)
 800b37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff ffc3 	bl	800b30c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b386:	88fb      	ldrh	r3, [r7, #6]
 800b388:	3301      	adds	r3, #1
 800b38a:	80fb      	strh	r3, [r7, #6]
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	2b08      	cmp	r3, #8
 800b390:	d9f2      	bls.n	800b378 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	08016130 	.word	0x08016130

0800b3a0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d012      	beq.n	800b3dc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	6812      	ldr	r2, [r2, #0]
 800b3be:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d006      	beq.n	800b3d8 <do_memp_malloc_pool+0x38>
 800b3ca:	4b07      	ldr	r3, [pc, #28]	; (800b3e8 <do_memp_malloc_pool+0x48>)
 800b3cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b3d0:	4906      	ldr	r1, [pc, #24]	; (800b3ec <do_memp_malloc_pool+0x4c>)
 800b3d2:	4807      	ldr	r0, [pc, #28]	; (800b3f0 <do_memp_malloc_pool+0x50>)
 800b3d4:	f006 ffd8 	bl	8012388 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	e000      	b.n	800b3de <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	08013d1c 	.word	0x08013d1c
 800b3ec:	08013da0 	.word	0x08013da0
 800b3f0:	08013dc4 	.word	0x08013dc4

0800b3f4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d106      	bne.n	800b410 <memp_malloc_pool+0x1c>
 800b402:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <memp_malloc_pool+0x38>)
 800b404:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b408:	4909      	ldr	r1, [pc, #36]	; (800b430 <memp_malloc_pool+0x3c>)
 800b40a:	480a      	ldr	r0, [pc, #40]	; (800b434 <memp_malloc_pool+0x40>)
 800b40c:	f006 ffbc 	bl	8012388 <iprintf>
  if (desc == NULL) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <memp_malloc_pool+0x26>
    return NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	e003      	b.n	800b422 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff ffc0 	bl	800b3a0 <do_memp_malloc_pool>
 800b420:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	08013d1c 	.word	0x08013d1c
 800b430:	08013dec 	.word	0x08013dec
 800b434:	08013dc4 	.word	0x08013dc4

0800b438 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	2b08      	cmp	r3, #8
 800b446:	d908      	bls.n	800b45a <memp_malloc+0x22>
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <memp_malloc+0x3c>)
 800b44a:	f240 1257 	movw	r2, #343	; 0x157
 800b44e:	490a      	ldr	r1, [pc, #40]	; (800b478 <memp_malloc+0x40>)
 800b450:	480a      	ldr	r0, [pc, #40]	; (800b47c <memp_malloc+0x44>)
 800b452:	f006 ff99 	bl	8012388 <iprintf>
 800b456:	2300      	movs	r3, #0
 800b458:	e008      	b.n	800b46c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	4a08      	ldr	r2, [pc, #32]	; (800b480 <memp_malloc+0x48>)
 800b45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff ff9c 	bl	800b3a0 <do_memp_malloc_pool>
 800b468:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	08013d1c 	.word	0x08013d1c
 800b478:	08013e00 	.word	0x08013e00
 800b47c:	08013dc4 	.word	0x08013dc4
 800b480:	08016130 	.word	0x08016130

0800b484 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	f003 0303 	and.w	r3, r3, #3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d006      	beq.n	800b4a6 <do_memp_free_pool+0x22>
 800b498:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <do_memp_free_pool+0x40>)
 800b49a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b49e:	490a      	ldr	r1, [pc, #40]	; (800b4c8 <do_memp_free_pool+0x44>)
 800b4a0:	480a      	ldr	r0, [pc, #40]	; (800b4cc <do_memp_free_pool+0x48>)
 800b4a2:	f006 ff71 	bl	8012388 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b4bc:	bf00      	nop
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	08013d1c 	.word	0x08013d1c
 800b4c8:	08013e20 	.word	0x08013e20
 800b4cc:	08013dc4 	.word	0x08013dc4

0800b4d0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <memp_free_pool+0x1e>
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <memp_free_pool+0x3c>)
 800b4e2:	f240 1295 	movw	r2, #405	; 0x195
 800b4e6:	490a      	ldr	r1, [pc, #40]	; (800b510 <memp_free_pool+0x40>)
 800b4e8:	480a      	ldr	r0, [pc, #40]	; (800b514 <memp_free_pool+0x44>)
 800b4ea:	f006 ff4d 	bl	8012388 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d007      	beq.n	800b504 <memp_free_pool+0x34>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d004      	beq.n	800b504 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff ffc1 	bl	800b484 <do_memp_free_pool>
 800b502:	e000      	b.n	800b506 <memp_free_pool+0x36>
    return;
 800b504:	bf00      	nop
}
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	08013d1c 	.word	0x08013d1c
 800b510:	08013dec 	.word	0x08013dec
 800b514:	08013dc4 	.word	0x08013dc4

0800b518 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	4603      	mov	r3, r0
 800b520:	6039      	str	r1, [r7, #0]
 800b522:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b08      	cmp	r3, #8
 800b528:	d907      	bls.n	800b53a <memp_free+0x22>
 800b52a:	4b0c      	ldr	r3, [pc, #48]	; (800b55c <memp_free+0x44>)
 800b52c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b530:	490b      	ldr	r1, [pc, #44]	; (800b560 <memp_free+0x48>)
 800b532:	480c      	ldr	r0, [pc, #48]	; (800b564 <memp_free+0x4c>)
 800b534:	f006 ff28 	bl	8012388 <iprintf>
 800b538:	e00c      	b.n	800b554 <memp_free+0x3c>

  if (mem == NULL) {
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d008      	beq.n	800b552 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b540:	79fb      	ldrb	r3, [r7, #7]
 800b542:	4a09      	ldr	r2, [pc, #36]	; (800b568 <memp_free+0x50>)
 800b544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff ff9a 	bl	800b484 <do_memp_free_pool>
 800b550:	e000      	b.n	800b554 <memp_free+0x3c>
    return;
 800b552:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	08013d1c 	.word	0x08013d1c
 800b560:	08013e40 	.word	0x08013e40
 800b564:	08013dc4 	.word	0x08013dc4
 800b568:	08016130 	.word	0x08016130

0800b56c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b570:	bf00      	nop
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
	...

0800b57c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <netif_add+0x26>
 800b590:	4b5b      	ldr	r3, [pc, #364]	; (800b700 <netif_add+0x184>)
 800b592:	f240 1227 	movw	r2, #295	; 0x127
 800b596:	495b      	ldr	r1, [pc, #364]	; (800b704 <netif_add+0x188>)
 800b598:	485b      	ldr	r0, [pc, #364]	; (800b708 <netif_add+0x18c>)
 800b59a:	f006 fef5 	bl	8012388 <iprintf>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e0aa      	b.n	800b6f8 <netif_add+0x17c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d108      	bne.n	800b5ba <netif_add+0x3e>
 800b5a8:	4b55      	ldr	r3, [pc, #340]	; (800b700 <netif_add+0x184>)
 800b5aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b5ae:	4957      	ldr	r1, [pc, #348]	; (800b70c <netif_add+0x190>)
 800b5b0:	4855      	ldr	r0, [pc, #340]	; (800b708 <netif_add+0x18c>)
 800b5b2:	f006 fee9 	bl	8012388 <iprintf>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e09e      	b.n	800b6f8 <netif_add+0x17c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b5c0:	4b53      	ldr	r3, [pc, #332]	; (800b710 <netif_add+0x194>)
 800b5c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b5ca:	4b51      	ldr	r3, [pc, #324]	; (800b710 <netif_add+0x194>)
 800b5cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b5d4:	4b4e      	ldr	r3, [pc, #312]	; (800b710 <netif_add+0x194>)
 800b5d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	4a49      	ldr	r2, [pc, #292]	; (800b714 <netif_add+0x198>)
 800b5ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a3a      	ldr	r2, [r7, #32]
 800b60e:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 800b610:	4b41      	ldr	r3, [pc, #260]	; (800b718 <netif_add+0x19c>)
 800b612:	781a      	ldrb	r2, [r3, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b61e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f946 	bl	800b8b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	4798      	blx	r3
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <netif_add+0xc0>
    return NULL;
 800b638:	2300      	movs	r3, #0
 800b63a:	e05d      	b.n	800b6f8 <netif_add+0x17c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b642:	2bff      	cmp	r3, #255	; 0xff
 800b644:	d103      	bne.n	800b64e <netif_add+0xd2>
        netif->num = 0;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b652:	4b32      	ldr	r3, [pc, #200]	; (800b71c <netif_add+0x1a0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	617b      	str	r3, [r7, #20]
 800b658:	e02b      	b.n	800b6b2 <netif_add+0x136>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d106      	bne.n	800b670 <netif_add+0xf4>
 800b662:	4b27      	ldr	r3, [pc, #156]	; (800b700 <netif_add+0x184>)
 800b664:	f240 128b 	movw	r2, #395	; 0x18b
 800b668:	492d      	ldr	r1, [pc, #180]	; (800b720 <netif_add+0x1a4>)
 800b66a:	4827      	ldr	r0, [pc, #156]	; (800b708 <netif_add+0x18c>)
 800b66c:	f006 fe8c 	bl	8012388 <iprintf>
        num_netifs++;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	3301      	adds	r3, #1
 800b674:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2bff      	cmp	r3, #255	; 0xff
 800b67a:	dd06      	ble.n	800b68a <netif_add+0x10e>
 800b67c:	4b20      	ldr	r3, [pc, #128]	; (800b700 <netif_add+0x184>)
 800b67e:	f240 128d 	movw	r2, #397	; 0x18d
 800b682:	4928      	ldr	r1, [pc, #160]	; (800b724 <netif_add+0x1a8>)
 800b684:	4820      	ldr	r0, [pc, #128]	; (800b708 <netif_add+0x18c>)
 800b686:	f006 fe7f 	bl	8012388 <iprintf>
        if (netif2->num == netif->num) {
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b696:	429a      	cmp	r2, r3
 800b698:	d108      	bne.n	800b6ac <netif_add+0x130>
          netif->num++;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b6aa:	e005      	b.n	800b6b8 <netif_add+0x13c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1d0      	bne.n	800b65a <netif_add+0xde>
        }
      }
    } while (netif2 != NULL);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1be      	bne.n	800b63c <netif_add+0xc0>
  }
  if (netif->num == 254) {
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6c4:	2bfe      	cmp	r3, #254	; 0xfe
 800b6c6:	d103      	bne.n	800b6d0 <netif_add+0x154>
    netif_num = 0;
 800b6c8:	4b13      	ldr	r3, [pc, #76]	; (800b718 <netif_add+0x19c>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
 800b6ce:	e006      	b.n	800b6de <netif_add+0x162>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	4b0f      	ldr	r3, [pc, #60]	; (800b718 <netif_add+0x19c>)
 800b6dc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b6de:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <netif_add+0x1a0>)
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b6e6:	4a0d      	ldr	r2, [pc, #52]	; (800b71c <netif_add+0x1a0>)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 faf3 	bl	800bcdc <netif_invoke_ext_callback>

  return netif;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	08013e5c 	.word	0x08013e5c
 800b704:	08013f40 	.word	0x08013f40
 800b708:	08013efc 	.word	0x08013efc
 800b70c:	08013f5c 	.word	0x08013f5c
 800b710:	080160c0 	.word	0x080160c0
 800b714:	0800bc73 	.word	0x0800bc73
 800b718:	24008224 	.word	0x24008224
 800b71c:	2400821c 	.word	0x2400821c
 800b720:	08013f80 	.word	0x08013f80
 800b724:	08013f94 	.word	0x08013f94

0800b728 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f002 fc0f 	bl	800df58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f006 fcf3 	bl	8012128 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <netif_do_set_ipaddr+0x20>
 800b75e:	4b21      	ldr	r3, [pc, #132]	; (800b7e4 <netif_do_set_ipaddr+0x98>)
 800b760:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b764:	4920      	ldr	r1, [pc, #128]	; (800b7e8 <netif_do_set_ipaddr+0x9c>)
 800b766:	4821      	ldr	r0, [pc, #132]	; (800b7ec <netif_do_set_ipaddr+0xa0>)
 800b768:	f006 fe0e 	bl	8012388 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <netif_do_set_ipaddr+0x34>
 800b772:	4b1c      	ldr	r3, [pc, #112]	; (800b7e4 <netif_do_set_ipaddr+0x98>)
 800b774:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b778:	491b      	ldr	r1, [pc, #108]	; (800b7e8 <netif_do_set_ipaddr+0x9c>)
 800b77a:	481c      	ldr	r0, [pc, #112]	; (800b7ec <netif_do_set_ipaddr+0xa0>)
 800b77c:	f006 fe04 	bl	8012388 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3304      	adds	r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d024      	beq.n	800b7d8 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	3304      	adds	r3, #4
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ffbf 	bl	800b728 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <netif_do_set_ipaddr+0x6a>
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	e000      	b.n	800b7b8 <netif_do_set_ipaddr+0x6c>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b7bc:	2101      	movs	r1, #1
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f000 f94a 	bl	800ba58 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <netif_do_set_ipaddr+0x88>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	4798      	blx	r3
    return 1; /* address changed */
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e000      	b.n	800b7da <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	08013e5c 	.word	0x08013e5c
 800b7e8:	08013fc4 	.word	0x08013fc4
 800b7ec:	08013efc 	.word	0x08013efc

0800b7f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3308      	adds	r3, #8
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	429a      	cmp	r2, r3
 800b808:	d019      	beq.n	800b83e <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d106      	bne.n	800b81e <netif_do_set_netmask+0x2e>
 800b810:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <netif_do_set_netmask+0x58>)
 800b812:	f44f 7204 	mov.w	r2, #528	; 0x210
 800b816:	490d      	ldr	r1, [pc, #52]	; (800b84c <netif_do_set_netmask+0x5c>)
 800b818:	480d      	ldr	r0, [pc, #52]	; (800b850 <netif_do_set_netmask+0x60>)
 800b81a:	f006 fdb5 	bl	8012388 <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3308      	adds	r3, #8
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <netif_do_set_netmask+0x44>
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	e000      	b.n	800b836 <netif_do_set_netmask+0x46>
 800b834:	2300      	movs	r3, #0
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	08013e5c 	.word	0x08013e5c
 800b84c:	08013fc4 	.word	0x08013fc4
 800b850:	08013efc 	.word	0x08013efc

0800b854 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	330c      	adds	r3, #12
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d019      	beq.n	800b8a2 <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <netif_do_set_gw+0x2e>
 800b874:	4b0d      	ldr	r3, [pc, #52]	; (800b8ac <netif_do_set_gw+0x58>)
 800b876:	f44f 7214 	mov.w	r2, #592	; 0x250
 800b87a:	490d      	ldr	r1, [pc, #52]	; (800b8b0 <netif_do_set_gw+0x5c>)
 800b87c:	480d      	ldr	r0, [pc, #52]	; (800b8b4 <netif_do_set_gw+0x60>)
 800b87e:	f006 fd83 	bl	8012388 <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	330c      	adds	r3, #12
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <netif_do_set_gw+0x44>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	e000      	b.n	800b89a <netif_do_set_gw+0x46>
 800b898:	2300      	movs	r3, #0
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e000      	b.n	800b8a4 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	08013e5c 	.word	0x08013e5c
 800b8b0:	08013fc4 	.word	0x08013fc4
 800b8b4:	08013efc 	.word	0x08013efc

0800b8b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08e      	sub	sp, #56	; 0x38
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	86fb      	strh	r3, [r7, #54]	; 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 800b8ca:	f107 0318 	add.w	r3, r7, #24
 800b8ce:	633b      	str	r3, [r7, #48]	; 0x30
  ip_addr_t *old_gw = &old_gw_val;
 800b8d0:	f107 0314 	add.w	r3, r7, #20
 800b8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 800b8dc:	4b36      	ldr	r3, [pc, #216]	; (800b9b8 <netif_set_addr+0x100>)
 800b8de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 800b8e6:	4b34      	ldr	r3, [pc, #208]	; (800b9b8 <netif_set_addr+0x100>)
 800b8e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 800b8f0:	4b31      	ldr	r3, [pc, #196]	; (800b9b8 <netif_set_addr+0x100>)
 800b8f2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <netif_set_addr+0x4a>
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <netif_set_addr+0x4e>
 800b902:	2301      	movs	r3, #1
 800b904:	e000      	b.n	800b908 <netif_set_addr+0x50>
 800b906:	2300      	movs	r3, #0
 800b908:	62bb      	str	r3, [r7, #40]	; 0x28
  if (remove) {
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d010      	beq.n	800b932 <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b910:	f107 0310 	add.w	r3, r7, #16
 800b914:	461a      	mov	r2, r3
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f7ff ff17 	bl	800b74c <netif_do_set_ipaddr>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d006      	beq.n	800b932 <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800b924:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b926:	f043 0310 	orr.w	r3, r3, #16
 800b92a:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800b92c:	f107 0310 	add.w	r3, r7, #16
 800b930:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff ff5a 	bl	800b7f0 <netif_do_set_netmask>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d005      	beq.n	800b94e <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 800b942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b948:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b94e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f7ff ff7e 	bl	800b854 <netif_do_set_gw>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 800b95e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b960:	f043 0320 	orr.w	r3, r3, #32
 800b964:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  }
  if (!remove) {
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d110      	bne.n	800b992 <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b970:	f107 0310 	add.w	r3, r7, #16
 800b974:	461a      	mov	r2, r3
 800b976:	68b9      	ldr	r1, [r7, #8]
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fee7 	bl	800b74c <netif_do_set_ipaddr>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d006      	beq.n	800b992 <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800b984:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b986:	f043 0310 	orr.w	r3, r3, #16
 800b98a:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800b98c:	f107 0310 	add.w	r3, r7, #16
 800b990:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 800b992:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00a      	beq.n	800b9ae <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 800b998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99e:	86fb      	strh	r3, [r7, #54]	; 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 800b9a0:	f107 021c 	add.w	r2, r7, #28
 800b9a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 f997 	bl	800bcdc <netif_invoke_ext_callback>
  }
#endif
}
 800b9ae:	bf00      	nop
 800b9b0:	3738      	adds	r7, #56	; 0x38
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	080160c0 	.word	0x080160c0

0800b9bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b9c4:	4a04      	ldr	r2, [pc, #16]	; (800b9d8 <netif_set_default+0x1c>)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	24008220 	.word	0x24008220

0800b9dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d107      	bne.n	800b9fa <netif_set_up+0x1e>
 800b9ea:	4b18      	ldr	r3, [pc, #96]	; (800ba4c <netif_set_up+0x70>)
 800b9ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b9f0:	4917      	ldr	r1, [pc, #92]	; (800ba50 <netif_set_up+0x74>)
 800b9f2:	4818      	ldr	r0, [pc, #96]	; (800ba54 <netif_set_up+0x78>)
 800b9f4:	f006 fcc8 	bl	8012388 <iprintf>
 800b9f8:	e024      	b.n	800ba44 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d11d      	bne.n	800ba44 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba0e:	f043 0301 	orr.w	r3, r3, #1
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <netif_set_up+0x4e>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800ba2e:	f107 030c 	add.w	r3, r7, #12
 800ba32:	461a      	mov	r2, r3
 800ba34:	2108      	movs	r1, #8
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f950 	bl	800bcdc <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba3c:	2103      	movs	r1, #3
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f80a 	bl	800ba58 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	08013e5c 	.word	0x08013e5c
 800ba50:	08014034 	.word	0x08014034
 800ba54:	08013efc 	.word	0x08013efc

0800ba58 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <netif_issue_reports+0x20>
 800ba6a:	4b18      	ldr	r3, [pc, #96]	; (800bacc <netif_issue_reports+0x74>)
 800ba6c:	f240 326d 	movw	r2, #877	; 0x36d
 800ba70:	4917      	ldr	r1, [pc, #92]	; (800bad0 <netif_issue_reports+0x78>)
 800ba72:	4818      	ldr	r0, [pc, #96]	; (800bad4 <netif_issue_reports+0x7c>)
 800ba74:	f006 fc88 	bl	8012388 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba7e:	f003 0304 	and.w	r3, r3, #4
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d01e      	beq.n	800bac4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba8c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d017      	beq.n	800bac4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba94:	78fb      	ldrb	r3, [r7, #3]
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d013      	beq.n	800bac6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3304      	adds	r3, #4
 800baa2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00e      	beq.n	800bac6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800baae:	f003 0308 	and.w	r3, r3, #8
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d007      	beq.n	800bac6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3304      	adds	r3, #4
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7fd fc07 	bl	80092d0 <etharp_request>
 800bac2:	e000      	b.n	800bac6 <netif_issue_reports+0x6e>
    return;
 800bac4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	08013e5c 	.word	0x08013e5c
 800bad0:	08014050 	.word	0x08014050
 800bad4:	08013efc 	.word	0x08013efc

0800bad8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d107      	bne.n	800baf6 <netif_set_down+0x1e>
 800bae6:	4b1b      	ldr	r3, [pc, #108]	; (800bb54 <netif_set_down+0x7c>)
 800bae8:	f240 329b 	movw	r2, #923	; 0x39b
 800baec:	491a      	ldr	r1, [pc, #104]	; (800bb58 <netif_set_down+0x80>)
 800baee:	481b      	ldr	r0, [pc, #108]	; (800bb5c <netif_set_down+0x84>)
 800baf0:	f006 fc4a 	bl	8012388 <iprintf>
 800baf4:	e02a      	b.n	800bb4c <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d023      	beq.n	800bb4c <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800bb08:	f107 030c 	add.w	r3, r7, #12
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	2108      	movs	r1, #8
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f8e3 	bl	800bcdc <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb1c:	f023 0301 	bic.w	r3, r3, #1
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7fc ff88 	bl	8008a4c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	69db      	ldr	r3, [r3, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <netif_set_down+0x74>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	4798      	blx	r3
  }
}
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	08013e5c 	.word	0x08013e5c
 800bb58:	08014074 	.word	0x08014074
 800bb5c:	08013efc 	.word	0x08013efc

0800bb60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d107      	bne.n	800bb7e <netif_set_link_up+0x1e>
 800bb6e:	4b18      	ldr	r3, [pc, #96]	; (800bbd0 <netif_set_link_up+0x70>)
 800bb70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bb74:	4917      	ldr	r1, [pc, #92]	; (800bbd4 <netif_set_link_up+0x74>)
 800bb76:	4818      	ldr	r0, [pc, #96]	; (800bbd8 <netif_set_link_up+0x78>)
 800bb78:	f006 fc06 	bl	8012388 <iprintf>
 800bb7c:	e024      	b.n	800bbc8 <netif_set_link_up+0x68>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d11d      	bne.n	800bbc8 <netif_set_link_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb92:	f043 0304 	orr.w	r3, r3, #4
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb9e:	2103      	movs	r1, #3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff ff59 	bl	800ba58 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <netif_set_link_up+0x56>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800bbba:	f107 030c 	add.w	r3, r7, #12
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	2104      	movs	r1, #4
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f88a 	bl	800bcdc <netif_invoke_ext_callback>
    }
#endif
  }
}
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	08013e5c 	.word	0x08013e5c
 800bbd4:	08014094 	.word	0x08014094
 800bbd8:	08013efc 	.word	0x08013efc

0800bbdc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d107      	bne.n	800bbfa <netif_set_link_down+0x1e>
 800bbea:	4b16      	ldr	r3, [pc, #88]	; (800bc44 <netif_set_link_down+0x68>)
 800bbec:	f240 4206 	movw	r2, #1030	; 0x406
 800bbf0:	4915      	ldr	r1, [pc, #84]	; (800bc48 <netif_set_link_down+0x6c>)
 800bbf2:	4816      	ldr	r0, [pc, #88]	; (800bc4c <netif_set_link_down+0x70>)
 800bbf4:	f006 fbc8 	bl	8012388 <iprintf>
 800bbf8:	e020      	b.n	800bc3c <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d019      	beq.n	800bc3c <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc0e:	f023 0304 	bic.w	r3, r3, #4
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <netif_set_link_down+0x4e>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800bc2e:	f107 030c 	add.w	r3, r7, #12
 800bc32:	461a      	mov	r2, r3
 800bc34:	2104      	movs	r1, #4
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f850 	bl	800bcdc <netif_invoke_ext_callback>
    }
#endif
  }
}
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08013e5c 	.word	0x08013e5c
 800bc48:	080140b8 	.word	0x080140b8
 800bc4c:	08013efc 	.word	0x08013efc

0800bc50 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	621a      	str	r2, [r3, #32]
  }
}
 800bc66:	bf00      	nop
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b085      	sub	sp, #20
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bc7e:	f06f 030b 	mvn.w	r3, #11
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
	...

0800bc90 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bc9a:	79fb      	ldrb	r3, [r7, #7]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d013      	beq.n	800bcc8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bca0:	4b0d      	ldr	r3, [pc, #52]	; (800bcd8 <netif_get_by_index+0x48>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	e00c      	b.n	800bcc2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcae:	3301      	adds	r3, #1
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	79fa      	ldrb	r2, [r7, #7]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d101      	bne.n	800bcbc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	e006      	b.n	800bcca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1ef      	bne.n	800bca8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	2400821c 	.word	0x2400821c

0800bcdc <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	460b      	mov	r3, r1
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 800bcea:	4b0f      	ldr	r3, [pc, #60]	; (800bd28 <netif_invoke_ext_callback+0x4c>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d110      	bne.n	800bd18 <netif_invoke_ext_callback+0x3c>
 800bcf6:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <netif_invoke_ext_callback+0x50>)
 800bcf8:	f240 62fc 	movw	r2, #1788	; 0x6fc
 800bcfc:	490c      	ldr	r1, [pc, #48]	; (800bd30 <netif_invoke_ext_callback+0x54>)
 800bcfe:	480d      	ldr	r0, [pc, #52]	; (800bd34 <netif_invoke_ext_callback+0x58>)
 800bd00:	f006 fb42 	bl	8012388 <iprintf>

  while (callback != NULL) {
 800bd04:	e008      	b.n	800bd18 <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	8979      	ldrh	r1, [r7, #10]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	4798      	blx	r3
    callback = callback->next;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f3      	bne.n	800bd06 <netif_invoke_ext_callback+0x2a>
  }
}
 800bd1e:	bf00      	nop
 800bd20:	bf00      	nop
 800bd22:	3718      	adds	r7, #24
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	24008218 	.word	0x24008218
 800bd2c:	08013e5c 	.word	0x08013e5c
 800bd30:	0801411c 	.word	0x0801411c
 800bd34:	08013efc 	.word	0x08013efc

0800bd38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bd3e:	4b0c      	ldr	r3, [pc, #48]	; (800bd70 <pbuf_free_ooseq+0x38>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd44:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <pbuf_free_ooseq+0x3c>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	e00a      	b.n	800bd62 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d003      	beq.n	800bd5c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f002 f93d 	bl	800dfd4 <tcp_free_ooseq>
      return;
 800bd5a:	e005      	b.n	800bd68 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1f1      	bne.n	800bd4c <pbuf_free_ooseq+0x14>
    }
  }
}
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	24008225 	.word	0x24008225
 800bd74:	24008234 	.word	0x24008234

0800bd78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bd7c:	4b03      	ldr	r3, [pc, #12]	; (800bd8c <pbuf_pool_is_empty+0x14>)
 800bd7e:	2201      	movs	r2, #1
 800bd80:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bd82:	bf00      	nop
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	24008225 	.word	0x24008225

0800bd90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	460b      	mov	r3, r1
 800bda0:	80fb      	strh	r3, [r7, #6]
 800bda2:	4613      	mov	r3, r2
 800bda4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	88fa      	ldrh	r2, [r7, #6]
 800bdb6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	88ba      	ldrh	r2, [r7, #4]
 800bdbc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bdbe:	8b3b      	ldrh	r3, [r7, #24]
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	7f3a      	ldrb	r2, [r7, #28]
 800bdca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	73da      	strb	r2, [r3, #15]
}
 800bdd8:	bf00      	nop
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08c      	sub	sp, #48	; 0x30
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	4603      	mov	r3, r0
 800bdec:	71fb      	strb	r3, [r7, #7]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	80bb      	strh	r3, [r7, #4]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bdf6:	79fb      	ldrb	r3, [r7, #7]
 800bdf8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bdfa:	887b      	ldrh	r3, [r7, #2]
 800bdfc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800be00:	d07f      	beq.n	800bf02 <pbuf_alloc+0x11e>
 800be02:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800be06:	f300 80c8 	bgt.w	800bf9a <pbuf_alloc+0x1b6>
 800be0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800be0e:	d010      	beq.n	800be32 <pbuf_alloc+0x4e>
 800be10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800be14:	f300 80c1 	bgt.w	800bf9a <pbuf_alloc+0x1b6>
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d002      	beq.n	800be22 <pbuf_alloc+0x3e>
 800be1c:	2b41      	cmp	r3, #65	; 0x41
 800be1e:	f040 80bc 	bne.w	800bf9a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	88bb      	ldrh	r3, [r7, #4]
 800be26:	4619      	mov	r1, r3
 800be28:	2000      	movs	r0, #0
 800be2a:	f000 f8d1 	bl	800bfd0 <pbuf_alloc_reference>
 800be2e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800be30:	e0bd      	b.n	800bfae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800be32:	2300      	movs	r3, #0
 800be34:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800be36:	2300      	movs	r3, #0
 800be38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800be3a:	88bb      	ldrh	r3, [r7, #4]
 800be3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be3e:	2008      	movs	r0, #8
 800be40:	f7ff fafa 	bl	800b438 <memp_malloc>
 800be44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d109      	bne.n	800be60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800be4c:	f7ff ff94 	bl	800bd78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <pbuf_alloc+0x78>
            pbuf_free(p);
 800be56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be58:	f000 faa8 	bl	800c3ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800be5c:	2300      	movs	r3, #0
 800be5e:	e0a7      	b.n	800bfb0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800be60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be62:	3303      	adds	r3, #3
 800be64:	b29b      	uxth	r3, r3
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800be70:	b29b      	uxth	r3, r3
 800be72:	8b7a      	ldrh	r2, [r7, #26]
 800be74:	4293      	cmp	r3, r2
 800be76:	bf28      	it	cs
 800be78:	4613      	movcs	r3, r2
 800be7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800be7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be7e:	3310      	adds	r3, #16
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	4413      	add	r3, r2
 800be84:	3303      	adds	r3, #3
 800be86:	f023 0303 	bic.w	r3, r3, #3
 800be8a:	4618      	mov	r0, r3
 800be8c:	89f9      	ldrh	r1, [r7, #14]
 800be8e:	8b7a      	ldrh	r2, [r7, #26]
 800be90:	2300      	movs	r3, #0
 800be92:	9301      	str	r3, [sp, #4]
 800be94:	887b      	ldrh	r3, [r7, #2]
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	460b      	mov	r3, r1
 800be9a:	4601      	mov	r1, r0
 800be9c:	6938      	ldr	r0, [r7, #16]
 800be9e:	f7ff ff77 	bl	800bd90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f003 0303 	and.w	r3, r3, #3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d006      	beq.n	800bebc <pbuf_alloc+0xd8>
 800beae:	4b42      	ldr	r3, [pc, #264]	; (800bfb8 <pbuf_alloc+0x1d4>)
 800beb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800beb4:	4941      	ldr	r1, [pc, #260]	; (800bfbc <pbuf_alloc+0x1d8>)
 800beb6:	4842      	ldr	r0, [pc, #264]	; (800bfc0 <pbuf_alloc+0x1dc>)
 800beb8:	f006 fa66 	bl	8012388 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bebe:	3303      	adds	r3, #3
 800bec0:	f023 0303 	bic.w	r3, r3, #3
 800bec4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bec8:	d106      	bne.n	800bed8 <pbuf_alloc+0xf4>
 800beca:	4b3b      	ldr	r3, [pc, #236]	; (800bfb8 <pbuf_alloc+0x1d4>)
 800becc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bed0:	493c      	ldr	r1, [pc, #240]	; (800bfc4 <pbuf_alloc+0x1e0>)
 800bed2:	483b      	ldr	r0, [pc, #236]	; (800bfc0 <pbuf_alloc+0x1dc>)
 800bed4:	f006 fa58 	bl	8012388 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	627b      	str	r3, [r7, #36]	; 0x24
 800bee2:	e002      	b.n	800beea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800beee:	8b7a      	ldrh	r2, [r7, #26]
 800bef0:	89fb      	ldrh	r3, [r7, #14]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800befa:	8b7b      	ldrh	r3, [r7, #26]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d19e      	bne.n	800be3e <pbuf_alloc+0x5a>
      break;
 800bf00:	e055      	b.n	800bfae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bf02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf04:	3303      	adds	r3, #3
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f023 0303 	bic.w	r3, r3, #3
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	88bb      	ldrh	r3, [r7, #4]
 800bf10:	3303      	adds	r3, #3
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	f023 0303 	bic.w	r3, r3, #3
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	4413      	add	r3, r2
 800bf1c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bf1e:	8b3b      	ldrh	r3, [r7, #24]
 800bf20:	3310      	adds	r3, #16
 800bf22:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf24:	8b3a      	ldrh	r2, [r7, #24]
 800bf26:	88bb      	ldrh	r3, [r7, #4]
 800bf28:	3303      	adds	r3, #3
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d306      	bcc.n	800bf40 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bf32:	8afa      	ldrh	r2, [r7, #22]
 800bf34:	88bb      	ldrh	r3, [r7, #4]
 800bf36:	3303      	adds	r3, #3
 800bf38:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d201      	bcs.n	800bf44 <pbuf_alloc+0x160>
        return NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e035      	b.n	800bfb0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bf44:	8afb      	ldrh	r3, [r7, #22]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff f8e6 	bl	800b118 <mem_malloc>
 800bf4c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <pbuf_alloc+0x174>
        return NULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	e02b      	b.n	800bfb0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bf58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5e:	4413      	add	r3, r2
 800bf60:	3303      	adds	r3, #3
 800bf62:	f023 0303 	bic.w	r3, r3, #3
 800bf66:	4618      	mov	r0, r3
 800bf68:	88b9      	ldrh	r1, [r7, #4]
 800bf6a:	88ba      	ldrh	r2, [r7, #4]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9301      	str	r3, [sp, #4]
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	460b      	mov	r3, r1
 800bf76:	4601      	mov	r1, r0
 800bf78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf7a:	f7ff ff09 	bl	800bd90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d010      	beq.n	800bfac <pbuf_alloc+0x1c8>
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <pbuf_alloc+0x1d4>)
 800bf8c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bf90:	490d      	ldr	r1, [pc, #52]	; (800bfc8 <pbuf_alloc+0x1e4>)
 800bf92:	480b      	ldr	r0, [pc, #44]	; (800bfc0 <pbuf_alloc+0x1dc>)
 800bf94:	f006 f9f8 	bl	8012388 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bf98:	e008      	b.n	800bfac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bf9a:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <pbuf_alloc+0x1d4>)
 800bf9c:	f240 1227 	movw	r2, #295	; 0x127
 800bfa0:	490a      	ldr	r1, [pc, #40]	; (800bfcc <pbuf_alloc+0x1e8>)
 800bfa2:	4807      	ldr	r0, [pc, #28]	; (800bfc0 <pbuf_alloc+0x1dc>)
 800bfa4:	f006 f9f0 	bl	8012388 <iprintf>
      return NULL;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	e001      	b.n	800bfb0 <pbuf_alloc+0x1cc>
      break;
 800bfac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3728      	adds	r7, #40	; 0x28
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	08014134 	.word	0x08014134
 800bfbc:	080141b8 	.word	0x080141b8
 800bfc0:	080141e8 	.word	0x080141e8
 800bfc4:	08014210 	.word	0x08014210
 800bfc8:	08014244 	.word	0x08014244
 800bfcc:	08014270 	.word	0x08014270

0800bfd0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af02      	add	r7, sp, #8
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	807b      	strh	r3, [r7, #2]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bfe0:	883b      	ldrh	r3, [r7, #0]
 800bfe2:	2b41      	cmp	r3, #65	; 0x41
 800bfe4:	d009      	beq.n	800bffa <pbuf_alloc_reference+0x2a>
 800bfe6:	883b      	ldrh	r3, [r7, #0]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d006      	beq.n	800bffa <pbuf_alloc_reference+0x2a>
 800bfec:	4b0f      	ldr	r3, [pc, #60]	; (800c02c <pbuf_alloc_reference+0x5c>)
 800bfee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bff2:	490f      	ldr	r1, [pc, #60]	; (800c030 <pbuf_alloc_reference+0x60>)
 800bff4:	480f      	ldr	r0, [pc, #60]	; (800c034 <pbuf_alloc_reference+0x64>)
 800bff6:	f006 f9c7 	bl	8012388 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bffa:	2007      	movs	r0, #7
 800bffc:	f7ff fa1c 	bl	800b438 <memp_malloc>
 800c000:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	e00b      	b.n	800c024 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c00c:	8879      	ldrh	r1, [r7, #2]
 800c00e:	887a      	ldrh	r2, [r7, #2]
 800c010:	2300      	movs	r3, #0
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	883b      	ldrh	r3, [r7, #0]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	460b      	mov	r3, r1
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff feb7 	bl	800bd90 <pbuf_init_alloced_pbuf>
  return p;
 800c022:	68fb      	ldr	r3, [r7, #12]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	08014134 	.word	0x08014134
 800c030:	0801428c 	.word	0x0801428c
 800c034:	080141e8 	.word	0x080141e8

0800c038 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	607b      	str	r3, [r7, #4]
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]
 800c044:	460b      	mov	r3, r1
 800c046:	81bb      	strh	r3, [r7, #12]
 800c048:	4613      	mov	r3, r2
 800c04a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c050:	8a7b      	ldrh	r3, [r7, #18]
 800c052:	3303      	adds	r3, #3
 800c054:	f023 0203 	bic.w	r2, r3, #3
 800c058:	89bb      	ldrh	r3, [r7, #12]
 800c05a:	441a      	add	r2, r3
 800c05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c05e:	429a      	cmp	r2, r3
 800c060:	d901      	bls.n	800c066 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c062:	2300      	movs	r3, #0
 800c064:	e018      	b.n	800c098 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d007      	beq.n	800c07c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c06c:	8a7b      	ldrh	r3, [r7, #18]
 800c06e:	3303      	adds	r3, #3
 800c070:	f023 0303 	bic.w	r3, r3, #3
 800c074:	6a3a      	ldr	r2, [r7, #32]
 800c076:	4413      	add	r3, r2
 800c078:	617b      	str	r3, [r7, #20]
 800c07a:	e001      	b.n	800c080 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c07c:	2300      	movs	r3, #0
 800c07e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	89b9      	ldrh	r1, [r7, #12]
 800c084:	89ba      	ldrh	r2, [r7, #12]
 800c086:	2302      	movs	r3, #2
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	897b      	ldrh	r3, [r7, #10]
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	460b      	mov	r3, r1
 800c090:	6979      	ldr	r1, [r7, #20]
 800c092:	f7ff fe7d 	bl	800bd90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c096:	687b      	ldr	r3, [r7, #4]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <pbuf_realloc+0x20>
 800c0b2:	4b3a      	ldr	r3, [pc, #232]	; (800c19c <pbuf_realloc+0xfc>)
 800c0b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c0b8:	4939      	ldr	r1, [pc, #228]	; (800c1a0 <pbuf_realloc+0x100>)
 800c0ba:	483a      	ldr	r0, [pc, #232]	; (800c1a4 <pbuf_realloc+0x104>)
 800c0bc:	f006 f964 	bl	8012388 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	891b      	ldrh	r3, [r3, #8]
 800c0c4:	887a      	ldrh	r2, [r7, #2]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d263      	bcs.n	800c192 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	891a      	ldrh	r2, [r3, #8]
 800c0ce:	887b      	ldrh	r3, [r7, #2]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c0d4:	887b      	ldrh	r3, [r7, #2]
 800c0d6:	817b      	strh	r3, [r7, #10]
  q = p;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c0dc:	e018      	b.n	800c110 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	895b      	ldrh	r3, [r3, #10]
 800c0e2:	897a      	ldrh	r2, [r7, #10]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	891a      	ldrh	r2, [r3, #8]
 800c0ec:	893b      	ldrh	r3, [r7, #8]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <pbuf_realloc+0x70>
 800c102:	4b26      	ldr	r3, [pc, #152]	; (800c19c <pbuf_realloc+0xfc>)
 800c104:	f240 12af 	movw	r2, #431	; 0x1af
 800c108:	4927      	ldr	r1, [pc, #156]	; (800c1a8 <pbuf_realloc+0x108>)
 800c10a:	4826      	ldr	r0, [pc, #152]	; (800c1a4 <pbuf_realloc+0x104>)
 800c10c:	f006 f93c 	bl	8012388 <iprintf>
  while (rem_len > q->len) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	895b      	ldrh	r3, [r3, #10]
 800c114:	897a      	ldrh	r2, [r7, #10]
 800c116:	429a      	cmp	r2, r3
 800c118:	d8e1      	bhi.n	800c0de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	7b1b      	ldrb	r3, [r3, #12]
 800c11e:	f003 030f 	and.w	r3, r3, #15
 800c122:	2b00      	cmp	r3, #0
 800c124:	d121      	bne.n	800c16a <pbuf_realloc+0xca>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	895b      	ldrh	r3, [r3, #10]
 800c12a:	897a      	ldrh	r2, [r7, #10]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d01c      	beq.n	800c16a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	7b5b      	ldrb	r3, [r3, #13]
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d116      	bne.n	800c16a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	b29a      	uxth	r2, r3
 800c146:	897b      	ldrh	r3, [r7, #10]
 800c148:	4413      	add	r3, r2
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	4619      	mov	r1, r3
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7fe fee6 	bl	800af20 <mem_trim>
 800c154:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d106      	bne.n	800c16a <pbuf_realloc+0xca>
 800c15c:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <pbuf_realloc+0xfc>)
 800c15e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c162:	4912      	ldr	r1, [pc, #72]	; (800c1ac <pbuf_realloc+0x10c>)
 800c164:	480f      	ldr	r0, [pc, #60]	; (800c1a4 <pbuf_realloc+0x104>)
 800c166:	f006 f90f 	bl	8012388 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	897a      	ldrh	r2, [r7, #10]
 800c16e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	895a      	ldrh	r2, [r3, #10]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d004      	beq.n	800c18a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 f911 	bl	800c3ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	e000      	b.n	800c194 <pbuf_realloc+0xf4>
    return;
 800c192:	bf00      	nop

}
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	08014134 	.word	0x08014134
 800c1a0:	080142a0 	.word	0x080142a0
 800c1a4:	080141e8 	.word	0x080141e8
 800c1a8:	080142b8 	.word	0x080142b8
 800c1ac:	080142d0 	.word	0x080142d0

0800c1b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d106      	bne.n	800c1d2 <pbuf_add_header_impl+0x22>
 800c1c4:	4b2b      	ldr	r3, [pc, #172]	; (800c274 <pbuf_add_header_impl+0xc4>)
 800c1c6:	f240 12df 	movw	r2, #479	; 0x1df
 800c1ca:	492b      	ldr	r1, [pc, #172]	; (800c278 <pbuf_add_header_impl+0xc8>)
 800c1cc:	482b      	ldr	r0, [pc, #172]	; (800c27c <pbuf_add_header_impl+0xcc>)
 800c1ce:	f006 f8db 	bl	8012388 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d003      	beq.n	800c1e0 <pbuf_add_header_impl+0x30>
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1de:	d301      	bcc.n	800c1e4 <pbuf_add_header_impl+0x34>
    return 1;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e043      	b.n	800c26c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <pbuf_add_header_impl+0x3e>
    return 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e03e      	b.n	800c26c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	891a      	ldrh	r2, [r3, #8]
 800c1f6:	8a7b      	ldrh	r3, [r7, #18]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	8a7a      	ldrh	r2, [r7, #18]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d901      	bls.n	800c206 <pbuf_add_header_impl+0x56>
    return 1;
 800c202:	2301      	movs	r3, #1
 800c204:	e032      	b.n	800c26c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	7b1b      	ldrb	r3, [r3, #12]
 800c20a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c20c:	8a3b      	ldrh	r3, [r7, #16]
 800c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00c      	beq.n	800c230 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	425b      	negs	r3, r3
 800c21e:	4413      	add	r3, r2
 800c220:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3310      	adds	r3, #16
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d20d      	bcs.n	800c248 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e01d      	b.n	800c26c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c230:	79fb      	ldrb	r3, [r7, #7]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d006      	beq.n	800c244 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	425b      	negs	r3, r3
 800c23e:	4413      	add	r3, r2
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	e001      	b.n	800c248 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c244:	2301      	movs	r3, #1
 800c246:	e011      	b.n	800c26c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	895a      	ldrh	r2, [r3, #10]
 800c252:	8a7b      	ldrh	r3, [r7, #18]
 800c254:	4413      	add	r3, r2
 800c256:	b29a      	uxth	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	891a      	ldrh	r2, [r3, #8]
 800c260:	8a7b      	ldrh	r3, [r7, #18]
 800c262:	4413      	add	r3, r2
 800c264:	b29a      	uxth	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	811a      	strh	r2, [r3, #8]


  return 0;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	08014134 	.word	0x08014134
 800c278:	080142ec 	.word	0x080142ec
 800c27c:	080141e8 	.word	0x080141e8

0800c280 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c28a:	2200      	movs	r2, #0
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff ff8e 	bl	800c1b0 <pbuf_add_header_impl>
 800c294:	4603      	mov	r3, r0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
	...

0800c2a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <pbuf_remove_header+0x1e>
 800c2b0:	4b20      	ldr	r3, [pc, #128]	; (800c334 <pbuf_remove_header+0x94>)
 800c2b2:	f240 224b 	movw	r2, #587	; 0x24b
 800c2b6:	4920      	ldr	r1, [pc, #128]	; (800c338 <pbuf_remove_header+0x98>)
 800c2b8:	4820      	ldr	r0, [pc, #128]	; (800c33c <pbuf_remove_header+0x9c>)
 800c2ba:	f006 f865 	bl	8012388 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <pbuf_remove_header+0x2c>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ca:	d301      	bcc.n	800c2d0 <pbuf_remove_header+0x30>
    return 1;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e02c      	b.n	800c32a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <pbuf_remove_header+0x3a>
    return 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e027      	b.n	800c32a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	895b      	ldrh	r3, [r3, #10]
 800c2e2:	89fa      	ldrh	r2, [r7, #14]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d908      	bls.n	800c2fa <pbuf_remove_header+0x5a>
 800c2e8:	4b12      	ldr	r3, [pc, #72]	; (800c334 <pbuf_remove_header+0x94>)
 800c2ea:	f240 2255 	movw	r2, #597	; 0x255
 800c2ee:	4914      	ldr	r1, [pc, #80]	; (800c340 <pbuf_remove_header+0xa0>)
 800c2f0:	4812      	ldr	r0, [pc, #72]	; (800c33c <pbuf_remove_header+0x9c>)
 800c2f2:	f006 f849 	bl	8012388 <iprintf>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e017      	b.n	800c32a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	441a      	add	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	895a      	ldrh	r2, [r3, #10]
 800c310:	89fb      	ldrh	r3, [r7, #14]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	b29a      	uxth	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	891a      	ldrh	r2, [r3, #8]
 800c31e:	89fb      	ldrh	r3, [r7, #14]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	08014134 	.word	0x08014134
 800c338:	080142ec 	.word	0x080142ec
 800c33c:	080141e8 	.word	0x080141e8
 800c340:	080142f8 	.word	0x080142f8

0800c344 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	460b      	mov	r3, r1
 800c34e:	807b      	strh	r3, [r7, #2]
 800c350:	4613      	mov	r3, r2
 800c352:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da08      	bge.n	800c36e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c35c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c360:	425b      	negs	r3, r3
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff ff9b 	bl	800c2a0 <pbuf_remove_header>
 800c36a:	4603      	mov	r3, r0
 800c36c:	e007      	b.n	800c37e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c36e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c372:	787a      	ldrb	r2, [r7, #1]
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff ff1a 	bl	800c1b0 <pbuf_add_header_impl>
 800c37c:	4603      	mov	r3, r0
  }
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b082      	sub	sp, #8
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	460b      	mov	r3, r1
 800c390:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c396:	2201      	movs	r2, #1
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff ffd2 	bl	800c344 <pbuf_header_impl>
 800c3a0:	4603      	mov	r3, r0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
	...

0800c3ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10b      	bne.n	800c3d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d106      	bne.n	800c3ce <pbuf_free+0x22>
 800c3c0:	4b38      	ldr	r3, [pc, #224]	; (800c4a4 <pbuf_free+0xf8>)
 800c3c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c3c6:	4938      	ldr	r1, [pc, #224]	; (800c4a8 <pbuf_free+0xfc>)
 800c3c8:	4838      	ldr	r0, [pc, #224]	; (800c4ac <pbuf_free+0x100>)
 800c3ca:	f005 ffdd 	bl	8012388 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e063      	b.n	800c49a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c3d6:	e05c      	b.n	800c492 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	7b9b      	ldrb	r3, [r3, #14]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <pbuf_free+0x42>
 800c3e0:	4b30      	ldr	r3, [pc, #192]	; (800c4a4 <pbuf_free+0xf8>)
 800c3e2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c3e6:	4932      	ldr	r1, [pc, #200]	; (800c4b0 <pbuf_free+0x104>)
 800c3e8:	4830      	ldr	r0, [pc, #192]	; (800c4ac <pbuf_free+0x100>)
 800c3ea:	f005 ffcd 	bl	8012388 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	7b9b      	ldrb	r3, [r3, #14]
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	739a      	strb	r2, [r3, #14]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7b9b      	ldrb	r3, [r3, #14]
 800c3fe:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c400:	7dbb      	ldrb	r3, [r7, #22]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d143      	bne.n	800c48e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	7b1b      	ldrb	r3, [r3, #12]
 800c410:	f003 030f 	and.w	r3, r3, #15
 800c414:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7b5b      	ldrb	r3, [r3, #13]
 800c41a:	f003 0302 	and.w	r3, r3, #2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d011      	beq.n	800c446 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <pbuf_free+0x90>
 800c42e:	4b1d      	ldr	r3, [pc, #116]	; (800c4a4 <pbuf_free+0xf8>)
 800c430:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c434:	491f      	ldr	r1, [pc, #124]	; (800c4b4 <pbuf_free+0x108>)
 800c436:	481d      	ldr	r0, [pc, #116]	; (800c4ac <pbuf_free+0x100>)
 800c438:	f005 ffa6 	bl	8012388 <iprintf>
        pc->custom_free_function(p);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	4798      	blx	r3
 800c444:	e01d      	b.n	800c482 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d104      	bne.n	800c456 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	2008      	movs	r0, #8
 800c450:	f7ff f862 	bl	800b518 <memp_free>
 800c454:	e015      	b.n	800c482 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d104      	bne.n	800c466 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	2007      	movs	r0, #7
 800c460:	f7ff f85a 	bl	800b518 <memp_free>
 800c464:	e00d      	b.n	800c482 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d103      	bne.n	800c474 <pbuf_free+0xc8>
          mem_free(p);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7fe fced 	bl	800ae4c <mem_free>
 800c472:	e006      	b.n	800c482 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c474:	4b0b      	ldr	r3, [pc, #44]	; (800c4a4 <pbuf_free+0xf8>)
 800c476:	f240 320f 	movw	r2, #783	; 0x30f
 800c47a:	490f      	ldr	r1, [pc, #60]	; (800c4b8 <pbuf_free+0x10c>)
 800c47c:	480b      	ldr	r0, [pc, #44]	; (800c4ac <pbuf_free+0x100>)
 800c47e:	f005 ff83 	bl	8012388 <iprintf>
        }
      }
      count++;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	3301      	adds	r3, #1
 800c486:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	e001      	b.n	800c492 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d19f      	bne.n	800c3d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c498:	7dfb      	ldrb	r3, [r7, #23]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	08014134 	.word	0x08014134
 800c4a8:	080142ec 	.word	0x080142ec
 800c4ac:	080141e8 	.word	0x080141e8
 800c4b0:	08014318 	.word	0x08014318
 800c4b4:	08014330 	.word	0x08014330
 800c4b8:	08014354 	.word	0x08014354

0800c4bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c4c8:	e005      	b.n	800c4d6 <pbuf_clen+0x1a>
    ++len;
 800c4ca:	89fb      	ldrh	r3, [r7, #14]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f6      	bne.n	800c4ca <pbuf_clen+0xe>
  }
  return len;
 800c4dc:	89fb      	ldrh	r3, [r7, #14]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
	...

0800c4ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d010      	beq.n	800c51c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7b9b      	ldrb	r3, [r3, #14]
 800c4fe:	3301      	adds	r3, #1
 800c500:	b2da      	uxtb	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7b9b      	ldrb	r3, [r3, #14]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <pbuf_ref+0x30>
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <pbuf_ref+0x38>)
 800c510:	f240 3242 	movw	r2, #834	; 0x342
 800c514:	4904      	ldr	r1, [pc, #16]	; (800c528 <pbuf_ref+0x3c>)
 800c516:	4805      	ldr	r0, [pc, #20]	; (800c52c <pbuf_ref+0x40>)
 800c518:	f005 ff36 	bl	8012388 <iprintf>
  }
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	08014134 	.word	0x08014134
 800c528:	08014368 	.word	0x08014368
 800c52c:	080141e8 	.word	0x080141e8

0800c530 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <pbuf_cat+0x16>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d107      	bne.n	800c556 <pbuf_cat+0x26>
 800c546:	4b20      	ldr	r3, [pc, #128]	; (800c5c8 <pbuf_cat+0x98>)
 800c548:	f240 3259 	movw	r2, #857	; 0x359
 800c54c:	491f      	ldr	r1, [pc, #124]	; (800c5cc <pbuf_cat+0x9c>)
 800c54e:	4820      	ldr	r0, [pc, #128]	; (800c5d0 <pbuf_cat+0xa0>)
 800c550:	f005 ff1a 	bl	8012388 <iprintf>
 800c554:	e034      	b.n	800c5c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60fb      	str	r3, [r7, #12]
 800c55a:	e00a      	b.n	800c572 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	891a      	ldrh	r2, [r3, #8]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	891b      	ldrh	r3, [r3, #8]
 800c564:	4413      	add	r3, r2
 800c566:	b29a      	uxth	r2, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1f0      	bne.n	800c55c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	891a      	ldrh	r2, [r3, #8]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	895b      	ldrh	r3, [r3, #10]
 800c582:	429a      	cmp	r2, r3
 800c584:	d006      	beq.n	800c594 <pbuf_cat+0x64>
 800c586:	4b10      	ldr	r3, [pc, #64]	; (800c5c8 <pbuf_cat+0x98>)
 800c588:	f240 3262 	movw	r2, #866	; 0x362
 800c58c:	4911      	ldr	r1, [pc, #68]	; (800c5d4 <pbuf_cat+0xa4>)
 800c58e:	4810      	ldr	r0, [pc, #64]	; (800c5d0 <pbuf_cat+0xa0>)
 800c590:	f005 fefa 	bl	8012388 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d006      	beq.n	800c5aa <pbuf_cat+0x7a>
 800c59c:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <pbuf_cat+0x98>)
 800c59e:	f240 3263 	movw	r2, #867	; 0x363
 800c5a2:	490d      	ldr	r1, [pc, #52]	; (800c5d8 <pbuf_cat+0xa8>)
 800c5a4:	480a      	ldr	r0, [pc, #40]	; (800c5d0 <pbuf_cat+0xa0>)
 800c5a6:	f005 feef 	bl	8012388 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	891a      	ldrh	r2, [r3, #8]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	891b      	ldrh	r3, [r3, #8]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08014134 	.word	0x08014134
 800c5cc:	0801437c 	.word	0x0801437c
 800c5d0:	080141e8 	.word	0x080141e8
 800c5d4:	080143b4 	.word	0x080143b4
 800c5d8:	080143e4 	.word	0x080143e4

0800c5dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d008      	beq.n	800c606 <pbuf_copy+0x2a>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <pbuf_copy+0x2a>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	891a      	ldrh	r2, [r3, #8]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	891b      	ldrh	r3, [r3, #8]
 800c602:	429a      	cmp	r2, r3
 800c604:	d209      	bcs.n	800c61a <pbuf_copy+0x3e>
 800c606:	4b57      	ldr	r3, [pc, #348]	; (800c764 <pbuf_copy+0x188>)
 800c608:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c60c:	4956      	ldr	r1, [pc, #344]	; (800c768 <pbuf_copy+0x18c>)
 800c60e:	4857      	ldr	r0, [pc, #348]	; (800c76c <pbuf_copy+0x190>)
 800c610:	f005 feba 	bl	8012388 <iprintf>
 800c614:	f06f 030f 	mvn.w	r3, #15
 800c618:	e09f      	b.n	800c75a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	895b      	ldrh	r3, [r3, #10]
 800c61e:	461a      	mov	r2, r3
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	1ad2      	subs	r2, r2, r3
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	895b      	ldrh	r3, [r3, #10]
 800c628:	4619      	mov	r1, r3
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1acb      	subs	r3, r1, r3
 800c62e:	429a      	cmp	r2, r3
 800c630:	d306      	bcc.n	800c640 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	895b      	ldrh	r3, [r3, #10]
 800c636:	461a      	mov	r2, r3
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	60fb      	str	r3, [r7, #12]
 800c63e:	e005      	b.n	800c64c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	895b      	ldrh	r3, [r3, #10]
 800c644:	461a      	mov	r2, r3
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	18d0      	adds	r0, r2, r3
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	4413      	add	r3, r2
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4619      	mov	r1, r3
 800c660:	f005 ff6d 	bl	801253e <memcpy>
    offset_to += len;
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4413      	add	r3, r2
 800c66a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4413      	add	r3, r2
 800c672:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	895b      	ldrh	r3, [r3, #10]
 800c678:	461a      	mov	r2, r3
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d906      	bls.n	800c68e <pbuf_copy+0xb2>
 800c680:	4b38      	ldr	r3, [pc, #224]	; (800c764 <pbuf_copy+0x188>)
 800c682:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c686:	493a      	ldr	r1, [pc, #232]	; (800c770 <pbuf_copy+0x194>)
 800c688:	4838      	ldr	r0, [pc, #224]	; (800c76c <pbuf_copy+0x190>)
 800c68a:	f005 fe7d 	bl	8012388 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	895b      	ldrh	r3, [r3, #10]
 800c692:	461a      	mov	r2, r3
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	4293      	cmp	r3, r2
 800c698:	d906      	bls.n	800c6a8 <pbuf_copy+0xcc>
 800c69a:	4b32      	ldr	r3, [pc, #200]	; (800c764 <pbuf_copy+0x188>)
 800c69c:	f240 32da 	movw	r2, #986	; 0x3da
 800c6a0:	4934      	ldr	r1, [pc, #208]	; (800c774 <pbuf_copy+0x198>)
 800c6a2:	4832      	ldr	r0, [pc, #200]	; (800c76c <pbuf_copy+0x190>)
 800c6a4:	f005 fe70 	bl	8012388 <iprintf>
    if (offset_from >= p_from->len) {
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	895b      	ldrh	r3, [r3, #10]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d304      	bcc.n	800c6be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	895b      	ldrh	r3, [r3, #10]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d114      	bne.n	800c6f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10c      	bne.n	800c6f4 <pbuf_copy+0x118>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <pbuf_copy+0x118>
 800c6e0:	4b20      	ldr	r3, [pc, #128]	; (800c764 <pbuf_copy+0x188>)
 800c6e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c6e6:	4924      	ldr	r1, [pc, #144]	; (800c778 <pbuf_copy+0x19c>)
 800c6e8:	4820      	ldr	r0, [pc, #128]	; (800c76c <pbuf_copy+0x190>)
 800c6ea:	f005 fe4d 	bl	8012388 <iprintf>
 800c6ee:	f06f 030f 	mvn.w	r3, #15
 800c6f2:	e032      	b.n	800c75a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d013      	beq.n	800c722 <pbuf_copy+0x146>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	895a      	ldrh	r2, [r3, #10]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	891b      	ldrh	r3, [r3, #8]
 800c702:	429a      	cmp	r2, r3
 800c704:	d10d      	bne.n	800c722 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d009      	beq.n	800c722 <pbuf_copy+0x146>
 800c70e:	4b15      	ldr	r3, [pc, #84]	; (800c764 <pbuf_copy+0x188>)
 800c710:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c714:	4919      	ldr	r1, [pc, #100]	; (800c77c <pbuf_copy+0x1a0>)
 800c716:	4815      	ldr	r0, [pc, #84]	; (800c76c <pbuf_copy+0x190>)
 800c718:	f005 fe36 	bl	8012388 <iprintf>
 800c71c:	f06f 0305 	mvn.w	r3, #5
 800c720:	e01b      	b.n	800c75a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d013      	beq.n	800c750 <pbuf_copy+0x174>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	895a      	ldrh	r2, [r3, #10]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	891b      	ldrh	r3, [r3, #8]
 800c730:	429a      	cmp	r2, r3
 800c732:	d10d      	bne.n	800c750 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d009      	beq.n	800c750 <pbuf_copy+0x174>
 800c73c:	4b09      	ldr	r3, [pc, #36]	; (800c764 <pbuf_copy+0x188>)
 800c73e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c742:	490e      	ldr	r1, [pc, #56]	; (800c77c <pbuf_copy+0x1a0>)
 800c744:	4809      	ldr	r0, [pc, #36]	; (800c76c <pbuf_copy+0x190>)
 800c746:	f005 fe1f 	bl	8012388 <iprintf>
 800c74a:	f06f 0305 	mvn.w	r3, #5
 800c74e:	e004      	b.n	800c75a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f47f af61 	bne.w	800c61a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	08014134 	.word	0x08014134
 800c768:	08014430 	.word	0x08014430
 800c76c:	080141e8 	.word	0x080141e8
 800c770:	08014460 	.word	0x08014460
 800c774:	08014478 	.word	0x08014478
 800c778:	08014494 	.word	0x08014494
 800c77c:	080144a4 	.word	0x080144a4

0800c780 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	4611      	mov	r1, r2
 800c78c:	461a      	mov	r2, r3
 800c78e:	460b      	mov	r3, r1
 800c790:	80fb      	strh	r3, [r7, #6]
 800c792:	4613      	mov	r3, r2
 800c794:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d108      	bne.n	800c7b6 <pbuf_copy_partial+0x36>
 800c7a4:	4b2b      	ldr	r3, [pc, #172]	; (800c854 <pbuf_copy_partial+0xd4>)
 800c7a6:	f240 420a 	movw	r2, #1034	; 0x40a
 800c7aa:	492b      	ldr	r1, [pc, #172]	; (800c858 <pbuf_copy_partial+0xd8>)
 800c7ac:	482b      	ldr	r0, [pc, #172]	; (800c85c <pbuf_copy_partial+0xdc>)
 800c7ae:	f005 fdeb 	bl	8012388 <iprintf>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e04a      	b.n	800c84c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d108      	bne.n	800c7ce <pbuf_copy_partial+0x4e>
 800c7bc:	4b25      	ldr	r3, [pc, #148]	; (800c854 <pbuf_copy_partial+0xd4>)
 800c7be:	f240 420b 	movw	r2, #1035	; 0x40b
 800c7c2:	4927      	ldr	r1, [pc, #156]	; (800c860 <pbuf_copy_partial+0xe0>)
 800c7c4:	4825      	ldr	r0, [pc, #148]	; (800c85c <pbuf_copy_partial+0xdc>)
 800c7c6:	f005 fddf 	bl	8012388 <iprintf>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e03e      	b.n	800c84c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	e034      	b.n	800c83e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c7d4:	88bb      	ldrh	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <pbuf_copy_partial+0x70>
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	895b      	ldrh	r3, [r3, #10]
 800c7de:	88ba      	ldrh	r2, [r7, #4]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d305      	bcc.n	800c7f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	895b      	ldrh	r3, [r3, #10]
 800c7e8:	88ba      	ldrh	r2, [r7, #4]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	80bb      	strh	r3, [r7, #4]
 800c7ee:	e023      	b.n	800c838 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	895a      	ldrh	r2, [r3, #10]
 800c7f4:	88bb      	ldrh	r3, [r7, #4]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c7fa:	8b3a      	ldrh	r2, [r7, #24]
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d901      	bls.n	800c806 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c802:	88fb      	ldrh	r3, [r7, #6]
 800c804:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c806:	8b7b      	ldrh	r3, [r7, #26]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	18d0      	adds	r0, r2, r3
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	88bb      	ldrh	r3, [r7, #4]
 800c812:	4413      	add	r3, r2
 800c814:	8b3a      	ldrh	r2, [r7, #24]
 800c816:	4619      	mov	r1, r3
 800c818:	f005 fe91 	bl	801253e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c81c:	8afa      	ldrh	r2, [r7, #22]
 800c81e:	8b3b      	ldrh	r3, [r7, #24]
 800c820:	4413      	add	r3, r2
 800c822:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c824:	8b7a      	ldrh	r2, [r7, #26]
 800c826:	8b3b      	ldrh	r3, [r7, #24]
 800c828:	4413      	add	r3, r2
 800c82a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c82c:	88fa      	ldrh	r2, [r7, #6]
 800c82e:	8b3b      	ldrh	r3, [r7, #24]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	61fb      	str	r3, [r7, #28]
 800c83e:	88fb      	ldrh	r3, [r7, #6]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <pbuf_copy_partial+0xca>
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1c4      	bne.n	800c7d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c84a:	8afb      	ldrh	r3, [r7, #22]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3720      	adds	r7, #32
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	08014134 	.word	0x08014134
 800c858:	080144d0 	.word	0x080144d0
 800c85c:	080141e8 	.word	0x080141e8
 800c860:	080144f0 	.word	0x080144f0

0800c864 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	603a      	str	r2, [r7, #0]
 800c86e:	71fb      	strb	r3, [r7, #7]
 800c870:	460b      	mov	r3, r1
 800c872:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	8919      	ldrh	r1, [r3, #8]
 800c878:	88ba      	ldrh	r2, [r7, #4]
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff fab1 	bl	800bde4 <pbuf_alloc>
 800c882:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <pbuf_clone+0x2a>
    return NULL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	e011      	b.n	800c8b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f7ff fea3 	bl	800c5dc <pbuf_copy>
 800c896:	4603      	mov	r3, r0
 800c898:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c89a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d006      	beq.n	800c8b0 <pbuf_clone+0x4c>
 800c8a2:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <pbuf_clone+0x58>)
 800c8a4:	f240 5224 	movw	r2, #1316	; 0x524
 800c8a8:	4905      	ldr	r1, [pc, #20]	; (800c8c0 <pbuf_clone+0x5c>)
 800c8aa:	4806      	ldr	r0, [pc, #24]	; (800c8c4 <pbuf_clone+0x60>)
 800c8ac:	f005 fd6c 	bl	8012388 <iprintf>
  return q;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	08014134 	.word	0x08014134
 800c8c0:	080145fc 	.word	0x080145fc
 800c8c4:	080141e8 	.word	0x080141e8

0800c8c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c8cc:	f005 fc5c 	bl	8012188 <rand>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	4b01      	ldr	r3, [pc, #4]	; (800c8e8 <tcp_init+0x20>)
 800c8e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c8e4:	bf00      	nop
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	24000024 	.word	0x24000024

0800c8ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7d1b      	ldrb	r3, [r3, #20]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d105      	bne.n	800c908 <tcp_free+0x1c>
 800c8fc:	4b06      	ldr	r3, [pc, #24]	; (800c918 <tcp_free+0x2c>)
 800c8fe:	22d4      	movs	r2, #212	; 0xd4
 800c900:	4906      	ldr	r1, [pc, #24]	; (800c91c <tcp_free+0x30>)
 800c902:	4807      	ldr	r0, [pc, #28]	; (800c920 <tcp_free+0x34>)
 800c904:	f005 fd40 	bl	8012388 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	2001      	movs	r0, #1
 800c90c:	f7fe fe04 	bl	800b518 <memp_free>
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	08014688 	.word	0x08014688
 800c91c:	08014708 	.word	0x08014708
 800c920:	0801471c 	.word	0x0801471c

0800c924 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7d1b      	ldrb	r3, [r3, #20]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d105      	bne.n	800c940 <tcp_free_listen+0x1c>
 800c934:	4b06      	ldr	r3, [pc, #24]	; (800c950 <tcp_free_listen+0x2c>)
 800c936:	22df      	movs	r2, #223	; 0xdf
 800c938:	4906      	ldr	r1, [pc, #24]	; (800c954 <tcp_free_listen+0x30>)
 800c93a:	4807      	ldr	r0, [pc, #28]	; (800c958 <tcp_free_listen+0x34>)
 800c93c:	f005 fd24 	bl	8012388 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	2002      	movs	r0, #2
 800c944:	f7fe fde8 	bl	800b518 <memp_free>
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	08014688 	.word	0x08014688
 800c954:	08014744 	.word	0x08014744
 800c958:	0801471c 	.word	0x0801471c

0800c95c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c960:	f000 fea2 	bl	800d6a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <tcp_tmr+0x28>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	3301      	adds	r3, #1
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	4b05      	ldr	r3, [pc, #20]	; (800c984 <tcp_tmr+0x28>)
 800c96e:	701a      	strb	r2, [r3, #0]
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <tcp_tmr+0x28>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c97c:	f000 fb54 	bl	800d028 <tcp_slowtmr>
  }
}
 800c980:	bf00      	nop
 800c982:	bd80      	pop	{r7, pc}
 800c984:	2400823d 	.word	0x2400823d

0800c988 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d105      	bne.n	800c9a4 <tcp_remove_listener+0x1c>
 800c998:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <tcp_remove_listener+0x48>)
 800c99a:	22ff      	movs	r2, #255	; 0xff
 800c99c:	490d      	ldr	r1, [pc, #52]	; (800c9d4 <tcp_remove_listener+0x4c>)
 800c99e:	480e      	ldr	r0, [pc, #56]	; (800c9d8 <tcp_remove_listener+0x50>)
 800c9a0:	f005 fcf2 	bl	8012388 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	e00a      	b.n	800c9c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d102      	bne.n	800c9ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1f1      	bne.n	800c9aa <tcp_remove_listener+0x22>
    }
  }
}
 800c9c6:	bf00      	nop
 800c9c8:	bf00      	nop
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	08014688 	.word	0x08014688
 800c9d4:	08014760 	.word	0x08014760
 800c9d8:	0801471c 	.word	0x0801471c

0800c9dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d106      	bne.n	800c9f8 <tcp_listen_closed+0x1c>
 800c9ea:	4b14      	ldr	r3, [pc, #80]	; (800ca3c <tcp_listen_closed+0x60>)
 800c9ec:	f240 1211 	movw	r2, #273	; 0x111
 800c9f0:	4913      	ldr	r1, [pc, #76]	; (800ca40 <tcp_listen_closed+0x64>)
 800c9f2:	4814      	ldr	r0, [pc, #80]	; (800ca44 <tcp_listen_closed+0x68>)
 800c9f4:	f005 fcc8 	bl	8012388 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d006      	beq.n	800ca0e <tcp_listen_closed+0x32>
 800ca00:	4b0e      	ldr	r3, [pc, #56]	; (800ca3c <tcp_listen_closed+0x60>)
 800ca02:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ca06:	4910      	ldr	r1, [pc, #64]	; (800ca48 <tcp_listen_closed+0x6c>)
 800ca08:	480e      	ldr	r0, [pc, #56]	; (800ca44 <tcp_listen_closed+0x68>)
 800ca0a:	f005 fcbd 	bl	8012388 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ca0e:	2301      	movs	r3, #1
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	e00b      	b.n	800ca2c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ca14:	4a0d      	ldr	r2, [pc, #52]	; (800ca4c <tcp_listen_closed+0x70>)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff ffb1 	bl	800c988 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d9f0      	bls.n	800ca14 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	08014688 	.word	0x08014688
 800ca40:	08014788 	.word	0x08014788
 800ca44:	0801471c 	.word	0x0801471c
 800ca48:	08014794 	.word	0x08014794
 800ca4c:	0801616c 	.word	0x0801616c

0800ca50 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ca50:	b5b0      	push	{r4, r5, r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af04      	add	r7, sp, #16
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d106      	bne.n	800ca70 <tcp_close_shutdown+0x20>
 800ca62:	4b63      	ldr	r3, [pc, #396]	; (800cbf0 <tcp_close_shutdown+0x1a0>)
 800ca64:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ca68:	4962      	ldr	r1, [pc, #392]	; (800cbf4 <tcp_close_shutdown+0x1a4>)
 800ca6a:	4863      	ldr	r0, [pc, #396]	; (800cbf8 <tcp_close_shutdown+0x1a8>)
 800ca6c:	f005 fc8c 	bl	8012388 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d066      	beq.n	800cb44 <tcp_close_shutdown+0xf4>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	7d1b      	ldrb	r3, [r3, #20]
 800ca7a:	2b04      	cmp	r3, #4
 800ca7c:	d003      	beq.n	800ca86 <tcp_close_shutdown+0x36>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	7d1b      	ldrb	r3, [r3, #20]
 800ca82:	2b07      	cmp	r3, #7
 800ca84:	d15e      	bne.n	800cb44 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d104      	bne.n	800ca98 <tcp_close_shutdown+0x48>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca96:	d055      	beq.n	800cb44 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	8b5b      	ldrh	r3, [r3, #26]
 800ca9c:	f003 0310 	and.w	r3, r3, #16
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d106      	bne.n	800cab2 <tcp_close_shutdown+0x62>
 800caa4:	4b52      	ldr	r3, [pc, #328]	; (800cbf0 <tcp_close_shutdown+0x1a0>)
 800caa6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800caaa:	4954      	ldr	r1, [pc, #336]	; (800cbfc <tcp_close_shutdown+0x1ac>)
 800caac:	4852      	ldr	r0, [pc, #328]	; (800cbf8 <tcp_close_shutdown+0x1a8>)
 800caae:	f005 fc6b 	bl	8012388 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800caba:	687d      	ldr	r5, [r7, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3304      	adds	r3, #4
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	8ad2      	ldrh	r2, [r2, #22]
 800cac4:	6879      	ldr	r1, [r7, #4]
 800cac6:	8b09      	ldrh	r1, [r1, #24]
 800cac8:	9102      	str	r1, [sp, #8]
 800caca:	9201      	str	r2, [sp, #4]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	462b      	mov	r3, r5
 800cad0:	4622      	mov	r2, r4
 800cad2:	4601      	mov	r1, r0
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f004 fe91 	bl	80117fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f001 f8c6 	bl	800dc6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cae0:	4b47      	ldr	r3, [pc, #284]	; (800cc00 <tcp_close_shutdown+0x1b0>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d105      	bne.n	800caf6 <tcp_close_shutdown+0xa6>
 800caea:	4b45      	ldr	r3, [pc, #276]	; (800cc00 <tcp_close_shutdown+0x1b0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	4a43      	ldr	r2, [pc, #268]	; (800cc00 <tcp_close_shutdown+0x1b0>)
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	e013      	b.n	800cb1e <tcp_close_shutdown+0xce>
 800caf6:	4b42      	ldr	r3, [pc, #264]	; (800cc00 <tcp_close_shutdown+0x1b0>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	e00c      	b.n	800cb18 <tcp_close_shutdown+0xc8>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d104      	bne.n	800cb12 <tcp_close_shutdown+0xc2>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	68da      	ldr	r2, [r3, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	60da      	str	r2, [r3, #12]
 800cb10:	e005      	b.n	800cb1e <tcp_close_shutdown+0xce>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1ef      	bne.n	800cafe <tcp_close_shutdown+0xae>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	60da      	str	r2, [r3, #12]
 800cb24:	4b37      	ldr	r3, [pc, #220]	; (800cc04 <tcp_close_shutdown+0x1b4>)
 800cb26:	2201      	movs	r2, #1
 800cb28:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cb2a:	4b37      	ldr	r3, [pc, #220]	; (800cc08 <tcp_close_shutdown+0x1b8>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d102      	bne.n	800cb3a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cb34:	f003 fd5e 	bl	80105f4 <tcp_trigger_input_pcb_close>
 800cb38:	e002      	b.n	800cb40 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff fed6 	bl	800c8ec <tcp_free>
      }
      return ERR_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	e050      	b.n	800cbe6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	7d1b      	ldrb	r3, [r3, #20]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d03b      	beq.n	800cbc4 <tcp_close_shutdown+0x174>
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	dc44      	bgt.n	800cbda <tcp_close_shutdown+0x18a>
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <tcp_close_shutdown+0x10a>
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d02a      	beq.n	800cbae <tcp_close_shutdown+0x15e>
 800cb58:	e03f      	b.n	800cbda <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	8adb      	ldrh	r3, [r3, #22]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d021      	beq.n	800cba6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb62:	4b2a      	ldr	r3, [pc, #168]	; (800cc0c <tcp_close_shutdown+0x1bc>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d105      	bne.n	800cb78 <tcp_close_shutdown+0x128>
 800cb6c:	4b27      	ldr	r3, [pc, #156]	; (800cc0c <tcp_close_shutdown+0x1bc>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	4a26      	ldr	r2, [pc, #152]	; (800cc0c <tcp_close_shutdown+0x1bc>)
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	e013      	b.n	800cba0 <tcp_close_shutdown+0x150>
 800cb78:	4b24      	ldr	r3, [pc, #144]	; (800cc0c <tcp_close_shutdown+0x1bc>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	60bb      	str	r3, [r7, #8]
 800cb7e:	e00c      	b.n	800cb9a <tcp_close_shutdown+0x14a>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d104      	bne.n	800cb94 <tcp_close_shutdown+0x144>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	60da      	str	r2, [r3, #12]
 800cb92:	e005      	b.n	800cba0 <tcp_close_shutdown+0x150>
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	60bb      	str	r3, [r7, #8]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1ef      	bne.n	800cb80 <tcp_close_shutdown+0x130>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff fea0 	bl	800c8ec <tcp_free>
      break;
 800cbac:	e01a      	b.n	800cbe4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7ff ff14 	bl	800c9dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cbb4:	6879      	ldr	r1, [r7, #4]
 800cbb6:	4816      	ldr	r0, [pc, #88]	; (800cc10 <tcp_close_shutdown+0x1c0>)
 800cbb8:	f001 f8a8 	bl	800dd0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff feb1 	bl	800c924 <tcp_free_listen>
      break;
 800cbc2:	e00f      	b.n	800cbe4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cbc4:	6879      	ldr	r1, [r7, #4]
 800cbc6:	480e      	ldr	r0, [pc, #56]	; (800cc00 <tcp_close_shutdown+0x1b0>)
 800cbc8:	f001 f8a0 	bl	800dd0c <tcp_pcb_remove>
 800cbcc:	4b0d      	ldr	r3, [pc, #52]	; (800cc04 <tcp_close_shutdown+0x1b4>)
 800cbce:	2201      	movs	r2, #1
 800cbd0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fe8a 	bl	800c8ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cbd8:	e004      	b.n	800cbe4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f81a 	bl	800cc14 <tcp_close_shutdown_fin>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	e000      	b.n	800cbe6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bdb0      	pop	{r4, r5, r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	08014688 	.word	0x08014688
 800cbf4:	080147ac 	.word	0x080147ac
 800cbf8:	0801471c 	.word	0x0801471c
 800cbfc:	080147cc 	.word	0x080147cc
 800cc00:	24008234 	.word	0x24008234
 800cc04:	2400823c 	.word	0x2400823c
 800cc08:	24008274 	.word	0x24008274
 800cc0c:	2400822c 	.word	0x2400822c
 800cc10:	24008230 	.word	0x24008230

0800cc14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <tcp_close_shutdown_fin+0x1c>
 800cc22:	4b2e      	ldr	r3, [pc, #184]	; (800ccdc <tcp_close_shutdown_fin+0xc8>)
 800cc24:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cc28:	492d      	ldr	r1, [pc, #180]	; (800cce0 <tcp_close_shutdown_fin+0xcc>)
 800cc2a:	482e      	ldr	r0, [pc, #184]	; (800cce4 <tcp_close_shutdown_fin+0xd0>)
 800cc2c:	f005 fbac 	bl	8012388 <iprintf>

  switch (pcb->state) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	7d1b      	ldrb	r3, [r3, #20]
 800cc34:	2b07      	cmp	r3, #7
 800cc36:	d020      	beq.n	800cc7a <tcp_close_shutdown_fin+0x66>
 800cc38:	2b07      	cmp	r3, #7
 800cc3a:	dc2b      	bgt.n	800cc94 <tcp_close_shutdown_fin+0x80>
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d002      	beq.n	800cc46 <tcp_close_shutdown_fin+0x32>
 800cc40:	2b04      	cmp	r3, #4
 800cc42:	d00d      	beq.n	800cc60 <tcp_close_shutdown_fin+0x4c>
 800cc44:	e026      	b.n	800cc94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f003 fee6 	bl	8010a18 <tcp_send_fin>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d11f      	bne.n	800cc98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2205      	movs	r2, #5
 800cc5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc5e:	e01b      	b.n	800cc98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f003 fed9 	bl	8010a18 <tcp_send_fin>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d114      	bne.n	800cc9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2205      	movs	r2, #5
 800cc76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc78:	e010      	b.n	800cc9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f003 fecc 	bl	8010a18 <tcp_send_fin>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d109      	bne.n	800cca0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2209      	movs	r2, #9
 800cc90:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc92:	e005      	b.n	800cca0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e01c      	b.n	800ccd2 <tcp_close_shutdown_fin+0xbe>
      break;
 800cc98:	bf00      	nop
 800cc9a:	e002      	b.n	800cca2 <tcp_close_shutdown_fin+0x8e>
      break;
 800cc9c:	bf00      	nop
 800cc9e:	e000      	b.n	800cca2 <tcp_close_shutdown_fin+0x8e>
      break;
 800cca0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d103      	bne.n	800ccb2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f003 fff2 	bl	8010c94 <tcp_output>
 800ccb0:	e00d      	b.n	800ccce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ccb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccba:	d108      	bne.n	800ccce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	8b5b      	ldrh	r3, [r3, #26]
 800ccc0:	f043 0308 	orr.w	r3, r3, #8
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e001      	b.n	800ccd2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ccce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	08014688 	.word	0x08014688
 800cce0:	08014788 	.word	0x08014788
 800cce4:	0801471c 	.word	0x0801471c

0800cce8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d109      	bne.n	800cd0a <tcp_close+0x22>
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <tcp_close+0x4c>)
 800ccf8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ccfc:	490e      	ldr	r1, [pc, #56]	; (800cd38 <tcp_close+0x50>)
 800ccfe:	480f      	ldr	r0, [pc, #60]	; (800cd3c <tcp_close+0x54>)
 800cd00:	f005 fb42 	bl	8012388 <iprintf>
 800cd04:	f06f 030f 	mvn.w	r3, #15
 800cd08:	e00f      	b.n	800cd2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	7d1b      	ldrb	r3, [r3, #20]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d006      	beq.n	800cd20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8b5b      	ldrh	r3, [r3, #26]
 800cd16:	f043 0310 	orr.w	r3, r3, #16
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cd20:	2101      	movs	r1, #1
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff fe94 	bl	800ca50 <tcp_close_shutdown>
 800cd28:	4603      	mov	r3, r0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	08014688 	.word	0x08014688
 800cd38:	080147e8 	.word	0x080147e8
 800cd3c:	0801471c 	.word	0x0801471c

0800cd40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08e      	sub	sp, #56	; 0x38
 800cd44:	af04      	add	r7, sp, #16
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d107      	bne.n	800cd60 <tcp_abandon+0x20>
 800cd50:	4b52      	ldr	r3, [pc, #328]	; (800ce9c <tcp_abandon+0x15c>)
 800cd52:	f240 223d 	movw	r2, #573	; 0x23d
 800cd56:	4952      	ldr	r1, [pc, #328]	; (800cea0 <tcp_abandon+0x160>)
 800cd58:	4852      	ldr	r0, [pc, #328]	; (800cea4 <tcp_abandon+0x164>)
 800cd5a:	f005 fb15 	bl	8012388 <iprintf>
 800cd5e:	e099      	b.n	800ce94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7d1b      	ldrb	r3, [r3, #20]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d106      	bne.n	800cd76 <tcp_abandon+0x36>
 800cd68:	4b4c      	ldr	r3, [pc, #304]	; (800ce9c <tcp_abandon+0x15c>)
 800cd6a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cd6e:	494e      	ldr	r1, [pc, #312]	; (800cea8 <tcp_abandon+0x168>)
 800cd70:	484c      	ldr	r0, [pc, #304]	; (800cea4 <tcp_abandon+0x164>)
 800cd72:	f005 fb09 	bl	8012388 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	7d1b      	ldrb	r3, [r3, #20]
 800cd7a:	2b0a      	cmp	r3, #10
 800cd7c:	d107      	bne.n	800cd8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	484a      	ldr	r0, [pc, #296]	; (800ceac <tcp_abandon+0x16c>)
 800cd82:	f000 ffc3 	bl	800dd0c <tcp_pcb_remove>
    tcp_free(pcb);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fdb0 	bl	800c8ec <tcp_free>
 800cd8c:	e082      	b.n	800ce94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	7d1b      	ldrb	r3, [r3, #20]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d126      	bne.n	800ce06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	8adb      	ldrh	r3, [r3, #22]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d02e      	beq.n	800ce1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cdc0:	4b3b      	ldr	r3, [pc, #236]	; (800ceb0 <tcp_abandon+0x170>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d105      	bne.n	800cdd6 <tcp_abandon+0x96>
 800cdca:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <tcp_abandon+0x170>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	4a37      	ldr	r2, [pc, #220]	; (800ceb0 <tcp_abandon+0x170>)
 800cdd2:	6013      	str	r3, [r2, #0]
 800cdd4:	e013      	b.n	800cdfe <tcp_abandon+0xbe>
 800cdd6:	4b36      	ldr	r3, [pc, #216]	; (800ceb0 <tcp_abandon+0x170>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	61fb      	str	r3, [r7, #28]
 800cddc:	e00c      	b.n	800cdf8 <tcp_abandon+0xb8>
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d104      	bne.n	800cdf2 <tcp_abandon+0xb2>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	60da      	str	r2, [r3, #12]
 800cdf0:	e005      	b.n	800cdfe <tcp_abandon+0xbe>
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	61fb      	str	r3, [r7, #28]
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1ef      	bne.n	800cdde <tcp_abandon+0x9e>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	60da      	str	r2, [r3, #12]
 800ce04:	e00b      	b.n	800ce1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8adb      	ldrh	r3, [r3, #22]
 800ce0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	4828      	ldr	r0, [pc, #160]	; (800ceb4 <tcp_abandon+0x174>)
 800ce14:	f000 ff7a 	bl	800dd0c <tcp_pcb_remove>
 800ce18:	4b27      	ldr	r3, [pc, #156]	; (800ceb8 <tcp_abandon+0x178>)
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d004      	beq.n	800ce30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fd1c 	bl	800d868 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d004      	beq.n	800ce42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fd13 	bl	800d868 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 fd0a 	bl	800d868 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00e      	beq.n	800ce78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	8b12      	ldrh	r2, [r2, #24]
 800ce64:	9202      	str	r2, [sp, #8]
 800ce66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce68:	9201      	str	r2, [sp, #4]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	69b9      	ldr	r1, [r7, #24]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f004 fcc2 	bl	80117fc <tcp_rst>
    }
    last_state = pcb->state;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
 800ce7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fd34 	bl	800c8ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d004      	beq.n	800ce94 <tcp_abandon+0x154>
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f06f 010c 	mvn.w	r1, #12
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	4798      	blx	r3
  }
}
 800ce94:	3728      	adds	r7, #40	; 0x28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	08014688 	.word	0x08014688
 800cea0:	0801481c 	.word	0x0801481c
 800cea4:	0801471c 	.word	0x0801471c
 800cea8:	08014838 	.word	0x08014838
 800ceac:	24008238 	.word	0x24008238
 800ceb0:	2400822c 	.word	0x2400822c
 800ceb4:	24008234 	.word	0x24008234
 800ceb8:	2400823c 	.word	0x2400823c

0800cebc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cec4:	2101      	movs	r1, #1
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff ff3a 	bl	800cd40 <tcp_abandon>
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d106      	bne.n	800cef0 <tcp_update_rcv_ann_wnd+0x1c>
 800cee2:	4b25      	ldr	r3, [pc, #148]	; (800cf78 <tcp_update_rcv_ann_wnd+0xa4>)
 800cee4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cee8:	4924      	ldr	r1, [pc, #144]	; (800cf7c <tcp_update_rcv_ann_wnd+0xa8>)
 800ceea:	4825      	ldr	r0, [pc, #148]	; (800cf80 <tcp_update_rcv_ann_wnd+0xac>)
 800ceec:	f005 fa4c 	bl	8012388 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cef8:	4413      	add	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cf04:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cf08:	bf28      	it	cs
 800cf0a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cf0e:	b292      	uxth	r2, r2
 800cf10:	4413      	add	r3, r2
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	db08      	blt.n	800cf2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	e020      	b.n	800cf6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	dd03      	ble.n	800cf42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf40:	e014      	b.n	800cf6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf54:	d306      	bcc.n	800cf64 <tcp_update_rcv_ann_wnd+0x90>
 800cf56:	4b08      	ldr	r3, [pc, #32]	; (800cf78 <tcp_update_rcv_ann_wnd+0xa4>)
 800cf58:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cf5c:	4909      	ldr	r1, [pc, #36]	; (800cf84 <tcp_update_rcv_ann_wnd+0xb0>)
 800cf5e:	4808      	ldr	r0, [pc, #32]	; (800cf80 <tcp_update_rcv_ann_wnd+0xac>)
 800cf60:	f005 fa12 	bl	8012388 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cf6c:	2300      	movs	r3, #0
  }
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	08014688 	.word	0x08014688
 800cf7c:	08014934 	.word	0x08014934
 800cf80:	0801471c 	.word	0x0801471c
 800cf84:	08014958 	.word	0x08014958

0800cf88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d107      	bne.n	800cfaa <tcp_recved+0x22>
 800cf9a:	4b1f      	ldr	r3, [pc, #124]	; (800d018 <tcp_recved+0x90>)
 800cf9c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cfa0:	491e      	ldr	r1, [pc, #120]	; (800d01c <tcp_recved+0x94>)
 800cfa2:	481f      	ldr	r0, [pc, #124]	; (800d020 <tcp_recved+0x98>)
 800cfa4:	f005 f9f0 	bl	8012388 <iprintf>
 800cfa8:	e032      	b.n	800d010 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	7d1b      	ldrb	r3, [r3, #20]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d106      	bne.n	800cfc0 <tcp_recved+0x38>
 800cfb2:	4b19      	ldr	r3, [pc, #100]	; (800d018 <tcp_recved+0x90>)
 800cfb4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cfb8:	491a      	ldr	r1, [pc, #104]	; (800d024 <tcp_recved+0x9c>)
 800cfba:	4819      	ldr	r0, [pc, #100]	; (800d020 <tcp_recved+0x98>)
 800cfbc:	f005 f9e4 	bl	8012388 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cfc4:	887b      	ldrh	r3, [r7, #2]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cfca:	89fb      	ldrh	r3, [r7, #14]
 800cfcc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cfd0:	d804      	bhi.n	800cfdc <tcp_recved+0x54>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfd6:	89fa      	ldrh	r2, [r7, #14]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d204      	bcs.n	800cfe6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cfe2:	851a      	strh	r2, [r3, #40]	; 0x28
 800cfe4:	e002      	b.n	800cfec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	89fa      	ldrh	r2, [r7, #14]
 800cfea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff ff71 	bl	800ced4 <tcp_update_rcv_ann_wnd>
 800cff2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cffa:	d309      	bcc.n	800d010 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	8b5b      	ldrh	r3, [r3, #26]
 800d000:	f043 0302 	orr.w	r3, r3, #2
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f003 fe42 	bl	8010c94 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	08014688 	.word	0x08014688
 800d01c:	08014974 	.word	0x08014974
 800d020:	0801471c 	.word	0x0801471c
 800d024:	0801498c 	.word	0x0801498c

0800d028 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d028:	b5b0      	push	{r4, r5, r7, lr}
 800d02a:	b090      	sub	sp, #64	; 0x40
 800d02c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d034:	4b94      	ldr	r3, [pc, #592]	; (800d288 <tcp_slowtmr+0x260>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3301      	adds	r3, #1
 800d03a:	4a93      	ldr	r2, [pc, #588]	; (800d288 <tcp_slowtmr+0x260>)
 800d03c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d03e:	4b93      	ldr	r3, [pc, #588]	; (800d28c <tcp_slowtmr+0x264>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	3301      	adds	r3, #1
 800d044:	b2da      	uxtb	r2, r3
 800d046:	4b91      	ldr	r3, [pc, #580]	; (800d28c <tcp_slowtmr+0x264>)
 800d048:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d04e:	4b90      	ldr	r3, [pc, #576]	; (800d290 <tcp_slowtmr+0x268>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d054:	e29d      	b.n	800d592 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	7d1b      	ldrb	r3, [r3, #20]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d106      	bne.n	800d06c <tcp_slowtmr+0x44>
 800d05e:	4b8d      	ldr	r3, [pc, #564]	; (800d294 <tcp_slowtmr+0x26c>)
 800d060:	f240 42be 	movw	r2, #1214	; 0x4be
 800d064:	498c      	ldr	r1, [pc, #560]	; (800d298 <tcp_slowtmr+0x270>)
 800d066:	488d      	ldr	r0, [pc, #564]	; (800d29c <tcp_slowtmr+0x274>)
 800d068:	f005 f98e 	bl	8012388 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	7d1b      	ldrb	r3, [r3, #20]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d106      	bne.n	800d082 <tcp_slowtmr+0x5a>
 800d074:	4b87      	ldr	r3, [pc, #540]	; (800d294 <tcp_slowtmr+0x26c>)
 800d076:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d07a:	4989      	ldr	r1, [pc, #548]	; (800d2a0 <tcp_slowtmr+0x278>)
 800d07c:	4887      	ldr	r0, [pc, #540]	; (800d29c <tcp_slowtmr+0x274>)
 800d07e:	f005 f983 	bl	8012388 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d084:	7d1b      	ldrb	r3, [r3, #20]
 800d086:	2b0a      	cmp	r3, #10
 800d088:	d106      	bne.n	800d098 <tcp_slowtmr+0x70>
 800d08a:	4b82      	ldr	r3, [pc, #520]	; (800d294 <tcp_slowtmr+0x26c>)
 800d08c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d090:	4984      	ldr	r1, [pc, #528]	; (800d2a4 <tcp_slowtmr+0x27c>)
 800d092:	4882      	ldr	r0, [pc, #520]	; (800d29c <tcp_slowtmr+0x274>)
 800d094:	f005 f978 	bl	8012388 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	7f9a      	ldrb	r2, [r3, #30]
 800d09c:	4b7b      	ldr	r3, [pc, #492]	; (800d28c <tcp_slowtmr+0x264>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d105      	bne.n	800d0b0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d0ae:	e270      	b.n	800d592 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d0b0:	4b76      	ldr	r3, [pc, #472]	; (800d28c <tcp_slowtmr+0x264>)
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	7d1b      	ldrb	r3, [r3, #20]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d10a      	bne.n	800d0e2 <tcp_slowtmr+0xba>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0d2:	2b05      	cmp	r3, #5
 800d0d4:	d905      	bls.n	800d0e2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0da:	3301      	adds	r3, #1
 800d0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0e0:	e11e      	b.n	800d320 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0e8:	2b0b      	cmp	r3, #11
 800d0ea:	d905      	bls.n	800d0f8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0f6:	e113      	b.n	800d320 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d075      	beq.n	800d1ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d106:	2b00      	cmp	r3, #0
 800d108:	d006      	beq.n	800d118 <tcp_slowtmr+0xf0>
 800d10a:	4b62      	ldr	r3, [pc, #392]	; (800d294 <tcp_slowtmr+0x26c>)
 800d10c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d110:	4965      	ldr	r1, [pc, #404]	; (800d2a8 <tcp_slowtmr+0x280>)
 800d112:	4862      	ldr	r0, [pc, #392]	; (800d29c <tcp_slowtmr+0x274>)
 800d114:	f005 f938 	bl	8012388 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <tcp_slowtmr+0x106>
 800d120:	4b5c      	ldr	r3, [pc, #368]	; (800d294 <tcp_slowtmr+0x26c>)
 800d122:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d126:	4961      	ldr	r1, [pc, #388]	; (800d2ac <tcp_slowtmr+0x284>)
 800d128:	485c      	ldr	r0, [pc, #368]	; (800d29c <tcp_slowtmr+0x274>)
 800d12a:	f005 f92d 	bl	8012388 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d130:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d134:	2b0b      	cmp	r3, #11
 800d136:	d905      	bls.n	800d144 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d13c:	3301      	adds	r3, #1
 800d13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d142:	e0ed      	b.n	800d320 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4a58      	ldr	r2, [pc, #352]	; (800d2b0 <tcp_slowtmr+0x288>)
 800d14e:	5cd3      	ldrb	r3, [r2, r3]
 800d150:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d154:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d158:	7c7a      	ldrb	r2, [r7, #17]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d907      	bls.n	800d16e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d164:	3301      	adds	r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d174:	7c7a      	ldrb	r2, [r7, #17]
 800d176:	429a      	cmp	r2, r3
 800d178:	f200 80d2 	bhi.w	800d320 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d17c:	2301      	movs	r3, #1
 800d17e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d18a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d18c:	f004 fc2a 	bl	80119e4 <tcp_zero_window_probe>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d014      	beq.n	800d1c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d196:	2300      	movs	r3, #0
 800d198:	623b      	str	r3, [r7, #32]
 800d19a:	e011      	b.n	800d1c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1a6:	f003 faef 	bl	8010788 <tcp_split_unsent_seg>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d107      	bne.n	800d1c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1b2:	f003 fd6f 	bl	8010c94 <tcp_output>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f000 80ac 	beq.w	800d320 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d1d6:	2b06      	cmp	r3, #6
 800d1d8:	f200 80a2 	bhi.w	800d320 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d1ec:	e098      	b.n	800d320 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	db0f      	blt.n	800d218 <tcp_slowtmr+0x1f0>
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d1fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d202:	4293      	cmp	r3, r2
 800d204:	d008      	beq.n	800d218 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	3301      	adds	r3, #1
 800d210:	b29b      	uxth	r3, r3
 800d212:	b21a      	sxth	r2, r3
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d220:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d224:	429a      	cmp	r2, r3
 800d226:	db7b      	blt.n	800d320 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d22a:	f004 f827 	bl	801127c <tcp_rexmit_rto_prepare>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d007      	beq.n	800d244 <tcp_slowtmr+0x21c>
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d171      	bne.n	800d320 <tcp_slowtmr+0x2f8>
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d06d      	beq.n	800d320 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	7d1b      	ldrb	r3, [r3, #20]
 800d248:	2b02      	cmp	r3, #2
 800d24a:	d03a      	beq.n	800d2c2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d252:	2b0c      	cmp	r3, #12
 800d254:	bf28      	it	cs
 800d256:	230c      	movcs	r3, #12
 800d258:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d260:	10db      	asrs	r3, r3, #3
 800d262:	b21b      	sxth	r3, r3
 800d264:	461a      	mov	r2, r3
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d26c:	4413      	add	r3, r2
 800d26e:	7efa      	ldrb	r2, [r7, #27]
 800d270:	4910      	ldr	r1, [pc, #64]	; (800d2b4 <tcp_slowtmr+0x28c>)
 800d272:	5c8a      	ldrb	r2, [r1, r2]
 800d274:	4093      	lsls	r3, r2
 800d276:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d27e:	4293      	cmp	r3, r2
 800d280:	dc1a      	bgt.n	800d2b8 <tcp_slowtmr+0x290>
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	b21a      	sxth	r2, r3
 800d286:	e019      	b.n	800d2bc <tcp_slowtmr+0x294>
 800d288:	24008228 	.word	0x24008228
 800d28c:	2400823e 	.word	0x2400823e
 800d290:	24008234 	.word	0x24008234
 800d294:	08014688 	.word	0x08014688
 800d298:	08014a1c 	.word	0x08014a1c
 800d29c:	0801471c 	.word	0x0801471c
 800d2a0:	08014a48 	.word	0x08014a48
 800d2a4:	08014a74 	.word	0x08014a74
 800d2a8:	08014aa4 	.word	0x08014aa4
 800d2ac:	08014ad8 	.word	0x08014ad8
 800d2b0:	08016164 	.word	0x08016164
 800d2b4:	08016154 	.word	0x08016154
 800d2b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	bf28      	it	cs
 800d2d8:	4613      	movcs	r3, r2
 800d2da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d2dc:	8a7b      	ldrh	r3, [r7, #18]
 800d2de:	085b      	lsrs	r3, r3, #1
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d206      	bcs.n	800d308 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	b29a      	uxth	r2, r3
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	2200      	movs	r2, #0
 800d316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d31c:	f004 f81e 	bl	801135c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	7d1b      	ldrb	r3, [r3, #20]
 800d324:	2b06      	cmp	r3, #6
 800d326:	d111      	bne.n	800d34c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	8b5b      	ldrh	r3, [r3, #26]
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d334:	4b9c      	ldr	r3, [pc, #624]	; (800d5a8 <tcp_slowtmr+0x580>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	2b28      	cmp	r3, #40	; 0x28
 800d340:	d904      	bls.n	800d34c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d346:	3301      	adds	r3, #1
 800d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34e:	7a5b      	ldrb	r3, [r3, #9]
 800d350:	f003 0308 	and.w	r3, r3, #8
 800d354:	2b00      	cmp	r3, #0
 800d356:	d04a      	beq.n	800d3ee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d003      	beq.n	800d368 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d364:	2b07      	cmp	r3, #7
 800d366:	d142      	bne.n	800d3ee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d368:	4b8f      	ldr	r3, [pc, #572]	; (800d5a8 <tcp_slowtmr+0x580>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	6a1b      	ldr	r3, [r3, #32]
 800d370:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d378:	4b8c      	ldr	r3, [pc, #560]	; (800d5ac <tcp_slowtmr+0x584>)
 800d37a:	440b      	add	r3, r1
 800d37c:	498c      	ldr	r1, [pc, #560]	; (800d5b0 <tcp_slowtmr+0x588>)
 800d37e:	fba1 1303 	umull	r1, r3, r1, r3
 800d382:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d384:	429a      	cmp	r2, r3
 800d386:	d90a      	bls.n	800d39e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d38c:	3301      	adds	r3, #1
 800d38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d396:	3301      	adds	r3, #1
 800d398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d39c:	e027      	b.n	800d3ee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d39e:	4b82      	ldr	r3, [pc, #520]	; (800d5a8 <tcp_slowtmr+0x580>)
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	4b7f      	ldr	r3, [pc, #508]	; (800d5b4 <tcp_slowtmr+0x58c>)
 800d3b8:	fb00 f303 	mul.w	r3, r0, r3
 800d3bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d3be:	497c      	ldr	r1, [pc, #496]	; (800d5b0 <tcp_slowtmr+0x588>)
 800d3c0:	fba1 1303 	umull	r1, r3, r1, r3
 800d3c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d911      	bls.n	800d3ee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3cc:	f004 faca 	bl	8011964 <tcp_keepalive>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d3d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d107      	bne.n	800d3ee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d011      	beq.n	800d41a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d3f6:	4b6c      	ldr	r3, [pc, #432]	; (800d5a8 <tcp_slowtmr+0x580>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	1ad2      	subs	r2, r2, r3
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d406:	4619      	mov	r1, r3
 800d408:	460b      	mov	r3, r1
 800d40a:	005b      	lsls	r3, r3, #1
 800d40c:	440b      	add	r3, r1
 800d40e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d410:	429a      	cmp	r2, r3
 800d412:	d302      	bcc.n	800d41a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d416:	f000 fddd 	bl	800dfd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	7d1b      	ldrb	r3, [r3, #20]
 800d41e:	2b03      	cmp	r3, #3
 800d420:	d10b      	bne.n	800d43a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d422:	4b61      	ldr	r3, [pc, #388]	; (800d5a8 <tcp_slowtmr+0x580>)
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	2b28      	cmp	r3, #40	; 0x28
 800d42e:	d904      	bls.n	800d43a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d434:	3301      	adds	r3, #1
 800d436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	7d1b      	ldrb	r3, [r3, #20]
 800d43e:	2b09      	cmp	r3, #9
 800d440:	d10b      	bne.n	800d45a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d442:	4b59      	ldr	r3, [pc, #356]	; (800d5a8 <tcp_slowtmr+0x580>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	2bf0      	cmp	r3, #240	; 0xf0
 800d44e:	d904      	bls.n	800d45a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d454:	3301      	adds	r3, #1
 800d456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d45a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d060      	beq.n	800d524 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d468:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d46a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d46c:	f000 fbfe 	bl	800dc6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	2b00      	cmp	r3, #0
 800d474:	d010      	beq.n	800d498 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d476:	4b50      	ldr	r3, [pc, #320]	; (800d5b8 <tcp_slowtmr+0x590>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d106      	bne.n	800d48e <tcp_slowtmr+0x466>
 800d480:	4b4e      	ldr	r3, [pc, #312]	; (800d5bc <tcp_slowtmr+0x594>)
 800d482:	f240 526d 	movw	r2, #1389	; 0x56d
 800d486:	494e      	ldr	r1, [pc, #312]	; (800d5c0 <tcp_slowtmr+0x598>)
 800d488:	484e      	ldr	r0, [pc, #312]	; (800d5c4 <tcp_slowtmr+0x59c>)
 800d48a:	f004 ff7d 	bl	8012388 <iprintf>
        prev->next = pcb->next;
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	68da      	ldr	r2, [r3, #12]
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	60da      	str	r2, [r3, #12]
 800d496:	e00f      	b.n	800d4b8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d498:	4b47      	ldr	r3, [pc, #284]	; (800d5b8 <tcp_slowtmr+0x590>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d006      	beq.n	800d4b0 <tcp_slowtmr+0x488>
 800d4a2:	4b46      	ldr	r3, [pc, #280]	; (800d5bc <tcp_slowtmr+0x594>)
 800d4a4:	f240 5271 	movw	r2, #1393	; 0x571
 800d4a8:	4947      	ldr	r1, [pc, #284]	; (800d5c8 <tcp_slowtmr+0x5a0>)
 800d4aa:	4846      	ldr	r0, [pc, #280]	; (800d5c4 <tcp_slowtmr+0x59c>)
 800d4ac:	f004 ff6c 	bl	8012388 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	4a40      	ldr	r2, [pc, #256]	; (800d5b8 <tcp_slowtmr+0x590>)
 800d4b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d4b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d013      	beq.n	800d4e8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d4c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4d0:	8ad2      	ldrh	r2, [r2, #22]
 800d4d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4d4:	8b09      	ldrh	r1, [r1, #24]
 800d4d6:	9102      	str	r1, [sp, #8]
 800d4d8:	9201      	str	r2, [sp, #4]
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	462b      	mov	r3, r5
 800d4de:	4622      	mov	r2, r4
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e4:	f004 f98a 	bl	80117fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	7d1b      	ldrb	r3, [r3, #20]
 800d4f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d4fe:	6838      	ldr	r0, [r7, #0]
 800d500:	f7ff f9f4 	bl	800c8ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d504:	4b31      	ldr	r3, [pc, #196]	; (800d5cc <tcp_slowtmr+0x5a4>)
 800d506:	2200      	movs	r2, #0
 800d508:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d004      	beq.n	800d51a <tcp_slowtmr+0x4f2>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f06f 010c 	mvn.w	r1, #12
 800d516:	68b8      	ldr	r0, [r7, #8]
 800d518:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d51a:	4b2c      	ldr	r3, [pc, #176]	; (800d5cc <tcp_slowtmr+0x5a4>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d037      	beq.n	800d592 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d522:	e592      	b.n	800d04a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d530:	7f1b      	ldrb	r3, [r3, #28]
 800d532:	3301      	adds	r3, #1
 800d534:	b2da      	uxtb	r2, r3
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	7f1a      	ldrb	r2, [r3, #28]
 800d53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d540:	7f5b      	ldrb	r3, [r3, #29]
 800d542:	429a      	cmp	r2, r3
 800d544:	d325      	bcc.n	800d592 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	2200      	movs	r2, #0
 800d54a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d54c:	4b1f      	ldr	r3, [pc, #124]	; (800d5cc <tcp_slowtmr+0x5a4>)
 800d54e:	2200      	movs	r2, #0
 800d550:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00b      	beq.n	800d574 <tcp_slowtmr+0x54c>
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d564:	6912      	ldr	r2, [r2, #16]
 800d566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d568:	4610      	mov	r0, r2
 800d56a:	4798      	blx	r3
 800d56c:	4603      	mov	r3, r0
 800d56e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d572:	e002      	b.n	800d57a <tcp_slowtmr+0x552>
 800d574:	2300      	movs	r3, #0
 800d576:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d57a:	4b14      	ldr	r3, [pc, #80]	; (800d5cc <tcp_slowtmr+0x5a4>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d000      	beq.n	800d584 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d582:	e562      	b.n	800d04a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d584:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d102      	bne.n	800d592 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d58e:	f003 fb81 	bl	8010c94 <tcp_output>
  while (pcb != NULL) {
 800d592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d594:	2b00      	cmp	r3, #0
 800d596:	f47f ad5e 	bne.w	800d056 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d59e:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <tcp_slowtmr+0x5a8>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d5a4:	e069      	b.n	800d67a <tcp_slowtmr+0x652>
 800d5a6:	bf00      	nop
 800d5a8:	24008228 	.word	0x24008228
 800d5ac:	000a4cb8 	.word	0x000a4cb8
 800d5b0:	10624dd3 	.word	0x10624dd3
 800d5b4:	000124f8 	.word	0x000124f8
 800d5b8:	24008234 	.word	0x24008234
 800d5bc:	08014688 	.word	0x08014688
 800d5c0:	08014b10 	.word	0x08014b10
 800d5c4:	0801471c 	.word	0x0801471c
 800d5c8:	08014b3c 	.word	0x08014b3c
 800d5cc:	2400823c 	.word	0x2400823c
 800d5d0:	24008238 	.word	0x24008238
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	7d1b      	ldrb	r3, [r3, #20]
 800d5d8:	2b0a      	cmp	r3, #10
 800d5da:	d006      	beq.n	800d5ea <tcp_slowtmr+0x5c2>
 800d5dc:	4b2b      	ldr	r3, [pc, #172]	; (800d68c <tcp_slowtmr+0x664>)
 800d5de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d5e2:	492b      	ldr	r1, [pc, #172]	; (800d690 <tcp_slowtmr+0x668>)
 800d5e4:	482b      	ldr	r0, [pc, #172]	; (800d694 <tcp_slowtmr+0x66c>)
 800d5e6:	f004 fecf 	bl	8012388 <iprintf>
    pcb_remove = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d5f0:	4b29      	ldr	r3, [pc, #164]	; (800d698 <tcp_slowtmr+0x670>)
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	2bf0      	cmp	r3, #240	; 0xf0
 800d5fc:	d904      	bls.n	800d608 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d602:	3301      	adds	r3, #1
 800d604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d02f      	beq.n	800d670 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d612:	f000 fb2b 	bl	800dc6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d010      	beq.n	800d63e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d61c:	4b1f      	ldr	r3, [pc, #124]	; (800d69c <tcp_slowtmr+0x674>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d622:	429a      	cmp	r2, r3
 800d624:	d106      	bne.n	800d634 <tcp_slowtmr+0x60c>
 800d626:	4b19      	ldr	r3, [pc, #100]	; (800d68c <tcp_slowtmr+0x664>)
 800d628:	f240 52af 	movw	r2, #1455	; 0x5af
 800d62c:	491c      	ldr	r1, [pc, #112]	; (800d6a0 <tcp_slowtmr+0x678>)
 800d62e:	4819      	ldr	r0, [pc, #100]	; (800d694 <tcp_slowtmr+0x66c>)
 800d630:	f004 feaa 	bl	8012388 <iprintf>
        prev->next = pcb->next;
 800d634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	60da      	str	r2, [r3, #12]
 800d63c:	e00f      	b.n	800d65e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d63e:	4b17      	ldr	r3, [pc, #92]	; (800d69c <tcp_slowtmr+0x674>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d644:	429a      	cmp	r2, r3
 800d646:	d006      	beq.n	800d656 <tcp_slowtmr+0x62e>
 800d648:	4b10      	ldr	r3, [pc, #64]	; (800d68c <tcp_slowtmr+0x664>)
 800d64a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d64e:	4915      	ldr	r1, [pc, #84]	; (800d6a4 <tcp_slowtmr+0x67c>)
 800d650:	4810      	ldr	r0, [pc, #64]	; (800d694 <tcp_slowtmr+0x66c>)
 800d652:	f004 fe99 	bl	8012388 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	4a10      	ldr	r2, [pc, #64]	; (800d69c <tcp_slowtmr+0x674>)
 800d65c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d668:	69f8      	ldr	r0, [r7, #28]
 800d66a:	f7ff f93f 	bl	800c8ec <tcp_free>
 800d66e:	e004      	b.n	800d67a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d672:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1a9      	bne.n	800d5d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d680:	bf00      	nop
 800d682:	bf00      	nop
 800d684:	3730      	adds	r7, #48	; 0x30
 800d686:	46bd      	mov	sp, r7
 800d688:	bdb0      	pop	{r4, r5, r7, pc}
 800d68a:	bf00      	nop
 800d68c:	08014688 	.word	0x08014688
 800d690:	08014b68 	.word	0x08014b68
 800d694:	0801471c 	.word	0x0801471c
 800d698:	24008228 	.word	0x24008228
 800d69c:	24008238 	.word	0x24008238
 800d6a0:	08014b98 	.word	0x08014b98
 800d6a4:	08014bc0 	.word	0x08014bc0

0800d6a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d6ae:	4b2d      	ldr	r3, [pc, #180]	; (800d764 <tcp_fasttmr+0xbc>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	4b2b      	ldr	r3, [pc, #172]	; (800d764 <tcp_fasttmr+0xbc>)
 800d6b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d6ba:	4b2b      	ldr	r3, [pc, #172]	; (800d768 <tcp_fasttmr+0xc0>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d6c0:	e048      	b.n	800d754 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	7f9a      	ldrb	r2, [r3, #30]
 800d6c6:	4b27      	ldr	r3, [pc, #156]	; (800d764 <tcp_fasttmr+0xbc>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d03f      	beq.n	800d74e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d6ce:	4b25      	ldr	r3, [pc, #148]	; (800d764 <tcp_fasttmr+0xbc>)
 800d6d0:	781a      	ldrb	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	8b5b      	ldrh	r3, [r3, #26]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d010      	beq.n	800d704 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	8b5b      	ldrh	r3, [r3, #26]
 800d6e6:	f043 0302 	orr.w	r3, r3, #2
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f003 facf 	bl	8010c94 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	8b5b      	ldrh	r3, [r3, #26]
 800d6fa:	f023 0303 	bic.w	r3, r3, #3
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	8b5b      	ldrh	r3, [r3, #26]
 800d708:	f003 0308 	and.w	r3, r3, #8
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d009      	beq.n	800d724 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	8b5b      	ldrh	r3, [r3, #26]
 800d714:	f023 0308 	bic.w	r3, r3, #8
 800d718:	b29a      	uxth	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff fa78 	bl	800cc14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00a      	beq.n	800d748 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d732:	4b0e      	ldr	r3, [pc, #56]	; (800d76c <tcp_fasttmr+0xc4>)
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f819 	bl	800d770 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d73e:	4b0b      	ldr	r3, [pc, #44]	; (800d76c <tcp_fasttmr+0xc4>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d000      	beq.n	800d748 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d746:	e7b8      	b.n	800d6ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	607b      	str	r3, [r7, #4]
 800d74c:	e002      	b.n	800d754 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1b3      	bne.n	800d6c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d75a:	bf00      	nop
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	2400823e 	.word	0x2400823e
 800d768:	24008234 	.word	0x24008234
 800d76c:	2400823c 	.word	0x2400823c

0800d770 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d770:	b590      	push	{r4, r7, lr}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d109      	bne.n	800d792 <tcp_process_refused_data+0x22>
 800d77e:	4b37      	ldr	r3, [pc, #220]	; (800d85c <tcp_process_refused_data+0xec>)
 800d780:	f240 6209 	movw	r2, #1545	; 0x609
 800d784:	4936      	ldr	r1, [pc, #216]	; (800d860 <tcp_process_refused_data+0xf0>)
 800d786:	4837      	ldr	r0, [pc, #220]	; (800d864 <tcp_process_refused_data+0xf4>)
 800d788:	f004 fdfe 	bl	8012388 <iprintf>
 800d78c:	f06f 030f 	mvn.w	r3, #15
 800d790:	e060      	b.n	800d854 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d796:	7b5b      	ldrb	r3, [r3, #13]
 800d798:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d79e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00b      	beq.n	800d7c8 <tcp_process_refused_data+0x58>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6918      	ldr	r0, [r3, #16]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	6879      	ldr	r1, [r7, #4]
 800d7c0:	47a0      	blx	r4
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]
 800d7c6:	e007      	b.n	800d7d8 <tcp_process_refused_data+0x68>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f000 f8a4 	bl	800d91c <tcp_recv_null>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d12a      	bne.n	800d836 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	f003 0320 	and.w	r3, r3, #32
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d033      	beq.n	800d852 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d7f2:	d005      	beq.n	800d800 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00b      	beq.n	800d822 <tcp_process_refused_data+0xb2>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6918      	ldr	r0, [r3, #16]
 800d814:	2300      	movs	r3, #0
 800d816:	2200      	movs	r2, #0
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	47a0      	blx	r4
 800d81c:	4603      	mov	r3, r0
 800d81e:	73fb      	strb	r3, [r7, #15]
 800d820:	e001      	b.n	800d826 <tcp_process_refused_data+0xb6>
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82a:	f113 0f0d 	cmn.w	r3, #13
 800d82e:	d110      	bne.n	800d852 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d830:	f06f 030c 	mvn.w	r3, #12
 800d834:	e00e      	b.n	800d854 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d83a:	f113 0f0d 	cmn.w	r3, #13
 800d83e:	d102      	bne.n	800d846 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d840:	f06f 030c 	mvn.w	r3, #12
 800d844:	e006      	b.n	800d854 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d84c:	f06f 0304 	mvn.w	r3, #4
 800d850:	e000      	b.n	800d854 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd90      	pop	{r4, r7, pc}
 800d85c:	08014688 	.word	0x08014688
 800d860:	08014be8 	.word	0x08014be8
 800d864:	0801471c 	.word	0x0801471c

0800d868 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d870:	e007      	b.n	800d882 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 f80a 	bl	800d892 <tcp_seg_free>
    seg = next;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1f4      	bne.n	800d872 <tcp_segs_free+0xa>
  }
}
 800d888:	bf00      	nop
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b082      	sub	sp, #8
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00c      	beq.n	800d8ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d004      	beq.n	800d8b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe fd7d 	bl	800c3ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d8b2:	6879      	ldr	r1, [r7, #4]
 800d8b4:	2003      	movs	r0, #3
 800d8b6:	f7fd fe2f 	bl	800b518 <memp_free>
  }
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
	...

0800d8c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d106      	bne.n	800d8e0 <tcp_seg_copy+0x1c>
 800d8d2:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <tcp_seg_copy+0x4c>)
 800d8d4:	f240 6282 	movw	r2, #1666	; 0x682
 800d8d8:	490e      	ldr	r1, [pc, #56]	; (800d914 <tcp_seg_copy+0x50>)
 800d8da:	480f      	ldr	r0, [pc, #60]	; (800d918 <tcp_seg_copy+0x54>)
 800d8dc:	f004 fd54 	bl	8012388 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d8e0:	2003      	movs	r0, #3
 800d8e2:	f7fd fda9 	bl	800b438 <memp_malloc>
 800d8e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <tcp_seg_copy+0x2e>
    return NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e00a      	b.n	800d908 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d8f2:	2210      	movs	r2, #16
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f004 fe21 	bl	801253e <memcpy>
  pbuf_ref(cseg->p);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe fdf3 	bl	800c4ec <pbuf_ref>
  return cseg;
 800d906:	68fb      	ldr	r3, [r7, #12]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	08014688 	.word	0x08014688
 800d914:	08014c2c 	.word	0x08014c2c
 800d918:	0801471c 	.word	0x0801471c

0800d91c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d109      	bne.n	800d944 <tcp_recv_null+0x28>
 800d930:	4b12      	ldr	r3, [pc, #72]	; (800d97c <tcp_recv_null+0x60>)
 800d932:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d936:	4912      	ldr	r1, [pc, #72]	; (800d980 <tcp_recv_null+0x64>)
 800d938:	4812      	ldr	r0, [pc, #72]	; (800d984 <tcp_recv_null+0x68>)
 800d93a:	f004 fd25 	bl	8012388 <iprintf>
 800d93e:	f06f 030f 	mvn.w	r3, #15
 800d942:	e016      	b.n	800d972 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d009      	beq.n	800d95e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	891b      	ldrh	r3, [r3, #8]
 800d94e:	4619      	mov	r1, r3
 800d950:	68b8      	ldr	r0, [r7, #8]
 800d952:	f7ff fb19 	bl	800cf88 <tcp_recved>
    pbuf_free(p);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f7fe fd28 	bl	800c3ac <pbuf_free>
 800d95c:	e008      	b.n	800d970 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d95e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d104      	bne.n	800d970 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d966:	68b8      	ldr	r0, [r7, #8]
 800d968:	f7ff f9be 	bl	800cce8 <tcp_close>
 800d96c:	4603      	mov	r3, r0
 800d96e:	e000      	b.n	800d972 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	08014688 	.word	0x08014688
 800d980:	08014c48 	.word	0x08014c48
 800d984:	0801471c 	.word	0x0801471c

0800d988 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d996:	2b00      	cmp	r3, #0
 800d998:	db01      	blt.n	800d99e <tcp_kill_prio+0x16>
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	e000      	b.n	800d9a0 <tcp_kill_prio+0x18>
 800d99e:	237f      	movs	r3, #127	; 0x7f
 800d9a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d9a2:	7afb      	ldrb	r3, [r7, #11]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d034      	beq.n	800da12 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d9a8:	7afb      	ldrb	r3, [r7, #11]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9b6:	4b19      	ldr	r3, [pc, #100]	; (800da1c <tcp_kill_prio+0x94>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	e01f      	b.n	800d9fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	7d5b      	ldrb	r3, [r3, #21]
 800d9c2:	7afa      	ldrb	r2, [r7, #11]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d80c      	bhi.n	800d9e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d9cc:	7afa      	ldrb	r2, [r7, #11]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d112      	bne.n	800d9f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d9d2:	4b13      	ldr	r3, [pc, #76]	; (800da20 <tcp_kill_prio+0x98>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d80a      	bhi.n	800d9f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d9e2:	4b0f      	ldr	r3, [pc, #60]	; (800da20 <tcp_kill_prio+0x98>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	7d5b      	ldrb	r3, [r3, #21]
 800d9f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1dc      	bne.n	800d9be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d004      	beq.n	800da14 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800da0a:	6938      	ldr	r0, [r7, #16]
 800da0c:	f7ff fa56 	bl	800cebc <tcp_abort>
 800da10:	e000      	b.n	800da14 <tcp_kill_prio+0x8c>
    return;
 800da12:	bf00      	nop
  }
}
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	24008234 	.word	0x24008234
 800da20:	24008228 	.word	0x24008228

0800da24 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	2b08      	cmp	r3, #8
 800da32:	d009      	beq.n	800da48 <tcp_kill_state+0x24>
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	2b09      	cmp	r3, #9
 800da38:	d006      	beq.n	800da48 <tcp_kill_state+0x24>
 800da3a:	4b1a      	ldr	r3, [pc, #104]	; (800daa4 <tcp_kill_state+0x80>)
 800da3c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800da40:	4919      	ldr	r1, [pc, #100]	; (800daa8 <tcp_kill_state+0x84>)
 800da42:	481a      	ldr	r0, [pc, #104]	; (800daac <tcp_kill_state+0x88>)
 800da44:	f004 fca0 	bl	8012388 <iprintf>

  inactivity = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da50:	4b17      	ldr	r3, [pc, #92]	; (800dab0 <tcp_kill_state+0x8c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	617b      	str	r3, [r7, #20]
 800da56:	e017      	b.n	800da88 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	7d1b      	ldrb	r3, [r3, #20]
 800da5c:	79fa      	ldrb	r2, [r7, #7]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d10f      	bne.n	800da82 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800da62:	4b14      	ldr	r3, [pc, #80]	; (800dab4 <tcp_kill_state+0x90>)
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d807      	bhi.n	800da82 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800da72:	4b10      	ldr	r3, [pc, #64]	; (800dab4 <tcp_kill_state+0x90>)
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	6a1b      	ldr	r3, [r3, #32]
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1e4      	bne.n	800da58 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d003      	beq.n	800da9c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800da94:	2100      	movs	r1, #0
 800da96:	6938      	ldr	r0, [r7, #16]
 800da98:	f7ff f952 	bl	800cd40 <tcp_abandon>
  }
}
 800da9c:	bf00      	nop
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	08014688 	.word	0x08014688
 800daa8:	08014c64 	.word	0x08014c64
 800daac:	0801471c 	.word	0x0801471c
 800dab0:	24008234 	.word	0x24008234
 800dab4:	24008228 	.word	0x24008228

0800dab8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dac6:	4b12      	ldr	r3, [pc, #72]	; (800db10 <tcp_kill_timewait+0x58>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	e012      	b.n	800daf4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dace:	4b11      	ldr	r3, [pc, #68]	; (800db14 <tcp_kill_timewait+0x5c>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d807      	bhi.n	800daee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dade:	4b0d      	ldr	r3, [pc, #52]	; (800db14 <tcp_kill_timewait+0x5c>)
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e9      	bne.n	800dace <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800db00:	68b8      	ldr	r0, [r7, #8]
 800db02:	f7ff f9db 	bl	800cebc <tcp_abort>
  }
}
 800db06:	bf00      	nop
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	24008238 	.word	0x24008238
 800db14:	24008228 	.word	0x24008228

0800db18 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800db1e:	4b10      	ldr	r3, [pc, #64]	; (800db60 <tcp_handle_closepend+0x48>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800db24:	e014      	b.n	800db50 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	8b5b      	ldrh	r3, [r3, #26]
 800db30:	f003 0308 	and.w	r3, r3, #8
 800db34:	2b00      	cmp	r3, #0
 800db36:	d009      	beq.n	800db4c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	8b5b      	ldrh	r3, [r3, #26]
 800db3c:	f023 0308 	bic.w	r3, r3, #8
 800db40:	b29a      	uxth	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff f864 	bl	800cc14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1e7      	bne.n	800db26 <tcp_handle_closepend+0xe>
  }
}
 800db56:	bf00      	nop
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	24008234 	.word	0x24008234

0800db64 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	4603      	mov	r3, r0
 800db6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800db6e:	2001      	movs	r0, #1
 800db70:	f7fd fc62 	bl	800b438 <memp_malloc>
 800db74:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d126      	bne.n	800dbca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800db7c:	f7ff ffcc 	bl	800db18 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800db80:	f7ff ff9a 	bl	800dab8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800db84:	2001      	movs	r0, #1
 800db86:	f7fd fc57 	bl	800b438 <memp_malloc>
 800db8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d11b      	bne.n	800dbca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800db92:	2009      	movs	r0, #9
 800db94:	f7ff ff46 	bl	800da24 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800db98:	2001      	movs	r0, #1
 800db9a:	f7fd fc4d 	bl	800b438 <memp_malloc>
 800db9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d111      	bne.n	800dbca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dba6:	2008      	movs	r0, #8
 800dba8:	f7ff ff3c 	bl	800da24 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbac:	2001      	movs	r0, #1
 800dbae:	f7fd fc43 	bl	800b438 <memp_malloc>
 800dbb2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d107      	bne.n	800dbca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff fee3 	bl	800d988 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	f7fd fc38 	bl	800b438 <memp_malloc>
 800dbc8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d03f      	beq.n	800dc50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dbd0:	229c      	movs	r2, #156	; 0x9c
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f004 fc3c 	bl	8012452 <memset>
    pcb->prio = prio;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	79fa      	ldrb	r2, [r7, #7]
 800dbde:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dbe6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dbf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	22ff      	movs	r2, #255	; 0xff
 800dbfe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dc06:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2206      	movs	r2, #6
 800dc0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2206      	movs	r2, #6
 800dc14:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc1c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2201      	movs	r2, #1
 800dc22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dc26:	4b0d      	ldr	r3, [pc, #52]	; (800dc5c <tcp_alloc+0xf8>)
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	; (800dc60 <tcp_alloc+0xfc>)
 800dc30:	781a      	ldrb	r2, [r3, #0]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dc3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4a08      	ldr	r2, [pc, #32]	; (800dc64 <tcp_alloc+0x100>)
 800dc44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	4a07      	ldr	r2, [pc, #28]	; (800dc68 <tcp_alloc+0x104>)
 800dc4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dc50:	68fb      	ldr	r3, [r7, #12]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	24008228 	.word	0x24008228
 800dc60:	2400823e 	.word	0x2400823e
 800dc64:	0800d91d 	.word	0x0800d91d
 800dc68:	006ddd00 	.word	0x006ddd00

0800dc6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d107      	bne.n	800dc8a <tcp_pcb_purge+0x1e>
 800dc7a:	4b21      	ldr	r3, [pc, #132]	; (800dd00 <tcp_pcb_purge+0x94>)
 800dc7c:	f640 0251 	movw	r2, #2129	; 0x851
 800dc80:	4920      	ldr	r1, [pc, #128]	; (800dd04 <tcp_pcb_purge+0x98>)
 800dc82:	4821      	ldr	r0, [pc, #132]	; (800dd08 <tcp_pcb_purge+0x9c>)
 800dc84:	f004 fb80 	bl	8012388 <iprintf>
 800dc88:	e037      	b.n	800dcfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	7d1b      	ldrb	r3, [r3, #20]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d033      	beq.n	800dcfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dc96:	2b0a      	cmp	r3, #10
 800dc98:	d02f      	beq.n	800dcfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d02b      	beq.n	800dcfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fe fb7c 	bl	800c3ac <pbuf_free>
      pcb->refused_data = NULL;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f986 	bl	800dfd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff fdc7 	bl	800d868 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7ff fdc2 	bl	800d868 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	66da      	str	r2, [r3, #108]	; 0x6c
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	08014688 	.word	0x08014688
 800dd04:	08014d24 	.word	0x08014d24
 800dd08:	0801471c 	.word	0x0801471c

0800dd0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <tcp_pcb_remove+0x1e>
 800dd1c:	4b3e      	ldr	r3, [pc, #248]	; (800de18 <tcp_pcb_remove+0x10c>)
 800dd1e:	f640 0283 	movw	r2, #2179	; 0x883
 800dd22:	493e      	ldr	r1, [pc, #248]	; (800de1c <tcp_pcb_remove+0x110>)
 800dd24:	483e      	ldr	r0, [pc, #248]	; (800de20 <tcp_pcb_remove+0x114>)
 800dd26:	f004 fb2f 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <tcp_pcb_remove+0x32>
 800dd30:	4b39      	ldr	r3, [pc, #228]	; (800de18 <tcp_pcb_remove+0x10c>)
 800dd32:	f640 0284 	movw	r2, #2180	; 0x884
 800dd36:	493b      	ldr	r1, [pc, #236]	; (800de24 <tcp_pcb_remove+0x118>)
 800dd38:	4839      	ldr	r0, [pc, #228]	; (800de20 <tcp_pcb_remove+0x114>)
 800dd3a:	f004 fb25 	bl	8012388 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	683a      	ldr	r2, [r7, #0]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d105      	bne.n	800dd54 <tcp_pcb_remove+0x48>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68da      	ldr	r2, [r3, #12]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	e013      	b.n	800dd7c <tcp_pcb_remove+0x70>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]
 800dd5a:	e00c      	b.n	800dd76 <tcp_pcb_remove+0x6a>
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d104      	bne.n	800dd70 <tcp_pcb_remove+0x64>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	60da      	str	r2, [r3, #12]
 800dd6e:	e005      	b.n	800dd7c <tcp_pcb_remove+0x70>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	60fb      	str	r3, [r7, #12]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d1ef      	bne.n	800dd5c <tcp_pcb_remove+0x50>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dd82:	6838      	ldr	r0, [r7, #0]
 800dd84:	f7ff ff72 	bl	800dc6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	7d1b      	ldrb	r3, [r3, #20]
 800dd8c:	2b0a      	cmp	r3, #10
 800dd8e:	d013      	beq.n	800ddb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d00f      	beq.n	800ddb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	8b5b      	ldrh	r3, [r3, #26]
 800dd9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d009      	beq.n	800ddb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	8b5b      	ldrh	r3, [r3, #26]
 800dda8:	f043 0302 	orr.w	r3, r3, #2
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ddb2:	6838      	ldr	r0, [r7, #0]
 800ddb4:	f002 ff6e 	bl	8010c94 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	7d1b      	ldrb	r3, [r3, #20]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d020      	beq.n	800de02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d006      	beq.n	800ddd6 <tcp_pcb_remove+0xca>
 800ddc8:	4b13      	ldr	r3, [pc, #76]	; (800de18 <tcp_pcb_remove+0x10c>)
 800ddca:	f640 0293 	movw	r2, #2195	; 0x893
 800ddce:	4916      	ldr	r1, [pc, #88]	; (800de28 <tcp_pcb_remove+0x11c>)
 800ddd0:	4813      	ldr	r0, [pc, #76]	; (800de20 <tcp_pcb_remove+0x114>)
 800ddd2:	f004 fad9 	bl	8012388 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d006      	beq.n	800ddec <tcp_pcb_remove+0xe0>
 800ddde:	4b0e      	ldr	r3, [pc, #56]	; (800de18 <tcp_pcb_remove+0x10c>)
 800dde0:	f640 0294 	movw	r2, #2196	; 0x894
 800dde4:	4911      	ldr	r1, [pc, #68]	; (800de2c <tcp_pcb_remove+0x120>)
 800dde6:	480e      	ldr	r0, [pc, #56]	; (800de20 <tcp_pcb_remove+0x114>)
 800dde8:	f004 face 	bl	8012388 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d006      	beq.n	800de02 <tcp_pcb_remove+0xf6>
 800ddf4:	4b08      	ldr	r3, [pc, #32]	; (800de18 <tcp_pcb_remove+0x10c>)
 800ddf6:	f640 0296 	movw	r2, #2198	; 0x896
 800ddfa:	490d      	ldr	r1, [pc, #52]	; (800de30 <tcp_pcb_remove+0x124>)
 800ddfc:	4808      	ldr	r0, [pc, #32]	; (800de20 <tcp_pcb_remove+0x114>)
 800ddfe:	f004 fac3 	bl	8012388 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2200      	movs	r2, #0
 800de06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2200      	movs	r2, #0
 800de0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800de0e:	bf00      	nop
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	08014688 	.word	0x08014688
 800de1c:	08014d40 	.word	0x08014d40
 800de20:	0801471c 	.word	0x0801471c
 800de24:	08014d5c 	.word	0x08014d5c
 800de28:	08014d7c 	.word	0x08014d7c
 800de2c:	08014d94 	.word	0x08014d94
 800de30:	08014db0 	.word	0x08014db0

0800de34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d106      	bne.n	800de50 <tcp_next_iss+0x1c>
 800de42:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <tcp_next_iss+0x38>)
 800de44:	f640 02af 	movw	r2, #2223	; 0x8af
 800de48:	4909      	ldr	r1, [pc, #36]	; (800de70 <tcp_next_iss+0x3c>)
 800de4a:	480a      	ldr	r0, [pc, #40]	; (800de74 <tcp_next_iss+0x40>)
 800de4c:	f004 fa9c 	bl	8012388 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800de50:	4b09      	ldr	r3, [pc, #36]	; (800de78 <tcp_next_iss+0x44>)
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	4b09      	ldr	r3, [pc, #36]	; (800de7c <tcp_next_iss+0x48>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4413      	add	r3, r2
 800de5a:	4a07      	ldr	r2, [pc, #28]	; (800de78 <tcp_next_iss+0x44>)
 800de5c:	6013      	str	r3, [r2, #0]
  return iss;
 800de5e:	4b06      	ldr	r3, [pc, #24]	; (800de78 <tcp_next_iss+0x44>)
 800de60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800de62:	4618      	mov	r0, r3
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	08014688 	.word	0x08014688
 800de70:	08014dc8 	.word	0x08014dc8
 800de74:	0801471c 	.word	0x0801471c
 800de78:	24000028 	.word	0x24000028
 800de7c:	24008228 	.word	0x24008228

0800de80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <tcp_eff_send_mss_netif+0x22>
 800de94:	4b14      	ldr	r3, [pc, #80]	; (800dee8 <tcp_eff_send_mss_netif+0x68>)
 800de96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800de9a:	4914      	ldr	r1, [pc, #80]	; (800deec <tcp_eff_send_mss_netif+0x6c>)
 800de9c:	4814      	ldr	r0, [pc, #80]	; (800def0 <tcp_eff_send_mss_netif+0x70>)
 800de9e:	f004 fa73 	bl	8012388 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dea8:	89fb      	ldrh	r3, [r7, #14]
 800deaa:	e019      	b.n	800dee0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800deb2:	8afb      	ldrh	r3, [r7, #22]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d012      	beq.n	800dede <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800deb8:	2328      	movs	r3, #40	; 0x28
 800deba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800debc:	8afa      	ldrh	r2, [r7, #22]
 800debe:	8abb      	ldrh	r3, [r7, #20]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d904      	bls.n	800dece <tcp_eff_send_mss_netif+0x4e>
 800dec4:	8afa      	ldrh	r2, [r7, #22]
 800dec6:	8abb      	ldrh	r3, [r7, #20]
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	b29b      	uxth	r3, r3
 800decc:	e000      	b.n	800ded0 <tcp_eff_send_mss_netif+0x50>
 800dece:	2300      	movs	r3, #0
 800ded0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ded2:	8a7a      	ldrh	r2, [r7, #18]
 800ded4:	89fb      	ldrh	r3, [r7, #14]
 800ded6:	4293      	cmp	r3, r2
 800ded8:	bf28      	it	cs
 800deda:	4613      	movcs	r3, r2
 800dedc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dede:	89fb      	ldrh	r3, [r7, #14]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	08014688 	.word	0x08014688
 800deec:	08014de4 	.word	0x08014de4
 800def0:	0801471c 	.word	0x0801471c

0800def4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d119      	bne.n	800df3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800df08:	4b10      	ldr	r3, [pc, #64]	; (800df4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800df0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800df0e:	4910      	ldr	r1, [pc, #64]	; (800df50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800df10:	4810      	ldr	r0, [pc, #64]	; (800df54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800df12:	f004 fa39 	bl	8012388 <iprintf>

  while (pcb != NULL) {
 800df16:	e011      	b.n	800df3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	429a      	cmp	r2, r3
 800df22:	d108      	bne.n	800df36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7fe ffc6 	bl	800cebc <tcp_abort>
      pcb = next;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	e002      	b.n	800df3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1ea      	bne.n	800df18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800df42:	bf00      	nop
 800df44:	bf00      	nop
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	08014688 	.word	0x08014688
 800df50:	08014e0c 	.word	0x08014e0c
 800df54:	0801471c 	.word	0x0801471c

0800df58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d02a      	beq.n	800dfbe <tcp_netif_ip_addr_changed+0x66>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d026      	beq.n	800dfbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800df70:	4b15      	ldr	r3, [pc, #84]	; (800dfc8 <tcp_netif_ip_addr_changed+0x70>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7ff ffbc 	bl	800def4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800df7c:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <tcp_netif_ip_addr_changed+0x74>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4619      	mov	r1, r3
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff ffb6 	bl	800def4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d017      	beq.n	800dfbe <tcp_netif_ip_addr_changed+0x66>
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d013      	beq.n	800dfbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800df96:	4b0e      	ldr	r3, [pc, #56]	; (800dfd0 <tcp_netif_ip_addr_changed+0x78>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	60fb      	str	r3, [r7, #12]
 800df9c:	e00c      	b.n	800dfb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d103      	bne.n	800dfb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1ef      	bne.n	800df9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dfbe:	bf00      	nop
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	24008234 	.word	0x24008234
 800dfcc:	2400822c 	.word	0x2400822c
 800dfd0:	24008230 	.word	0x24008230

0800dfd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d007      	beq.n	800dff4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff fc3d 	bl	800d868 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dff4:	bf00      	nop
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dffc:	b590      	push	{r4, r7, lr}
 800dffe:	b08d      	sub	sp, #52	; 0x34
 800e000:	af04      	add	r7, sp, #16
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d105      	bne.n	800e018 <tcp_input+0x1c>
 800e00c:	4b9b      	ldr	r3, [pc, #620]	; (800e27c <tcp_input+0x280>)
 800e00e:	2283      	movs	r2, #131	; 0x83
 800e010:	499b      	ldr	r1, [pc, #620]	; (800e280 <tcp_input+0x284>)
 800e012:	489c      	ldr	r0, [pc, #624]	; (800e284 <tcp_input+0x288>)
 800e014:	f004 f9b8 	bl	8012388 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	4a9a      	ldr	r2, [pc, #616]	; (800e288 <tcp_input+0x28c>)
 800e01e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	895b      	ldrh	r3, [r3, #10]
 800e024:	2b13      	cmp	r3, #19
 800e026:	f240 83d1 	bls.w	800e7cc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e02a:	4b98      	ldr	r3, [pc, #608]	; (800e28c <tcp_input+0x290>)
 800e02c:	695b      	ldr	r3, [r3, #20]
 800e02e:	4a97      	ldr	r2, [pc, #604]	; (800e28c <tcp_input+0x290>)
 800e030:	6812      	ldr	r2, [r2, #0]
 800e032:	4611      	mov	r1, r2
 800e034:	4618      	mov	r0, r3
 800e036:	f7fb ff4f 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f040 83c7 	bne.w	800e7d0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e042:	4b92      	ldr	r3, [pc, #584]	; (800e28c <tcp_input+0x290>)
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e04a:	2be0      	cmp	r3, #224	; 0xe0
 800e04c:	f000 83c0 	beq.w	800e7d0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e050:	4b8d      	ldr	r3, [pc, #564]	; (800e288 <tcp_input+0x28c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	899b      	ldrh	r3, [r3, #12]
 800e056:	b29b      	uxth	r3, r3
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fa f9d1 	bl	8008400 <lwip_htons>
 800e05e:	4603      	mov	r3, r0
 800e060:	0b1b      	lsrs	r3, r3, #12
 800e062:	b29b      	uxth	r3, r3
 800e064:	b2db      	uxtb	r3, r3
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e06a:	7cbb      	ldrb	r3, [r7, #18]
 800e06c:	2b13      	cmp	r3, #19
 800e06e:	f240 83b1 	bls.w	800e7d4 <tcp_input+0x7d8>
 800e072:	7cbb      	ldrb	r3, [r7, #18]
 800e074:	b29a      	uxth	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	891b      	ldrh	r3, [r3, #8]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	f200 83aa 	bhi.w	800e7d4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e080:	7cbb      	ldrb	r3, [r7, #18]
 800e082:	b29b      	uxth	r3, r3
 800e084:	3b14      	subs	r3, #20
 800e086:	b29a      	uxth	r2, r3
 800e088:	4b81      	ldr	r3, [pc, #516]	; (800e290 <tcp_input+0x294>)
 800e08a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e08c:	4b81      	ldr	r3, [pc, #516]	; (800e294 <tcp_input+0x298>)
 800e08e:	2200      	movs	r2, #0
 800e090:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	895a      	ldrh	r2, [r3, #10]
 800e096:	7cbb      	ldrb	r3, [r7, #18]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d309      	bcc.n	800e0b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e09e:	4b7c      	ldr	r3, [pc, #496]	; (800e290 <tcp_input+0x294>)
 800e0a0:	881a      	ldrh	r2, [r3, #0]
 800e0a2:	4b7d      	ldr	r3, [pc, #500]	; (800e298 <tcp_input+0x29c>)
 800e0a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e0a6:	7cbb      	ldrb	r3, [r7, #18]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7fe f8f8 	bl	800c2a0 <pbuf_remove_header>
 800e0b0:	e04e      	b.n	800e150 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d105      	bne.n	800e0c6 <tcp_input+0xca>
 800e0ba:	4b70      	ldr	r3, [pc, #448]	; (800e27c <tcp_input+0x280>)
 800e0bc:	22c2      	movs	r2, #194	; 0xc2
 800e0be:	4977      	ldr	r1, [pc, #476]	; (800e29c <tcp_input+0x2a0>)
 800e0c0:	4870      	ldr	r0, [pc, #448]	; (800e284 <tcp_input+0x288>)
 800e0c2:	f004 f961 	bl	8012388 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e0c6:	2114      	movs	r1, #20
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7fe f8e9 	bl	800c2a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	895a      	ldrh	r2, [r3, #10]
 800e0d2:	4b71      	ldr	r3, [pc, #452]	; (800e298 <tcp_input+0x29c>)
 800e0d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e0d6:	4b6e      	ldr	r3, [pc, #440]	; (800e290 <tcp_input+0x294>)
 800e0d8:	881a      	ldrh	r2, [r3, #0]
 800e0da:	4b6f      	ldr	r3, [pc, #444]	; (800e298 <tcp_input+0x29c>)
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e0e2:	4b6d      	ldr	r3, [pc, #436]	; (800e298 <tcp_input+0x29c>)
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7fe f8d9 	bl	800c2a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	895b      	ldrh	r3, [r3, #10]
 800e0f4:	8a3a      	ldrh	r2, [r7, #16]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	f200 836e 	bhi.w	800e7d8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	4a64      	ldr	r2, [pc, #400]	; (800e294 <tcp_input+0x298>)
 800e104:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	8a3a      	ldrh	r2, [r7, #16]
 800e10c:	4611      	mov	r1, r2
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe f8c6 	bl	800c2a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	891a      	ldrh	r2, [r3, #8]
 800e118:	8a3b      	ldrh	r3, [r7, #16]
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	895b      	ldrh	r3, [r3, #10]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d005      	beq.n	800e136 <tcp_input+0x13a>
 800e12a:	4b54      	ldr	r3, [pc, #336]	; (800e27c <tcp_input+0x280>)
 800e12c:	22df      	movs	r2, #223	; 0xdf
 800e12e:	495c      	ldr	r1, [pc, #368]	; (800e2a0 <tcp_input+0x2a4>)
 800e130:	4854      	ldr	r0, [pc, #336]	; (800e284 <tcp_input+0x288>)
 800e132:	f004 f929 	bl	8012388 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	891b      	ldrh	r3, [r3, #8]
 800e140:	429a      	cmp	r2, r3
 800e142:	d005      	beq.n	800e150 <tcp_input+0x154>
 800e144:	4b4d      	ldr	r3, [pc, #308]	; (800e27c <tcp_input+0x280>)
 800e146:	22e0      	movs	r2, #224	; 0xe0
 800e148:	4956      	ldr	r1, [pc, #344]	; (800e2a4 <tcp_input+0x2a8>)
 800e14a:	484e      	ldr	r0, [pc, #312]	; (800e284 <tcp_input+0x288>)
 800e14c:	f004 f91c 	bl	8012388 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e150:	4b4d      	ldr	r3, [pc, #308]	; (800e288 <tcp_input+0x28c>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	881b      	ldrh	r3, [r3, #0]
 800e156:	b29b      	uxth	r3, r3
 800e158:	4a4b      	ldr	r2, [pc, #300]	; (800e288 <tcp_input+0x28c>)
 800e15a:	6814      	ldr	r4, [r2, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fa f94f 	bl	8008400 <lwip_htons>
 800e162:	4603      	mov	r3, r0
 800e164:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e166:	4b48      	ldr	r3, [pc, #288]	; (800e288 <tcp_input+0x28c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	885b      	ldrh	r3, [r3, #2]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	4a46      	ldr	r2, [pc, #280]	; (800e288 <tcp_input+0x28c>)
 800e170:	6814      	ldr	r4, [r2, #0]
 800e172:	4618      	mov	r0, r3
 800e174:	f7fa f944 	bl	8008400 <lwip_htons>
 800e178:	4603      	mov	r3, r0
 800e17a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e17c:	4b42      	ldr	r3, [pc, #264]	; (800e288 <tcp_input+0x28c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	4a41      	ldr	r2, [pc, #260]	; (800e288 <tcp_input+0x28c>)
 800e184:	6814      	ldr	r4, [r2, #0]
 800e186:	4618      	mov	r0, r3
 800e188:	f7fa f94f 	bl	800842a <lwip_htonl>
 800e18c:	4603      	mov	r3, r0
 800e18e:	6063      	str	r3, [r4, #4]
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	4a45      	ldr	r2, [pc, #276]	; (800e2a8 <tcp_input+0x2ac>)
 800e194:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e196:	4b3c      	ldr	r3, [pc, #240]	; (800e288 <tcp_input+0x28c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	4a3a      	ldr	r2, [pc, #232]	; (800e288 <tcp_input+0x28c>)
 800e19e:	6814      	ldr	r4, [r2, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fa f942 	bl	800842a <lwip_htonl>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	60a3      	str	r3, [r4, #8]
 800e1aa:	68a3      	ldr	r3, [r4, #8]
 800e1ac:	4a3f      	ldr	r2, [pc, #252]	; (800e2ac <tcp_input+0x2b0>)
 800e1ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e1b0:	4b35      	ldr	r3, [pc, #212]	; (800e288 <tcp_input+0x28c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	89db      	ldrh	r3, [r3, #14]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	4a33      	ldr	r2, [pc, #204]	; (800e288 <tcp_input+0x28c>)
 800e1ba:	6814      	ldr	r4, [r2, #0]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fa f91f 	bl	8008400 <lwip_htons>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e1c6:	4b30      	ldr	r3, [pc, #192]	; (800e288 <tcp_input+0x28c>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	899b      	ldrh	r3, [r3, #12]
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fa f916 	bl	8008400 <lwip_htons>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	4b34      	ldr	r3, [pc, #208]	; (800e2b0 <tcp_input+0x2b4>)
 800e1e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	891a      	ldrh	r2, [r3, #8]
 800e1e6:	4b33      	ldr	r3, [pc, #204]	; (800e2b4 <tcp_input+0x2b8>)
 800e1e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e1ea:	4b31      	ldr	r3, [pc, #196]	; (800e2b0 <tcp_input+0x2b4>)
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	f003 0303 	and.w	r3, r3, #3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00c      	beq.n	800e210 <tcp_input+0x214>
    tcplen++;
 800e1f6:	4b2f      	ldr	r3, [pc, #188]	; (800e2b4 <tcp_input+0x2b8>)
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	4b2d      	ldr	r3, [pc, #180]	; (800e2b4 <tcp_input+0x2b8>)
 800e200:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	891a      	ldrh	r2, [r3, #8]
 800e206:	4b2b      	ldr	r3, [pc, #172]	; (800e2b4 <tcp_input+0x2b8>)
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	f200 82e6 	bhi.w	800e7dc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e210:	2300      	movs	r3, #0
 800e212:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e214:	4b28      	ldr	r3, [pc, #160]	; (800e2b8 <tcp_input+0x2bc>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	61fb      	str	r3, [r7, #28]
 800e21a:	e09d      	b.n	800e358 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	7d1b      	ldrb	r3, [r3, #20]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d105      	bne.n	800e230 <tcp_input+0x234>
 800e224:	4b15      	ldr	r3, [pc, #84]	; (800e27c <tcp_input+0x280>)
 800e226:	22fb      	movs	r2, #251	; 0xfb
 800e228:	4924      	ldr	r1, [pc, #144]	; (800e2bc <tcp_input+0x2c0>)
 800e22a:	4816      	ldr	r0, [pc, #88]	; (800e284 <tcp_input+0x288>)
 800e22c:	f004 f8ac 	bl	8012388 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	7d1b      	ldrb	r3, [r3, #20]
 800e234:	2b0a      	cmp	r3, #10
 800e236:	d105      	bne.n	800e244 <tcp_input+0x248>
 800e238:	4b10      	ldr	r3, [pc, #64]	; (800e27c <tcp_input+0x280>)
 800e23a:	22fc      	movs	r2, #252	; 0xfc
 800e23c:	4920      	ldr	r1, [pc, #128]	; (800e2c0 <tcp_input+0x2c4>)
 800e23e:	4811      	ldr	r0, [pc, #68]	; (800e284 <tcp_input+0x288>)
 800e240:	f004 f8a2 	bl	8012388 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	7d1b      	ldrb	r3, [r3, #20]
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d105      	bne.n	800e258 <tcp_input+0x25c>
 800e24c:	4b0b      	ldr	r3, [pc, #44]	; (800e27c <tcp_input+0x280>)
 800e24e:	22fd      	movs	r2, #253	; 0xfd
 800e250:	491c      	ldr	r1, [pc, #112]	; (800e2c4 <tcp_input+0x2c8>)
 800e252:	480c      	ldr	r0, [pc, #48]	; (800e284 <tcp_input+0x288>)
 800e254:	f004 f898 	bl	8012388 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	7a1b      	ldrb	r3, [r3, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d033      	beq.n	800e2c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	7a1a      	ldrb	r2, [r3, #8]
 800e264:	4b09      	ldr	r3, [pc, #36]	; (800e28c <tcp_input+0x290>)
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e26c:	3301      	adds	r3, #1
 800e26e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e270:	429a      	cmp	r2, r3
 800e272:	d029      	beq.n	800e2c8 <tcp_input+0x2cc>
      prev = pcb;
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	61bb      	str	r3, [r7, #24]
      continue;
 800e278:	e06b      	b.n	800e352 <tcp_input+0x356>
 800e27a:	bf00      	nop
 800e27c:	08014e40 	.word	0x08014e40
 800e280:	08014ec4 	.word	0x08014ec4
 800e284:	08014edc 	.word	0x08014edc
 800e288:	24008250 	.word	0x24008250
 800e28c:	240052fc 	.word	0x240052fc
 800e290:	24008254 	.word	0x24008254
 800e294:	24008258 	.word	0x24008258
 800e298:	24008256 	.word	0x24008256
 800e29c:	08014f04 	.word	0x08014f04
 800e2a0:	08014f14 	.word	0x08014f14
 800e2a4:	08014f20 	.word	0x08014f20
 800e2a8:	24008260 	.word	0x24008260
 800e2ac:	24008264 	.word	0x24008264
 800e2b0:	2400826c 	.word	0x2400826c
 800e2b4:	2400826a 	.word	0x2400826a
 800e2b8:	24008234 	.word	0x24008234
 800e2bc:	08014f40 	.word	0x08014f40
 800e2c0:	08014f68 	.word	0x08014f68
 800e2c4:	08014f94 	.word	0x08014f94
    }

    if (pcb->remote_port == tcphdr->src &&
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	8b1a      	ldrh	r2, [r3, #24]
 800e2cc:	4b72      	ldr	r3, [pc, #456]	; (800e498 <tcp_input+0x49c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d13a      	bne.n	800e34e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	8ada      	ldrh	r2, [r3, #22]
 800e2dc:	4b6e      	ldr	r3, [pc, #440]	; (800e498 <tcp_input+0x49c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	885b      	ldrh	r3, [r3, #2]
 800e2e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d132      	bne.n	800e34e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	685a      	ldr	r2, [r3, #4]
 800e2ec:	4b6b      	ldr	r3, [pc, #428]	; (800e49c <tcp_input+0x4a0>)
 800e2ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d12c      	bne.n	800e34e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	4b68      	ldr	r3, [pc, #416]	; (800e49c <tcp_input+0x4a0>)
 800e2fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d126      	bne.n	800e34e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	69fa      	ldr	r2, [r7, #28]
 800e306:	429a      	cmp	r2, r3
 800e308:	d106      	bne.n	800e318 <tcp_input+0x31c>
 800e30a:	4b65      	ldr	r3, [pc, #404]	; (800e4a0 <tcp_input+0x4a4>)
 800e30c:	f240 120d 	movw	r2, #269	; 0x10d
 800e310:	4964      	ldr	r1, [pc, #400]	; (800e4a4 <tcp_input+0x4a8>)
 800e312:	4865      	ldr	r0, [pc, #404]	; (800e4a8 <tcp_input+0x4ac>)
 800e314:	f004 f838 	bl	8012388 <iprintf>
      if (prev != NULL) {
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00a      	beq.n	800e334 <tcp_input+0x338>
        prev->next = pcb->next;
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	68da      	ldr	r2, [r3, #12]
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e326:	4b61      	ldr	r3, [pc, #388]	; (800e4ac <tcp_input+0x4b0>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e32e:	4a5f      	ldr	r2, [pc, #380]	; (800e4ac <tcp_input+0x4b0>)
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	69fa      	ldr	r2, [r7, #28]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d111      	bne.n	800e362 <tcp_input+0x366>
 800e33e:	4b58      	ldr	r3, [pc, #352]	; (800e4a0 <tcp_input+0x4a4>)
 800e340:	f240 1215 	movw	r2, #277	; 0x115
 800e344:	495a      	ldr	r1, [pc, #360]	; (800e4b0 <tcp_input+0x4b4>)
 800e346:	4858      	ldr	r0, [pc, #352]	; (800e4a8 <tcp_input+0x4ac>)
 800e348:	f004 f81e 	bl	8012388 <iprintf>
      break;
 800e34c:	e009      	b.n	800e362 <tcp_input+0x366>
    }
    prev = pcb;
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	61fb      	str	r3, [r7, #28]
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f47f af5e 	bne.w	800e21c <tcp_input+0x220>
 800e360:	e000      	b.n	800e364 <tcp_input+0x368>
      break;
 800e362:	bf00      	nop
  }

  if (pcb == NULL) {
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	f040 80aa 	bne.w	800e4c0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e36c:	4b51      	ldr	r3, [pc, #324]	; (800e4b4 <tcp_input+0x4b8>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	61fb      	str	r3, [r7, #28]
 800e372:	e03f      	b.n	800e3f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	7d1b      	ldrb	r3, [r3, #20]
 800e378:	2b0a      	cmp	r3, #10
 800e37a:	d006      	beq.n	800e38a <tcp_input+0x38e>
 800e37c:	4b48      	ldr	r3, [pc, #288]	; (800e4a0 <tcp_input+0x4a4>)
 800e37e:	f240 121f 	movw	r2, #287	; 0x11f
 800e382:	494d      	ldr	r1, [pc, #308]	; (800e4b8 <tcp_input+0x4bc>)
 800e384:	4848      	ldr	r0, [pc, #288]	; (800e4a8 <tcp_input+0x4ac>)
 800e386:	f003 ffff 	bl	8012388 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	7a1b      	ldrb	r3, [r3, #8]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	7a1a      	ldrb	r2, [r3, #8]
 800e396:	4b41      	ldr	r3, [pc, #260]	; (800e49c <tcp_input+0x4a0>)
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e39e:	3301      	adds	r3, #1
 800e3a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d122      	bne.n	800e3ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	8b1a      	ldrh	r2, [r3, #24]
 800e3aa:	4b3b      	ldr	r3, [pc, #236]	; (800e498 <tcp_input+0x49c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d11b      	bne.n	800e3ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	8ada      	ldrh	r2, [r3, #22]
 800e3ba:	4b37      	ldr	r3, [pc, #220]	; (800e498 <tcp_input+0x49c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	885b      	ldrh	r3, [r3, #2]
 800e3c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d113      	bne.n	800e3ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	685a      	ldr	r2, [r3, #4]
 800e3ca:	4b34      	ldr	r3, [pc, #208]	; (800e49c <tcp_input+0x4a0>)
 800e3cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d10d      	bne.n	800e3ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	4b31      	ldr	r3, [pc, #196]	; (800e49c <tcp_input+0x4a0>)
 800e3d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d107      	bne.n	800e3ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e3de:	69f8      	ldr	r0, [r7, #28]
 800e3e0:	f000 fb56 	bl	800ea90 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7fd ffe1 	bl	800c3ac <pbuf_free>
        return;
 800e3ea:	e1fd      	b.n	800e7e8 <tcp_input+0x7ec>
        continue;
 800e3ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	61fb      	str	r3, [r7, #28]
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1bc      	bne.n	800e374 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e3fe:	4b2f      	ldr	r3, [pc, #188]	; (800e4bc <tcp_input+0x4c0>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	e02a      	b.n	800e45c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	7a1b      	ldrb	r3, [r3, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00c      	beq.n	800e428 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	7a1a      	ldrb	r2, [r3, #8]
 800e412:	4b22      	ldr	r3, [pc, #136]	; (800e49c <tcp_input+0x4a0>)
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e41a:	3301      	adds	r3, #1
 800e41c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e41e:	429a      	cmp	r2, r3
 800e420:	d002      	beq.n	800e428 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	61bb      	str	r3, [r7, #24]
        continue;
 800e426:	e016      	b.n	800e456 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	8ada      	ldrh	r2, [r3, #22]
 800e42c:	4b1a      	ldr	r3, [pc, #104]	; (800e498 <tcp_input+0x49c>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	885b      	ldrh	r3, [r3, #2]
 800e432:	b29b      	uxth	r3, r3
 800e434:	429a      	cmp	r2, r3
 800e436:	d10c      	bne.n	800e452 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	4b17      	ldr	r3, [pc, #92]	; (800e49c <tcp_input+0x4a0>)
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	429a      	cmp	r2, r3
 800e442:	d00f      	beq.n	800e464 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00d      	beq.n	800e466 <tcp_input+0x46a>
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d009      	beq.n	800e466 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	617b      	str	r3, [r7, #20]
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1d1      	bne.n	800e406 <tcp_input+0x40a>
 800e462:	e000      	b.n	800e466 <tcp_input+0x46a>
            break;
 800e464:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d029      	beq.n	800e4c0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00a      	beq.n	800e488 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	68da      	ldr	r2, [r3, #12]
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e47a:	4b10      	ldr	r3, [pc, #64]	; (800e4bc <tcp_input+0x4c0>)
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e482:	4a0e      	ldr	r2, [pc, #56]	; (800e4bc <tcp_input+0x4c0>)
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e488:	6978      	ldr	r0, [r7, #20]
 800e48a:	f000 fa03 	bl	800e894 <tcp_listen_input>
      }
      pbuf_free(p);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7fd ff8c 	bl	800c3ac <pbuf_free>
      return;
 800e494:	e1a8      	b.n	800e7e8 <tcp_input+0x7ec>
 800e496:	bf00      	nop
 800e498:	24008250 	.word	0x24008250
 800e49c:	240052fc 	.word	0x240052fc
 800e4a0:	08014e40 	.word	0x08014e40
 800e4a4:	08014fbc 	.word	0x08014fbc
 800e4a8:	08014edc 	.word	0x08014edc
 800e4ac:	24008234 	.word	0x24008234
 800e4b0:	08014fe8 	.word	0x08014fe8
 800e4b4:	24008238 	.word	0x24008238
 800e4b8:	08015014 	.word	0x08015014
 800e4bc:	24008230 	.word	0x24008230
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f000 8158 	beq.w	800e778 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e4c8:	4b95      	ldr	r3, [pc, #596]	; (800e720 <tcp_input+0x724>)
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	891a      	ldrh	r2, [r3, #8]
 800e4d2:	4b93      	ldr	r3, [pc, #588]	; (800e720 <tcp_input+0x724>)
 800e4d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e4d6:	4a92      	ldr	r2, [pc, #584]	; (800e720 <tcp_input+0x724>)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e4dc:	4b91      	ldr	r3, [pc, #580]	; (800e724 <tcp_input+0x728>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a8f      	ldr	r2, [pc, #572]	; (800e720 <tcp_input+0x724>)
 800e4e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e4e4:	4b90      	ldr	r3, [pc, #576]	; (800e728 <tcp_input+0x72c>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e4ea:	4b90      	ldr	r3, [pc, #576]	; (800e72c <tcp_input+0x730>)
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e4f0:	4b8f      	ldr	r3, [pc, #572]	; (800e730 <tcp_input+0x734>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e4f6:	4b8f      	ldr	r3, [pc, #572]	; (800e734 <tcp_input+0x738>)
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	f003 0308 	and.w	r3, r3, #8
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d006      	beq.n	800e510 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	7b5b      	ldrb	r3, [r3, #13]
 800e506:	f043 0301 	orr.w	r3, r3, #1
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e514:	2b00      	cmp	r3, #0
 800e516:	d017      	beq.n	800e548 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e518:	69f8      	ldr	r0, [r7, #28]
 800e51a:	f7ff f929 	bl	800d770 <tcp_process_refused_data>
 800e51e:	4603      	mov	r3, r0
 800e520:	f113 0f0d 	cmn.w	r3, #13
 800e524:	d007      	beq.n	800e536 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00c      	beq.n	800e548 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e52e:	4b82      	ldr	r3, [pc, #520]	; (800e738 <tcp_input+0x73c>)
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d008      	beq.n	800e548 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 80e3 	bne.w	800e706 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e540:	69f8      	ldr	r0, [r7, #28]
 800e542:	f003 f9ad 	bl	80118a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e546:	e0de      	b.n	800e706 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e548:	4a7c      	ldr	r2, [pc, #496]	; (800e73c <tcp_input+0x740>)
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e54e:	69f8      	ldr	r0, [r7, #28]
 800e550:	f000 fb18 	bl	800eb84 <tcp_process>
 800e554:	4603      	mov	r3, r0
 800e556:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e55c:	f113 0f0d 	cmn.w	r3, #13
 800e560:	f000 80d3 	beq.w	800e70a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e564:	4b71      	ldr	r3, [pc, #452]	; (800e72c <tcp_input+0x730>)
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	f003 0308 	and.w	r3, r3, #8
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d015      	beq.n	800e59c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e576:	2b00      	cmp	r3, #0
 800e578:	d008      	beq.n	800e58c <tcp_input+0x590>
 800e57a:	69fb      	ldr	r3, [r7, #28]
 800e57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e580:	69fa      	ldr	r2, [r7, #28]
 800e582:	6912      	ldr	r2, [r2, #16]
 800e584:	f06f 010d 	mvn.w	r1, #13
 800e588:	4610      	mov	r0, r2
 800e58a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e58c:	69f9      	ldr	r1, [r7, #28]
 800e58e:	486c      	ldr	r0, [pc, #432]	; (800e740 <tcp_input+0x744>)
 800e590:	f7ff fbbc 	bl	800dd0c <tcp_pcb_remove>
        tcp_free(pcb);
 800e594:	69f8      	ldr	r0, [r7, #28]
 800e596:	f7fe f9a9 	bl	800c8ec <tcp_free>
 800e59a:	e0da      	b.n	800e752 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e5a0:	4b63      	ldr	r3, [pc, #396]	; (800e730 <tcp_input+0x734>)
 800e5a2:	881b      	ldrh	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01d      	beq.n	800e5e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e5a8:	4b61      	ldr	r3, [pc, #388]	; (800e730 <tcp_input+0x734>)
 800e5aa:	881b      	ldrh	r3, [r3, #0]
 800e5ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00a      	beq.n	800e5ce <tcp_input+0x5d2>
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5be:	69fa      	ldr	r2, [r7, #28]
 800e5c0:	6910      	ldr	r0, [r2, #16]
 800e5c2:	89fa      	ldrh	r2, [r7, #14]
 800e5c4:	69f9      	ldr	r1, [r7, #28]
 800e5c6:	4798      	blx	r3
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	74fb      	strb	r3, [r7, #19]
 800e5cc:	e001      	b.n	800e5d2 <tcp_input+0x5d6>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e5d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5d6:	f113 0f0d 	cmn.w	r3, #13
 800e5da:	f000 8098 	beq.w	800e70e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e5de:	4b54      	ldr	r3, [pc, #336]	; (800e730 <tcp_input+0x734>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e5e4:	69f8      	ldr	r0, [r7, #28]
 800e5e6:	f000 f915 	bl	800e814 <tcp_input_delayed_close>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f040 8090 	bne.w	800e712 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e5f2:	4b4d      	ldr	r3, [pc, #308]	; (800e728 <tcp_input+0x72c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d041      	beq.n	800e67e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d006      	beq.n	800e610 <tcp_input+0x614>
 800e602:	4b50      	ldr	r3, [pc, #320]	; (800e744 <tcp_input+0x748>)
 800e604:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e608:	494f      	ldr	r1, [pc, #316]	; (800e748 <tcp_input+0x74c>)
 800e60a:	4850      	ldr	r0, [pc, #320]	; (800e74c <tcp_input+0x750>)
 800e60c:	f003 febc 	bl	8012388 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	8b5b      	ldrh	r3, [r3, #26]
 800e614:	f003 0310 	and.w	r3, r3, #16
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d008      	beq.n	800e62e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e61c:	4b42      	ldr	r3, [pc, #264]	; (800e728 <tcp_input+0x72c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4618      	mov	r0, r3
 800e622:	f7fd fec3 	bl	800c3ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e626:	69f8      	ldr	r0, [r7, #28]
 800e628:	f7fe fc48 	bl	800cebc <tcp_abort>
            goto aborted;
 800e62c:	e091      	b.n	800e752 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00c      	beq.n	800e652 <tcp_input+0x656>
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	6918      	ldr	r0, [r3, #16]
 800e642:	4b39      	ldr	r3, [pc, #228]	; (800e728 <tcp_input+0x72c>)
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	2300      	movs	r3, #0
 800e648:	69f9      	ldr	r1, [r7, #28]
 800e64a:	47a0      	blx	r4
 800e64c:	4603      	mov	r3, r0
 800e64e:	74fb      	strb	r3, [r7, #19]
 800e650:	e008      	b.n	800e664 <tcp_input+0x668>
 800e652:	4b35      	ldr	r3, [pc, #212]	; (800e728 <tcp_input+0x72c>)
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	2300      	movs	r3, #0
 800e658:	69f9      	ldr	r1, [r7, #28]
 800e65a:	2000      	movs	r0, #0
 800e65c:	f7ff f95e 	bl	800d91c <tcp_recv_null>
 800e660:	4603      	mov	r3, r0
 800e662:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e668:	f113 0f0d 	cmn.w	r3, #13
 800e66c:	d053      	beq.n	800e716 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e66e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e676:	4b2c      	ldr	r3, [pc, #176]	; (800e728 <tcp_input+0x72c>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e67e:	4b2b      	ldr	r3, [pc, #172]	; (800e72c <tcp_input+0x730>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	f003 0320 	and.w	r3, r3, #32
 800e686:	2b00      	cmp	r3, #0
 800e688:	d030      	beq.n	800e6ec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d009      	beq.n	800e6a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e696:	7b5a      	ldrb	r2, [r3, #13]
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e69c:	f042 0220 	orr.w	r2, r2, #32
 800e6a0:	b2d2      	uxtb	r2, r2
 800e6a2:	735a      	strb	r2, [r3, #13]
 800e6a4:	e022      	b.n	800e6ec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e6ae:	d005      	beq.n	800e6bc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00b      	beq.n	800e6de <tcp_input+0x6e2>
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	6918      	ldr	r0, [r3, #16]
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	69f9      	ldr	r1, [r7, #28]
 800e6d6:	47a0      	blx	r4
 800e6d8:	4603      	mov	r3, r0
 800e6da:	74fb      	strb	r3, [r7, #19]
 800e6dc:	e001      	b.n	800e6e2 <tcp_input+0x6e6>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e6e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6e6:	f113 0f0d 	cmn.w	r3, #13
 800e6ea:	d016      	beq.n	800e71a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e6ec:	4b13      	ldr	r3, [pc, #76]	; (800e73c <tcp_input+0x740>)
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e6f2:	69f8      	ldr	r0, [r7, #28]
 800e6f4:	f000 f88e 	bl	800e814 <tcp_input_delayed_close>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d128      	bne.n	800e750 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e6fe:	69f8      	ldr	r0, [r7, #28]
 800e700:	f002 fac8 	bl	8010c94 <tcp_output>
 800e704:	e025      	b.n	800e752 <tcp_input+0x756>
        goto aborted;
 800e706:	bf00      	nop
 800e708:	e023      	b.n	800e752 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e70a:	bf00      	nop
 800e70c:	e021      	b.n	800e752 <tcp_input+0x756>
              goto aborted;
 800e70e:	bf00      	nop
 800e710:	e01f      	b.n	800e752 <tcp_input+0x756>
          goto aborted;
 800e712:	bf00      	nop
 800e714:	e01d      	b.n	800e752 <tcp_input+0x756>
            goto aborted;
 800e716:	bf00      	nop
 800e718:	e01b      	b.n	800e752 <tcp_input+0x756>
              goto aborted;
 800e71a:	bf00      	nop
 800e71c:	e019      	b.n	800e752 <tcp_input+0x756>
 800e71e:	bf00      	nop
 800e720:	24008240 	.word	0x24008240
 800e724:	24008250 	.word	0x24008250
 800e728:	24008270 	.word	0x24008270
 800e72c:	2400826d 	.word	0x2400826d
 800e730:	24008268 	.word	0x24008268
 800e734:	2400826c 	.word	0x2400826c
 800e738:	2400826a 	.word	0x2400826a
 800e73c:	24008274 	.word	0x24008274
 800e740:	24008234 	.word	0x24008234
 800e744:	08014e40 	.word	0x08014e40
 800e748:	08015044 	.word	0x08015044
 800e74c:	08014edc 	.word	0x08014edc
          goto aborted;
 800e750:	bf00      	nop
    tcp_input_pcb = NULL;
 800e752:	4b27      	ldr	r3, [pc, #156]	; (800e7f0 <tcp_input+0x7f4>)
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e758:	4b26      	ldr	r3, [pc, #152]	; (800e7f4 <tcp_input+0x7f8>)
 800e75a:	2200      	movs	r2, #0
 800e75c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e75e:	4b26      	ldr	r3, [pc, #152]	; (800e7f8 <tcp_input+0x7fc>)
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d03f      	beq.n	800e7e6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e766:	4b24      	ldr	r3, [pc, #144]	; (800e7f8 <tcp_input+0x7fc>)
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7fd fe1e 	bl	800c3ac <pbuf_free>
      inseg.p = NULL;
 800e770:	4b21      	ldr	r3, [pc, #132]	; (800e7f8 <tcp_input+0x7fc>)
 800e772:	2200      	movs	r2, #0
 800e774:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e776:	e036      	b.n	800e7e6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e778:	4b20      	ldr	r3, [pc, #128]	; (800e7fc <tcp_input+0x800>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	899b      	ldrh	r3, [r3, #12]
 800e77e:	b29b      	uxth	r3, r3
 800e780:	4618      	mov	r0, r3
 800e782:	f7f9 fe3d 	bl	8008400 <lwip_htons>
 800e786:	4603      	mov	r3, r0
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 0304 	and.w	r3, r3, #4
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d118      	bne.n	800e7c4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e792:	4b1b      	ldr	r3, [pc, #108]	; (800e800 <tcp_input+0x804>)
 800e794:	6819      	ldr	r1, [r3, #0]
 800e796:	4b1b      	ldr	r3, [pc, #108]	; (800e804 <tcp_input+0x808>)
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	461a      	mov	r2, r3
 800e79c:	4b1a      	ldr	r3, [pc, #104]	; (800e808 <tcp_input+0x80c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7a2:	4b16      	ldr	r3, [pc, #88]	; (800e7fc <tcp_input+0x800>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7aa:	4a14      	ldr	r2, [pc, #80]	; (800e7fc <tcp_input+0x800>)
 800e7ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ae:	8812      	ldrh	r2, [r2, #0]
 800e7b0:	b292      	uxth	r2, r2
 800e7b2:	9202      	str	r2, [sp, #8]
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	4b15      	ldr	r3, [pc, #84]	; (800e80c <tcp_input+0x810>)
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	4b15      	ldr	r3, [pc, #84]	; (800e810 <tcp_input+0x814>)
 800e7bc:	4602      	mov	r2, r0
 800e7be:	2000      	movs	r0, #0
 800e7c0:	f003 f81c 	bl	80117fc <tcp_rst>
    pbuf_free(p);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7fd fdf1 	bl	800c3ac <pbuf_free>
  return;
 800e7ca:	e00c      	b.n	800e7e6 <tcp_input+0x7ea>
    goto dropped;
 800e7cc:	bf00      	nop
 800e7ce:	e006      	b.n	800e7de <tcp_input+0x7e2>
    goto dropped;
 800e7d0:	bf00      	nop
 800e7d2:	e004      	b.n	800e7de <tcp_input+0x7e2>
    goto dropped;
 800e7d4:	bf00      	nop
 800e7d6:	e002      	b.n	800e7de <tcp_input+0x7e2>
      goto dropped;
 800e7d8:	bf00      	nop
 800e7da:	e000      	b.n	800e7de <tcp_input+0x7e2>
      goto dropped;
 800e7dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7fd fde4 	bl	800c3ac <pbuf_free>
 800e7e4:	e000      	b.n	800e7e8 <tcp_input+0x7ec>
  return;
 800e7e6:	bf00      	nop
}
 800e7e8:	3724      	adds	r7, #36	; 0x24
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd90      	pop	{r4, r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	24008274 	.word	0x24008274
 800e7f4:	24008270 	.word	0x24008270
 800e7f8:	24008240 	.word	0x24008240
 800e7fc:	24008250 	.word	0x24008250
 800e800:	24008264 	.word	0x24008264
 800e804:	2400826a 	.word	0x2400826a
 800e808:	24008260 	.word	0x24008260
 800e80c:	2400530c 	.word	0x2400530c
 800e810:	24005310 	.word	0x24005310

0800e814 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <tcp_input_delayed_close+0x1c>
 800e822:	4b17      	ldr	r3, [pc, #92]	; (800e880 <tcp_input_delayed_close+0x6c>)
 800e824:	f240 225a 	movw	r2, #602	; 0x25a
 800e828:	4916      	ldr	r1, [pc, #88]	; (800e884 <tcp_input_delayed_close+0x70>)
 800e82a:	4817      	ldr	r0, [pc, #92]	; (800e888 <tcp_input_delayed_close+0x74>)
 800e82c:	f003 fdac 	bl	8012388 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e830:	4b16      	ldr	r3, [pc, #88]	; (800e88c <tcp_input_delayed_close+0x78>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f003 0310 	and.w	r3, r3, #16
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d01c      	beq.n	800e876 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	8b5b      	ldrh	r3, [r3, #26]
 800e840:	f003 0310 	and.w	r3, r3, #16
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10d      	bne.n	800e864 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d008      	beq.n	800e864 <tcp_input_delayed_close+0x50>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	6912      	ldr	r2, [r2, #16]
 800e85c:	f06f 010e 	mvn.w	r1, #14
 800e860:	4610      	mov	r0, r2
 800e862:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e864:	6879      	ldr	r1, [r7, #4]
 800e866:	480a      	ldr	r0, [pc, #40]	; (800e890 <tcp_input_delayed_close+0x7c>)
 800e868:	f7ff fa50 	bl	800dd0c <tcp_pcb_remove>
    tcp_free(pcb);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7fe f83d 	bl	800c8ec <tcp_free>
    return 1;
 800e872:	2301      	movs	r3, #1
 800e874:	e000      	b.n	800e878 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	08014e40 	.word	0x08014e40
 800e884:	08015060 	.word	0x08015060
 800e888:	08014edc 	.word	0x08014edc
 800e88c:	2400826d 	.word	0x2400826d
 800e890:	24008234 	.word	0x24008234

0800e894 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e894:	b590      	push	{r4, r7, lr}
 800e896:	b08b      	sub	sp, #44	; 0x2c
 800e898:	af04      	add	r7, sp, #16
 800e89a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e89c:	4b6f      	ldr	r3, [pc, #444]	; (800ea5c <tcp_listen_input+0x1c8>)
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f003 0304 	and.w	r3, r3, #4
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f040 80d2 	bne.w	800ea4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d106      	bne.n	800e8be <tcp_listen_input+0x2a>
 800e8b0:	4b6b      	ldr	r3, [pc, #428]	; (800ea60 <tcp_listen_input+0x1cc>)
 800e8b2:	f240 2281 	movw	r2, #641	; 0x281
 800e8b6:	496b      	ldr	r1, [pc, #428]	; (800ea64 <tcp_listen_input+0x1d0>)
 800e8b8:	486b      	ldr	r0, [pc, #428]	; (800ea68 <tcp_listen_input+0x1d4>)
 800e8ba:	f003 fd65 	bl	8012388 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e8be:	4b67      	ldr	r3, [pc, #412]	; (800ea5c <tcp_listen_input+0x1c8>)
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	f003 0310 	and.w	r3, r3, #16
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d019      	beq.n	800e8fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8ca:	4b68      	ldr	r3, [pc, #416]	; (800ea6c <tcp_listen_input+0x1d8>)
 800e8cc:	6819      	ldr	r1, [r3, #0]
 800e8ce:	4b68      	ldr	r3, [pc, #416]	; (800ea70 <tcp_listen_input+0x1dc>)
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4b67      	ldr	r3, [pc, #412]	; (800ea74 <tcp_listen_input+0x1e0>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8da:	4b67      	ldr	r3, [pc, #412]	; (800ea78 <tcp_listen_input+0x1e4>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8de:	885b      	ldrh	r3, [r3, #2]
 800e8e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8e2:	4a65      	ldr	r2, [pc, #404]	; (800ea78 <tcp_listen_input+0x1e4>)
 800e8e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8e6:	8812      	ldrh	r2, [r2, #0]
 800e8e8:	b292      	uxth	r2, r2
 800e8ea:	9202      	str	r2, [sp, #8]
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	4b63      	ldr	r3, [pc, #396]	; (800ea7c <tcp_listen_input+0x1e8>)
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	4b63      	ldr	r3, [pc, #396]	; (800ea80 <tcp_listen_input+0x1ec>)
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f002 ff80 	bl	80117fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e8fc:	e0a9      	b.n	800ea52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e8fe:	4b57      	ldr	r3, [pc, #348]	; (800ea5c <tcp_listen_input+0x1c8>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	f003 0302 	and.w	r3, r3, #2
 800e906:	2b00      	cmp	r3, #0
 800e908:	f000 80a3 	beq.w	800ea52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	7d5b      	ldrb	r3, [r3, #21]
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff f927 	bl	800db64 <tcp_alloc>
 800e916:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d111      	bne.n	800e942 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00a      	beq.n	800e93c <tcp_listen_input+0xa8>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6910      	ldr	r0, [r2, #16]
 800e92e:	f04f 32ff 	mov.w	r2, #4294967295
 800e932:	2100      	movs	r1, #0
 800e934:	4798      	blx	r3
 800e936:	4603      	mov	r3, r0
 800e938:	73bb      	strb	r3, [r7, #14]
      return;
 800e93a:	e08b      	b.n	800ea54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e93c:	23f0      	movs	r3, #240	; 0xf0
 800e93e:	73bb      	strb	r3, [r7, #14]
      return;
 800e940:	e088      	b.n	800ea54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e942:	4b50      	ldr	r3, [pc, #320]	; (800ea84 <tcp_listen_input+0x1f0>)
 800e944:	695a      	ldr	r2, [r3, #20]
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e94a:	4b4e      	ldr	r3, [pc, #312]	; (800ea84 <tcp_listen_input+0x1f0>)
 800e94c:	691a      	ldr	r2, [r3, #16]
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	8ada      	ldrh	r2, [r3, #22]
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e95a:	4b47      	ldr	r3, [pc, #284]	; (800ea78 <tcp_listen_input+0x1e4>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	b29a      	uxth	r2, r3
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2203      	movs	r2, #3
 800e96a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e96c:	4b41      	ldr	r3, [pc, #260]	; (800ea74 <tcp_listen_input+0x1e0>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	1c5a      	adds	r2, r3, #1
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e97e:	6978      	ldr	r0, [r7, #20]
 800e980:	f7ff fa58 	bl	800de34 <tcp_next_iss>
 800e984:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	693a      	ldr	r2, [r7, #16]
 800e98a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e99e:	4b35      	ldr	r3, [pc, #212]	; (800ea74 <tcp_listen_input+0x1e0>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	1e5a      	subs	r2, r3, #1
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	691a      	ldr	r2, [r3, #16]
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	7a5b      	ldrb	r3, [r3, #9]
 800e9ba:	f003 030c 	and.w	r3, r3, #12
 800e9be:	b2da      	uxtb	r2, r3
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	7a1a      	ldrb	r2, [r3, #8]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e9cc:	4b2e      	ldr	r3, [pc, #184]	; (800ea88 <tcp_listen_input+0x1f4>)
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	60da      	str	r2, [r3, #12]
 800e9d4:	4a2c      	ldr	r2, [pc, #176]	; (800ea88 <tcp_listen_input+0x1f4>)
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	f003 f8d1 	bl	8011b80 <tcp_timer_needed>
 800e9de:	4b2b      	ldr	r3, [pc, #172]	; (800ea8c <tcp_listen_input+0x1f8>)
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e9e4:	6978      	ldr	r0, [r7, #20]
 800e9e6:	f001 fd8f 	bl	8010508 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e9ea:	4b23      	ldr	r3, [pc, #140]	; (800ea78 <tcp_listen_input+0x1e4>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	89db      	ldrh	r3, [r3, #14]
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7fa ffcd 	bl	80099ac <ip4_route>
 800ea12:	4601      	mov	r1, r0
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	3304      	adds	r3, #4
 800ea18:	461a      	mov	r2, r3
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f7ff fa30 	bl	800de80 <tcp_eff_send_mss_netif>
 800ea20:	4603      	mov	r3, r0
 800ea22:	461a      	mov	r2, r3
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ea28:	2112      	movs	r1, #18
 800ea2a:	6978      	ldr	r0, [r7, #20]
 800ea2c:	f002 f844 	bl	8010ab8 <tcp_enqueue_flags>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ea34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d004      	beq.n	800ea46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	6978      	ldr	r0, [r7, #20]
 800ea40:	f7fe f97e 	bl	800cd40 <tcp_abandon>
      return;
 800ea44:	e006      	b.n	800ea54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ea46:	6978      	ldr	r0, [r7, #20]
 800ea48:	f002 f924 	bl	8010c94 <tcp_output>
  return;
 800ea4c:	e001      	b.n	800ea52 <tcp_listen_input+0x1be>
    return;
 800ea4e:	bf00      	nop
 800ea50:	e000      	b.n	800ea54 <tcp_listen_input+0x1c0>
  return;
 800ea52:	bf00      	nop
}
 800ea54:	371c      	adds	r7, #28
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd90      	pop	{r4, r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	2400826c 	.word	0x2400826c
 800ea60:	08014e40 	.word	0x08014e40
 800ea64:	08015088 	.word	0x08015088
 800ea68:	08014edc 	.word	0x08014edc
 800ea6c:	24008264 	.word	0x24008264
 800ea70:	2400826a 	.word	0x2400826a
 800ea74:	24008260 	.word	0x24008260
 800ea78:	24008250 	.word	0x24008250
 800ea7c:	2400530c 	.word	0x2400530c
 800ea80:	24005310 	.word	0x24005310
 800ea84:	240052fc 	.word	0x240052fc
 800ea88:	24008234 	.word	0x24008234
 800ea8c:	2400823c 	.word	0x2400823c

0800ea90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af04      	add	r7, sp, #16
 800ea96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ea98:	4b2f      	ldr	r3, [pc, #188]	; (800eb58 <tcp_timewait_input+0xc8>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	f003 0304 	and.w	r3, r3, #4
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d153      	bne.n	800eb4c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d106      	bne.n	800eab8 <tcp_timewait_input+0x28>
 800eaaa:	4b2c      	ldr	r3, [pc, #176]	; (800eb5c <tcp_timewait_input+0xcc>)
 800eaac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eab0:	492b      	ldr	r1, [pc, #172]	; (800eb60 <tcp_timewait_input+0xd0>)
 800eab2:	482c      	ldr	r0, [pc, #176]	; (800eb64 <tcp_timewait_input+0xd4>)
 800eab4:	f003 fc68 	bl	8012388 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eab8:	4b27      	ldr	r3, [pc, #156]	; (800eb58 <tcp_timewait_input+0xc8>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 0302 	and.w	r3, r3, #2
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d02a      	beq.n	800eb1a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eac4:	4b28      	ldr	r3, [pc, #160]	; (800eb68 <tcp_timewait_input+0xd8>)
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	db2d      	blt.n	800eb2e <tcp_timewait_input+0x9e>
 800ead2:	4b25      	ldr	r3, [pc, #148]	; (800eb68 <tcp_timewait_input+0xd8>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eada:	6879      	ldr	r1, [r7, #4]
 800eadc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eade:	440b      	add	r3, r1
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dc23      	bgt.n	800eb2e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eae6:	4b21      	ldr	r3, [pc, #132]	; (800eb6c <tcp_timewait_input+0xdc>)
 800eae8:	6819      	ldr	r1, [r3, #0]
 800eaea:	4b21      	ldr	r3, [pc, #132]	; (800eb70 <tcp_timewait_input+0xe0>)
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	4b1d      	ldr	r3, [pc, #116]	; (800eb68 <tcp_timewait_input+0xd8>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eaf6:	4b1f      	ldr	r3, [pc, #124]	; (800eb74 <tcp_timewait_input+0xe4>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eafe:	4a1d      	ldr	r2, [pc, #116]	; (800eb74 <tcp_timewait_input+0xe4>)
 800eb00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb02:	8812      	ldrh	r2, [r2, #0]
 800eb04:	b292      	uxth	r2, r2
 800eb06:	9202      	str	r2, [sp, #8]
 800eb08:	9301      	str	r3, [sp, #4]
 800eb0a:	4b1b      	ldr	r3, [pc, #108]	; (800eb78 <tcp_timewait_input+0xe8>)
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	4b1b      	ldr	r3, [pc, #108]	; (800eb7c <tcp_timewait_input+0xec>)
 800eb10:	4602      	mov	r2, r0
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f002 fe72 	bl	80117fc <tcp_rst>
      return;
 800eb18:	e01b      	b.n	800eb52 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800eb1a:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <tcp_timewait_input+0xc8>)
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d003      	beq.n	800eb2e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800eb26:	4b16      	ldr	r3, [pc, #88]	; (800eb80 <tcp_timewait_input+0xf0>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800eb2e:	4b10      	ldr	r3, [pc, #64]	; (800eb70 <tcp_timewait_input+0xe0>)
 800eb30:	881b      	ldrh	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00c      	beq.n	800eb50 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8b5b      	ldrh	r3, [r3, #26]
 800eb3a:	f043 0302 	orr.w	r3, r3, #2
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f002 f8a5 	bl	8010c94 <tcp_output>
  }
  return;
 800eb4a:	e001      	b.n	800eb50 <tcp_timewait_input+0xc0>
    return;
 800eb4c:	bf00      	nop
 800eb4e:	e000      	b.n	800eb52 <tcp_timewait_input+0xc2>
  return;
 800eb50:	bf00      	nop
}
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	2400826c 	.word	0x2400826c
 800eb5c:	08014e40 	.word	0x08014e40
 800eb60:	080150a8 	.word	0x080150a8
 800eb64:	08014edc 	.word	0x08014edc
 800eb68:	24008260 	.word	0x24008260
 800eb6c:	24008264 	.word	0x24008264
 800eb70:	2400826a 	.word	0x2400826a
 800eb74:	24008250 	.word	0x24008250
 800eb78:	2400530c 	.word	0x2400530c
 800eb7c:	24005310 	.word	0x24005310
 800eb80:	24008228 	.word	0x24008228

0800eb84 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800eb84:	b590      	push	{r4, r7, lr}
 800eb86:	b08d      	sub	sp, #52	; 0x34
 800eb88:	af04      	add	r7, sp, #16
 800eb8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d106      	bne.n	800eba8 <tcp_process+0x24>
 800eb9a:	4b9d      	ldr	r3, [pc, #628]	; (800ee10 <tcp_process+0x28c>)
 800eb9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800eba0:	499c      	ldr	r1, [pc, #624]	; (800ee14 <tcp_process+0x290>)
 800eba2:	489d      	ldr	r0, [pc, #628]	; (800ee18 <tcp_process+0x294>)
 800eba4:	f003 fbf0 	bl	8012388 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800eba8:	4b9c      	ldr	r3, [pc, #624]	; (800ee1c <tcp_process+0x298>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	f003 0304 	and.w	r3, r3, #4
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d04e      	beq.n	800ec52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7d1b      	ldrb	r3, [r3, #20]
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d108      	bne.n	800ebce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebc0:	4b97      	ldr	r3, [pc, #604]	; (800ee20 <tcp_process+0x29c>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d123      	bne.n	800ec10 <tcp_process+0x8c>
        acceptable = 1;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	76fb      	strb	r3, [r7, #27]
 800ebcc:	e020      	b.n	800ec10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebd2:	4b94      	ldr	r3, [pc, #592]	; (800ee24 <tcp_process+0x2a0>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d102      	bne.n	800ebe0 <tcp_process+0x5c>
        acceptable = 1;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	76fb      	strb	r3, [r7, #27]
 800ebde:	e017      	b.n	800ec10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ebe0:	4b90      	ldr	r3, [pc, #576]	; (800ee24 <tcp_process+0x2a0>)
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	db10      	blt.n	800ec10 <tcp_process+0x8c>
 800ebee:	4b8d      	ldr	r3, [pc, #564]	; (800ee24 <tcp_process+0x2a0>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf6:	6879      	ldr	r1, [r7, #4]
 800ebf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebfa:	440b      	add	r3, r1
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	dc06      	bgt.n	800ec10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	f043 0302 	orr.w	r3, r3, #2
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ec10:	7efb      	ldrb	r3, [r7, #27]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d01b      	beq.n	800ec4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7d1b      	ldrb	r3, [r3, #20]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <tcp_process+0xa8>
 800ec1e:	4b7c      	ldr	r3, [pc, #496]	; (800ee10 <tcp_process+0x28c>)
 800ec20:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ec24:	4980      	ldr	r1, [pc, #512]	; (800ee28 <tcp_process+0x2a4>)
 800ec26:	487c      	ldr	r0, [pc, #496]	; (800ee18 <tcp_process+0x294>)
 800ec28:	f003 fbae 	bl	8012388 <iprintf>
      recv_flags |= TF_RESET;
 800ec2c:	4b7f      	ldr	r3, [pc, #508]	; (800ee2c <tcp_process+0x2a8>)
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	f043 0308 	orr.w	r3, r3, #8
 800ec34:	b2da      	uxtb	r2, r3
 800ec36:	4b7d      	ldr	r3, [pc, #500]	; (800ee2c <tcp_process+0x2a8>)
 800ec38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8b5b      	ldrh	r3, [r3, #26]
 800ec3e:	f023 0301 	bic.w	r3, r3, #1
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ec48:	f06f 030d 	mvn.w	r3, #13
 800ec4c:	e37a      	b.n	800f344 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	e378      	b.n	800f344 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ec52:	4b72      	ldr	r3, [pc, #456]	; (800ee1c <tcp_process+0x298>)
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d010      	beq.n	800ec80 <tcp_process+0xfc>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7d1b      	ldrb	r3, [r3, #20]
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d00c      	beq.n	800ec80 <tcp_process+0xfc>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7d1b      	ldrb	r3, [r3, #20]
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	d008      	beq.n	800ec80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	8b5b      	ldrh	r3, [r3, #26]
 800ec72:	f043 0302 	orr.w	r3, r3, #2
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e361      	b.n	800f344 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	8b5b      	ldrh	r3, [r3, #26]
 800ec84:	f003 0310 	and.w	r3, r3, #16
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d103      	bne.n	800ec94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ec8c:	4b68      	ldr	r3, [pc, #416]	; (800ee30 <tcp_process+0x2ac>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f001 fc2f 	bl	8010508 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	7d1b      	ldrb	r3, [r3, #20]
 800ecae:	3b02      	subs	r3, #2
 800ecb0:	2b07      	cmp	r3, #7
 800ecb2:	f200 8337 	bhi.w	800f324 <tcp_process+0x7a0>
 800ecb6:	a201      	add	r2, pc, #4	; (adr r2, 800ecbc <tcp_process+0x138>)
 800ecb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecbc:	0800ecdd 	.word	0x0800ecdd
 800ecc0:	0800ef0d 	.word	0x0800ef0d
 800ecc4:	0800f085 	.word	0x0800f085
 800ecc8:	0800f0af 	.word	0x0800f0af
 800eccc:	0800f1d3 	.word	0x0800f1d3
 800ecd0:	0800f085 	.word	0x0800f085
 800ecd4:	0800f25f 	.word	0x0800f25f
 800ecd8:	0800f2ef 	.word	0x0800f2ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ecdc:	4b4f      	ldr	r3, [pc, #316]	; (800ee1c <tcp_process+0x298>)
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	f003 0310 	and.w	r3, r3, #16
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 80e4 	beq.w	800eeb2 <tcp_process+0x32e>
 800ecea:	4b4c      	ldr	r3, [pc, #304]	; (800ee1c <tcp_process+0x298>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	f003 0302 	and.w	r3, r3, #2
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f000 80dd 	beq.w	800eeb2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecfc:	1c5a      	adds	r2, r3, #1
 800ecfe:	4b48      	ldr	r3, [pc, #288]	; (800ee20 <tcp_process+0x29c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	f040 80d5 	bne.w	800eeb2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ed08:	4b46      	ldr	r3, [pc, #280]	; (800ee24 <tcp_process+0x2a0>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	1c5a      	adds	r2, r3, #1
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ed1a:	4b41      	ldr	r3, [pc, #260]	; (800ee20 <tcp_process+0x29c>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ed22:	4b44      	ldr	r3, [pc, #272]	; (800ee34 <tcp_process+0x2b0>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	89db      	ldrh	r3, [r3, #14]
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ed3c:	4b39      	ldr	r3, [pc, #228]	; (800ee24 <tcp_process+0x2a0>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	1e5a      	subs	r2, r3, #1
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2204      	movs	r2, #4
 800ed4a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3304      	adds	r3, #4
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fa fe29 	bl	80099ac <ip4_route>
 800ed5a:	4601      	mov	r1, r0
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3304      	adds	r3, #4
 800ed60:	461a      	mov	r2, r3
 800ed62:	4620      	mov	r0, r4
 800ed64:	f7ff f88c 	bl	800de80 <tcp_eff_send_mss_netif>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed74:	009a      	lsls	r2, r3, #2
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ed80:	428b      	cmp	r3, r1
 800ed82:	bf38      	it	cc
 800ed84:	460b      	movcc	r3, r1
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d204      	bcs.n	800ed94 <tcp_process+0x210>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	e00d      	b.n	800edb0 <tcp_process+0x22c>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d904      	bls.n	800edac <tcp_process+0x228>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eda6:	005b      	lsls	r3, r3, #1
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	e001      	b.n	800edb0 <tcp_process+0x22c>
 800edac:	f241 131c 	movw	r3, #4380	; 0x111c
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d106      	bne.n	800edce <tcp_process+0x24a>
 800edc0:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <tcp_process+0x28c>)
 800edc2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800edc6:	491c      	ldr	r1, [pc, #112]	; (800ee38 <tcp_process+0x2b4>)
 800edc8:	4813      	ldr	r0, [pc, #76]	; (800ee18 <tcp_process+0x294>)
 800edca:	f003 fadd 	bl	8012388 <iprintf>
        --pcb->snd_queuelen;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800edd4:	3b01      	subs	r3, #1
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d12a      	bne.n	800ee40 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d106      	bne.n	800ee04 <tcp_process+0x280>
 800edf6:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <tcp_process+0x28c>)
 800edf8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800edfc:	490f      	ldr	r1, [pc, #60]	; (800ee3c <tcp_process+0x2b8>)
 800edfe:	4806      	ldr	r0, [pc, #24]	; (800ee18 <tcp_process+0x294>)
 800ee00:	f003 fac2 	bl	8012388 <iprintf>
          pcb->unsent = rseg->next;
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ee0c:	e01c      	b.n	800ee48 <tcp_process+0x2c4>
 800ee0e:	bf00      	nop
 800ee10:	08014e40 	.word	0x08014e40
 800ee14:	080150c8 	.word	0x080150c8
 800ee18:	08014edc 	.word	0x08014edc
 800ee1c:	2400826c 	.word	0x2400826c
 800ee20:	24008264 	.word	0x24008264
 800ee24:	24008260 	.word	0x24008260
 800ee28:	080150e4 	.word	0x080150e4
 800ee2c:	2400826d 	.word	0x2400826d
 800ee30:	24008228 	.word	0x24008228
 800ee34:	24008250 	.word	0x24008250
 800ee38:	08015104 	.word	0x08015104
 800ee3c:	0801511c 	.word	0x0801511c
        } else {
          pcb->unacked = rseg->next;
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ee48:	69f8      	ldr	r0, [r7, #28]
 800ee4a:	f7fe fd22 	bl	800d892 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d104      	bne.n	800ee60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee5c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ee5e:	e006      	b.n	800ee6e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00a      	beq.n	800ee8e <tcp_process+0x30a>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	6910      	ldr	r0, [r2, #16]
 800ee82:	2200      	movs	r2, #0
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	4798      	blx	r3
 800ee88:	4603      	mov	r3, r0
 800ee8a:	76bb      	strb	r3, [r7, #26]
 800ee8c:	e001      	b.n	800ee92 <tcp_process+0x30e>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ee92:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee96:	f113 0f0d 	cmn.w	r3, #13
 800ee9a:	d102      	bne.n	800eea2 <tcp_process+0x31e>
          return ERR_ABRT;
 800ee9c:	f06f 030c 	mvn.w	r3, #12
 800eea0:	e250      	b.n	800f344 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	8b5b      	ldrh	r3, [r3, #26]
 800eea6:	f043 0302 	orr.w	r3, r3, #2
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eeb0:	e23a      	b.n	800f328 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eeb2:	4b98      	ldr	r3, [pc, #608]	; (800f114 <tcp_process+0x590>)
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	f003 0310 	and.w	r3, r3, #16
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f000 8234 	beq.w	800f328 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eec0:	4b95      	ldr	r3, [pc, #596]	; (800f118 <tcp_process+0x594>)
 800eec2:	6819      	ldr	r1, [r3, #0]
 800eec4:	4b95      	ldr	r3, [pc, #596]	; (800f11c <tcp_process+0x598>)
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	461a      	mov	r2, r3
 800eeca:	4b95      	ldr	r3, [pc, #596]	; (800f120 <tcp_process+0x59c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eed0:	4b94      	ldr	r3, [pc, #592]	; (800f124 <tcp_process+0x5a0>)
 800eed2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eed4:	885b      	ldrh	r3, [r3, #2]
 800eed6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eed8:	4a92      	ldr	r2, [pc, #584]	; (800f124 <tcp_process+0x5a0>)
 800eeda:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eedc:	8812      	ldrh	r2, [r2, #0]
 800eede:	b292      	uxth	r2, r2
 800eee0:	9202      	str	r2, [sp, #8]
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	4b90      	ldr	r3, [pc, #576]	; (800f128 <tcp_process+0x5a4>)
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	4b90      	ldr	r3, [pc, #576]	; (800f12c <tcp_process+0x5a8>)
 800eeea:	4602      	mov	r2, r0
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f002 fc85 	bl	80117fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eef8:	2b05      	cmp	r3, #5
 800eefa:	f200 8215 	bhi.w	800f328 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f002 fa51 	bl	80113ac <tcp_rexmit_rto>
      break;
 800ef0a:	e20d      	b.n	800f328 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ef0c:	4b81      	ldr	r3, [pc, #516]	; (800f114 <tcp_process+0x590>)
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	f003 0310 	and.w	r3, r3, #16
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 80a1 	beq.w	800f05c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef1a:	4b7f      	ldr	r3, [pc, #508]	; (800f118 <tcp_process+0x594>)
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	3b01      	subs	r3, #1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	db7e      	blt.n	800f028 <tcp_process+0x4a4>
 800ef2a:	4b7b      	ldr	r3, [pc, #492]	; (800f118 <tcp_process+0x594>)
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	dc77      	bgt.n	800f028 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2204      	movs	r2, #4
 800ef3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d102      	bne.n	800ef4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ef46:	23fa      	movs	r3, #250	; 0xfa
 800ef48:	76bb      	strb	r3, [r7, #26]
 800ef4a:	e01d      	b.n	800ef88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d106      	bne.n	800ef64 <tcp_process+0x3e0>
 800ef56:	4b76      	ldr	r3, [pc, #472]	; (800f130 <tcp_process+0x5ac>)
 800ef58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ef5c:	4975      	ldr	r1, [pc, #468]	; (800f134 <tcp_process+0x5b0>)
 800ef5e:	4876      	ldr	r0, [pc, #472]	; (800f138 <tcp_process+0x5b4>)
 800ef60:	f003 fa12 	bl	8012388 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d00a      	beq.n	800ef84 <tcp_process+0x400>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef72:	699b      	ldr	r3, [r3, #24]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	6910      	ldr	r0, [r2, #16]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	4798      	blx	r3
 800ef7e:	4603      	mov	r3, r0
 800ef80:	76bb      	strb	r3, [r7, #26]
 800ef82:	e001      	b.n	800ef88 <tcp_process+0x404>
 800ef84:	23f0      	movs	r3, #240	; 0xf0
 800ef86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ef88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00a      	beq.n	800efa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ef90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef94:	f113 0f0d 	cmn.w	r3, #13
 800ef98:	d002      	beq.n	800efa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7fd ff8e 	bl	800cebc <tcp_abort>
            }
            return ERR_ABRT;
 800efa0:	f06f 030c 	mvn.w	r3, #12
 800efa4:	e1ce      	b.n	800f344 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fae0 	bl	800f56c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800efac:	4b63      	ldr	r3, [pc, #396]	; (800f13c <tcp_process+0x5b8>)
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d005      	beq.n	800efc0 <tcp_process+0x43c>
            recv_acked--;
 800efb4:	4b61      	ldr	r3, [pc, #388]	; (800f13c <tcp_process+0x5b8>)
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	3b01      	subs	r3, #1
 800efba:	b29a      	uxth	r2, r3
 800efbc:	4b5f      	ldr	r3, [pc, #380]	; (800f13c <tcp_process+0x5b8>)
 800efbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efc4:	009a      	lsls	r2, r3, #2
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	f241 111c 	movw	r1, #4380	; 0x111c
 800efd0:	428b      	cmp	r3, r1
 800efd2:	bf38      	it	cc
 800efd4:	460b      	movcc	r3, r1
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d204      	bcs.n	800efe4 <tcp_process+0x460>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	e00d      	b.n	800f000 <tcp_process+0x47c>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efe8:	005b      	lsls	r3, r3, #1
 800efea:	f241 121c 	movw	r2, #4380	; 0x111c
 800efee:	4293      	cmp	r3, r2
 800eff0:	d904      	bls.n	800effc <tcp_process+0x478>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eff6:	005b      	lsls	r3, r3, #1
 800eff8:	b29b      	uxth	r3, r3
 800effa:	e001      	b.n	800f000 <tcp_process+0x47c>
 800effc:	f241 131c 	movw	r3, #4380	; 0x111c
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f006:	4b4e      	ldr	r3, [pc, #312]	; (800f140 <tcp_process+0x5bc>)
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	f003 0320 	and.w	r3, r3, #32
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d037      	beq.n	800f082 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	8b5b      	ldrh	r3, [r3, #26]
 800f016:	f043 0302 	orr.w	r3, r3, #2
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2207      	movs	r2, #7
 800f024:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f026:	e02c      	b.n	800f082 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f028:	4b3b      	ldr	r3, [pc, #236]	; (800f118 <tcp_process+0x594>)
 800f02a:	6819      	ldr	r1, [r3, #0]
 800f02c:	4b3b      	ldr	r3, [pc, #236]	; (800f11c <tcp_process+0x598>)
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	461a      	mov	r2, r3
 800f032:	4b3b      	ldr	r3, [pc, #236]	; (800f120 <tcp_process+0x59c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f038:	4b3a      	ldr	r3, [pc, #232]	; (800f124 <tcp_process+0x5a0>)
 800f03a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f03c:	885b      	ldrh	r3, [r3, #2]
 800f03e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f040:	4a38      	ldr	r2, [pc, #224]	; (800f124 <tcp_process+0x5a0>)
 800f042:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f044:	8812      	ldrh	r2, [r2, #0]
 800f046:	b292      	uxth	r2, r2
 800f048:	9202      	str	r2, [sp, #8]
 800f04a:	9301      	str	r3, [sp, #4]
 800f04c:	4b36      	ldr	r3, [pc, #216]	; (800f128 <tcp_process+0x5a4>)
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	4b36      	ldr	r3, [pc, #216]	; (800f12c <tcp_process+0x5a8>)
 800f052:	4602      	mov	r2, r0
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f002 fbd1 	bl	80117fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f05a:	e167      	b.n	800f32c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f05c:	4b2d      	ldr	r3, [pc, #180]	; (800f114 <tcp_process+0x590>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	f003 0302 	and.w	r3, r3, #2
 800f064:	2b00      	cmp	r3, #0
 800f066:	f000 8161 	beq.w	800f32c <tcp_process+0x7a8>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06e:	1e5a      	subs	r2, r3, #1
 800f070:	4b2b      	ldr	r3, [pc, #172]	; (800f120 <tcp_process+0x59c>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	f040 8159 	bne.w	800f32c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f002 f9b8 	bl	80113f0 <tcp_rexmit>
      break;
 800f080:	e154      	b.n	800f32c <tcp_process+0x7a8>
 800f082:	e153      	b.n	800f32c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fa71 	bl	800f56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f08a:	4b2d      	ldr	r3, [pc, #180]	; (800f140 <tcp_process+0x5bc>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	f003 0320 	and.w	r3, r3, #32
 800f092:	2b00      	cmp	r3, #0
 800f094:	f000 814c 	beq.w	800f330 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	8b5b      	ldrh	r3, [r3, #26]
 800f09c:	f043 0302 	orr.w	r3, r3, #2
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2207      	movs	r2, #7
 800f0aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0ac:	e140      	b.n	800f330 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 fa5c 	bl	800f56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f0b4:	4b22      	ldr	r3, [pc, #136]	; (800f140 <tcp_process+0x5bc>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	f003 0320 	and.w	r3, r3, #32
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d071      	beq.n	800f1a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f0c0:	4b14      	ldr	r3, [pc, #80]	; (800f114 <tcp_process+0x590>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d060      	beq.n	800f18e <tcp_process+0x60a>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0d0:	4b11      	ldr	r3, [pc, #68]	; (800f118 <tcp_process+0x594>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d15a      	bne.n	800f18e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d156      	bne.n	800f18e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	8b5b      	ldrh	r3, [r3, #26]
 800f0e4:	f043 0302 	orr.w	r3, r3, #2
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7fe fdbc 	bl	800dc6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f0f4:	4b13      	ldr	r3, [pc, #76]	; (800f144 <tcp_process+0x5c0>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d105      	bne.n	800f10a <tcp_process+0x586>
 800f0fe:	4b11      	ldr	r3, [pc, #68]	; (800f144 <tcp_process+0x5c0>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	4a0f      	ldr	r2, [pc, #60]	; (800f144 <tcp_process+0x5c0>)
 800f106:	6013      	str	r3, [r2, #0]
 800f108:	e02e      	b.n	800f168 <tcp_process+0x5e4>
 800f10a:	4b0e      	ldr	r3, [pc, #56]	; (800f144 <tcp_process+0x5c0>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	617b      	str	r3, [r7, #20]
 800f110:	e027      	b.n	800f162 <tcp_process+0x5de>
 800f112:	bf00      	nop
 800f114:	2400826c 	.word	0x2400826c
 800f118:	24008264 	.word	0x24008264
 800f11c:	2400826a 	.word	0x2400826a
 800f120:	24008260 	.word	0x24008260
 800f124:	24008250 	.word	0x24008250
 800f128:	2400530c 	.word	0x2400530c
 800f12c:	24005310 	.word	0x24005310
 800f130:	08014e40 	.word	0x08014e40
 800f134:	08015130 	.word	0x08015130
 800f138:	08014edc 	.word	0x08014edc
 800f13c:	24008268 	.word	0x24008268
 800f140:	2400826d 	.word	0x2400826d
 800f144:	24008234 	.word	0x24008234
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d104      	bne.n	800f15c <tcp_process+0x5d8>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68da      	ldr	r2, [r3, #12]
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	60da      	str	r2, [r3, #12]
 800f15a:	e005      	b.n	800f168 <tcp_process+0x5e4>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	617b      	str	r3, [r7, #20]
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1ef      	bne.n	800f148 <tcp_process+0x5c4>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	60da      	str	r2, [r3, #12]
 800f16e:	4b77      	ldr	r3, [pc, #476]	; (800f34c <tcp_process+0x7c8>)
 800f170:	2201      	movs	r2, #1
 800f172:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	220a      	movs	r2, #10
 800f178:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f17a:	4b75      	ldr	r3, [pc, #468]	; (800f350 <tcp_process+0x7cc>)
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	60da      	str	r2, [r3, #12]
 800f182:	4a73      	ldr	r2, [pc, #460]	; (800f350 <tcp_process+0x7cc>)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	f002 fcfa 	bl	8011b80 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f18c:	e0d2      	b.n	800f334 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	8b5b      	ldrh	r3, [r3, #26]
 800f192:	f043 0302 	orr.w	r3, r3, #2
 800f196:	b29a      	uxth	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2208      	movs	r2, #8
 800f1a0:	751a      	strb	r2, [r3, #20]
      break;
 800f1a2:	e0c7      	b.n	800f334 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f1a4:	4b6b      	ldr	r3, [pc, #428]	; (800f354 <tcp_process+0x7d0>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	f003 0310 	and.w	r3, r3, #16
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 80c1 	beq.w	800f334 <tcp_process+0x7b0>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1b6:	4b68      	ldr	r3, [pc, #416]	; (800f358 <tcp_process+0x7d4>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	f040 80ba 	bne.w	800f334 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f040 80b5 	bne.w	800f334 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2206      	movs	r2, #6
 800f1ce:	751a      	strb	r2, [r3, #20]
      break;
 800f1d0:	e0b0      	b.n	800f334 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f9ca 	bl	800f56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f1d8:	4b60      	ldr	r3, [pc, #384]	; (800f35c <tcp_process+0x7d8>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f003 0320 	and.w	r3, r3, #32
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 80a9 	beq.w	800f338 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ea:	f043 0302 	orr.w	r3, r3, #2
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7fe fd39 	bl	800dc6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f1fa:	4b59      	ldr	r3, [pc, #356]	; (800f360 <tcp_process+0x7dc>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	429a      	cmp	r2, r3
 800f202:	d105      	bne.n	800f210 <tcp_process+0x68c>
 800f204:	4b56      	ldr	r3, [pc, #344]	; (800f360 <tcp_process+0x7dc>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	4a55      	ldr	r2, [pc, #340]	; (800f360 <tcp_process+0x7dc>)
 800f20c:	6013      	str	r3, [r2, #0]
 800f20e:	e013      	b.n	800f238 <tcp_process+0x6b4>
 800f210:	4b53      	ldr	r3, [pc, #332]	; (800f360 <tcp_process+0x7dc>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	613b      	str	r3, [r7, #16]
 800f216:	e00c      	b.n	800f232 <tcp_process+0x6ae>
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d104      	bne.n	800f22c <tcp_process+0x6a8>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	68da      	ldr	r2, [r3, #12]
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	60da      	str	r2, [r3, #12]
 800f22a:	e005      	b.n	800f238 <tcp_process+0x6b4>
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	613b      	str	r3, [r7, #16]
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1ef      	bne.n	800f218 <tcp_process+0x694>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	60da      	str	r2, [r3, #12]
 800f23e:	4b43      	ldr	r3, [pc, #268]	; (800f34c <tcp_process+0x7c8>)
 800f240:	2201      	movs	r2, #1
 800f242:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	220a      	movs	r2, #10
 800f248:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f24a:	4b41      	ldr	r3, [pc, #260]	; (800f350 <tcp_process+0x7cc>)
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	60da      	str	r2, [r3, #12]
 800f252:	4a3f      	ldr	r2, [pc, #252]	; (800f350 <tcp_process+0x7cc>)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	f002 fc92 	bl	8011b80 <tcp_timer_needed>
      }
      break;
 800f25c:	e06c      	b.n	800f338 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f984 	bl	800f56c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f264:	4b3b      	ldr	r3, [pc, #236]	; (800f354 <tcp_process+0x7d0>)
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	f003 0310 	and.w	r3, r3, #16
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d065      	beq.n	800f33c <tcp_process+0x7b8>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f274:	4b38      	ldr	r3, [pc, #224]	; (800f358 <tcp_process+0x7d4>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d15f      	bne.n	800f33c <tcp_process+0x7b8>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f280:	2b00      	cmp	r3, #0
 800f282:	d15b      	bne.n	800f33c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7fe fcf1 	bl	800dc6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f28a:	4b35      	ldr	r3, [pc, #212]	; (800f360 <tcp_process+0x7dc>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	429a      	cmp	r2, r3
 800f292:	d105      	bne.n	800f2a0 <tcp_process+0x71c>
 800f294:	4b32      	ldr	r3, [pc, #200]	; (800f360 <tcp_process+0x7dc>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	4a31      	ldr	r2, [pc, #196]	; (800f360 <tcp_process+0x7dc>)
 800f29c:	6013      	str	r3, [r2, #0]
 800f29e:	e013      	b.n	800f2c8 <tcp_process+0x744>
 800f2a0:	4b2f      	ldr	r3, [pc, #188]	; (800f360 <tcp_process+0x7dc>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	60fb      	str	r3, [r7, #12]
 800f2a6:	e00c      	b.n	800f2c2 <tcp_process+0x73e>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d104      	bne.n	800f2bc <tcp_process+0x738>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	68da      	ldr	r2, [r3, #12]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	60da      	str	r2, [r3, #12]
 800f2ba:	e005      	b.n	800f2c8 <tcp_process+0x744>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	60fb      	str	r3, [r7, #12]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1ef      	bne.n	800f2a8 <tcp_process+0x724>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	60da      	str	r2, [r3, #12]
 800f2ce:	4b1f      	ldr	r3, [pc, #124]	; (800f34c <tcp_process+0x7c8>)
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	220a      	movs	r2, #10
 800f2d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f2da:	4b1d      	ldr	r3, [pc, #116]	; (800f350 <tcp_process+0x7cc>)
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	60da      	str	r2, [r3, #12]
 800f2e2:	4a1b      	ldr	r2, [pc, #108]	; (800f350 <tcp_process+0x7cc>)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6013      	str	r3, [r2, #0]
 800f2e8:	f002 fc4a 	bl	8011b80 <tcp_timer_needed>
      }
      break;
 800f2ec:	e026      	b.n	800f33c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f93c 	bl	800f56c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f2f4:	4b17      	ldr	r3, [pc, #92]	; (800f354 <tcp_process+0x7d0>)
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	f003 0310 	and.w	r3, r3, #16
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01f      	beq.n	800f340 <tcp_process+0x7bc>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f304:	4b14      	ldr	r3, [pc, #80]	; (800f358 <tcp_process+0x7d4>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d119      	bne.n	800f340 <tcp_process+0x7bc>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f310:	2b00      	cmp	r3, #0
 800f312:	d115      	bne.n	800f340 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f314:	4b11      	ldr	r3, [pc, #68]	; (800f35c <tcp_process+0x7d8>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f043 0310 	orr.w	r3, r3, #16
 800f31c:	b2da      	uxtb	r2, r3
 800f31e:	4b0f      	ldr	r3, [pc, #60]	; (800f35c <tcp_process+0x7d8>)
 800f320:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f322:	e00d      	b.n	800f340 <tcp_process+0x7bc>
    default:
      break;
 800f324:	bf00      	nop
 800f326:	e00c      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f328:	bf00      	nop
 800f32a:	e00a      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f32c:	bf00      	nop
 800f32e:	e008      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f330:	bf00      	nop
 800f332:	e006      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f334:	bf00      	nop
 800f336:	e004      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f338:	bf00      	nop
 800f33a:	e002      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f33c:	bf00      	nop
 800f33e:	e000      	b.n	800f342 <tcp_process+0x7be>
      break;
 800f340:	bf00      	nop
  }
  return ERR_OK;
 800f342:	2300      	movs	r3, #0
}
 800f344:	4618      	mov	r0, r3
 800f346:	3724      	adds	r7, #36	; 0x24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd90      	pop	{r4, r7, pc}
 800f34c:	2400823c 	.word	0x2400823c
 800f350:	24008238 	.word	0x24008238
 800f354:	2400826c 	.word	0x2400826c
 800f358:	24008264 	.word	0x24008264
 800f35c:	2400826d 	.word	0x2400826d
 800f360:	24008234 	.word	0x24008234

0800f364 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f364:	b590      	push	{r4, r7, lr}
 800f366:	b085      	sub	sp, #20
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d106      	bne.n	800f382 <tcp_oos_insert_segment+0x1e>
 800f374:	4b3b      	ldr	r3, [pc, #236]	; (800f464 <tcp_oos_insert_segment+0x100>)
 800f376:	f240 421f 	movw	r2, #1055	; 0x41f
 800f37a:	493b      	ldr	r1, [pc, #236]	; (800f468 <tcp_oos_insert_segment+0x104>)
 800f37c:	483b      	ldr	r0, [pc, #236]	; (800f46c <tcp_oos_insert_segment+0x108>)
 800f37e:	f003 f803 	bl	8012388 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	899b      	ldrh	r3, [r3, #12]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7f9 f838 	bl	8008400 <lwip_htons>
 800f390:	4603      	mov	r3, r0
 800f392:	b2db      	uxtb	r3, r3
 800f394:	f003 0301 	and.w	r3, r3, #1
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d028      	beq.n	800f3ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f39c:	6838      	ldr	r0, [r7, #0]
 800f39e:	f7fe fa63 	bl	800d868 <tcp_segs_free>
    next = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	603b      	str	r3, [r7, #0]
 800f3a6:	e056      	b.n	800f456 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	899b      	ldrh	r3, [r3, #12]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7f9 f825 	bl	8008400 <lwip_htons>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00d      	beq.n	800f3de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	899b      	ldrh	r3, [r3, #12]
 800f3c8:	b29c      	uxth	r4, r3
 800f3ca:	2001      	movs	r0, #1
 800f3cc:	f7f9 f818 	bl	8008400 <lwip_htons>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	4322      	orrs	r2, r4
 800f3da:	b292      	uxth	r2, r2
 800f3dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7fe fa52 	bl	800d892 <tcp_seg_free>
    while (next &&
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00e      	beq.n	800f412 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	891b      	ldrh	r3, [r3, #8]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	4b1d      	ldr	r3, [pc, #116]	; (800f470 <tcp_oos_insert_segment+0x10c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	441a      	add	r2, r3
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	6839      	ldr	r1, [r7, #0]
 800f408:	8909      	ldrh	r1, [r1, #8]
 800f40a:	440b      	add	r3, r1
 800f40c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f40e:	2b00      	cmp	r3, #0
 800f410:	daca      	bge.n	800f3a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d01e      	beq.n	800f456 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	891b      	ldrh	r3, [r3, #8]
 800f41c:	461a      	mov	r2, r3
 800f41e:	4b14      	ldr	r3, [pc, #80]	; (800f470 <tcp_oos_insert_segment+0x10c>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	441a      	add	r2, r3
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	dd12      	ble.n	800f456 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	b29a      	uxth	r2, r3
 800f438:	4b0d      	ldr	r3, [pc, #52]	; (800f470 <tcp_oos_insert_segment+0x10c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	1ad3      	subs	r3, r2, r3
 800f440:	b29a      	uxth	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685a      	ldr	r2, [r3, #4]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	891b      	ldrh	r3, [r3, #8]
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f7fc fe25 	bl	800c0a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	601a      	str	r2, [r3, #0]
}
 800f45c:	bf00      	nop
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	bd90      	pop	{r4, r7, pc}
 800f464:	08014e40 	.word	0x08014e40
 800f468:	08015150 	.word	0x08015150
 800f46c:	08014edc 	.word	0x08014edc
 800f470:	24008260 	.word	0x24008260

0800f474 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f474:	b5b0      	push	{r4, r5, r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f482:	e03e      	b.n	800f502 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	4618      	mov	r0, r3
 800f494:	f7fd f812 	bl	800c4bc <pbuf_clen>
 800f498:	4603      	mov	r3, r0
 800f49a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4a2:	8a7a      	ldrh	r2, [r7, #18]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d906      	bls.n	800f4b6 <tcp_free_acked_segments+0x42>
 800f4a8:	4b2a      	ldr	r3, [pc, #168]	; (800f554 <tcp_free_acked_segments+0xe0>)
 800f4aa:	f240 4257 	movw	r2, #1111	; 0x457
 800f4ae:	492a      	ldr	r1, [pc, #168]	; (800f558 <tcp_free_acked_segments+0xe4>)
 800f4b0:	482a      	ldr	r0, [pc, #168]	; (800f55c <tcp_free_acked_segments+0xe8>)
 800f4b2:	f002 ff69 	bl	8012388 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f4bc:	8a7b      	ldrh	r3, [r7, #18]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	891a      	ldrh	r2, [r3, #8]
 800f4cc:	4b24      	ldr	r3, [pc, #144]	; (800f560 <tcp_free_acked_segments+0xec>)
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	4b22      	ldr	r3, [pc, #136]	; (800f560 <tcp_free_acked_segments+0xec>)
 800f4d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f4d8:	6978      	ldr	r0, [r7, #20]
 800f4da:	f7fe f9da 	bl	800d892 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00c      	beq.n	800f502 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d109      	bne.n	800f502 <tcp_free_acked_segments+0x8e>
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d106      	bne.n	800f502 <tcp_free_acked_segments+0x8e>
 800f4f4:	4b17      	ldr	r3, [pc, #92]	; (800f554 <tcp_free_acked_segments+0xe0>)
 800f4f6:	f240 4261 	movw	r2, #1121	; 0x461
 800f4fa:	491a      	ldr	r1, [pc, #104]	; (800f564 <tcp_free_acked_segments+0xf0>)
 800f4fc:	4817      	ldr	r0, [pc, #92]	; (800f55c <tcp_free_acked_segments+0xe8>)
 800f4fe:	f002 ff43 	bl	8012388 <iprintf>
  while (seg_list != NULL &&
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d020      	beq.n	800f54a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f8 ff8b 	bl	800842a <lwip_htonl>
 800f514:	4604      	mov	r4, r0
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	891b      	ldrh	r3, [r3, #8]
 800f51a:	461d      	mov	r5, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	899b      	ldrh	r3, [r3, #12]
 800f522:	b29b      	uxth	r3, r3
 800f524:	4618      	mov	r0, r3
 800f526:	f7f8 ff6b 	bl	8008400 <lwip_htons>
 800f52a:	4603      	mov	r3, r0
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	f003 0303 	and.w	r3, r3, #3
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <tcp_free_acked_segments+0xc6>
 800f536:	2301      	movs	r3, #1
 800f538:	e000      	b.n	800f53c <tcp_free_acked_segments+0xc8>
 800f53a:	2300      	movs	r3, #0
 800f53c:	442b      	add	r3, r5
 800f53e:	18e2      	adds	r2, r4, r3
 800f540:	4b09      	ldr	r3, [pc, #36]	; (800f568 <tcp_free_acked_segments+0xf4>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f546:	2b00      	cmp	r3, #0
 800f548:	dd9c      	ble.n	800f484 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f54a:	68bb      	ldr	r3, [r7, #8]
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3718      	adds	r7, #24
 800f550:	46bd      	mov	sp, r7
 800f552:	bdb0      	pop	{r4, r5, r7, pc}
 800f554:	08014e40 	.word	0x08014e40
 800f558:	08015178 	.word	0x08015178
 800f55c:	08014edc 	.word	0x08014edc
 800f560:	24008268 	.word	0x24008268
 800f564:	080151a0 	.word	0x080151a0
 800f568:	24008264 	.word	0x24008264

0800f56c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f56c:	b5b0      	push	{r4, r5, r7, lr}
 800f56e:	b094      	sub	sp, #80	; 0x50
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f574:	2300      	movs	r3, #0
 800f576:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d106      	bne.n	800f58c <tcp_receive+0x20>
 800f57e:	4b91      	ldr	r3, [pc, #580]	; (800f7c4 <tcp_receive+0x258>)
 800f580:	f240 427b 	movw	r2, #1147	; 0x47b
 800f584:	4990      	ldr	r1, [pc, #576]	; (800f7c8 <tcp_receive+0x25c>)
 800f586:	4891      	ldr	r0, [pc, #580]	; (800f7cc <tcp_receive+0x260>)
 800f588:	f002 fefe 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	7d1b      	ldrb	r3, [r3, #20]
 800f590:	2b03      	cmp	r3, #3
 800f592:	d806      	bhi.n	800f5a2 <tcp_receive+0x36>
 800f594:	4b8b      	ldr	r3, [pc, #556]	; (800f7c4 <tcp_receive+0x258>)
 800f596:	f240 427c 	movw	r2, #1148	; 0x47c
 800f59a:	498d      	ldr	r1, [pc, #564]	; (800f7d0 <tcp_receive+0x264>)
 800f59c:	488b      	ldr	r0, [pc, #556]	; (800f7cc <tcp_receive+0x260>)
 800f59e:	f002 fef3 	bl	8012388 <iprintf>

  if (flags & TCP_ACK) {
 800f5a2:	4b8c      	ldr	r3, [pc, #560]	; (800f7d4 <tcp_receive+0x268>)
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	f003 0310 	and.w	r3, r3, #16
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f000 8264 	beq.w	800fa78 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5bc:	4413      	add	r3, r2
 800f5be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5c4:	4b84      	ldr	r3, [pc, #528]	; (800f7d8 <tcp_receive+0x26c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	db1b      	blt.n	800f606 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5d2:	4b81      	ldr	r3, [pc, #516]	; (800f7d8 <tcp_receive+0x26c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d106      	bne.n	800f5e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f5de:	4b7f      	ldr	r3, [pc, #508]	; (800f7dc <tcp_receive+0x270>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	db0e      	blt.n	800f606 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f5ec:	4b7b      	ldr	r3, [pc, #492]	; (800f7dc <tcp_receive+0x270>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d125      	bne.n	800f640 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f5f4:	4b7a      	ldr	r3, [pc, #488]	; (800f7e0 <tcp_receive+0x274>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	89db      	ldrh	r3, [r3, #14]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f602:	429a      	cmp	r2, r3
 800f604:	d91c      	bls.n	800f640 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f606:	4b76      	ldr	r3, [pc, #472]	; (800f7e0 <tcp_receive+0x274>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	89db      	ldrh	r3, [r3, #14]
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f620:	429a      	cmp	r2, r3
 800f622:	d205      	bcs.n	800f630 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f630:	4b69      	ldr	r3, [pc, #420]	; (800f7d8 <tcp_receive+0x26c>)
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f638:	4b68      	ldr	r3, [pc, #416]	; (800f7dc <tcp_receive+0x270>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f640:	4b66      	ldr	r3, [pc, #408]	; (800f7dc <tcp_receive+0x270>)
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	dc58      	bgt.n	800f700 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f64e:	4b65      	ldr	r3, [pc, #404]	; (800f7e4 <tcp_receive+0x278>)
 800f650:	881b      	ldrh	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d14b      	bne.n	800f6ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f660:	4413      	add	r3, r2
 800f662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f664:	429a      	cmp	r2, r3
 800f666:	d142      	bne.n	800f6ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f66e:	2b00      	cmp	r3, #0
 800f670:	db3d      	blt.n	800f6ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f676:	4b59      	ldr	r3, [pc, #356]	; (800f7dc <tcp_receive+0x270>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d137      	bne.n	800f6ee <tcp_receive+0x182>
              found_dupack = 1;
 800f67e:	2301      	movs	r3, #1
 800f680:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f688:	2bff      	cmp	r3, #255	; 0xff
 800f68a:	d007      	beq.n	800f69c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f692:	3301      	adds	r3, #1
 800f694:	b2da      	uxtb	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d91b      	bls.n	800f6de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6b0:	4413      	add	r3, r2
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d30a      	bcc.n	800f6d4 <tcp_receive+0x168>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6c8:	4413      	add	r3, r2
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f6d2:	e004      	b.n	800f6de <tcp_receive+0x172>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d902      	bls.n	800f6ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f001 feed 	bl	80114c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f040 8161 	bne.w	800f9b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f6fe:	e15b      	b.n	800f9b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f700:	4b36      	ldr	r3, [pc, #216]	; (800f7dc <tcp_receive+0x270>)
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f708:	1ad3      	subs	r3, r2, r3
 800f70a:	3b01      	subs	r3, #1
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f2c0 814e 	blt.w	800f9ae <tcp_receive+0x442>
 800f712:	4b32      	ldr	r3, [pc, #200]	; (800f7dc <tcp_receive+0x270>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f300 8146 	bgt.w	800f9ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	8b5b      	ldrh	r3, [r3, #26]
 800f726:	f003 0304 	and.w	r3, r3, #4
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d010      	beq.n	800f750 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	8b5b      	ldrh	r3, [r3, #26]
 800f732:	f023 0304 	bic.w	r3, r3, #4
 800f736:	b29a      	uxth	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f75e:	10db      	asrs	r3, r3, #3
 800f760:	b21b      	sxth	r3, r3
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	4413      	add	r3, r2
 800f76e:	b29b      	uxth	r3, r3
 800f770:	b21a      	sxth	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f778:	4b18      	ldr	r3, [pc, #96]	; (800f7dc <tcp_receive+0x270>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f782:	b29b      	uxth	r3, r3
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f790:	4b12      	ldr	r3, [pc, #72]	; (800f7dc <tcp_receive+0x270>)
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	7d1b      	ldrb	r3, [r3, #20]
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	f240 8097 	bls.w	800f8d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d245      	bcs.n	800f83e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	8b5b      	ldrh	r3, [r3, #26]
 800f7b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d014      	beq.n	800f7e8 <tcp_receive+0x27c>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e013      	b.n	800f7ea <tcp_receive+0x27e>
 800f7c2:	bf00      	nop
 800f7c4:	08014e40 	.word	0x08014e40
 800f7c8:	080151c0 	.word	0x080151c0
 800f7cc:	08014edc 	.word	0x08014edc
 800f7d0:	080151dc 	.word	0x080151dc
 800f7d4:	2400826c 	.word	0x2400826c
 800f7d8:	24008260 	.word	0x24008260
 800f7dc:	24008264 	.word	0x24008264
 800f7e0:	24008250 	.word	0x24008250
 800f7e4:	2400826a 	.word	0x2400826a
 800f7e8:	2302      	movs	r3, #2
 800f7ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f7ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7f8:	fb12 f303 	smulbb	r3, r2, r3
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f800:	4293      	cmp	r3, r2
 800f802:	bf28      	it	cs
 800f804:	4613      	movcs	r3, r2
 800f806:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f80e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f810:	4413      	add	r3, r2
 800f812:	b29a      	uxth	r2, r3
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d309      	bcc.n	800f832 <tcp_receive+0x2c6>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f824:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f826:	4413      	add	r3, r2
 800f828:	b29a      	uxth	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f830:	e04e      	b.n	800f8d0 <tcp_receive+0x364>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f838:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f83c:	e048      	b.n	800f8d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f846:	4413      	add	r3, r2
 800f848:	b29a      	uxth	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f850:	429a      	cmp	r2, r3
 800f852:	d309      	bcc.n	800f868 <tcp_receive+0x2fc>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f85a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f85c:	4413      	add	r3, r2
 800f85e:	b29a      	uxth	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f866:	e004      	b.n	800f872 <tcp_receive+0x306>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f86e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f87e:	429a      	cmp	r2, r3
 800f880:	d326      	bcc.n	800f8d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8a2:	4413      	add	r3, r2
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d30a      	bcc.n	800f8c6 <tcp_receive+0x35a>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ba:	4413      	add	r3, r2
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f8c4:	e004      	b.n	800f8d0 <tcp_receive+0x364>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d8:	4a98      	ldr	r2, [pc, #608]	; (800fb3c <tcp_receive+0x5d0>)
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff fdca 	bl	800f474 <tcp_free_acked_segments>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ee:	4a94      	ldr	r2, [pc, #592]	; (800fb40 <tcp_receive+0x5d4>)
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7ff fdbf 	bl	800f474 <tcp_free_acked_segments>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f900:	2b00      	cmp	r3, #0
 800f902:	d104      	bne.n	800f90e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f90a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f90c:	e002      	b.n	800f914 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d103      	bne.n	800f92a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f930:	4b84      	ldr	r3, [pc, #528]	; (800fb44 <tcp_receive+0x5d8>)
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	4413      	add	r3, r2
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8b5b      	ldrh	r3, [r3, #26]
 800f942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f946:	2b00      	cmp	r3, #0
 800f948:	d035      	beq.n	800f9b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d118      	bne.n	800f984 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00c      	beq.n	800f974 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	f7f8 fd5f 	bl	800842a <lwip_htonl>
 800f96c:	4603      	mov	r3, r0
 800f96e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f970:	2b00      	cmp	r3, #0
 800f972:	dc20      	bgt.n	800f9b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	8b5b      	ldrh	r3, [r3, #26]
 800f978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f982:	e018      	b.n	800f9b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	4618      	mov	r0, r3
 800f992:	f7f8 fd4a 	bl	800842a <lwip_htonl>
 800f996:	4603      	mov	r3, r0
 800f998:	1ae3      	subs	r3, r4, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dc0b      	bgt.n	800f9b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	8b5b      	ldrh	r3, [r3, #26]
 800f9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9ac:	e003      	b.n	800f9b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f001 ff76 	bl	80118a0 <tcp_send_empty_ack>
 800f9b4:	e000      	b.n	800f9b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d05b      	beq.n	800fa78 <tcp_receive+0x50c>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9c4:	4b60      	ldr	r3, [pc, #384]	; (800fb48 <tcp_receive+0x5dc>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	da54      	bge.n	800fa78 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f9ce:	4b5f      	ldr	r3, [pc, #380]	; (800fb4c <tcp_receive+0x5e0>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	b29a      	uxth	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f9e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f9ec:	10db      	asrs	r3, r3, #3
 800f9ee:	b21b      	sxth	r3, r3
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa06:	4413      	add	r3, r2
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	b21a      	sxth	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fa10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	da05      	bge.n	800fa24 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fa18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa1c:	425b      	negs	r3, r3
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fa24:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa2e:	109b      	asrs	r3, r3, #2
 800fa30:	b21b      	sxth	r3, r3
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa48:	4413      	add	r3, r2
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	b21a      	sxth	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa58:	10db      	asrs	r3, r3, #3
 800fa5a:	b21b      	sxth	r3, r3
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	4413      	add	r3, r2
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	b21a      	sxth	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fa78:	4b35      	ldr	r3, [pc, #212]	; (800fb50 <tcp_receive+0x5e4>)
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 84e2 	beq.w	8010446 <tcp_receive+0xeda>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	7d1b      	ldrb	r3, [r3, #20]
 800fa86:	2b06      	cmp	r3, #6
 800fa88:	f200 84dd 	bhi.w	8010446 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa90:	4b30      	ldr	r3, [pc, #192]	; (800fb54 <tcp_receive+0x5e8>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	1ad3      	subs	r3, r2, r3
 800fa96:	3b01      	subs	r3, #1
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f2c0 808f 	blt.w	800fbbc <tcp_receive+0x650>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faa2:	4b2b      	ldr	r3, [pc, #172]	; (800fb50 <tcp_receive+0x5e4>)
 800faa4:	881b      	ldrh	r3, [r3, #0]
 800faa6:	4619      	mov	r1, r3
 800faa8:	4b2a      	ldr	r3, [pc, #168]	; (800fb54 <tcp_receive+0x5e8>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	440b      	add	r3, r1
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	3301      	adds	r3, #1
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f300 8082 	bgt.w	800fbbc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fab8:	4b27      	ldr	r3, [pc, #156]	; (800fb58 <tcp_receive+0x5ec>)
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fac2:	4b24      	ldr	r3, [pc, #144]	; (800fb54 <tcp_receive+0x5e8>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800faca:	4b23      	ldr	r3, [pc, #140]	; (800fb58 <tcp_receive+0x5ec>)
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d106      	bne.n	800fae0 <tcp_receive+0x574>
 800fad2:	4b22      	ldr	r3, [pc, #136]	; (800fb5c <tcp_receive+0x5f0>)
 800fad4:	f240 5294 	movw	r2, #1428	; 0x594
 800fad8:	4921      	ldr	r1, [pc, #132]	; (800fb60 <tcp_receive+0x5f4>)
 800fada:	4822      	ldr	r0, [pc, #136]	; (800fb64 <tcp_receive+0x5f8>)
 800fadc:	f002 fc54 	bl	8012388 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d906      	bls.n	800faf8 <tcp_receive+0x58c>
 800faea:	4b1c      	ldr	r3, [pc, #112]	; (800fb5c <tcp_receive+0x5f0>)
 800faec:	f240 5295 	movw	r2, #1429	; 0x595
 800faf0:	491d      	ldr	r1, [pc, #116]	; (800fb68 <tcp_receive+0x5fc>)
 800faf2:	481c      	ldr	r0, [pc, #112]	; (800fb64 <tcp_receive+0x5f8>)
 800faf4:	f002 fc48 	bl	8012388 <iprintf>
      off = (u16_t)off32;
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fafe:	4b16      	ldr	r3, [pc, #88]	; (800fb58 <tcp_receive+0x5ec>)
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	891b      	ldrh	r3, [r3, #8]
 800fb04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d906      	bls.n	800fb1a <tcp_receive+0x5ae>
 800fb0c:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <tcp_receive+0x5f0>)
 800fb0e:	f240 5297 	movw	r2, #1431	; 0x597
 800fb12:	4916      	ldr	r1, [pc, #88]	; (800fb6c <tcp_receive+0x600>)
 800fb14:	4813      	ldr	r0, [pc, #76]	; (800fb64 <tcp_receive+0x5f8>)
 800fb16:	f002 fc37 	bl	8012388 <iprintf>
      inseg.len -= off;
 800fb1a:	4b0f      	ldr	r3, [pc, #60]	; (800fb58 <tcp_receive+0x5ec>)
 800fb1c:	891a      	ldrh	r2, [r3, #8]
 800fb1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <tcp_receive+0x5ec>)
 800fb28:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fb2a:	4b0b      	ldr	r3, [pc, #44]	; (800fb58 <tcp_receive+0x5ec>)
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	891a      	ldrh	r2, [r3, #8]
 800fb30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fb38:	e02a      	b.n	800fb90 <tcp_receive+0x624>
 800fb3a:	bf00      	nop
 800fb3c:	080151f8 	.word	0x080151f8
 800fb40:	08015200 	.word	0x08015200
 800fb44:	24008268 	.word	0x24008268
 800fb48:	24008264 	.word	0x24008264
 800fb4c:	24008228 	.word	0x24008228
 800fb50:	2400826a 	.word	0x2400826a
 800fb54:	24008260 	.word	0x24008260
 800fb58:	24008240 	.word	0x24008240
 800fb5c:	08014e40 	.word	0x08014e40
 800fb60:	08015208 	.word	0x08015208
 800fb64:	08014edc 	.word	0x08014edc
 800fb68:	08015218 	.word	0x08015218
 800fb6c:	08015228 	.word	0x08015228
        off -= p->len;
 800fb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb72:	895b      	ldrh	r3, [r3, #10]
 800fb74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb82:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fb84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb86:	2200      	movs	r2, #0
 800fb88:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb92:	895b      	ldrh	r3, [r3, #10]
 800fb94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d8e9      	bhi.n	800fb70 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fb9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fba0:	4619      	mov	r1, r3
 800fba2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fba4:	f7fc fb7c 	bl	800c2a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbac:	4a91      	ldr	r2, [pc, #580]	; (800fdf4 <tcp_receive+0x888>)
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	4b91      	ldr	r3, [pc, #580]	; (800fdf8 <tcp_receive+0x88c>)
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	4a8f      	ldr	r2, [pc, #572]	; (800fdf4 <tcp_receive+0x888>)
 800fbb6:	6812      	ldr	r2, [r2, #0]
 800fbb8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fbba:	e00d      	b.n	800fbd8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fbbc:	4b8d      	ldr	r3, [pc, #564]	; (800fdf4 <tcp_receive+0x888>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	da06      	bge.n	800fbd8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	8b5b      	ldrh	r3, [r3, #26]
 800fbce:	f043 0302 	orr.w	r3, r3, #2
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbd8:	4b86      	ldr	r3, [pc, #536]	; (800fdf4 <tcp_receive+0x888>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe0:	1ad3      	subs	r3, r2, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f2c0 842a 	blt.w	801043c <tcp_receive+0xed0>
 800fbe8:	4b82      	ldr	r3, [pc, #520]	; (800fdf4 <tcp_receive+0x888>)
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf0:	6879      	ldr	r1, [r7, #4]
 800fbf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbf4:	440b      	add	r3, r1
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f300 841e 	bgt.w	801043c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc04:	4b7b      	ldr	r3, [pc, #492]	; (800fdf4 <tcp_receive+0x888>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	f040 829a 	bne.w	8010142 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fc0e:	4b7a      	ldr	r3, [pc, #488]	; (800fdf8 <tcp_receive+0x88c>)
 800fc10:	891c      	ldrh	r4, [r3, #8]
 800fc12:	4b79      	ldr	r3, [pc, #484]	; (800fdf8 <tcp_receive+0x88c>)
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	899b      	ldrh	r3, [r3, #12]
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7f8 fbf0 	bl	8008400 <lwip_htons>
 800fc20:	4603      	mov	r3, r0
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	f003 0303 	and.w	r3, r3, #3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <tcp_receive+0x6c4>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e000      	b.n	800fc32 <tcp_receive+0x6c6>
 800fc30:	2300      	movs	r3, #0
 800fc32:	4423      	add	r3, r4
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	4b71      	ldr	r3, [pc, #452]	; (800fdfc <tcp_receive+0x890>)
 800fc38:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc3e:	4b6f      	ldr	r3, [pc, #444]	; (800fdfc <tcp_receive+0x890>)
 800fc40:	881b      	ldrh	r3, [r3, #0]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d275      	bcs.n	800fd32 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc46:	4b6c      	ldr	r3, [pc, #432]	; (800fdf8 <tcp_receive+0x88c>)
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	899b      	ldrh	r3, [r3, #12]
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7f8 fbd6 	bl	8008400 <lwip_htons>
 800fc54:	4603      	mov	r3, r0
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d01f      	beq.n	800fca0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fc60:	4b65      	ldr	r3, [pc, #404]	; (800fdf8 <tcp_receive+0x88c>)
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	899b      	ldrh	r3, [r3, #12]
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	b21b      	sxth	r3, r3
 800fc6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc6e:	b21c      	sxth	r4, r3
 800fc70:	4b61      	ldr	r3, [pc, #388]	; (800fdf8 <tcp_receive+0x88c>)
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	899b      	ldrh	r3, [r3, #12]
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f8 fbc1 	bl	8008400 <lwip_htons>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f8 fbb8 	bl	8008400 <lwip_htons>
 800fc90:	4603      	mov	r3, r0
 800fc92:	b21b      	sxth	r3, r3
 800fc94:	4323      	orrs	r3, r4
 800fc96:	b21a      	sxth	r2, r3
 800fc98:	4b57      	ldr	r3, [pc, #348]	; (800fdf8 <tcp_receive+0x88c>)
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	b292      	uxth	r2, r2
 800fc9e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fca4:	4b54      	ldr	r3, [pc, #336]	; (800fdf8 <tcp_receive+0x88c>)
 800fca6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fca8:	4b53      	ldr	r3, [pc, #332]	; (800fdf8 <tcp_receive+0x88c>)
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	899b      	ldrh	r3, [r3, #12]
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f8 fba5 	bl	8008400 <lwip_htons>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	f003 0302 	and.w	r3, r3, #2
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d005      	beq.n	800fcce <tcp_receive+0x762>
            inseg.len -= 1;
 800fcc2:	4b4d      	ldr	r3, [pc, #308]	; (800fdf8 <tcp_receive+0x88c>)
 800fcc4:	891b      	ldrh	r3, [r3, #8]
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	4b4b      	ldr	r3, [pc, #300]	; (800fdf8 <tcp_receive+0x88c>)
 800fccc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fcce:	4b4a      	ldr	r3, [pc, #296]	; (800fdf8 <tcp_receive+0x88c>)
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	4a49      	ldr	r2, [pc, #292]	; (800fdf8 <tcp_receive+0x88c>)
 800fcd4:	8912      	ldrh	r2, [r2, #8]
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fc f9e1 	bl	800c0a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fcde:	4b46      	ldr	r3, [pc, #280]	; (800fdf8 <tcp_receive+0x88c>)
 800fce0:	891c      	ldrh	r4, [r3, #8]
 800fce2:	4b45      	ldr	r3, [pc, #276]	; (800fdf8 <tcp_receive+0x88c>)
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	899b      	ldrh	r3, [r3, #12]
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f8 fb88 	bl	8008400 <lwip_htons>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	f003 0303 	and.w	r3, r3, #3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <tcp_receive+0x794>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e000      	b.n	800fd02 <tcp_receive+0x796>
 800fd00:	2300      	movs	r3, #0
 800fd02:	4423      	add	r3, r4
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	4b3d      	ldr	r3, [pc, #244]	; (800fdfc <tcp_receive+0x890>)
 800fd08:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fd0a:	4b3c      	ldr	r3, [pc, #240]	; (800fdfc <tcp_receive+0x890>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4b38      	ldr	r3, [pc, #224]	; (800fdf4 <tcp_receive+0x888>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	441a      	add	r2, r3
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1a:	6879      	ldr	r1, [r7, #4]
 800fd1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd1e:	440b      	add	r3, r1
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d006      	beq.n	800fd32 <tcp_receive+0x7c6>
 800fd24:	4b36      	ldr	r3, [pc, #216]	; (800fe00 <tcp_receive+0x894>)
 800fd26:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fd2a:	4936      	ldr	r1, [pc, #216]	; (800fe04 <tcp_receive+0x898>)
 800fd2c:	4836      	ldr	r0, [pc, #216]	; (800fe08 <tcp_receive+0x89c>)
 800fd2e:	f002 fb2b 	bl	8012388 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 80e7 	beq.w	800ff0a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd3c:	4b2e      	ldr	r3, [pc, #184]	; (800fdf8 <tcp_receive+0x88c>)
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	899b      	ldrh	r3, [r3, #12]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7f8 fb5b 	bl	8008400 <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d010      	beq.n	800fd78 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fd56:	e00a      	b.n	800fd6e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd5c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f7fd fd92 	bl	800d892 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1f0      	bne.n	800fd58 <tcp_receive+0x7ec>
 800fd76:	e0c8      	b.n	800ff0a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fd7e:	e052      	b.n	800fe26 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	899b      	ldrh	r3, [r3, #12]
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7f8 fb39 	bl	8008400 <lwip_htons>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	f003 0301 	and.w	r3, r3, #1
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d03d      	beq.n	800fe16 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fd9a:	4b17      	ldr	r3, [pc, #92]	; (800fdf8 <tcp_receive+0x88c>)
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	899b      	ldrh	r3, [r3, #12]
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7f8 fb2c 	bl	8008400 <lwip_htons>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d130      	bne.n	800fe16 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fdb4:	4b10      	ldr	r3, [pc, #64]	; (800fdf8 <tcp_receive+0x88c>)
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	b29c      	uxth	r4, r3
 800fdbc:	2001      	movs	r0, #1
 800fdbe:	f7f8 fb1f 	bl	8008400 <lwip_htons>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4b0c      	ldr	r3, [pc, #48]	; (800fdf8 <tcp_receive+0x88c>)
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	4322      	orrs	r2, r4
 800fdcc:	b292      	uxth	r2, r2
 800fdce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fdd0:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <tcp_receive+0x88c>)
 800fdd2:	891c      	ldrh	r4, [r3, #8]
 800fdd4:	4b08      	ldr	r3, [pc, #32]	; (800fdf8 <tcp_receive+0x88c>)
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	899b      	ldrh	r3, [r3, #12]
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7f8 fb0f 	bl	8008400 <lwip_htons>
 800fde2:	4603      	mov	r3, r0
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	f003 0303 	and.w	r3, r3, #3
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00e      	beq.n	800fe0c <tcp_receive+0x8a0>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e00d      	b.n	800fe0e <tcp_receive+0x8a2>
 800fdf2:	bf00      	nop
 800fdf4:	24008260 	.word	0x24008260
 800fdf8:	24008240 	.word	0x24008240
 800fdfc:	2400826a 	.word	0x2400826a
 800fe00:	08014e40 	.word	0x08014e40
 800fe04:	08015238 	.word	0x08015238
 800fe08:	08014edc 	.word	0x08014edc
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4423      	add	r3, r4
 800fe10:	b29a      	uxth	r2, r3
 800fe12:	4b98      	ldr	r3, [pc, #608]	; (8010074 <tcp_receive+0xb08>)
 800fe14:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fe16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe18:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fe1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fe20:	6938      	ldr	r0, [r7, #16]
 800fe22:	f7fd fd36 	bl	800d892 <tcp_seg_free>
            while (next &&
 800fe26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00e      	beq.n	800fe4a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fe2c:	4b91      	ldr	r3, [pc, #580]	; (8010074 <tcp_receive+0xb08>)
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	461a      	mov	r2, r3
 800fe32:	4b91      	ldr	r3, [pc, #580]	; (8010078 <tcp_receive+0xb0c>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	441a      	add	r2, r3
 800fe38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe40:	8909      	ldrh	r1, [r1, #8]
 800fe42:	440b      	add	r3, r1
 800fe44:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	da9a      	bge.n	800fd80 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fe4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d059      	beq.n	800ff04 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fe50:	4b88      	ldr	r3, [pc, #544]	; (8010074 <tcp_receive+0xb08>)
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	461a      	mov	r2, r3
 800fe56:	4b88      	ldr	r3, [pc, #544]	; (8010078 <tcp_receive+0xb0c>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	441a      	add	r2, r3
 800fe5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dd4d      	ble.n	800ff04 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fe68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	4b81      	ldr	r3, [pc, #516]	; (8010078 <tcp_receive+0xb0c>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	4b80      	ldr	r3, [pc, #512]	; (801007c <tcp_receive+0xb10>)
 800fe7c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fe7e:	4b7f      	ldr	r3, [pc, #508]	; (801007c <tcp_receive+0xb10>)
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	899b      	ldrh	r3, [r3, #12]
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7f8 faba 	bl	8008400 <lwip_htons>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	f003 0302 	and.w	r3, r3, #2
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d005      	beq.n	800fea4 <tcp_receive+0x938>
                inseg.len -= 1;
 800fe98:	4b78      	ldr	r3, [pc, #480]	; (801007c <tcp_receive+0xb10>)
 800fe9a:	891b      	ldrh	r3, [r3, #8]
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	4b76      	ldr	r3, [pc, #472]	; (801007c <tcp_receive+0xb10>)
 800fea2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fea4:	4b75      	ldr	r3, [pc, #468]	; (801007c <tcp_receive+0xb10>)
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	4a74      	ldr	r2, [pc, #464]	; (801007c <tcp_receive+0xb10>)
 800feaa:	8912      	ldrh	r2, [r2, #8]
 800feac:	4611      	mov	r1, r2
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fc f8f6 	bl	800c0a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800feb4:	4b71      	ldr	r3, [pc, #452]	; (801007c <tcp_receive+0xb10>)
 800feb6:	891c      	ldrh	r4, [r3, #8]
 800feb8:	4b70      	ldr	r3, [pc, #448]	; (801007c <tcp_receive+0xb10>)
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	899b      	ldrh	r3, [r3, #12]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7f8 fa9d 	bl	8008400 <lwip_htons>
 800fec6:	4603      	mov	r3, r0
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	f003 0303 	and.w	r3, r3, #3
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <tcp_receive+0x96a>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e000      	b.n	800fed8 <tcp_receive+0x96c>
 800fed6:	2300      	movs	r3, #0
 800fed8:	4423      	add	r3, r4
 800feda:	b29a      	uxth	r2, r3
 800fedc:	4b65      	ldr	r3, [pc, #404]	; (8010074 <tcp_receive+0xb08>)
 800fede:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fee0:	4b64      	ldr	r3, [pc, #400]	; (8010074 <tcp_receive+0xb08>)
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	4b64      	ldr	r3, [pc, #400]	; (8010078 <tcp_receive+0xb0c>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	441a      	add	r2, r3
 800feec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d006      	beq.n	800ff04 <tcp_receive+0x998>
 800fef6:	4b62      	ldr	r3, [pc, #392]	; (8010080 <tcp_receive+0xb14>)
 800fef8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fefc:	4961      	ldr	r1, [pc, #388]	; (8010084 <tcp_receive+0xb18>)
 800fefe:	4862      	ldr	r0, [pc, #392]	; (8010088 <tcp_receive+0xb1c>)
 800ff00:	f002 fa42 	bl	8012388 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff08:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ff0a:	4b5a      	ldr	r3, [pc, #360]	; (8010074 <tcp_receive+0xb08>)
 800ff0c:	881b      	ldrh	r3, [r3, #0]
 800ff0e:	461a      	mov	r2, r3
 800ff10:	4b59      	ldr	r3, [pc, #356]	; (8010078 <tcp_receive+0xb0c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	441a      	add	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff1e:	4b55      	ldr	r3, [pc, #340]	; (8010074 <tcp_receive+0xb08>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d206      	bcs.n	800ff34 <tcp_receive+0x9c8>
 800ff26:	4b56      	ldr	r3, [pc, #344]	; (8010080 <tcp_receive+0xb14>)
 800ff28:	f240 6207 	movw	r2, #1543	; 0x607
 800ff2c:	4957      	ldr	r1, [pc, #348]	; (801008c <tcp_receive+0xb20>)
 800ff2e:	4856      	ldr	r0, [pc, #344]	; (8010088 <tcp_receive+0xb1c>)
 800ff30:	f002 fa2a 	bl	8012388 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff38:	4b4e      	ldr	r3, [pc, #312]	; (8010074 <tcp_receive+0xb08>)
 800ff3a:	881b      	ldrh	r3, [r3, #0]
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7fc ffc5 	bl	800ced4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ff4a:	4b4c      	ldr	r3, [pc, #304]	; (801007c <tcp_receive+0xb10>)
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	891b      	ldrh	r3, [r3, #8]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d006      	beq.n	800ff62 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ff54:	4b49      	ldr	r3, [pc, #292]	; (801007c <tcp_receive+0xb10>)
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	4a4d      	ldr	r2, [pc, #308]	; (8010090 <tcp_receive+0xb24>)
 800ff5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ff5c:	4b47      	ldr	r3, [pc, #284]	; (801007c <tcp_receive+0xb10>)
 800ff5e:	2200      	movs	r2, #0
 800ff60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ff62:	4b46      	ldr	r3, [pc, #280]	; (801007c <tcp_receive+0xb10>)
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	899b      	ldrh	r3, [r3, #12]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7f8 fa48 	bl	8008400 <lwip_htons>
 800ff70:	4603      	mov	r3, r0
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	f003 0301 	and.w	r3, r3, #1
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 80b8 	beq.w	80100ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ff7e:	4b45      	ldr	r3, [pc, #276]	; (8010094 <tcp_receive+0xb28>)
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f043 0320 	orr.w	r3, r3, #32
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	4b42      	ldr	r3, [pc, #264]	; (8010094 <tcp_receive+0xb28>)
 800ff8a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ff8c:	e0af      	b.n	80100ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff92:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	4a36      	ldr	r2, [pc, #216]	; (8010078 <tcp_receive+0xb0c>)
 800ff9e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	891b      	ldrh	r3, [r3, #8]
 800ffa4:	461c      	mov	r4, r3
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	899b      	ldrh	r3, [r3, #12]
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f8 fa26 	bl	8008400 <lwip_htons>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	f003 0303 	and.w	r3, r3, #3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d001      	beq.n	800ffc4 <tcp_receive+0xa58>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e000      	b.n	800ffc6 <tcp_receive+0xa5a>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	191a      	adds	r2, r3, r4
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	441a      	add	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffd6:	461c      	mov	r4, r3
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	891b      	ldrh	r3, [r3, #8]
 800ffdc:	461d      	mov	r5, r3
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	899b      	ldrh	r3, [r3, #12]
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7f8 fa0a 	bl	8008400 <lwip_htons>
 800ffec:	4603      	mov	r3, r0
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	f003 0303 	and.w	r3, r3, #3
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d001      	beq.n	800fffc <tcp_receive+0xa90>
 800fff8:	2301      	movs	r3, #1
 800fffa:	e000      	b.n	800fffe <tcp_receive+0xa92>
 800fffc:	2300      	movs	r3, #0
 800fffe:	442b      	add	r3, r5
 8010000:	429c      	cmp	r4, r3
 8010002:	d206      	bcs.n	8010012 <tcp_receive+0xaa6>
 8010004:	4b1e      	ldr	r3, [pc, #120]	; (8010080 <tcp_receive+0xb14>)
 8010006:	f240 622b 	movw	r2, #1579	; 0x62b
 801000a:	4923      	ldr	r1, [pc, #140]	; (8010098 <tcp_receive+0xb2c>)
 801000c:	481e      	ldr	r0, [pc, #120]	; (8010088 <tcp_receive+0xb1c>)
 801000e:	f002 f9bb 	bl	8012388 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	891b      	ldrh	r3, [r3, #8]
 8010016:	461c      	mov	r4, r3
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	899b      	ldrh	r3, [r3, #12]
 801001e:	b29b      	uxth	r3, r3
 8010020:	4618      	mov	r0, r3
 8010022:	f7f8 f9ed 	bl	8008400 <lwip_htons>
 8010026:	4603      	mov	r3, r0
 8010028:	b2db      	uxtb	r3, r3
 801002a:	f003 0303 	and.w	r3, r3, #3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d001      	beq.n	8010036 <tcp_receive+0xaca>
 8010032:	2301      	movs	r3, #1
 8010034:	e000      	b.n	8010038 <tcp_receive+0xacc>
 8010036:	2300      	movs	r3, #0
 8010038:	1919      	adds	r1, r3, r4
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801003e:	b28b      	uxth	r3, r1
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	b29a      	uxth	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7fc ff43 	bl	800ced4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	891b      	ldrh	r3, [r3, #8]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d028      	beq.n	80100aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010058:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <tcp_receive+0xb24>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d01d      	beq.n	801009c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010060:	4b0b      	ldr	r3, [pc, #44]	; (8010090 <tcp_receive+0xb24>)
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	4619      	mov	r1, r3
 801006a:	4610      	mov	r0, r2
 801006c:	f7fc fa60 	bl	800c530 <pbuf_cat>
 8010070:	e018      	b.n	80100a4 <tcp_receive+0xb38>
 8010072:	bf00      	nop
 8010074:	2400826a 	.word	0x2400826a
 8010078:	24008260 	.word	0x24008260
 801007c:	24008240 	.word	0x24008240
 8010080:	08014e40 	.word	0x08014e40
 8010084:	08015270 	.word	0x08015270
 8010088:	08014edc 	.word	0x08014edc
 801008c:	080152ac 	.word	0x080152ac
 8010090:	24008270 	.word	0x24008270
 8010094:	2400826d 	.word	0x2400826d
 8010098:	080152cc 	.word	0x080152cc
            } else {
              recv_data = cseg->p;
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	4a70      	ldr	r2, [pc, #448]	; (8010264 <tcp_receive+0xcf8>)
 80100a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	2200      	movs	r2, #0
 80100a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	899b      	ldrh	r3, [r3, #12]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7f8 f9a4 	bl	8008400 <lwip_htons>
 80100b8:	4603      	mov	r3, r0
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	f003 0301 	and.w	r3, r3, #1
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00d      	beq.n	80100e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80100c4:	4b68      	ldr	r3, [pc, #416]	; (8010268 <tcp_receive+0xcfc>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f043 0320 	orr.w	r3, r3, #32
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	4b66      	ldr	r3, [pc, #408]	; (8010268 <tcp_receive+0xcfc>)
 80100d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	7d1b      	ldrb	r3, [r3, #20]
 80100d6:	2b04      	cmp	r3, #4
 80100d8:	d102      	bne.n	80100e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2207      	movs	r2, #7
 80100de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80100e8:	68b8      	ldr	r0, [r7, #8]
 80100ea:	f7fd fbd2 	bl	800d892 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d008      	beq.n	8010108 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	685a      	ldr	r2, [r3, #4]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010102:	429a      	cmp	r2, r3
 8010104:	f43f af43 	beq.w	800ff8e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	8b5b      	ldrh	r3, [r3, #26]
 801010c:	f003 0301 	and.w	r3, r3, #1
 8010110:	2b00      	cmp	r3, #0
 8010112:	d00e      	beq.n	8010132 <tcp_receive+0xbc6>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	8b5b      	ldrh	r3, [r3, #26]
 8010118:	f023 0301 	bic.w	r3, r3, #1
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	835a      	strh	r2, [r3, #26]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	8b5b      	ldrh	r3, [r3, #26]
 8010126:	f043 0302 	orr.w	r3, r3, #2
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010130:	e188      	b.n	8010444 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	8b5b      	ldrh	r3, [r3, #26]
 8010136:	f043 0301 	orr.w	r3, r3, #1
 801013a:	b29a      	uxth	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010140:	e180      	b.n	8010444 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801014a:	4848      	ldr	r0, [pc, #288]	; (801026c <tcp_receive+0xd00>)
 801014c:	f7fd fbba 	bl	800d8c4 <tcp_seg_copy>
 8010150:	4602      	mov	r2, r0
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	675a      	str	r2, [r3, #116]	; 0x74
 8010156:	e16d      	b.n	8010434 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010158:	2300      	movs	r3, #0
 801015a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010160:	63bb      	str	r3, [r7, #56]	; 0x38
 8010162:	e157      	b.n	8010414 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	685a      	ldr	r2, [r3, #4]
 801016a:	4b41      	ldr	r3, [pc, #260]	; (8010270 <tcp_receive+0xd04>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	429a      	cmp	r2, r3
 8010170:	d11d      	bne.n	80101ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010172:	4b3e      	ldr	r3, [pc, #248]	; (801026c <tcp_receive+0xd00>)
 8010174:	891a      	ldrh	r2, [r3, #8]
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	891b      	ldrh	r3, [r3, #8]
 801017a:	429a      	cmp	r2, r3
 801017c:	f240 814f 	bls.w	801041e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010180:	483a      	ldr	r0, [pc, #232]	; (801026c <tcp_receive+0xd00>)
 8010182:	f7fd fb9f 	bl	800d8c4 <tcp_seg_copy>
 8010186:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 8149 	beq.w	8010422 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010192:	2b00      	cmp	r3, #0
 8010194:	d003      	beq.n	801019e <tcp_receive+0xc32>
                    prev->next = cseg;
 8010196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	e002      	b.n	80101a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	697a      	ldr	r2, [r7, #20]
 80101a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80101a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101a6:	6978      	ldr	r0, [r7, #20]
 80101a8:	f7ff f8dc 	bl	800f364 <tcp_oos_insert_segment>
                }
                break;
 80101ac:	e139      	b.n	8010422 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80101ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d117      	bne.n	80101e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80101b4:	4b2e      	ldr	r3, [pc, #184]	; (8010270 <tcp_receive+0xd04>)
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	da57      	bge.n	8010274 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80101c4:	4829      	ldr	r0, [pc, #164]	; (801026c <tcp_receive+0xd00>)
 80101c6:	f7fd fb7d 	bl	800d8c4 <tcp_seg_copy>
 80101ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 8129 	beq.w	8010426 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	69ba      	ldr	r2, [r7, #24]
 80101d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80101da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101dc:	69b8      	ldr	r0, [r7, #24]
 80101de:	f7ff f8c1 	bl	800f364 <tcp_oos_insert_segment>
                  }
                  break;
 80101e2:	e120      	b.n	8010426 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80101e4:	4b22      	ldr	r3, [pc, #136]	; (8010270 <tcp_receive+0xd04>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	3b01      	subs	r3, #1
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	db3e      	blt.n	8010274 <tcp_receive+0xd08>
 80101f6:	4b1e      	ldr	r3, [pc, #120]	; (8010270 <tcp_receive+0xd04>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fc:	68db      	ldr	r3, [r3, #12]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	1ad3      	subs	r3, r2, r3
 8010202:	3301      	adds	r3, #1
 8010204:	2b00      	cmp	r3, #0
 8010206:	dc35      	bgt.n	8010274 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010208:	4818      	ldr	r0, [pc, #96]	; (801026c <tcp_receive+0xd00>)
 801020a:	f7fd fb5b 	bl	800d8c4 <tcp_seg_copy>
 801020e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f000 8109 	beq.w	801042a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010220:	8912      	ldrh	r2, [r2, #8]
 8010222:	441a      	add	r2, r3
 8010224:	4b12      	ldr	r3, [pc, #72]	; (8010270 <tcp_receive+0xd04>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	dd12      	ble.n	8010254 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801022e:	4b10      	ldr	r3, [pc, #64]	; (8010270 <tcp_receive+0xd04>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	b29a      	uxth	r2, r3
 8010234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	b29b      	uxth	r3, r3
 801023c:	1ad3      	subs	r3, r2, r3
 801023e:	b29a      	uxth	r2, r3
 8010240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010242:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010246:	685a      	ldr	r2, [r3, #4]
 8010248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801024a:	891b      	ldrh	r3, [r3, #8]
 801024c:	4619      	mov	r1, r3
 801024e:	4610      	mov	r0, r2
 8010250:	f7fb ff26 	bl	800c0a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010256:	69fa      	ldr	r2, [r7, #28]
 8010258:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801025a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801025c:	69f8      	ldr	r0, [r7, #28]
 801025e:	f7ff f881 	bl	800f364 <tcp_oos_insert_segment>
                  }
                  break;
 8010262:	e0e2      	b.n	801042a <tcp_receive+0xebe>
 8010264:	24008270 	.word	0x24008270
 8010268:	2400826d 	.word	0x2400826d
 801026c:	24008240 	.word	0x24008240
 8010270:	24008260 	.word	0x24008260
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010276:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	f040 80c6 	bne.w	801040e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010282:	4b80      	ldr	r3, [pc, #512]	; (8010484 <tcp_receive+0xf18>)
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801028e:	2b00      	cmp	r3, #0
 8010290:	f340 80bd 	ble.w	801040e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	899b      	ldrh	r3, [r3, #12]
 801029a:	b29b      	uxth	r3, r3
 801029c:	4618      	mov	r0, r3
 801029e:	f7f8 f8af 	bl	8008400 <lwip_htons>
 80102a2:	4603      	mov	r3, r0
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	f003 0301 	and.w	r3, r3, #1
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f040 80bf 	bne.w	801042e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80102b0:	4875      	ldr	r0, [pc, #468]	; (8010488 <tcp_receive+0xf1c>)
 80102b2:	f7fd fb07 	bl	800d8c4 <tcp_seg_copy>
 80102b6:	4602      	mov	r2, r0
 80102b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80102bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f000 80b6 	beq.w	8010432 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80102c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102ce:	8912      	ldrh	r2, [r2, #8]
 80102d0:	441a      	add	r2, r3
 80102d2:	4b6c      	ldr	r3, [pc, #432]	; (8010484 <tcp_receive+0xf18>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	dd12      	ble.n	8010302 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80102dc:	4b69      	ldr	r3, [pc, #420]	; (8010484 <tcp_receive+0xf18>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80102f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f4:	685a      	ldr	r2, [r3, #4]
 80102f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f8:	891b      	ldrh	r3, [r3, #8]
 80102fa:	4619      	mov	r1, r3
 80102fc:	4610      	mov	r0, r2
 80102fe:	f7fb fecf 	bl	800c0a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010302:	4b62      	ldr	r3, [pc, #392]	; (801048c <tcp_receive+0xf20>)
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	461a      	mov	r2, r3
 8010308:	4b5e      	ldr	r3, [pc, #376]	; (8010484 <tcp_receive+0xf18>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	441a      	add	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010312:	6879      	ldr	r1, [r7, #4]
 8010314:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010316:	440b      	add	r3, r1
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	2b00      	cmp	r3, #0
 801031c:	f340 8089 	ble.w	8010432 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	899b      	ldrh	r3, [r3, #12]
 8010328:	b29b      	uxth	r3, r3
 801032a:	4618      	mov	r0, r3
 801032c:	f7f8 f868 	bl	8008400 <lwip_htons>
 8010330:	4603      	mov	r3, r0
 8010332:	b2db      	uxtb	r3, r3
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	d022      	beq.n	8010382 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	899b      	ldrh	r3, [r3, #12]
 8010344:	b29b      	uxth	r3, r3
 8010346:	b21b      	sxth	r3, r3
 8010348:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801034c:	b21c      	sxth	r4, r3
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	899b      	ldrh	r3, [r3, #12]
 8010356:	b29b      	uxth	r3, r3
 8010358:	4618      	mov	r0, r3
 801035a:	f7f8 f851 	bl	8008400 <lwip_htons>
 801035e:	4603      	mov	r3, r0
 8010360:	b2db      	uxtb	r3, r3
 8010362:	b29b      	uxth	r3, r3
 8010364:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010368:	b29b      	uxth	r3, r3
 801036a:	4618      	mov	r0, r3
 801036c:	f7f8 f848 	bl	8008400 <lwip_htons>
 8010370:	4603      	mov	r3, r0
 8010372:	b21b      	sxth	r3, r3
 8010374:	4323      	orrs	r3, r4
 8010376:	b21a      	sxth	r2, r3
 8010378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	b292      	uxth	r2, r2
 8010380:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010386:	b29a      	uxth	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801038c:	4413      	add	r3, r2
 801038e:	b299      	uxth	r1, r3
 8010390:	4b3c      	ldr	r3, [pc, #240]	; (8010484 <tcp_receive+0xf18>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	b29a      	uxth	r2, r3
 8010396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	1a8a      	subs	r2, r1, r2
 801039c:	b292      	uxth	r2, r2
 801039e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80103a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	685a      	ldr	r2, [r3, #4]
 80103a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	891b      	ldrh	r3, [r3, #8]
 80103ac:	4619      	mov	r1, r3
 80103ae:	4610      	mov	r0, r2
 80103b0:	f7fb fe76 	bl	800c0a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80103b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	891c      	ldrh	r4, [r3, #8]
 80103ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7f8 f81b 	bl	8008400 <lwip_htons>
 80103ca:	4603      	mov	r3, r0
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	f003 0303 	and.w	r3, r3, #3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d001      	beq.n	80103da <tcp_receive+0xe6e>
 80103d6:	2301      	movs	r3, #1
 80103d8:	e000      	b.n	80103dc <tcp_receive+0xe70>
 80103da:	2300      	movs	r3, #0
 80103dc:	4423      	add	r3, r4
 80103de:	b29a      	uxth	r2, r3
 80103e0:	4b2a      	ldr	r3, [pc, #168]	; (801048c <tcp_receive+0xf20>)
 80103e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80103e4:	4b29      	ldr	r3, [pc, #164]	; (801048c <tcp_receive+0xf20>)
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	4b26      	ldr	r3, [pc, #152]	; (8010484 <tcp_receive+0xf18>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	441a      	add	r2, r3
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f4:	6879      	ldr	r1, [r7, #4]
 80103f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103f8:	440b      	add	r3, r1
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d019      	beq.n	8010432 <tcp_receive+0xec6>
 80103fe:	4b24      	ldr	r3, [pc, #144]	; (8010490 <tcp_receive+0xf24>)
 8010400:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010404:	4923      	ldr	r1, [pc, #140]	; (8010494 <tcp_receive+0xf28>)
 8010406:	4824      	ldr	r0, [pc, #144]	; (8010498 <tcp_receive+0xf2c>)
 8010408:	f001 ffbe 	bl	8012388 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801040c:	e011      	b.n	8010432 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801040e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	63bb      	str	r3, [r7, #56]	; 0x38
 8010414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010416:	2b00      	cmp	r3, #0
 8010418:	f47f aea4 	bne.w	8010164 <tcp_receive+0xbf8>
 801041c:	e00a      	b.n	8010434 <tcp_receive+0xec8>
                break;
 801041e:	bf00      	nop
 8010420:	e008      	b.n	8010434 <tcp_receive+0xec8>
                break;
 8010422:	bf00      	nop
 8010424:	e006      	b.n	8010434 <tcp_receive+0xec8>
                  break;
 8010426:	bf00      	nop
 8010428:	e004      	b.n	8010434 <tcp_receive+0xec8>
                  break;
 801042a:	bf00      	nop
 801042c:	e002      	b.n	8010434 <tcp_receive+0xec8>
                  break;
 801042e:	bf00      	nop
 8010430:	e000      	b.n	8010434 <tcp_receive+0xec8>
                break;
 8010432:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f001 fa33 	bl	80118a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801043a:	e003      	b.n	8010444 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f001 fa2f 	bl	80118a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010442:	e01a      	b.n	801047a <tcp_receive+0xf0e>
 8010444:	e019      	b.n	801047a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010446:	4b0f      	ldr	r3, [pc, #60]	; (8010484 <tcp_receive+0xf18>)
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	2b00      	cmp	r3, #0
 8010452:	db0a      	blt.n	801046a <tcp_receive+0xefe>
 8010454:	4b0b      	ldr	r3, [pc, #44]	; (8010484 <tcp_receive+0xf18>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045c:	6879      	ldr	r1, [r7, #4]
 801045e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010460:	440b      	add	r3, r1
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	3301      	adds	r3, #1
 8010466:	2b00      	cmp	r3, #0
 8010468:	dd07      	ble.n	801047a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	8b5b      	ldrh	r3, [r3, #26]
 801046e:	f043 0302 	orr.w	r3, r3, #2
 8010472:	b29a      	uxth	r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010478:	e7ff      	b.n	801047a <tcp_receive+0xf0e>
 801047a:	bf00      	nop
 801047c:	3750      	adds	r7, #80	; 0x50
 801047e:	46bd      	mov	sp, r7
 8010480:	bdb0      	pop	{r4, r5, r7, pc}
 8010482:	bf00      	nop
 8010484:	24008260 	.word	0x24008260
 8010488:	24008240 	.word	0x24008240
 801048c:	2400826a 	.word	0x2400826a
 8010490:	08014e40 	.word	0x08014e40
 8010494:	08015238 	.word	0x08015238
 8010498:	08014edc 	.word	0x08014edc

0801049c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80104a2:	4b15      	ldr	r3, [pc, #84]	; (80104f8 <tcp_get_next_optbyte+0x5c>)
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	1c5a      	adds	r2, r3, #1
 80104a8:	b291      	uxth	r1, r2
 80104aa:	4a13      	ldr	r2, [pc, #76]	; (80104f8 <tcp_get_next_optbyte+0x5c>)
 80104ac:	8011      	strh	r1, [r2, #0]
 80104ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80104b0:	4b12      	ldr	r3, [pc, #72]	; (80104fc <tcp_get_next_optbyte+0x60>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d004      	beq.n	80104c2 <tcp_get_next_optbyte+0x26>
 80104b8:	4b11      	ldr	r3, [pc, #68]	; (8010500 <tcp_get_next_optbyte+0x64>)
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	88fa      	ldrh	r2, [r7, #6]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d208      	bcs.n	80104d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80104c2:	4b10      	ldr	r3, [pc, #64]	; (8010504 <tcp_get_next_optbyte+0x68>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	3314      	adds	r3, #20
 80104c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80104ca:	88fb      	ldrh	r3, [r7, #6]
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	4413      	add	r3, r2
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	e00b      	b.n	80104ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80104d4:	88fb      	ldrh	r3, [r7, #6]
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	4b09      	ldr	r3, [pc, #36]	; (8010500 <tcp_get_next_optbyte+0x64>)
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80104e2:	4b06      	ldr	r3, [pc, #24]	; (80104fc <tcp_get_next_optbyte+0x60>)
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	797b      	ldrb	r3, [r7, #5]
 80104e8:	4413      	add	r3, r2
 80104ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	2400825c 	.word	0x2400825c
 80104fc:	24008258 	.word	0x24008258
 8010500:	24008256 	.word	0x24008256
 8010504:	24008250 	.word	0x24008250

08010508 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d106      	bne.n	8010524 <tcp_parseopt+0x1c>
 8010516:	4b32      	ldr	r3, [pc, #200]	; (80105e0 <tcp_parseopt+0xd8>)
 8010518:	f240 727d 	movw	r2, #1917	; 0x77d
 801051c:	4931      	ldr	r1, [pc, #196]	; (80105e4 <tcp_parseopt+0xdc>)
 801051e:	4832      	ldr	r0, [pc, #200]	; (80105e8 <tcp_parseopt+0xe0>)
 8010520:	f001 ff32 	bl	8012388 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010524:	4b31      	ldr	r3, [pc, #196]	; (80105ec <tcp_parseopt+0xe4>)
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d055      	beq.n	80105d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801052c:	4b30      	ldr	r3, [pc, #192]	; (80105f0 <tcp_parseopt+0xe8>)
 801052e:	2200      	movs	r2, #0
 8010530:	801a      	strh	r2, [r3, #0]
 8010532:	e045      	b.n	80105c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010534:	f7ff ffb2 	bl	801049c <tcp_get_next_optbyte>
 8010538:	4603      	mov	r3, r0
 801053a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801053c:	7bfb      	ldrb	r3, [r7, #15]
 801053e:	2b02      	cmp	r3, #2
 8010540:	d006      	beq.n	8010550 <tcp_parseopt+0x48>
 8010542:	2b02      	cmp	r3, #2
 8010544:	dc2b      	bgt.n	801059e <tcp_parseopt+0x96>
 8010546:	2b00      	cmp	r3, #0
 8010548:	d041      	beq.n	80105ce <tcp_parseopt+0xc6>
 801054a:	2b01      	cmp	r3, #1
 801054c:	d127      	bne.n	801059e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801054e:	e037      	b.n	80105c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010550:	f7ff ffa4 	bl	801049c <tcp_get_next_optbyte>
 8010554:	4603      	mov	r3, r0
 8010556:	2b04      	cmp	r3, #4
 8010558:	d13b      	bne.n	80105d2 <tcp_parseopt+0xca>
 801055a:	4b25      	ldr	r3, [pc, #148]	; (80105f0 <tcp_parseopt+0xe8>)
 801055c:	881b      	ldrh	r3, [r3, #0]
 801055e:	3301      	adds	r3, #1
 8010560:	4a22      	ldr	r2, [pc, #136]	; (80105ec <tcp_parseopt+0xe4>)
 8010562:	8812      	ldrh	r2, [r2, #0]
 8010564:	4293      	cmp	r3, r2
 8010566:	da34      	bge.n	80105d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010568:	f7ff ff98 	bl	801049c <tcp_get_next_optbyte>
 801056c:	4603      	mov	r3, r0
 801056e:	b29b      	uxth	r3, r3
 8010570:	021b      	lsls	r3, r3, #8
 8010572:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010574:	f7ff ff92 	bl	801049c <tcp_get_next_optbyte>
 8010578:	4603      	mov	r3, r0
 801057a:	b29a      	uxth	r2, r3
 801057c:	89bb      	ldrh	r3, [r7, #12]
 801057e:	4313      	orrs	r3, r2
 8010580:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010582:	89bb      	ldrh	r3, [r7, #12]
 8010584:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010588:	d804      	bhi.n	8010594 <tcp_parseopt+0x8c>
 801058a:	89bb      	ldrh	r3, [r7, #12]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <tcp_parseopt+0x8c>
 8010590:	89ba      	ldrh	r2, [r7, #12]
 8010592:	e001      	b.n	8010598 <tcp_parseopt+0x90>
 8010594:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801059c:	e010      	b.n	80105c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801059e:	f7ff ff7d 	bl	801049c <tcp_get_next_optbyte>
 80105a2:	4603      	mov	r3, r0
 80105a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80105a6:	7afb      	ldrb	r3, [r7, #11]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d914      	bls.n	80105d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80105ac:	7afb      	ldrb	r3, [r7, #11]
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	4b0f      	ldr	r3, [pc, #60]	; (80105f0 <tcp_parseopt+0xe8>)
 80105b2:	881b      	ldrh	r3, [r3, #0]
 80105b4:	4413      	add	r3, r2
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	3b02      	subs	r3, #2
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	4b0c      	ldr	r3, [pc, #48]	; (80105f0 <tcp_parseopt+0xe8>)
 80105be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80105c0:	4b0b      	ldr	r3, [pc, #44]	; (80105f0 <tcp_parseopt+0xe8>)
 80105c2:	881a      	ldrh	r2, [r3, #0]
 80105c4:	4b09      	ldr	r3, [pc, #36]	; (80105ec <tcp_parseopt+0xe4>)
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d3b3      	bcc.n	8010534 <tcp_parseopt+0x2c>
 80105cc:	e004      	b.n	80105d8 <tcp_parseopt+0xd0>
          return;
 80105ce:	bf00      	nop
 80105d0:	e002      	b.n	80105d8 <tcp_parseopt+0xd0>
            return;
 80105d2:	bf00      	nop
 80105d4:	e000      	b.n	80105d8 <tcp_parseopt+0xd0>
            return;
 80105d6:	bf00      	nop
      }
    }
  }
}
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	08014e40 	.word	0x08014e40
 80105e4:	080152f4 	.word	0x080152f4
 80105e8:	08014edc 	.word	0x08014edc
 80105ec:	24008254 	.word	0x24008254
 80105f0:	2400825c 	.word	0x2400825c

080105f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80105f4:	b480      	push	{r7}
 80105f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80105f8:	4b05      	ldr	r3, [pc, #20]	; (8010610 <tcp_trigger_input_pcb_close+0x1c>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	f043 0310 	orr.w	r3, r3, #16
 8010600:	b2da      	uxtb	r2, r3
 8010602:	4b03      	ldr	r3, [pc, #12]	; (8010610 <tcp_trigger_input_pcb_close+0x1c>)
 8010604:	701a      	strb	r2, [r3, #0]
}
 8010606:	bf00      	nop
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr
 8010610:	2400826d 	.word	0x2400826d

08010614 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00a      	beq.n	801063c <tcp_route+0x28>
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	7a1b      	ldrb	r3, [r3, #8]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d006      	beq.n	801063c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	7a1b      	ldrb	r3, [r3, #8]
 8010632:	4618      	mov	r0, r3
 8010634:	f7fb fb2c 	bl	800bc90 <netif_get_by_index>
 8010638:	4603      	mov	r3, r0
 801063a:	e003      	b.n	8010644 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7f9 f9b5 	bl	80099ac <ip4_route>
 8010642:	4603      	mov	r3, r0
  }
}
 8010644:	4618      	mov	r0, r3
 8010646:	3710      	adds	r7, #16
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801064c:	b590      	push	{r4, r7, lr}
 801064e:	b087      	sub	sp, #28
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	603b      	str	r3, [r7, #0]
 8010658:	4613      	mov	r3, r2
 801065a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d105      	bne.n	801066e <tcp_create_segment+0x22>
 8010662:	4b44      	ldr	r3, [pc, #272]	; (8010774 <tcp_create_segment+0x128>)
 8010664:	22a3      	movs	r2, #163	; 0xa3
 8010666:	4944      	ldr	r1, [pc, #272]	; (8010778 <tcp_create_segment+0x12c>)
 8010668:	4844      	ldr	r0, [pc, #272]	; (801077c <tcp_create_segment+0x130>)
 801066a:	f001 fe8d 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d105      	bne.n	8010680 <tcp_create_segment+0x34>
 8010674:	4b3f      	ldr	r3, [pc, #252]	; (8010774 <tcp_create_segment+0x128>)
 8010676:	22a4      	movs	r2, #164	; 0xa4
 8010678:	4941      	ldr	r1, [pc, #260]	; (8010780 <tcp_create_segment+0x134>)
 801067a:	4840      	ldr	r0, [pc, #256]	; (801077c <tcp_create_segment+0x130>)
 801067c:	f001 fe84 	bl	8012388 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010680:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	b2db      	uxtb	r3, r3
 8010688:	f003 0304 	and.w	r3, r3, #4
 801068c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801068e:	2003      	movs	r0, #3
 8010690:	f7fa fed2 	bl	800b438 <memp_malloc>
 8010694:	6138      	str	r0, [r7, #16]
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d104      	bne.n	80106a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801069c:	68b8      	ldr	r0, [r7, #8]
 801069e:	f7fb fe85 	bl	800c3ac <pbuf_free>
    return NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	e061      	b.n	801076a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80106ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	891a      	ldrh	r2, [r3, #8]
 80106be:	7dfb      	ldrb	r3, [r7, #23]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d205      	bcs.n	80106d2 <tcp_create_segment+0x86>
 80106c6:	4b2b      	ldr	r3, [pc, #172]	; (8010774 <tcp_create_segment+0x128>)
 80106c8:	22b0      	movs	r2, #176	; 0xb0
 80106ca:	492e      	ldr	r1, [pc, #184]	; (8010784 <tcp_create_segment+0x138>)
 80106cc:	482b      	ldr	r0, [pc, #172]	; (801077c <tcp_create_segment+0x130>)
 80106ce:	f001 fe5b 	bl	8012388 <iprintf>
  seg->len = p->tot_len - optlen;
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	891a      	ldrh	r2, [r3, #8]
 80106d6:	7dfb      	ldrb	r3, [r7, #23]
 80106d8:	b29b      	uxth	r3, r3
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	b29a      	uxth	r2, r3
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80106e2:	2114      	movs	r1, #20
 80106e4:	68b8      	ldr	r0, [r7, #8]
 80106e6:	f7fb fdcb 	bl	800c280 <pbuf_add_header>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d004      	beq.n	80106fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80106f0:	6938      	ldr	r0, [r7, #16]
 80106f2:	f7fd f8ce 	bl	800d892 <tcp_seg_free>
    return NULL;
 80106f6:	2300      	movs	r3, #0
 80106f8:	e037      	b.n	801076a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	8ada      	ldrh	r2, [r3, #22]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	68dc      	ldr	r4, [r3, #12]
 801070c:	4610      	mov	r0, r2
 801070e:	f7f7 fe77 	bl	8008400 <lwip_htons>
 8010712:	4603      	mov	r3, r0
 8010714:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	8b1a      	ldrh	r2, [r3, #24]
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	68dc      	ldr	r4, [r3, #12]
 801071e:	4610      	mov	r0, r2
 8010720:	f7f7 fe6e 	bl	8008400 <lwip_htons>
 8010724:	4603      	mov	r3, r0
 8010726:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	68dc      	ldr	r4, [r3, #12]
 801072c:	6838      	ldr	r0, [r7, #0]
 801072e:	f7f7 fe7c 	bl	800842a <lwip_htonl>
 8010732:	4603      	mov	r3, r0
 8010734:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010736:	7dfb      	ldrb	r3, [r7, #23]
 8010738:	089b      	lsrs	r3, r3, #2
 801073a:	b2db      	uxtb	r3, r3
 801073c:	b29b      	uxth	r3, r3
 801073e:	3305      	adds	r3, #5
 8010740:	b29b      	uxth	r3, r3
 8010742:	031b      	lsls	r3, r3, #12
 8010744:	b29a      	uxth	r2, r3
 8010746:	79fb      	ldrb	r3, [r7, #7]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4313      	orrs	r3, r2
 801074c:	b29a      	uxth	r2, r3
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	68dc      	ldr	r4, [r3, #12]
 8010752:	4610      	mov	r0, r2
 8010754:	f7f7 fe54 	bl	8008400 <lwip_htons>
 8010758:	4603      	mov	r3, r0
 801075a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	749a      	strb	r2, [r3, #18]
 8010764:	2200      	movs	r2, #0
 8010766:	74da      	strb	r2, [r3, #19]
  return seg;
 8010768:	693b      	ldr	r3, [r7, #16]
}
 801076a:	4618      	mov	r0, r3
 801076c:	371c      	adds	r7, #28
 801076e:	46bd      	mov	sp, r7
 8010770:	bd90      	pop	{r4, r7, pc}
 8010772:	bf00      	nop
 8010774:	08015310 	.word	0x08015310
 8010778:	08015394 	.word	0x08015394
 801077c:	080153b4 	.word	0x080153b4
 8010780:	080153dc 	.word	0x080153dc
 8010784:	08015400 	.word	0x08015400

08010788 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010788:	b590      	push	{r4, r7, lr}
 801078a:	b08b      	sub	sp, #44	; 0x2c
 801078c:	af02      	add	r7, sp, #8
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010794:	2300      	movs	r3, #0
 8010796:	61fb      	str	r3, [r7, #28]
 8010798:	2300      	movs	r3, #0
 801079a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801079c:	2300      	movs	r3, #0
 801079e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <tcp_split_unsent_seg+0x2c>
 80107a6:	4b95      	ldr	r3, [pc, #596]	; (80109fc <tcp_split_unsent_seg+0x274>)
 80107a8:	f240 324b 	movw	r2, #843	; 0x34b
 80107ac:	4994      	ldr	r1, [pc, #592]	; (8010a00 <tcp_split_unsent_seg+0x278>)
 80107ae:	4895      	ldr	r0, [pc, #596]	; (8010a04 <tcp_split_unsent_seg+0x27c>)
 80107b0:	f001 fdea 	bl	8012388 <iprintf>

  useg = pcb->unsent;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80107c0:	f04f 33ff 	mov.w	r3, #4294967295
 80107c4:	e116      	b.n	80109f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80107c6:	887b      	ldrh	r3, [r7, #2]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d109      	bne.n	80107e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80107cc:	4b8b      	ldr	r3, [pc, #556]	; (80109fc <tcp_split_unsent_seg+0x274>)
 80107ce:	f240 3253 	movw	r2, #851	; 0x353
 80107d2:	498d      	ldr	r1, [pc, #564]	; (8010a08 <tcp_split_unsent_seg+0x280>)
 80107d4:	488b      	ldr	r0, [pc, #556]	; (8010a04 <tcp_split_unsent_seg+0x27c>)
 80107d6:	f001 fdd7 	bl	8012388 <iprintf>
    return ERR_VAL;
 80107da:	f06f 0305 	mvn.w	r3, #5
 80107de:	e109      	b.n	80109f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	891b      	ldrh	r3, [r3, #8]
 80107e4:	887a      	ldrh	r2, [r7, #2]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d301      	bcc.n	80107ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80107ea:	2300      	movs	r3, #0
 80107ec:	e102      	b.n	80109f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107f2:	887a      	ldrh	r2, [r7, #2]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d906      	bls.n	8010806 <tcp_split_unsent_seg+0x7e>
 80107f8:	4b80      	ldr	r3, [pc, #512]	; (80109fc <tcp_split_unsent_seg+0x274>)
 80107fa:	f240 325b 	movw	r2, #859	; 0x35b
 80107fe:	4983      	ldr	r1, [pc, #524]	; (8010a0c <tcp_split_unsent_seg+0x284>)
 8010800:	4880      	ldr	r0, [pc, #512]	; (8010a04 <tcp_split_unsent_seg+0x27c>)
 8010802:	f001 fdc1 	bl	8012388 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	891b      	ldrh	r3, [r3, #8]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <tcp_split_unsent_seg+0x94>
 801080e:	4b7b      	ldr	r3, [pc, #492]	; (80109fc <tcp_split_unsent_seg+0x274>)
 8010810:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010814:	497e      	ldr	r1, [pc, #504]	; (8010a10 <tcp_split_unsent_seg+0x288>)
 8010816:	487b      	ldr	r0, [pc, #492]	; (8010a04 <tcp_split_unsent_seg+0x27c>)
 8010818:	f001 fdb6 	bl	8012388 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	7a9b      	ldrb	r3, [r3, #10]
 8010820:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	b2db      	uxtb	r3, r3
 8010828:	f003 0304 	and.w	r3, r3, #4
 801082c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	891a      	ldrh	r2, [r3, #8]
 8010832:	887b      	ldrh	r3, [r7, #2]
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010838:	7bbb      	ldrb	r3, [r7, #14]
 801083a:	b29a      	uxth	r2, r3
 801083c:	89bb      	ldrh	r3, [r7, #12]
 801083e:	4413      	add	r3, r2
 8010840:	b29b      	uxth	r3, r3
 8010842:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010846:	4619      	mov	r1, r3
 8010848:	2036      	movs	r0, #54	; 0x36
 801084a:	f7fb facb 	bl	800bde4 <pbuf_alloc>
 801084e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	2b00      	cmp	r3, #0
 8010854:	f000 80b7 	beq.w	80109c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	685b      	ldr	r3, [r3, #4]
 801085c:	891a      	ldrh	r2, [r3, #8]
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	891b      	ldrh	r3, [r3, #8]
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	b29a      	uxth	r2, r3
 8010866:	887b      	ldrh	r3, [r7, #2]
 8010868:	4413      	add	r3, r2
 801086a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	6858      	ldr	r0, [r3, #4]
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	685a      	ldr	r2, [r3, #4]
 8010874:	7bbb      	ldrb	r3, [r7, #14]
 8010876:	18d1      	adds	r1, r2, r3
 8010878:	897b      	ldrh	r3, [r7, #10]
 801087a:	89ba      	ldrh	r2, [r7, #12]
 801087c:	f7fb ff80 	bl	800c780 <pbuf_copy_partial>
 8010880:	4603      	mov	r3, r0
 8010882:	461a      	mov	r2, r3
 8010884:	89bb      	ldrh	r3, [r7, #12]
 8010886:	4293      	cmp	r3, r2
 8010888:	f040 809f 	bne.w	80109ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	899b      	ldrh	r3, [r3, #12]
 8010892:	b29b      	uxth	r3, r3
 8010894:	4618      	mov	r0, r3
 8010896:	f7f7 fdb3 	bl	8008400 <lwip_htons>
 801089a:	4603      	mov	r3, r0
 801089c:	b2db      	uxtb	r3, r3
 801089e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80108a4:	2300      	movs	r3, #0
 80108a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80108a8:	7efb      	ldrb	r3, [r7, #27]
 80108aa:	f003 0308 	and.w	r3, r3, #8
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d007      	beq.n	80108c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80108b2:	7efb      	ldrb	r3, [r7, #27]
 80108b4:	f023 0308 	bic.w	r3, r3, #8
 80108b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80108ba:	7ebb      	ldrb	r3, [r7, #26]
 80108bc:	f043 0308 	orr.w	r3, r3, #8
 80108c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80108c2:	7efb      	ldrb	r3, [r7, #27]
 80108c4:	f003 0301 	and.w	r3, r3, #1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d007      	beq.n	80108dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80108cc:	7efb      	ldrb	r3, [r7, #27]
 80108ce:	f023 0301 	bic.w	r3, r3, #1
 80108d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80108d4:	7ebb      	ldrb	r3, [r7, #26]
 80108d6:	f043 0301 	orr.w	r3, r3, #1
 80108da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7f7 fda1 	bl	800842a <lwip_htonl>
 80108e8:	4602      	mov	r2, r0
 80108ea:	887b      	ldrh	r3, [r7, #2]
 80108ec:	18d1      	adds	r1, r2, r3
 80108ee:	7eba      	ldrb	r2, [r7, #26]
 80108f0:	7bfb      	ldrb	r3, [r7, #15]
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	460b      	mov	r3, r1
 80108f6:	6939      	ldr	r1, [r7, #16]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff fea7 	bl	801064c <tcp_create_segment>
 80108fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d063      	beq.n	80109ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	4618      	mov	r0, r3
 801090c:	f7fb fdd6 	bl	800c4bc <pbuf_clen>
 8010910:	4603      	mov	r3, r0
 8010912:	461a      	mov	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801091a:	1a9b      	subs	r3, r3, r2
 801091c:	b29a      	uxth	r2, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	6858      	ldr	r0, [r3, #4]
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	891a      	ldrh	r2, [r3, #8]
 801092e:	89bb      	ldrh	r3, [r7, #12]
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	b29b      	uxth	r3, r3
 8010934:	4619      	mov	r1, r3
 8010936:	f7fb fbb3 	bl	800c0a0 <pbuf_realloc>
  useg->len -= remainder;
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	891a      	ldrh	r2, [r3, #8]
 801093e:	89bb      	ldrh	r3, [r7, #12]
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	b29a      	uxth	r2, r3
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	899b      	ldrh	r3, [r3, #12]
 801094e:	b29c      	uxth	r4, r3
 8010950:	7efb      	ldrb	r3, [r7, #27]
 8010952:	b29b      	uxth	r3, r3
 8010954:	4618      	mov	r0, r3
 8010956:	f7f7 fd53 	bl	8008400 <lwip_htons>
 801095a:	4603      	mov	r3, r0
 801095c:	461a      	mov	r2, r3
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	4322      	orrs	r2, r4
 8010964:	b292      	uxth	r2, r2
 8010966:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	4618      	mov	r0, r3
 801096e:	f7fb fda5 	bl	800c4bc <pbuf_clen>
 8010972:	4603      	mov	r3, r0
 8010974:	461a      	mov	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801097c:	4413      	add	r3, r2
 801097e:	b29a      	uxth	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f7fb fd96 	bl	800c4bc <pbuf_clen>
 8010990:	4603      	mov	r3, r0
 8010992:	461a      	mov	r2, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801099a:	4413      	add	r3, r2
 801099c:	b29a      	uxth	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	69fa      	ldr	r2, [r7, #28]
 80109b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d103      	bne.n	80109c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80109c2:	2300      	movs	r3, #0
 80109c4:	e016      	b.n	80109f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80109c6:	bf00      	nop
 80109c8:	e002      	b.n	80109d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80109ca:	bf00      	nop
 80109cc:	e000      	b.n	80109d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80109ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d006      	beq.n	80109e4 <tcp_split_unsent_seg+0x25c>
 80109d6:	4b09      	ldr	r3, [pc, #36]	; (80109fc <tcp_split_unsent_seg+0x274>)
 80109d8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80109dc:	490d      	ldr	r1, [pc, #52]	; (8010a14 <tcp_split_unsent_seg+0x28c>)
 80109de:	4809      	ldr	r0, [pc, #36]	; (8010a04 <tcp_split_unsent_seg+0x27c>)
 80109e0:	f001 fcd2 	bl	8012388 <iprintf>
  if (p != NULL) {
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d002      	beq.n	80109f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80109ea:	6938      	ldr	r0, [r7, #16]
 80109ec:	f7fb fcde 	bl	800c3ac <pbuf_free>
  }

  return ERR_MEM;
 80109f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3724      	adds	r7, #36	; 0x24
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd90      	pop	{r4, r7, pc}
 80109fc:	08015310 	.word	0x08015310
 8010a00:	080156f4 	.word	0x080156f4
 8010a04:	080153b4 	.word	0x080153b4
 8010a08:	08015718 	.word	0x08015718
 8010a0c:	0801573c 	.word	0x0801573c
 8010a10:	0801574c 	.word	0x0801574c
 8010a14:	0801575c 	.word	0x0801575c

08010a18 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d106      	bne.n	8010a34 <tcp_send_fin+0x1c>
 8010a26:	4b21      	ldr	r3, [pc, #132]	; (8010aac <tcp_send_fin+0x94>)
 8010a28:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010a2c:	4920      	ldr	r1, [pc, #128]	; (8010ab0 <tcp_send_fin+0x98>)
 8010a2e:	4821      	ldr	r0, [pc, #132]	; (8010ab4 <tcp_send_fin+0x9c>)
 8010a30:	f001 fcaa 	bl	8012388 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d02e      	beq.n	8010a9a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a40:	60fb      	str	r3, [r7, #12]
 8010a42:	e002      	b.n	8010a4a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1f8      	bne.n	8010a44 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	899b      	ldrh	r3, [r3, #12]
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7f7 fcd0 	bl	8008400 <lwip_htons>
 8010a60:	4603      	mov	r3, r0
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	f003 0307 	and.w	r3, r3, #7
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d116      	bne.n	8010a9a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	899b      	ldrh	r3, [r3, #12]
 8010a72:	b29c      	uxth	r4, r3
 8010a74:	2001      	movs	r0, #1
 8010a76:	f7f7 fcc3 	bl	8008400 <lwip_htons>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	4322      	orrs	r2, r4
 8010a84:	b292      	uxth	r2, r2
 8010a86:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8b5b      	ldrh	r3, [r3, #26]
 8010a8c:	f043 0320 	orr.w	r3, r3, #32
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010a96:	2300      	movs	r3, #0
 8010a98:	e004      	b.n	8010aa4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010a9a:	2101      	movs	r1, #1
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f80b 	bl	8010ab8 <tcp_enqueue_flags>
 8010aa2:	4603      	mov	r3, r0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd90      	pop	{r4, r7, pc}
 8010aac:	08015310 	.word	0x08015310
 8010ab0:	08015768 	.word	0x08015768
 8010ab4:	080153b4 	.word	0x080153b4

08010ab8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b08a      	sub	sp, #40	; 0x28
 8010abc:	af02      	add	r7, sp, #8
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010acc:	78fb      	ldrb	r3, [r7, #3]
 8010ace:	f003 0303 	and.w	r3, r3, #3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d106      	bne.n	8010ae4 <tcp_enqueue_flags+0x2c>
 8010ad6:	4b67      	ldr	r3, [pc, #412]	; (8010c74 <tcp_enqueue_flags+0x1bc>)
 8010ad8:	f240 4211 	movw	r2, #1041	; 0x411
 8010adc:	4966      	ldr	r1, [pc, #408]	; (8010c78 <tcp_enqueue_flags+0x1c0>)
 8010ade:	4867      	ldr	r0, [pc, #412]	; (8010c7c <tcp_enqueue_flags+0x1c4>)
 8010ae0:	f001 fc52 	bl	8012388 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <tcp_enqueue_flags+0x40>
 8010aea:	4b62      	ldr	r3, [pc, #392]	; (8010c74 <tcp_enqueue_flags+0x1bc>)
 8010aec:	f240 4213 	movw	r2, #1043	; 0x413
 8010af0:	4963      	ldr	r1, [pc, #396]	; (8010c80 <tcp_enqueue_flags+0x1c8>)
 8010af2:	4862      	ldr	r0, [pc, #392]	; (8010c7c <tcp_enqueue_flags+0x1c4>)
 8010af4:	f001 fc48 	bl	8012388 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010af8:	78fb      	ldrb	r3, [r7, #3]
 8010afa:	f003 0302 	and.w	r3, r3, #2
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010b02:	2301      	movs	r3, #1
 8010b04:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b06:	7ffb      	ldrb	r3, [r7, #31]
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	f003 0304 	and.w	r3, r3, #4
 8010b10:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b12:	7dfb      	ldrb	r3, [r7, #23]
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	2036      	movs	r0, #54	; 0x36
 8010b1e:	f7fb f961 	bl	800bde4 <pbuf_alloc>
 8010b22:	6138      	str	r0, [r7, #16]
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d109      	bne.n	8010b3e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	8b5b      	ldrh	r3, [r3, #26]
 8010b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010b38:	f04f 33ff 	mov.w	r3, #4294967295
 8010b3c:	e095      	b.n	8010c6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	895a      	ldrh	r2, [r3, #10]
 8010b42:	7dfb      	ldrb	r3, [r7, #23]
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d206      	bcs.n	8010b58 <tcp_enqueue_flags+0xa0>
 8010b4a:	4b4a      	ldr	r3, [pc, #296]	; (8010c74 <tcp_enqueue_flags+0x1bc>)
 8010b4c:	f240 4239 	movw	r2, #1081	; 0x439
 8010b50:	494c      	ldr	r1, [pc, #304]	; (8010c84 <tcp_enqueue_flags+0x1cc>)
 8010b52:	484a      	ldr	r0, [pc, #296]	; (8010c7c <tcp_enqueue_flags+0x1c4>)
 8010b54:	f001 fc18 	bl	8012388 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010b5c:	78fa      	ldrb	r2, [r7, #3]
 8010b5e:	7ffb      	ldrb	r3, [r7, #31]
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	460b      	mov	r3, r1
 8010b64:	6939      	ldr	r1, [r7, #16]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7ff fd70 	bl	801064c <tcp_create_segment>
 8010b6c:	60f8      	str	r0, [r7, #12]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d109      	bne.n	8010b88 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	8b5b      	ldrh	r3, [r3, #26]
 8010b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b7c:	b29a      	uxth	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010b82:	f04f 33ff 	mov.w	r3, #4294967295
 8010b86:	e070      	b.n	8010c6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	f003 0303 	and.w	r3, r3, #3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d006      	beq.n	8010ba2 <tcp_enqueue_flags+0xea>
 8010b94:	4b37      	ldr	r3, [pc, #220]	; (8010c74 <tcp_enqueue_flags+0x1bc>)
 8010b96:	f240 4242 	movw	r2, #1090	; 0x442
 8010b9a:	493b      	ldr	r1, [pc, #236]	; (8010c88 <tcp_enqueue_flags+0x1d0>)
 8010b9c:	4837      	ldr	r0, [pc, #220]	; (8010c7c <tcp_enqueue_flags+0x1c4>)
 8010b9e:	f001 fbf3 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	891b      	ldrh	r3, [r3, #8]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d006      	beq.n	8010bb8 <tcp_enqueue_flags+0x100>
 8010baa:	4b32      	ldr	r3, [pc, #200]	; (8010c74 <tcp_enqueue_flags+0x1bc>)
 8010bac:	f240 4243 	movw	r2, #1091	; 0x443
 8010bb0:	4936      	ldr	r1, [pc, #216]	; (8010c8c <tcp_enqueue_flags+0x1d4>)
 8010bb2:	4832      	ldr	r0, [pc, #200]	; (8010c7c <tcp_enqueue_flags+0x1c4>)
 8010bb4:	f001 fbe8 	bl	8012388 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d103      	bne.n	8010bc8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	68fa      	ldr	r2, [r7, #12]
 8010bc4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bc6:	e00d      	b.n	8010be4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bcc:	61bb      	str	r3, [r7, #24]
 8010bce:	e002      	b.n	8010bd6 <tcp_enqueue_flags+0x11e>
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	61bb      	str	r3, [r7, #24]
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d1f8      	bne.n	8010bd0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010bec:	78fb      	ldrb	r3, [r7, #3]
 8010bee:	f003 0302 	and.w	r3, r3, #2
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d104      	bne.n	8010c00 <tcp_enqueue_flags+0x148>
 8010bf6:	78fb      	ldrb	r3, [r7, #3]
 8010bf8:	f003 0301 	and.w	r3, r3, #1
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d004      	beq.n	8010c0a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c04:	1c5a      	adds	r2, r3, #1
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010c0a:	78fb      	ldrb	r3, [r7, #3]
 8010c0c:	f003 0301 	and.w	r3, r3, #1
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d006      	beq.n	8010c22 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	8b5b      	ldrh	r3, [r3, #26]
 8010c18:	f043 0320 	orr.w	r3, r3, #32
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fb fc48 	bl	800c4bc <pbuf_clen>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	461a      	mov	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c36:	4413      	add	r3, r2
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00e      	beq.n	8010c68 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10a      	bne.n	8010c68 <tcp_enqueue_flags+0x1b0>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <tcp_enqueue_flags+0x1b0>
 8010c5a:	4b06      	ldr	r3, [pc, #24]	; (8010c74 <tcp_enqueue_flags+0x1bc>)
 8010c5c:	f240 4265 	movw	r2, #1125	; 0x465
 8010c60:	490b      	ldr	r1, [pc, #44]	; (8010c90 <tcp_enqueue_flags+0x1d8>)
 8010c62:	4806      	ldr	r0, [pc, #24]	; (8010c7c <tcp_enqueue_flags+0x1c4>)
 8010c64:	f001 fb90 	bl	8012388 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3720      	adds	r7, #32
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	08015310 	.word	0x08015310
 8010c78:	08015784 	.word	0x08015784
 8010c7c:	080153b4 	.word	0x080153b4
 8010c80:	080157dc 	.word	0x080157dc
 8010c84:	080157fc 	.word	0x080157fc
 8010c88:	08015838 	.word	0x08015838
 8010c8c:	08015850 	.word	0x08015850
 8010c90:	0801587c 	.word	0x0801587c

08010c94 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010c94:	b5b0      	push	{r4, r5, r7, lr}
 8010c96:	b08a      	sub	sp, #40	; 0x28
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d106      	bne.n	8010cb0 <tcp_output+0x1c>
 8010ca2:	4b8a      	ldr	r3, [pc, #552]	; (8010ecc <tcp_output+0x238>)
 8010ca4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ca8:	4989      	ldr	r1, [pc, #548]	; (8010ed0 <tcp_output+0x23c>)
 8010caa:	488a      	ldr	r0, [pc, #552]	; (8010ed4 <tcp_output+0x240>)
 8010cac:	f001 fb6c 	bl	8012388 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	7d1b      	ldrb	r3, [r3, #20]
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d106      	bne.n	8010cc6 <tcp_output+0x32>
 8010cb8:	4b84      	ldr	r3, [pc, #528]	; (8010ecc <tcp_output+0x238>)
 8010cba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010cbe:	4986      	ldr	r1, [pc, #536]	; (8010ed8 <tcp_output+0x244>)
 8010cc0:	4884      	ldr	r0, [pc, #528]	; (8010ed4 <tcp_output+0x240>)
 8010cc2:	f001 fb61 	bl	8012388 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010cc6:	4b85      	ldr	r3, [pc, #532]	; (8010edc <tcp_output+0x248>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d101      	bne.n	8010cd4 <tcp_output+0x40>
    return ERR_OK;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	e1ce      	b.n	8011072 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	bf28      	it	cs
 8010ce4:	4613      	movcs	r3, r2
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10b      	bne.n	8010d0e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	8b5b      	ldrh	r3, [r3, #26]
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 81aa 	beq.w	8011058 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f000 fdcb 	bl	80118a0 <tcp_send_empty_ack>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	e1b1      	b.n	8011072 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3304      	adds	r3, #4
 8010d14:	461a      	mov	r2, r3
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7ff fc7c 	bl	8010614 <tcp_route>
 8010d1c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d102      	bne.n	8010d2a <tcp_output+0x96>
    return ERR_RTE;
 8010d24:	f06f 0303 	mvn.w	r3, #3
 8010d28:	e1a3      	b.n	8011072 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d003      	beq.n	8010d38 <tcp_output+0xa4>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d111      	bne.n	8010d5c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d002      	beq.n	8010d44 <tcp_output+0xb0>
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	3304      	adds	r3, #4
 8010d42:	e000      	b.n	8010d46 <tcp_output+0xb2>
 8010d44:	2300      	movs	r3, #0
 8010d46:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d102      	bne.n	8010d54 <tcp_output+0xc0>
      return ERR_RTE;
 8010d4e:	f06f 0303 	mvn.w	r3, #3
 8010d52:	e18e      	b.n	8011072 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f7 fb61 	bl	800842a <lwip_htonl>
 8010d68:	4602      	mov	r2, r0
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d72:	8912      	ldrh	r2, [r2, #8]
 8010d74:	4413      	add	r3, r2
 8010d76:	69ba      	ldr	r2, [r7, #24]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d227      	bcs.n	8010dcc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d82:	461a      	mov	r2, r3
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d114      	bne.n	8010db4 <tcp_output+0x120>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d110      	bne.n	8010db4 <tcp_output+0x120>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10b      	bne.n	8010db4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2201      	movs	r2, #1
 8010da8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	8b5b      	ldrh	r3, [r3, #26]
 8010db8:	f003 0302 	and.w	r3, r3, #2
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 814d 	beq.w	801105c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fd6c 	bl	80118a0 <tcp_send_empty_ack>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	e152      	b.n	8011072 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dd8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010dda:	6a3b      	ldr	r3, [r7, #32]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f000 811c 	beq.w	801101a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010de2:	e002      	b.n	8010dea <tcp_output+0x156>
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	623b      	str	r3, [r7, #32]
 8010dea:	6a3b      	ldr	r3, [r7, #32]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1f8      	bne.n	8010de4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010df2:	e112      	b.n	801101a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	899b      	ldrh	r3, [r3, #12]
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7f7 faff 	bl	8008400 <lwip_htons>
 8010e02:	4603      	mov	r3, r0
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	f003 0304 	and.w	r3, r3, #4
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d006      	beq.n	8010e1c <tcp_output+0x188>
 8010e0e:	4b2f      	ldr	r3, [pc, #188]	; (8010ecc <tcp_output+0x238>)
 8010e10:	f240 5236 	movw	r2, #1334	; 0x536
 8010e14:	4932      	ldr	r1, [pc, #200]	; (8010ee0 <tcp_output+0x24c>)
 8010e16:	482f      	ldr	r0, [pc, #188]	; (8010ed4 <tcp_output+0x240>)
 8010e18:	f001 fab6 	bl	8012388 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d01f      	beq.n	8010e64 <tcp_output+0x1d0>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	8b5b      	ldrh	r3, [r3, #26]
 8010e28:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d119      	bne.n	8010e64 <tcp_output+0x1d0>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00b      	beq.n	8010e50 <tcp_output+0x1bc>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d110      	bne.n	8010e64 <tcp_output+0x1d0>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e46:	891a      	ldrh	r2, [r3, #8]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d209      	bcs.n	8010e64 <tcp_output+0x1d0>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d004      	beq.n	8010e64 <tcp_output+0x1d0>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e60:	2b08      	cmp	r3, #8
 8010e62:	d901      	bls.n	8010e68 <tcp_output+0x1d4>
 8010e64:	2301      	movs	r3, #1
 8010e66:	e000      	b.n	8010e6a <tcp_output+0x1d6>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d106      	bne.n	8010e7c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8b5b      	ldrh	r3, [r3, #26]
 8010e72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f000 80e4 	beq.w	8011044 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	7d1b      	ldrb	r3, [r3, #20]
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	d00d      	beq.n	8010ea0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	899b      	ldrh	r3, [r3, #12]
 8010e8a:	b29c      	uxth	r4, r3
 8010e8c:	2010      	movs	r0, #16
 8010e8e:	f7f7 fab7 	bl	8008400 <lwip_htons>
 8010e92:	4603      	mov	r3, r0
 8010e94:	461a      	mov	r2, r3
 8010e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	4322      	orrs	r2, r4
 8010e9c:	b292      	uxth	r2, r2
 8010e9e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010ea0:	697a      	ldr	r2, [r7, #20]
 8010ea2:	6879      	ldr	r1, [r7, #4]
 8010ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ea6:	f000 f909 	bl	80110bc <tcp_output_segment>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d016      	beq.n	8010ee4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	8b5b      	ldrh	r3, [r3, #26]
 8010eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	835a      	strh	r2, [r3, #26]
      return err;
 8010ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ec8:	e0d3      	b.n	8011072 <tcp_output+0x3de>
 8010eca:	bf00      	nop
 8010ecc:	08015310 	.word	0x08015310
 8010ed0:	080158a4 	.word	0x080158a4
 8010ed4:	080153b4 	.word	0x080153b4
 8010ed8:	080158bc 	.word	0x080158bc
 8010edc:	24008274 	.word	0x24008274
 8010ee0:	080158e4 	.word	0x080158e4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	7d1b      	ldrb	r3, [r3, #20]
 8010ef0:	2b02      	cmp	r3, #2
 8010ef2:	d006      	beq.n	8010f02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	8b5b      	ldrh	r3, [r3, #26]
 8010ef8:	f023 0303 	bic.w	r3, r3, #3
 8010efc:	b29a      	uxth	r2, r3
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7f7 fa8e 	bl	800842a <lwip_htonl>
 8010f0e:	4604      	mov	r4, r0
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	891b      	ldrh	r3, [r3, #8]
 8010f14:	461d      	mov	r5, r3
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	899b      	ldrh	r3, [r3, #12]
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f7 fa6e 	bl	8008400 <lwip_htons>
 8010f24:	4603      	mov	r3, r0
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	f003 0303 	and.w	r3, r3, #3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d001      	beq.n	8010f34 <tcp_output+0x2a0>
 8010f30:	2301      	movs	r3, #1
 8010f32:	e000      	b.n	8010f36 <tcp_output+0x2a2>
 8010f34:	2300      	movs	r3, #0
 8010f36:	442b      	add	r3, r5
 8010f38:	4423      	add	r3, r4
 8010f3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	1ad3      	subs	r3, r2, r3
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	da02      	bge.n	8010f4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	891b      	ldrh	r3, [r3, #8]
 8010f52:	461c      	mov	r4, r3
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	899b      	ldrh	r3, [r3, #12]
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7f7 fa4f 	bl	8008400 <lwip_htons>
 8010f62:	4603      	mov	r3, r0
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	f003 0303 	and.w	r3, r3, #3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d001      	beq.n	8010f72 <tcp_output+0x2de>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	e000      	b.n	8010f74 <tcp_output+0x2e0>
 8010f72:	2300      	movs	r3, #0
 8010f74:	4423      	add	r3, r4
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d049      	beq.n	801100e <tcp_output+0x37a>
      seg->next = NULL;
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d105      	bne.n	8010f94 <tcp_output+0x300>
        pcb->unacked = seg;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f8c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f90:	623b      	str	r3, [r7, #32]
 8010f92:	e03f      	b.n	8011014 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7f7 fa45 	bl	800842a <lwip_htonl>
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f7 fa3e 	bl	800842a <lwip_htonl>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	1ae3      	subs	r3, r4, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	da24      	bge.n	8011000 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	3370      	adds	r3, #112	; 0x70
 8010fba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fbc:	e002      	b.n	8010fc4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d011      	beq.n	8010ff0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010fcc:	69fb      	ldr	r3, [r7, #28]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7f7 fa28 	bl	800842a <lwip_htonl>
 8010fda:	4604      	mov	r4, r0
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f7 fa21 	bl	800842a <lwip_htonl>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	dbe6      	blt.n	8010fbe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	e009      	b.n	8011014 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011004:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011006:	6a3b      	ldr	r3, [r7, #32]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	623b      	str	r3, [r7, #32]
 801100c:	e002      	b.n	8011014 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801100e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011010:	f7fc fc3f 	bl	800d892 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011018:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101c:	2b00      	cmp	r3, #0
 801101e:	d012      	beq.n	8011046 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	4618      	mov	r0, r3
 8011028:	f7f7 f9ff 	bl	800842a <lwip_htonl>
 801102c:	4602      	mov	r2, r0
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011032:	1ad3      	subs	r3, r2, r3
 8011034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011036:	8912      	ldrh	r2, [r2, #8]
 8011038:	4413      	add	r3, r2
  while (seg != NULL &&
 801103a:	69ba      	ldr	r2, [r7, #24]
 801103c:	429a      	cmp	r2, r3
 801103e:	f4bf aed9 	bcs.w	8010df4 <tcp_output+0x160>
 8011042:	e000      	b.n	8011046 <tcp_output+0x3b2>
      break;
 8011044:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801104a:	2b00      	cmp	r3, #0
 801104c:	d108      	bne.n	8011060 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011056:	e004      	b.n	8011062 <tcp_output+0x3ce>
    goto output_done;
 8011058:	bf00      	nop
 801105a:	e002      	b.n	8011062 <tcp_output+0x3ce>
    goto output_done;
 801105c:	bf00      	nop
 801105e:	e000      	b.n	8011062 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011060:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	8b5b      	ldrh	r3, [r3, #26]
 8011066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801106a:	b29a      	uxth	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011070:	2300      	movs	r3, #0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3728      	adds	r7, #40	; 0x28
 8011076:	46bd      	mov	sp, r7
 8011078:	bdb0      	pop	{r4, r5, r7, pc}
 801107a:	bf00      	nop

0801107c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <tcp_output_segment_busy+0x1c>
 801108a:	4b09      	ldr	r3, [pc, #36]	; (80110b0 <tcp_output_segment_busy+0x34>)
 801108c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011090:	4908      	ldr	r1, [pc, #32]	; (80110b4 <tcp_output_segment_busy+0x38>)
 8011092:	4809      	ldr	r0, [pc, #36]	; (80110b8 <tcp_output_segment_busy+0x3c>)
 8011094:	f001 f978 	bl	8012388 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	7b9b      	ldrb	r3, [r3, #14]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d001      	beq.n	80110a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80110a2:	2301      	movs	r3, #1
 80110a4:	e000      	b.n	80110a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	08015310 	.word	0x08015310
 80110b4:	080158fc 	.word	0x080158fc
 80110b8:	080153b4 	.word	0x080153b4

080110bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80110bc:	b5b0      	push	{r4, r5, r7, lr}
 80110be:	b08c      	sub	sp, #48	; 0x30
 80110c0:	af04      	add	r7, sp, #16
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d106      	bne.n	80110dc <tcp_output_segment+0x20>
 80110ce:	4b64      	ldr	r3, [pc, #400]	; (8011260 <tcp_output_segment+0x1a4>)
 80110d0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80110d4:	4963      	ldr	r1, [pc, #396]	; (8011264 <tcp_output_segment+0x1a8>)
 80110d6:	4864      	ldr	r0, [pc, #400]	; (8011268 <tcp_output_segment+0x1ac>)
 80110d8:	f001 f956 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <tcp_output_segment+0x34>
 80110e2:	4b5f      	ldr	r3, [pc, #380]	; (8011260 <tcp_output_segment+0x1a4>)
 80110e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80110e8:	4960      	ldr	r1, [pc, #384]	; (801126c <tcp_output_segment+0x1b0>)
 80110ea:	485f      	ldr	r0, [pc, #380]	; (8011268 <tcp_output_segment+0x1ac>)
 80110ec:	f001 f94c 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d106      	bne.n	8011104 <tcp_output_segment+0x48>
 80110f6:	4b5a      	ldr	r3, [pc, #360]	; (8011260 <tcp_output_segment+0x1a4>)
 80110f8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80110fc:	495c      	ldr	r1, [pc, #368]	; (8011270 <tcp_output_segment+0x1b4>)
 80110fe:	485a      	ldr	r0, [pc, #360]	; (8011268 <tcp_output_segment+0x1ac>)
 8011100:	f001 f942 	bl	8012388 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7ff ffb9 	bl	801107c <tcp_output_segment_busy>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011110:	2300      	movs	r3, #0
 8011112:	e0a1      	b.n	8011258 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	68dc      	ldr	r4, [r3, #12]
 801111c:	4610      	mov	r0, r2
 801111e:	f7f7 f984 	bl	800842a <lwip_htonl>
 8011122:	4603      	mov	r3, r0
 8011124:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	68dc      	ldr	r4, [r3, #12]
 801112e:	4610      	mov	r0, r2
 8011130:	f7f7 f966 	bl	8008400 <lwip_htons>
 8011134:	4603      	mov	r3, r0
 8011136:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113c:	68ba      	ldr	r2, [r7, #8]
 801113e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011140:	441a      	add	r2, r3
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	3314      	adds	r3, #20
 801114c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	7a9b      	ldrb	r3, [r3, #10]
 8011152:	f003 0301 	and.w	r3, r3, #1
 8011156:	2b00      	cmp	r3, #0
 8011158:	d015      	beq.n	8011186 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	3304      	adds	r3, #4
 801115e:	461a      	mov	r2, r3
 8011160:	6879      	ldr	r1, [r7, #4]
 8011162:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011166:	f7fc fe8b 	bl	800de80 <tcp_eff_send_mss_netif>
 801116a:	4603      	mov	r3, r0
 801116c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801116e:	8b7b      	ldrh	r3, [r7, #26]
 8011170:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011174:	4618      	mov	r0, r3
 8011176:	f7f7 f958 	bl	800842a <lwip_htonl>
 801117a:	4602      	mov	r2, r0
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	3304      	adds	r3, #4
 8011184:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801118c:	2b00      	cmp	r3, #0
 801118e:	da02      	bge.n	8011196 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	2200      	movs	r2, #0
 8011194:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10c      	bne.n	80111b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801119e:	4b35      	ldr	r3, [pc, #212]	; (8011274 <tcp_output_segment+0x1b8>)
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7f7 f93c 	bl	800842a <lwip_htonl>
 80111b2:	4602      	mov	r2, r0
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	68da      	ldr	r2, [r3, #12]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	8959      	ldrh	r1, [r3, #10]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	8b3a      	ldrh	r2, [r7, #24]
 80111d2:	1a8a      	subs	r2, r1, r2
 80111d4:	b292      	uxth	r2, r2
 80111d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	8919      	ldrh	r1, [r3, #8]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	8b3a      	ldrh	r2, [r7, #24]
 80111e4:	1a8a      	subs	r2, r1, r2
 80111e6:	b292      	uxth	r2, r2
 80111e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	68fa      	ldr	r2, [r7, #12]
 80111f0:	68d2      	ldr	r2, [r2, #12]
 80111f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	2200      	movs	r2, #0
 80111fa:	741a      	strb	r2, [r3, #16]
 80111fc:	2200      	movs	r2, #0
 80111fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	68da      	ldr	r2, [r3, #12]
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	7a9b      	ldrb	r3, [r3, #10]
 8011208:	f003 0301 	and.w	r3, r3, #1
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <tcp_output_segment+0x158>
 8011210:	2318      	movs	r3, #24
 8011212:	e000      	b.n	8011216 <tcp_output_segment+0x15a>
 8011214:	2314      	movs	r3, #20
 8011216:	4413      	add	r3, r2
 8011218:	69fa      	ldr	r2, [r7, #28]
 801121a:	429a      	cmp	r2, r3
 801121c:	d006      	beq.n	801122c <tcp_output_segment+0x170>
 801121e:	4b10      	ldr	r3, [pc, #64]	; (8011260 <tcp_output_segment+0x1a4>)
 8011220:	f240 621c 	movw	r2, #1564	; 0x61c
 8011224:	4914      	ldr	r1, [pc, #80]	; (8011278 <tcp_output_segment+0x1bc>)
 8011226:	4810      	ldr	r0, [pc, #64]	; (8011268 <tcp_output_segment+0x1ac>)
 8011228:	f001 f8ae 	bl	8012388 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6858      	ldr	r0, [r3, #4]
 8011230:	68b9      	ldr	r1, [r7, #8]
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	1d1c      	adds	r4, r3, #4
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	7add      	ldrb	r5, [r3, #11]
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	7a9b      	ldrb	r3, [r3, #10]
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	9202      	str	r2, [sp, #8]
 8011242:	2206      	movs	r2, #6
 8011244:	9201      	str	r2, [sp, #4]
 8011246:	9300      	str	r3, [sp, #0]
 8011248:	462b      	mov	r3, r5
 801124a:	4622      	mov	r2, r4
 801124c:	f7f8 fd6c 	bl	8009d28 <ip4_output_if>
 8011250:	4603      	mov	r3, r0
 8011252:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3720      	adds	r7, #32
 801125c:	46bd      	mov	sp, r7
 801125e:	bdb0      	pop	{r4, r5, r7, pc}
 8011260:	08015310 	.word	0x08015310
 8011264:	08015924 	.word	0x08015924
 8011268:	080153b4 	.word	0x080153b4
 801126c:	08015944 	.word	0x08015944
 8011270:	08015964 	.word	0x08015964
 8011274:	24008228 	.word	0x24008228
 8011278:	08015988 	.word	0x08015988

0801127c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801127c:	b5b0      	push	{r4, r5, r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <tcp_rexmit_rto_prepare+0x1c>
 801128a:	4b31      	ldr	r3, [pc, #196]	; (8011350 <tcp_rexmit_rto_prepare+0xd4>)
 801128c:	f240 6263 	movw	r2, #1635	; 0x663
 8011290:	4930      	ldr	r1, [pc, #192]	; (8011354 <tcp_rexmit_rto_prepare+0xd8>)
 8011292:	4831      	ldr	r0, [pc, #196]	; (8011358 <tcp_rexmit_rto_prepare+0xdc>)
 8011294:	f001 f878 	bl	8012388 <iprintf>

  if (pcb->unacked == NULL) {
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80112a0:	f06f 0305 	mvn.w	r3, #5
 80112a4:	e050      	b.n	8011348 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112aa:	60fb      	str	r3, [r7, #12]
 80112ac:	e00b      	b.n	80112c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80112ae:	68f8      	ldr	r0, [r7, #12]
 80112b0:	f7ff fee4 	bl	801107c <tcp_output_segment_busy>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d002      	beq.n	80112c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80112ba:	f06f 0305 	mvn.w	r3, #5
 80112be:	e043      	b.n	8011348 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d1ef      	bne.n	80112ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80112ce:	68f8      	ldr	r0, [r7, #12]
 80112d0:	f7ff fed4 	bl	801107c <tcp_output_segment_busy>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80112da:	f06f 0305 	mvn.w	r3, #5
 80112de:	e033      	b.n	8011348 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	8b5b      	ldrh	r3, [r3, #26]
 80112fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80112fe:	b29a      	uxth	r2, r3
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	4618      	mov	r0, r3
 801130c:	f7f7 f88d 	bl	800842a <lwip_htonl>
 8011310:	4604      	mov	r4, r0
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	891b      	ldrh	r3, [r3, #8]
 8011316:	461d      	mov	r5, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	899b      	ldrh	r3, [r3, #12]
 801131e:	b29b      	uxth	r3, r3
 8011320:	4618      	mov	r0, r3
 8011322:	f7f7 f86d 	bl	8008400 <lwip_htons>
 8011326:	4603      	mov	r3, r0
 8011328:	b2db      	uxtb	r3, r3
 801132a:	f003 0303 	and.w	r3, r3, #3
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <tcp_rexmit_rto_prepare+0xba>
 8011332:	2301      	movs	r3, #1
 8011334:	e000      	b.n	8011338 <tcp_rexmit_rto_prepare+0xbc>
 8011336:	2300      	movs	r3, #0
 8011338:	442b      	add	r3, r5
 801133a:	18e2      	adds	r2, r4, r3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2200      	movs	r2, #0
 8011344:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011346:	2300      	movs	r3, #0
}
 8011348:	4618      	mov	r0, r3
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bdb0      	pop	{r4, r5, r7, pc}
 8011350:	08015310 	.word	0x08015310
 8011354:	0801599c 	.word	0x0801599c
 8011358:	080153b4 	.word	0x080153b4

0801135c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d106      	bne.n	8011378 <tcp_rexmit_rto_commit+0x1c>
 801136a:	4b0d      	ldr	r3, [pc, #52]	; (80113a0 <tcp_rexmit_rto_commit+0x44>)
 801136c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011370:	490c      	ldr	r1, [pc, #48]	; (80113a4 <tcp_rexmit_rto_commit+0x48>)
 8011372:	480d      	ldr	r0, [pc, #52]	; (80113a8 <tcp_rexmit_rto_commit+0x4c>)
 8011374:	f001 f808 	bl	8012388 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801137e:	2bff      	cmp	r3, #255	; 0xff
 8011380:	d007      	beq.n	8011392 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011388:	3301      	adds	r3, #1
 801138a:	b2da      	uxtb	r2, r3
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7ff fc7e 	bl	8010c94 <tcp_output>
}
 8011398:	bf00      	nop
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	08015310 	.word	0x08015310
 80113a4:	080159c0 	.word	0x080159c0
 80113a8:	080153b4 	.word	0x080153b4

080113ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <tcp_rexmit_rto+0x1c>
 80113ba:	4b0a      	ldr	r3, [pc, #40]	; (80113e4 <tcp_rexmit_rto+0x38>)
 80113bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80113c0:	4909      	ldr	r1, [pc, #36]	; (80113e8 <tcp_rexmit_rto+0x3c>)
 80113c2:	480a      	ldr	r0, [pc, #40]	; (80113ec <tcp_rexmit_rto+0x40>)
 80113c4:	f000 ffe0 	bl	8012388 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff ff57 	bl	801127c <tcp_rexmit_rto_prepare>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d102      	bne.n	80113da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff ffc1 	bl	801135c <tcp_rexmit_rto_commit>
  }
}
 80113da:	bf00      	nop
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	08015310 	.word	0x08015310
 80113e8:	080159e4 	.word	0x080159e4
 80113ec:	080153b4 	.word	0x080153b4

080113f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80113f0:	b590      	push	{r4, r7, lr}
 80113f2:	b085      	sub	sp, #20
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <tcp_rexmit+0x1c>
 80113fe:	4b2f      	ldr	r3, [pc, #188]	; (80114bc <tcp_rexmit+0xcc>)
 8011400:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011404:	492e      	ldr	r1, [pc, #184]	; (80114c0 <tcp_rexmit+0xd0>)
 8011406:	482f      	ldr	r0, [pc, #188]	; (80114c4 <tcp_rexmit+0xd4>)
 8011408:	f000 ffbe 	bl	8012388 <iprintf>

  if (pcb->unacked == NULL) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011410:	2b00      	cmp	r3, #0
 8011412:	d102      	bne.n	801141a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011414:	f06f 0305 	mvn.w	r3, #5
 8011418:	e04c      	b.n	80114b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801141e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011420:	68b8      	ldr	r0, [r7, #8]
 8011422:	f7ff fe2b 	bl	801107c <tcp_output_segment_busy>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d002      	beq.n	8011432 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801142c:	f06f 0305 	mvn.w	r3, #5
 8011430:	e040      	b.n	80114b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	336c      	adds	r3, #108	; 0x6c
 801143e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011440:	e002      	b.n	8011448 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d011      	beq.n	8011474 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4618      	mov	r0, r3
 801145a:	f7f6 ffe6 	bl	800842a <lwip_htonl>
 801145e:	4604      	mov	r4, r0
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	4618      	mov	r0, r3
 8011468:	f7f6 ffdf 	bl	800842a <lwip_htonl>
 801146c:	4603      	mov	r3, r0
 801146e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011470:	2b00      	cmp	r3, #0
 8011472:	dbe6      	blt.n	8011442 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	68ba      	ldr	r2, [r7, #8]
 8011480:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d103      	bne.n	8011492 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011498:	2bff      	cmp	r3, #255	; 0xff
 801149a:	d007      	beq.n	80114ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114a2:	3301      	adds	r3, #1
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2200      	movs	r2, #0
 80114b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3714      	adds	r7, #20
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd90      	pop	{r4, r7, pc}
 80114bc:	08015310 	.word	0x08015310
 80114c0:	08015a00 	.word	0x08015a00
 80114c4:	080153b4 	.word	0x080153b4

080114c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d106      	bne.n	80114e4 <tcp_rexmit_fast+0x1c>
 80114d6:	4b2a      	ldr	r3, [pc, #168]	; (8011580 <tcp_rexmit_fast+0xb8>)
 80114d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80114dc:	4929      	ldr	r1, [pc, #164]	; (8011584 <tcp_rexmit_fast+0xbc>)
 80114de:	482a      	ldr	r0, [pc, #168]	; (8011588 <tcp_rexmit_fast+0xc0>)
 80114e0:	f000 ff52 	bl	8012388 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d045      	beq.n	8011578 <tcp_rexmit_fast+0xb0>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	8b5b      	ldrh	r3, [r3, #26]
 80114f0:	f003 0304 	and.w	r3, r3, #4
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d13f      	bne.n	8011578 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7ff ff79 	bl	80113f0 <tcp_rexmit>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	d139      	bne.n	8011578 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011510:	4293      	cmp	r3, r2
 8011512:	bf28      	it	cs
 8011514:	4613      	movcs	r3, r2
 8011516:	b29b      	uxth	r3, r3
 8011518:	2b00      	cmp	r3, #0
 801151a:	da00      	bge.n	801151e <tcp_rexmit_fast+0x56>
 801151c:	3301      	adds	r3, #1
 801151e:	105b      	asrs	r3, r3, #1
 8011520:	b29a      	uxth	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801152e:	461a      	mov	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011534:	005b      	lsls	r3, r3, #1
 8011536:	429a      	cmp	r2, r3
 8011538:	d206      	bcs.n	8011548 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801153e:	005b      	lsls	r3, r3, #1
 8011540:	b29a      	uxth	r2, r3
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011552:	4619      	mov	r1, r3
 8011554:	0049      	lsls	r1, r1, #1
 8011556:	440b      	add	r3, r1
 8011558:	b29b      	uxth	r3, r3
 801155a:	4413      	add	r3, r2
 801155c:	b29a      	uxth	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	8b5b      	ldrh	r3, [r3, #26]
 8011568:	f043 0304 	orr.w	r3, r3, #4
 801156c:	b29a      	uxth	r2, r3
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011578:	bf00      	nop
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	08015310 	.word	0x08015310
 8011584:	08015a18 	.word	0x08015a18
 8011588:	080153b4 	.word	0x080153b4

0801158c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	607b      	str	r3, [r7, #4]
 8011596:	460b      	mov	r3, r1
 8011598:	817b      	strh	r3, [r7, #10]
 801159a:	4613      	mov	r3, r2
 801159c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801159e:	897a      	ldrh	r2, [r7, #10]
 80115a0:	893b      	ldrh	r3, [r7, #8]
 80115a2:	4413      	add	r3, r2
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	3314      	adds	r3, #20
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115ae:	4619      	mov	r1, r3
 80115b0:	2022      	movs	r0, #34	; 0x22
 80115b2:	f7fa fc17 	bl	800bde4 <pbuf_alloc>
 80115b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d04d      	beq.n	801165a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80115be:	897b      	ldrh	r3, [r7, #10]
 80115c0:	3313      	adds	r3, #19
 80115c2:	697a      	ldr	r2, [r7, #20]
 80115c4:	8952      	ldrh	r2, [r2, #10]
 80115c6:	4293      	cmp	r3, r2
 80115c8:	db06      	blt.n	80115d8 <tcp_output_alloc_header_common+0x4c>
 80115ca:	4b26      	ldr	r3, [pc, #152]	; (8011664 <tcp_output_alloc_header_common+0xd8>)
 80115cc:	f240 7223 	movw	r2, #1827	; 0x723
 80115d0:	4925      	ldr	r1, [pc, #148]	; (8011668 <tcp_output_alloc_header_common+0xdc>)
 80115d2:	4826      	ldr	r0, [pc, #152]	; (801166c <tcp_output_alloc_header_common+0xe0>)
 80115d4:	f000 fed8 	bl	8012388 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80115de:	8c3b      	ldrh	r3, [r7, #32]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7f6 ff0d 	bl	8008400 <lwip_htons>
 80115e6:	4603      	mov	r3, r0
 80115e8:	461a      	mov	r2, r3
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80115ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7f6 ff05 	bl	8008400 <lwip_htons>
 80115f6:	4603      	mov	r3, r0
 80115f8:	461a      	mov	r2, r3
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f7f6 ff10 	bl	800842a <lwip_htonl>
 801160a:	4602      	mov	r2, r0
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011610:	897b      	ldrh	r3, [r7, #10]
 8011612:	089b      	lsrs	r3, r3, #2
 8011614:	b29b      	uxth	r3, r3
 8011616:	3305      	adds	r3, #5
 8011618:	b29b      	uxth	r3, r3
 801161a:	031b      	lsls	r3, r3, #12
 801161c:	b29a      	uxth	r2, r3
 801161e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011622:	b29b      	uxth	r3, r3
 8011624:	4313      	orrs	r3, r2
 8011626:	b29b      	uxth	r3, r3
 8011628:	4618      	mov	r0, r3
 801162a:	f7f6 fee9 	bl	8008400 <lwip_htons>
 801162e:	4603      	mov	r3, r0
 8011630:	461a      	mov	r2, r3
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011638:	4618      	mov	r0, r3
 801163a:	f7f6 fee1 	bl	8008400 <lwip_htons>
 801163e:	4603      	mov	r3, r0
 8011640:	461a      	mov	r2, r3
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	2200      	movs	r2, #0
 801164a:	741a      	strb	r2, [r3, #16]
 801164c:	2200      	movs	r2, #0
 801164e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	2200      	movs	r2, #0
 8011654:	749a      	strb	r2, [r3, #18]
 8011656:	2200      	movs	r2, #0
 8011658:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801165a:	697b      	ldr	r3, [r7, #20]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3718      	adds	r7, #24
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	08015310 	.word	0x08015310
 8011668:	08015a38 	.word	0x08015a38
 801166c:	080153b4 	.word	0x080153b4

08011670 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011670:	b5b0      	push	{r4, r5, r7, lr}
 8011672:	b08a      	sub	sp, #40	; 0x28
 8011674:	af04      	add	r7, sp, #16
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	607b      	str	r3, [r7, #4]
 801167a:	460b      	mov	r3, r1
 801167c:	817b      	strh	r3, [r7, #10]
 801167e:	4613      	mov	r3, r2
 8011680:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d106      	bne.n	8011696 <tcp_output_alloc_header+0x26>
 8011688:	4b15      	ldr	r3, [pc, #84]	; (80116e0 <tcp_output_alloc_header+0x70>)
 801168a:	f240 7242 	movw	r2, #1858	; 0x742
 801168e:	4915      	ldr	r1, [pc, #84]	; (80116e4 <tcp_output_alloc_header+0x74>)
 8011690:	4815      	ldr	r0, [pc, #84]	; (80116e8 <tcp_output_alloc_header+0x78>)
 8011692:	f000 fe79 	bl	8012388 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	8adb      	ldrh	r3, [r3, #22]
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	8b12      	ldrh	r2, [r2, #24]
 80116a2:	68f9      	ldr	r1, [r7, #12]
 80116a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80116a6:	893d      	ldrh	r5, [r7, #8]
 80116a8:	897c      	ldrh	r4, [r7, #10]
 80116aa:	9103      	str	r1, [sp, #12]
 80116ac:	2110      	movs	r1, #16
 80116ae:	9102      	str	r1, [sp, #8]
 80116b0:	9201      	str	r2, [sp, #4]
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	462a      	mov	r2, r5
 80116b8:	4621      	mov	r1, r4
 80116ba:	f7ff ff67 	bl	801158c <tcp_output_alloc_header_common>
 80116be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d006      	beq.n	80116d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116ce:	441a      	add	r2, r3
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80116d4:	697b      	ldr	r3, [r7, #20]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3718      	adds	r7, #24
 80116da:	46bd      	mov	sp, r7
 80116dc:	bdb0      	pop	{r4, r5, r7, pc}
 80116de:	bf00      	nop
 80116e0:	08015310 	.word	0x08015310
 80116e4:	08015a68 	.word	0x08015a68
 80116e8:	080153b4 	.word	0x080153b4

080116ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b088      	sub	sp, #32
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	60b9      	str	r1, [r7, #8]
 80116f6:	4611      	mov	r1, r2
 80116f8:	461a      	mov	r2, r3
 80116fa:	460b      	mov	r3, r1
 80116fc:	71fb      	strb	r3, [r7, #7]
 80116fe:	4613      	mov	r3, r2
 8011700:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011702:	2300      	movs	r3, #0
 8011704:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d106      	bne.n	801171a <tcp_output_fill_options+0x2e>
 801170c:	4b12      	ldr	r3, [pc, #72]	; (8011758 <tcp_output_fill_options+0x6c>)
 801170e:	f240 7256 	movw	r2, #1878	; 0x756
 8011712:	4912      	ldr	r1, [pc, #72]	; (801175c <tcp_output_fill_options+0x70>)
 8011714:	4812      	ldr	r0, [pc, #72]	; (8011760 <tcp_output_fill_options+0x74>)
 8011716:	f000 fe37 	bl	8012388 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	3314      	adds	r3, #20
 8011724:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011726:	8bfb      	ldrh	r3, [r7, #30]
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	461a      	mov	r2, r3
 801172c:	79fb      	ldrb	r3, [r7, #7]
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	f003 0304 	and.w	r3, r3, #4
 8011734:	4413      	add	r3, r2
 8011736:	3314      	adds	r3, #20
 8011738:	69ba      	ldr	r2, [r7, #24]
 801173a:	4413      	add	r3, r2
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	429a      	cmp	r2, r3
 8011740:	d006      	beq.n	8011750 <tcp_output_fill_options+0x64>
 8011742:	4b05      	ldr	r3, [pc, #20]	; (8011758 <tcp_output_fill_options+0x6c>)
 8011744:	f240 7275 	movw	r2, #1909	; 0x775
 8011748:	4906      	ldr	r1, [pc, #24]	; (8011764 <tcp_output_fill_options+0x78>)
 801174a:	4805      	ldr	r0, [pc, #20]	; (8011760 <tcp_output_fill_options+0x74>)
 801174c:	f000 fe1c 	bl	8012388 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011750:	bf00      	nop
 8011752:	3720      	adds	r7, #32
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	08015310 	.word	0x08015310
 801175c:	08015a90 	.word	0x08015a90
 8011760:	080153b4 	.word	0x080153b4
 8011764:	08015988 	.word	0x08015988

08011768 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b08a      	sub	sp, #40	; 0x28
 801176c:	af04      	add	r7, sp, #16
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
 8011774:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d106      	bne.n	801178a <tcp_output_control_segment+0x22>
 801177c:	4b1c      	ldr	r3, [pc, #112]	; (80117f0 <tcp_output_control_segment+0x88>)
 801177e:	f240 7287 	movw	r2, #1927	; 0x787
 8011782:	491c      	ldr	r1, [pc, #112]	; (80117f4 <tcp_output_control_segment+0x8c>)
 8011784:	481c      	ldr	r0, [pc, #112]	; (80117f8 <tcp_output_control_segment+0x90>)
 8011786:	f000 fdff 	bl	8012388 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801178a:	683a      	ldr	r2, [r7, #0]
 801178c:	6879      	ldr	r1, [r7, #4]
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f7fe ff40 	bl	8010614 <tcp_route>
 8011794:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801179c:	23fc      	movs	r3, #252	; 0xfc
 801179e:	75fb      	strb	r3, [r7, #23]
 80117a0:	e01c      	b.n	80117dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d006      	beq.n	80117b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	7adb      	ldrb	r3, [r3, #11]
 80117ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	7a9b      	ldrb	r3, [r3, #10]
 80117b2:	757b      	strb	r3, [r7, #21]
 80117b4:	e003      	b.n	80117be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80117b6:	23ff      	movs	r3, #255	; 0xff
 80117b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80117ba:	2300      	movs	r3, #0
 80117bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80117be:	7dba      	ldrb	r2, [r7, #22]
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	9302      	str	r3, [sp, #8]
 80117c4:	2306      	movs	r3, #6
 80117c6:	9301      	str	r3, [sp, #4]
 80117c8:	7d7b      	ldrb	r3, [r7, #21]
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	4613      	mov	r3, r2
 80117ce:	683a      	ldr	r2, [r7, #0]
 80117d0:	6879      	ldr	r1, [r7, #4]
 80117d2:	68b8      	ldr	r0, [r7, #8]
 80117d4:	f7f8 faa8 	bl	8009d28 <ip4_output_if>
 80117d8:	4603      	mov	r3, r0
 80117da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80117dc:	68b8      	ldr	r0, [r7, #8]
 80117de:	f7fa fde5 	bl	800c3ac <pbuf_free>
  return err;
 80117e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3718      	adds	r7, #24
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
 80117ee:	bf00      	nop
 80117f0:	08015310 	.word	0x08015310
 80117f4:	08015ab8 	.word	0x08015ab8
 80117f8:	080153b4 	.word	0x080153b4

080117fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80117fc:	b590      	push	{r4, r7, lr}
 80117fe:	b08b      	sub	sp, #44	; 0x2c
 8011800:	af04      	add	r7, sp, #16
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	607a      	str	r2, [r7, #4]
 8011808:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d106      	bne.n	801181e <tcp_rst+0x22>
 8011810:	4b1f      	ldr	r3, [pc, #124]	; (8011890 <tcp_rst+0x94>)
 8011812:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011816:	491f      	ldr	r1, [pc, #124]	; (8011894 <tcp_rst+0x98>)
 8011818:	481f      	ldr	r0, [pc, #124]	; (8011898 <tcp_rst+0x9c>)
 801181a:	f000 fdb5 	bl	8012388 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011820:	2b00      	cmp	r3, #0
 8011822:	d106      	bne.n	8011832 <tcp_rst+0x36>
 8011824:	4b1a      	ldr	r3, [pc, #104]	; (8011890 <tcp_rst+0x94>)
 8011826:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801182a:	491c      	ldr	r1, [pc, #112]	; (801189c <tcp_rst+0xa0>)
 801182c:	481a      	ldr	r0, [pc, #104]	; (8011898 <tcp_rst+0x9c>)
 801182e:	f000 fdab 	bl	8012388 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011832:	2300      	movs	r3, #0
 8011834:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011836:	f246 0308 	movw	r3, #24584	; 0x6008
 801183a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801183c:	7dfb      	ldrb	r3, [r7, #23]
 801183e:	b29c      	uxth	r4, r3
 8011840:	68b8      	ldr	r0, [r7, #8]
 8011842:	f7f6 fdf2 	bl	800842a <lwip_htonl>
 8011846:	4602      	mov	r2, r0
 8011848:	8abb      	ldrh	r3, [r7, #20]
 801184a:	9303      	str	r3, [sp, #12]
 801184c:	2314      	movs	r3, #20
 801184e:	9302      	str	r3, [sp, #8]
 8011850:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011852:	9301      	str	r3, [sp, #4]
 8011854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	4613      	mov	r3, r2
 801185a:	2200      	movs	r2, #0
 801185c:	4621      	mov	r1, r4
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f7ff fe94 	bl	801158c <tcp_output_alloc_header_common>
 8011864:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00c      	beq.n	8011886 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801186c:	7dfb      	ldrb	r3, [r7, #23]
 801186e:	2200      	movs	r2, #0
 8011870:	6939      	ldr	r1, [r7, #16]
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f7ff ff3a 	bl	80116ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187a:	683a      	ldr	r2, [r7, #0]
 801187c:	6939      	ldr	r1, [r7, #16]
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7ff ff72 	bl	8011768 <tcp_output_control_segment>
 8011884:	e000      	b.n	8011888 <tcp_rst+0x8c>
    return;
 8011886:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011888:	371c      	adds	r7, #28
 801188a:	46bd      	mov	sp, r7
 801188c:	bd90      	pop	{r4, r7, pc}
 801188e:	bf00      	nop
 8011890:	08015310 	.word	0x08015310
 8011894:	08015ae4 	.word	0x08015ae4
 8011898:	080153b4 	.word	0x080153b4
 801189c:	08015b00 	.word	0x08015b00

080118a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80118a0:	b590      	push	{r4, r7, lr}
 80118a2:	b087      	sub	sp, #28
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80118a8:	2300      	movs	r3, #0
 80118aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80118ac:	2300      	movs	r3, #0
 80118ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <tcp_send_empty_ack+0x24>
 80118b6:	4b28      	ldr	r3, [pc, #160]	; (8011958 <tcp_send_empty_ack+0xb8>)
 80118b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80118bc:	4927      	ldr	r1, [pc, #156]	; (801195c <tcp_send_empty_ack+0xbc>)
 80118be:	4828      	ldr	r0, [pc, #160]	; (8011960 <tcp_send_empty_ack+0xc0>)
 80118c0:	f000 fd62 	bl	8012388 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118c4:	7dfb      	ldrb	r3, [r7, #23]
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	f003 0304 	and.w	r3, r3, #4
 80118ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80118d0:	7d7b      	ldrb	r3, [r7, #21]
 80118d2:	b29c      	uxth	r4, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118d8:	4618      	mov	r0, r3
 80118da:	f7f6 fda6 	bl	800842a <lwip_htonl>
 80118de:	4603      	mov	r3, r0
 80118e0:	2200      	movs	r2, #0
 80118e2:	4621      	mov	r1, r4
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7ff fec3 	bl	8011670 <tcp_output_alloc_header>
 80118ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d109      	bne.n	8011906 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	8b5b      	ldrh	r3, [r3, #26]
 80118f6:	f043 0303 	orr.w	r3, r3, #3
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011900:	f06f 0301 	mvn.w	r3, #1
 8011904:	e023      	b.n	801194e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011906:	7dbb      	ldrb	r3, [r7, #22]
 8011908:	7dfa      	ldrb	r2, [r7, #23]
 801190a:	6939      	ldr	r1, [r7, #16]
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7ff feed 	bl	80116ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	3304      	adds	r3, #4
 8011918:	6939      	ldr	r1, [r7, #16]
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff ff24 	bl	8011768 <tcp_output_control_segment>
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d007      	beq.n	801193c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	8b5b      	ldrh	r3, [r3, #26]
 8011930:	f043 0303 	orr.w	r3, r3, #3
 8011934:	b29a      	uxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	835a      	strh	r2, [r3, #26]
 801193a:	e006      	b.n	801194a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	8b5b      	ldrh	r3, [r3, #26]
 8011940:	f023 0303 	bic.w	r3, r3, #3
 8011944:	b29a      	uxth	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801194e:	4618      	mov	r0, r3
 8011950:	371c      	adds	r7, #28
 8011952:	46bd      	mov	sp, r7
 8011954:	bd90      	pop	{r4, r7, pc}
 8011956:	bf00      	nop
 8011958:	08015310 	.word	0x08015310
 801195c:	08015b1c 	.word	0x08015b1c
 8011960:	080153b4 	.word	0x080153b4

08011964 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011964:	b590      	push	{r4, r7, lr}
 8011966:	b087      	sub	sp, #28
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801196c:	2300      	movs	r3, #0
 801196e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d106      	bne.n	8011984 <tcp_keepalive+0x20>
 8011976:	4b18      	ldr	r3, [pc, #96]	; (80119d8 <tcp_keepalive+0x74>)
 8011978:	f640 0224 	movw	r2, #2084	; 0x824
 801197c:	4917      	ldr	r1, [pc, #92]	; (80119dc <tcp_keepalive+0x78>)
 801197e:	4818      	ldr	r0, [pc, #96]	; (80119e0 <tcp_keepalive+0x7c>)
 8011980:	f000 fd02 	bl	8012388 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011984:	7dfb      	ldrb	r3, [r7, #23]
 8011986:	b29c      	uxth	r4, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801198c:	3b01      	subs	r3, #1
 801198e:	4618      	mov	r0, r3
 8011990:	f7f6 fd4b 	bl	800842a <lwip_htonl>
 8011994:	4603      	mov	r3, r0
 8011996:	2200      	movs	r2, #0
 8011998:	4621      	mov	r1, r4
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f7ff fe68 	bl	8011670 <tcp_output_alloc_header>
 80119a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d102      	bne.n	80119ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80119a8:	f04f 33ff 	mov.w	r3, #4294967295
 80119ac:	e010      	b.n	80119d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119ae:	7dfb      	ldrb	r3, [r7, #23]
 80119b0:	2200      	movs	r2, #0
 80119b2:	6939      	ldr	r1, [r7, #16]
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7ff fe99 	bl	80116ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	3304      	adds	r3, #4
 80119c0:	6939      	ldr	r1, [r7, #16]
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7ff fed0 	bl	8011768 <tcp_output_control_segment>
 80119c8:	4603      	mov	r3, r0
 80119ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80119cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	371c      	adds	r7, #28
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd90      	pop	{r4, r7, pc}
 80119d8:	08015310 	.word	0x08015310
 80119dc:	08015b3c 	.word	0x08015b3c
 80119e0:	080153b4 	.word	0x080153b4

080119e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80119e4:	b590      	push	{r4, r7, lr}
 80119e6:	b08b      	sub	sp, #44	; 0x2c
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119ec:	2300      	movs	r3, #0
 80119ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d106      	bne.n	8011a06 <tcp_zero_window_probe+0x22>
 80119f8:	4b4c      	ldr	r3, [pc, #304]	; (8011b2c <tcp_zero_window_probe+0x148>)
 80119fa:	f640 024f 	movw	r2, #2127	; 0x84f
 80119fe:	494c      	ldr	r1, [pc, #304]	; (8011b30 <tcp_zero_window_probe+0x14c>)
 8011a00:	484c      	ldr	r0, [pc, #304]	; (8011b34 <tcp_zero_window_probe+0x150>)
 8011a02:	f000 fcc1 	bl	8012388 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a0a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011a0c:	6a3b      	ldr	r3, [r7, #32]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d101      	bne.n	8011a16 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011a12:	2300      	movs	r3, #0
 8011a14:	e086      	b.n	8011b24 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a1c:	2bff      	cmp	r3, #255	; 0xff
 8011a1e:	d007      	beq.n	8011a30 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a26:	3301      	adds	r3, #1
 8011a28:	b2da      	uxtb	r2, r3
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011a30:	6a3b      	ldr	r3, [r7, #32]
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	899b      	ldrh	r3, [r3, #12]
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7f6 fce1 	bl	8008400 <lwip_htons>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	f003 0301 	and.w	r3, r3, #1
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d005      	beq.n	8011a56 <tcp_zero_window_probe+0x72>
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	891b      	ldrh	r3, [r3, #8]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d101      	bne.n	8011a56 <tcp_zero_window_probe+0x72>
 8011a52:	2301      	movs	r3, #1
 8011a54:	e000      	b.n	8011a58 <tcp_zero_window_probe+0x74>
 8011a56:	2300      	movs	r3, #0
 8011a58:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011a5a:	7ffb      	ldrb	r3, [r7, #31]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	bf0c      	ite	eq
 8011a60:	2301      	moveq	r3, #1
 8011a62:	2300      	movne	r3, #0
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a6c:	b299      	uxth	r1, r3
 8011a6e:	6a3b      	ldr	r3, [r7, #32]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	8bba      	ldrh	r2, [r7, #28]
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7ff fdfa 	bl	8011670 <tcp_output_alloc_header>
 8011a7c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d102      	bne.n	8011a8a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011a84:	f04f 33ff 	mov.w	r3, #4294967295
 8011a88:	e04c      	b.n	8011b24 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011a90:	7ffb      	ldrb	r3, [r7, #31]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d011      	beq.n	8011aba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	899b      	ldrh	r3, [r3, #12]
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	b21b      	sxth	r3, r3
 8011a9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011aa2:	b21c      	sxth	r4, r3
 8011aa4:	2011      	movs	r0, #17
 8011aa6:	f7f6 fcab 	bl	8008400 <lwip_htons>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	b21b      	sxth	r3, r3
 8011aae:	4323      	orrs	r3, r4
 8011ab0:	b21b      	sxth	r3, r3
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	819a      	strh	r2, [r3, #12]
 8011ab8:	e010      	b.n	8011adc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	3314      	adds	r3, #20
 8011ac0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011ac2:	6a3b      	ldr	r3, [r7, #32]
 8011ac4:	6858      	ldr	r0, [r3, #4]
 8011ac6:	6a3b      	ldr	r3, [r7, #32]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	891a      	ldrh	r2, [r3, #8]
 8011acc:	6a3b      	ldr	r3, [r7, #32]
 8011ace:	891b      	ldrh	r3, [r3, #8]
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	6939      	ldr	r1, [r7, #16]
 8011ad8:	f7fa fe52 	bl	800c780 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011adc:	6a3b      	ldr	r3, [r7, #32]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7f6 fca1 	bl	800842a <lwip_htonl>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	3301      	adds	r3, #1
 8011aec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	da02      	bge.n	8011b00 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b04:	2200      	movs	r2, #0
 8011b06:	69b9      	ldr	r1, [r7, #24]
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff fdef 	bl	80116ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	3304      	adds	r3, #4
 8011b14:	69b9      	ldr	r1, [r7, #24]
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7ff fe26 	bl	8011768 <tcp_output_control_segment>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	372c      	adds	r7, #44	; 0x2c
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd90      	pop	{r4, r7, pc}
 8011b2c:	08015310 	.word	0x08015310
 8011b30:	08015b58 	.word	0x08015b58
 8011b34:	080153b4 	.word	0x080153b4

08011b38 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011b40:	f7fa ff0c 	bl	800c95c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011b44:	4b0a      	ldr	r3, [pc, #40]	; (8011b70 <tcpip_tcp_timer+0x38>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d103      	bne.n	8011b54 <tcpip_tcp_timer+0x1c>
 8011b4c:	4b09      	ldr	r3, [pc, #36]	; (8011b74 <tcpip_tcp_timer+0x3c>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d005      	beq.n	8011b60 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011b54:	2200      	movs	r2, #0
 8011b56:	4908      	ldr	r1, [pc, #32]	; (8011b78 <tcpip_tcp_timer+0x40>)
 8011b58:	20fa      	movs	r0, #250	; 0xfa
 8011b5a:	f000 f8f3 	bl	8011d44 <sys_timeout>
 8011b5e:	e003      	b.n	8011b68 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011b60:	4b06      	ldr	r3, [pc, #24]	; (8011b7c <tcpip_tcp_timer+0x44>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	601a      	str	r2, [r3, #0]
  }
}
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	3708      	adds	r7, #8
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	24008234 	.word	0x24008234
 8011b74:	24008238 	.word	0x24008238
 8011b78:	08011b39 	.word	0x08011b39
 8011b7c:	24008280 	.word	0x24008280

08011b80 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011b84:	4b0a      	ldr	r3, [pc, #40]	; (8011bb0 <tcp_timer_needed+0x30>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10f      	bne.n	8011bac <tcp_timer_needed+0x2c>
 8011b8c:	4b09      	ldr	r3, [pc, #36]	; (8011bb4 <tcp_timer_needed+0x34>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d103      	bne.n	8011b9c <tcp_timer_needed+0x1c>
 8011b94:	4b08      	ldr	r3, [pc, #32]	; (8011bb8 <tcp_timer_needed+0x38>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d007      	beq.n	8011bac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011b9c:	4b04      	ldr	r3, [pc, #16]	; (8011bb0 <tcp_timer_needed+0x30>)
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	4905      	ldr	r1, [pc, #20]	; (8011bbc <tcp_timer_needed+0x3c>)
 8011ba6:	20fa      	movs	r0, #250	; 0xfa
 8011ba8:	f000 f8cc 	bl	8011d44 <sys_timeout>
  }
}
 8011bac:	bf00      	nop
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	24008280 	.word	0x24008280
 8011bb4:	24008234 	.word	0x24008234
 8011bb8:	24008238 	.word	0x24008238
 8011bbc:	08011b39 	.word	0x08011b39

08011bc0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b086      	sub	sp, #24
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011bcc:	2006      	movs	r0, #6
 8011bce:	f7f9 fc33 	bl	800b438 <memp_malloc>
 8011bd2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d109      	bne.n	8011bee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d151      	bne.n	8011c84 <sys_timeout_abs+0xc4>
 8011be0:	4b2a      	ldr	r3, [pc, #168]	; (8011c8c <sys_timeout_abs+0xcc>)
 8011be2:	22be      	movs	r2, #190	; 0xbe
 8011be4:	492a      	ldr	r1, [pc, #168]	; (8011c90 <sys_timeout_abs+0xd0>)
 8011be6:	482b      	ldr	r0, [pc, #172]	; (8011c94 <sys_timeout_abs+0xd4>)
 8011be8:	f000 fbce 	bl	8012388 <iprintf>
    return;
 8011bec:	e04a      	b.n	8011c84 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	68ba      	ldr	r2, [r7, #8]
 8011bf8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c06:	4b24      	ldr	r3, [pc, #144]	; (8011c98 <sys_timeout_abs+0xd8>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d103      	bne.n	8011c16 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011c0e:	4a22      	ldr	r2, [pc, #136]	; (8011c98 <sys_timeout_abs+0xd8>)
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	6013      	str	r3, [r2, #0]
    return;
 8011c14:	e037      	b.n	8011c86 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	685a      	ldr	r2, [r3, #4]
 8011c1a:	4b1f      	ldr	r3, [pc, #124]	; (8011c98 <sys_timeout_abs+0xd8>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	0fdb      	lsrs	r3, r3, #31
 8011c24:	f003 0301 	and.w	r3, r3, #1
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d007      	beq.n	8011c3e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011c2e:	4b1a      	ldr	r3, [pc, #104]	; (8011c98 <sys_timeout_abs+0xd8>)
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c36:	4a18      	ldr	r2, [pc, #96]	; (8011c98 <sys_timeout_abs+0xd8>)
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	6013      	str	r3, [r2, #0]
 8011c3c:	e023      	b.n	8011c86 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c3e:	4b16      	ldr	r3, [pc, #88]	; (8011c98 <sys_timeout_abs+0xd8>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	617b      	str	r3, [r7, #20]
 8011c44:	e01a      	b.n	8011c7c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00b      	beq.n	8011c66 <sys_timeout_abs+0xa6>
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	685a      	ldr	r2, [r3, #4]
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	1ad3      	subs	r3, r2, r3
 8011c5a:	0fdb      	lsrs	r3, r3, #31
 8011c5c:	f003 0301 	and.w	r3, r3, #1
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d007      	beq.n	8011c76 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	693a      	ldr	r2, [r7, #16]
 8011c72:	601a      	str	r2, [r3, #0]
        break;
 8011c74:	e007      	b.n	8011c86 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	617b      	str	r3, [r7, #20]
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d1e1      	bne.n	8011c46 <sys_timeout_abs+0x86>
 8011c82:	e000      	b.n	8011c86 <sys_timeout_abs+0xc6>
    return;
 8011c84:	bf00      	nop
      }
    }
  }
}
 8011c86:	3718      	adds	r7, #24
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	08015b7c 	.word	0x08015b7c
 8011c90:	08015c04 	.word	0x08015c04
 8011c94:	08015c44 	.word	0x08015c44
 8011c98:	24008278 	.word	0x24008278

08011c9c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	4798      	blx	r3

  now = sys_now();
 8011cae:	f7f6 f93f 	bl	8007f30 <sys_now>
 8011cb2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	4b0f      	ldr	r3, [pc, #60]	; (8011cf8 <lwip_cyclic_timer+0x5c>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	1ad3      	subs	r3, r2, r3
 8011cc6:	0fdb      	lsrs	r3, r3, #31
 8011cc8:	f003 0301 	and.w	r3, r3, #1
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d009      	beq.n	8011ce6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	4413      	add	r3, r2
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	4907      	ldr	r1, [pc, #28]	; (8011cfc <lwip_cyclic_timer+0x60>)
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ff ff6e 	bl	8011bc0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011ce4:	e004      	b.n	8011cf0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	4904      	ldr	r1, [pc, #16]	; (8011cfc <lwip_cyclic_timer+0x60>)
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f7ff ff68 	bl	8011bc0 <sys_timeout_abs>
}
 8011cf0:	bf00      	nop
 8011cf2:	3718      	adds	r7, #24
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	2400827c 	.word	0x2400827c
 8011cfc:	08011c9d 	.word	0x08011c9d

08011d00 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d06:	2301      	movs	r3, #1
 8011d08:	607b      	str	r3, [r7, #4]
 8011d0a:	e00e      	b.n	8011d2a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011d0c:	4a0b      	ldr	r2, [pc, #44]	; (8011d3c <sys_timeouts_init+0x3c>)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	4a08      	ldr	r2, [pc, #32]	; (8011d3c <sys_timeouts_init+0x3c>)
 8011d1a:	4413      	add	r3, r2
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	4908      	ldr	r1, [pc, #32]	; (8011d40 <sys_timeouts_init+0x40>)
 8011d20:	f000 f810 	bl	8011d44 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3301      	adds	r3, #1
 8011d28:	607b      	str	r3, [r7, #4]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b02      	cmp	r3, #2
 8011d2e:	d9ed      	bls.n	8011d0c <sys_timeouts_init+0xc>
  }
}
 8011d30:	bf00      	nop
 8011d32:	bf00      	nop
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	0801617c 	.word	0x0801617c
 8011d40:	08011c9d 	.word	0x08011c9d

08011d44 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b086      	sub	sp, #24
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d56:	d306      	bcc.n	8011d66 <sys_timeout+0x22>
 8011d58:	4b0a      	ldr	r3, [pc, #40]	; (8011d84 <sys_timeout+0x40>)
 8011d5a:	f240 1229 	movw	r2, #297	; 0x129
 8011d5e:	490a      	ldr	r1, [pc, #40]	; (8011d88 <sys_timeout+0x44>)
 8011d60:	480a      	ldr	r0, [pc, #40]	; (8011d8c <sys_timeout+0x48>)
 8011d62:	f000 fb11 	bl	8012388 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011d66:	f7f6 f8e3 	bl	8007f30 <sys_now>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	4413      	add	r3, r2
 8011d70:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	68b9      	ldr	r1, [r7, #8]
 8011d76:	6978      	ldr	r0, [r7, #20]
 8011d78:	f7ff ff22 	bl	8011bc0 <sys_timeout_abs>
#endif
}
 8011d7c:	bf00      	nop
 8011d7e:	3718      	adds	r7, #24
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	08015b7c 	.word	0x08015b7c
 8011d88:	08015c6c 	.word	0x08015c6c
 8011d8c:	08015c44 	.word	0x08015c44

08011d90 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011d96:	f7f6 f8cb 	bl	8007f30 <sys_now>
 8011d9a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011d9c:	4b1a      	ldr	r3, [pc, #104]	; (8011e08 <sys_check_timeouts+0x78>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d001      	beq.n	8011daa <sys_check_timeouts+0x1a>
 8011da6:	f7f9 ffc7 	bl	800bd38 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011daa:	4b18      	ldr	r3, [pc, #96]	; (8011e0c <sys_check_timeouts+0x7c>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d022      	beq.n	8011dfc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	68fa      	ldr	r2, [r7, #12]
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	0fdb      	lsrs	r3, r3, #31
 8011dc0:	f003 0301 	and.w	r3, r3, #1
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d11a      	bne.n	8011e00 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	4a0f      	ldr	r2, [pc, #60]	; (8011e0c <sys_check_timeouts+0x7c>)
 8011dd0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	4a0b      	ldr	r2, [pc, #44]	; (8011e10 <sys_check_timeouts+0x80>)
 8011de4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011de6:	68b9      	ldr	r1, [r7, #8]
 8011de8:	2006      	movs	r0, #6
 8011dea:	f7f9 fb95 	bl	800b518 <memp_free>
    if (handler != NULL) {
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d0d3      	beq.n	8011d9c <sys_check_timeouts+0xc>
      handler(arg);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6838      	ldr	r0, [r7, #0]
 8011df8:	4798      	blx	r3
  do {
 8011dfa:	e7cf      	b.n	8011d9c <sys_check_timeouts+0xc>
      return;
 8011dfc:	bf00      	nop
 8011dfe:	e000      	b.n	8011e02 <sys_check_timeouts+0x72>
      return;
 8011e00:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011e02:	3710      	adds	r7, #16
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	24008225 	.word	0x24008225
 8011e0c:	24008278 	.word	0x24008278
 8011e10:	2400827c 	.word	0x2400827c

08011e14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011e18:	f000 f9b6 	bl	8012188 <rand>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	4b01      	ldr	r3, [pc, #4]	; (8011e34 <udp_init+0x20>)
 8011e2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011e30:	bf00      	nop
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	2400002c 	.word	0x2400002c

08011e38 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	4613      	mov	r3, r2
 8011e44:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d105      	bne.n	8011e58 <udp_input_local_match+0x20>
 8011e4c:	4b27      	ldr	r3, [pc, #156]	; (8011eec <udp_input_local_match+0xb4>)
 8011e4e:	2287      	movs	r2, #135	; 0x87
 8011e50:	4927      	ldr	r1, [pc, #156]	; (8011ef0 <udp_input_local_match+0xb8>)
 8011e52:	4828      	ldr	r0, [pc, #160]	; (8011ef4 <udp_input_local_match+0xbc>)
 8011e54:	f000 fa98 	bl	8012388 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d105      	bne.n	8011e6a <udp_input_local_match+0x32>
 8011e5e:	4b23      	ldr	r3, [pc, #140]	; (8011eec <udp_input_local_match+0xb4>)
 8011e60:	2288      	movs	r2, #136	; 0x88
 8011e62:	4925      	ldr	r1, [pc, #148]	; (8011ef8 <udp_input_local_match+0xc0>)
 8011e64:	4823      	ldr	r0, [pc, #140]	; (8011ef4 <udp_input_local_match+0xbc>)
 8011e66:	f000 fa8f 	bl	8012388 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	7a1b      	ldrb	r3, [r3, #8]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00b      	beq.n	8011e8a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	7a1a      	ldrb	r2, [r3, #8]
 8011e76:	4b21      	ldr	r3, [pc, #132]	; (8011efc <udp_input_local_match+0xc4>)
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011e7e:	3301      	adds	r3, #1
 8011e80:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d001      	beq.n	8011e8a <udp_input_local_match+0x52>
    return 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	e02b      	b.n	8011ee2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d018      	beq.n	8011ec2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d013      	beq.n	8011ebe <udp_input_local_match+0x86>
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00f      	beq.n	8011ebe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011e9e:	4b17      	ldr	r3, [pc, #92]	; (8011efc <udp_input_local_match+0xc4>)
 8011ea0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea6:	d00a      	beq.n	8011ebe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	4b13      	ldr	r3, [pc, #76]	; (8011efc <udp_input_local_match+0xc4>)
 8011eae:	695b      	ldr	r3, [r3, #20]
 8011eb0:	405a      	eors	r2, r3
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d110      	bne.n	8011ee0 <udp_input_local_match+0xa8>
          return 1;
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	e00f      	b.n	8011ee2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d009      	beq.n	8011edc <udp_input_local_match+0xa4>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d005      	beq.n	8011edc <udp_input_local_match+0xa4>
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	4b09      	ldr	r3, [pc, #36]	; (8011efc <udp_input_local_match+0xc4>)
 8011ed6:	695b      	ldr	r3, [r3, #20]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d101      	bne.n	8011ee0 <udp_input_local_match+0xa8>
        return 1;
 8011edc:	2301      	movs	r3, #1
 8011ede:	e000      	b.n	8011ee2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011ee0:	2300      	movs	r3, #0
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	08015cb8 	.word	0x08015cb8
 8011ef0:	08015d38 	.word	0x08015d38
 8011ef4:	08015d5c 	.word	0x08015d5c
 8011ef8:	08015d84 	.word	0x08015d84
 8011efc:	240052fc 	.word	0x240052fc

08011f00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011f00:	b590      	push	{r4, r7, lr}
 8011f02:	b08d      	sub	sp, #52	; 0x34
 8011f04:	af02      	add	r7, sp, #8
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d105      	bne.n	8011f20 <udp_input+0x20>
 8011f14:	4b7c      	ldr	r3, [pc, #496]	; (8012108 <udp_input+0x208>)
 8011f16:	22cf      	movs	r2, #207	; 0xcf
 8011f18:	497c      	ldr	r1, [pc, #496]	; (801210c <udp_input+0x20c>)
 8011f1a:	487d      	ldr	r0, [pc, #500]	; (8012110 <udp_input+0x210>)
 8011f1c:	f000 fa34 	bl	8012388 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d105      	bne.n	8011f32 <udp_input+0x32>
 8011f26:	4b78      	ldr	r3, [pc, #480]	; (8012108 <udp_input+0x208>)
 8011f28:	22d0      	movs	r2, #208	; 0xd0
 8011f2a:	497a      	ldr	r1, [pc, #488]	; (8012114 <udp_input+0x214>)
 8011f2c:	4878      	ldr	r0, [pc, #480]	; (8012110 <udp_input+0x210>)
 8011f2e:	f000 fa2b 	bl	8012388 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	895b      	ldrh	r3, [r3, #10]
 8011f36:	2b07      	cmp	r3, #7
 8011f38:	d803      	bhi.n	8011f42 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f7fa fa36 	bl	800c3ac <pbuf_free>
    goto end;
 8011f40:	e0de      	b.n	8012100 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011f48:	4b73      	ldr	r3, [pc, #460]	; (8012118 <udp_input+0x218>)
 8011f4a:	695b      	ldr	r3, [r3, #20]
 8011f4c:	4a72      	ldr	r2, [pc, #456]	; (8012118 <udp_input+0x218>)
 8011f4e:	6812      	ldr	r2, [r2, #0]
 8011f50:	4611      	mov	r1, r2
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7f7 ffc0 	bl	8009ed8 <ip4_addr_isbroadcast_u32>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7f6 fa4c 	bl	8008400 <lwip_htons>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	885b      	ldrh	r3, [r3, #2]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7f6 fa44 	bl	8008400 <lwip_htons>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011f80:	2300      	movs	r3, #0
 8011f82:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011f84:	2300      	movs	r3, #0
 8011f86:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f88:	4b64      	ldr	r3, [pc, #400]	; (801211c <udp_input+0x21c>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f8e:	e054      	b.n	801203a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	8a5b      	ldrh	r3, [r3, #18]
 8011f94:	89fa      	ldrh	r2, [r7, #14]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d14a      	bne.n	8012030 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011f9a:	7cfb      	ldrb	r3, [r7, #19]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	6839      	ldr	r1, [r7, #0]
 8011fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fa2:	f7ff ff49 	bl	8011e38 <udp_input_local_match>
 8011fa6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d041      	beq.n	8012030 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	7c1b      	ldrb	r3, [r3, #16]
 8011fb0:	f003 0304 	and.w	r3, r3, #4
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d11d      	bne.n	8011ff4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d102      	bne.n	8011fc4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc0:	61fb      	str	r3, [r7, #28]
 8011fc2:	e017      	b.n	8011ff4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011fc4:	7cfb      	ldrb	r3, [r7, #19]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d014      	beq.n	8011ff4 <udp_input+0xf4>
 8011fca:	4b53      	ldr	r3, [pc, #332]	; (8012118 <udp_input+0x218>)
 8011fcc:	695b      	ldr	r3, [r3, #20]
 8011fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd2:	d10f      	bne.n	8011ff4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	681a      	ldr	r2, [r3, #0]
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	3304      	adds	r3, #4
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d008      	beq.n	8011ff4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	3304      	adds	r3, #4
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d101      	bne.n	8011ff4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff6:	8a9b      	ldrh	r3, [r3, #20]
 8011ff8:	8a3a      	ldrh	r2, [r7, #16]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d118      	bne.n	8012030 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012000:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012002:	2b00      	cmp	r3, #0
 8012004:	d005      	beq.n	8012012 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012008:	685a      	ldr	r2, [r3, #4]
 801200a:	4b43      	ldr	r3, [pc, #268]	; (8012118 <udp_input+0x218>)
 801200c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801200e:	429a      	cmp	r2, r3
 8012010:	d10e      	bne.n	8012030 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d014      	beq.n	8012042 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201a:	68da      	ldr	r2, [r3, #12]
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012020:	4b3e      	ldr	r3, [pc, #248]	; (801211c <udp_input+0x21c>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012026:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012028:	4a3c      	ldr	r2, [pc, #240]	; (801211c <udp_input+0x21c>)
 801202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801202e:	e008      	b.n	8012042 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	627b      	str	r3, [r7, #36]	; 0x24
 801203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1a7      	bne.n	8011f90 <udp_input+0x90>
 8012040:	e000      	b.n	8012044 <udp_input+0x144>
        break;
 8012042:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012046:	2b00      	cmp	r3, #0
 8012048:	d101      	bne.n	801204e <udp_input+0x14e>
    pcb = uncon_pcb;
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012050:	2b00      	cmp	r3, #0
 8012052:	d002      	beq.n	801205a <udp_input+0x15a>
    for_us = 1;
 8012054:	2301      	movs	r3, #1
 8012056:	76fb      	strb	r3, [r7, #27]
 8012058:	e00a      	b.n	8012070 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	3304      	adds	r3, #4
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	4b2d      	ldr	r3, [pc, #180]	; (8012118 <udp_input+0x218>)
 8012062:	695b      	ldr	r3, [r3, #20]
 8012064:	429a      	cmp	r2, r3
 8012066:	bf0c      	ite	eq
 8012068:	2301      	moveq	r3, #1
 801206a:	2300      	movne	r3, #0
 801206c:	b2db      	uxtb	r3, r3
 801206e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012070:	7efb      	ldrb	r3, [r7, #27]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d041      	beq.n	80120fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012076:	2108      	movs	r1, #8
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7fa f911 	bl	800c2a0 <pbuf_remove_header>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00a      	beq.n	801209a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012084:	4b20      	ldr	r3, [pc, #128]	; (8012108 <udp_input+0x208>)
 8012086:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801208a:	4925      	ldr	r1, [pc, #148]	; (8012120 <udp_input+0x220>)
 801208c:	4820      	ldr	r0, [pc, #128]	; (8012110 <udp_input+0x210>)
 801208e:	f000 f97b 	bl	8012388 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7fa f98a 	bl	800c3ac <pbuf_free>
      goto end;
 8012098:	e032      	b.n	8012100 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209c:	2b00      	cmp	r3, #0
 801209e:	d012      	beq.n	80120c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80120a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a2:	699b      	ldr	r3, [r3, #24]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00a      	beq.n	80120be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80120a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120aa:	699c      	ldr	r4, [r3, #24]
 80120ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ae:	69d8      	ldr	r0, [r3, #28]
 80120b0:	8a3b      	ldrh	r3, [r7, #16]
 80120b2:	9300      	str	r3, [sp, #0]
 80120b4:	4b1b      	ldr	r3, [pc, #108]	; (8012124 <udp_input+0x224>)
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80120ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80120bc:	e021      	b.n	8012102 <udp_input+0x202>
        pbuf_free(p);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7fa f974 	bl	800c3ac <pbuf_free>
        goto end;
 80120c4:	e01c      	b.n	8012100 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80120c6:	7cfb      	ldrb	r3, [r7, #19]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d112      	bne.n	80120f2 <udp_input+0x1f2>
 80120cc:	4b12      	ldr	r3, [pc, #72]	; (8012118 <udp_input+0x218>)
 80120ce:	695b      	ldr	r3, [r3, #20]
 80120d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120d4:	2be0      	cmp	r3, #224	; 0xe0
 80120d6:	d00c      	beq.n	80120f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80120d8:	4b0f      	ldr	r3, [pc, #60]	; (8012118 <udp_input+0x218>)
 80120da:	899b      	ldrh	r3, [r3, #12]
 80120dc:	3308      	adds	r3, #8
 80120de:	b29b      	uxth	r3, r3
 80120e0:	b21b      	sxth	r3, r3
 80120e2:	4619      	mov	r1, r3
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7fa f94e 	bl	800c386 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80120ea:	2103      	movs	r1, #3
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7f7 faf7 	bl	80096e0 <icmp_dest_unreach>
      pbuf_free(p);
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f7fa f95a 	bl	800c3ac <pbuf_free>
  return;
 80120f8:	e003      	b.n	8012102 <udp_input+0x202>
    pbuf_free(p);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7fa f956 	bl	800c3ac <pbuf_free>
  return;
 8012100:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012102:	372c      	adds	r7, #44	; 0x2c
 8012104:	46bd      	mov	sp, r7
 8012106:	bd90      	pop	{r4, r7, pc}
 8012108:	08015cb8 	.word	0x08015cb8
 801210c:	08015dac 	.word	0x08015dac
 8012110:	08015d5c 	.word	0x08015d5c
 8012114:	08015dc4 	.word	0x08015dc4
 8012118:	240052fc 	.word	0x240052fc
 801211c:	24008284 	.word	0x24008284
 8012120:	08015de0 	.word	0x08015de0
 8012124:	2400530c 	.word	0x2400530c

08012128 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012128:	b480      	push	{r7}
 801212a:	b085      	sub	sp, #20
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d01e      	beq.n	8012176 <udp_netif_ip_addr_changed+0x4e>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d01a      	beq.n	8012176 <udp_netif_ip_addr_changed+0x4e>
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d017      	beq.n	8012176 <udp_netif_ip_addr_changed+0x4e>
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d013      	beq.n	8012176 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801214e:	4b0d      	ldr	r3, [pc, #52]	; (8012184 <udp_netif_ip_addr_changed+0x5c>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	e00c      	b.n	8012170 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681a      	ldr	r2, [r3, #0]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	429a      	cmp	r2, r3
 8012160:	d103      	bne.n	801216a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	60fb      	str	r3, [r7, #12]
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1ef      	bne.n	8012156 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012176:	bf00      	nop
 8012178:	3714      	adds	r7, #20
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr
 8012182:	bf00      	nop
 8012184:	24008284 	.word	0x24008284

08012188 <rand>:
 8012188:	4b16      	ldr	r3, [pc, #88]	; (80121e4 <rand+0x5c>)
 801218a:	b510      	push	{r4, lr}
 801218c:	681c      	ldr	r4, [r3, #0]
 801218e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012190:	b9b3      	cbnz	r3, 80121c0 <rand+0x38>
 8012192:	2018      	movs	r0, #24
 8012194:	f000 fa4c 	bl	8012630 <malloc>
 8012198:	4602      	mov	r2, r0
 801219a:	6320      	str	r0, [r4, #48]	; 0x30
 801219c:	b920      	cbnz	r0, 80121a8 <rand+0x20>
 801219e:	4b12      	ldr	r3, [pc, #72]	; (80121e8 <rand+0x60>)
 80121a0:	4812      	ldr	r0, [pc, #72]	; (80121ec <rand+0x64>)
 80121a2:	2152      	movs	r1, #82	; 0x52
 80121a4:	f000 f9da 	bl	801255c <__assert_func>
 80121a8:	4911      	ldr	r1, [pc, #68]	; (80121f0 <rand+0x68>)
 80121aa:	4b12      	ldr	r3, [pc, #72]	; (80121f4 <rand+0x6c>)
 80121ac:	e9c0 1300 	strd	r1, r3, [r0]
 80121b0:	4b11      	ldr	r3, [pc, #68]	; (80121f8 <rand+0x70>)
 80121b2:	6083      	str	r3, [r0, #8]
 80121b4:	230b      	movs	r3, #11
 80121b6:	8183      	strh	r3, [r0, #12]
 80121b8:	2100      	movs	r1, #0
 80121ba:	2001      	movs	r0, #1
 80121bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80121c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80121c2:	480e      	ldr	r0, [pc, #56]	; (80121fc <rand+0x74>)
 80121c4:	690b      	ldr	r3, [r1, #16]
 80121c6:	694c      	ldr	r4, [r1, #20]
 80121c8:	4a0d      	ldr	r2, [pc, #52]	; (8012200 <rand+0x78>)
 80121ca:	4358      	muls	r0, r3
 80121cc:	fb02 0004 	mla	r0, r2, r4, r0
 80121d0:	fba3 3202 	umull	r3, r2, r3, r2
 80121d4:	3301      	adds	r3, #1
 80121d6:	eb40 0002 	adc.w	r0, r0, r2
 80121da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80121de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80121e2:	bd10      	pop	{r4, pc}
 80121e4:	24000088 	.word	0x24000088
 80121e8:	08016194 	.word	0x08016194
 80121ec:	080161ab 	.word	0x080161ab
 80121f0:	abcd330e 	.word	0xabcd330e
 80121f4:	e66d1234 	.word	0xe66d1234
 80121f8:	0005deec 	.word	0x0005deec
 80121fc:	5851f42d 	.word	0x5851f42d
 8012200:	4c957f2d 	.word	0x4c957f2d

08012204 <std>:
 8012204:	2300      	movs	r3, #0
 8012206:	b510      	push	{r4, lr}
 8012208:	4604      	mov	r4, r0
 801220a:	e9c0 3300 	strd	r3, r3, [r0]
 801220e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012212:	6083      	str	r3, [r0, #8]
 8012214:	8181      	strh	r1, [r0, #12]
 8012216:	6643      	str	r3, [r0, #100]	; 0x64
 8012218:	81c2      	strh	r2, [r0, #14]
 801221a:	6183      	str	r3, [r0, #24]
 801221c:	4619      	mov	r1, r3
 801221e:	2208      	movs	r2, #8
 8012220:	305c      	adds	r0, #92	; 0x5c
 8012222:	f000 f916 	bl	8012452 <memset>
 8012226:	4b0d      	ldr	r3, [pc, #52]	; (801225c <std+0x58>)
 8012228:	6263      	str	r3, [r4, #36]	; 0x24
 801222a:	4b0d      	ldr	r3, [pc, #52]	; (8012260 <std+0x5c>)
 801222c:	62a3      	str	r3, [r4, #40]	; 0x28
 801222e:	4b0d      	ldr	r3, [pc, #52]	; (8012264 <std+0x60>)
 8012230:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012232:	4b0d      	ldr	r3, [pc, #52]	; (8012268 <std+0x64>)
 8012234:	6323      	str	r3, [r4, #48]	; 0x30
 8012236:	4b0d      	ldr	r3, [pc, #52]	; (801226c <std+0x68>)
 8012238:	6224      	str	r4, [r4, #32]
 801223a:	429c      	cmp	r4, r3
 801223c:	d006      	beq.n	801224c <std+0x48>
 801223e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012242:	4294      	cmp	r4, r2
 8012244:	d002      	beq.n	801224c <std+0x48>
 8012246:	33d0      	adds	r3, #208	; 0xd0
 8012248:	429c      	cmp	r4, r3
 801224a:	d105      	bne.n	8012258 <std+0x54>
 801224c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012254:	f000 b970 	b.w	8012538 <__retarget_lock_init_recursive>
 8012258:	bd10      	pop	{r4, pc}
 801225a:	bf00      	nop
 801225c:	080123ad 	.word	0x080123ad
 8012260:	080123cf 	.word	0x080123cf
 8012264:	08012407 	.word	0x08012407
 8012268:	0801242b 	.word	0x0801242b
 801226c:	24008288 	.word	0x24008288

08012270 <stdio_exit_handler>:
 8012270:	4a02      	ldr	r2, [pc, #8]	; (801227c <stdio_exit_handler+0xc>)
 8012272:	4903      	ldr	r1, [pc, #12]	; (8012280 <stdio_exit_handler+0x10>)
 8012274:	4803      	ldr	r0, [pc, #12]	; (8012284 <stdio_exit_handler+0x14>)
 8012276:	f000 b869 	b.w	801234c <_fwalk_sglue>
 801227a:	bf00      	nop
 801227c:	24000030 	.word	0x24000030
 8012280:	08012e4d 	.word	0x08012e4d
 8012284:	2400003c 	.word	0x2400003c

08012288 <cleanup_stdio>:
 8012288:	6841      	ldr	r1, [r0, #4]
 801228a:	4b0c      	ldr	r3, [pc, #48]	; (80122bc <cleanup_stdio+0x34>)
 801228c:	4299      	cmp	r1, r3
 801228e:	b510      	push	{r4, lr}
 8012290:	4604      	mov	r4, r0
 8012292:	d001      	beq.n	8012298 <cleanup_stdio+0x10>
 8012294:	f000 fdda 	bl	8012e4c <_fflush_r>
 8012298:	68a1      	ldr	r1, [r4, #8]
 801229a:	4b09      	ldr	r3, [pc, #36]	; (80122c0 <cleanup_stdio+0x38>)
 801229c:	4299      	cmp	r1, r3
 801229e:	d002      	beq.n	80122a6 <cleanup_stdio+0x1e>
 80122a0:	4620      	mov	r0, r4
 80122a2:	f000 fdd3 	bl	8012e4c <_fflush_r>
 80122a6:	68e1      	ldr	r1, [r4, #12]
 80122a8:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <cleanup_stdio+0x3c>)
 80122aa:	4299      	cmp	r1, r3
 80122ac:	d004      	beq.n	80122b8 <cleanup_stdio+0x30>
 80122ae:	4620      	mov	r0, r4
 80122b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122b4:	f000 bdca 	b.w	8012e4c <_fflush_r>
 80122b8:	bd10      	pop	{r4, pc}
 80122ba:	bf00      	nop
 80122bc:	24008288 	.word	0x24008288
 80122c0:	240082f0 	.word	0x240082f0
 80122c4:	24008358 	.word	0x24008358

080122c8 <global_stdio_init.part.0>:
 80122c8:	b510      	push	{r4, lr}
 80122ca:	4b0b      	ldr	r3, [pc, #44]	; (80122f8 <global_stdio_init.part.0+0x30>)
 80122cc:	4c0b      	ldr	r4, [pc, #44]	; (80122fc <global_stdio_init.part.0+0x34>)
 80122ce:	4a0c      	ldr	r2, [pc, #48]	; (8012300 <global_stdio_init.part.0+0x38>)
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	4620      	mov	r0, r4
 80122d4:	2200      	movs	r2, #0
 80122d6:	2104      	movs	r1, #4
 80122d8:	f7ff ff94 	bl	8012204 <std>
 80122dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80122e0:	2201      	movs	r2, #1
 80122e2:	2109      	movs	r1, #9
 80122e4:	f7ff ff8e 	bl	8012204 <std>
 80122e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80122ec:	2202      	movs	r2, #2
 80122ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122f2:	2112      	movs	r1, #18
 80122f4:	f7ff bf86 	b.w	8012204 <std>
 80122f8:	240083c0 	.word	0x240083c0
 80122fc:	24008288 	.word	0x24008288
 8012300:	08012271 	.word	0x08012271

08012304 <__sfp_lock_acquire>:
 8012304:	4801      	ldr	r0, [pc, #4]	; (801230c <__sfp_lock_acquire+0x8>)
 8012306:	f000 b918 	b.w	801253a <__retarget_lock_acquire_recursive>
 801230a:	bf00      	nop
 801230c:	240083c9 	.word	0x240083c9

08012310 <__sfp_lock_release>:
 8012310:	4801      	ldr	r0, [pc, #4]	; (8012318 <__sfp_lock_release+0x8>)
 8012312:	f000 b913 	b.w	801253c <__retarget_lock_release_recursive>
 8012316:	bf00      	nop
 8012318:	240083c9 	.word	0x240083c9

0801231c <__sinit>:
 801231c:	b510      	push	{r4, lr}
 801231e:	4604      	mov	r4, r0
 8012320:	f7ff fff0 	bl	8012304 <__sfp_lock_acquire>
 8012324:	6a23      	ldr	r3, [r4, #32]
 8012326:	b11b      	cbz	r3, 8012330 <__sinit+0x14>
 8012328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801232c:	f7ff bff0 	b.w	8012310 <__sfp_lock_release>
 8012330:	4b04      	ldr	r3, [pc, #16]	; (8012344 <__sinit+0x28>)
 8012332:	6223      	str	r3, [r4, #32]
 8012334:	4b04      	ldr	r3, [pc, #16]	; (8012348 <__sinit+0x2c>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1f5      	bne.n	8012328 <__sinit+0xc>
 801233c:	f7ff ffc4 	bl	80122c8 <global_stdio_init.part.0>
 8012340:	e7f2      	b.n	8012328 <__sinit+0xc>
 8012342:	bf00      	nop
 8012344:	08012289 	.word	0x08012289
 8012348:	240083c0 	.word	0x240083c0

0801234c <_fwalk_sglue>:
 801234c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012350:	4607      	mov	r7, r0
 8012352:	4688      	mov	r8, r1
 8012354:	4614      	mov	r4, r2
 8012356:	2600      	movs	r6, #0
 8012358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801235c:	f1b9 0901 	subs.w	r9, r9, #1
 8012360:	d505      	bpl.n	801236e <_fwalk_sglue+0x22>
 8012362:	6824      	ldr	r4, [r4, #0]
 8012364:	2c00      	cmp	r4, #0
 8012366:	d1f7      	bne.n	8012358 <_fwalk_sglue+0xc>
 8012368:	4630      	mov	r0, r6
 801236a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801236e:	89ab      	ldrh	r3, [r5, #12]
 8012370:	2b01      	cmp	r3, #1
 8012372:	d907      	bls.n	8012384 <_fwalk_sglue+0x38>
 8012374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012378:	3301      	adds	r3, #1
 801237a:	d003      	beq.n	8012384 <_fwalk_sglue+0x38>
 801237c:	4629      	mov	r1, r5
 801237e:	4638      	mov	r0, r7
 8012380:	47c0      	blx	r8
 8012382:	4306      	orrs	r6, r0
 8012384:	3568      	adds	r5, #104	; 0x68
 8012386:	e7e9      	b.n	801235c <_fwalk_sglue+0x10>

08012388 <iprintf>:
 8012388:	b40f      	push	{r0, r1, r2, r3}
 801238a:	b507      	push	{r0, r1, r2, lr}
 801238c:	4906      	ldr	r1, [pc, #24]	; (80123a8 <iprintf+0x20>)
 801238e:	ab04      	add	r3, sp, #16
 8012390:	6808      	ldr	r0, [r1, #0]
 8012392:	f853 2b04 	ldr.w	r2, [r3], #4
 8012396:	6881      	ldr	r1, [r0, #8]
 8012398:	9301      	str	r3, [sp, #4]
 801239a:	f000 fa27 	bl	80127ec <_vfiprintf_r>
 801239e:	b003      	add	sp, #12
 80123a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80123a4:	b004      	add	sp, #16
 80123a6:	4770      	bx	lr
 80123a8:	24000088 	.word	0x24000088

080123ac <__sread>:
 80123ac:	b510      	push	{r4, lr}
 80123ae:	460c      	mov	r4, r1
 80123b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123b4:	f000 f878 	bl	80124a8 <_read_r>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	bfab      	itete	ge
 80123bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123be:	89a3      	ldrhlt	r3, [r4, #12]
 80123c0:	181b      	addge	r3, r3, r0
 80123c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123c6:	bfac      	ite	ge
 80123c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80123ca:	81a3      	strhlt	r3, [r4, #12]
 80123cc:	bd10      	pop	{r4, pc}

080123ce <__swrite>:
 80123ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d2:	461f      	mov	r7, r3
 80123d4:	898b      	ldrh	r3, [r1, #12]
 80123d6:	05db      	lsls	r3, r3, #23
 80123d8:	4605      	mov	r5, r0
 80123da:	460c      	mov	r4, r1
 80123dc:	4616      	mov	r6, r2
 80123de:	d505      	bpl.n	80123ec <__swrite+0x1e>
 80123e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123e4:	2302      	movs	r3, #2
 80123e6:	2200      	movs	r2, #0
 80123e8:	f000 f84c 	bl	8012484 <_lseek_r>
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123f6:	81a3      	strh	r3, [r4, #12]
 80123f8:	4632      	mov	r2, r6
 80123fa:	463b      	mov	r3, r7
 80123fc:	4628      	mov	r0, r5
 80123fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012402:	f000 b863 	b.w	80124cc <_write_r>

08012406 <__sseek>:
 8012406:	b510      	push	{r4, lr}
 8012408:	460c      	mov	r4, r1
 801240a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801240e:	f000 f839 	bl	8012484 <_lseek_r>
 8012412:	1c43      	adds	r3, r0, #1
 8012414:	89a3      	ldrh	r3, [r4, #12]
 8012416:	bf15      	itete	ne
 8012418:	6560      	strne	r0, [r4, #84]	; 0x54
 801241a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801241e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012422:	81a3      	strheq	r3, [r4, #12]
 8012424:	bf18      	it	ne
 8012426:	81a3      	strhne	r3, [r4, #12]
 8012428:	bd10      	pop	{r4, pc}

0801242a <__sclose>:
 801242a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801242e:	f000 b819 	b.w	8012464 <_close_r>

08012432 <memcmp>:
 8012432:	b510      	push	{r4, lr}
 8012434:	3901      	subs	r1, #1
 8012436:	4402      	add	r2, r0
 8012438:	4290      	cmp	r0, r2
 801243a:	d101      	bne.n	8012440 <memcmp+0xe>
 801243c:	2000      	movs	r0, #0
 801243e:	e005      	b.n	801244c <memcmp+0x1a>
 8012440:	7803      	ldrb	r3, [r0, #0]
 8012442:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012446:	42a3      	cmp	r3, r4
 8012448:	d001      	beq.n	801244e <memcmp+0x1c>
 801244a:	1b18      	subs	r0, r3, r4
 801244c:	bd10      	pop	{r4, pc}
 801244e:	3001      	adds	r0, #1
 8012450:	e7f2      	b.n	8012438 <memcmp+0x6>

08012452 <memset>:
 8012452:	4402      	add	r2, r0
 8012454:	4603      	mov	r3, r0
 8012456:	4293      	cmp	r3, r2
 8012458:	d100      	bne.n	801245c <memset+0xa>
 801245a:	4770      	bx	lr
 801245c:	f803 1b01 	strb.w	r1, [r3], #1
 8012460:	e7f9      	b.n	8012456 <memset+0x4>
	...

08012464 <_close_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4d06      	ldr	r5, [pc, #24]	; (8012480 <_close_r+0x1c>)
 8012468:	2300      	movs	r3, #0
 801246a:	4604      	mov	r4, r0
 801246c:	4608      	mov	r0, r1
 801246e:	602b      	str	r3, [r5, #0]
 8012470:	f7ee fbf9 	bl	8000c66 <_close>
 8012474:	1c43      	adds	r3, r0, #1
 8012476:	d102      	bne.n	801247e <_close_r+0x1a>
 8012478:	682b      	ldr	r3, [r5, #0]
 801247a:	b103      	cbz	r3, 801247e <_close_r+0x1a>
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	bd38      	pop	{r3, r4, r5, pc}
 8012480:	240083c4 	.word	0x240083c4

08012484 <_lseek_r>:
 8012484:	b538      	push	{r3, r4, r5, lr}
 8012486:	4d07      	ldr	r5, [pc, #28]	; (80124a4 <_lseek_r+0x20>)
 8012488:	4604      	mov	r4, r0
 801248a:	4608      	mov	r0, r1
 801248c:	4611      	mov	r1, r2
 801248e:	2200      	movs	r2, #0
 8012490:	602a      	str	r2, [r5, #0]
 8012492:	461a      	mov	r2, r3
 8012494:	f7ee fc0e 	bl	8000cb4 <_lseek>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	d102      	bne.n	80124a2 <_lseek_r+0x1e>
 801249c:	682b      	ldr	r3, [r5, #0]
 801249e:	b103      	cbz	r3, 80124a2 <_lseek_r+0x1e>
 80124a0:	6023      	str	r3, [r4, #0]
 80124a2:	bd38      	pop	{r3, r4, r5, pc}
 80124a4:	240083c4 	.word	0x240083c4

080124a8 <_read_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4d07      	ldr	r5, [pc, #28]	; (80124c8 <_read_r+0x20>)
 80124ac:	4604      	mov	r4, r0
 80124ae:	4608      	mov	r0, r1
 80124b0:	4611      	mov	r1, r2
 80124b2:	2200      	movs	r2, #0
 80124b4:	602a      	str	r2, [r5, #0]
 80124b6:	461a      	mov	r2, r3
 80124b8:	f7ee fb9c 	bl	8000bf4 <_read>
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d102      	bne.n	80124c6 <_read_r+0x1e>
 80124c0:	682b      	ldr	r3, [r5, #0]
 80124c2:	b103      	cbz	r3, 80124c6 <_read_r+0x1e>
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	bd38      	pop	{r3, r4, r5, pc}
 80124c8:	240083c4 	.word	0x240083c4

080124cc <_write_r>:
 80124cc:	b538      	push	{r3, r4, r5, lr}
 80124ce:	4d07      	ldr	r5, [pc, #28]	; (80124ec <_write_r+0x20>)
 80124d0:	4604      	mov	r4, r0
 80124d2:	4608      	mov	r0, r1
 80124d4:	4611      	mov	r1, r2
 80124d6:	2200      	movs	r2, #0
 80124d8:	602a      	str	r2, [r5, #0]
 80124da:	461a      	mov	r2, r3
 80124dc:	f7ee fba7 	bl	8000c2e <_write>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d102      	bne.n	80124ea <_write_r+0x1e>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	b103      	cbz	r3, 80124ea <_write_r+0x1e>
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	240083c4 	.word	0x240083c4

080124f0 <__libc_init_array>:
 80124f0:	b570      	push	{r4, r5, r6, lr}
 80124f2:	4d0d      	ldr	r5, [pc, #52]	; (8012528 <__libc_init_array+0x38>)
 80124f4:	4c0d      	ldr	r4, [pc, #52]	; (801252c <__libc_init_array+0x3c>)
 80124f6:	1b64      	subs	r4, r4, r5
 80124f8:	10a4      	asrs	r4, r4, #2
 80124fa:	2600      	movs	r6, #0
 80124fc:	42a6      	cmp	r6, r4
 80124fe:	d109      	bne.n	8012514 <__libc_init_array+0x24>
 8012500:	4d0b      	ldr	r5, [pc, #44]	; (8012530 <__libc_init_array+0x40>)
 8012502:	4c0c      	ldr	r4, [pc, #48]	; (8012534 <__libc_init_array+0x44>)
 8012504:	f000 fe52 	bl	80131ac <_init>
 8012508:	1b64      	subs	r4, r4, r5
 801250a:	10a4      	asrs	r4, r4, #2
 801250c:	2600      	movs	r6, #0
 801250e:	42a6      	cmp	r6, r4
 8012510:	d105      	bne.n	801251e <__libc_init_array+0x2e>
 8012512:	bd70      	pop	{r4, r5, r6, pc}
 8012514:	f855 3b04 	ldr.w	r3, [r5], #4
 8012518:	4798      	blx	r3
 801251a:	3601      	adds	r6, #1
 801251c:	e7ee      	b.n	80124fc <__libc_init_array+0xc>
 801251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012522:	4798      	blx	r3
 8012524:	3601      	adds	r6, #1
 8012526:	e7f2      	b.n	801250e <__libc_init_array+0x1e>
 8012528:	0801627c 	.word	0x0801627c
 801252c:	0801627c 	.word	0x0801627c
 8012530:	0801627c 	.word	0x0801627c
 8012534:	08016280 	.word	0x08016280

08012538 <__retarget_lock_init_recursive>:
 8012538:	4770      	bx	lr

0801253a <__retarget_lock_acquire_recursive>:
 801253a:	4770      	bx	lr

0801253c <__retarget_lock_release_recursive>:
 801253c:	4770      	bx	lr

0801253e <memcpy>:
 801253e:	440a      	add	r2, r1
 8012540:	4291      	cmp	r1, r2
 8012542:	f100 33ff 	add.w	r3, r0, #4294967295
 8012546:	d100      	bne.n	801254a <memcpy+0xc>
 8012548:	4770      	bx	lr
 801254a:	b510      	push	{r4, lr}
 801254c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012554:	4291      	cmp	r1, r2
 8012556:	d1f9      	bne.n	801254c <memcpy+0xe>
 8012558:	bd10      	pop	{r4, pc}
	...

0801255c <__assert_func>:
 801255c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801255e:	4614      	mov	r4, r2
 8012560:	461a      	mov	r2, r3
 8012562:	4b09      	ldr	r3, [pc, #36]	; (8012588 <__assert_func+0x2c>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	4605      	mov	r5, r0
 8012568:	68d8      	ldr	r0, [r3, #12]
 801256a:	b14c      	cbz	r4, 8012580 <__assert_func+0x24>
 801256c:	4b07      	ldr	r3, [pc, #28]	; (801258c <__assert_func+0x30>)
 801256e:	9100      	str	r1, [sp, #0]
 8012570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012574:	4906      	ldr	r1, [pc, #24]	; (8012590 <__assert_func+0x34>)
 8012576:	462b      	mov	r3, r5
 8012578:	f000 fc90 	bl	8012e9c <fiprintf>
 801257c:	f000 fd46 	bl	801300c <abort>
 8012580:	4b04      	ldr	r3, [pc, #16]	; (8012594 <__assert_func+0x38>)
 8012582:	461c      	mov	r4, r3
 8012584:	e7f3      	b.n	801256e <__assert_func+0x12>
 8012586:	bf00      	nop
 8012588:	24000088 	.word	0x24000088
 801258c:	08016203 	.word	0x08016203
 8012590:	08016210 	.word	0x08016210
 8012594:	0801623e 	.word	0x0801623e

08012598 <_free_r>:
 8012598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801259a:	2900      	cmp	r1, #0
 801259c:	d044      	beq.n	8012628 <_free_r+0x90>
 801259e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125a2:	9001      	str	r0, [sp, #4]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f1a1 0404 	sub.w	r4, r1, #4
 80125aa:	bfb8      	it	lt
 80125ac:	18e4      	addlt	r4, r4, r3
 80125ae:	f000 f8e7 	bl	8012780 <__malloc_lock>
 80125b2:	4a1e      	ldr	r2, [pc, #120]	; (801262c <_free_r+0x94>)
 80125b4:	9801      	ldr	r0, [sp, #4]
 80125b6:	6813      	ldr	r3, [r2, #0]
 80125b8:	b933      	cbnz	r3, 80125c8 <_free_r+0x30>
 80125ba:	6063      	str	r3, [r4, #4]
 80125bc:	6014      	str	r4, [r2, #0]
 80125be:	b003      	add	sp, #12
 80125c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125c4:	f000 b8e2 	b.w	801278c <__malloc_unlock>
 80125c8:	42a3      	cmp	r3, r4
 80125ca:	d908      	bls.n	80125de <_free_r+0x46>
 80125cc:	6825      	ldr	r5, [r4, #0]
 80125ce:	1961      	adds	r1, r4, r5
 80125d0:	428b      	cmp	r3, r1
 80125d2:	bf01      	itttt	eq
 80125d4:	6819      	ldreq	r1, [r3, #0]
 80125d6:	685b      	ldreq	r3, [r3, #4]
 80125d8:	1949      	addeq	r1, r1, r5
 80125da:	6021      	streq	r1, [r4, #0]
 80125dc:	e7ed      	b.n	80125ba <_free_r+0x22>
 80125de:	461a      	mov	r2, r3
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	b10b      	cbz	r3, 80125e8 <_free_r+0x50>
 80125e4:	42a3      	cmp	r3, r4
 80125e6:	d9fa      	bls.n	80125de <_free_r+0x46>
 80125e8:	6811      	ldr	r1, [r2, #0]
 80125ea:	1855      	adds	r5, r2, r1
 80125ec:	42a5      	cmp	r5, r4
 80125ee:	d10b      	bne.n	8012608 <_free_r+0x70>
 80125f0:	6824      	ldr	r4, [r4, #0]
 80125f2:	4421      	add	r1, r4
 80125f4:	1854      	adds	r4, r2, r1
 80125f6:	42a3      	cmp	r3, r4
 80125f8:	6011      	str	r1, [r2, #0]
 80125fa:	d1e0      	bne.n	80125be <_free_r+0x26>
 80125fc:	681c      	ldr	r4, [r3, #0]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	6053      	str	r3, [r2, #4]
 8012602:	440c      	add	r4, r1
 8012604:	6014      	str	r4, [r2, #0]
 8012606:	e7da      	b.n	80125be <_free_r+0x26>
 8012608:	d902      	bls.n	8012610 <_free_r+0x78>
 801260a:	230c      	movs	r3, #12
 801260c:	6003      	str	r3, [r0, #0]
 801260e:	e7d6      	b.n	80125be <_free_r+0x26>
 8012610:	6825      	ldr	r5, [r4, #0]
 8012612:	1961      	adds	r1, r4, r5
 8012614:	428b      	cmp	r3, r1
 8012616:	bf04      	itt	eq
 8012618:	6819      	ldreq	r1, [r3, #0]
 801261a:	685b      	ldreq	r3, [r3, #4]
 801261c:	6063      	str	r3, [r4, #4]
 801261e:	bf04      	itt	eq
 8012620:	1949      	addeq	r1, r1, r5
 8012622:	6021      	streq	r1, [r4, #0]
 8012624:	6054      	str	r4, [r2, #4]
 8012626:	e7ca      	b.n	80125be <_free_r+0x26>
 8012628:	b003      	add	sp, #12
 801262a:	bd30      	pop	{r4, r5, pc}
 801262c:	240083cc 	.word	0x240083cc

08012630 <malloc>:
 8012630:	4b02      	ldr	r3, [pc, #8]	; (801263c <malloc+0xc>)
 8012632:	4601      	mov	r1, r0
 8012634:	6818      	ldr	r0, [r3, #0]
 8012636:	f000 b823 	b.w	8012680 <_malloc_r>
 801263a:	bf00      	nop
 801263c:	24000088 	.word	0x24000088

08012640 <sbrk_aligned>:
 8012640:	b570      	push	{r4, r5, r6, lr}
 8012642:	4e0e      	ldr	r6, [pc, #56]	; (801267c <sbrk_aligned+0x3c>)
 8012644:	460c      	mov	r4, r1
 8012646:	6831      	ldr	r1, [r6, #0]
 8012648:	4605      	mov	r5, r0
 801264a:	b911      	cbnz	r1, 8012652 <sbrk_aligned+0x12>
 801264c:	f000 fcce 	bl	8012fec <_sbrk_r>
 8012650:	6030      	str	r0, [r6, #0]
 8012652:	4621      	mov	r1, r4
 8012654:	4628      	mov	r0, r5
 8012656:	f000 fcc9 	bl	8012fec <_sbrk_r>
 801265a:	1c43      	adds	r3, r0, #1
 801265c:	d00a      	beq.n	8012674 <sbrk_aligned+0x34>
 801265e:	1cc4      	adds	r4, r0, #3
 8012660:	f024 0403 	bic.w	r4, r4, #3
 8012664:	42a0      	cmp	r0, r4
 8012666:	d007      	beq.n	8012678 <sbrk_aligned+0x38>
 8012668:	1a21      	subs	r1, r4, r0
 801266a:	4628      	mov	r0, r5
 801266c:	f000 fcbe 	bl	8012fec <_sbrk_r>
 8012670:	3001      	adds	r0, #1
 8012672:	d101      	bne.n	8012678 <sbrk_aligned+0x38>
 8012674:	f04f 34ff 	mov.w	r4, #4294967295
 8012678:	4620      	mov	r0, r4
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	240083d0 	.word	0x240083d0

08012680 <_malloc_r>:
 8012680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012684:	1ccd      	adds	r5, r1, #3
 8012686:	f025 0503 	bic.w	r5, r5, #3
 801268a:	3508      	adds	r5, #8
 801268c:	2d0c      	cmp	r5, #12
 801268e:	bf38      	it	cc
 8012690:	250c      	movcc	r5, #12
 8012692:	2d00      	cmp	r5, #0
 8012694:	4607      	mov	r7, r0
 8012696:	db01      	blt.n	801269c <_malloc_r+0x1c>
 8012698:	42a9      	cmp	r1, r5
 801269a:	d905      	bls.n	80126a8 <_malloc_r+0x28>
 801269c:	230c      	movs	r3, #12
 801269e:	603b      	str	r3, [r7, #0]
 80126a0:	2600      	movs	r6, #0
 80126a2:	4630      	mov	r0, r6
 80126a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801277c <_malloc_r+0xfc>
 80126ac:	f000 f868 	bl	8012780 <__malloc_lock>
 80126b0:	f8d8 3000 	ldr.w	r3, [r8]
 80126b4:	461c      	mov	r4, r3
 80126b6:	bb5c      	cbnz	r4, 8012710 <_malloc_r+0x90>
 80126b8:	4629      	mov	r1, r5
 80126ba:	4638      	mov	r0, r7
 80126bc:	f7ff ffc0 	bl	8012640 <sbrk_aligned>
 80126c0:	1c43      	adds	r3, r0, #1
 80126c2:	4604      	mov	r4, r0
 80126c4:	d155      	bne.n	8012772 <_malloc_r+0xf2>
 80126c6:	f8d8 4000 	ldr.w	r4, [r8]
 80126ca:	4626      	mov	r6, r4
 80126cc:	2e00      	cmp	r6, #0
 80126ce:	d145      	bne.n	801275c <_malloc_r+0xdc>
 80126d0:	2c00      	cmp	r4, #0
 80126d2:	d048      	beq.n	8012766 <_malloc_r+0xe6>
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	4631      	mov	r1, r6
 80126d8:	4638      	mov	r0, r7
 80126da:	eb04 0903 	add.w	r9, r4, r3
 80126de:	f000 fc85 	bl	8012fec <_sbrk_r>
 80126e2:	4581      	cmp	r9, r0
 80126e4:	d13f      	bne.n	8012766 <_malloc_r+0xe6>
 80126e6:	6821      	ldr	r1, [r4, #0]
 80126e8:	1a6d      	subs	r5, r5, r1
 80126ea:	4629      	mov	r1, r5
 80126ec:	4638      	mov	r0, r7
 80126ee:	f7ff ffa7 	bl	8012640 <sbrk_aligned>
 80126f2:	3001      	adds	r0, #1
 80126f4:	d037      	beq.n	8012766 <_malloc_r+0xe6>
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	442b      	add	r3, r5
 80126fa:	6023      	str	r3, [r4, #0]
 80126fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d038      	beq.n	8012776 <_malloc_r+0xf6>
 8012704:	685a      	ldr	r2, [r3, #4]
 8012706:	42a2      	cmp	r2, r4
 8012708:	d12b      	bne.n	8012762 <_malloc_r+0xe2>
 801270a:	2200      	movs	r2, #0
 801270c:	605a      	str	r2, [r3, #4]
 801270e:	e00f      	b.n	8012730 <_malloc_r+0xb0>
 8012710:	6822      	ldr	r2, [r4, #0]
 8012712:	1b52      	subs	r2, r2, r5
 8012714:	d41f      	bmi.n	8012756 <_malloc_r+0xd6>
 8012716:	2a0b      	cmp	r2, #11
 8012718:	d917      	bls.n	801274a <_malloc_r+0xca>
 801271a:	1961      	adds	r1, r4, r5
 801271c:	42a3      	cmp	r3, r4
 801271e:	6025      	str	r5, [r4, #0]
 8012720:	bf18      	it	ne
 8012722:	6059      	strne	r1, [r3, #4]
 8012724:	6863      	ldr	r3, [r4, #4]
 8012726:	bf08      	it	eq
 8012728:	f8c8 1000 	streq.w	r1, [r8]
 801272c:	5162      	str	r2, [r4, r5]
 801272e:	604b      	str	r3, [r1, #4]
 8012730:	4638      	mov	r0, r7
 8012732:	f104 060b 	add.w	r6, r4, #11
 8012736:	f000 f829 	bl	801278c <__malloc_unlock>
 801273a:	f026 0607 	bic.w	r6, r6, #7
 801273e:	1d23      	adds	r3, r4, #4
 8012740:	1af2      	subs	r2, r6, r3
 8012742:	d0ae      	beq.n	80126a2 <_malloc_r+0x22>
 8012744:	1b9b      	subs	r3, r3, r6
 8012746:	50a3      	str	r3, [r4, r2]
 8012748:	e7ab      	b.n	80126a2 <_malloc_r+0x22>
 801274a:	42a3      	cmp	r3, r4
 801274c:	6862      	ldr	r2, [r4, #4]
 801274e:	d1dd      	bne.n	801270c <_malloc_r+0x8c>
 8012750:	f8c8 2000 	str.w	r2, [r8]
 8012754:	e7ec      	b.n	8012730 <_malloc_r+0xb0>
 8012756:	4623      	mov	r3, r4
 8012758:	6864      	ldr	r4, [r4, #4]
 801275a:	e7ac      	b.n	80126b6 <_malloc_r+0x36>
 801275c:	4634      	mov	r4, r6
 801275e:	6876      	ldr	r6, [r6, #4]
 8012760:	e7b4      	b.n	80126cc <_malloc_r+0x4c>
 8012762:	4613      	mov	r3, r2
 8012764:	e7cc      	b.n	8012700 <_malloc_r+0x80>
 8012766:	230c      	movs	r3, #12
 8012768:	603b      	str	r3, [r7, #0]
 801276a:	4638      	mov	r0, r7
 801276c:	f000 f80e 	bl	801278c <__malloc_unlock>
 8012770:	e797      	b.n	80126a2 <_malloc_r+0x22>
 8012772:	6025      	str	r5, [r4, #0]
 8012774:	e7dc      	b.n	8012730 <_malloc_r+0xb0>
 8012776:	605b      	str	r3, [r3, #4]
 8012778:	deff      	udf	#255	; 0xff
 801277a:	bf00      	nop
 801277c:	240083cc 	.word	0x240083cc

08012780 <__malloc_lock>:
 8012780:	4801      	ldr	r0, [pc, #4]	; (8012788 <__malloc_lock+0x8>)
 8012782:	f7ff beda 	b.w	801253a <__retarget_lock_acquire_recursive>
 8012786:	bf00      	nop
 8012788:	240083c8 	.word	0x240083c8

0801278c <__malloc_unlock>:
 801278c:	4801      	ldr	r0, [pc, #4]	; (8012794 <__malloc_unlock+0x8>)
 801278e:	f7ff bed5 	b.w	801253c <__retarget_lock_release_recursive>
 8012792:	bf00      	nop
 8012794:	240083c8 	.word	0x240083c8

08012798 <__sfputc_r>:
 8012798:	6893      	ldr	r3, [r2, #8]
 801279a:	3b01      	subs	r3, #1
 801279c:	2b00      	cmp	r3, #0
 801279e:	b410      	push	{r4}
 80127a0:	6093      	str	r3, [r2, #8]
 80127a2:	da08      	bge.n	80127b6 <__sfputc_r+0x1e>
 80127a4:	6994      	ldr	r4, [r2, #24]
 80127a6:	42a3      	cmp	r3, r4
 80127a8:	db01      	blt.n	80127ae <__sfputc_r+0x16>
 80127aa:	290a      	cmp	r1, #10
 80127ac:	d103      	bne.n	80127b6 <__sfputc_r+0x1e>
 80127ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b2:	f000 bb85 	b.w	8012ec0 <__swbuf_r>
 80127b6:	6813      	ldr	r3, [r2, #0]
 80127b8:	1c58      	adds	r0, r3, #1
 80127ba:	6010      	str	r0, [r2, #0]
 80127bc:	7019      	strb	r1, [r3, #0]
 80127be:	4608      	mov	r0, r1
 80127c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127c4:	4770      	bx	lr

080127c6 <__sfputs_r>:
 80127c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127c8:	4606      	mov	r6, r0
 80127ca:	460f      	mov	r7, r1
 80127cc:	4614      	mov	r4, r2
 80127ce:	18d5      	adds	r5, r2, r3
 80127d0:	42ac      	cmp	r4, r5
 80127d2:	d101      	bne.n	80127d8 <__sfputs_r+0x12>
 80127d4:	2000      	movs	r0, #0
 80127d6:	e007      	b.n	80127e8 <__sfputs_r+0x22>
 80127d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127dc:	463a      	mov	r2, r7
 80127de:	4630      	mov	r0, r6
 80127e0:	f7ff ffda 	bl	8012798 <__sfputc_r>
 80127e4:	1c43      	adds	r3, r0, #1
 80127e6:	d1f3      	bne.n	80127d0 <__sfputs_r+0xa>
 80127e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080127ec <_vfiprintf_r>:
 80127ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f0:	460d      	mov	r5, r1
 80127f2:	b09d      	sub	sp, #116	; 0x74
 80127f4:	4614      	mov	r4, r2
 80127f6:	4698      	mov	r8, r3
 80127f8:	4606      	mov	r6, r0
 80127fa:	b118      	cbz	r0, 8012804 <_vfiprintf_r+0x18>
 80127fc:	6a03      	ldr	r3, [r0, #32]
 80127fe:	b90b      	cbnz	r3, 8012804 <_vfiprintf_r+0x18>
 8012800:	f7ff fd8c 	bl	801231c <__sinit>
 8012804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012806:	07d9      	lsls	r1, r3, #31
 8012808:	d405      	bmi.n	8012816 <_vfiprintf_r+0x2a>
 801280a:	89ab      	ldrh	r3, [r5, #12]
 801280c:	059a      	lsls	r2, r3, #22
 801280e:	d402      	bmi.n	8012816 <_vfiprintf_r+0x2a>
 8012810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012812:	f7ff fe92 	bl	801253a <__retarget_lock_acquire_recursive>
 8012816:	89ab      	ldrh	r3, [r5, #12]
 8012818:	071b      	lsls	r3, r3, #28
 801281a:	d501      	bpl.n	8012820 <_vfiprintf_r+0x34>
 801281c:	692b      	ldr	r3, [r5, #16]
 801281e:	b99b      	cbnz	r3, 8012848 <_vfiprintf_r+0x5c>
 8012820:	4629      	mov	r1, r5
 8012822:	4630      	mov	r0, r6
 8012824:	f000 fb8a 	bl	8012f3c <__swsetup_r>
 8012828:	b170      	cbz	r0, 8012848 <_vfiprintf_r+0x5c>
 801282a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801282c:	07dc      	lsls	r4, r3, #31
 801282e:	d504      	bpl.n	801283a <_vfiprintf_r+0x4e>
 8012830:	f04f 30ff 	mov.w	r0, #4294967295
 8012834:	b01d      	add	sp, #116	; 0x74
 8012836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283a:	89ab      	ldrh	r3, [r5, #12]
 801283c:	0598      	lsls	r0, r3, #22
 801283e:	d4f7      	bmi.n	8012830 <_vfiprintf_r+0x44>
 8012840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012842:	f7ff fe7b 	bl	801253c <__retarget_lock_release_recursive>
 8012846:	e7f3      	b.n	8012830 <_vfiprintf_r+0x44>
 8012848:	2300      	movs	r3, #0
 801284a:	9309      	str	r3, [sp, #36]	; 0x24
 801284c:	2320      	movs	r3, #32
 801284e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012852:	f8cd 800c 	str.w	r8, [sp, #12]
 8012856:	2330      	movs	r3, #48	; 0x30
 8012858:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012a0c <_vfiprintf_r+0x220>
 801285c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012860:	f04f 0901 	mov.w	r9, #1
 8012864:	4623      	mov	r3, r4
 8012866:	469a      	mov	sl, r3
 8012868:	f813 2b01 	ldrb.w	r2, [r3], #1
 801286c:	b10a      	cbz	r2, 8012872 <_vfiprintf_r+0x86>
 801286e:	2a25      	cmp	r2, #37	; 0x25
 8012870:	d1f9      	bne.n	8012866 <_vfiprintf_r+0x7a>
 8012872:	ebba 0b04 	subs.w	fp, sl, r4
 8012876:	d00b      	beq.n	8012890 <_vfiprintf_r+0xa4>
 8012878:	465b      	mov	r3, fp
 801287a:	4622      	mov	r2, r4
 801287c:	4629      	mov	r1, r5
 801287e:	4630      	mov	r0, r6
 8012880:	f7ff ffa1 	bl	80127c6 <__sfputs_r>
 8012884:	3001      	adds	r0, #1
 8012886:	f000 80a9 	beq.w	80129dc <_vfiprintf_r+0x1f0>
 801288a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801288c:	445a      	add	r2, fp
 801288e:	9209      	str	r2, [sp, #36]	; 0x24
 8012890:	f89a 3000 	ldrb.w	r3, [sl]
 8012894:	2b00      	cmp	r3, #0
 8012896:	f000 80a1 	beq.w	80129dc <_vfiprintf_r+0x1f0>
 801289a:	2300      	movs	r3, #0
 801289c:	f04f 32ff 	mov.w	r2, #4294967295
 80128a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128a4:	f10a 0a01 	add.w	sl, sl, #1
 80128a8:	9304      	str	r3, [sp, #16]
 80128aa:	9307      	str	r3, [sp, #28]
 80128ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128b0:	931a      	str	r3, [sp, #104]	; 0x68
 80128b2:	4654      	mov	r4, sl
 80128b4:	2205      	movs	r2, #5
 80128b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ba:	4854      	ldr	r0, [pc, #336]	; (8012a0c <_vfiprintf_r+0x220>)
 80128bc:	f7ed fd10 	bl	80002e0 <memchr>
 80128c0:	9a04      	ldr	r2, [sp, #16]
 80128c2:	b9d8      	cbnz	r0, 80128fc <_vfiprintf_r+0x110>
 80128c4:	06d1      	lsls	r1, r2, #27
 80128c6:	bf44      	itt	mi
 80128c8:	2320      	movmi	r3, #32
 80128ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128ce:	0713      	lsls	r3, r2, #28
 80128d0:	bf44      	itt	mi
 80128d2:	232b      	movmi	r3, #43	; 0x2b
 80128d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128d8:	f89a 3000 	ldrb.w	r3, [sl]
 80128dc:	2b2a      	cmp	r3, #42	; 0x2a
 80128de:	d015      	beq.n	801290c <_vfiprintf_r+0x120>
 80128e0:	9a07      	ldr	r2, [sp, #28]
 80128e2:	4654      	mov	r4, sl
 80128e4:	2000      	movs	r0, #0
 80128e6:	f04f 0c0a 	mov.w	ip, #10
 80128ea:	4621      	mov	r1, r4
 80128ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128f0:	3b30      	subs	r3, #48	; 0x30
 80128f2:	2b09      	cmp	r3, #9
 80128f4:	d94d      	bls.n	8012992 <_vfiprintf_r+0x1a6>
 80128f6:	b1b0      	cbz	r0, 8012926 <_vfiprintf_r+0x13a>
 80128f8:	9207      	str	r2, [sp, #28]
 80128fa:	e014      	b.n	8012926 <_vfiprintf_r+0x13a>
 80128fc:	eba0 0308 	sub.w	r3, r0, r8
 8012900:	fa09 f303 	lsl.w	r3, r9, r3
 8012904:	4313      	orrs	r3, r2
 8012906:	9304      	str	r3, [sp, #16]
 8012908:	46a2      	mov	sl, r4
 801290a:	e7d2      	b.n	80128b2 <_vfiprintf_r+0xc6>
 801290c:	9b03      	ldr	r3, [sp, #12]
 801290e:	1d19      	adds	r1, r3, #4
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	9103      	str	r1, [sp, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	bfbb      	ittet	lt
 8012918:	425b      	neglt	r3, r3
 801291a:	f042 0202 	orrlt.w	r2, r2, #2
 801291e:	9307      	strge	r3, [sp, #28]
 8012920:	9307      	strlt	r3, [sp, #28]
 8012922:	bfb8      	it	lt
 8012924:	9204      	strlt	r2, [sp, #16]
 8012926:	7823      	ldrb	r3, [r4, #0]
 8012928:	2b2e      	cmp	r3, #46	; 0x2e
 801292a:	d10c      	bne.n	8012946 <_vfiprintf_r+0x15a>
 801292c:	7863      	ldrb	r3, [r4, #1]
 801292e:	2b2a      	cmp	r3, #42	; 0x2a
 8012930:	d134      	bne.n	801299c <_vfiprintf_r+0x1b0>
 8012932:	9b03      	ldr	r3, [sp, #12]
 8012934:	1d1a      	adds	r2, r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	9203      	str	r2, [sp, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfb8      	it	lt
 801293e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012942:	3402      	adds	r4, #2
 8012944:	9305      	str	r3, [sp, #20]
 8012946:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012a1c <_vfiprintf_r+0x230>
 801294a:	7821      	ldrb	r1, [r4, #0]
 801294c:	2203      	movs	r2, #3
 801294e:	4650      	mov	r0, sl
 8012950:	f7ed fcc6 	bl	80002e0 <memchr>
 8012954:	b138      	cbz	r0, 8012966 <_vfiprintf_r+0x17a>
 8012956:	9b04      	ldr	r3, [sp, #16]
 8012958:	eba0 000a 	sub.w	r0, r0, sl
 801295c:	2240      	movs	r2, #64	; 0x40
 801295e:	4082      	lsls	r2, r0
 8012960:	4313      	orrs	r3, r2
 8012962:	3401      	adds	r4, #1
 8012964:	9304      	str	r3, [sp, #16]
 8012966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801296a:	4829      	ldr	r0, [pc, #164]	; (8012a10 <_vfiprintf_r+0x224>)
 801296c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012970:	2206      	movs	r2, #6
 8012972:	f7ed fcb5 	bl	80002e0 <memchr>
 8012976:	2800      	cmp	r0, #0
 8012978:	d03f      	beq.n	80129fa <_vfiprintf_r+0x20e>
 801297a:	4b26      	ldr	r3, [pc, #152]	; (8012a14 <_vfiprintf_r+0x228>)
 801297c:	bb1b      	cbnz	r3, 80129c6 <_vfiprintf_r+0x1da>
 801297e:	9b03      	ldr	r3, [sp, #12]
 8012980:	3307      	adds	r3, #7
 8012982:	f023 0307 	bic.w	r3, r3, #7
 8012986:	3308      	adds	r3, #8
 8012988:	9303      	str	r3, [sp, #12]
 801298a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801298c:	443b      	add	r3, r7
 801298e:	9309      	str	r3, [sp, #36]	; 0x24
 8012990:	e768      	b.n	8012864 <_vfiprintf_r+0x78>
 8012992:	fb0c 3202 	mla	r2, ip, r2, r3
 8012996:	460c      	mov	r4, r1
 8012998:	2001      	movs	r0, #1
 801299a:	e7a6      	b.n	80128ea <_vfiprintf_r+0xfe>
 801299c:	2300      	movs	r3, #0
 801299e:	3401      	adds	r4, #1
 80129a0:	9305      	str	r3, [sp, #20]
 80129a2:	4619      	mov	r1, r3
 80129a4:	f04f 0c0a 	mov.w	ip, #10
 80129a8:	4620      	mov	r0, r4
 80129aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129ae:	3a30      	subs	r2, #48	; 0x30
 80129b0:	2a09      	cmp	r2, #9
 80129b2:	d903      	bls.n	80129bc <_vfiprintf_r+0x1d0>
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d0c6      	beq.n	8012946 <_vfiprintf_r+0x15a>
 80129b8:	9105      	str	r1, [sp, #20]
 80129ba:	e7c4      	b.n	8012946 <_vfiprintf_r+0x15a>
 80129bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80129c0:	4604      	mov	r4, r0
 80129c2:	2301      	movs	r3, #1
 80129c4:	e7f0      	b.n	80129a8 <_vfiprintf_r+0x1bc>
 80129c6:	ab03      	add	r3, sp, #12
 80129c8:	9300      	str	r3, [sp, #0]
 80129ca:	462a      	mov	r2, r5
 80129cc:	4b12      	ldr	r3, [pc, #72]	; (8012a18 <_vfiprintf_r+0x22c>)
 80129ce:	a904      	add	r1, sp, #16
 80129d0:	4630      	mov	r0, r6
 80129d2:	f3af 8000 	nop.w
 80129d6:	4607      	mov	r7, r0
 80129d8:	1c78      	adds	r0, r7, #1
 80129da:	d1d6      	bne.n	801298a <_vfiprintf_r+0x19e>
 80129dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129de:	07d9      	lsls	r1, r3, #31
 80129e0:	d405      	bmi.n	80129ee <_vfiprintf_r+0x202>
 80129e2:	89ab      	ldrh	r3, [r5, #12]
 80129e4:	059a      	lsls	r2, r3, #22
 80129e6:	d402      	bmi.n	80129ee <_vfiprintf_r+0x202>
 80129e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129ea:	f7ff fda7 	bl	801253c <__retarget_lock_release_recursive>
 80129ee:	89ab      	ldrh	r3, [r5, #12]
 80129f0:	065b      	lsls	r3, r3, #25
 80129f2:	f53f af1d 	bmi.w	8012830 <_vfiprintf_r+0x44>
 80129f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129f8:	e71c      	b.n	8012834 <_vfiprintf_r+0x48>
 80129fa:	ab03      	add	r3, sp, #12
 80129fc:	9300      	str	r3, [sp, #0]
 80129fe:	462a      	mov	r2, r5
 8012a00:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <_vfiprintf_r+0x22c>)
 8012a02:	a904      	add	r1, sp, #16
 8012a04:	4630      	mov	r0, r6
 8012a06:	f000 f879 	bl	8012afc <_printf_i>
 8012a0a:	e7e4      	b.n	80129d6 <_vfiprintf_r+0x1ea>
 8012a0c:	0801623f 	.word	0x0801623f
 8012a10:	08016249 	.word	0x08016249
 8012a14:	00000000 	.word	0x00000000
 8012a18:	080127c7 	.word	0x080127c7
 8012a1c:	08016245 	.word	0x08016245

08012a20 <_printf_common>:
 8012a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a24:	4616      	mov	r6, r2
 8012a26:	4699      	mov	r9, r3
 8012a28:	688a      	ldr	r2, [r1, #8]
 8012a2a:	690b      	ldr	r3, [r1, #16]
 8012a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a30:	4293      	cmp	r3, r2
 8012a32:	bfb8      	it	lt
 8012a34:	4613      	movlt	r3, r2
 8012a36:	6033      	str	r3, [r6, #0]
 8012a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a3c:	4607      	mov	r7, r0
 8012a3e:	460c      	mov	r4, r1
 8012a40:	b10a      	cbz	r2, 8012a46 <_printf_common+0x26>
 8012a42:	3301      	adds	r3, #1
 8012a44:	6033      	str	r3, [r6, #0]
 8012a46:	6823      	ldr	r3, [r4, #0]
 8012a48:	0699      	lsls	r1, r3, #26
 8012a4a:	bf42      	ittt	mi
 8012a4c:	6833      	ldrmi	r3, [r6, #0]
 8012a4e:	3302      	addmi	r3, #2
 8012a50:	6033      	strmi	r3, [r6, #0]
 8012a52:	6825      	ldr	r5, [r4, #0]
 8012a54:	f015 0506 	ands.w	r5, r5, #6
 8012a58:	d106      	bne.n	8012a68 <_printf_common+0x48>
 8012a5a:	f104 0a19 	add.w	sl, r4, #25
 8012a5e:	68e3      	ldr	r3, [r4, #12]
 8012a60:	6832      	ldr	r2, [r6, #0]
 8012a62:	1a9b      	subs	r3, r3, r2
 8012a64:	42ab      	cmp	r3, r5
 8012a66:	dc26      	bgt.n	8012ab6 <_printf_common+0x96>
 8012a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a6c:	1e13      	subs	r3, r2, #0
 8012a6e:	6822      	ldr	r2, [r4, #0]
 8012a70:	bf18      	it	ne
 8012a72:	2301      	movne	r3, #1
 8012a74:	0692      	lsls	r2, r2, #26
 8012a76:	d42b      	bmi.n	8012ad0 <_printf_common+0xb0>
 8012a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	4638      	mov	r0, r7
 8012a80:	47c0      	blx	r8
 8012a82:	3001      	adds	r0, #1
 8012a84:	d01e      	beq.n	8012ac4 <_printf_common+0xa4>
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	6922      	ldr	r2, [r4, #16]
 8012a8a:	f003 0306 	and.w	r3, r3, #6
 8012a8e:	2b04      	cmp	r3, #4
 8012a90:	bf02      	ittt	eq
 8012a92:	68e5      	ldreq	r5, [r4, #12]
 8012a94:	6833      	ldreq	r3, [r6, #0]
 8012a96:	1aed      	subeq	r5, r5, r3
 8012a98:	68a3      	ldr	r3, [r4, #8]
 8012a9a:	bf0c      	ite	eq
 8012a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012aa0:	2500      	movne	r5, #0
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	bfc4      	itt	gt
 8012aa6:	1a9b      	subgt	r3, r3, r2
 8012aa8:	18ed      	addgt	r5, r5, r3
 8012aaa:	2600      	movs	r6, #0
 8012aac:	341a      	adds	r4, #26
 8012aae:	42b5      	cmp	r5, r6
 8012ab0:	d11a      	bne.n	8012ae8 <_printf_common+0xc8>
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	e008      	b.n	8012ac8 <_printf_common+0xa8>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	4652      	mov	r2, sl
 8012aba:	4649      	mov	r1, r9
 8012abc:	4638      	mov	r0, r7
 8012abe:	47c0      	blx	r8
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	d103      	bne.n	8012acc <_printf_common+0xac>
 8012ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012acc:	3501      	adds	r5, #1
 8012ace:	e7c6      	b.n	8012a5e <_printf_common+0x3e>
 8012ad0:	18e1      	adds	r1, r4, r3
 8012ad2:	1c5a      	adds	r2, r3, #1
 8012ad4:	2030      	movs	r0, #48	; 0x30
 8012ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ada:	4422      	add	r2, r4
 8012adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ae4:	3302      	adds	r3, #2
 8012ae6:	e7c7      	b.n	8012a78 <_printf_common+0x58>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	4622      	mov	r2, r4
 8012aec:	4649      	mov	r1, r9
 8012aee:	4638      	mov	r0, r7
 8012af0:	47c0      	blx	r8
 8012af2:	3001      	adds	r0, #1
 8012af4:	d0e6      	beq.n	8012ac4 <_printf_common+0xa4>
 8012af6:	3601      	adds	r6, #1
 8012af8:	e7d9      	b.n	8012aae <_printf_common+0x8e>
	...

08012afc <_printf_i>:
 8012afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b00:	7e0f      	ldrb	r7, [r1, #24]
 8012b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b04:	2f78      	cmp	r7, #120	; 0x78
 8012b06:	4691      	mov	r9, r2
 8012b08:	4680      	mov	r8, r0
 8012b0a:	460c      	mov	r4, r1
 8012b0c:	469a      	mov	sl, r3
 8012b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b12:	d807      	bhi.n	8012b24 <_printf_i+0x28>
 8012b14:	2f62      	cmp	r7, #98	; 0x62
 8012b16:	d80a      	bhi.n	8012b2e <_printf_i+0x32>
 8012b18:	2f00      	cmp	r7, #0
 8012b1a:	f000 80d4 	beq.w	8012cc6 <_printf_i+0x1ca>
 8012b1e:	2f58      	cmp	r7, #88	; 0x58
 8012b20:	f000 80c0 	beq.w	8012ca4 <_printf_i+0x1a8>
 8012b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b2c:	e03a      	b.n	8012ba4 <_printf_i+0xa8>
 8012b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b32:	2b15      	cmp	r3, #21
 8012b34:	d8f6      	bhi.n	8012b24 <_printf_i+0x28>
 8012b36:	a101      	add	r1, pc, #4	; (adr r1, 8012b3c <_printf_i+0x40>)
 8012b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b3c:	08012b95 	.word	0x08012b95
 8012b40:	08012ba9 	.word	0x08012ba9
 8012b44:	08012b25 	.word	0x08012b25
 8012b48:	08012b25 	.word	0x08012b25
 8012b4c:	08012b25 	.word	0x08012b25
 8012b50:	08012b25 	.word	0x08012b25
 8012b54:	08012ba9 	.word	0x08012ba9
 8012b58:	08012b25 	.word	0x08012b25
 8012b5c:	08012b25 	.word	0x08012b25
 8012b60:	08012b25 	.word	0x08012b25
 8012b64:	08012b25 	.word	0x08012b25
 8012b68:	08012cad 	.word	0x08012cad
 8012b6c:	08012bd5 	.word	0x08012bd5
 8012b70:	08012c67 	.word	0x08012c67
 8012b74:	08012b25 	.word	0x08012b25
 8012b78:	08012b25 	.word	0x08012b25
 8012b7c:	08012ccf 	.word	0x08012ccf
 8012b80:	08012b25 	.word	0x08012b25
 8012b84:	08012bd5 	.word	0x08012bd5
 8012b88:	08012b25 	.word	0x08012b25
 8012b8c:	08012b25 	.word	0x08012b25
 8012b90:	08012c6f 	.word	0x08012c6f
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	1d1a      	adds	r2, r3, #4
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	602a      	str	r2, [r5, #0]
 8012b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	e09f      	b.n	8012ce8 <_printf_i+0x1ec>
 8012ba8:	6820      	ldr	r0, [r4, #0]
 8012baa:	682b      	ldr	r3, [r5, #0]
 8012bac:	0607      	lsls	r7, r0, #24
 8012bae:	f103 0104 	add.w	r1, r3, #4
 8012bb2:	6029      	str	r1, [r5, #0]
 8012bb4:	d501      	bpl.n	8012bba <_printf_i+0xbe>
 8012bb6:	681e      	ldr	r6, [r3, #0]
 8012bb8:	e003      	b.n	8012bc2 <_printf_i+0xc6>
 8012bba:	0646      	lsls	r6, r0, #25
 8012bbc:	d5fb      	bpl.n	8012bb6 <_printf_i+0xba>
 8012bbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012bc2:	2e00      	cmp	r6, #0
 8012bc4:	da03      	bge.n	8012bce <_printf_i+0xd2>
 8012bc6:	232d      	movs	r3, #45	; 0x2d
 8012bc8:	4276      	negs	r6, r6
 8012bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bce:	485a      	ldr	r0, [pc, #360]	; (8012d38 <_printf_i+0x23c>)
 8012bd0:	230a      	movs	r3, #10
 8012bd2:	e012      	b.n	8012bfa <_printf_i+0xfe>
 8012bd4:	682b      	ldr	r3, [r5, #0]
 8012bd6:	6820      	ldr	r0, [r4, #0]
 8012bd8:	1d19      	adds	r1, r3, #4
 8012bda:	6029      	str	r1, [r5, #0]
 8012bdc:	0605      	lsls	r5, r0, #24
 8012bde:	d501      	bpl.n	8012be4 <_printf_i+0xe8>
 8012be0:	681e      	ldr	r6, [r3, #0]
 8012be2:	e002      	b.n	8012bea <_printf_i+0xee>
 8012be4:	0641      	lsls	r1, r0, #25
 8012be6:	d5fb      	bpl.n	8012be0 <_printf_i+0xe4>
 8012be8:	881e      	ldrh	r6, [r3, #0]
 8012bea:	4853      	ldr	r0, [pc, #332]	; (8012d38 <_printf_i+0x23c>)
 8012bec:	2f6f      	cmp	r7, #111	; 0x6f
 8012bee:	bf0c      	ite	eq
 8012bf0:	2308      	moveq	r3, #8
 8012bf2:	230a      	movne	r3, #10
 8012bf4:	2100      	movs	r1, #0
 8012bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012bfa:	6865      	ldr	r5, [r4, #4]
 8012bfc:	60a5      	str	r5, [r4, #8]
 8012bfe:	2d00      	cmp	r5, #0
 8012c00:	bfa2      	ittt	ge
 8012c02:	6821      	ldrge	r1, [r4, #0]
 8012c04:	f021 0104 	bicge.w	r1, r1, #4
 8012c08:	6021      	strge	r1, [r4, #0]
 8012c0a:	b90e      	cbnz	r6, 8012c10 <_printf_i+0x114>
 8012c0c:	2d00      	cmp	r5, #0
 8012c0e:	d04b      	beq.n	8012ca8 <_printf_i+0x1ac>
 8012c10:	4615      	mov	r5, r2
 8012c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c16:	fb03 6711 	mls	r7, r3, r1, r6
 8012c1a:	5dc7      	ldrb	r7, [r0, r7]
 8012c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c20:	4637      	mov	r7, r6
 8012c22:	42bb      	cmp	r3, r7
 8012c24:	460e      	mov	r6, r1
 8012c26:	d9f4      	bls.n	8012c12 <_printf_i+0x116>
 8012c28:	2b08      	cmp	r3, #8
 8012c2a:	d10b      	bne.n	8012c44 <_printf_i+0x148>
 8012c2c:	6823      	ldr	r3, [r4, #0]
 8012c2e:	07de      	lsls	r6, r3, #31
 8012c30:	d508      	bpl.n	8012c44 <_printf_i+0x148>
 8012c32:	6923      	ldr	r3, [r4, #16]
 8012c34:	6861      	ldr	r1, [r4, #4]
 8012c36:	4299      	cmp	r1, r3
 8012c38:	bfde      	ittt	le
 8012c3a:	2330      	movle	r3, #48	; 0x30
 8012c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012c44:	1b52      	subs	r2, r2, r5
 8012c46:	6122      	str	r2, [r4, #16]
 8012c48:	f8cd a000 	str.w	sl, [sp]
 8012c4c:	464b      	mov	r3, r9
 8012c4e:	aa03      	add	r2, sp, #12
 8012c50:	4621      	mov	r1, r4
 8012c52:	4640      	mov	r0, r8
 8012c54:	f7ff fee4 	bl	8012a20 <_printf_common>
 8012c58:	3001      	adds	r0, #1
 8012c5a:	d14a      	bne.n	8012cf2 <_printf_i+0x1f6>
 8012c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c60:	b004      	add	sp, #16
 8012c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	f043 0320 	orr.w	r3, r3, #32
 8012c6c:	6023      	str	r3, [r4, #0]
 8012c6e:	4833      	ldr	r0, [pc, #204]	; (8012d3c <_printf_i+0x240>)
 8012c70:	2778      	movs	r7, #120	; 0x78
 8012c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	6829      	ldr	r1, [r5, #0]
 8012c7a:	061f      	lsls	r7, r3, #24
 8012c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012c80:	d402      	bmi.n	8012c88 <_printf_i+0x18c>
 8012c82:	065f      	lsls	r7, r3, #25
 8012c84:	bf48      	it	mi
 8012c86:	b2b6      	uxthmi	r6, r6
 8012c88:	07df      	lsls	r7, r3, #31
 8012c8a:	bf48      	it	mi
 8012c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8012c90:	6029      	str	r1, [r5, #0]
 8012c92:	bf48      	it	mi
 8012c94:	6023      	strmi	r3, [r4, #0]
 8012c96:	b91e      	cbnz	r6, 8012ca0 <_printf_i+0x1a4>
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	f023 0320 	bic.w	r3, r3, #32
 8012c9e:	6023      	str	r3, [r4, #0]
 8012ca0:	2310      	movs	r3, #16
 8012ca2:	e7a7      	b.n	8012bf4 <_printf_i+0xf8>
 8012ca4:	4824      	ldr	r0, [pc, #144]	; (8012d38 <_printf_i+0x23c>)
 8012ca6:	e7e4      	b.n	8012c72 <_printf_i+0x176>
 8012ca8:	4615      	mov	r5, r2
 8012caa:	e7bd      	b.n	8012c28 <_printf_i+0x12c>
 8012cac:	682b      	ldr	r3, [r5, #0]
 8012cae:	6826      	ldr	r6, [r4, #0]
 8012cb0:	6961      	ldr	r1, [r4, #20]
 8012cb2:	1d18      	adds	r0, r3, #4
 8012cb4:	6028      	str	r0, [r5, #0]
 8012cb6:	0635      	lsls	r5, r6, #24
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	d501      	bpl.n	8012cc0 <_printf_i+0x1c4>
 8012cbc:	6019      	str	r1, [r3, #0]
 8012cbe:	e002      	b.n	8012cc6 <_printf_i+0x1ca>
 8012cc0:	0670      	lsls	r0, r6, #25
 8012cc2:	d5fb      	bpl.n	8012cbc <_printf_i+0x1c0>
 8012cc4:	8019      	strh	r1, [r3, #0]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	6123      	str	r3, [r4, #16]
 8012cca:	4615      	mov	r5, r2
 8012ccc:	e7bc      	b.n	8012c48 <_printf_i+0x14c>
 8012cce:	682b      	ldr	r3, [r5, #0]
 8012cd0:	1d1a      	adds	r2, r3, #4
 8012cd2:	602a      	str	r2, [r5, #0]
 8012cd4:	681d      	ldr	r5, [r3, #0]
 8012cd6:	6862      	ldr	r2, [r4, #4]
 8012cd8:	2100      	movs	r1, #0
 8012cda:	4628      	mov	r0, r5
 8012cdc:	f7ed fb00 	bl	80002e0 <memchr>
 8012ce0:	b108      	cbz	r0, 8012ce6 <_printf_i+0x1ea>
 8012ce2:	1b40      	subs	r0, r0, r5
 8012ce4:	6060      	str	r0, [r4, #4]
 8012ce6:	6863      	ldr	r3, [r4, #4]
 8012ce8:	6123      	str	r3, [r4, #16]
 8012cea:	2300      	movs	r3, #0
 8012cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cf0:	e7aa      	b.n	8012c48 <_printf_i+0x14c>
 8012cf2:	6923      	ldr	r3, [r4, #16]
 8012cf4:	462a      	mov	r2, r5
 8012cf6:	4649      	mov	r1, r9
 8012cf8:	4640      	mov	r0, r8
 8012cfa:	47d0      	blx	sl
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d0ad      	beq.n	8012c5c <_printf_i+0x160>
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	079b      	lsls	r3, r3, #30
 8012d04:	d413      	bmi.n	8012d2e <_printf_i+0x232>
 8012d06:	68e0      	ldr	r0, [r4, #12]
 8012d08:	9b03      	ldr	r3, [sp, #12]
 8012d0a:	4298      	cmp	r0, r3
 8012d0c:	bfb8      	it	lt
 8012d0e:	4618      	movlt	r0, r3
 8012d10:	e7a6      	b.n	8012c60 <_printf_i+0x164>
 8012d12:	2301      	movs	r3, #1
 8012d14:	4632      	mov	r2, r6
 8012d16:	4649      	mov	r1, r9
 8012d18:	4640      	mov	r0, r8
 8012d1a:	47d0      	blx	sl
 8012d1c:	3001      	adds	r0, #1
 8012d1e:	d09d      	beq.n	8012c5c <_printf_i+0x160>
 8012d20:	3501      	adds	r5, #1
 8012d22:	68e3      	ldr	r3, [r4, #12]
 8012d24:	9903      	ldr	r1, [sp, #12]
 8012d26:	1a5b      	subs	r3, r3, r1
 8012d28:	42ab      	cmp	r3, r5
 8012d2a:	dcf2      	bgt.n	8012d12 <_printf_i+0x216>
 8012d2c:	e7eb      	b.n	8012d06 <_printf_i+0x20a>
 8012d2e:	2500      	movs	r5, #0
 8012d30:	f104 0619 	add.w	r6, r4, #25
 8012d34:	e7f5      	b.n	8012d22 <_printf_i+0x226>
 8012d36:	bf00      	nop
 8012d38:	08016250 	.word	0x08016250
 8012d3c:	08016261 	.word	0x08016261

08012d40 <__sflush_r>:
 8012d40:	898a      	ldrh	r2, [r1, #12]
 8012d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d46:	4605      	mov	r5, r0
 8012d48:	0710      	lsls	r0, r2, #28
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	d458      	bmi.n	8012e00 <__sflush_r+0xc0>
 8012d4e:	684b      	ldr	r3, [r1, #4]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	dc05      	bgt.n	8012d60 <__sflush_r+0x20>
 8012d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	dc02      	bgt.n	8012d60 <__sflush_r+0x20>
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d62:	2e00      	cmp	r6, #0
 8012d64:	d0f9      	beq.n	8012d5a <__sflush_r+0x1a>
 8012d66:	2300      	movs	r3, #0
 8012d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d6c:	682f      	ldr	r7, [r5, #0]
 8012d6e:	6a21      	ldr	r1, [r4, #32]
 8012d70:	602b      	str	r3, [r5, #0]
 8012d72:	d032      	beq.n	8012dda <__sflush_r+0x9a>
 8012d74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d76:	89a3      	ldrh	r3, [r4, #12]
 8012d78:	075a      	lsls	r2, r3, #29
 8012d7a:	d505      	bpl.n	8012d88 <__sflush_r+0x48>
 8012d7c:	6863      	ldr	r3, [r4, #4]
 8012d7e:	1ac0      	subs	r0, r0, r3
 8012d80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d82:	b10b      	cbz	r3, 8012d88 <__sflush_r+0x48>
 8012d84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d86:	1ac0      	subs	r0, r0, r3
 8012d88:	2300      	movs	r3, #0
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d8e:	6a21      	ldr	r1, [r4, #32]
 8012d90:	4628      	mov	r0, r5
 8012d92:	47b0      	blx	r6
 8012d94:	1c43      	adds	r3, r0, #1
 8012d96:	89a3      	ldrh	r3, [r4, #12]
 8012d98:	d106      	bne.n	8012da8 <__sflush_r+0x68>
 8012d9a:	6829      	ldr	r1, [r5, #0]
 8012d9c:	291d      	cmp	r1, #29
 8012d9e:	d82b      	bhi.n	8012df8 <__sflush_r+0xb8>
 8012da0:	4a29      	ldr	r2, [pc, #164]	; (8012e48 <__sflush_r+0x108>)
 8012da2:	410a      	asrs	r2, r1
 8012da4:	07d6      	lsls	r6, r2, #31
 8012da6:	d427      	bmi.n	8012df8 <__sflush_r+0xb8>
 8012da8:	2200      	movs	r2, #0
 8012daa:	6062      	str	r2, [r4, #4]
 8012dac:	04d9      	lsls	r1, r3, #19
 8012dae:	6922      	ldr	r2, [r4, #16]
 8012db0:	6022      	str	r2, [r4, #0]
 8012db2:	d504      	bpl.n	8012dbe <__sflush_r+0x7e>
 8012db4:	1c42      	adds	r2, r0, #1
 8012db6:	d101      	bne.n	8012dbc <__sflush_r+0x7c>
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	b903      	cbnz	r3, 8012dbe <__sflush_r+0x7e>
 8012dbc:	6560      	str	r0, [r4, #84]	; 0x54
 8012dbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dc0:	602f      	str	r7, [r5, #0]
 8012dc2:	2900      	cmp	r1, #0
 8012dc4:	d0c9      	beq.n	8012d5a <__sflush_r+0x1a>
 8012dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dca:	4299      	cmp	r1, r3
 8012dcc:	d002      	beq.n	8012dd4 <__sflush_r+0x94>
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f7ff fbe2 	bl	8012598 <_free_r>
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	6360      	str	r0, [r4, #52]	; 0x34
 8012dd8:	e7c0      	b.n	8012d5c <__sflush_r+0x1c>
 8012dda:	2301      	movs	r3, #1
 8012ddc:	4628      	mov	r0, r5
 8012dde:	47b0      	blx	r6
 8012de0:	1c41      	adds	r1, r0, #1
 8012de2:	d1c8      	bne.n	8012d76 <__sflush_r+0x36>
 8012de4:	682b      	ldr	r3, [r5, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d0c5      	beq.n	8012d76 <__sflush_r+0x36>
 8012dea:	2b1d      	cmp	r3, #29
 8012dec:	d001      	beq.n	8012df2 <__sflush_r+0xb2>
 8012dee:	2b16      	cmp	r3, #22
 8012df0:	d101      	bne.n	8012df6 <__sflush_r+0xb6>
 8012df2:	602f      	str	r7, [r5, #0]
 8012df4:	e7b1      	b.n	8012d5a <__sflush_r+0x1a>
 8012df6:	89a3      	ldrh	r3, [r4, #12]
 8012df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfc:	81a3      	strh	r3, [r4, #12]
 8012dfe:	e7ad      	b.n	8012d5c <__sflush_r+0x1c>
 8012e00:	690f      	ldr	r7, [r1, #16]
 8012e02:	2f00      	cmp	r7, #0
 8012e04:	d0a9      	beq.n	8012d5a <__sflush_r+0x1a>
 8012e06:	0793      	lsls	r3, r2, #30
 8012e08:	680e      	ldr	r6, [r1, #0]
 8012e0a:	bf08      	it	eq
 8012e0c:	694b      	ldreq	r3, [r1, #20]
 8012e0e:	600f      	str	r7, [r1, #0]
 8012e10:	bf18      	it	ne
 8012e12:	2300      	movne	r3, #0
 8012e14:	eba6 0807 	sub.w	r8, r6, r7
 8012e18:	608b      	str	r3, [r1, #8]
 8012e1a:	f1b8 0f00 	cmp.w	r8, #0
 8012e1e:	dd9c      	ble.n	8012d5a <__sflush_r+0x1a>
 8012e20:	6a21      	ldr	r1, [r4, #32]
 8012e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e24:	4643      	mov	r3, r8
 8012e26:	463a      	mov	r2, r7
 8012e28:	4628      	mov	r0, r5
 8012e2a:	47b0      	blx	r6
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	dc06      	bgt.n	8012e3e <__sflush_r+0xfe>
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e36:	81a3      	strh	r3, [r4, #12]
 8012e38:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3c:	e78e      	b.n	8012d5c <__sflush_r+0x1c>
 8012e3e:	4407      	add	r7, r0
 8012e40:	eba8 0800 	sub.w	r8, r8, r0
 8012e44:	e7e9      	b.n	8012e1a <__sflush_r+0xda>
 8012e46:	bf00      	nop
 8012e48:	dfbffffe 	.word	0xdfbffffe

08012e4c <_fflush_r>:
 8012e4c:	b538      	push	{r3, r4, r5, lr}
 8012e4e:	690b      	ldr	r3, [r1, #16]
 8012e50:	4605      	mov	r5, r0
 8012e52:	460c      	mov	r4, r1
 8012e54:	b913      	cbnz	r3, 8012e5c <_fflush_r+0x10>
 8012e56:	2500      	movs	r5, #0
 8012e58:	4628      	mov	r0, r5
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}
 8012e5c:	b118      	cbz	r0, 8012e66 <_fflush_r+0x1a>
 8012e5e:	6a03      	ldr	r3, [r0, #32]
 8012e60:	b90b      	cbnz	r3, 8012e66 <_fflush_r+0x1a>
 8012e62:	f7ff fa5b 	bl	801231c <__sinit>
 8012e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d0f3      	beq.n	8012e56 <_fflush_r+0xa>
 8012e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e70:	07d0      	lsls	r0, r2, #31
 8012e72:	d404      	bmi.n	8012e7e <_fflush_r+0x32>
 8012e74:	0599      	lsls	r1, r3, #22
 8012e76:	d402      	bmi.n	8012e7e <_fflush_r+0x32>
 8012e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e7a:	f7ff fb5e 	bl	801253a <__retarget_lock_acquire_recursive>
 8012e7e:	4628      	mov	r0, r5
 8012e80:	4621      	mov	r1, r4
 8012e82:	f7ff ff5d 	bl	8012d40 <__sflush_r>
 8012e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e88:	07da      	lsls	r2, r3, #31
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	d4e4      	bmi.n	8012e58 <_fflush_r+0xc>
 8012e8e:	89a3      	ldrh	r3, [r4, #12]
 8012e90:	059b      	lsls	r3, r3, #22
 8012e92:	d4e1      	bmi.n	8012e58 <_fflush_r+0xc>
 8012e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e96:	f7ff fb51 	bl	801253c <__retarget_lock_release_recursive>
 8012e9a:	e7dd      	b.n	8012e58 <_fflush_r+0xc>

08012e9c <fiprintf>:
 8012e9c:	b40e      	push	{r1, r2, r3}
 8012e9e:	b503      	push	{r0, r1, lr}
 8012ea0:	4601      	mov	r1, r0
 8012ea2:	ab03      	add	r3, sp, #12
 8012ea4:	4805      	ldr	r0, [pc, #20]	; (8012ebc <fiprintf+0x20>)
 8012ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eaa:	6800      	ldr	r0, [r0, #0]
 8012eac:	9301      	str	r3, [sp, #4]
 8012eae:	f7ff fc9d 	bl	80127ec <_vfiprintf_r>
 8012eb2:	b002      	add	sp, #8
 8012eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012eb8:	b003      	add	sp, #12
 8012eba:	4770      	bx	lr
 8012ebc:	24000088 	.word	0x24000088

08012ec0 <__swbuf_r>:
 8012ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ec2:	460e      	mov	r6, r1
 8012ec4:	4614      	mov	r4, r2
 8012ec6:	4605      	mov	r5, r0
 8012ec8:	b118      	cbz	r0, 8012ed2 <__swbuf_r+0x12>
 8012eca:	6a03      	ldr	r3, [r0, #32]
 8012ecc:	b90b      	cbnz	r3, 8012ed2 <__swbuf_r+0x12>
 8012ece:	f7ff fa25 	bl	801231c <__sinit>
 8012ed2:	69a3      	ldr	r3, [r4, #24]
 8012ed4:	60a3      	str	r3, [r4, #8]
 8012ed6:	89a3      	ldrh	r3, [r4, #12]
 8012ed8:	071a      	lsls	r2, r3, #28
 8012eda:	d525      	bpl.n	8012f28 <__swbuf_r+0x68>
 8012edc:	6923      	ldr	r3, [r4, #16]
 8012ede:	b31b      	cbz	r3, 8012f28 <__swbuf_r+0x68>
 8012ee0:	6823      	ldr	r3, [r4, #0]
 8012ee2:	6922      	ldr	r2, [r4, #16]
 8012ee4:	1a98      	subs	r0, r3, r2
 8012ee6:	6963      	ldr	r3, [r4, #20]
 8012ee8:	b2f6      	uxtb	r6, r6
 8012eea:	4283      	cmp	r3, r0
 8012eec:	4637      	mov	r7, r6
 8012eee:	dc04      	bgt.n	8012efa <__swbuf_r+0x3a>
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f7ff ffaa 	bl	8012e4c <_fflush_r>
 8012ef8:	b9e0      	cbnz	r0, 8012f34 <__swbuf_r+0x74>
 8012efa:	68a3      	ldr	r3, [r4, #8]
 8012efc:	3b01      	subs	r3, #1
 8012efe:	60a3      	str	r3, [r4, #8]
 8012f00:	6823      	ldr	r3, [r4, #0]
 8012f02:	1c5a      	adds	r2, r3, #1
 8012f04:	6022      	str	r2, [r4, #0]
 8012f06:	701e      	strb	r6, [r3, #0]
 8012f08:	6962      	ldr	r2, [r4, #20]
 8012f0a:	1c43      	adds	r3, r0, #1
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d004      	beq.n	8012f1a <__swbuf_r+0x5a>
 8012f10:	89a3      	ldrh	r3, [r4, #12]
 8012f12:	07db      	lsls	r3, r3, #31
 8012f14:	d506      	bpl.n	8012f24 <__swbuf_r+0x64>
 8012f16:	2e0a      	cmp	r6, #10
 8012f18:	d104      	bne.n	8012f24 <__swbuf_r+0x64>
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f7ff ff95 	bl	8012e4c <_fflush_r>
 8012f22:	b938      	cbnz	r0, 8012f34 <__swbuf_r+0x74>
 8012f24:	4638      	mov	r0, r7
 8012f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f28:	4621      	mov	r1, r4
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f000 f806 	bl	8012f3c <__swsetup_r>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d0d5      	beq.n	8012ee0 <__swbuf_r+0x20>
 8012f34:	f04f 37ff 	mov.w	r7, #4294967295
 8012f38:	e7f4      	b.n	8012f24 <__swbuf_r+0x64>
	...

08012f3c <__swsetup_r>:
 8012f3c:	b538      	push	{r3, r4, r5, lr}
 8012f3e:	4b2a      	ldr	r3, [pc, #168]	; (8012fe8 <__swsetup_r+0xac>)
 8012f40:	4605      	mov	r5, r0
 8012f42:	6818      	ldr	r0, [r3, #0]
 8012f44:	460c      	mov	r4, r1
 8012f46:	b118      	cbz	r0, 8012f50 <__swsetup_r+0x14>
 8012f48:	6a03      	ldr	r3, [r0, #32]
 8012f4a:	b90b      	cbnz	r3, 8012f50 <__swsetup_r+0x14>
 8012f4c:	f7ff f9e6 	bl	801231c <__sinit>
 8012f50:	89a3      	ldrh	r3, [r4, #12]
 8012f52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f56:	0718      	lsls	r0, r3, #28
 8012f58:	d422      	bmi.n	8012fa0 <__swsetup_r+0x64>
 8012f5a:	06d9      	lsls	r1, r3, #27
 8012f5c:	d407      	bmi.n	8012f6e <__swsetup_r+0x32>
 8012f5e:	2309      	movs	r3, #9
 8012f60:	602b      	str	r3, [r5, #0]
 8012f62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012f66:	81a3      	strh	r3, [r4, #12]
 8012f68:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6c:	e034      	b.n	8012fd8 <__swsetup_r+0x9c>
 8012f6e:	0758      	lsls	r0, r3, #29
 8012f70:	d512      	bpl.n	8012f98 <__swsetup_r+0x5c>
 8012f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f74:	b141      	cbz	r1, 8012f88 <__swsetup_r+0x4c>
 8012f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f7a:	4299      	cmp	r1, r3
 8012f7c:	d002      	beq.n	8012f84 <__swsetup_r+0x48>
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f7ff fb0a 	bl	8012598 <_free_r>
 8012f84:	2300      	movs	r3, #0
 8012f86:	6363      	str	r3, [r4, #52]	; 0x34
 8012f88:	89a3      	ldrh	r3, [r4, #12]
 8012f8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f8e:	81a3      	strh	r3, [r4, #12]
 8012f90:	2300      	movs	r3, #0
 8012f92:	6063      	str	r3, [r4, #4]
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	6023      	str	r3, [r4, #0]
 8012f98:	89a3      	ldrh	r3, [r4, #12]
 8012f9a:	f043 0308 	orr.w	r3, r3, #8
 8012f9e:	81a3      	strh	r3, [r4, #12]
 8012fa0:	6923      	ldr	r3, [r4, #16]
 8012fa2:	b94b      	cbnz	r3, 8012fb8 <__swsetup_r+0x7c>
 8012fa4:	89a3      	ldrh	r3, [r4, #12]
 8012fa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fae:	d003      	beq.n	8012fb8 <__swsetup_r+0x7c>
 8012fb0:	4621      	mov	r1, r4
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f000 f857 	bl	8013066 <__smakebuf_r>
 8012fb8:	89a0      	ldrh	r0, [r4, #12]
 8012fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fbe:	f010 0301 	ands.w	r3, r0, #1
 8012fc2:	d00a      	beq.n	8012fda <__swsetup_r+0x9e>
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	60a3      	str	r3, [r4, #8]
 8012fc8:	6963      	ldr	r3, [r4, #20]
 8012fca:	425b      	negs	r3, r3
 8012fcc:	61a3      	str	r3, [r4, #24]
 8012fce:	6923      	ldr	r3, [r4, #16]
 8012fd0:	b943      	cbnz	r3, 8012fe4 <__swsetup_r+0xa8>
 8012fd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012fd6:	d1c4      	bne.n	8012f62 <__swsetup_r+0x26>
 8012fd8:	bd38      	pop	{r3, r4, r5, pc}
 8012fda:	0781      	lsls	r1, r0, #30
 8012fdc:	bf58      	it	pl
 8012fde:	6963      	ldrpl	r3, [r4, #20]
 8012fe0:	60a3      	str	r3, [r4, #8]
 8012fe2:	e7f4      	b.n	8012fce <__swsetup_r+0x92>
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	e7f7      	b.n	8012fd8 <__swsetup_r+0x9c>
 8012fe8:	24000088 	.word	0x24000088

08012fec <_sbrk_r>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	4d06      	ldr	r5, [pc, #24]	; (8013008 <_sbrk_r+0x1c>)
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	4608      	mov	r0, r1
 8012ff6:	602b      	str	r3, [r5, #0]
 8012ff8:	f7ed fe6a 	bl	8000cd0 <_sbrk>
 8012ffc:	1c43      	adds	r3, r0, #1
 8012ffe:	d102      	bne.n	8013006 <_sbrk_r+0x1a>
 8013000:	682b      	ldr	r3, [r5, #0]
 8013002:	b103      	cbz	r3, 8013006 <_sbrk_r+0x1a>
 8013004:	6023      	str	r3, [r4, #0]
 8013006:	bd38      	pop	{r3, r4, r5, pc}
 8013008:	240083c4 	.word	0x240083c4

0801300c <abort>:
 801300c:	b508      	push	{r3, lr}
 801300e:	2006      	movs	r0, #6
 8013010:	f000 f88e 	bl	8013130 <raise>
 8013014:	2001      	movs	r0, #1
 8013016:	f7ed fde3 	bl	8000be0 <_exit>

0801301a <__swhatbuf_r>:
 801301a:	b570      	push	{r4, r5, r6, lr}
 801301c:	460c      	mov	r4, r1
 801301e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013022:	2900      	cmp	r1, #0
 8013024:	b096      	sub	sp, #88	; 0x58
 8013026:	4615      	mov	r5, r2
 8013028:	461e      	mov	r6, r3
 801302a:	da0d      	bge.n	8013048 <__swhatbuf_r+0x2e>
 801302c:	89a3      	ldrh	r3, [r4, #12]
 801302e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013032:	f04f 0100 	mov.w	r1, #0
 8013036:	bf0c      	ite	eq
 8013038:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801303c:	2340      	movne	r3, #64	; 0x40
 801303e:	2000      	movs	r0, #0
 8013040:	6031      	str	r1, [r6, #0]
 8013042:	602b      	str	r3, [r5, #0]
 8013044:	b016      	add	sp, #88	; 0x58
 8013046:	bd70      	pop	{r4, r5, r6, pc}
 8013048:	466a      	mov	r2, sp
 801304a:	f000 f879 	bl	8013140 <_fstat_r>
 801304e:	2800      	cmp	r0, #0
 8013050:	dbec      	blt.n	801302c <__swhatbuf_r+0x12>
 8013052:	9901      	ldr	r1, [sp, #4]
 8013054:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013058:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801305c:	4259      	negs	r1, r3
 801305e:	4159      	adcs	r1, r3
 8013060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013064:	e7eb      	b.n	801303e <__swhatbuf_r+0x24>

08013066 <__smakebuf_r>:
 8013066:	898b      	ldrh	r3, [r1, #12]
 8013068:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801306a:	079d      	lsls	r5, r3, #30
 801306c:	4606      	mov	r6, r0
 801306e:	460c      	mov	r4, r1
 8013070:	d507      	bpl.n	8013082 <__smakebuf_r+0x1c>
 8013072:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013076:	6023      	str	r3, [r4, #0]
 8013078:	6123      	str	r3, [r4, #16]
 801307a:	2301      	movs	r3, #1
 801307c:	6163      	str	r3, [r4, #20]
 801307e:	b002      	add	sp, #8
 8013080:	bd70      	pop	{r4, r5, r6, pc}
 8013082:	ab01      	add	r3, sp, #4
 8013084:	466a      	mov	r2, sp
 8013086:	f7ff ffc8 	bl	801301a <__swhatbuf_r>
 801308a:	9900      	ldr	r1, [sp, #0]
 801308c:	4605      	mov	r5, r0
 801308e:	4630      	mov	r0, r6
 8013090:	f7ff faf6 	bl	8012680 <_malloc_r>
 8013094:	b948      	cbnz	r0, 80130aa <__smakebuf_r+0x44>
 8013096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801309a:	059a      	lsls	r2, r3, #22
 801309c:	d4ef      	bmi.n	801307e <__smakebuf_r+0x18>
 801309e:	f023 0303 	bic.w	r3, r3, #3
 80130a2:	f043 0302 	orr.w	r3, r3, #2
 80130a6:	81a3      	strh	r3, [r4, #12]
 80130a8:	e7e3      	b.n	8013072 <__smakebuf_r+0xc>
 80130aa:	89a3      	ldrh	r3, [r4, #12]
 80130ac:	6020      	str	r0, [r4, #0]
 80130ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130b2:	81a3      	strh	r3, [r4, #12]
 80130b4:	9b00      	ldr	r3, [sp, #0]
 80130b6:	6163      	str	r3, [r4, #20]
 80130b8:	9b01      	ldr	r3, [sp, #4]
 80130ba:	6120      	str	r0, [r4, #16]
 80130bc:	b15b      	cbz	r3, 80130d6 <__smakebuf_r+0x70>
 80130be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130c2:	4630      	mov	r0, r6
 80130c4:	f000 f84e 	bl	8013164 <_isatty_r>
 80130c8:	b128      	cbz	r0, 80130d6 <__smakebuf_r+0x70>
 80130ca:	89a3      	ldrh	r3, [r4, #12]
 80130cc:	f023 0303 	bic.w	r3, r3, #3
 80130d0:	f043 0301 	orr.w	r3, r3, #1
 80130d4:	81a3      	strh	r3, [r4, #12]
 80130d6:	89a3      	ldrh	r3, [r4, #12]
 80130d8:	431d      	orrs	r5, r3
 80130da:	81a5      	strh	r5, [r4, #12]
 80130dc:	e7cf      	b.n	801307e <__smakebuf_r+0x18>

080130de <_raise_r>:
 80130de:	291f      	cmp	r1, #31
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	4604      	mov	r4, r0
 80130e4:	460d      	mov	r5, r1
 80130e6:	d904      	bls.n	80130f2 <_raise_r+0x14>
 80130e8:	2316      	movs	r3, #22
 80130ea:	6003      	str	r3, [r0, #0]
 80130ec:	f04f 30ff 	mov.w	r0, #4294967295
 80130f0:	bd38      	pop	{r3, r4, r5, pc}
 80130f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80130f4:	b112      	cbz	r2, 80130fc <_raise_r+0x1e>
 80130f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130fa:	b94b      	cbnz	r3, 8013110 <_raise_r+0x32>
 80130fc:	4620      	mov	r0, r4
 80130fe:	f000 f853 	bl	80131a8 <_getpid_r>
 8013102:	462a      	mov	r2, r5
 8013104:	4601      	mov	r1, r0
 8013106:	4620      	mov	r0, r4
 8013108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801310c:	f000 b83a 	b.w	8013184 <_kill_r>
 8013110:	2b01      	cmp	r3, #1
 8013112:	d00a      	beq.n	801312a <_raise_r+0x4c>
 8013114:	1c59      	adds	r1, r3, #1
 8013116:	d103      	bne.n	8013120 <_raise_r+0x42>
 8013118:	2316      	movs	r3, #22
 801311a:	6003      	str	r3, [r0, #0]
 801311c:	2001      	movs	r0, #1
 801311e:	e7e7      	b.n	80130f0 <_raise_r+0x12>
 8013120:	2400      	movs	r4, #0
 8013122:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013126:	4628      	mov	r0, r5
 8013128:	4798      	blx	r3
 801312a:	2000      	movs	r0, #0
 801312c:	e7e0      	b.n	80130f0 <_raise_r+0x12>
	...

08013130 <raise>:
 8013130:	4b02      	ldr	r3, [pc, #8]	; (801313c <raise+0xc>)
 8013132:	4601      	mov	r1, r0
 8013134:	6818      	ldr	r0, [r3, #0]
 8013136:	f7ff bfd2 	b.w	80130de <_raise_r>
 801313a:	bf00      	nop
 801313c:	24000088 	.word	0x24000088

08013140 <_fstat_r>:
 8013140:	b538      	push	{r3, r4, r5, lr}
 8013142:	4d07      	ldr	r5, [pc, #28]	; (8013160 <_fstat_r+0x20>)
 8013144:	2300      	movs	r3, #0
 8013146:	4604      	mov	r4, r0
 8013148:	4608      	mov	r0, r1
 801314a:	4611      	mov	r1, r2
 801314c:	602b      	str	r3, [r5, #0]
 801314e:	f7ed fd96 	bl	8000c7e <_fstat>
 8013152:	1c43      	adds	r3, r0, #1
 8013154:	d102      	bne.n	801315c <_fstat_r+0x1c>
 8013156:	682b      	ldr	r3, [r5, #0]
 8013158:	b103      	cbz	r3, 801315c <_fstat_r+0x1c>
 801315a:	6023      	str	r3, [r4, #0]
 801315c:	bd38      	pop	{r3, r4, r5, pc}
 801315e:	bf00      	nop
 8013160:	240083c4 	.word	0x240083c4

08013164 <_isatty_r>:
 8013164:	b538      	push	{r3, r4, r5, lr}
 8013166:	4d06      	ldr	r5, [pc, #24]	; (8013180 <_isatty_r+0x1c>)
 8013168:	2300      	movs	r3, #0
 801316a:	4604      	mov	r4, r0
 801316c:	4608      	mov	r0, r1
 801316e:	602b      	str	r3, [r5, #0]
 8013170:	f7ed fd95 	bl	8000c9e <_isatty>
 8013174:	1c43      	adds	r3, r0, #1
 8013176:	d102      	bne.n	801317e <_isatty_r+0x1a>
 8013178:	682b      	ldr	r3, [r5, #0]
 801317a:	b103      	cbz	r3, 801317e <_isatty_r+0x1a>
 801317c:	6023      	str	r3, [r4, #0]
 801317e:	bd38      	pop	{r3, r4, r5, pc}
 8013180:	240083c4 	.word	0x240083c4

08013184 <_kill_r>:
 8013184:	b538      	push	{r3, r4, r5, lr}
 8013186:	4d07      	ldr	r5, [pc, #28]	; (80131a4 <_kill_r+0x20>)
 8013188:	2300      	movs	r3, #0
 801318a:	4604      	mov	r4, r0
 801318c:	4608      	mov	r0, r1
 801318e:	4611      	mov	r1, r2
 8013190:	602b      	str	r3, [r5, #0]
 8013192:	f7ed fd13 	bl	8000bbc <_kill>
 8013196:	1c43      	adds	r3, r0, #1
 8013198:	d102      	bne.n	80131a0 <_kill_r+0x1c>
 801319a:	682b      	ldr	r3, [r5, #0]
 801319c:	b103      	cbz	r3, 80131a0 <_kill_r+0x1c>
 801319e:	6023      	str	r3, [r4, #0]
 80131a0:	bd38      	pop	{r3, r4, r5, pc}
 80131a2:	bf00      	nop
 80131a4:	240083c4 	.word	0x240083c4

080131a8 <_getpid_r>:
 80131a8:	f7ed bd00 	b.w	8000bac <_getpid>

080131ac <_init>:
 80131ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ae:	bf00      	nop
 80131b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131b2:	bc08      	pop	{r3}
 80131b4:	469e      	mov	lr, r3
 80131b6:	4770      	bx	lr

080131b8 <_fini>:
 80131b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ba:	bf00      	nop
 80131bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131be:	bc08      	pop	{r3}
 80131c0:	469e      	mov	lr, r3
 80131c2:	4770      	bx	lr
