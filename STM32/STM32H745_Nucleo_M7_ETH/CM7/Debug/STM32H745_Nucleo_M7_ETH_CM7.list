
STM32H745_Nucleo_M7_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019584  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004090  08019828  08019828  00029828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d8b8  0801d8b8  000300ac  2**0
                  CONTENTS
  4 .ARM          00000000  0801d8b8  0801d8b8  000300ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d8b8  0801d8b8  000300ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d8b8  0801d8b8  0002d8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d8bc  0801d8bc  0002d8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  24000000  0801d8c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001087c  240000ac  0801d96c  000300ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24010928  0801d96c  00030928  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a4b8  00000000  00000000  000300da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008485  00000000  00000000  0006a592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002738  00000000  00000000  00072a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002570  00000000  00000000  00075150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049e3a  00000000  00000000  000776c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d46d  00000000  00000000  000c14fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a5669  00000000  00000000  000fe967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002a3fd0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ac70  00000000  00000000  002a4020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000ac 	.word	0x240000ac
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801980c 	.word	0x0801980c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b0 	.word	0x240000b0
 80002dc:	0801980c 	.word	0x0801980c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <updateCurrentTime>:
#include "Modbus.h"
void updateCurrentTime(struct Time *currentTime, unsigned int milliseconds)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b08b      	sub	sp, #44	; 0x2c
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
    currentTime->miliSeconds += milliseconds;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	441a      	add	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	60da      	str	r2, [r3, #12]

    if (currentTime->miliSeconds >= 1000)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ca:	f0c0 809f 	bcc.w	800060c <updateCurrentTime+0x160>
    {
        currentTime->miliSeconds -= 1000;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	60da      	str	r2, [r3, #12]
        currentTime->seconds++;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]

        if (currentTime->seconds >= 60)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	2b3b      	cmp	r3, #59	; 0x3b
 80004ea:	f240 808f 	bls.w	800060c <updateCurrentTime+0x160>
        {
            currentTime->seconds = 0;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
            currentTime->minutes++;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	605a      	str	r2, [r3, #4]

            if (currentTime->minutes >= 60)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	2b3b      	cmp	r3, #59	; 0x3b
 8000504:	f240 8082 	bls.w	800060c <updateCurrentTime+0x160>
            {
                currentTime->minutes = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
                currentTime->hours++;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	601a      	str	r2, [r3, #0]

                if (currentTime->hours >= 24)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b17      	cmp	r3, #23
 800051e:	d975      	bls.n	800060c <updateCurrentTime+0x160>
                {
                    // Obliczamy, ile dni minęło od 1 sierpnia 2020 roku
                    unsigned int daysSinceStart = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
                    for (int year = 2020; year < 2023; year++)
 8000524:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8000528:	623b      	str	r3, [r7, #32]
 800052a:	e00f      	b.n	800054c <updateCurrentTime+0xa0>
                    {
                        daysSinceStart += (year % 4 == 0) ? 366 : 365;
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	f003 0303 	and.w	r3, r3, #3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <updateCurrentTime+0x90>
 8000536:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800053a:	e001      	b.n	8000540 <updateCurrentTime+0x94>
 800053c:	f240 136d 	movw	r3, #365	; 0x16d
 8000540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000542:	4413      	add	r3, r2
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
                    for (int year = 2020; year < 2023; year++)
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	3301      	adds	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	f240 72e6 	movw	r2, #2022	; 0x7e6
 8000552:	4293      	cmp	r3, r2
 8000554:	ddea      	ble.n	800052c <updateCurrentTime+0x80>
                    }
                    // Dodajemy dni od początku roku do obecnego dnia
                    daysSinceStart += 213; // 1 sierpnia to dzień 213 w roku 2020
 8000556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000558:	33d5      	adds	r3, #213	; 0xd5
 800055a:	627b      	str	r3, [r7, #36]	; 0x24

                    // Obliczamy ile dni minęło
                    unsigned int totalDays = daysSinceStart + (currentTime->hours / 24);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2d      	ldr	r2, [pc, #180]	; (8000618 <updateCurrentTime+0x16c>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	091b      	lsrs	r3, r3, #4
 8000568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800056a:	4413      	add	r3, r2
 800056c:	61fb      	str	r3, [r7, #28]
                    currentTime->hours %= 24;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6819      	ldr	r1, [r3, #0]
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <updateCurrentTime+0x16c>)
 8000574:	fba3 2301 	umull	r2, r3, r3, r1
 8000578:	091a      	lsrs	r2, r3, #4
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	1aca      	subs	r2, r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]

                    // Obliczamy rok, miesiąc i dzień na podstawie liczby dni
                    int year = 2020;
 8000588:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800058c:	61bb      	str	r3, [r7, #24]
                    while (1)
                    {
                        int daysInYear = (year % 4 == 0) ? 366 : 365;
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <updateCurrentTime+0xf2>
 8000598:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800059c:	e001      	b.n	80005a2 <updateCurrentTime+0xf6>
 800059e:	f240 136d 	movw	r3, #365	; 0x16d
 80005a2:	60fb      	str	r3, [r7, #12]
                        if (totalDays < daysInYear)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d307      	bcc.n	80005bc <updateCurrentTime+0x110>
                            break;
                        totalDays -= daysInYear;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	61fb      	str	r3, [r7, #28]
                        year++;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	3301      	adds	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
                    {
 80005ba:	e7e8      	b.n	800058e <updateCurrentTime+0xe2>
                            break;
 80005bc:	bf00      	nop
                    }

                    // Obliczamy miesiąc i dzień na podstawie liczby dni
                    int month, day;
                    int daysInMonth;
                    for (month = 1; month <= 12; month++)
 80005be:	2301      	movs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e01b      	b.n	80005fc <updateCurrentTime+0x150>
                    {
                        if (month == 2 && (year % 4 == 0))
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d107      	bne.n	80005da <updateCurrentTime+0x12e>
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <updateCurrentTime+0x12e>
                            daysInMonth = 29;
 80005d4:	231d      	movs	r3, #29
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	e005      	b.n	80005e6 <updateCurrentTime+0x13a>
                        else
                        {
                            static const int daysInMonthArray[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                            daysInMonth = daysInMonthArray[month - 1];
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <updateCurrentTime+0x170>)
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	613b      	str	r3, [r7, #16]
                        }
                        if (totalDays < daysInMonth)
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d30a      	bcc.n	8000604 <updateCurrentTime+0x158>
                            break;
                        totalDays -= daysInMonth;
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	61fb      	str	r3, [r7, #28]
                    for (month = 1; month <= 12; month++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	2b0c      	cmp	r3, #12
 8000600:	dde0      	ble.n	80005c4 <updateCurrentTime+0x118>
 8000602:	e000      	b.n	8000606 <updateCurrentTime+0x15a>
                            break;
 8000604:	bf00      	nop
                    }
                    day = totalDays + 1; // +1, ponieważ dni zaczynają się od 1
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3301      	adds	r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
                    //day - dzień (1 - 31)
                }
            }
        }
    }
};
 800060c:	bf00      	nop
 800060e:	372c      	adds	r7, #44	; 0x2c
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	aaaaaaab 	.word	0xaaaaaaab
 800061c:	0801d410 	.word	0x0801d410

08000620 <vApplicationStackOverflowHook>:

/* USER CODE BEGIN 4 */
//void TimeTask(void *argument);
//void SinTask(void *argument);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 800062a:	be00      	bkpt	0x0000
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <MX_FREERTOS_Init+0x18>)
 800063e:	2100      	movs	r1, #0
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_FREERTOS_Init+0x1c>)
 8000642:	f005 fc0a 	bl	8005e5a <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <MX_FREERTOS_Init+0x20>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0801d440 	.word	0x0801d440
 8000654:	0800065d 	.word	0x0800065d
 8000658:	240000c8 	.word	0x240000c8

0800065c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000664:	f004 fca4 	bl	8004fb0 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  udpserver_init();
 8000668:	f000 fe8a 	bl	8001380 <udpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f005 fc92 	bl	8005f96 <osDelay>
 8000672:	e7fb      	b.n	800066c <StartDefaultTask+0x10>

08000674 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <MX_GPIO_Init+0x144>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000690:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <MX_GPIO_Init+0x144>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a8:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	4a42      	ldr	r2, [pc, #264]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	4a33      	ldr	r2, [pc, #204]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <MX_GPIO_Init+0x144>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800073e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000744:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4819      	ldr	r0, [pc, #100]	; (80007bc <MX_GPIO_Init+0x148>)
 8000756:	f002 ff13 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800075a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800076c:	2307      	movs	r3, #7
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_GPIO_Init+0x14c>)
 8000778:	f002 ff02 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800077c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800078e:	230a      	movs	r3, #10
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <MX_GPIO_Init+0x150>)
 800079a:	f002 fef1 	bl	8003580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2107      	movs	r1, #7
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f001 f8be 	bl	8001924 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a8:	2028      	movs	r0, #40	; 0x28
 80007aa:	f001 f8d5 	bl	8001958 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58020800 	.word	0x58020800
 80007c0:	58020c00 	.word	0x58020c00
 80007c4:	58020000 	.word	0x58020000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ce:	f000 f943 	bl	8000a58 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d2:	4b50      	ldr	r3, [pc, #320]	; (8000914 <main+0x14c>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d11b      	bne.n	8000816 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007de:	f3bf 8f4f 	dsb	sy
}
 80007e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e4:	f3bf 8f6f 	isb	sy
}
 80007e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <main+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007fe:	4b45      	ldr	r3, [pc, #276]	; (8000914 <main+0x14c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a44      	ldr	r2, [pc, #272]	; (8000914 <main+0x14c>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800080a:	f3bf 8f4f 	dsb	sy
}
 800080e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000810:	f3bf 8f6f 	isb	sy
}
 8000814:	e000      	b.n	8000818 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000816:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000818:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <main+0x14c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000820:	2b00      	cmp	r3, #0
 8000822:	d138      	bne.n	8000896 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000824:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <main+0x14c>)
 8000826:	2200      	movs	r2, #0
 8000828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800082c:	f3bf 8f4f 	dsb	sy
}
 8000830:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <main+0x14c>)
 8000834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000838:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	0b5b      	lsrs	r3, r3, #13
 800083e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000842:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	08db      	lsrs	r3, r3, #3
 8000848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800084c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	015a      	lsls	r2, r3, #5
 8000852:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000856:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800085c:	492d      	ldr	r1, [pc, #180]	; (8000914 <main+0x14c>)
 800085e:	4313      	orrs	r3, r2
 8000860:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1e5a      	subs	r2, r3, #1
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1ef      	bne.n	800084e <main+0x86>
    } while(sets-- != 0U);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1e5      	bne.n	8000844 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000878:	f3bf 8f4f 	dsb	sy
}
 800087c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <main+0x14c>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <main+0x14c>)
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800088a:	f3bf 8f4f 	dsb	sy
}
 800088e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
}
 8000894:	e000      	b.n	8000898 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000896:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 ff10 	bl	80016bc <HAL_Init>

  /* USER CODE BEGIN Init */
  Modbus_reg1.setvoltage = 400;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <main+0x150>)
 800089e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008a2:	601a      	str	r2, [r3, #0]
  Modbus_reg1.currentTime_modbus.hours = 12;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <main+0x150>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	60da      	str	r2, [r3, #12]
  Modbus_reg1.currentTime_modbus.minutes = 30;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <main+0x150>)
 80008ac:	221e      	movs	r2, #30
 80008ae:	611a      	str	r2, [r3, #16]
  Modbus_reg1.currentTime_modbus.seconds = 10;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <main+0x150>)
 80008b2:	220a      	movs	r2, #10
 80008b4:	615a      	str	r2, [r3, #20]
  Modbus_reg1.currentTime_modbus.miliSeconds = 1;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <main+0x150>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	619a      	str	r2, [r3, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f834 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f7ff fed8 	bl	8000674 <MX_GPIO_Init>
  MX_TIM13_Init();
 80008c4:	f000 fb64 	bl	8000f90 <MX_TIM13_Init>
  MX_TIM14_Init();
 80008c8:	f000 fb86 	bl	8000fd8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim13);
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <main+0x154>)
 80008ce:	f004 f8e7 	bl	8004aa0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80008d2:	4813      	ldr	r0, [pc, #76]	; (8000920 <main+0x158>)
 80008d4:	f004 f8e4 	bl	8004aa0 <HAL_TIM_Base_Start_IT>
   * Release M4 core after GPIO and peripherals init
   * to avoid conflict.
   */


  __HAL_RCC_HSEM_CLK_ENABLE();
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <main+0x15c>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <main+0x15c>)
 80008e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <main+0x15c>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  HAL_HSEM_FastTake(HSEM_ID_0);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f003 f80c 	bl	8003914 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f003 f822 	bl	8003948 <HAL_HSEM_Release>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000904:	f005 fa4a 	bl	8005d9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000908:	f7ff fe96 	bl	8000638 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800090c:	f005 fa6a 	bl	8005de4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x148>
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00
 8000918:	240000dc 	.word	0x240000dc
 800091c:	24000150 	.word	0x24000150
 8000920:	2400019c 	.word	0x2400019c
 8000924:	58024400 	.word	0x58024400

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09c      	sub	sp, #112	; 0x70
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	224c      	movs	r2, #76	; 0x4c
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f016 ffa5 	bl	8017886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2220      	movs	r2, #32
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f016 ff9f 	bl	8017886 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000948:	2004      	movs	r0, #4
 800094a:	f003 f811 	bl	8003970 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <SystemClock_Config+0xf0>)
 8000954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000956:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <SystemClock_Config+0xf0>)
 8000958:	f023 0301 	bic.w	r3, r3, #1
 800095c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <SystemClock_Config+0xf0>)
 8000960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <SystemClock_Config+0xf4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a2b      	ldr	r2, [pc, #172]	; (8000a1c <SystemClock_Config+0xf4>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <SystemClock_Config+0xf4>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <SystemClock_Config+0xf4>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000990:	2302      	movs	r3, #2
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000994:	2301      	movs	r3, #1
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80009a4:	2320      	movs	r3, #32
 80009a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 80009a8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009ba:	2304      	movs	r3, #4
 80009bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009be:	2300      	movs	r3, #0
 80009c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f82a 	bl	8003a24 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009d6:	f000 f92b 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	233f      	movs	r3, #63	; 0x3f
 80009dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2303      	movs	r3, #3
 80009e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e6:	2308      	movs	r3, #8
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f8:	2340      	movs	r3, #64	; 0x40
 80009fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2102      	movs	r1, #2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fc3d 	bl	8004280 <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a0c:	f000 f910 	bl	8000c30 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3770      	adds	r7, #112	; 0x70
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58000400 	.word	0x58000400
 8000a1c:	58024800 	.word	0x58024800

08000a20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) // Przycisk niebieski to pin 13
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a30:	d108      	bne.n	8000a44 <HAL_GPIO_EXTI_Callback+0x24>
    {
        // Tutaj umieść kod obsługi przerwania
        // Możesz np. zmienić stan diody LED lub wykonać inne czynności
    	Modbus_reg1.counter_bt1 ++;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a3a:	6093      	str	r3, [r2, #8]
    	reg_mdb[4] = (Modbus_reg1.counter_bt1);
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a42:	6113      	str	r3, [r2, #16]
    }
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	240000dc 	.word	0x240000dc
 8000a54:	24000324 	.word	0x24000324

08000a58 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a6a:	f000 ff83 	bl	8001974 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a7a:	231f      	movs	r3, #31
 8000a7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a7e:	2387      	movs	r3, #135	; 0x87
 8000a80:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a86:	2300      	movs	r3, #0
 8000a88:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 ffa1 	bl	80019e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MPU_Config+0x9c>)
 8000aa8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 ff8f 	bl	80019e4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MPU_Config+0xa0>)
 8000acc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 ff7f 	bl	80019e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f000 ff5c 	bl	80019a4 <HAL_MPU_Enable>

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	30020000 	.word	0x30020000
 8000af8:	30040000 	.word	0x30040000
 8000afc:	00000000 	.word	0x00000000

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a3e      	ldr	r2, [pc, #248]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f000 fe0f 	bl	8001734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM13) {
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a3c      	ldr	r2, [pc, #240]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d117      	bne.n	8000b50 <HAL_TIM_PeriodElapsedCallback+0x50>
	  updateCurrentTime(&currentTime, 1);
 8000b20:	2101      	movs	r1, #1
 8000b22:	483b      	ldr	r0, [pc, #236]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b24:	f7ff fcc2 	bl	80004ac <updateCurrentTime>
	  updateCurrentTime(&Modbus_reg1.currentTime_modbus, 1);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	483a      	ldr	r0, [pc, #232]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b2c:	f7ff fcbe 	bl	80004ac <updateCurrentTime>
	  reg_mdb[0] = Modbus_reg1.currentTime_modbus.miliSeconds;
 8000b30:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a39      	ldr	r2, [pc, #228]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b36:	6013      	str	r3, [r2, #0]
	  reg_mdb[1] = Modbus_reg1.currentTime_modbus.seconds;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a37      	ldr	r2, [pc, #220]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b3e:	6053      	str	r3, [r2, #4]
	  reg_mdb[2] = Modbus_reg1.currentTime_modbus.minutes;
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	4a35      	ldr	r2, [pc, #212]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b46:	6093      	str	r3, [r2, #8]
	  reg_mdb[3] = Modbus_reg1.currentTime_modbus.hours;
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b4e:	60d3      	str	r3, [r2, #12]

;


  }
  if (htim->Instance == TIM14) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a32      	ldr	r2, [pc, #200]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d140      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0xdc>

	  sin_current = (unsigned int)round(20000*sin(elapsedTime*0.1*50*3.14)+20000);
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	ee07 3a90 	vmov	s15, r3
 8000b62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000be8 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000b6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000bf8 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000b7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b7e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b82:	f018 f84d 	bl	8018c20 <sin>
 8000b86:	eeb0 7b40 	vmov.f64	d7, d0
 8000b8a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000b8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b92:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000b96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000b9e:	f017 fff7 	bl	8018b90 <round>
 8000ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000baa:	ee17 2a90 	vmov	r2, s15
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bb0:	601a      	str	r2, [r3, #0]
	  Modbus_reg1.sin_current = sin_current;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bb8:	6053      	str	r3, [r2, #4]
	  reg_mdb[5] = Modbus_reg1.sin_current;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000bc0:	6153      	str	r3, [r2, #20]

	  elapsedTime++;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000bca:	6013      	str	r3, [r2, #0]

	  Modbus_reg1.setvoltage = setter[0];
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bd2:	6013      	str	r3, [r2, #0]
	  reg_mdb[6] = Modbus_reg1.setvoltage;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000bda:	6193      	str	r3, [r2, #24]


  }
  /* USER CODE END Callback 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	f3af 8000 	nop.w
 8000be8:	9999999a 	.word	0x9999999a
 8000bec:	3fb99999 	.word	0x3fb99999
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40490000 	.word	0x40490000
 8000bf8:	51eb851f 	.word	0x51eb851f
 8000bfc:	40091eb8 	.word	0x40091eb8
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40d38800 	.word	0x40d38800
 8000c08:	40001000 	.word	0x40001000
 8000c0c:	40001c00 	.word	0x40001c00
 8000c10:	240000cc 	.word	0x240000cc
 8000c14:	240000e8 	.word	0x240000e8
 8000c18:	240000dc 	.word	0x240000dc
 8000c1c:	24000324 	.word	0x24000324
 8000c20:	40002000 	.word	0x40002000
 8000c24:	240000fc 	.word	0x240000fc
 8000c28:	240000f8 	.word	0x240000f8
 8000c2c:	24000008 	.word	0x24000008

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x48>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_MspInit+0x48>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x48>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	210f      	movs	r1, #15
 8000c64:	f06f 0001 	mvn.w	r0, #1
 8000c68:	f000 fe5c 	bl	8001924 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 5, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2105      	movs	r1, #5
 8000c70:	2094      	movs	r0, #148	; 0x94
 8000c72:	f000 fe57 	bl	8001924 <HAL_NVIC_SetPriority>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8000c76:	2094      	movs	r0, #148	; 0x94
 8000c78:	f000 fe6e 	bl	8001958 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024400 	.word	0x58024400

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	d827      	bhi.n	8000ce6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000c96:	2200      	movs	r2, #0
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	2036      	movs	r0, #54	; 0x36
 8000c9c:	f000 fe42 	bl	8001924 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca0:	2036      	movs	r0, #54	; 0x36
 8000ca2:	f000 fe59 	bl	8001958 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ca6:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <HAL_InitTick+0xc4>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_InitTick+0xc8>)
 8000cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb2:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_InitTick+0xc8>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_InitTick+0xc8>)
 8000cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fe49 	bl	800496c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d106      	bne.n	8000cf2 <HAL_InitTick+0x6a>
 8000ce4:	e001      	b.n	8000cea <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e02b      	b.n	8000d42 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cea:	f003 fe29 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8000cee:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000cf0:	e004      	b.n	8000cfc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf2:	f003 fe25 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_InitTick+0xcc>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	0c9b      	lsrs	r3, r3, #18
 8000d06:	3b01      	subs	r3, #1
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <HAL_InitTick+0xd4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d2c:	f003 fe60 	bl	80049f0 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d104      	bne.n	8000d40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_InitTick+0xd0>)
 8000d38:	f003 feb2 	bl	8004aa0 <HAL_TIM_Base_Start_IT>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	e000      	b.n	8000d42 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3740      	adds	r7, #64	; 0x40
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2400001c 	.word	0x2400001c
 8000d50:	58024400 	.word	0x58024400
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	24000100 	.word	0x24000100
 8000d5c:	40001000 	.word	0x40001000

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d94:	f002 fda4 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000da2:	f003 fef5 	bl	8004b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000150 	.word	0x24000150

08000db0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000db6:	f003 feeb 	bl	8004b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2400019c 	.word	0x2400019c

08000dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM6_DAC_IRQHandler+0x10>)
 8000dca:	f003 fee1 	bl	8004b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	24000100 	.word	0x24000100

08000dd8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <ETH_IRQHandler+0x10>)
 8000dde:	f001 fa1d 	bl	800221c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	240003c4 	.word	0x240003c4

08000dec <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
	return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_kill>:

int _kill(int pid, int sig)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <_kill+0x20>)
 8000e18:	2216      	movs	r2, #22
 8000e1a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	24010924 	.word	0x24010924

08000e30 <_exit>:

void _exit (int status)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffe5 	bl	8000e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e42:	e7fe      	b.n	8000e42 <_exit+0x12>

08000e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e00a      	b.n	8000e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e56:	f3af 8000 	nop.w
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf0      	blt.n	8000e56 <_read+0x12>
	}

return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x12>
	}
	return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_close>:

int _close(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ede:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_isatty>:

int _isatty(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d205      	bcs.n	8000f5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <_sbrk+0x6c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	24080000 	.word	0x24080000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	2400014c 	.word	0x2400014c
 8000f88:	24010928 	.word	0x24010928
 8000f8c:	24010924 	.word	0x24010924

08000f90 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <MX_TIM13_Init+0x44>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 3999;
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000f9c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000fa0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 99;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000faa:	2263      	movs	r2, #99	; 0x63
 8000fac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM13_Init+0x40>)
 8000fbc:	f003 fd18 	bl	80049f0 <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000fc6:	f7ff fe33 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000150 	.word	0x24000150
 8000fd4:	40001c00 	.word	0x40001c00

08000fd8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_TIM14_Init+0x40>)
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <MX_TIM14_Init+0x44>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3999;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_TIM14_Init+0x40>)
 8000fe4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000fe8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_TIM14_Init+0x40>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_TIM14_Init+0x40>)
 8000ff2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ff6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_TIM14_Init+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_TIM14_Init+0x40>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_TIM14_Init+0x40>)
 8001006:	f003 fcf3 	bl	80049f0 <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001010:	f7ff fe0e 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2400019c 	.word	0x2400019c
 800101c:	40002000 	.word	0x40002000

08001020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_TIM_Base_MspInit+0x84>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d117      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_TIM_Base_MspInit+0x88>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_TIM_Base_MspInit+0x88>)
 800103a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_TIM_Base_MspInit+0x88>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 8, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2108      	movs	r1, #8
 8001054:	202c      	movs	r0, #44	; 0x2c
 8001056:	f000 fc65 	bl	8001924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800105a:	202c      	movs	r0, #44	; 0x2c
 800105c:	f000 fc7c 	bl	8001958 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001060:	e01b      	b.n	800109a <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM14)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_TIM_Base_MspInit+0x8c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d116      	bne.n	800109a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_TIM_Base_MspInit+0x88>)
 800106e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001072:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_TIM_Base_MspInit+0x88>)
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_TIM_Base_MspInit+0x88>)
 800107e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 6, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2106      	movs	r1, #6
 800108e:	202d      	movs	r0, #45	; 0x2d
 8001090:	f000 fc48 	bl	8001924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001094:	202d      	movs	r0, #45	; 0x2d
 8001096:	f000 fc5f 	bl	8001958 <HAL_NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40001c00 	.word	0x40001c00
 80010a8:	58024400 	.word	0x58024400
 80010ac:	40002000 	.word	0x40002000

080010b0 <udp_thread>:

/*-----------------------------------------------------------------------------------*/
/**** Send RESPONSE every time the client sends some data ******/
static void udp_thread(void *arg)
//static void udp_thread(struct Modbus_reg *Modbus_register)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct pbuf *txBuf;

	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2020      	movs	r0, #32
 80010be:	f008 fd2f 	bl	8009b20 <netconn_new_with_proto_and_callback>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a98      	ldr	r2, [pc, #608]	; (8001328 <udp_thread+0x278>)
 80010c6:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 80010c8:	4b97      	ldr	r3, [pc, #604]	; (8001328 <udp_thread+0x278>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8126 	beq.w	800131e <udp_thread+0x26e>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 80010d2:	4b95      	ldr	r3, [pc, #596]	; (8001328 <udp_thread+0x278>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2207      	movs	r2, #7
 80010d8:	4994      	ldr	r1, [pc, #592]	; (800132c <udp_thread+0x27c>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fdda 	bl	8009c94 <netconn_bind>
 80010e0:	4603      	mov	r3, r0
 80010e2:	74fb      	strb	r3, [r7, #19]

		if (err == ERR_OK)
 80010e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 8113 	bne.w	8001314 <udp_thread+0x264>
		{
			/* The while loop will run everytime this Task is executed */
			while (1)
			{
				/* Receive the data from the connection */
				recv_err = netconn_recv(conn, &buf);
 80010ee:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <udp_thread+0x278>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	498f      	ldr	r1, [pc, #572]	; (8001330 <udp_thread+0x280>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 ffb9 	bl	800a06c <netconn_recv>
 80010fa:	4603      	mov	r3, r0
 80010fc:	74bb      	strb	r3, [r7, #18]

				if (recv_err == ERR_OK) // if the data is received
 80010fe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f3      	bne.n	80010ee <udp_thread+0x3e>
				{
					addr = netbuf_fromaddr(buf);  // get the address of the client
 8001106:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <udp_thread+0x280>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3308      	adds	r3, #8
 800110c:	4a89      	ldr	r2, [pc, #548]	; (8001334 <udp_thread+0x284>)
 800110e:	6013      	str	r3, [r2, #0]
					port = netbuf_fromport(buf);  // get the Port of the client
 8001110:	4b87      	ldr	r3, [pc, #540]	; (8001330 <udp_thread+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	899a      	ldrh	r2, [r3, #12]
 8001116:	4b88      	ldr	r3, [pc, #544]	; (8001338 <udp_thread+0x288>)
 8001118:	801a      	strh	r2, [r3, #0]
					strcpy (msg, buf->p->payload);
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <udp_thread+0x280>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4619      	mov	r1, r3
 8001124:	4885      	ldr	r0, [pc, #532]	; (800133c <udp_thread+0x28c>)
 8001126:	f016 fd7e 	bl	8017c26 <strcpy>
					int len;  // get the message from the client
					if (msg[0] == 0x07)
 800112a:	4b84      	ldr	r3, [pc, #528]	; (800133c <udp_thread+0x28c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b07      	cmp	r3, #7
 8001130:	d155      	bne.n	80011de <udp_thread+0x12e>
					{
						switch(msg[1]){
 8001132:	4b82      	ldr	r3, [pc, #520]	; (800133c <udp_thread+0x28c>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	2b06      	cmp	r3, #6
 8001138:	f200 80ba 	bhi.w	80012b0 <udp_thread+0x200>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <udp_thread+0x94>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001161 	.word	0x08001161
 8001148:	08001173 	.word	0x08001173
 800114c:	08001185 	.word	0x08001185
 8001150:	08001197 	.word	0x08001197
 8001154:	080011a9 	.word	0x080011a9
 8001158:	080011bb 	.word	0x080011bb
 800115c:	080011cd 	.word	0x080011cd
						case 0:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 0\n", reg_mdb[0]);
 8001160:	4b77      	ldr	r3, [pc, #476]	; (8001340 <udp_thread+0x290>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4977      	ldr	r1, [pc, #476]	; (8001344 <udp_thread+0x294>)
 8001168:	4877      	ldr	r0, [pc, #476]	; (8001348 <udp_thread+0x298>)
 800116a:	f016 fcf9 	bl	8017b60 <siprintf>
 800116e:	6178      	str	r0, [r7, #20]
							break;
 8001170:	e09e      	b.n	80012b0 <udp_thread+0x200>
						case 1:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 1\n", reg_mdb[1]);
 8001172:	4b73      	ldr	r3, [pc, #460]	; (8001340 <udp_thread+0x290>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	461a      	mov	r2, r3
 8001178:	4974      	ldr	r1, [pc, #464]	; (800134c <udp_thread+0x29c>)
 800117a:	4873      	ldr	r0, [pc, #460]	; (8001348 <udp_thread+0x298>)
 800117c:	f016 fcf0 	bl	8017b60 <siprintf>
 8001180:	6178      	str	r0, [r7, #20]
							break;
 8001182:	e095      	b.n	80012b0 <udp_thread+0x200>
						case 2:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 2\n", reg_mdb[2]);
 8001184:	4b6e      	ldr	r3, [pc, #440]	; (8001340 <udp_thread+0x290>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	4971      	ldr	r1, [pc, #452]	; (8001350 <udp_thread+0x2a0>)
 800118c:	486e      	ldr	r0, [pc, #440]	; (8001348 <udp_thread+0x298>)
 800118e:	f016 fce7 	bl	8017b60 <siprintf>
 8001192:	6178      	str	r0, [r7, #20]
							break;
 8001194:	e08c      	b.n	80012b0 <udp_thread+0x200>
						case 3:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 3\n", reg_mdb[3]);
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <udp_thread+0x290>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	461a      	mov	r2, r3
 800119c:	496d      	ldr	r1, [pc, #436]	; (8001354 <udp_thread+0x2a4>)
 800119e:	486a      	ldr	r0, [pc, #424]	; (8001348 <udp_thread+0x298>)
 80011a0:	f016 fcde 	bl	8017b60 <siprintf>
 80011a4:	6178      	str	r0, [r7, #20]
							break;
 80011a6:	e083      	b.n	80012b0 <udp_thread+0x200>
						case 4:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 4\n", reg_mdb[4]);
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <udp_thread+0x290>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	461a      	mov	r2, r3
 80011ae:	496a      	ldr	r1, [pc, #424]	; (8001358 <udp_thread+0x2a8>)
 80011b0:	4865      	ldr	r0, [pc, #404]	; (8001348 <udp_thread+0x298>)
 80011b2:	f016 fcd5 	bl	8017b60 <siprintf>
 80011b6:	6178      	str	r0, [r7, #20]
							break;
 80011b8:	e07a      	b.n	80012b0 <udp_thread+0x200>
						case 5:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 5\n", reg_mdb[5]);
 80011ba:	4b61      	ldr	r3, [pc, #388]	; (8001340 <udp_thread+0x290>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	461a      	mov	r2, r3
 80011c0:	4966      	ldr	r1, [pc, #408]	; (800135c <udp_thread+0x2ac>)
 80011c2:	4861      	ldr	r0, [pc, #388]	; (8001348 <udp_thread+0x298>)
 80011c4:	f016 fccc 	bl	8017b60 <siprintf>
 80011c8:	6178      	str	r0, [r7, #20]
							break;
 80011ca:	e071      	b.n	80012b0 <udp_thread+0x200>
						case 6:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 6\n", reg_mdb[6]);
 80011cc:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <udp_thread+0x290>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4963      	ldr	r1, [pc, #396]	; (8001360 <udp_thread+0x2b0>)
 80011d4:	485c      	ldr	r0, [pc, #368]	; (8001348 <udp_thread+0x298>)
 80011d6:	f016 fcc3 	bl	8017b60 <siprintf>
 80011da:	6178      	str	r0, [r7, #20]
							break;
 80011dc:	e068      	b.n	80012b0 <udp_thread+0x200>
						}
					}
						else if (msg[0] == 0x0E)
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <udp_thread+0x28c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b0e      	cmp	r3, #14
 80011e4:	d15e      	bne.n	80012a4 <udp_thread+0x1f4>
						{
							switch(msg[1]){
 80011e6:	4b55      	ldr	r3, [pc, #340]	; (800133c <udp_thread+0x28c>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d860      	bhi.n	80012b0 <udp_thread+0x200>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <udp_thread+0x144>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	08001211 	.word	0x08001211
 80011f8:	0800122d 	.word	0x0800122d
 80011fc:	08001249 	.word	0x08001249
 8001200:	08001265 	.word	0x08001265
 8001204:	080012b1 	.word	0x080012b1
 8001208:	080012b1 	.word	0x080012b1
 800120c:	08001281 	.word	0x08001281
							case 0:
								reg_mdb[0] = msg[2];
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <udp_thread+0x28c>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	461a      	mov	r2, r3
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <udp_thread+0x290>)
 8001218:	601a      	str	r2, [r3, #0]
								len = sprintf (smsg, " Ustawiono milisekundy na \"%i\" \n", reg_mdb[0]);
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <udp_thread+0x290>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4950      	ldr	r1, [pc, #320]	; (8001364 <udp_thread+0x2b4>)
 8001222:	4849      	ldr	r0, [pc, #292]	; (8001348 <udp_thread+0x298>)
 8001224:	f016 fc9c 	bl	8017b60 <siprintf>
 8001228:	6178      	str	r0, [r7, #20]
								break;
 800122a:	e041      	b.n	80012b0 <udp_thread+0x200>
							case 1:
								reg_mdb[1] = msg[2];
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <udp_thread+0x28c>)
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	461a      	mov	r2, r3
 8001232:	4b43      	ldr	r3, [pc, #268]	; (8001340 <udp_thread+0x290>)
 8001234:	605a      	str	r2, [r3, #4]
								len = sprintf (smsg, " Ustawiono sekundy na \"%i\" \n", reg_mdb[1]);
 8001236:	4b42      	ldr	r3, [pc, #264]	; (8001340 <udp_thread+0x290>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	461a      	mov	r2, r3
 800123c:	494a      	ldr	r1, [pc, #296]	; (8001368 <udp_thread+0x2b8>)
 800123e:	4842      	ldr	r0, [pc, #264]	; (8001348 <udp_thread+0x298>)
 8001240:	f016 fc8e 	bl	8017b60 <siprintf>
 8001244:	6178      	str	r0, [r7, #20]
								break;
 8001246:	e033      	b.n	80012b0 <udp_thread+0x200>
							case 2:
								reg_mdb[2] = msg[2];
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <udp_thread+0x28c>)
 800124a:	789b      	ldrb	r3, [r3, #2]
 800124c:	461a      	mov	r2, r3
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <udp_thread+0x290>)
 8001250:	609a      	str	r2, [r3, #8]
								len = sprintf (smsg, " Ustawiono minuty na \"%i\" \n", reg_mdb[2]);
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <udp_thread+0x290>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	461a      	mov	r2, r3
 8001258:	4944      	ldr	r1, [pc, #272]	; (800136c <udp_thread+0x2bc>)
 800125a:	483b      	ldr	r0, [pc, #236]	; (8001348 <udp_thread+0x298>)
 800125c:	f016 fc80 	bl	8017b60 <siprintf>
 8001260:	6178      	str	r0, [r7, #20]
								break;
 8001262:	e025      	b.n	80012b0 <udp_thread+0x200>
							case 3:
								reg_mdb[3] = msg[2];
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <udp_thread+0x28c>)
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	461a      	mov	r2, r3
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <udp_thread+0x290>)
 800126c:	60da      	str	r2, [r3, #12]
								len = sprintf (smsg, " Ustawiono godziny na \"%i\" \n", reg_mdb[3]);
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <udp_thread+0x290>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	461a      	mov	r2, r3
 8001274:	493e      	ldr	r1, [pc, #248]	; (8001370 <udp_thread+0x2c0>)
 8001276:	4834      	ldr	r0, [pc, #208]	; (8001348 <udp_thread+0x298>)
 8001278:	f016 fc72 	bl	8017b60 <siprintf>
 800127c:	6178      	str	r0, [r7, #20]
								break;
 800127e:	e017      	b.n	80012b0 <udp_thread+0x200>

							case 6:
								setter[0] = msg[2]*256 + msg[3];
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <udp_thread+0x28c>)
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4a2d      	ldr	r2, [pc, #180]	; (800133c <udp_thread+0x28c>)
 8001288:	78d2      	ldrb	r2, [r2, #3]
 800128a:	4413      	add	r3, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <udp_thread+0x2c4>)
 8001290:	601a      	str	r2, [r3, #0]
								len = sprintf (smsg, " Ustawiono napiecie na \"%i\" \n", setter[0]);
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <udp_thread+0x2c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <udp_thread+0x2c8>)
 800129a:	482b      	ldr	r0, [pc, #172]	; (8001348 <udp_thread+0x298>)
 800129c:	f016 fc60 	bl	8017b60 <siprintf>
 80012a0:	6178      	str	r0, [r7, #20]
								break;
 80012a2:	e005      	b.n	80012b0 <udp_thread+0x200>
							}
						}

					else
						{len = sprintf (smsg, "\"%s\" bledne zapytanie \n", msg);}
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <udp_thread+0x28c>)
 80012a6:	4935      	ldr	r1, [pc, #212]	; (800137c <udp_thread+0x2cc>)
 80012a8:	4827      	ldr	r0, [pc, #156]	; (8001348 <udp_thread+0x298>)
 80012aa:	f016 fc59 	bl	8017b60 <siprintf>
 80012ae:	6178      	str	r0, [r7, #20]
					// Or modify the message received, so that we can send it back to the client
					//int len = sprintf (smsg, "\"%s\" was sent by the Client\n", (char *) buf->p->payload);


					/* allocate pbuf from RAM*/
					txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80012b8:	4619      	mov	r1, r3
 80012ba:	2036      	movs	r0, #54	; 0x36
 80012bc:	f00e f82a 	bl	800f314 <pbuf_alloc>
 80012c0:	60f8      	str	r0, [r7, #12]

					/* copy the data into the buffer  */
					pbuf_take(txBuf, smsg, len);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	491f      	ldr	r1, [pc, #124]	; (8001348 <udp_thread+0x298>)
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f00e fd7e 	bl	800fdcc <pbuf_take>

					// refer the nebuf->pbuf to our pbuf
					buf->p = txBuf;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <udp_thread+0x280>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	601a      	str	r2, [r3, #0]

					netconn_connect(conn, addr, port);  // connect to the destination address and port
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <udp_thread+0x278>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a15      	ldr	r2, [pc, #84]	; (8001334 <udp_thread+0x284>)
 80012de:	6811      	ldr	r1, [r2, #0]
 80012e0:	4a15      	ldr	r2, [pc, #84]	; (8001338 <udp_thread+0x288>)
 80012e2:	8812      	ldrh	r2, [r2, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fd0d 	bl	8009d04 <netconn_connect>

					netconn_send(conn,buf);  // send the netbuf to the client
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <udp_thread+0x278>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <udp_thread+0x280>)
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 ff33 	bl	800a160 <netconn_send>

					buf->addr.addr = 0;  // clear the address
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <udp_thread+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
					pbuf_free(txBuf);   // clear the pbuf
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f00e faea 	bl	800f8dc <pbuf_free>
					netbuf_delete(buf);  // delete the netbuf
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <udp_thread+0x280>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f00d fc41 	bl	800eb94 <netbuf_delete>
				recv_err = netconn_recv(conn, &buf);
 8001312:	e6ec      	b.n	80010ee <udp_thread+0x3e>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <udp_thread+0x278>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f008 fc9f 	bl	8009c5c <netconn_delete>
		}
	}
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	240001e8 	.word	0x240001e8
 800132c:	0801d484 	.word	0x0801d484
 8001330:	240001ec 	.word	0x240001ec
 8001334:	240001f0 	.word	0x240001f0
 8001338:	240001f4 	.word	0x240001f4
 800133c:	240001f8 	.word	0x240001f8
 8001340:	24000324 	.word	0x24000324
 8001344:	08019834 	.word	0x08019834
 8001348:	2400025c 	.word	0x2400025c
 800134c:	08019858 	.word	0x08019858
 8001350:	0801987c 	.word	0x0801987c
 8001354:	080198a0 	.word	0x080198a0
 8001358:	080198c4 	.word	0x080198c4
 800135c:	080198e8 	.word	0x080198e8
 8001360:	0801990c 	.word	0x0801990c
 8001364:	08019930 	.word	0x08019930
 8001368:	08019954 	.word	0x08019954
 800136c:	08019974 	.word	0x08019974
 8001370:	08019990 	.word	0x08019990
 8001374:	24000008 	.word	0x24000008
 8001378:	080199b0 	.word	0x080199b0
 800137c:	080199d0 	.word	0x080199d0

08001380 <udpserver_init>:


void udpserver_init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af02      	add	r7, sp, #8
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001386:	2318      	movs	r3, #24
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800138e:	2200      	movs	r2, #0
 8001390:	4903      	ldr	r1, [pc, #12]	; (80013a0 <udpserver_init+0x20>)
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <udpserver_init+0x24>)
 8001394:	f00e ff56 	bl	8010244 <sys_thread_new>
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080010b1 	.word	0x080010b1
 80013a4:	080199e8 	.word	0x080199e8

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013ac:	f7fe ffe8 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f016 f9f7 	bl	80177c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff f9f5 	bl	80007c8 <main>
  bx  lr
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013e8:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 80013ec:	0801d8c0 	.word	0x0801d8c0
  ldr r2, =_sbss
 80013f0:	240000ac 	.word	0x240000ac
  ldr r4, =_ebss
 80013f4:	24010928 	.word	0x24010928

080013f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC3_IRQHandler>

080013fa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <LAN8742_RegisterBusIO+0x28>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <LAN8742_RegisterBusIO+0x28>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <LAN8742_RegisterBusIO+0x28>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e014      	b.n	8001452 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d17c      	bne.n	8001578 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e01c      	b.n	80014d2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f107 0208 	add.w	r2, r7, #8
 80014a0:	2112      	movs	r1, #18
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	4798      	blx	r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da03      	bge.n	80014b4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80014ac:	f06f 0304 	mvn.w	r3, #4
 80014b0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80014b2:	e00b      	b.n	80014cc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d105      	bne.n	80014cc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
         break;
 80014ca:	e005      	b.n	80014d8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b1f      	cmp	r3, #31
 80014d6:	d9df      	bls.n	8001498 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b1f      	cmp	r3, #31
 80014de:	d902      	bls.n	80014e6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80014e0:	f06f 0302 	mvn.w	r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d145      	bne.n	8001578 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6810      	ldr	r0, [r2, #0]
 80014f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f8:	2100      	movs	r1, #0
 80014fa:	4798      	blx	r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db37      	blt.n	8001572 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6810      	ldr	r0, [r2, #0]
 800150a:	f107 0208 	add.w	r2, r7, #8
 800150e:	2100      	movs	r1, #0
 8001510:	4798      	blx	r3
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	db28      	blt.n	800156a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4798      	blx	r3
 800151e:	4603      	mov	r3, r0
 8001520:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001522:	e01c      	b.n	800155e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4798      	blx	r3
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001536:	d80e      	bhi.n	8001556 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6810      	ldr	r0, [r2, #0]
 8001540:	f107 0208 	add.w	r2, r7, #8
 8001544:	2100      	movs	r1, #0
 8001546:	4798      	blx	r3
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	da07      	bge.n	800155e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800154e:	f06f 0304 	mvn.w	r3, #4
 8001552:	613b      	str	r3, [r7, #16]
                 break;
 8001554:	e010      	b.n	8001578 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001556:	f06f 0301 	mvn.w	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
               break;
 800155c:	e00c      	b.n	8001578 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1dd      	bne.n	8001524 <LAN8742_Init+0xc6>
 8001568:	e006      	b.n	8001578 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800156a:	f06f 0304 	mvn.w	r3, #4
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	e002      	b.n	8001578 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001572:	f06f 0303 	mvn.w	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d112      	bne.n	80015a4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4798      	blx	r3
 8001584:	4603      	mov	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001588:	bf00      	nop
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4798      	blx	r3
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800159c:	d9f5      	bls.n	800158a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80015a4:	693b      	ldr	r3, [r7, #16]
 }
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6810      	ldr	r0, [r2, #0]
 80015c2:	f107 020c 	add.w	r2, r7, #12
 80015c6:	2101      	movs	r1, #1
 80015c8:	4798      	blx	r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da02      	bge.n	80015d6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015d0:	f06f 0304 	mvn.w	r3, #4
 80015d4:	e06e      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6810      	ldr	r0, [r2, #0]
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	2101      	movs	r1, #1
 80015e4:	4798      	blx	r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da02      	bge.n	80015f2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80015ec:	f06f 0304 	mvn.w	r3, #4
 80015f0:	e060      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80015fc:	2301      	movs	r3, #1
 80015fe:	e059      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6810      	ldr	r0, [r2, #0]
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	2100      	movs	r1, #0
 800160e:	4798      	blx	r3
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	da02      	bge.n	800161c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001616:	f06f 0304 	mvn.w	r3, #4
 800161a:	e04b      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d11b      	bne.n	800165e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <LAN8742_GetLinkState+0x90>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800163a:	2302      	movs	r3, #2
 800163c:	e03a      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001648:	2303      	movs	r3, #3
 800164a:	e033      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001656:	2304      	movs	r3, #4
 8001658:	e02c      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800165a:	2305      	movs	r3, #5
 800165c:	e02a      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6810      	ldr	r0, [r2, #0]
 8001666:	f107 020c 	add.w	r2, r7, #12
 800166a:	211f      	movs	r1, #31
 800166c:	4798      	blx	r3
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	da02      	bge.n	800167a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001674:	f06f 0304 	mvn.w	r3, #4
 8001678:	e01c      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001684:	2306      	movs	r3, #6
 8001686:	e015      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 031c 	and.w	r3, r3, #28
 800168e:	2b18      	cmp	r3, #24
 8001690:	d101      	bne.n	8001696 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001692:	2302      	movs	r3, #2
 8001694:	e00e      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 031c 	and.w	r3, r3, #28
 800169c:	2b08      	cmp	r3, #8
 800169e:	d101      	bne.n	80016a4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e007      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 031c 	and.w	r3, r3, #28
 80016aa:	2b14      	cmp	r3, #20
 80016ac:	d101      	bne.n	80016b2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016ae:	2304      	movs	r3, #4
 80016b0:	e000      	b.n	80016b4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016b2:	2305      	movs	r3, #5
    }				
  }
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c2:	2003      	movs	r0, #3
 80016c4:	f000 f923 	bl	800190e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c8:	f002 ff90 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_Init+0x68>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	4913      	ldr	r1, [pc, #76]	; (8001728 <HAL_Init+0x6c>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_Init+0x6c>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_Init+0x70>)
 80016fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_Init+0x74>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001706:	200f      	movs	r0, #15
 8001708:	f7ff fabe 	bl	8000c88 <HAL_InitTick>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e002      	b.n	800171c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001716:	f7ff fa91 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	58024400 	.word	0x58024400
 8001728:	0801d400 	.word	0x0801d400
 800172c:	24000004 	.word	0x24000004
 8001730:	24000000 	.word	0x24000000

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	24000020 	.word	0x24000020
 8001758:	24000340 	.word	0x24000340

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	24000340 	.word	0x24000340

08001774 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetREVID+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0c1b      	lsrs	r3, r3, #16
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	5c001000 	.word	0x5c001000

0800178c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	58000400 	.word	0x58000400

080017b4 <__NVIC_SetPriorityGrouping>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x40>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00
 80017f8:	05fa0000 	.word	0x05fa0000

080017fc <__NVIC_GetPriorityGrouping>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <__NVIC_EnableIRQ+0x38>)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff4c 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001932:	f7ff ff63 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001936:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	6978      	ldr	r0, [r7, #20]
 800193e:	f7ff ffb3 	bl	80018a8 <NVIC_EncodePriority>
 8001942:	4602      	mov	r2, r0
 8001944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff82 	bl	8001854 <__NVIC_SetPriority>
}
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff56 	bl	8001818 <__NVIC_EnableIRQ>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001978:	f3bf 8f5f 	dmb	sy
}
 800197c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_MPU_Disable+0x28>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_MPU_Disable+0x28>)
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_MPU_Disable+0x2c>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	e000ed90 	.word	0xe000ed90

080019a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_MPU_Enable+0x38>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_MPU_Enable+0x3c>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_MPU_Enable+0x3c>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019c2:	f3bf 8f4f 	dsb	sy
}
 80019c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019c8:	f3bf 8f6f 	isb	sy
}
 80019cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed90 	.word	0xe000ed90
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	785a      	ldrb	r2, [r3, #1]
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_MPU_ConfigRegion+0x84>)
 80019f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d029      	beq.n	8001a50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80019fc:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_MPU_ConfigRegion+0x84>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7b1b      	ldrb	r3, [r3, #12]
 8001a08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7adb      	ldrb	r3, [r3, #11]
 8001a0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7a9b      	ldrb	r3, [r3, #10]
 8001a16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b5b      	ldrb	r3, [r3, #13]
 8001a1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7b9b      	ldrb	r3, [r3, #14]
 8001a26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7bdb      	ldrb	r3, [r3, #15]
 8001a2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7a5b      	ldrb	r3, [r3, #9]
 8001a36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7a1b      	ldrb	r3, [r3, #8]
 8001a3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a4e:	e005      	b.n	8001a5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_MPU_ConfigRegion+0x84>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_MPU_ConfigRegion+0x84>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed90 	.word	0xe000ed90

08001a6c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_GetCurrentCPUID+0x24>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	2b07      	cmp	r3, #7
 8001a7c:	d101      	bne.n	8001a82 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e000      	b.n	8001a84 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001a82:	2301      	movs	r3, #1
  }
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0cf      	b.n	8001c46 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d106      	bne.n	8001abe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2223      	movs	r2, #35	; 0x23
 8001ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f003 fe69 	bl	8005790 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <HAL_ETH_Init+0x1bc>)
 8001ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ac4:	4a62      	ldr	r2, [pc, #392]	; (8001c50 <HAL_ETH_Init+0x1bc>)
 8001ac6:	f043 0302 	orr.w	r3, r3, #2
 8001aca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_ETH_Init+0x1bc>)
 8001ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7a1b      	ldrb	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff fe51 	bl	800178c <HAL_SYSCFG_ETHInterfaceSelect>
 8001aea:	e003      	b.n	8001af4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001aec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001af0:	f7ff fe4c 	bl	800178c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_ETH_Init+0x1c0>)
 8001af6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b10:	f7ff fe24 	bl	800175c <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b16:	e011      	b.n	8001b3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b18:	f7ff fe20 	bl	800175c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b26:	d909      	bls.n	8001b3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	22e0      	movs	r2, #224	; 0xe0
 8001b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e084      	b.n	8001c46 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e4      	bne.n	8001b18 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 ff3c 	bl	80029cc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b54:	f002 fec4 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a3f      	ldr	r2, [pc, #252]	; (8001c58 <HAL_ETH_Init+0x1c4>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	0c9a      	lsrs	r2, r3, #18
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3a01      	subs	r2, #1
 8001b68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f001 f935 	bl	8002ddc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001b7e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	22e0      	movs	r2, #224	; 0xe0
 8001baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e049      	b.n	8001c46 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_ETH_Init+0x1c8>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6952      	ldr	r2, [r2, #20]
 8001bc6:	0051      	lsls	r1, r2, #1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f001 f99d 	bl	8002f16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 f9e3 	bl	8002fa8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	3305      	adds	r3, #5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	021a      	lsls	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	3303      	adds	r3, #3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	061a      	lsls	r2, r3, #24
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	041b      	lsls	r3, r3, #16
 8001c14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2210      	movs	r2, #16
 8001c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
 8001c54:	58000400 	.word	0x58000400
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	ffff8001 	.word	0xffff8001

08001c60 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d179      	bne.n	8001d66 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2223      	movs	r2, #35	; 0x23
 8001c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_ETH_Start_IT+0x110>)
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <HAL_ETH_Start_IT+0x114>)
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f9eb 	bl	800208a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0202 	orr.w	r2, r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d00:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d1c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001d34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d38:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d44:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001d50:	430b      	orrs	r3, r1
 8001d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d56:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2223      	movs	r2, #35	; 0x23
 8001d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	0c020060 	.word	0x0c020060
 8001d74:	0c20c000 	.word	0x0c20c000

08001d78 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d86:	2b23      	cmp	r3, #35	; 0x23
 8001d88:	d165      	bne.n	8001e56 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2223      	movs	r2, #35	; 0x23
 8001d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_ETH_Stop_IT+0xec>)
 8001da4:	400b      	ands	r3, r1
 8001da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001daa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dc6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0202 	bic.w	r2, r2, #2
 8001e18:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e00e      	b.n	8001e3e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	3212      	adds	r2, #18
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d9ed      	bls.n	8001e20 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
  }
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	ffff2f3e 	.word	0xffff2f3e

08001e68 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e03a      	b.n	8001f02 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e92:	2b23      	cmp	r3, #35	; 0x23
 8001e94:	d134      	bne.n	8001f00 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f001 f8de 	bl	8003064 <ETH_Prepare_Tx_Descriptors>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f043 0202 	orr.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e01f      	b.n	8001f02 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec2:	f3bf 8f4f 	dsb	sy
}
 8001ec6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d904      	bls.n	8001ee4 <HAL_ETH_Transmit_IT+0x7c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	1f1a      	subs	r2, r3, #4
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3106      	adds	r1, #6
 8001ef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ef4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e000      	b.n	8001f02 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
  }
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0a5      	b.n	8002082 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3c:	2b23      	cmp	r3, #35	; 0x23
 8001f3e:	d001      	beq.n	8001f44 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e09e      	b.n	8002082 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	3212      	adds	r2, #18
 8001f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f54:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5a:	f1c3 0304 	rsb	r3, r3, #4
 8001f5e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f60:	e067      	b.n	8002032 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <HAL_ETH_ReadData+0x88>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d03d      	beq.n	800200e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fe8:	461a      	mov	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f003 fdb7 	bl	8005b60 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	441a      	add	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d902      	bls.n	8002020 <HAL_ETH_ReadData+0x116>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b04      	subs	r3, #4
 800201e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	3212      	adds	r2, #18
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db06      	blt.n	8002048 <HAL_ETH_ReadData+0x13e>
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	429a      	cmp	r2, r3
 8002040:	d202      	bcs.n	8002048 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d08c      	beq.n	8001f62 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	441a      	add	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f814 	bl	800208a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d108      	bne.n	8002080 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b088      	sub	sp, #32
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002096:	2301      	movs	r3, #1
 8002098:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800209e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	3212      	adds	r2, #18
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80020b2:	e03b      	b.n	800212c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d112      	bne.n	80020e2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fd1d 	bl	8005b00 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	74fb      	strb	r3, [r7, #19]
 80020d0:	e007      	b.n	80020e2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	461a      	mov	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	461a      	mov	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d021      	beq.n	800212c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80020e8:	f3bf 8f5f 	dmb	sy
}
 80020ec:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	e003      	b.n	8002108 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d902      	bls.n	800211a <ETH_UpdateDescriptor+0x90>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3b04      	subs	r3, #4
 8002118:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	3212      	adds	r2, #18
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	617b      	str	r3, [r7, #20]
      desccount--;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	3b01      	subs	r3, #1
 800212a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <ETH_UpdateDescriptor+0xae>
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1bd      	bne.n	80020b4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	429a      	cmp	r2, r3
 8002140:	d00d      	beq.n	800215e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	461a      	mov	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800215e:	bf00      	nop
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3318      	adds	r3, #24
 8002172:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002184:	e03f      	b.n	8002206 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002186:	2301      	movs	r3, #1
 8002188:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3b01      	subs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	3304      	adds	r3, #4
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d028      	beq.n	8002206 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68d9      	ldr	r1, [r3, #12]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db1b      	blt.n	8002202 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	3304      	adds	r3, #4
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fd2a 	bl	8005c30 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3304      	adds	r3, #4
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3301      	adds	r3, #1
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002200:	e001      	b.n	8002206 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_ETH_ReleaseTxPacket+0xac>
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1b9      	bne.n	8002186 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d115      	bne.n	8002264 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d10b      	bne.n	8002264 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002254:	461a      	mov	r2, r3
 8002256:	f248 0340 	movw	r3, #32832	; 0x8040
 800225a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f003 f800 	bl	8005264 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10b      	bne.n	80022a4 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	461a      	mov	r2, r3
 8002296:	f248 0301 	movw	r3, #32769	; 0x8001
 800229a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f002 fff0 	bl	8005284 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022b8:	d153      	bne.n	8002362 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ce:	d148      	bne.n	8002362 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f043 0208 	orr.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80022ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f4:	d11e      	bne.n	8002334 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002302:	f241 1302 	movw	r3, #4354	; 0x1102
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002322:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002326:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	22e0      	movs	r2, #224	; 0xe0
 800232e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002332:	e013      	b.n	800235c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002340:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002352:	461a      	mov	r2, r3
 8002354:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8002358:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f002 ffa1 	bl	80052a4 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800236a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800237c:	2b00      	cmp	r3, #0
 800237e:	d019      	beq.n	80023b4 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	22e0      	movs	r2, #224	; 0xe0
 80023a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f002 ff7c 	bl	80052a4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d10f      	bne.n	80023e4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023cc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f844 	bl	8002464 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d10f      	bne.n	8002414 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f836 	bl	8002478 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002414:	f7ff fb2a 	bl	8001a6c <HAL_GetCurrentCPUID>
 8002418:	4603      	mov	r3, r0
 800241a:	2b03      	cmp	r3, #3
 800241c:	d10d      	bne.n	800243a <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_ETH_IRQHandler+0x240>)
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_ETH_IRQHandler+0x240>)
 800242c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f82a 	bl	800248c <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8002438:	e00c      	b.n	8002454 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_ETH_IRQHandler+0x244>)
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_ETH_IRQHandler+0x244>)
 8002448:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f81c 	bl	800248c <HAL_ETH_WakeUpCallback>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	58000080 	.word	0x58000080
 8002460:	580000c0 	.word	0x580000c0

08002464 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e03e      	b.n	8002540 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024ca:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	055b      	lsls	r3, r3, #21
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f043 030c 	orr.w	r3, r3, #12
 80024ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002502:	f7ff f92b 	bl	800175c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002508:	e009      	b.n	800251e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800250a:	f7ff f927 	bl	800175c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002518:	d901      	bls.n	800251e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e010      	b.n	8002540 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ed      	bne.n	800250a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e03c      	b.n	80025e4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002572:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	055b      	lsls	r3, r3, #21
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 030c 	bic.w	r3, r3, #12
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_ETH_WritePHYRegister+0xa4>)
 80025aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80025ae:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_ETH_WritePHYRegister+0xa4>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80025b6:	f7ff f8d1 	bl	800175c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80025bc:	e009      	b.n	80025d2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80025be:	f7ff f8cd 	bl	800175c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025cc:	d901      	bls.n	80025d2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e008      	b.n	80025e4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ed      	bne.n	80025be <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40028000 	.word	0x40028000

080025f0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e1c3      	b.n	800298c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800277e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0e5b      	lsrs	r3, r3, #25
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002918:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002928:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e00b      	b.n	80029c4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d105      	bne.n	80029c2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f86d 	bl	8002a98 <ETH_SetMACConfig>

    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80029e6:	f001 ff7b 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 80029ea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d908      	bls.n	8002a06 <HAL_ETH_SetMDIOClockRange+0x3a>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d804      	bhi.n	8002a06 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e027      	b.n	8002a56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d908      	bls.n	8002a20 <HAL_ETH_SetMDIOClockRange+0x54>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d204      	bcs.n	8002a20 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e01a      	b.n	8002a56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d303      	bcc.n	8002a30 <HAL_ETH_SetMDIOClockRange+0x64>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d911      	bls.n	8002a54 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d908      	bls.n	8002a4a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d804      	bhi.n	8002a4a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e005      	b.n	8002a56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e000      	b.n	8002a56 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a54:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	01312cff 	.word	0x01312cff
 8002a6c:	02160ebf 	.word	0x02160ebf
 8002a70:	03938700 	.word	0x03938700
 8002a74:	05f5e0ff 	.word	0x05f5e0ff
 8002a78:	08f0d17f 	.word	0x08f0d17f

08002a7c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	7b1b      	ldrb	r3, [r3, #12]
 8002ab8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	7b5b      	ldrb	r3, [r3, #13]
 8002ac0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ac2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	7b9b      	ldrb	r3, [r3, #14]
 8002ac8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	7bdb      	ldrb	r3, [r3, #15]
 8002ad0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ad2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	7c12      	ldrb	r2, [r2, #16]
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d102      	bne.n	8002ae2 <ETH_SetMACConfig+0x4a>
 8002adc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ae0:	e000      	b.n	8002ae4 <ETH_SetMACConfig+0x4c>
 8002ae2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ae4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	7c52      	ldrb	r2, [r2, #17]
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	d102      	bne.n	8002af4 <ETH_SetMACConfig+0x5c>
 8002aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af2:	e000      	b.n	8002af6 <ETH_SetMACConfig+0x5e>
 8002af4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	7c9b      	ldrb	r3, [r3, #18]
 8002afc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002afe:	431a      	orrs	r2, r3
               macconf->Speed |
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002b04:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	7f1b      	ldrb	r3, [r3, #28]
 8002b10:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7f5b      	ldrb	r3, [r3, #29]
 8002b18:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	7f92      	ldrb	r2, [r2, #30]
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	d102      	bne.n	8002b2a <ETH_SetMACConfig+0x92>
 8002b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b28:	e000      	b.n	8002b2c <ETH_SetMACConfig+0x94>
 8002b2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	7fdb      	ldrb	r3, [r3, #31]
 8002b32:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d102      	bne.n	8002b46 <ETH_SetMACConfig+0xae>
 8002b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b44:	e000      	b.n	8002b48 <ETH_SetMACConfig+0xb0>
 8002b46:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b48:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b56:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002b58:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b56      	ldr	r3, [pc, #344]	; (8002cc4 <ETH_SetMACConfig+0x22c>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b82:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b96:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d102      	bne.n	8002baa <ETH_SetMACConfig+0x112>
 8002ba4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba8:	e000      	b.n	8002bac <ETH_SetMACConfig+0x114>
 8002baa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002bac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <ETH_SetMACConfig+0x230>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <ETH_SetMACConfig+0x234>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	430b      	orrs	r3, r1
 8002bec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bf4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bfa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d101      	bne.n	8002c0a <ETH_SetMACConfig+0x172>
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	e000      	b.n	8002c0c <ETH_SetMACConfig+0x174>
 8002c0a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c0c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c12:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c1e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002c22:	4013      	ands	r3, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	68f9      	ldr	r1, [r7, #12]
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002c34:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002c3c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4a:	f023 0103 	bic.w	r1, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c62:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	d101      	bne.n	8002c86 <ETH_SetMACConfig+0x1ee>
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	e000      	b.n	8002c88 <ETH_SetMACConfig+0x1f0>
 8002c86:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c90:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002c9a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ca8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	00048083 	.word	0x00048083
 8002cc8:	c0f88000 	.word	0xc0f88000
 8002ccc:	fffffef0 	.word	0xfffffef0

08002cd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <ETH_SetDMAConfig+0xf8>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	6811      	ldr	r1, [r2, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cf6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	791b      	ldrb	r3, [r3, #4]
 8002cfc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7b1b      	ldrb	r3, [r3, #12]
 8002d08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <ETH_SetDMAConfig+0xfc>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d28:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	7b5b      	ldrb	r3, [r3, #13]
 8002d2e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <ETH_SetDMAConfig+0x100>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d54:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	7d1b      	ldrb	r3, [r3, #20]
 8002d60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7f5b      	ldrb	r3, [r3, #29]
 8002d68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d76:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <ETH_SetDMAConfig+0x104>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	68f9      	ldr	r1, [r7, #12]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d8a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	7f1b      	ldrb	r3, [r3, #28]
 8002d92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <ETH_SetDMAConfig+0x108>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	430b      	orrs	r3, r1
 8002db4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002db8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	ffff87fd 	.word	0xffff87fd
 8002dcc:	ffff2ffe 	.word	0xffff2ffe
 8002dd0:	fffec000 	.word	0xfffec000
 8002dd4:	ffc0efef 	.word	0xffc0efef
 8002dd8:	7fc0ffff 	.word	0x7fc0ffff

08002ddc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b0a4      	sub	sp, #144	; 0x90
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dea:	2300      	movs	r3, #0
 8002dec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002e34:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002e38:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e56:	2300      	movs	r3, #0
 8002e58:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e74:	2320      	movs	r3, #32
 8002e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e86:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e90:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff fde6 	bl	8002a98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ee6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ef4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002efc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fee1 	bl	8002cd0 <ETH_SetDMAConfig>
}
 8002f0e:	bf00      	nop
 8002f10:	3790      	adds	r7, #144	; 0x90
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e01d      	b.n	8002f60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68d9      	ldr	r1, [r3, #12]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	3206      	adds	r2, #6
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d9de      	bls.n	8002f24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f74:	461a      	mov	r2, r3
 8002f76:	2303      	movs	r3, #3
 8002f78:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e023      	b.n	8002ffe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	3212      	adds	r2, #18
 8002ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d9d8      	bls.n	8002fb6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302a:	461a      	mov	r2, r3
 800302c:	2303      	movs	r3, #3
 800302e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003064:	b480      	push	{r7}
 8003066:	b08d      	sub	sp, #52	; 0x34
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3318      	adds	r3, #24
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a6:	d007      	beq.n	80030b8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	3304      	adds	r3, #4
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	e259      	b.n	8003570 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d044      	beq.n	8003152 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <ETH_Prepare_Tx_Descriptors+0x240>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d4:	431a      	orrs	r2, r3
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d027      	beq.n	8003152 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	b29a      	uxth	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	431a      	orrs	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003140:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003150:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003164:	4013      	ands	r3, r2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	6992      	ldr	r2, [r2, #24]
 800316a:	431a      	orrs	r2, r3
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d036      	beq.n	8003202 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80031a0:	f3bf 8f5f 	dmb	sy
}
 80031a4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	3301      	adds	r3, #1
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d902      	bls.n	80031c4 <ETH_Prepare_Tx_Descriptors+0x160>
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	3b04      	subs	r3, #4
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	3301      	adds	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e0:	d10f      	bne.n	8003202 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80031ec:	f3bf 8f5f 	dmb	sy
}
 80031f0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	e1b6      	b.n	8003570 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3301      	adds	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003218:	4013      	ands	r3, r2
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	6852      	ldr	r2, [r2, #4]
 800321e:	431a      	orrs	r2, r3
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <ETH_Prepare_Tx_Descriptors+0x248>)
 8003242:	4013      	ands	r3, r2
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	6852      	ldr	r2, [r2, #4]
 8003248:	0412      	lsls	r2, r2, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	e008      	b.n	8003264 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <ETH_Prepare_Tx_Descriptors+0x248>)
 800325e:	4013      	ands	r3, r2
 8003260:	6a3a      	ldr	r2, [r7, #32]
 8003262:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d021      	beq.n	80032b4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	04db      	lsls	r3, r3, #19
 800327e:	431a      	orrs	r2, r3
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	69d2      	ldr	r2, [r2, #28]
 8003290:	431a      	orrs	r2, r3
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e02e      	b.n	8003302 <ETH_Prepare_Tx_Descriptors+0x29e>
 80032a4:	ffff0000 	.word	0xffff0000
 80032a8:	ffffc000 	.word	0xffffc000
 80032ac:	c000ffff 	.word	0xc000ffff
 80032b0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	4b7b      	ldr	r3, [pc, #492]	; (80034a8 <ETH_Prepare_Tx_Descriptors+0x444>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	6852      	ldr	r2, [r2, #4]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	431a      	orrs	r2, r3
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	431a      	orrs	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003338:	f3bf 8f5f 	dmb	sy
}
 800333c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80da 	beq.w	800350c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	431a      	orrs	r2, r3
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800336a:	e0cf      	b.n	800350c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	3301      	adds	r3, #1
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	2b03      	cmp	r3, #3
 8003382:	d902      	bls.n	800338a <ETH_Prepare_Tx_Descriptors+0x326>
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	3b04      	subs	r3, #4
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003392:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ac:	d007      	beq.n	80033be <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	3304      	adds	r3, #4
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d029      	beq.n	8003412 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ca:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d0:	e019      	b.n	8003406 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80033d2:	f3bf 8f5f 	dmb	sy
}
 80033d6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	3301      	adds	r3, #1
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d902      	bls.n	80033f6 <ETH_Prepare_Tx_Descriptors+0x392>
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	3b04      	subs	r3, #4
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fe:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	3301      	adds	r3, #1
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
 8003406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	429a      	cmp	r2, r3
 800340c:	d3e1      	bcc.n	80033d2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800340e:	2302      	movs	r3, #2
 8003410:	e0ae      	b.n	8003570 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <ETH_Prepare_Tx_Descriptors+0x448>)
 800342e:	4013      	ands	r3, r2
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	6852      	ldr	r2, [r2, #4]
 8003434:	431a      	orrs	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003458:	4013      	ands	r3, r2
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	6852      	ldr	r2, [r2, #4]
 800345e:	0412      	lsls	r2, r2, #16
 8003460:	431a      	orrs	r2, r3
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	e008      	b.n	800347a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003474:	4013      	ands	r3, r2
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <ETH_Prepare_Tx_Descriptors+0x450>)
 800348c:	4013      	ands	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	69d2      	ldr	r2, [r2, #28]
 8003492:	431a      	orrs	r2, r3
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e020      	b.n	80034e8 <ETH_Prepare_Tx_Descriptors+0x484>
 80034a6:	bf00      	nop
 80034a8:	ffff8000 	.word	0xffff8000
 80034ac:	ffffc000 	.word	0xffffc000
 80034b0:	c000ffff 	.word	0xc000ffff
 80034b4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	4b2f      	ldr	r3, [pc, #188]	; (800357c <ETH_Prepare_Tx_Descriptors+0x518>)
 80034be:	4013      	ands	r3, r2
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	6852      	ldr	r2, [r2, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	3301      	adds	r3, #1
 80034ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80034ee:	f3bf 8f5f 	dmb	sy
}
 80034f2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af2b 	bne.w	800336c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e005      	b.n	8003536 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	3304      	adds	r3, #4
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003556:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003558:	b672      	cpsid	i
}
 800355a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4413      	add	r3, r2
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800356a:	b662      	cpsie	i
}
 800356c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3734      	adds	r7, #52	; 0x34
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	ffff8000 	.word	0xffff8000

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800358e:	4b89      	ldr	r3, [pc, #548]	; (80037b4 <HAL_GPIO_Init+0x234>)
 8003590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003592:	e194      	b.n	80038be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8186 	beq.w	80038b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d005      	beq.n	80035c4 <HAL_GPIO_Init+0x44>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d130      	bne.n	8003626 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035fa:	2201      	movs	r2, #1
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0201 	and.w	r2, r3, #1
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b03      	cmp	r3, #3
 8003630:	d017      	beq.n	8003662 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d123      	bne.n	80036b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	08da      	lsrs	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	2203      	movs	r2, #3
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0203 	and.w	r2, r3, #3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80e0 	beq.w	80038b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f8:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_GPIO_Init+0x238>)
 80036fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036fe:	4a2e      	ldr	r2, [pc, #184]	; (80037b8 <HAL_GPIO_Init+0x238>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_GPIO_Init+0x238>)
 800370a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_GPIO_Init+0x23c>)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	220f      	movs	r2, #15
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <HAL_GPIO_Init+0x240>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d052      	beq.n	80037e8 <HAL_GPIO_Init+0x268>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_GPIO_Init+0x244>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_GPIO_Init+0x22e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_GPIO_Init+0x248>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <HAL_GPIO_Init+0x22a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1d      	ldr	r2, [pc, #116]	; (80037cc <HAL_GPIO_Init+0x24c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d025      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_GPIO_Init+0x250>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01f      	beq.n	80037a2 <HAL_GPIO_Init+0x222>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_GPIO_Init+0x254>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x21e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_GPIO_Init+0x258>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x21a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <HAL_GPIO_Init+0x25c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x216>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_GPIO_Init+0x260>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x212>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_GPIO_Init+0x264>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x20e>
 800378a:	2309      	movs	r3, #9
 800378c:	e02d      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 800378e:	230a      	movs	r3, #10
 8003790:	e02b      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 8003792:	2308      	movs	r3, #8
 8003794:	e029      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 8003796:	2307      	movs	r3, #7
 8003798:	e027      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 800379a:	2306      	movs	r3, #6
 800379c:	e025      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 800379e:	2305      	movs	r3, #5
 80037a0:	e023      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e021      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e01f      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e01d      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e01b      	b.n	80037ea <HAL_GPIO_Init+0x26a>
 80037b2:	bf00      	nop
 80037b4:	58000080 	.word	0x58000080
 80037b8:	58024400 	.word	0x58024400
 80037bc:	58000400 	.word	0x58000400
 80037c0:	58020000 	.word	0x58020000
 80037c4:	58020400 	.word	0x58020400
 80037c8:	58020800 	.word	0x58020800
 80037cc:	58020c00 	.word	0x58020c00
 80037d0:	58021000 	.word	0x58021000
 80037d4:	58021400 	.word	0x58021400
 80037d8:	58021800 	.word	0x58021800
 80037dc:	58021c00 	.word	0x58021c00
 80037e0:	58022000 	.word	0x58022000
 80037e4:	58022400 	.word	0x58022400
 80037e8:	2300      	movs	r3, #0
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	f002 0203 	and.w	r2, r2, #3
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	4093      	lsls	r3, r2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fa:	4938      	ldr	r1, [pc, #224]	; (80038dc <HAL_GPIO_Init+0x35c>)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	3302      	adds	r3, #2
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800382e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800385c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f ae63 	bne.w	8003594 <HAL_GPIO_Init+0x14>
  }
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3724      	adds	r7, #36	; 0x24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	58000400 	.word	0x58000400

080038e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd f88a 	bl	8000a20 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <HAL_HSEM_FastTake+0x2c>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3320      	adds	r3, #32
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	4a07      	ldr	r2, [pc, #28]	; (8003944 <HAL_HSEM_FastTake+0x30>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	58026400 	.word	0x58026400
 8003944:	80000300 	.word	0x80000300

08003948 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003952:	4906      	ldr	r1, [pc, #24]	; (800396c <HAL_HSEM_Release+0x24>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	58026400 	.word	0x58026400

08003970 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	2b06      	cmp	r3, #6
 8003982:	d00a      	beq.n	800399a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e040      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e03e      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80039a2:	491f      	ldr	r1, [pc, #124]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039aa:	f7fd fed7 	bl	800175c <HAL_GetTick>
 80039ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039b0:	e009      	b.n	80039c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039b2:	f7fd fed3 	bl	800175c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c0:	d901      	bls.n	80039c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e028      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039c6:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d2:	d1ee      	bne.n	80039b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b1e      	cmp	r3, #30
 80039d8:	d008      	beq.n	80039ec <HAL_PWREx_ConfigSupply+0x7c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b2e      	cmp	r3, #46	; 0x2e
 80039de:	d005      	beq.n	80039ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b1d      	cmp	r3, #29
 80039e4:	d002      	beq.n	80039ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b2d      	cmp	r3, #45	; 0x2d
 80039ea:	d114      	bne.n	8003a16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80039ec:	f7fd feb6 	bl	800175c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039f4:	f7fd feb2 	bl	800175c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a02:	d901      	bls.n	8003a08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e007      	b.n	8003a18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d1ee      	bne.n	80039f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	58024800 	.word	0x58024800

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f000 bc1d 	b.w	8004272 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8087 	beq.w	8003b54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a46:	4b99      	ldr	r3, [pc, #612]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a50:	4b96      	ldr	r3, [pc, #600]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d007      	beq.n	8003a6c <HAL_RCC_OscConfig+0x48>
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b18      	cmp	r3, #24
 8003a60:	d110      	bne.n	8003a84 <HAL_RCC_OscConfig+0x60>
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d10b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	4b8f      	ldr	r3, [pc, #572]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d06c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x12e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d168      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e3f6      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x78>
 8003a8e:	4b87      	ldr	r3, [pc, #540]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a86      	ldr	r2, [pc, #536]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e02e      	b.n	8003afa <HAL_RCC_OscConfig+0xd6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x9a>
 8003aa4:	4b81      	ldr	r3, [pc, #516]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a80      	ldr	r2, [pc, #512]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b7e      	ldr	r3, [pc, #504]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e01d      	b.n	8003afa <HAL_RCC_OscConfig+0xd6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0xbe>
 8003ac8:	4b78      	ldr	r3, [pc, #480]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a77      	ldr	r2, [pc, #476]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b75      	ldr	r3, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a74      	ldr	r2, [pc, #464]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	e00b      	b.n	8003afa <HAL_RCC_OscConfig+0xd6>
 8003ae2:	4b72      	ldr	r3, [pc, #456]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a71      	ldr	r2, [pc, #452]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd fe2b 	bl	800175c <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0a:	f7fd fe27 	bl	800175c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	; 0x64
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e3aa      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1c:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0xe6>
 8003b28:	e014      	b.n	8003b54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fe17 	bl	800175c <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b32:	f7fd fe13 	bl	800175c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e396      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0x10e>
 8003b50:	e000      	b.n	8003b54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80cb 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b62:	4b52      	ldr	r3, [pc, #328]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_OscConfig+0x164>
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	2b18      	cmp	r3, #24
 8003b7c:	d156      	bne.n	8003c2c <HAL_RCC_OscConfig+0x208>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d151      	bne.n	8003c2c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b88:	4b48      	ldr	r3, [pc, #288]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x17c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e368      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ba0:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 0219 	bic.w	r2, r3, #25
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	493f      	ldr	r1, [pc, #252]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bb2:	f7fd fdd3 	bl	800175c <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fd fdcf 	bl	800175c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e352      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bcc:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	f7fd fdcc 	bl	8001774 <HAL_GetREVID>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d817      	bhi.n	8003c16 <HAL_RCC_OscConfig+0x1f2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d108      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1dc>
 8003bee:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bfe:	e07b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	4927      	ldr	r1, [pc, #156]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e070      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	4921      	ldr	r1, [pc, #132]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2a:	e065      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d048      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 0219 	bic.w	r2, r3, #25
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	491a      	ldr	r1, [pc, #104]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd fd89 	bl	800175c <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fd85 	bl	800175c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e308      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	f7fd fd82 	bl	8001774 <HAL_GetREVID>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d81a      	bhi.n	8003cb0 <HAL_RCC_OscConfig+0x28c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d108      	bne.n	8003c94 <HAL_RCC_OscConfig+0x270>
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c90:	6053      	str	r3, [r2, #4]
 8003c92:	e031      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	031b      	lsls	r3, r3, #12
 8003ca2:	4902      	ldr	r1, [pc, #8]	; (8003cac <HAL_RCC_OscConfig+0x288>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e026      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
 8003caa:	bf00      	nop
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	4997      	ldr	r1, [pc, #604]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	e018      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc6:	4b95      	ldr	r3, [pc, #596]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a94      	ldr	r2, [pc, #592]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fd43 	bl	800175c <HAL_GetTick>
 8003cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cda:	f7fd fd3f 	bl	800175c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e2c2      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cec:	4b8b      	ldr	r3, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a9 	beq.w	8003e58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d10:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d007      	beq.n	8003d2c <HAL_RCC_OscConfig+0x308>
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b18      	cmp	r3, #24
 8003d20:	d13a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x374>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d135      	bne.n	8003d98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d2c:	4b7b      	ldr	r3, [pc, #492]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_OscConfig+0x320>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e296      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d44:	f7fd fd16 	bl	8001774 <HAL_GetREVID>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d817      	bhi.n	8003d82 <HAL_RCC_OscConfig+0x35e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d108      	bne.n	8003d6c <HAL_RCC_OscConfig+0x348>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d62:	4a6e      	ldr	r2, [pc, #440]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d68:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d6a:	e075      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d6c:	4b6b      	ldr	r3, [pc, #428]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	069b      	lsls	r3, r3, #26
 8003d7a:	4968      	ldr	r1, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d80:	e06a      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d82:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	4962      	ldr	r1, [pc, #392]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d96:	e05f      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d042      	beq.n	8003e26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003da0:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd fcd6 	bl	800175c <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003db4:	f7fd fcd2 	bl	800175c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e255      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc6:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dd2:	f7fd fccf 	bl	8001774 <HAL_GetREVID>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d817      	bhi.n	8003e10 <HAL_RCC_OscConfig+0x3ec>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d108      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3d6>
 8003de8:	4b4c      	ldr	r3, [pc, #304]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003df0:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	6053      	str	r3, [r2, #4]
 8003df8:	e02e      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
 8003dfa:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	069b      	lsls	r3, r3, #26
 8003e08:	4944      	ldr	r1, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
 8003e0e:	e023      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
 8003e10:	4b42      	ldr	r3, [pc, #264]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	493f      	ldr	r1, [pc, #252]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
 8003e24:	e018      	b.n	8003e58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e26:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3c      	ldr	r2, [pc, #240]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fd fc93 	bl	800175c <HAL_GetTick>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fc8f 	bl	800175c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e212      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e4c:	4b33      	ldr	r3, [pc, #204]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d036      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fd fc70 	bl	800175c <HAL_GetTick>
 8003e7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fd fc6c 	bl	800175c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1ef      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x45c>
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fd fc56 	bl	800175c <HAL_GetTick>
 8003eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fd fc52 	bl	800175c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e1d5      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d039      	beq.n	8003f52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ef2:	f7fd fc33 	bl	800175c <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003efa:	f7fd fc2f 	bl	800175c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1b2      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <HAL_RCC_OscConfig+0x4f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x4d6>
 8003f18:	e01b      	b.n	8003f52 <HAL_RCC_OscConfig+0x52e>
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f20:	4b9b      	ldr	r3, [pc, #620]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a9a      	ldr	r2, [pc, #616]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f2c:	f7fd fc16 	bl	800175c <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f34:	f7fd fc12 	bl	800175c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e195      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f46:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8081 	beq.w	8004062 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f60:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <HAL_RCC_OscConfig+0x770>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a8b      	ldr	r2, [pc, #556]	; (8004194 <HAL_RCC_OscConfig+0x770>)
 8003f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f6c:	f7fd fbf6 	bl	800175c <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f74:	f7fd fbf2 	bl	800175c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e175      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f86:	4b83      	ldr	r3, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x770>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x584>
 8003f9a:	4b7d      	ldr	r3, [pc, #500]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a7c      	ldr	r2, [pc, #496]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa6:	e02d      	b.n	8004004 <HAL_RCC_OscConfig+0x5e0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10c      	bne.n	8003fca <HAL_RCC_OscConfig+0x5a6>
 8003fb0:	4b77      	ldr	r3, [pc, #476]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a76      	ldr	r2, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc8:	e01c      	b.n	8004004 <HAL_RCC_OscConfig+0x5e0>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x5c8>
 8003fd2:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a6e      	ldr	r2, [pc, #440]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	f043 0304 	orr.w	r3, r3, #4
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0x5e0>
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a67      	ldr	r2, [pc, #412]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff8:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a64      	ldr	r2, [pc, #400]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	f023 0304 	bic.w	r3, r3, #4
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fd fba6 	bl	800175c <HAL_GetTick>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fd fba2 	bl	800175c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e123      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ee      	beq.n	8004014 <HAL_RCC_OscConfig+0x5f0>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd fb90 	bl	800175c <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fd fb8c 	bl	800175c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e10d      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004056:	4b4e      	ldr	r3, [pc, #312]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ee      	bne.n	8004040 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8102 	beq.w	8004270 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800406c:	4b48      	ldr	r3, [pc, #288]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004074:	2b18      	cmp	r3, #24
 8004076:	f000 80bd 	beq.w	80041f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b02      	cmp	r3, #2
 8004080:	f040 809e 	bne.w	80041c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004084:	4b42      	ldr	r3, [pc, #264]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a41      	ldr	r2, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fb64 	bl	800175c <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fb60 	bl	800175c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0e3      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b6:	4b36      	ldr	r3, [pc, #216]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	4b37      	ldr	r3, [pc, #220]	; (8004198 <HAL_RCC_OscConfig+0x774>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4931      	ldr	r1, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	628b      	str	r3, [r1, #40]	; 0x28
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	3b01      	subs	r3, #1
 80040e0:	025b      	lsls	r3, r3, #9
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	3b01      	subs	r3, #1
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004100:	4923      	ldr	r1, [pc, #140]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004112:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_RCC_OscConfig+0x778>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800411e:	00d2      	lsls	r2, r2, #3
 8004120:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f023 020c 	bic.w	r2, r3, #12
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4917      	ldr	r1, [pc, #92]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004138:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f023 0202 	bic.w	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	4912      	ldr	r1, [pc, #72]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	4a07      	ldr	r2, [pc, #28]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <HAL_RCC_OscConfig+0x76c>)
 8004180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd fae9 	bl	800175c <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800418c:	e011      	b.n	80041b2 <HAL_RCC_OscConfig+0x78e>
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400
 8004194:	58024800 	.word	0x58024800
 8004198:	fffffc0c 	.word	0xfffffc0c
 800419c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fadc 	bl	800175c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e05f      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041b2:	4b32      	ldr	r3, [pc, #200]	; (800427c <HAL_RCC_OscConfig+0x858>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x77c>
 80041be:	e057      	b.n	8004270 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <HAL_RCC_OscConfig+0x858>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2d      	ldr	r2, [pc, #180]	; (800427c <HAL_RCC_OscConfig+0x858>)
 80041c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fac6 	bl	800175c <HAL_GetTick>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fd fac2 	bl	800175c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e045      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e6:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_OscConfig+0x858>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x7b0>
 80041f2:	e03d      	b.n	8004270 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041f4:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_RCC_OscConfig+0x858>)
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_OscConfig+0x858>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b01      	cmp	r3, #1
 8004206:	d031      	beq.n	800426c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0203 	and.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d12a      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d122      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d11a      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	0a5b      	lsrs	r3, r3, #9
 800423a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d111      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d108      	bne.n	800426c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3730      	adds	r7, #48	; 0x30
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400

08004280 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e19c      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004294:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d910      	bls.n	80042c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b87      	ldr	r3, [pc, #540]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 020f 	bic.w	r2, r3, #15
 80042aa:	4985      	ldr	r1, [pc, #532]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b2:	4b83      	ldr	r3, [pc, #524]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e184      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	4b7b      	ldr	r3, [pc, #492]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042dc:	429a      	cmp	r2, r3
 80042de:	d908      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e0:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4975      	ldr	r1, [pc, #468]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d010      	beq.n	8004320 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800430a:	429a      	cmp	r2, r3
 800430c:	d908      	bls.n	8004320 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800430e:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	496a      	ldr	r1, [pc, #424]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800431c:	4313      	orrs	r3, r2
 800431e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004338:	429a      	cmp	r2, r3
 800433a:	d908      	bls.n	800434e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800433c:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	495e      	ldr	r1, [pc, #376]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800434a:	4313      	orrs	r3, r2
 800434c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d010      	beq.n	800437c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004366:	429a      	cmp	r2, r3
 8004368:	d908      	bls.n	800437c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	4953      	ldr	r1, [pc, #332]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004378:	4313      	orrs	r3, r2
 800437a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	429a      	cmp	r2, r3
 8004396:	d908      	bls.n	80043aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b4a      	ldr	r3, [pc, #296]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f023 020f 	bic.w	r2, r3, #15
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4947      	ldr	r1, [pc, #284]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d055      	beq.n	8004462 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043b6:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4940      	ldr	r1, [pc, #256]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d121      	bne.n	8004420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0f6      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d115      	bne.n	8004420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0ea      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0de      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004410:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0d6      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f023 0207 	bic.w	r2, r3, #7
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4925      	ldr	r1, [pc, #148]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800442e:	4313      	orrs	r3, r2
 8004430:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd f993 	bl	800175c <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004438:	e00a      	b.n	8004450 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443a:	f7fd f98f 	bl	800175c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0be      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	429a      	cmp	r2, r3
 8004460:	d1eb      	bne.n	800443a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	429a      	cmp	r2, r3
 800447c:	d208      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f023 020f 	bic.w	r2, r3, #15
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	490e      	ldr	r1, [pc, #56]	; (80044c4 <HAL_RCC_ClockConfig+0x244>)
 800448c:	4313      	orrs	r3, r2
 800448e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d214      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 020f 	bic.w	r2, r3, #15
 80044a6:	4906      	ldr	r1, [pc, #24]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCC_ClockConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e086      	b.n	80045ce <HAL_RCC_ClockConfig+0x34e>
 80044c0:	52002000 	.word	0x52002000
 80044c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d208      	bcs.n	80044f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044e4:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	4939      	ldr	r1, [pc, #228]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800450e:	429a      	cmp	r2, r3
 8004510:	d208      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004512:	4b31      	ldr	r3, [pc, #196]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	492e      	ldr	r1, [pc, #184]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004520:	4313      	orrs	r3, r2
 8004522:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800453c:	429a      	cmp	r2, r3
 800453e:	d208      	bcs.n	8004552 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	4922      	ldr	r1, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 800454e:	4313      	orrs	r3, r2
 8004550:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d010      	beq.n	8004580 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800456a:	429a      	cmp	r2, r3
 800456c:	d208      	bcs.n	8004580 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	4917      	ldr	r1, [pc, #92]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 800457c:	4313      	orrs	r3, r2
 800457e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004580:	f000 f834 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	4912      	ldr	r1, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x35c>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800459e:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <HAL_RCC_ClockConfig+0x358>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <HAL_RCC_ClockConfig+0x35c>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x360>)
 80045b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_RCC_ClockConfig+0x364>)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <HAL_RCC_ClockConfig+0x368>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc fb60 	bl	8000c88 <HAL_InitTick>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	58024400 	.word	0x58024400
 80045dc:	0801d400 	.word	0x0801d400
 80045e0:	24000004 	.word	0x24000004
 80045e4:	24000000 	.word	0x24000000
 80045e8:	2400001c 	.word	0x2400001c

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f2:	4bb3      	ldr	r3, [pc, #716]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fa:	2b18      	cmp	r3, #24
 80045fc:	f200 8155 	bhi.w	80048aa <HAL_RCC_GetSysClockFreq+0x2be>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800466d 	.word	0x0800466d
 800460c:	080048ab 	.word	0x080048ab
 8004610:	080048ab 	.word	0x080048ab
 8004614:	080048ab 	.word	0x080048ab
 8004618:	080048ab 	.word	0x080048ab
 800461c:	080048ab 	.word	0x080048ab
 8004620:	080048ab 	.word	0x080048ab
 8004624:	080048ab 	.word	0x080048ab
 8004628:	08004693 	.word	0x08004693
 800462c:	080048ab 	.word	0x080048ab
 8004630:	080048ab 	.word	0x080048ab
 8004634:	080048ab 	.word	0x080048ab
 8004638:	080048ab 	.word	0x080048ab
 800463c:	080048ab 	.word	0x080048ab
 8004640:	080048ab 	.word	0x080048ab
 8004644:	080048ab 	.word	0x080048ab
 8004648:	08004699 	.word	0x08004699
 800464c:	080048ab 	.word	0x080048ab
 8004650:	080048ab 	.word	0x080048ab
 8004654:	080048ab 	.word	0x080048ab
 8004658:	080048ab 	.word	0x080048ab
 800465c:	080048ab 	.word	0x080048ab
 8004660:	080048ab 	.word	0x080048ab
 8004664:	080048ab 	.word	0x080048ab
 8004668:	0800469f 	.word	0x0800469f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800466c:	4b94      	ldr	r3, [pc, #592]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004678:	4b91      	ldr	r3, [pc, #580]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	4a90      	ldr	r2, [pc, #576]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800468a:	e111      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800468c:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800468e:	61bb      	str	r3, [r7, #24]
    break;
 8004690:	e10e      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004692:	4b8d      	ldr	r3, [pc, #564]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004694:	61bb      	str	r3, [r7, #24]
    break;
 8004696:	e10b      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004698:	4b8c      	ldr	r3, [pc, #560]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800469a:	61bb      	str	r3, [r7, #24]
    break;
 800469c:	e108      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046a8:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046b4:	4b82      	ldr	r3, [pc, #520]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046be:	4b80      	ldr	r3, [pc, #512]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	08db      	lsrs	r3, r3, #3
 80046c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80e1 	beq.w	80048a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f000 8083 	beq.w	80047f0 <HAL_RCC_GetSysClockFreq+0x204>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	f200 80a1 	bhi.w	8004834 <HAL_RCC_GetSysClockFreq+0x248>
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x114>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d056      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80046fe:	e099      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004700:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02d      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800470c:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	4a6b      	ldr	r2, [pc, #428]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004736:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	ed97 6a02 	vldr	s12, [r7, #8]
 800474a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800474e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004762:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004766:	e087      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eddf 6a58 	vldr	s13, [pc, #352]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a02 	vldr	s12, [r7, #8]
 800478e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047aa:	e065      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80048d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ee:	e043      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b2f      	ldr	r3, [pc, #188]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a02 	vldr	s12, [r7, #8]
 8004816:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004832:	e021      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80048d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a02 	vldr	s12, [r7, #8]
 800485a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80048d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004876:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004882:	3301      	adds	r3, #1
 8004884:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004890:	edd7 6a07 	vldr	s13, [r7, #28]
 8004894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489c:	ee17 3a90 	vmov	r3, s15
 80048a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048a2:	e005      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
    break;
 80048a8:	e002      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048ac:	61bb      	str	r3, [r7, #24]
    break;
 80048ae:	bf00      	nop
  }

  return sysclockfreq;
 80048b0:	69bb      	ldr	r3, [r7, #24]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3724      	adds	r7, #36	; 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	03d09000 	.word	0x03d09000
 80048c8:	003d0900 	.word	0x003d0900
 80048cc:	017d7840 	.word	0x017d7840
 80048d0:	46000000 	.word	0x46000000
 80048d4:	4c742400 	.word	0x4c742400
 80048d8:	4a742400 	.word	0x4a742400
 80048dc:	4bbebc20 	.word	0x4bbebc20

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048e6:	f7ff fe81 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <HAL_RCC_GetHCLKFreq+0x50>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	0a1b      	lsrs	r3, r3, #8
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490f      	ldr	r1, [pc, #60]	; (8004934 <HAL_RCC_GetHCLKFreq+0x54>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_RCC_GetHCLKFreq+0x50>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_GetHCLKFreq+0x54>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <HAL_RCC_GetHCLKFreq+0x58>)
 800491c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800491e:	4a07      	ldr	r2, [pc, #28]	; (800493c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCC_GetHCLKFreq+0x58>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	58024400 	.word	0x58024400
 8004934:	0801d400 	.word	0x0801d400
 8004938:	24000004 	.word	0x24000004
 800493c:	24000000 	.word	0x24000000

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004944:	f7ff ffcc 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	091b      	lsrs	r3, r3, #4
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4904      	ldr	r1, [pc, #16]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	58024400 	.word	0x58024400
 8004968:	0801d400 	.word	0x0801d400

0800496c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	223f      	movs	r2, #63	; 0x3f
 800497a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0207 	and.w	r2, r3, #7
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_RCC_GetClockConfig+0x7c>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_GetClockConfig+0x80>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	58024400 	.word	0x58024400
 80049ec:	52002000 	.word	0x52002000

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fb02 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 f9f6 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d001      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e054      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d022      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d01d      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x80>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d115      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_TIM_Base_Start_IT+0xec>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d015      	beq.n	8004b5e <HAL_TIM_Base_Start_IT+0xbe>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d011      	beq.n	8004b5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e008      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40001800 	.word	0x40001800
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	00010007 	.word	0x00010007

08004b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d122      	bne.n	8004bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d11b      	bne.n	8004bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0202 	mvn.w	r2, #2
 8004bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f905 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f8f7 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f908 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0204 	mvn.w	r2, #4
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8db 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8cd 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f8de 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0208 	mvn.w	r2, #8
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2204      	movs	r2, #4
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8b1 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8a3 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8b4 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0210 	mvn.w	r2, #16
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f887 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f879 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f88a 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0201 	mvn.w	r2, #1
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fb fef6 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b80      	cmp	r3, #128	; 0x80
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f914 	bl	8004f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	d10e      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b80      	cmp	r3, #128	; 0x80
 8004d5c:	d107      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f907 	bl	8004f7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d10e      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d107      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f838 	bl	8004e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d10e      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0220 	mvn.w	r2, #32
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f8c7 	bl	8004f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a40      	ldr	r2, [pc, #256]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3d      	ldr	r2, [pc, #244]	; (8004f38 <TIM_Base_SetConfig+0x118>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3c      	ldr	r2, [pc, #240]	; (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d01b      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <TIM_Base_SetConfig+0x118>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d017      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2b      	ldr	r2, [pc, #172]	; (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <TIM_Base_SetConfig+0x128>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <TIM_Base_SetConfig+0x130>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00f      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <TIM_Base_SetConfig+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <TIM_Base_SetConfig+0x128>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a10      	ldr	r2, [pc, #64]	; (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a0f      	ldr	r2, [pc, #60]	; (8004f50 <TIM_Base_SetConfig+0x130>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800

08004f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f011 fbc5 	bl	801672c <tcpip_init>
	LOCK_TCPIP_CORE();
 8004fa2:	f000 fe51 	bl	8005c48 <sys_lock_tcpip_core>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004fb6:	4b99      	ldr	r3, [pc, #612]	; (800521c <MX_LWIP_Init+0x26c>)
 8004fb8:	22c0      	movs	r2, #192	; 0xc0
 8004fba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004fbc:	4b97      	ldr	r3, [pc, #604]	; (800521c <MX_LWIP_Init+0x26c>)
 8004fbe:	22a8      	movs	r2, #168	; 0xa8
 8004fc0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8004fc2:	4b96      	ldr	r3, [pc, #600]	; (800521c <MX_LWIP_Init+0x26c>)
 8004fc4:	2264      	movs	r2, #100	; 0x64
 8004fc6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8004fc8:	4b94      	ldr	r3, [pc, #592]	; (800521c <MX_LWIP_Init+0x26c>)
 8004fca:	22c9      	movs	r2, #201	; 0xc9
 8004fcc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004fce:	4b94      	ldr	r3, [pc, #592]	; (8005220 <MX_LWIP_Init+0x270>)
 8004fd0:	22ff      	movs	r2, #255	; 0xff
 8004fd2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004fd4:	4b92      	ldr	r3, [pc, #584]	; (8005220 <MX_LWIP_Init+0x270>)
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004fda:	4b91      	ldr	r3, [pc, #580]	; (8005220 <MX_LWIP_Init+0x270>)
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	; (8005220 <MX_LWIP_Init+0x270>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004fe6:	4b8f      	ldr	r3, [pc, #572]	; (8005224 <MX_LWIP_Init+0x274>)
 8004fe8:	22c0      	movs	r2, #192	; 0xc0
 8004fea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004fec:	4b8d      	ldr	r3, [pc, #564]	; (8005224 <MX_LWIP_Init+0x274>)
 8004fee:	22a8      	movs	r2, #168	; 0xa8
 8004ff0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8004ff2:	4b8c      	ldr	r3, [pc, #560]	; (8005224 <MX_LWIP_Init+0x274>)
 8004ff4:	2264      	movs	r2, #100	; 0x64
 8004ff6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004ff8:	4b8a      	ldr	r3, [pc, #552]	; (8005224 <MX_LWIP_Init+0x274>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004ffe:	2100      	movs	r1, #0
 8005000:	2000      	movs	r0, #0
 8005002:	f7ff ffc5 	bl	8004f90 <tcpip_init_wrap>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005006:	4b85      	ldr	r3, [pc, #532]	; (800521c <MX_LWIP_Init+0x26c>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	061a      	lsls	r2, r3, #24
 800500c:	4b83      	ldr	r3, [pc, #524]	; (800521c <MX_LWIP_Init+0x26c>)
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	431a      	orrs	r2, r3
 8005014:	4b81      	ldr	r3, [pc, #516]	; (800521c <MX_LWIP_Init+0x26c>)
 8005016:	789b      	ldrb	r3, [r3, #2]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	4313      	orrs	r3, r2
 800501c:	4a7f      	ldr	r2, [pc, #508]	; (800521c <MX_LWIP_Init+0x26c>)
 800501e:	78d2      	ldrb	r2, [r2, #3]
 8005020:	4313      	orrs	r3, r2
 8005022:	061a      	lsls	r2, r3, #24
 8005024:	4b7d      	ldr	r3, [pc, #500]	; (800521c <MX_LWIP_Init+0x26c>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	0619      	lsls	r1, r3, #24
 800502a:	4b7c      	ldr	r3, [pc, #496]	; (800521c <MX_LWIP_Init+0x26c>)
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	4319      	orrs	r1, r3
 8005032:	4b7a      	ldr	r3, [pc, #488]	; (800521c <MX_LWIP_Init+0x26c>)
 8005034:	789b      	ldrb	r3, [r3, #2]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	430b      	orrs	r3, r1
 800503a:	4978      	ldr	r1, [pc, #480]	; (800521c <MX_LWIP_Init+0x26c>)
 800503c:	78c9      	ldrb	r1, [r1, #3]
 800503e:	430b      	orrs	r3, r1
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005046:	431a      	orrs	r2, r3
 8005048:	4b74      	ldr	r3, [pc, #464]	; (800521c <MX_LWIP_Init+0x26c>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	0619      	lsls	r1, r3, #24
 800504e:	4b73      	ldr	r3, [pc, #460]	; (800521c <MX_LWIP_Init+0x26c>)
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	4319      	orrs	r1, r3
 8005056:	4b71      	ldr	r3, [pc, #452]	; (800521c <MX_LWIP_Init+0x26c>)
 8005058:	789b      	ldrb	r3, [r3, #2]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	430b      	orrs	r3, r1
 800505e:	496f      	ldr	r1, [pc, #444]	; (800521c <MX_LWIP_Init+0x26c>)
 8005060:	78c9      	ldrb	r1, [r1, #3]
 8005062:	430b      	orrs	r3, r1
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800506a:	431a      	orrs	r2, r3
 800506c:	4b6b      	ldr	r3, [pc, #428]	; (800521c <MX_LWIP_Init+0x26c>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	0619      	lsls	r1, r3, #24
 8005072:	4b6a      	ldr	r3, [pc, #424]	; (800521c <MX_LWIP_Init+0x26c>)
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	4319      	orrs	r1, r3
 800507a:	4b68      	ldr	r3, [pc, #416]	; (800521c <MX_LWIP_Init+0x26c>)
 800507c:	789b      	ldrb	r3, [r3, #2]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	430b      	orrs	r3, r1
 8005082:	4966      	ldr	r1, [pc, #408]	; (800521c <MX_LWIP_Init+0x26c>)
 8005084:	78c9      	ldrb	r1, [r1, #3]
 8005086:	430b      	orrs	r3, r1
 8005088:	0e1b      	lsrs	r3, r3, #24
 800508a:	4313      	orrs	r3, r2
 800508c:	4a66      	ldr	r2, [pc, #408]	; (8005228 <MX_LWIP_Init+0x278>)
 800508e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005090:	4b63      	ldr	r3, [pc, #396]	; (8005220 <MX_LWIP_Init+0x270>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	061a      	lsls	r2, r3, #24
 8005096:	4b62      	ldr	r3, [pc, #392]	; (8005220 <MX_LWIP_Init+0x270>)
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	431a      	orrs	r2, r3
 800509e:	4b60      	ldr	r3, [pc, #384]	; (8005220 <MX_LWIP_Init+0x270>)
 80050a0:	789b      	ldrb	r3, [r3, #2]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	4313      	orrs	r3, r2
 80050a6:	4a5e      	ldr	r2, [pc, #376]	; (8005220 <MX_LWIP_Init+0x270>)
 80050a8:	78d2      	ldrb	r2, [r2, #3]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	061a      	lsls	r2, r3, #24
 80050ae:	4b5c      	ldr	r3, [pc, #368]	; (8005220 <MX_LWIP_Init+0x270>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	0619      	lsls	r1, r3, #24
 80050b4:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <MX_LWIP_Init+0x270>)
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	4319      	orrs	r1, r3
 80050bc:	4b58      	ldr	r3, [pc, #352]	; (8005220 <MX_LWIP_Init+0x270>)
 80050be:	789b      	ldrb	r3, [r3, #2]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	430b      	orrs	r3, r1
 80050c4:	4956      	ldr	r1, [pc, #344]	; (8005220 <MX_LWIP_Init+0x270>)
 80050c6:	78c9      	ldrb	r1, [r1, #3]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050d0:	431a      	orrs	r2, r3
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <MX_LWIP_Init+0x270>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	0619      	lsls	r1, r3, #24
 80050d8:	4b51      	ldr	r3, [pc, #324]	; (8005220 <MX_LWIP_Init+0x270>)
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	4319      	orrs	r1, r3
 80050e0:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <MX_LWIP_Init+0x270>)
 80050e2:	789b      	ldrb	r3, [r3, #2]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	430b      	orrs	r3, r1
 80050e8:	494d      	ldr	r1, [pc, #308]	; (8005220 <MX_LWIP_Init+0x270>)
 80050ea:	78c9      	ldrb	r1, [r1, #3]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80050f4:	431a      	orrs	r2, r3
 80050f6:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <MX_LWIP_Init+0x270>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	0619      	lsls	r1, r3, #24
 80050fc:	4b48      	ldr	r3, [pc, #288]	; (8005220 <MX_LWIP_Init+0x270>)
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	4319      	orrs	r1, r3
 8005104:	4b46      	ldr	r3, [pc, #280]	; (8005220 <MX_LWIP_Init+0x270>)
 8005106:	789b      	ldrb	r3, [r3, #2]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	430b      	orrs	r3, r1
 800510c:	4944      	ldr	r1, [pc, #272]	; (8005220 <MX_LWIP_Init+0x270>)
 800510e:	78c9      	ldrb	r1, [r1, #3]
 8005110:	430b      	orrs	r3, r1
 8005112:	0e1b      	lsrs	r3, r3, #24
 8005114:	4313      	orrs	r3, r2
 8005116:	4a45      	ldr	r2, [pc, #276]	; (800522c <MX_LWIP_Init+0x27c>)
 8005118:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800511a:	4b42      	ldr	r3, [pc, #264]	; (8005224 <MX_LWIP_Init+0x274>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	061a      	lsls	r2, r3, #24
 8005120:	4b40      	ldr	r3, [pc, #256]	; (8005224 <MX_LWIP_Init+0x274>)
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	431a      	orrs	r2, r3
 8005128:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <MX_LWIP_Init+0x274>)
 800512a:	789b      	ldrb	r3, [r3, #2]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	4313      	orrs	r3, r2
 8005130:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <MX_LWIP_Init+0x274>)
 8005132:	78d2      	ldrb	r2, [r2, #3]
 8005134:	4313      	orrs	r3, r2
 8005136:	061a      	lsls	r2, r3, #24
 8005138:	4b3a      	ldr	r3, [pc, #232]	; (8005224 <MX_LWIP_Init+0x274>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	0619      	lsls	r1, r3, #24
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <MX_LWIP_Init+0x274>)
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	4319      	orrs	r1, r3
 8005146:	4b37      	ldr	r3, [pc, #220]	; (8005224 <MX_LWIP_Init+0x274>)
 8005148:	789b      	ldrb	r3, [r3, #2]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	430b      	orrs	r3, r1
 800514e:	4935      	ldr	r1, [pc, #212]	; (8005224 <MX_LWIP_Init+0x274>)
 8005150:	78c9      	ldrb	r1, [r1, #3]
 8005152:	430b      	orrs	r3, r1
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800515a:	431a      	orrs	r2, r3
 800515c:	4b31      	ldr	r3, [pc, #196]	; (8005224 <MX_LWIP_Init+0x274>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	0619      	lsls	r1, r3, #24
 8005162:	4b30      	ldr	r3, [pc, #192]	; (8005224 <MX_LWIP_Init+0x274>)
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	4319      	orrs	r1, r3
 800516a:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <MX_LWIP_Init+0x274>)
 800516c:	789b      	ldrb	r3, [r3, #2]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	430b      	orrs	r3, r1
 8005172:	492c      	ldr	r1, [pc, #176]	; (8005224 <MX_LWIP_Init+0x274>)
 8005174:	78c9      	ldrb	r1, [r1, #3]
 8005176:	430b      	orrs	r3, r1
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800517e:	431a      	orrs	r2, r3
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <MX_LWIP_Init+0x274>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	0619      	lsls	r1, r3, #24
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <MX_LWIP_Init+0x274>)
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	4319      	orrs	r1, r3
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <MX_LWIP_Init+0x274>)
 8005190:	789b      	ldrb	r3, [r3, #2]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	430b      	orrs	r3, r1
 8005196:	4923      	ldr	r1, [pc, #140]	; (8005224 <MX_LWIP_Init+0x274>)
 8005198:	78c9      	ldrb	r1, [r1, #3]
 800519a:	430b      	orrs	r3, r1
 800519c:	0e1b      	lsrs	r3, r3, #24
 800519e:	4313      	orrs	r3, r2
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <MX_LWIP_Init+0x280>)
 80051a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80051a4:	4b23      	ldr	r3, [pc, #140]	; (8005234 <MX_LWIP_Init+0x284>)
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	4b23      	ldr	r3, [pc, #140]	; (8005238 <MX_LWIP_Init+0x288>)
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	2300      	movs	r3, #0
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4b1f      	ldr	r3, [pc, #124]	; (8005230 <MX_LWIP_Init+0x280>)
 80051b2:	4a1e      	ldr	r2, [pc, #120]	; (800522c <MX_LWIP_Init+0x27c>)
 80051b4:	491c      	ldr	r1, [pc, #112]	; (8005228 <MX_LWIP_Init+0x278>)
 80051b6:	4821      	ldr	r0, [pc, #132]	; (800523c <MX_LWIP_Init+0x28c>)
 80051b8:	f009 fd12 	bl	800ebe0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80051bc:	481f      	ldr	r0, [pc, #124]	; (800523c <MX_LWIP_Init+0x28c>)
 80051be:	f009 fec5 	bl	800ef4c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <MX_LWIP_Init+0x28c>)
 80051c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80051d4:	4819      	ldr	r0, [pc, #100]	; (800523c <MX_LWIP_Init+0x28c>)
 80051d6:	f009 fec9 	bl	800ef6c <netif_set_up>
 80051da:	e002      	b.n	80051e2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80051dc:	4817      	ldr	r0, [pc, #92]	; (800523c <MX_LWIP_Init+0x28c>)
 80051de:	f009 ff33 	bl	800f048 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80051e2:	4917      	ldr	r1, [pc, #92]	; (8005240 <MX_LWIP_Init+0x290>)
 80051e4:	4815      	ldr	r0, [pc, #84]	; (800523c <MX_LWIP_Init+0x28c>)
 80051e6:	f009 ffcb 	bl	800f180 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80051ea:	2224      	movs	r2, #36	; 0x24
 80051ec:	2100      	movs	r1, #0
 80051ee:	4815      	ldr	r0, [pc, #84]	; (8005244 <MX_LWIP_Init+0x294>)
 80051f0:	f012 fb49 	bl	8017886 <memset>
  attributes.name = "EthLink";
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <MX_LWIP_Init+0x294>)
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <MX_LWIP_Init+0x298>)
 80051f8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <MX_LWIP_Init+0x294>)
 80051fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005200:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <MX_LWIP_Init+0x294>)
 8005204:	2210      	movs	r2, #16
 8005206:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005208:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <MX_LWIP_Init+0x294>)
 800520a:	490c      	ldr	r1, [pc, #48]	; (800523c <MX_LWIP_Init+0x28c>)
 800520c:	480f      	ldr	r0, [pc, #60]	; (800524c <MX_LWIP_Init+0x29c>)
 800520e:	f000 fe24 	bl	8005e5a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 8005212:	f000 fd29 	bl	8005c68 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 8005216:	bf00      	nop
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	24000384 	.word	0x24000384
 8005220:	24000388 	.word	0x24000388
 8005224:	2400038c 	.word	0x2400038c
 8005228:	24000378 	.word	0x24000378
 800522c:	2400037c 	.word	0x2400037c
 8005230:	24000380 	.word	0x24000380
 8005234:	08016645 	.word	0x08016645
 8005238:	080056e5 	.word	0x080056e5
 800523c:	24000344 	.word	0x24000344
 8005240:	08005251 	.word	0x08005251
 8005244:	24000390 	.word	0x24000390
 8005248:	080199f4 	.word	0x080199f4
 800524c:	080059d9 	.word	0x080059d9

08005250 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <HAL_ETH_RxCpltCallback+0x1c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f001 f895 	bl	80063a0 <osSemaphoreRelease>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	240003bc 	.word	0x240003bc

08005284 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_ETH_TxCpltCallback+0x1c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f001 f885 	bl	80063a0 <osSemaphoreRelease>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	240003c0 	.word	0x240003c0

080052a4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fd fbe5 	bl	8002a7c <HAL_ETH_GetDMAError>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d104      	bne.n	80052c6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80052bc:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <HAL_ETH_ErrorCallback+0x2c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f001 f86d 	bl	80063a0 <osSemaphoreRelease>
  }
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	240003bc 	.word	0x240003bc

080052d4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b0aa      	sub	sp, #168	; 0xa8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80052ee:	f107 0310 	add.w	r3, r7, #16
 80052f2:	2264      	movs	r2, #100	; 0x64
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f012 fac5 	bl	8017886 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80052fc:	4b85      	ldr	r3, [pc, #532]	; (8005514 <low_level_init+0x240>)
 80052fe:	4a86      	ldr	r2, [pc, #536]	; (8005518 <low_level_init+0x244>)
 8005300:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005302:	2300      	movs	r3, #0
 8005304:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800530a:	23e1      	movs	r3, #225	; 0xe1
 800530c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800530e:	2300      	movs	r3, #0
 8005310:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005312:	2300      	movs	r3, #0
 8005314:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005316:	2300      	movs	r3, #0
 8005318:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800531a:	4a7e      	ldr	r2, [pc, #504]	; (8005514 <low_level_init+0x240>)
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005322:	4b7c      	ldr	r3, [pc, #496]	; (8005514 <low_level_init+0x240>)
 8005324:	2201      	movs	r2, #1
 8005326:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005328:	4b7a      	ldr	r3, [pc, #488]	; (8005514 <low_level_init+0x240>)
 800532a:	4a7c      	ldr	r2, [pc, #496]	; (800551c <low_level_init+0x248>)
 800532c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800532e:	4b79      	ldr	r3, [pc, #484]	; (8005514 <low_level_init+0x240>)
 8005330:	4a7b      	ldr	r2, [pc, #492]	; (8005520 <low_level_init+0x24c>)
 8005332:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005334:	4b77      	ldr	r3, [pc, #476]	; (8005514 <low_level_init+0x240>)
 8005336:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800533a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800533c:	4875      	ldr	r0, [pc, #468]	; (8005514 <low_level_init+0x240>)
 800533e:	f7fc fba9 	bl	8001a94 <HAL_ETH_Init>
 8005342:	4603      	mov	r3, r0
 8005344:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005348:	2238      	movs	r2, #56	; 0x38
 800534a:	2100      	movs	r1, #0
 800534c:	4875      	ldr	r0, [pc, #468]	; (8005524 <low_level_init+0x250>)
 800534e:	f012 fa9a 	bl	8017886 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005352:	4b74      	ldr	r3, [pc, #464]	; (8005524 <low_level_init+0x250>)
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005358:	4b72      	ldr	r3, [pc, #456]	; (8005524 <low_level_init+0x250>)
 800535a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800535e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005360:	4b70      	ldr	r3, [pc, #448]	; (8005524 <low_level_init+0x250>)
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005366:	4870      	ldr	r0, [pc, #448]	; (8005528 <low_level_init+0x254>)
 8005368:	f009 fad6 	bl	800e918 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2206      	movs	r2, #6
 8005370:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005374:	4b67      	ldr	r3, [pc, #412]	; (8005514 <low_level_init+0x240>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005380:	4b64      	ldr	r3, [pc, #400]	; (8005514 <low_level_init+0x240>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	785a      	ldrb	r2, [r3, #1]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800538c:	4b61      	ldr	r3, [pc, #388]	; (8005514 <low_level_init+0x240>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	789a      	ldrb	r2, [r3, #2]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005398:	4b5e      	ldr	r3, [pc, #376]	; (8005514 <low_level_init+0x240>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	78da      	ldrb	r2, [r3, #3]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80053a4:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <low_level_init+0x240>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	791a      	ldrb	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80053b0:	4b58      	ldr	r3, [pc, #352]	; (8005514 <low_level_init+0x240>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	795a      	ldrb	r2, [r3, #5]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80053c2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053ca:	f043 030a 	orr.w	r3, r3, #10
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80053d6:	2200      	movs	r2, #0
 80053d8:	2101      	movs	r1, #1
 80053da:	2001      	movs	r0, #1
 80053dc:	f000 ff04 	bl	80061e8 <osSemaphoreNew>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a52      	ldr	r2, [pc, #328]	; (800552c <low_level_init+0x258>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80053e6:	2200      	movs	r2, #0
 80053e8:	2101      	movs	r1, #1
 80053ea:	2001      	movs	r0, #1
 80053ec:	f000 fefc 	bl	80061e8 <osSemaphoreNew>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4a4f      	ldr	r2, [pc, #316]	; (8005530 <low_level_init+0x25c>)
 80053f4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80053f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053fa:	2224      	movs	r2, #36	; 0x24
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f012 fa41 	bl	8017886 <memset>
  attributes.name = "EthIf";
 8005404:	4b4b      	ldr	r3, [pc, #300]	; (8005534 <low_level_init+0x260>)
 8005406:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8005410:	2330      	movs	r3, #48	; 0x30
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005416:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800541a:	461a      	mov	r2, r3
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4846      	ldr	r0, [pc, #280]	; (8005538 <low_level_init+0x264>)
 8005420:	f000 fd1b 	bl	8005e5a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005424:	4945      	ldr	r1, [pc, #276]	; (800553c <low_level_init+0x268>)
 8005426:	4846      	ldr	r0, [pc, #280]	; (8005540 <low_level_init+0x26c>)
 8005428:	f7fb ffe7 	bl	80013fa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800542c:	4844      	ldr	r0, [pc, #272]	; (8005540 <low_level_init+0x26c>)
 800542e:	f7fc f816 	bl	800145e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005432:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005436:	2b00      	cmp	r3, #0
 8005438:	d165      	bne.n	8005506 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800543a:	4841      	ldr	r0, [pc, #260]	; (8005540 <low_level_init+0x26c>)
 800543c:	f7fc f8b7 	bl	80015ae <LAN8742_GetLinkState>
 8005440:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005448:	2b01      	cmp	r3, #1
 800544a:	dc06      	bgt.n	800545a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f009 fe65 	bl	800f11c <netif_set_link_down>
      netif_set_down(netif);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f009 fdf8 	bl	800f048 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005458:	e057      	b.n	800550a <low_level_init+0x236>
      switch (PHYLinkState)
 800545a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800545e:	3b02      	subs	r3, #2
 8005460:	2b03      	cmp	r3, #3
 8005462:	d82b      	bhi.n	80054bc <low_level_init+0x1e8>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <low_level_init+0x198>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	0800547d 	.word	0x0800547d
 8005470:	0800548f 	.word	0x0800548f
 8005474:	0800549f 	.word	0x0800549f
 8005478:	080054af 	.word	0x080054af
        duplex = ETH_FULLDUPLEX_MODE;
 800547c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005484:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005488:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800548c:	e01f      	b.n	80054ce <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800549c:	e017      	b.n	80054ce <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800549e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80054ac:	e00f      	b.n	80054ce <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80054ba:	e008      	b.n	80054ce <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80054bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80054c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80054cc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80054ce:	f107 0310 	add.w	r3, r7, #16
 80054d2:	4619      	mov	r1, r3
 80054d4:	480f      	ldr	r0, [pc, #60]	; (8005514 <low_level_init+0x240>)
 80054d6:	f7fd f88b 	bl	80025f0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80054da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 80054e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80054e6:	f107 0310 	add.w	r3, r7, #16
 80054ea:	4619      	mov	r1, r3
 80054ec:	4809      	ldr	r0, [pc, #36]	; (8005514 <low_level_init+0x240>)
 80054ee:	f7fd fa53 	bl	8002998 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80054f2:	4808      	ldr	r0, [pc, #32]	; (8005514 <low_level_init+0x240>)
 80054f4:	f7fc fbb4 	bl	8001c60 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f009 fd37 	bl	800ef6c <netif_set_up>
    netif_set_link_up(netif);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f009 fdd6 	bl	800f0b0 <netif_set_link_up>
}
 8005504:	e001      	b.n	800550a <low_level_init+0x236>
    Error_Handler();
 8005506:	f7fb fb93 	bl	8000c30 <Error_Handler>
}
 800550a:	bf00      	nop
 800550c:	37a8      	adds	r7, #168	; 0xa8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	240003c4 	.word	0x240003c4
 8005518:	40028000 	.word	0x40028000
 800551c:	30040060 	.word	0x30040060
 8005520:	30040000 	.word	0x30040000
 8005524:	24000474 	.word	0x24000474
 8005528:	0801d464 	.word	0x0801d464
 800552c:	240003bc 	.word	0x240003bc
 8005530:	240003c0 	.word	0x240003c0
 8005534:	080199fc 	.word	0x080199fc
 8005538:	08005691 	.word	0x08005691
 800553c:	24000024 	.word	0x24000024
 8005540:	240004ac 	.word	0x240004ac

08005544 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b092      	sub	sp, #72	; 0x48
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	2230      	movs	r2, #48	; 0x30
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f012 f98e 	bl	8017886 <memset>

  for(q = p; q != NULL; q = q->next)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	643b      	str	r3, [r7, #64]	; 0x40
 800556e:	e045      	b.n	80055fc <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005572:	2b03      	cmp	r3, #3
 8005574:	d902      	bls.n	800557c <low_level_output+0x38>
      return ERR_IF;
 8005576:	f06f 030b 	mvn.w	r3, #11
 800557a:	e065      	b.n	8005648 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 800557c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557e:	6859      	ldr	r1, [r3, #4]
 8005580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	3348      	adds	r3, #72	; 0x48
 800558c:	443b      	add	r3, r7
 800558e:	3b3c      	subs	r3, #60	; 0x3c
 8005590:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005594:	895b      	ldrh	r3, [r3, #10]
 8005596:	4619      	mov	r1, r3
 8005598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	3348      	adds	r3, #72	; 0x48
 80055a4:	443b      	add	r3, r7
 80055a6:	3b38      	subs	r3, #56	; 0x38
 80055a8:	6019      	str	r1, [r3, #0]

    if(i>0)
 80055aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80055b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b2:	1e5a      	subs	r2, r3, #1
 80055b4:	f107 000c 	add.w	r0, r7, #12
 80055b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055ba:	460b      	mov	r3, r1
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	440b      	add	r3, r1
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	18c1      	adds	r1, r0, r3
 80055c4:	4613      	mov	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	3348      	adds	r3, #72	; 0x48
 80055ce:	443b      	add	r3, r7
 80055d0:	3b34      	subs	r3, #52	; 0x34
 80055d2:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80055d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 80055dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055de:	4613      	mov	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	3348      	adds	r3, #72	; 0x48
 80055e8:	443b      	add	r3, r7
 80055ea:	3b34      	subs	r3, #52	; 0x34
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    }

    i++;
 80055f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f2:	3301      	adds	r3, #1
 80055f4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1b6      	bne.n	8005570 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	891b      	ldrh	r3, [r3, #8]
 8005606:	461a      	mov	r2, r3
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <low_level_output+0x10c>)
 800560a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800560c:	4a10      	ldr	r2, [pc, #64]	; (8005650 <low_level_output+0x10c>)
 800560e:	f107 030c 	add.w	r3, r7, #12
 8005612:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005614:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <low_level_output+0x10c>)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800561a:	6838      	ldr	r0, [r7, #0]
 800561c:	f00a fa04 	bl	800fa28 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005620:	490b      	ldr	r1, [pc, #44]	; (8005650 <low_level_output+0x10c>)
 8005622:	480c      	ldr	r0, [pc, #48]	; (8005654 <low_level_output+0x110>)
 8005624:	f7fc fc20 	bl	8001e68 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005628:	bf00      	nop
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <low_level_output+0x114>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f04f 31ff 	mov.w	r1, #4294967295
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fe62 	bl	80062fc <osSemaphoreAcquire>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f5      	bne.n	800562a <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800563e:	4805      	ldr	r0, [pc, #20]	; (8005654 <low_level_output+0x110>)
 8005640:	f7fc fd91 	bl	8002166 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005644:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005648:	4618      	mov	r0, r3
 800564a:	3748      	adds	r7, #72	; 0x48
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	24000474 	.word	0x24000474
 8005654:	240003c4 	.word	0x240003c4
 8005658:	240003c0 	.word	0x240003c0

0800565c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005668:	4b07      	ldr	r3, [pc, #28]	; (8005688 <low_level_input+0x2c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	4619      	mov	r1, r3
 8005676:	4805      	ldr	r0, [pc, #20]	; (800568c <low_level_input+0x30>)
 8005678:	f7fc fc47 	bl	8001f0a <HAL_ETH_ReadData>
  }

  return p;
 800567c:	68fb      	ldr	r3, [r7, #12]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	240003b8 	.word	0x240003b8
 800568c:	240003c4 	.word	0x240003c4

08005690 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80056a0:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <ethernetif_input+0x50>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f04f 31ff 	mov.w	r1, #4294967295
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fe27 	bl	80062fc <osSemaphoreAcquire>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f5      	bne.n	80056a0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80056b4:	68b8      	ldr	r0, [r7, #8]
 80056b6:	f7ff ffd1 	bl	800565c <low_level_input>
 80056ba:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	4798      	blx	r3
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f00a f902 	bl	800f8dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ea      	bne.n	80056b4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80056de:	e7df      	b.n	80056a0 <ethernetif_input+0x10>
 80056e0:	240003bc 	.word	0x240003bc

080056e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <ethernetif_init+0x1c>
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <ethernetif_init+0x48>)
 80056f4:	f240 2217 	movw	r2, #535	; 0x217
 80056f8:	490d      	ldr	r1, [pc, #52]	; (8005730 <ethernetif_init+0x4c>)
 80056fa:	480e      	ldr	r0, [pc, #56]	; (8005734 <ethernetif_init+0x50>)
 80056fc:	f012 f960 	bl	80179c0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2273      	movs	r2, #115	; 0x73
 8005704:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2274      	movs	r2, #116	; 0x74
 800570c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <ethernetif_init+0x54>)
 8005714:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <ethernetif_init+0x58>)
 800571a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fdd9 	bl	80052d4 <low_level_init>

  return ERR_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	08019a04 	.word	0x08019a04
 8005730:	08019a20 	.word	0x08019a20
 8005734:	08019a30 	.word	0x08019a30
 8005738:	0800c261 	.word	0x0800c261
 800573c:	08005545 	.word	0x08005545

08005740 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800574c:	68f9      	ldr	r1, [r7, #12]
 800574e:	4809      	ldr	r0, [pc, #36]	; (8005774 <pbuf_free_custom+0x34>)
 8005750:	f009 f9d2 	bl	800eaf8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <pbuf_free_custom+0x38>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d107      	bne.n	800576c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <pbuf_free_custom+0x38>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <pbuf_free_custom+0x3c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fe1a 	bl	80063a0 <osSemaphoreRelease>
  }
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	0801d464 	.word	0x0801d464
 8005778:	240003b8 	.word	0x240003b8
 800577c:	240003bc 	.word	0x240003bc

08005780 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005784:	f7fb ffea 	bl	800175c <HAL_GetTick>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5d      	ldr	r2, [pc, #372]	; (8005924 <HAL_ETH_MspInit+0x194>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f040 80b3 	bne.w	800591a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80057b4:	4b5c      	ldr	r3, [pc, #368]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057ba:	4a5b      	ldr	r2, [pc, #364]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80057c4:	4b58      	ldr	r3, [pc, #352]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80057d2:	4b55      	ldr	r3, [pc, #340]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057d8:	4a53      	ldr	r2, [pc, #332]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80057f0:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057f6:	4a4c      	ldr	r2, [pc, #304]	; (8005928 <HAL_ETH_MspInit+0x198>)
 80057f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005800:	4b49      	ldr	r3, [pc, #292]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800580e:	4b46      	ldr	r3, [pc, #280]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005814:	4a44      	ldr	r2, [pc, #272]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005816:	f043 0304 	orr.w	r3, r3, #4
 800581a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800581e:	4b42      	ldr	r3, [pc, #264]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582c:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <HAL_ETH_MspInit+0x198>)
 800582e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005832:	4a3d      	ldr	r2, [pc, #244]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800583c:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <HAL_ETH_MspInit+0x198>)
 800583e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800584a:	4b37      	ldr	r3, [pc, #220]	; (8005928 <HAL_ETH_MspInit+0x198>)
 800584c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005850:	4a35      	ldr	r2, [pc, #212]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800585a:	4b33      	ldr	r3, [pc, #204]	; (8005928 <HAL_ETH_MspInit+0x198>)
 800585c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005868:	4b2f      	ldr	r3, [pc, #188]	; (8005928 <HAL_ETH_MspInit+0x198>)
 800586a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800586e:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <HAL_ETH_MspInit+0x198>)
 8005870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005878:	4b2b      	ldr	r3, [pc, #172]	; (8005928 <HAL_ETH_MspInit+0x198>)
 800587a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005886:	2332      	movs	r3, #50	; 0x32
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588a:	2302      	movs	r3, #2
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800588e:	2300      	movs	r3, #0
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005892:	2303      	movs	r3, #3
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005896:	230b      	movs	r3, #11
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800589a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800589e:	4619      	mov	r1, r3
 80058a0:	4822      	ldr	r0, [pc, #136]	; (800592c <HAL_ETH_MspInit+0x19c>)
 80058a2:	f7fd fe6d 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80058a6:	2386      	movs	r3, #134	; 0x86
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058aa:	2302      	movs	r3, #2
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b2:	2303      	movs	r3, #3
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058b6:	230b      	movs	r3, #11
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058be:	4619      	mov	r1, r3
 80058c0:	481b      	ldr	r0, [pc, #108]	; (8005930 <HAL_ETH_MspInit+0x1a0>)
 80058c2:	f7fd fe5d 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80058c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058cc:	2302      	movs	r3, #2
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d4:	2303      	movs	r3, #3
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058d8:	230b      	movs	r3, #11
 80058da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e0:	4619      	mov	r1, r3
 80058e2:	4814      	ldr	r0, [pc, #80]	; (8005934 <HAL_ETH_MspInit+0x1a4>)
 80058e4:	f7fd fe4c 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80058e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ee:	2302      	movs	r3, #2
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f6:	2303      	movs	r3, #3
 80058f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058fa:	230b      	movs	r3, #11
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80058fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005902:	4619      	mov	r1, r3
 8005904:	480c      	ldr	r0, [pc, #48]	; (8005938 <HAL_ETH_MspInit+0x1a8>)
 8005906:	f7fd fe3b 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800590a:	2200      	movs	r2, #0
 800590c:	2105      	movs	r1, #5
 800590e:	203d      	movs	r0, #61	; 0x3d
 8005910:	f7fc f808 	bl	8001924 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005914:	203d      	movs	r0, #61	; 0x3d
 8005916:	f7fc f81f 	bl	8001958 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800591a:	bf00      	nop
 800591c:	3738      	adds	r7, #56	; 0x38
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40028000 	.word	0x40028000
 8005928:	58024400 	.word	0x58024400
 800592c:	58020800 	.word	0x58020800
 8005930:	58020000 	.word	0x58020000
 8005934:	58020400 	.word	0x58020400
 8005938:	58021800 	.word	0x58021800

0800593c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005940:	4802      	ldr	r0, [pc, #8]	; (800594c <ETH_PHY_IO_Init+0x10>)
 8005942:	f7fd f843 	bl	80029cc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	240003c4 	.word	0x240003c4

08005950 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  return 0;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	4807      	ldr	r0, [pc, #28]	; (8005990 <ETH_PHY_IO_ReadReg+0x30>)
 8005974:	f7fc fd94 	bl	80024a0 <HAL_ETH_ReadPHYRegister>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295
 8005982:	e000      	b.n	8005986 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	240003c4 	.word	0x240003c4

08005994 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	68f9      	ldr	r1, [r7, #12]
 80059a6:	4807      	ldr	r0, [pc, #28]	; (80059c4 <ETH_PHY_IO_WriteReg+0x30>)
 80059a8:	f7fc fdce 	bl	8002548 <HAL_ETH_WritePHYRegister>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	e000      	b.n	80059ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	240003c4 	.word	0x240003c4

080059c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80059cc:	f7fb fec6 	bl	800175c <HAL_GetTick>
 80059d0:	4603      	mov	r3, r0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b0a0      	sub	sp, #128	; 0x80
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80059e0:	f107 0308 	add.w	r3, r7, #8
 80059e4:	2264      	movs	r2, #100	; 0x64
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f011 ff4c 	bl	8017886 <memset>
  int32_t PHYLinkState = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f6:	2300      	movs	r3, #0
 80059f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80059fa:	2300      	movs	r3, #0
 80059fc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	66fb      	str	r3, [r7, #108]	; 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 8005a02:	f000 f921 	bl	8005c48 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005a06:	483c      	ldr	r0, [pc, #240]	; (8005af8 <ethernet_link_thread+0x120>)
 8005a08:	f7fb fdd1 	bl	80015ae <LAN8742_GetLinkState>
 8005a0c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <ethernet_link_thread+0x62>
 8005a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	dc09      	bgt.n	8005a3a <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 8005a26:	4835      	ldr	r0, [pc, #212]	; (8005afc <ethernet_link_thread+0x124>)
 8005a28:	f7fc f9a6 	bl	8001d78 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005a2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a2e:	f009 fb0b 	bl	800f048 <netif_set_down>
    netif_set_link_down(netif);
 8005a32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a34:	f009 fb72 	bl	800f11c <netif_set_link_down>
 8005a38:	e055      	b.n	8005ae6 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d14e      	bne.n	8005ae6 <ethernet_link_thread+0x10e>
 8005a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	dd4b      	ble.n	8005ae6 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 8005a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a50:	3b02      	subs	r3, #2
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d82a      	bhi.n	8005aac <ethernet_link_thread+0xd4>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <ethernet_link_thread+0x84>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a6d 	.word	0x08005a6d
 8005a60:	08005a7f 	.word	0x08005a7f
 8005a64:	08005a8f 	.word	0x08005a8f
 8005a68:	08005a9f 	.word	0x08005a9f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a70:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005a72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a76:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005a7c:	e017      	b.n	8005aae <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a86:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005a8c:	e00f      	b.n	8005aae <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a92:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005a94:	2300      	movs	r3, #0
 8005a96:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005a9c:	e007      	b.n	8005aae <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005aaa:	e000      	b.n	8005aae <ethernet_link_thread+0xd6>
    default:
      break;
 8005aac:	bf00      	nop
    }

    if(linkchanged)
 8005aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d018      	beq.n	8005ae6 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4810      	ldr	r0, [pc, #64]	; (8005afc <ethernet_link_thread+0x124>)
 8005abc:	f7fc fd98 	bl	80025f0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ac2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4619      	mov	r1, r3
 8005ace:	480b      	ldr	r0, [pc, #44]	; (8005afc <ethernet_link_thread+0x124>)
 8005ad0:	f7fc ff62 	bl	8002998 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005ad4:	4809      	ldr	r0, [pc, #36]	; (8005afc <ethernet_link_thread+0x124>)
 8005ad6:	f7fc f8c3 	bl	8001c60 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005ada:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005adc:	f009 fa46 	bl	800ef6c <netif_set_up>
      netif_set_link_up(netif);
 8005ae0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ae2:	f009 fae5 	bl	800f0b0 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 8005ae6:	f000 f8bf 	bl	8005c68 <sys_unlock_tcpip_core>
  osDelay(100);
 8005aea:	2064      	movs	r0, #100	; 0x64
 8005aec:	f000 fa53 	bl	8005f96 <osDelay>
  LOCK_TCPIP_CORE();
 8005af0:	f000 f8aa 	bl	8005c48 <sys_lock_tcpip_core>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005af4:	e787      	b.n	8005a06 <ethernet_link_thread+0x2e>
 8005af6:	bf00      	nop
 8005af8:	240004ac 	.word	0x240004ac
 8005afc:	240003c4 	.word	0x240003c4

08005b00 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005b08:	4812      	ldr	r0, [pc, #72]	; (8005b54 <HAL_ETH_RxAllocateCallback+0x54>)
 8005b0a:	f008 ff81 	bl	800ea10 <memp_malloc_pool>
 8005b0e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d014      	beq.n	8005b40 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f103 0220 	add.w	r2, r3, #32
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <HAL_ETH_RxAllocateCallback+0x58>)
 8005b24:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005b2e:	9201      	str	r2, [sp, #4]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2241      	movs	r2, #65	; 0x41
 8005b36:	2100      	movs	r1, #0
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f009 fd17 	bl	800f56c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005b3e:	e005      	b.n	8005b4c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	0801d464 	.word	0x0801d464
 8005b58:	08005741 	.word	0x08005741
 8005b5c:	240003b8 	.word	0x240003b8

08005b60 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b08d      	sub	sp, #52	; 0x34
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3b20      	subs	r3, #32
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	2200      	movs	r2, #0
 8005b8a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e003      	b.n	8005baa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb6:	e009      	b.n	8005bcc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	891a      	ldrh	r2, [r3, #8]
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f2      	bne.n	8005bb8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	623a      	str	r2, [r7, #32]
 8005bd8:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dd1d      	ble.n	8005c1c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f003 021f 	and.w	r2, r3, #31
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005bf0:	f3bf 8f4f 	dsb	sy
}
 8005bf4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005bf6:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <HAL_ETH_RxLinkCallback+0xcc>)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	3320      	adds	r3, #32
 8005c02:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	3b20      	subs	r3, #32
 8005c08:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dcf2      	bgt.n	8005bf6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005c10:	f3bf 8f4f 	dsb	sy
}
 8005c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c16:	f3bf 8f6f 	isb	sy
}
 8005c1a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005c1c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005c1e:	bf00      	nop
 8005c20:	3734      	adds	r7, #52	; 0x34
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f009 fe4f 	bl	800f8dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 8005c4c:	4804      	ldr	r0, [pc, #16]	; (8005c60 <sys_lock_tcpip_core+0x18>)
 8005c4e:	f00a fadd 	bl	801020c <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8005c52:	f000 f995 	bl	8005f80 <osThreadGetId>
 8005c56:	4603      	mov	r3, r0
 8005c58:	4a02      	ldr	r2, [pc, #8]	; (8005c64 <sys_lock_tcpip_core+0x1c>)
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	24010904 	.word	0x24010904
 8005c64:	240004cc 	.word	0x240004cc

08005c68 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <sys_unlock_tcpip_core+0x14>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8005c72:	4803      	ldr	r0, [pc, #12]	; (8005c80 <sys_unlock_tcpip_core+0x18>)
 8005c74:	f00a fad9 	bl	801022a <sys_mutex_unlock>
}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	240004cc 	.word	0x240004cc
 8005c80:	24010904 	.word	0x24010904

08005c84 <sys_check_core_locking>:

void sys_check_core_locking(void){
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <sys_check_core_locking+0x5c>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d006      	beq.n	8005ca4 <sys_check_core_locking+0x20>
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <sys_check_core_locking+0x60>)
 8005c98:	f240 32cb 	movw	r2, #971	; 0x3cb
 8005c9c:	4912      	ldr	r1, [pc, #72]	; (8005ce8 <sys_check_core_locking+0x64>)
 8005c9e:	4813      	ldr	r0, [pc, #76]	; (8005cec <sys_check_core_locking+0x68>)
 8005ca0:	f011 fe8e 	bl	80179c0 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 8005ca4:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <sys_check_core_locking+0x6c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d014      	beq.n	8005cd6 <sys_check_core_locking+0x52>
	  osThreadId_t current_thread_id = osThreadGetId();
 8005cac:	f000 f968 	bl	8005f80 <osThreadGetId>
 8005cb0:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <sys_check_core_locking+0x70>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d006      	beq.n	8005cca <sys_check_core_locking+0x46>
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <sys_check_core_locking+0x60>)
 8005cbe:	f240 32d1 	movw	r2, #977	; 0x3d1
 8005cc2:	490d      	ldr	r1, [pc, #52]	; (8005cf8 <sys_check_core_locking+0x74>)
 8005cc4:	4809      	ldr	r0, [pc, #36]	; (8005cec <sys_check_core_locking+0x68>)
 8005cc6:	f011 fe7b 	bl	80179c0 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <sys_check_core_locking+0x70>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d000      	beq.n	8005cd6 <sys_check_core_locking+0x52>
 8005cd4:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	e000ed00 	.word	0xe000ed00
 8005ce4:	08019a04 	.word	0x08019a04
 8005ce8:	08019a58 	.word	0x08019a58
 8005cec:	08019a30 	.word	0x08019a30
 8005cf0:	240004d0 	.word	0x240004d0
 8005cf4:	240004cc 	.word	0x240004cc
 8005cf8:	08019a80 	.word	0x08019a80

08005cfc <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 8005d00:	f000 f93e 	bl	8005f80 <osThreadGetId>
 8005d04:	4603      	mov	r3, r0
 8005d06:	4a02      	ldr	r2, [pc, #8]	; (8005d10 <sys_mark_tcpip_thread+0x14>)
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	240004d0 	.word	0x240004d0

08005d14 <__NVIC_SetPriority>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	db0a      	blt.n	8005d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	490c      	ldr	r1, [pc, #48]	; (8005d60 <__NVIC_SetPriority+0x4c>)
 8005d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d32:	0112      	lsls	r2, r2, #4
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	440b      	add	r3, r1
 8005d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d3c:	e00a      	b.n	8005d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4908      	ldr	r1, [pc, #32]	; (8005d64 <__NVIC_SetPriority+0x50>)
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	0112      	lsls	r2, r2, #4
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	440b      	add	r3, r1
 8005d52:	761a      	strb	r2, [r3, #24]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	e000e100 	.word	0xe000e100
 8005d64:	e000ed00 	.word	0xe000ed00

08005d68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <SysTick_Handler+0x1c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d70:	f003 f98c 	bl	800908c <xTaskGetSchedulerState>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d7a:	f001 f97d 	bl	8007078 <xPortSysTickHandler>
  }
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	e000e010 	.word	0xe000e010

08005d88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f06f 0004 	mvn.w	r0, #4
 8005d92:	f7ff ffbf 	bl	8005d14 <__NVIC_SetPriority>
#endif
}
 8005d96:	bf00      	nop
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da2:	f3ef 8305 	mrs	r3, IPSR
 8005da6:	603b      	str	r3, [r7, #0]
  return(result);
 8005da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dae:	f06f 0305 	mvn.w	r3, #5
 8005db2:	607b      	str	r3, [r7, #4]
 8005db4:	e00c      	b.n	8005dd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <osKernelInitialize+0x44>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d105      	bne.n	8005dca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <osKernelInitialize+0x44>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	e002      	b.n	8005dd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dd0:	687b      	ldr	r3, [r7, #4]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	240004d4 	.word	0x240004d4

08005de4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dea:	f3ef 8305 	mrs	r3, IPSR
 8005dee:	603b      	str	r3, [r7, #0]
  return(result);
 8005df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8005df6:	f06f 0305 	mvn.w	r3, #5
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	e010      	b.n	8005e20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <osKernelStart+0x48>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d109      	bne.n	8005e1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e06:	f7ff ffbf 	bl	8005d88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <osKernelStart+0x48>)
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e10:	f002 fcae 	bl	8008770 <vTaskStartScheduler>
      stat = osOK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e002      	b.n	8005e20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e20:	687b      	ldr	r3, [r7, #4]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	240004d4 	.word	0x240004d4

08005e30 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e36:	f3ef 8305 	mrs	r3, IPSR
 8005e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e3c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005e42:	f002 fdc1 	bl	80089c8 <xTaskGetTickCountFromISR>
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	e002      	b.n	8005e50 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005e4a:	f002 fdad 	bl	80089a8 <xTaskGetTickCount>
 8005e4e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005e50:	687b      	ldr	r3, [r7, #4]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08e      	sub	sp, #56	; 0x38
 8005e5e:	af04      	add	r7, sp, #16
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e6a:	f3ef 8305 	mrs	r3, IPSR
 8005e6e:	617b      	str	r3, [r7, #20]
  return(result);
 8005e70:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d17f      	bne.n	8005f76 <osThreadNew+0x11c>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d07c      	beq.n	8005f76 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e82:	2318      	movs	r3, #24
 8005e84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d045      	beq.n	8005f22 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <osThreadNew+0x4a>
        name = attr->name;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <osThreadNew+0x70>
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2b38      	cmp	r3, #56	; 0x38
 8005ebc:	d805      	bhi.n	8005eca <osThreadNew+0x70>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <osThreadNew+0x74>
        return (NULL);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e054      	b.n	8005f78 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00e      	beq.n	8005f04 <osThreadNew+0xaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2bbb      	cmp	r3, #187	; 0xbb
 8005eec:	d90a      	bls.n	8005f04 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <osThreadNew+0xaa>
        mem = 1;
 8005efe:	2301      	movs	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e010      	b.n	8005f26 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10c      	bne.n	8005f26 <osThreadNew+0xcc>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d108      	bne.n	8005f26 <osThreadNew+0xcc>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <osThreadNew+0xcc>
          mem = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e001      	b.n	8005f26 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d110      	bne.n	8005f4e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f34:	9202      	str	r2, [sp, #8]
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	6a3a      	ldr	r2, [r7, #32]
 8005f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f002 fa28 	bl	8008398 <xTaskCreateStatic>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	e013      	b.n	8005f76 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d110      	bne.n	8005f76 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f002 fa73 	bl	8008452 <xTaskCreate>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d001      	beq.n	8005f76 <osThreadNew+0x11c>
            hTask = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f76:	693b      	ldr	r3, [r7, #16]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	; 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8005f86:	f003 f871 	bl	800906c <xTaskGetCurrentTaskHandle>
 8005f8a:	6078      	str	r0, [r7, #4]

  return (id);
 8005f8c:	687b      	ldr	r3, [r7, #4]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9e:	f3ef 8305 	mrs	r3, IPSR
 8005fa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <osDelay+0x1c>
    stat = osErrorISR;
 8005faa:	f06f 0305 	mvn.w	r3, #5
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e007      	b.n	8005fc2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f002 fba3 	bl	8008708 <vTaskDelay>
    }
  }

  return (stat);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd8:	f3ef 8305 	mrs	r3, IPSR
 8005fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fde:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d174      	bne.n	80060ce <osMutexNew+0x102>
    if (attr != NULL) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e001      	b.n	8005ff6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <osMutexNew+0x3a>
      rmtx = 1U;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e001      	b.n	800600a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d15c      	bne.n	80060ce <osMutexNew+0x102>
      mem = -1;
 8006014:	f04f 33ff 	mov.w	r3, #4294967295
 8006018:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d015      	beq.n	800604c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <osMutexNew+0x6a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b4f      	cmp	r3, #79	; 0x4f
 800602e:	d902      	bls.n	8006036 <osMutexNew+0x6a>
          mem = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e00c      	b.n	8006050 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <osMutexNew+0x84>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <osMutexNew+0x84>
            mem = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	e001      	b.n	8006050 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d112      	bne.n	800607c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4619      	mov	r1, r3
 8006062:	2004      	movs	r0, #4
 8006064:	f001 fa07 	bl	8007476 <xQueueCreateMutexStatic>
 8006068:	61f8      	str	r0, [r7, #28]
 800606a:	e016      	b.n	800609a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4619      	mov	r1, r3
 8006072:	2001      	movs	r0, #1
 8006074:	f001 f9ff 	bl	8007476 <xQueueCreateMutexStatic>
 8006078:	61f8      	str	r0, [r7, #28]
 800607a:	e00e      	b.n	800609a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006088:	2004      	movs	r0, #4
 800608a:	f001 f9dc 	bl	8007446 <xQueueCreateMutex>
 800608e:	61f8      	str	r0, [r7, #28]
 8006090:	e003      	b.n	800609a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006092:	2001      	movs	r0, #1
 8006094:	f001 f9d7 	bl	8007446 <xQueueCreateMutex>
 8006098:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <osMutexNew+0xee>
        if (attr != NULL) {
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <osMutexNew+0xe2>
          name = attr->name;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	e001      	b.n	80060b2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	69f8      	ldr	r0, [r7, #28]
 80060b6:	f002 f8e7 	bl	8008288 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <osMutexNew+0x102>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f6:	f3ef 8305 	mrs	r3, IPSR
 80060fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80060fc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006102:	f06f 0305 	mvn.w	r3, #5
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	e02c      	b.n	8006164 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006110:	f06f 0303 	mvn.w	r3, #3
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e025      	b.n	8006164 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d011      	beq.n	8006142 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6938      	ldr	r0, [r7, #16]
 8006122:	f001 f9f7 	bl	8007514 <xQueueTakeMutexRecursive>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	d01b      	beq.n	8006164 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006132:	f06f 0301 	mvn.w	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e014      	b.n	8006164 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800613a:	f06f 0302 	mvn.w	r3, #2
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	e010      	b.n	8006164 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6938      	ldr	r0, [r7, #16]
 8006146:	f001 fd8b 	bl	8007c60 <xQueueSemaphoreTake>
 800614a:	4603      	mov	r3, r0
 800614c:	2b01      	cmp	r3, #1
 800614e:	d009      	beq.n	8006164 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006156:	f06f 0301 	mvn.w	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e002      	b.n	8006164 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800615e:	f06f 0302 	mvn.w	r3, #2
 8006162:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006164:	697b      	ldr	r3, [r7, #20]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618a:	f3ef 8305 	mrs	r3, IPSR
 800618e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006190:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <osMutexRelease+0x30>
    stat = osErrorISR;
 8006196:	f06f 0305 	mvn.w	r3, #5
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e01f      	b.n	80061de <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80061a4:	f06f 0303 	mvn.w	r3, #3
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e018      	b.n	80061de <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061b2:	6938      	ldr	r0, [r7, #16]
 80061b4:	f001 f97a 	bl	80074ac <xQueueGiveMutexRecursive>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d00f      	beq.n	80061de <osMutexRelease+0x70>
        stat = osErrorResource;
 80061be:	f06f 0302 	mvn.w	r3, #2
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e00b      	b.n	80061de <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061c6:	2300      	movs	r3, #0
 80061c8:	2200      	movs	r2, #0
 80061ca:	2100      	movs	r1, #0
 80061cc:	6938      	ldr	r0, [r7, #16]
 80061ce:	f001 fa41 	bl	8007654 <xQueueGenericSend>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d002      	beq.n	80061de <osMutexRelease+0x70>
        stat = osErrorResource;
 80061d8:	f06f 0302 	mvn.w	r3, #2
 80061dc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80061de:	697b      	ldr	r3, [r7, #20]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f8:	f3ef 8305 	mrs	r3, IPSR
 80061fc:	613b      	str	r3, [r7, #16]
  return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006200:	2b00      	cmp	r3, #0
 8006202:	d175      	bne.n	80062f0 <osSemaphoreNew+0x108>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d072      	beq.n	80062f0 <osSemaphoreNew+0x108>
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	429a      	cmp	r2, r3
 8006210:	d86e      	bhi.n	80062f0 <osSemaphoreNew+0x108>
    mem = -1;
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d015      	beq.n	800624a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <osSemaphoreNew+0x4c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b4f      	cmp	r3, #79	; 0x4f
 800622c:	d902      	bls.n	8006234 <osSemaphoreNew+0x4c>
        mem = 1;
 800622e:	2301      	movs	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	e00c      	b.n	800624e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d108      	bne.n	800624e <osSemaphoreNew+0x66>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <osSemaphoreNew+0x66>
          mem = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e001      	b.n	800624e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d04c      	beq.n	80062f0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d128      	bne.n	80062ae <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10a      	bne.n	8006278 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2203      	movs	r2, #3
 8006268:	9200      	str	r2, [sp, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	2100      	movs	r1, #0
 800626e:	2001      	movs	r0, #1
 8006270:	f000 fffa 	bl	8007268 <xQueueGenericCreateStatic>
 8006274:	61f8      	str	r0, [r7, #28]
 8006276:	e005      	b.n	8006284 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006278:	2203      	movs	r2, #3
 800627a:	2100      	movs	r1, #0
 800627c:	2001      	movs	r0, #1
 800627e:	f001 f86b 	bl	8007358 <xQueueGenericCreate>
 8006282:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d022      	beq.n	80062d0 <osSemaphoreNew+0xe8>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01f      	beq.n	80062d0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006290:	2300      	movs	r3, #0
 8006292:	2200      	movs	r2, #0
 8006294:	2100      	movs	r1, #0
 8006296:	69f8      	ldr	r0, [r7, #28]
 8006298:	f001 f9dc 	bl	8007654 <xQueueGenericSend>
 800629c:	4603      	mov	r3, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d016      	beq.n	80062d0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80062a2:	69f8      	ldr	r0, [r7, #28]
 80062a4:	f001 fea4 	bl	8007ff0 <vQueueDelete>
            hSemaphore = NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e010      	b.n	80062d0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d108      	bne.n	80062c6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	461a      	mov	r2, r3
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f001 f95f 	bl	8007580 <xQueueCreateCountingSemaphoreStatic>
 80062c2:	61f8      	str	r0, [r7, #28]
 80062c4:	e004      	b.n	80062d0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f001 f990 	bl	80075ee <xQueueCreateCountingSemaphore>
 80062ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <osSemaphoreNew+0xfc>
          name = attr->name;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e001      	b.n	80062e8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80062e8:	6979      	ldr	r1, [r7, #20]
 80062ea:	69f8      	ldr	r0, [r7, #28]
 80062ec:	f001 ffcc 	bl	8008288 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80062f0:	69fb      	ldr	r3, [r7, #28]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006314:	f06f 0303 	mvn.w	r3, #3
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e039      	b.n	8006390 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631c:	f3ef 8305 	mrs	r3, IPSR
 8006320:	60fb      	str	r3, [r7, #12]
  return(result);
 8006322:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006324:	2b00      	cmp	r3, #0
 8006326:	d022      	beq.n	800636e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800632e:	f06f 0303 	mvn.w	r3, #3
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e02c      	b.n	8006390 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800633a:	f107 0308 	add.w	r3, r7, #8
 800633e:	461a      	mov	r2, r3
 8006340:	2100      	movs	r1, #0
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f001 fd98 	bl	8007e78 <xQueueReceiveFromISR>
 8006348:	4603      	mov	r3, r0
 800634a:	2b01      	cmp	r3, #1
 800634c:	d003      	beq.n	8006356 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800634e:	f06f 0302 	mvn.w	r3, #2
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e01c      	b.n	8006390 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d019      	beq.n	8006390 <osSemaphoreAcquire+0x94>
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <osSemaphoreAcquire+0xa0>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	e010      	b.n	8006390 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6938      	ldr	r0, [r7, #16]
 8006372:	f001 fc75 	bl	8007c60 <xQueueSemaphoreTake>
 8006376:	4603      	mov	r3, r0
 8006378:	2b01      	cmp	r3, #1
 800637a:	d009      	beq.n	8006390 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006382:	f06f 0301 	mvn.w	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e002      	b.n	8006390 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800638a:	f06f 0302 	mvn.w	r3, #2
 800638e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006390:	697b      	ldr	r3, [r7, #20]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80063b6:	f06f 0303 	mvn.w	r3, #3
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	e02c      	b.n	8006418 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80063c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01a      	beq.n	8006400 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80063ce:	f107 0308 	add.w	r3, r7, #8
 80063d2:	4619      	mov	r1, r3
 80063d4:	6938      	ldr	r0, [r7, #16]
 80063d6:	f001 fad6 	bl	8007986 <xQueueGiveFromISR>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d003      	beq.n	80063e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80063e0:	f06f 0302 	mvn.w	r3, #2
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	e017      	b.n	8006418 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d014      	beq.n	8006418 <osSemaphoreRelease+0x78>
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <osSemaphoreRelease+0x84>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	e00b      	b.n	8006418 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006400:	2300      	movs	r3, #0
 8006402:	2200      	movs	r2, #0
 8006404:	2100      	movs	r1, #0
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f001 f924 	bl	8007654 <xQueueGenericSend>
 800640c:	4603      	mov	r3, r0
 800640e:	2b01      	cmp	r3, #1
 8006410:	d002      	beq.n	8006418 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006412:	f06f 0302 	mvn.w	r3, #2
 8006416:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006418:	697b      	ldr	r3, [r7, #20]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006434:	f3ef 8305 	mrs	r3, IPSR
 8006438:	60fb      	str	r3, [r7, #12]
  return(result);
 800643a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8006440:	f06f 0305 	mvn.w	r3, #5
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e00e      	b.n	8006466 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800644e:	f06f 0303 	mvn.w	r3, #3
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e007      	b.n	8006466 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f001 ff40 	bl	80082dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8006460:	6938      	ldr	r0, [r7, #16]
 8006462:	f001 fdc5 	bl	8007ff0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006466:	697b      	ldr	r3, [r7, #20]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006480:	f3ef 8305 	mrs	r3, IPSR
 8006484:	613b      	str	r3, [r7, #16]
  return(result);
 8006486:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006488:	2b00      	cmp	r3, #0
 800648a:	d15f      	bne.n	800654c <osMessageQueueNew+0xdc>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d05c      	beq.n	800654c <osMessageQueueNew+0xdc>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d059      	beq.n	800654c <osMessageQueueNew+0xdc>
    mem = -1;
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d029      	beq.n	80064f8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d012      	beq.n	80064d2 <osMessageQueueNew+0x62>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b4f      	cmp	r3, #79	; 0x4f
 80064b2:	d90e      	bls.n	80064d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d302      	bcc.n	80064d2 <osMessageQueueNew+0x62>
        mem = 1;
 80064cc:	2301      	movs	r3, #1
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	e014      	b.n	80064fc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d110      	bne.n	80064fc <osMessageQueueNew+0x8c>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10c      	bne.n	80064fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d108      	bne.n	80064fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <osMessageQueueNew+0x8c>
          mem = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e001      	b.n	80064fc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10b      	bne.n	800651a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2100      	movs	r1, #0
 800650c:	9100      	str	r1, [sp, #0]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fea9 	bl	8007268 <xQueueGenericCreateStatic>
 8006516:	61f8      	str	r0, [r7, #28]
 8006518:	e008      	b.n	800652c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006520:	2200      	movs	r2, #0
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 ff17 	bl	8007358 <xQueueGenericCreate>
 800652a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e001      	b.n	8006544 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	69f8      	ldr	r0, [r7, #28]
 8006548:	f001 fe9e 	bl	8008288 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800654c:	69fb      	ldr	r3, [r7, #28]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3720      	adds	r7, #32
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800656c:	2300      	movs	r3, #0
 800656e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006570:	f3ef 8305 	mrs	r3, IPSR
 8006574:	617b      	str	r3, [r7, #20]
  return(result);
 8006576:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006578:	2b00      	cmp	r3, #0
 800657a:	d028      	beq.n	80065ce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <osMessageQueuePut+0x36>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <osMessageQueuePut+0x36>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800658e:	f06f 0303 	mvn.w	r3, #3
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e038      	b.n	8006608 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800659a:	f107 0210 	add.w	r2, r7, #16
 800659e:	2300      	movs	r3, #0
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	69b8      	ldr	r0, [r7, #24]
 80065a4:	f001 f954 	bl	8007850 <xQueueGenericSendFromISR>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d003      	beq.n	80065b6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80065ae:	f06f 0302 	mvn.w	r3, #2
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e028      	b.n	8006608 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d025      	beq.n	8006608 <osMessageQueuePut+0xb0>
 80065bc:	4b15      	ldr	r3, [pc, #84]	; (8006614 <osMessageQueuePut+0xbc>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	e01c      	b.n	8006608 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <osMessageQueuePut+0x82>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80065da:	f06f 0303 	mvn.w	r3, #3
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e012      	b.n	8006608 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065e2:	2300      	movs	r3, #0
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	69b8      	ldr	r0, [r7, #24]
 80065ea:	f001 f833 	bl	8007654 <xQueueGenericSend>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d009      	beq.n	8006608 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80065fa:	f06f 0301 	mvn.w	r3, #1
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	e002      	b.n	8006608 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006602:	f06f 0302 	mvn.w	r3, #2
 8006606:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006608:	69fb      	ldr	r3, [r7, #28]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800662e:	f3ef 8305 	mrs	r3, IPSR
 8006632:	617b      	str	r3, [r7, #20]
  return(result);
 8006634:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006636:	2b00      	cmp	r3, #0
 8006638:	d028      	beq.n	800668c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <osMessageQueueGet+0x34>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osMessageQueueGet+0x34>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800664c:	f06f 0303 	mvn.w	r3, #3
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e037      	b.n	80066c4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006658:	f107 0310 	add.w	r3, r7, #16
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	69b8      	ldr	r0, [r7, #24]
 8006662:	f001 fc09 	bl	8007e78 <xQueueReceiveFromISR>
 8006666:	4603      	mov	r3, r0
 8006668:	2b01      	cmp	r3, #1
 800666a:	d003      	beq.n	8006674 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800666c:	f06f 0302 	mvn.w	r3, #2
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e027      	b.n	80066c4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d024      	beq.n	80066c4 <osMessageQueueGet+0xac>
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <osMessageQueueGet+0xb8>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	e01b      	b.n	80066c4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <osMessageQueueGet+0x80>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006698:	f06f 0303 	mvn.w	r3, #3
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	e011      	b.n	80066c4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	69b8      	ldr	r0, [r7, #24]
 80066a6:	f001 f9fb 	bl	8007aa0 <xQueueReceive>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d009      	beq.n	80066c4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80066b6:	f06f 0301 	mvn.w	r3, #1
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e002      	b.n	80066c4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80066be:	f06f 0302 	mvn.w	r3, #2
 80066c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80066c4:	69fb      	ldr	r3, [r7, #28]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <osMessageQueueGetCount+0x18>
    count = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e00e      	b.n	800670a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ec:	f3ef 8305 	mrs	r3, IPSR
 80066f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80066f8:	6938      	ldr	r0, [r7, #16]
 80066fa:	f001 fc5b 	bl	8007fb4 <uxQueueMessagesWaitingFromISR>
 80066fe:	6178      	str	r0, [r7, #20]
 8006700:	e003      	b.n	800670a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006702:	6938      	ldr	r0, [r7, #16]
 8006704:	f001 fc38 	bl	8007f78 <uxQueueMessagesWaiting>
 8006708:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800670a:	697b      	ldr	r3, [r7, #20]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006720:	f3ef 8305 	mrs	r3, IPSR
 8006724:	60fb      	str	r3, [r7, #12]
  return(result);
 8006726:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800672c:	f06f 0305 	mvn.w	r3, #5
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	e00e      	b.n	8006752 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800673a:	f06f 0303 	mvn.w	r3, #3
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e007      	b.n	8006752 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006742:	6938      	ldr	r0, [r7, #16]
 8006744:	f001 fdca 	bl	80082dc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800674c:	6938      	ldr	r0, [r7, #16]
 800674e:	f001 fc4f 	bl	8007ff0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a07      	ldr	r2, [pc, #28]	; (8006788 <vApplicationGetIdleTaskMemory+0x2c>)
 800676c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4a06      	ldr	r2, [pc, #24]	; (800678c <vApplicationGetIdleTaskMemory+0x30>)
 8006772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	240004d8 	.word	0x240004d8
 800678c:	24000594 	.word	0x24000594

08006790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4a07      	ldr	r2, [pc, #28]	; (80067bc <vApplicationGetTimerTaskMemory+0x2c>)
 80067a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <vApplicationGetTimerTaskMemory+0x30>)
 80067a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067ae:	601a      	str	r2, [r3, #0]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	24000d94 	.word	0x24000d94
 80067c0:	24000e50 	.word	0x24000e50

080067c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067d0:	f002 f83e 	bl	8008850 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067d4:	4b5b      	ldr	r3, [pc, #364]	; (8006944 <pvPortMalloc+0x180>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067dc:	f000 f920 	bl	8006a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067e0:	4b59      	ldr	r3, [pc, #356]	; (8006948 <pvPortMalloc+0x184>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4013      	ands	r3, r2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 8093 	bne.w	8006914 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01d      	beq.n	8006830 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067f4:	2208      	movs	r2, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d014      	beq.n	8006830 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	3308      	adds	r3, #8
 800680e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d06e      	beq.n	8006914 <pvPortMalloc+0x150>
 8006836:	4b45      	ldr	r3, [pc, #276]	; (800694c <pvPortMalloc+0x188>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d869      	bhi.n	8006914 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006840:	4b43      	ldr	r3, [pc, #268]	; (8006950 <pvPortMalloc+0x18c>)
 8006842:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006844:	4b42      	ldr	r3, [pc, #264]	; (8006950 <pvPortMalloc+0x18c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684a:	e004      	b.n	8006856 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d903      	bls.n	8006868 <pvPortMalloc+0xa4>
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f1      	bne.n	800684c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006868:	4b36      	ldr	r3, [pc, #216]	; (8006944 <pvPortMalloc+0x180>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	429a      	cmp	r2, r3
 8006870:	d050      	beq.n	8006914 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2208      	movs	r2, #8
 8006878:	4413      	add	r3, r2
 800687a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	1ad2      	subs	r2, r2, r3
 800688c:	2308      	movs	r3, #8
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	429a      	cmp	r2, r3
 8006892:	d91f      	bls.n	80068d4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <pvPortMalloc+0xf8>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	613b      	str	r3, [r7, #16]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	1ad2      	subs	r2, r2, r3
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068ce:	69b8      	ldr	r0, [r7, #24]
 80068d0:	f000 f908 	bl	8006ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <pvPortMalloc+0x188>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	4a1b      	ldr	r2, [pc, #108]	; (800694c <pvPortMalloc+0x188>)
 80068e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068e2:	4b1a      	ldr	r3, [pc, #104]	; (800694c <pvPortMalloc+0x188>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <pvPortMalloc+0x190>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d203      	bcs.n	80068f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068ee:	4b17      	ldr	r3, [pc, #92]	; (800694c <pvPortMalloc+0x188>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a18      	ldr	r2, [pc, #96]	; (8006954 <pvPortMalloc+0x190>)
 80068f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <pvPortMalloc+0x184>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	431a      	orrs	r2, r3
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <pvPortMalloc+0x194>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	4a11      	ldr	r2, [pc, #68]	; (8006958 <pvPortMalloc+0x194>)
 8006912:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006914:	f001 ffaa 	bl	800886c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <pvPortMalloc+0x174>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60fb      	str	r3, [r7, #12]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <pvPortMalloc+0x172>
	return pvReturn;
 8006938:	69fb      	ldr	r3, [r7, #28]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3728      	adds	r7, #40	; 0x28
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	24009658 	.word	0x24009658
 8006948:	2400966c 	.word	0x2400966c
 800694c:	2400965c 	.word	0x2400965c
 8006950:	24009650 	.word	0x24009650
 8006954:	24009660 	.word	0x24009660
 8006958:	24009664 	.word	0x24009664

0800695c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04d      	beq.n	8006a0a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800696e:	2308      	movs	r3, #8
 8006970:	425b      	negs	r3, r3
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	4b24      	ldr	r3, [pc, #144]	; (8006a14 <vPortFree+0xb8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <vPortFree+0x44>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60fb      	str	r3, [r7, #12]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <vPortFree+0x62>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60bb      	str	r3, [r7, #8]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <vPortFree+0xb8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4013      	ands	r3, r2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11a      	bne.n	8006a0a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <vPortFree+0xb8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	43db      	mvns	r3, r3
 80069de:	401a      	ands	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069e4:	f001 ff34 	bl	8008850 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <vPortFree+0xbc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4413      	add	r3, r2
 80069f2:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <vPortFree+0xbc>)
 80069f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069f6:	6938      	ldr	r0, [r7, #16]
 80069f8:	f000 f874 	bl	8006ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069fc:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <vPortFree+0xc0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <vPortFree+0xc0>)
 8006a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a06:	f001 ff31 	bl	800886c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a0a:	bf00      	nop
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2400966c 	.word	0x2400966c
 8006a18:	2400965c 	.word	0x2400965c
 8006a1c:	24009668 	.word	0x24009668

08006a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a26:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8006a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a2c:	4b27      	ldr	r3, [pc, #156]	; (8006acc <prvHeapInit+0xac>)
 8006a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00c      	beq.n	8006a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3307      	adds	r3, #7
 8006a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0307 	bic.w	r3, r3, #7
 8006a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <prvHeapInit+0xac>)
 8006a50:	4413      	add	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <prvHeapInit+0xb0>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a5e:	4b1c      	ldr	r3, [pc, #112]	; (8006ad0 <prvHeapInit+0xb0>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	4413      	add	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <prvHeapInit+0xb4>)
 8006a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a82:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <prvHeapInit+0xb4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <prvHeapInit+0xb4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <prvHeapInit+0xb4>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <prvHeapInit+0xb8>)
 8006aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <prvHeapInit+0xbc>)
 8006ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab8:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <prvHeapInit+0xc0>)
 8006aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006abe:	601a      	str	r2, [r3, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	24001e50 	.word	0x24001e50
 8006ad0:	24009650 	.word	0x24009650
 8006ad4:	24009658 	.word	0x24009658
 8006ad8:	24009660 	.word	0x24009660
 8006adc:	2400965c 	.word	0x2400965c
 8006ae0:	2400966c 	.word	0x2400966c

08006ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aec:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <prvInsertBlockIntoFreeList+0xac>)
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e002      	b.n	8006af8 <prvInsertBlockIntoFreeList+0x14>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d8f7      	bhi.n	8006af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d108      	bne.n	8006b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	441a      	add	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	441a      	add	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d118      	bne.n	8006b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <prvInsertBlockIntoFreeList+0xb0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d00d      	beq.n	8006b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	e008      	b.n	8006b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b62:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <prvInsertBlockIntoFreeList+0xb0>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e003      	b.n	8006b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d002      	beq.n	8006b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	24009650 	.word	0x24009650
 8006b94:	24009658 	.word	0x24009658

08006b98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f103 0208 	add.w	r2, r3, #8
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f103 0208 	add.w	r2, r3, #8
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f103 0208 	add.w	r2, r3, #8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d103      	bne.n	8006c5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e00c      	b.n	8006c74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e002      	b.n	8006c68 <vListInsert+0x2e>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d2f6      	bcs.n	8006c62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6892      	ldr	r2, [r2, #8]
 8006cc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6852      	ldr	r2, [r2, #4]
 8006ccc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d103      	bne.n	8006ce0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	1e5a      	subs	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b04      	subs	r3, #4
 8006d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b04      	subs	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f023 0201 	bic.w	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3b04      	subs	r3, #4
 8006d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d30:	4a0c      	ldr	r2, [pc, #48]	; (8006d64 <pxPortInitialiseStack+0x64>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3b14      	subs	r3, #20
 8006d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f06f 0202 	mvn.w	r2, #2
 8006d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3b20      	subs	r3, #32
 8006d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d56:	68fb      	ldr	r3, [r7, #12]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	08006d69 	.word	0x08006d69

08006d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <prvTaskExitError+0x54>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d00a      	beq.n	8006d92 <prvTaskExitError+0x2a>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <prvTaskExitError+0x28>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	60bb      	str	r3, [r7, #8]
}
 8006da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006da6:	bf00      	nop
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0fc      	beq.n	8006da8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	24000038 	.word	0x24000038

08006dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <pxCurrentTCBConst2>)
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	6808      	ldr	r0, [r1, #0]
 8006dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dca:	f380 8809 	msr	PSP, r0
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f04f 0000 	mov.w	r0, #0
 8006dd6:	f380 8811 	msr	BASEPRI, r0
 8006dda:	4770      	bx	lr
 8006ddc:	f3af 8000 	nop.w

08006de0 <pxCurrentTCBConst2>:
 8006de0:	240096b8 	.word	0x240096b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop

08006de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006de8:	4808      	ldr	r0, [pc, #32]	; (8006e0c <prvPortStartFirstTask+0x24>)
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	6800      	ldr	r0, [r0, #0]
 8006dee:	f380 8808 	msr	MSP, r0
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f380 8814 	msr	CONTROL, r0
 8006dfa:	b662      	cpsie	i
 8006dfc:	b661      	cpsie	f
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	df00      	svc	0
 8006e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e0a:	bf00      	nop
 8006e0c:	e000ed08 	.word	0xe000ed08

08006e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e16:	4b46      	ldr	r3, [pc, #280]	; (8006f30 <xPortStartScheduler+0x120>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a46      	ldr	r2, [pc, #280]	; (8006f34 <xPortStartScheduler+0x124>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10a      	bne.n	8006e36 <xPortStartScheduler+0x26>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e36:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <xPortStartScheduler+0x120>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a3f      	ldr	r2, [pc, #252]	; (8006f38 <xPortStartScheduler+0x128>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10a      	bne.n	8006e56 <xPortStartScheduler+0x46>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	60fb      	str	r3, [r7, #12]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e56:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <xPortStartScheduler+0x12c>)
 8006e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <xPortStartScheduler+0x130>)
 8006e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e7e:	4b31      	ldr	r3, [pc, #196]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e80:	2207      	movs	r2, #7
 8006e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e84:	e009      	b.n	8006e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4a2d      	ldr	r2, [pc, #180]	; (8006f44 <xPortStartScheduler+0x134>)
 8006e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d0ef      	beq.n	8006e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ea6:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1c3 0307 	rsb	r3, r3, #7
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d00a      	beq.n	8006ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	60bb      	str	r3, [r7, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ec8:	4b1e      	ldr	r3, [pc, #120]	; (8006f44 <xPortStartScheduler+0x134>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <xPortStartScheduler+0x134>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eda:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <xPortStartScheduler+0x134>)
 8006edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ee6:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <xPortStartScheduler+0x138>)
 8006eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <xPortStartScheduler+0x138>)
 8006ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006efe:	f000 f8dd 	bl	80070bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <xPortStartScheduler+0x13c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f08:	f000 f8fc 	bl	8007104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <xPortStartScheduler+0x140>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <xPortStartScheduler+0x140>)
 8006f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f18:	f7ff ff66 	bl	8006de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f1c:	f001 fe20 	bl	8008b60 <vTaskSwitchContext>
	prvTaskExitError();
 8006f20:	f7ff ff22 	bl	8006d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000ed00 	.word	0xe000ed00
 8006f34:	410fc271 	.word	0x410fc271
 8006f38:	410fc270 	.word	0x410fc270
 8006f3c:	e000e400 	.word	0xe000e400
 8006f40:	24009670 	.word	0x24009670
 8006f44:	24009674 	.word	0x24009674
 8006f48:	e000ed20 	.word	0xe000ed20
 8006f4c:	24000038 	.word	0x24000038
 8006f50:	e000ef34 	.word	0xe000ef34

08006f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	607b      	str	r3, [r7, #4]
}
 8006f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <vPortEnterCritical+0x58>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <vPortEnterCritical+0x58>)
 8006f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <vPortEnterCritical+0x58>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10f      	bne.n	8006fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vPortEnterCritical+0x5c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	603b      	str	r3, [r7, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <vPortEnterCritical+0x4a>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	24000038 	.word	0x24000038
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fba:	4b12      	ldr	r3, [pc, #72]	; (8007004 <vPortExitCritical+0x50>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <vPortExitCritical+0x24>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <vPortExitCritical+0x50>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	4a09      	ldr	r2, [pc, #36]	; (8007004 <vPortExitCritical+0x50>)
 8006fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <vPortExitCritical+0x50>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <vPortExitCritical+0x42>
 8006fea:	2300      	movs	r3, #0
 8006fec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	24000038 	.word	0x24000038
	...

08007010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007010:	f3ef 8009 	mrs	r0, PSP
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4b15      	ldr	r3, [pc, #84]	; (8007070 <pxCurrentTCBConst>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f01e 0f10 	tst.w	lr, #16
 8007020:	bf08      	it	eq
 8007022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	6010      	str	r0, [r2, #0]
 800702c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007034:	f380 8811 	msr	BASEPRI, r0
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f001 fd8e 	bl	8008b60 <vTaskSwitchContext>
 8007044:	f04f 0000 	mov.w	r0, #0
 8007048:	f380 8811 	msr	BASEPRI, r0
 800704c:	bc09      	pop	{r0, r3}
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	6808      	ldr	r0, [r1, #0]
 8007052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007056:	f01e 0f10 	tst.w	lr, #16
 800705a:	bf08      	it	eq
 800705c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007060:	f380 8809 	msr	PSP, r0
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst>:
 8007070:	240096b8 	.word	0x240096b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007092:	f001 fcab 	bl	80089ec <xTaskIncrementTick>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800709c:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <xPortSysTickHandler+0x40>)
 800709e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	2300      	movs	r3, #0
 80070a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f383 8811 	msr	BASEPRI, r3
}
 80070ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <vPortSetupTimerInterrupt+0x38>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <vPortSetupTimerInterrupt+0x3c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <vPortSetupTimerInterrupt+0x40>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	4a09      	ldr	r2, [pc, #36]	; (8007100 <vPortSetupTimerInterrupt+0x44>)
 80070da:	3b01      	subs	r3, #1
 80070dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070de:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <vPortSetupTimerInterrupt+0x34>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	e000e010 	.word	0xe000e010
 80070f4:	e000e018 	.word	0xe000e018
 80070f8:	24000000 	.word	0x24000000
 80070fc:	10624dd3 	.word	0x10624dd3
 8007100:	e000e014 	.word	0xe000e014

08007104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007114 <vPortEnableVFP+0x10>
 8007108:	6801      	ldr	r1, [r0, #0]
 800710a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800710e:	6001      	str	r1, [r0, #0]
 8007110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007112:	bf00      	nop
 8007114:	e000ed88 	.word	0xe000ed88

08007118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800711e:	f3ef 8305 	mrs	r3, IPSR
 8007122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d914      	bls.n	8007154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800712a:	4a17      	ldr	r2, [pc, #92]	; (8007188 <vPortValidateInterruptPriority+0x70>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007134:	4b15      	ldr	r3, [pc, #84]	; (800718c <vPortValidateInterruptPriority+0x74>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	7afa      	ldrb	r2, [r7, #11]
 800713a:	429a      	cmp	r2, r3
 800713c:	d20a      	bcs.n	8007154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	607b      	str	r3, [r7, #4]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007154:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <vPortValidateInterruptPriority+0x78>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800715c:	4b0d      	ldr	r3, [pc, #52]	; (8007194 <vPortValidateInterruptPriority+0x7c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d90a      	bls.n	800717a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	603b      	str	r3, [r7, #0]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <vPortValidateInterruptPriority+0x60>
	}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	e000e3f0 	.word	0xe000e3f0
 800718c:	24009670 	.word	0x24009670
 8007190:	e000ed0c 	.word	0xe000ed0c
 8007194:	24009674 	.word	0x24009674

08007198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60bb      	str	r3, [r7, #8]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071c2:	f7ff fec7 	bl	8006f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071d2:	fb01 f303 	mul.w	r3, r1, r3
 80071d6:	441a      	add	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	3b01      	subs	r3, #1
 80071f4:	68f9      	ldr	r1, [r7, #12]
 80071f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	22ff      	movs	r2, #255	; 0xff
 8007206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	22ff      	movs	r2, #255	; 0xff
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d114      	bne.n	8007242 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3310      	adds	r3, #16
 8007224:	4618      	mov	r0, r3
 8007226:	f001 fd5f 	bl	8008ce8 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d012      	beq.n	8007256 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <xQueueGenericReset+0xcc>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	e009      	b.n	8007256 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3310      	adds	r3, #16
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fca6 	bl	8006b98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3324      	adds	r3, #36	; 0x24
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fca1 	bl	8006b98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007256:	f7ff fead 	bl	8006fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800725a:	2301      	movs	r3, #1
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	; 0x38
 800726c:	af02      	add	r7, sp, #8
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <xQueueGenericCreateStatic+0x52>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <xQueueGenericCreateStatic+0x56>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <xQueueGenericCreateStatic+0x58>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <xQueueGenericCreateStatic+0x7e>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <xQueueGenericCreateStatic+0x82>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <xQueueGenericCreateStatic+0x84>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	61fb      	str	r3, [r7, #28]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007306:	2350      	movs	r3, #80	; 0x50
 8007308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b50      	cmp	r3, #80	; 0x50
 800730e:	d00a      	beq.n	8007326 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	61bb      	str	r3, [r7, #24]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007326:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00d      	beq.n	800734e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800733a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f83f 	bl	80073cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	; 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xQueueGenericCreate+0x2a>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	613b      	str	r3, [r7, #16]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	fb02 f303 	mul.w	r3, r2, r3
 800738a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3350      	adds	r3, #80	; 0x50
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fa17 	bl	80067c4 <pvPortMalloc>
 8007396:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d011      	beq.n	80073c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	3350      	adds	r3, #80	; 0x50
 80073a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073b0:	79fa      	ldrb	r2, [r7, #7]
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f805 	bl	80073cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073c2:	69bb      	ldr	r3, [r7, #24]
	}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	e002      	b.n	80073ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073fa:	2101      	movs	r1, #1
 80073fc:	69b8      	ldr	r0, [r7, #24]
 80073fe:	f7ff fecb 	bl	8007198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007432:	2300      	movs	r3, #0
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f90b 	bl	8007654 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007446:	b580      	push	{r7, lr}
 8007448:	b086      	sub	sp, #24
 800744a:	af00      	add	r7, sp, #0
 800744c:	4603      	mov	r3, r0
 800744e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007450:	2301      	movs	r3, #1
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	461a      	mov	r2, r3
 800745c:	6939      	ldr	r1, [r7, #16]
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	f7ff ff7a 	bl	8007358 <xQueueGenericCreate>
 8007464:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff ffd3 	bl	8007412 <prvInitialiseMutex>

		return xNewQueue;
 800746c:	68fb      	ldr	r3, [r7, #12]
	}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007476:	b580      	push	{r7, lr}
 8007478:	b088      	sub	sp, #32
 800747a:	af02      	add	r7, sp, #8
 800747c:	4603      	mov	r3, r0
 800747e:	6039      	str	r1, [r7, #0]
 8007480:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007482:	2301      	movs	r3, #1
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2200      	movs	r2, #0
 8007492:	6939      	ldr	r1, [r7, #16]
 8007494:	6978      	ldr	r0, [r7, #20]
 8007496:	f7ff fee7 	bl	8007268 <xQueueGenericCreateStatic>
 800749a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff ffb8 	bl	8007412 <prvInitialiseMutex>

		return xNewQueue;
 80074a2:	68fb      	ldr	r3, [r7, #12]
	}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	689c      	ldr	r4, [r3, #8]
 80074d8:	f001 fdc8 	bl	800906c <xTaskGetCurrentTaskHandle>
 80074dc:	4603      	mov	r3, r0
 80074de:	429c      	cmp	r4, r3
 80074e0:	d111      	bne.n	8007506 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	1e5a      	subs	r2, r3, #1
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80074f4:	2300      	movs	r3, #0
 80074f6:	2200      	movs	r2, #0
 80074f8:	2100      	movs	r1, #0
 80074fa:	6938      	ldr	r0, [r7, #16]
 80074fc:	f000 f8aa 	bl	8007654 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e001      	b.n	800750a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800750a:	697b      	ldr	r3, [r7, #20]
	}
 800750c:	4618      	mov	r0, r3
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60fb      	str	r3, [r7, #12]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	689c      	ldr	r4, [r3, #8]
 8007542:	f001 fd93 	bl	800906c <xTaskGetCurrentTaskHandle>
 8007546:	4603      	mov	r3, r0
 8007548:	429c      	cmp	r4, r3
 800754a:	d107      	bne.n	800755c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007556:	2301      	movs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	e00c      	b.n	8007576 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6938      	ldr	r0, [r7, #16]
 8007560:	f000 fb7e 	bl	8007c60 <xQueueSemaphoreTake>
 8007564:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007576:	697b      	ldr	r3, [r7, #20]
	}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd90      	pop	{r4, r7, pc}

08007580 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08a      	sub	sp, #40	; 0x28
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	61bb      	str	r3, [r7, #24]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d90a      	bls.n	80075c6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	617b      	str	r3, [r7, #20]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075c6:	2302      	movs	r3, #2
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	2100      	movs	r1, #0
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fe49 	bl	8007268 <xQueueGenericCreateStatic>
 80075d6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80075e4:	69fb      	ldr	r3, [r7, #28]
	}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	613b      	str	r3, [r7, #16]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	d90a      	bls.n	8007632 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007632:	2202      	movs	r2, #2
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fe8e 	bl	8007358 <xQueueGenericCreate>
 800763c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800764a:	697b      	ldr	r3, [r7, #20]
	}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08e      	sub	sp, #56	; 0x38
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xQueueGenericSend+0x32>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <xQueueGenericSend+0x40>
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <xQueueGenericSend+0x44>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <xQueueGenericSend+0x46>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <xQueueGenericSend+0x60>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x6e>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <xQueueGenericSend+0x72>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <xQueueGenericSend+0x74>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	623b      	str	r3, [r7, #32]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e2:	f001 fcd3 	bl	800908c <xTaskGetSchedulerState>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <xQueueGenericSend+0x9e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <xQueueGenericSend+0xa2>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <xQueueGenericSend+0xa4>
 80076f6:	2300      	movs	r3, #0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <xQueueGenericSend+0xbe>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	61fb      	str	r3, [r7, #28]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007712:	f7ff fc1f 	bl	8006f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	429a      	cmp	r2, r3
 8007720:	d302      	bcc.n	8007728 <xQueueGenericSend+0xd4>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d129      	bne.n	800777c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800772e:	f000 fc9a 	bl	8008066 <prvCopyDataToQueue>
 8007732:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d010      	beq.n	800775e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	3324      	adds	r3, #36	; 0x24
 8007740:	4618      	mov	r0, r3
 8007742:	f001 fad1 	bl	8008ce8 <xTaskRemoveFromEventList>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d013      	beq.n	8007774 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800774c:	4b3f      	ldr	r3, [pc, #252]	; (800784c <xQueueGenericSend+0x1f8>)
 800774e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	e00a      	b.n	8007774 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007764:	4b39      	ldr	r3, [pc, #228]	; (800784c <xQueueGenericSend+0x1f8>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007774:	f7ff fc1e 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 8007778:	2301      	movs	r3, #1
 800777a:	e063      	b.n	8007844 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007782:	f7ff fc17 	bl	8006fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007786:	2300      	movs	r3, #0
 8007788:	e05c      	b.n	8007844 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fb0b 	bl	8008db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800779e:	f7ff fc09 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a2:	f001 f855 	bl	8008850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077a6:	f7ff fbd5 	bl	8006f54 <vPortEnterCritical>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d103      	bne.n	80077c0 <xQueueGenericSend+0x16c>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d103      	bne.n	80077d6 <xQueueGenericSend+0x182>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d6:	f7ff fbed 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077da:	1d3a      	adds	r2, r7, #4
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 fafa 	bl	8008ddc <xTaskCheckForTimeOut>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d124      	bne.n	8007838 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80077ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f0:	f000 fd31 	bl	8008256 <prvIsQueueFull>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	3310      	adds	r3, #16
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f001 fa20 	bl	8008c48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800780a:	f000 fcbc 	bl	8008186 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800780e:	f001 f82d 	bl	800886c <xTaskResumeAll>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	f47f af7c 	bne.w	8007712 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800781a:	4b0c      	ldr	r3, [pc, #48]	; (800784c <xQueueGenericSend+0x1f8>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	e772      	b.n	8007712 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800782c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782e:	f000 fcaa 	bl	8008186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007832:	f001 f81b 	bl	800886c <xTaskResumeAll>
 8007836:	e76c      	b.n	8007712 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800783a:	f000 fca4 	bl	8008186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800783e:	f001 f815 	bl	800886c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007844:	4618      	mov	r0, r3
 8007846:	3738      	adds	r7, #56	; 0x38
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b090      	sub	sp, #64	; 0x40
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <xQueueGenericSendFromISR+0x3c>
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <xQueueGenericSendFromISR+0x40>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <xQueueGenericSendFromISR+0x42>
 8007890:	2300      	movs	r3, #0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d103      	bne.n	80078ba <xQueueGenericSendFromISR+0x6a>
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <xQueueGenericSendFromISR+0x6e>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e000      	b.n	80078c0 <xQueueGenericSendFromISR+0x70>
 80078be:	2300      	movs	r3, #0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	623b      	str	r3, [r7, #32]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078da:	f7ff fc1d 	bl	8007118 <vPortValidateInterruptPriority>
	__asm volatile
 80078de:	f3ef 8211 	mrs	r2, BASEPRI
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	61fa      	str	r2, [r7, #28]
 80078f4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80078f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <xQueueGenericSendFromISR+0xbc>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d12f      	bne.n	800796c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007922:	f000 fba0 	bl	8008066 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007926:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d112      	bne.n	8007956 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d016      	beq.n	8007966 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	3324      	adds	r3, #36	; 0x24
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f9d3 	bl	8008ce8 <xTaskRemoveFromEventList>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e007      	b.n	8007966 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007956:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800795a:	3301      	adds	r3, #1
 800795c:	b2db      	uxtb	r3, r3
 800795e:	b25a      	sxtb	r2, r3
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007966:	2301      	movs	r3, #1
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800796a:	e001      	b.n	8007970 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007972:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f383 8811 	msr	BASEPRI, r3
}
 800797a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800797e:	4618      	mov	r0, r3
 8007980:	3740      	adds	r7, #64	; 0x40
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b08e      	sub	sp, #56	; 0x38
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	623b      	str	r3, [r7, #32]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	61fb      	str	r3, [r7, #28]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <xQueueGiveFromISR+0x58>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <xQueueGiveFromISR+0x5c>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <xQueueGiveFromISR+0x5e>
 80079e2:	2300      	movs	r3, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	61bb      	str	r3, [r7, #24]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079fe:	f7ff fb8b 	bl	8007118 <vPortValidateInterruptPriority>
	__asm volatile
 8007a02:	f3ef 8211 	mrs	r2, BASEPRI
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	617a      	str	r2, [r7, #20]
 8007a18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d22b      	bcs.n	8007a86 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d112      	bne.n	8007a70 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d016      	beq.n	8007a80 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	3324      	adds	r3, #36	; 0x24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 f946 	bl	8008ce8 <xTaskRemoveFromEventList>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e007      	b.n	8007a80 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a74:	3301      	adds	r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	b25a      	sxtb	r2, r3
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a80:	2301      	movs	r3, #1
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
 8007a84:	e001      	b.n	8007a8a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f383 8811 	msr	BASEPRI, r3
}
 8007a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3738      	adds	r7, #56	; 0x38
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10a      	bne.n	8007ad0 <xQueueReceive+0x30>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	623b      	str	r3, [r7, #32]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <xQueueReceive+0x3e>
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <xQueueReceive+0x42>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueReceive+0x44>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <xQueueReceive+0x5e>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	61fb      	str	r3, [r7, #28]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007afe:	f001 fac5 	bl	800908c <xTaskGetSchedulerState>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <xQueueReceive+0x6e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <xQueueReceive+0x72>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueReceive+0x74>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <xQueueReceive+0x8e>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	61bb      	str	r3, [r7, #24]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b2e:	f7ff fa11 	bl	8006f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01f      	beq.n	8007b7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b42:	f000 fafa 	bl	800813a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	1e5a      	subs	r2, r3, #1
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00f      	beq.n	8007b76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	3310      	adds	r3, #16
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 f8c4 	bl	8008ce8 <xTaskRemoveFromEventList>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b66:	4b3d      	ldr	r3, [pc, #244]	; (8007c5c <xQueueReceive+0x1bc>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b76:	f7ff fa1d 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e069      	b.n	8007c52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b84:	f7ff fa16 	bl	8006fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e062      	b.n	8007c52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b92:	f107 0310 	add.w	r3, r7, #16
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 f90a 	bl	8008db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ba0:	f7ff fa08 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ba4:	f000 fe54 	bl	8008850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ba8:	f7ff f9d4 	bl	8006f54 <vPortEnterCritical>
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bb2:	b25b      	sxtb	r3, r3
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d103      	bne.n	8007bc2 <xQueueReceive+0x122>
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bce:	d103      	bne.n	8007bd8 <xQueueReceive+0x138>
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bd8:	f7ff f9ec 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bdc:	1d3a      	adds	r2, r7, #4
 8007bde:	f107 0310 	add.w	r3, r7, #16
 8007be2:	4611      	mov	r1, r2
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 f8f9 	bl	8008ddc <xTaskCheckForTimeOut>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d123      	bne.n	8007c38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	f000 fb1a 	bl	800822a <prvIsQueueEmpty>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d017      	beq.n	8007c2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	3324      	adds	r3, #36	; 0x24
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 f81f 	bl	8008c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c0c:	f000 fabb 	bl	8008186 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c10:	f000 fe2c 	bl	800886c <xTaskResumeAll>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d189      	bne.n	8007b2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <xQueueReceive+0x1bc>)
 8007c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	e780      	b.n	8007b2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c2e:	f000 faaa 	bl	8008186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c32:	f000 fe1b 	bl	800886c <xTaskResumeAll>
 8007c36:	e77a      	b.n	8007b2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c3a:	f000 faa4 	bl	8008186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c3e:	f000 fe15 	bl	800886c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c44:	f000 faf1 	bl	800822a <prvIsQueueEmpty>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f43f af6f 	beq.w	8007b2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3730      	adds	r7, #48	; 0x30
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08e      	sub	sp, #56	; 0x38
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	623b      	str	r3, [r7, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61fb      	str	r3, [r7, #28]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cb0:	f001 f9ec 	bl	800908c <xTaskGetSchedulerState>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <xQueueSemaphoreTake+0x60>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <xQueueSemaphoreTake+0x64>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e000      	b.n	8007cc6 <xQueueSemaphoreTake+0x66>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	61bb      	str	r3, [r7, #24]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ce0:	f7ff f938 	bl	8006f54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d024      	beq.n	8007d3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	1e5a      	subs	r2, r3, #1
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d00:	f001 fb3a 	bl	8009378 <pvTaskIncrementMutexHeldCount>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00f      	beq.n	8007d32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	3310      	adds	r3, #16
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 ffe6 	bl	8008ce8 <xTaskRemoveFromEventList>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d22:	4b54      	ldr	r3, [pc, #336]	; (8007e74 <xQueueSemaphoreTake+0x214>)
 8007d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d32:	f7ff f93f 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e097      	b.n	8007e6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d111      	bne.n	8007d64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d5c:	f7ff f92a 	bl	8006fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e082      	b.n	8007e6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d6a:	f107 030c 	add.w	r3, r7, #12
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 f81e 	bl	8008db0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d78:	f7ff f91c 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d7c:	f000 fd68 	bl	8008850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d80:	f7ff f8e8 	bl	8006f54 <vPortEnterCritical>
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d90:	d103      	bne.n	8007d9a <xQueueSemaphoreTake+0x13a>
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da0:	b25b      	sxtb	r3, r3
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d103      	bne.n	8007db0 <xQueueSemaphoreTake+0x150>
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db0:	f7ff f900 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007db4:	463a      	mov	r2, r7
 8007db6:	f107 030c 	add.w	r3, r7, #12
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f80d 	bl	8008ddc <xTaskCheckForTimeOut>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d132      	bne.n	8007e2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dca:	f000 fa2e 	bl	800822a <prvIsQueueEmpty>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d026      	beq.n	8007e22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007ddc:	f7ff f8ba 	bl	8006f54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f96f 	bl	80090c8 <xTaskPriorityInherit>
 8007dea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007dec:	f7ff f8e2 	bl	8006fb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	4611      	mov	r1, r2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 ff25 	bl	8008c48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e00:	f000 f9c1 	bl	8008186 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e04:	f000 fd32 	bl	800886c <xTaskResumeAll>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f47f af68 	bne.w	8007ce0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007e10:	4b18      	ldr	r3, [pc, #96]	; (8007e74 <xQueueSemaphoreTake+0x214>)
 8007e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	e75e      	b.n	8007ce0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e24:	f000 f9af 	bl	8008186 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e28:	f000 fd20 	bl	800886c <xTaskResumeAll>
 8007e2c:	e758      	b.n	8007ce0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e30:	f000 f9a9 	bl	8008186 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e34:	f000 fd1a 	bl	800886c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e3a:	f000 f9f6 	bl	800822a <prvIsQueueEmpty>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f43f af4d 	beq.w	8007ce0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00d      	beq.n	8007e68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007e4c:	f7ff f882 	bl	8006f54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e52:	f000 f8f0 	bl	8008036 <prvGetDisinheritPriorityAfterTimeout>
 8007e56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 fa08 	bl	8009274 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007e64:	f7ff f8a6 	bl	8006fb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3738      	adds	r7, #56	; 0x38
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08e      	sub	sp, #56	; 0x38
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	623b      	str	r3, [r7, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <xQueueReceiveFromISR+0x3a>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <xQueueReceiveFromISR+0x3e>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <xQueueReceiveFromISR+0x40>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	61fb      	str	r3, [r7, #28]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ed2:	f7ff f921 	bl	8007118 <vPortValidateInterruptPriority>
	__asm volatile
 8007ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61ba      	str	r2, [r7, #24]
 8007eec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007eee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02f      	beq.n	8007f5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f0c:	f000 f915 	bl	800813a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f20:	d112      	bne.n	8007f48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d016      	beq.n	8007f58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 feda 	bl	8008ce8 <xTaskRemoveFromEventList>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00e      	beq.n	8007f58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e007      	b.n	8007f58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	b25a      	sxtb	r2, r3
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5c:	e001      	b.n	8007f62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	637b      	str	r3, [r7, #52]	; 0x34
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f383 8811 	msr	BASEPRI, r3
}
 8007f6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3738      	adds	r7, #56	; 0x38
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10a      	bne.n	8007f9c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60bb      	str	r3, [r7, #8]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007f9c:	f7fe ffda 	bl	8006f54 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007fa6:	f7ff f805 	bl	8006fb4 <vPortExitCritical>

	return uxReturn;
 8007faa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60fb      	str	r3, [r7, #12]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007fe2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <vQueueDelete+0x28>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60bb      	str	r3, [r7, #8]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f95f 	bl	80082dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7fe fc97 	bl	800695c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d006      	beq.n	8008054 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	e001      	b.n	8008058 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008058:	68fb      	ldr	r3, [r7, #12]
	}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10d      	bne.n	80080a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d14d      	bne.n	8008128 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	4618      	mov	r0, r3
 8008092:	f001 f881 	bl	8009198 <xTaskPriorityDisinherit>
 8008096:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
 800809e:	e043      	b.n	8008128 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d119      	bne.n	80080da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6858      	ldr	r0, [r3, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	461a      	mov	r2, r3
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	f00f fbc0 	bl	8017836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	441a      	add	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d32b      	bcc.n	8008128 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	e026      	b.n	8008128 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68d8      	ldr	r0, [r3, #12]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	461a      	mov	r2, r3
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	f00f fba6 	bl	8017836 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	425b      	negs	r3, r3
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d207      	bcs.n	8008116 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	425b      	negs	r3, r3
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b02      	cmp	r3, #2
 800811a:	d105      	bne.n	8008128 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3b01      	subs	r3, #1
 8008126:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008130:	697b      	ldr	r3, [r7, #20]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d018      	beq.n	800817e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	429a      	cmp	r2, r3
 8008164:	d303      	bcc.n	800816e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68d9      	ldr	r1, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	461a      	mov	r2, r3
 8008178:	6838      	ldr	r0, [r7, #0]
 800817a:	f00f fb5c 	bl	8017836 <memcpy>
	}
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800818e:	f7fe fee1 	bl	8006f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008198:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800819a:	e011      	b.n	80081c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d012      	beq.n	80081ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fd9d 	bl	8008ce8 <xTaskRemoveFromEventList>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081b4:	f000 fe74 	bl	8008ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dce9      	bgt.n	800819c <prvUnlockQueue+0x16>
 80081c8:	e000      	b.n	80081cc <prvUnlockQueue+0x46>
					break;
 80081ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081d4:	f7fe feee 	bl	8006fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081d8:	f7fe febc 	bl	8006f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081e4:	e011      	b.n	800820a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d012      	beq.n	8008214 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3310      	adds	r3, #16
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fd78 	bl	8008ce8 <xTaskRemoveFromEventList>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081fe:	f000 fe4f 	bl	8008ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	3b01      	subs	r3, #1
 8008206:	b2db      	uxtb	r3, r3
 8008208:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800820a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800820e:	2b00      	cmp	r3, #0
 8008210:	dce9      	bgt.n	80081e6 <prvUnlockQueue+0x60>
 8008212:	e000      	b.n	8008216 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008214:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	22ff      	movs	r2, #255	; 0xff
 800821a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800821e:	f7fe fec9 	bl	8006fb4 <vPortExitCritical>
}
 8008222:	bf00      	nop
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008232:	f7fe fe8f 	bl	8006f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d102      	bne.n	8008244 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800823e:	2301      	movs	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	e001      	b.n	8008248 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008248:	f7fe feb4 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 800824c:	68fb      	ldr	r3, [r7, #12]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800825e:	f7fe fe79 	bl	8006f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	429a      	cmp	r2, r3
 800826c:	d102      	bne.n	8008274 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e001      	b.n	8008278 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008278:	f7fe fe9c 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 800827c:	68fb      	ldr	r3, [r7, #12]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	e014      	b.n	80082c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008298:	4a0f      	ldr	r2, [pc, #60]	; (80082d8 <vQueueAddToRegistry+0x50>)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10b      	bne.n	80082bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082a4:	490c      	ldr	r1, [pc, #48]	; (80082d8 <vQueueAddToRegistry+0x50>)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082ae:	4a0a      	ldr	r2, [pc, #40]	; (80082d8 <vQueueAddToRegistry+0x50>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	4413      	add	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082ba:	e006      	b.n	80082ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b07      	cmp	r3, #7
 80082c6:	d9e7      	bls.n	8008298 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	24009678 	.word	0x24009678

080082dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e016      	b.n	8008318 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80082ea:	4a10      	ldr	r2, [pc, #64]	; (800832c <vQueueUnregisterQueue+0x50>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	4413      	add	r3, r2
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d10b      	bne.n	8008312 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80082fa:	4a0c      	ldr	r2, [pc, #48]	; (800832c <vQueueUnregisterQueue+0x50>)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2100      	movs	r1, #0
 8008300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008304:	4a09      	ldr	r2, [pc, #36]	; (800832c <vQueueUnregisterQueue+0x50>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	2200      	movs	r2, #0
 800830e:	605a      	str	r2, [r3, #4]
				break;
 8008310:	e006      	b.n	8008320 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b07      	cmp	r3, #7
 800831c:	d9e5      	bls.n	80082ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800831e:	bf00      	nop
 8008320:	bf00      	nop
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	24009678 	.word	0x24009678

08008330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008340:	f7fe fe08 	bl	8006f54 <vPortEnterCritical>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800834a:	b25b      	sxtb	r3, r3
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d103      	bne.n	800835a <vQueueWaitForMessageRestricted+0x2a>
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008360:	b25b      	sxtb	r3, r3
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d103      	bne.n	8008370 <vQueueWaitForMessageRestricted+0x40>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008370:	f7fe fe20 	bl	8006fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	3324      	adds	r3, #36	; 0x24
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fc83 	bl	8008c90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800838a:	6978      	ldr	r0, [r7, #20]
 800838c:	f7ff fefb 	bl	8008186 <prvUnlockQueue>
	}
 8008390:	bf00      	nop
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08e      	sub	sp, #56	; 0x38
 800839c:	af04      	add	r7, sp, #16
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	623b      	str	r3, [r7, #32]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xTaskCreateStatic+0x46>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	61fb      	str	r3, [r7, #28]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083de:	23bc      	movs	r3, #188	; 0xbc
 80083e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2bbc      	cmp	r3, #188	; 0xbc
 80083e6:	d00a      	beq.n	80083fe <xTaskCreateStatic+0x66>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	61bb      	str	r3, [r7, #24]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01e      	beq.n	8008444 <xTaskCreateStatic+0xac>
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01b      	beq.n	8008444 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008414:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	2202      	movs	r2, #2
 800841a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800841e:	2300      	movs	r3, #0
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	9302      	str	r3, [sp, #8]
 8008426:	f107 0314 	add.w	r3, r7, #20
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 f850 	bl	80084dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800843c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800843e:	f000 f8f3 	bl	8008628 <prvAddNewTaskToReadyList>
 8008442:	e001      	b.n	8008448 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008448:	697b      	ldr	r3, [r7, #20]
	}
 800844a:	4618      	mov	r0, r3
 800844c:	3728      	adds	r7, #40	; 0x28
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008452:	b580      	push	{r7, lr}
 8008454:	b08c      	sub	sp, #48	; 0x30
 8008456:	af04      	add	r7, sp, #16
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe f9ac 	bl	80067c4 <pvPortMalloc>
 800846c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00e      	beq.n	8008492 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008474:	20bc      	movs	r0, #188	; 0xbc
 8008476:	f7fe f9a5 	bl	80067c4 <pvPortMalloc>
 800847a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
 8008488:	e005      	b.n	8008496 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800848a:	6978      	ldr	r0, [r7, #20]
 800848c:	f7fe fa66 	bl	800695c <vPortFree>
 8008490:	e001      	b.n	8008496 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d017      	beq.n	80084cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9303      	str	r3, [sp, #12]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	9302      	str	r3, [sp, #8]
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f80e 	bl	80084dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084c0:	69f8      	ldr	r0, [r7, #28]
 80084c2:	f000 f8b1 	bl	8008628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084c6:	2301      	movs	r3, #1
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	e002      	b.n	80084d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084cc:	f04f 33ff 	mov.w	r3, #4294967295
 80084d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084d2:	69bb      	ldr	r3, [r7, #24]
	}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	461a      	mov	r2, r3
 80084f4:	21a5      	movs	r1, #165	; 0xa5
 80084f6:	f00f f9c6 	bl	8017886 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008504:	440b      	add	r3, r1
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	f023 0307 	bic.w	r3, r3, #7
 8008512:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <prvInitialiseNewTask+0x58>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	617b      	str	r3, [r7, #20]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01f      	beq.n	800857a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
 800853e:	e012      	b.n	8008566 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	7819      	ldrb	r1, [r3, #0]
 8008548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	3334      	adds	r3, #52	; 0x34
 8008550:	460a      	mov	r2, r1
 8008552:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4413      	add	r3, r2
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3301      	adds	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b0f      	cmp	r3, #15
 800856a:	d9e9      	bls.n	8008540 <prvInitialiseNewTask+0x64>
 800856c:	e000      	b.n	8008570 <prvInitialiseNewTask+0x94>
			{
				break;
 800856e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008578:	e003      	b.n	8008582 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	2b37      	cmp	r3, #55	; 0x37
 8008586:	d901      	bls.n	800858c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008588:	2337      	movs	r3, #55	; 0x37
 800858a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008596:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	2200      	movs	r2, #0
 800859c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	3304      	adds	r3, #4
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fb18 	bl	8006bd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	3318      	adds	r3, #24
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe fb13 	bl	8006bd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	3354      	adds	r3, #84	; 0x54
 80085dc:	2260      	movs	r2, #96	; 0x60
 80085de:	2100      	movs	r1, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f00f f950 	bl	8017886 <memset>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	4a0c      	ldr	r2, [pc, #48]	; (800861c <prvInitialiseNewTask+0x140>)
 80085ea:	659a      	str	r2, [r3, #88]	; 0x58
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	4a0c      	ldr	r2, [pc, #48]	; (8008620 <prvInitialiseNewTask+0x144>)
 80085f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	4a0b      	ldr	r2, [pc, #44]	; (8008624 <prvInitialiseNewTask+0x148>)
 80085f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	69b8      	ldr	r0, [r7, #24]
 80085fe:	f7fe fb7f 	bl	8006d00 <pxPortInitialiseStack>
 8008602:	4602      	mov	r2, r0
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008612:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008614:	bf00      	nop
 8008616:	3720      	adds	r7, #32
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	0801d5b8 	.word	0x0801d5b8
 8008620:	0801d5d8 	.word	0x0801d5d8
 8008624:	0801d598 	.word	0x0801d598

08008628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008630:	f7fe fc90 	bl	8006f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008634:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <prvAddNewTaskToReadyList+0xc4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	4a2c      	ldr	r2, [pc, #176]	; (80086ec <prvAddNewTaskToReadyList+0xc4>)
 800863c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800863e:	4b2c      	ldr	r3, [pc, #176]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008646:	4a2a      	ldr	r2, [pc, #168]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800864c:	4b27      	ldr	r3, [pc, #156]	; (80086ec <prvAddNewTaskToReadyList+0xc4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d110      	bne.n	8008676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008654:	f000 fc48 	bl	8008ee8 <prvInitialiseTaskLists>
 8008658:	e00d      	b.n	8008676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800865a:	4b26      	ldr	r3, [pc, #152]	; (80086f4 <prvAddNewTaskToReadyList+0xcc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d109      	bne.n	8008676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008662:	4b23      	ldr	r3, [pc, #140]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	429a      	cmp	r2, r3
 800866e:	d802      	bhi.n	8008676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008670:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <prvAddNewTaskToReadyList+0xd0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	4a1e      	ldr	r2, [pc, #120]	; (80086f8 <prvAddNewTaskToReadyList+0xd0>)
 800867e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008680:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <prvAddNewTaskToReadyList+0xd0>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <prvAddNewTaskToReadyList+0xd4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d903      	bls.n	800869c <prvAddNewTaskToReadyList+0x74>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a18      	ldr	r2, [pc, #96]	; (80086fc <prvAddNewTaskToReadyList+0xd4>)
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4a15      	ldr	r2, [pc, #84]	; (8008700 <prvAddNewTaskToReadyList+0xd8>)
 80086aa:	441a      	add	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f7fe fa9d 	bl	8006bf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086b8:	f7fe fc7c 	bl	8006fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <prvAddNewTaskToReadyList+0xcc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00e      	beq.n	80086e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <prvAddNewTaskToReadyList+0xc8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d207      	bcs.n	80086e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <prvAddNewTaskToReadyList+0xdc>)
 80086d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e2:	bf00      	nop
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	24009b8c 	.word	0x24009b8c
 80086f0:	240096b8 	.word	0x240096b8
 80086f4:	24009b98 	.word	0x24009b98
 80086f8:	24009ba8 	.word	0x24009ba8
 80086fc:	24009b94 	.word	0x24009b94
 8008700:	240096bc 	.word	0x240096bc
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d017      	beq.n	800874a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <vTaskDelay+0x60>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <vTaskDelay+0x30>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60bb      	str	r3, [r7, #8]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008738:	f000 f88a 	bl	8008850 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800873c:	2100      	movs	r1, #0
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fe2e 	bl	80093a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008744:	f000 f892 	bl	800886c <xTaskResumeAll>
 8008748:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008750:	4b06      	ldr	r3, [pc, #24]	; (800876c <vTaskDelay+0x64>)
 8008752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	24009bb4 	.word	0x24009bb4
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800877e:	463a      	mov	r2, r7
 8008780:	1d39      	adds	r1, r7, #4
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	4618      	mov	r0, r3
 8008788:	f7fd ffe8 	bl	800675c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	9202      	str	r2, [sp, #8]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	2300      	movs	r3, #0
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	2300      	movs	r3, #0
 800879c:	460a      	mov	r2, r1
 800879e:	4924      	ldr	r1, [pc, #144]	; (8008830 <vTaskStartScheduler+0xc0>)
 80087a0:	4824      	ldr	r0, [pc, #144]	; (8008834 <vTaskStartScheduler+0xc4>)
 80087a2:	f7ff fdf9 	bl	8008398 <xTaskCreateStatic>
 80087a6:	4603      	mov	r3, r0
 80087a8:	4a23      	ldr	r2, [pc, #140]	; (8008838 <vTaskStartScheduler+0xc8>)
 80087aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087ac:	4b22      	ldr	r3, [pc, #136]	; (8008838 <vTaskStartScheduler+0xc8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087b4:	2301      	movs	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e001      	b.n	80087be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d102      	bne.n	80087ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087c4:	f000 fe40 	bl	8009448 <xTimerCreateTimerTask>
 80087c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d11b      	bne.n	8008808 <vTaskStartScheduler+0x98>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	613b      	str	r3, [r7, #16]
}
 80087e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087e4:	4b15      	ldr	r3, [pc, #84]	; (800883c <vTaskStartScheduler+0xcc>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3354      	adds	r3, #84	; 0x54
 80087ea:	4a15      	ldr	r2, [pc, #84]	; (8008840 <vTaskStartScheduler+0xd0>)
 80087ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087ee:	4b15      	ldr	r3, [pc, #84]	; (8008844 <vTaskStartScheduler+0xd4>)
 80087f0:	f04f 32ff 	mov.w	r2, #4294967295
 80087f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <vTaskStartScheduler+0xd8>)
 80087f8:	2201      	movs	r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087fc:	4b13      	ldr	r3, [pc, #76]	; (800884c <vTaskStartScheduler+0xdc>)
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008802:	f7fe fb05 	bl	8006e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008806:	e00e      	b.n	8008826 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d10a      	bne.n	8008826 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	60fb      	str	r3, [r7, #12]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <vTaskStartScheduler+0xb4>
}
 8008826:	bf00      	nop
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	08019aa4 	.word	0x08019aa4
 8008834:	08008eb9 	.word	0x08008eb9
 8008838:	24009bb0 	.word	0x24009bb0
 800883c:	240096b8 	.word	0x240096b8
 8008840:	24000048 	.word	0x24000048
 8008844:	24009bac 	.word	0x24009bac
 8008848:	24009b98 	.word	0x24009b98
 800884c:	24009b90 	.word	0x24009b90

08008850 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008854:	4b04      	ldr	r3, [pc, #16]	; (8008868 <vTaskSuspendAll+0x18>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	4a03      	ldr	r2, [pc, #12]	; (8008868 <vTaskSuspendAll+0x18>)
 800885c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800885e:	bf00      	nop
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	24009bb4 	.word	0x24009bb4

0800886c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800887a:	4b42      	ldr	r3, [pc, #264]	; (8008984 <xTaskResumeAll+0x118>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <xTaskResumeAll+0x2c>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	603b      	str	r3, [r7, #0]
}
 8008894:	bf00      	nop
 8008896:	e7fe      	b.n	8008896 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008898:	f7fe fb5c 	bl	8006f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800889c:	4b39      	ldr	r3, [pc, #228]	; (8008984 <xTaskResumeAll+0x118>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	4a38      	ldr	r2, [pc, #224]	; (8008984 <xTaskResumeAll+0x118>)
 80088a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <xTaskResumeAll+0x118>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d162      	bne.n	8008974 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088ae:	4b36      	ldr	r3, [pc, #216]	; (8008988 <xTaskResumeAll+0x11c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d05e      	beq.n	8008974 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088b6:	e02f      	b.n	8008918 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b8:	4b34      	ldr	r3, [pc, #208]	; (800898c <xTaskResumeAll+0x120>)
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3318      	adds	r3, #24
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe f9f1 	bl	8006cac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe f9ec 	bl	8006cac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4b2d      	ldr	r3, [pc, #180]	; (8008990 <xTaskResumeAll+0x124>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d903      	bls.n	80088e8 <xTaskResumeAll+0x7c>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	4a2a      	ldr	r2, [pc, #168]	; (8008990 <xTaskResumeAll+0x124>)
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4a27      	ldr	r2, [pc, #156]	; (8008994 <xTaskResumeAll+0x128>)
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f7fe f977 	bl	8006bf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	4b23      	ldr	r3, [pc, #140]	; (8008998 <xTaskResumeAll+0x12c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008912:	4b22      	ldr	r3, [pc, #136]	; (800899c <xTaskResumeAll+0x130>)
 8008914:	2201      	movs	r2, #1
 8008916:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008918:	4b1c      	ldr	r3, [pc, #112]	; (800898c <xTaskResumeAll+0x120>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1cb      	bne.n	80088b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008926:	f000 fb81 	bl	800902c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800892a:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <xTaskResumeAll+0x134>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d010      	beq.n	8008958 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008936:	f000 f859 	bl	80089ec <xTaskIncrementTick>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008940:	4b16      	ldr	r3, [pc, #88]	; (800899c <xTaskResumeAll+0x130>)
 8008942:	2201      	movs	r2, #1
 8008944:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3b01      	subs	r3, #1
 800894a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1f1      	bne.n	8008936 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008952:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <xTaskResumeAll+0x134>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008958:	4b10      	ldr	r3, [pc, #64]	; (800899c <xTaskResumeAll+0x130>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d009      	beq.n	8008974 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008964:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <xTaskResumeAll+0x138>)
 8008966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008974:	f7fe fb1e 	bl	8006fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8008978:	68bb      	ldr	r3, [r7, #8]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	24009bb4 	.word	0x24009bb4
 8008988:	24009b8c 	.word	0x24009b8c
 800898c:	24009b4c 	.word	0x24009b4c
 8008990:	24009b94 	.word	0x24009b94
 8008994:	240096bc 	.word	0x240096bc
 8008998:	240096b8 	.word	0x240096b8
 800899c:	24009ba0 	.word	0x24009ba0
 80089a0:	24009b9c 	.word	0x24009b9c
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089ae:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <xTaskGetTickCount+0x1c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089b4:	687b      	ldr	r3, [r7, #4]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	24009b90 	.word	0x24009b90

080089c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089ce:	f7fe fba3 	bl	8007118 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80089d6:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <xTaskGetTickCountFromISR+0x20>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089dc:	683b      	ldr	r3, [r7, #0]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	24009b90 	.word	0x24009b90

080089ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089f6:	4b4f      	ldr	r3, [pc, #316]	; (8008b34 <xTaskIncrementTick+0x148>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f040 808f 	bne.w	8008b1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a00:	4b4d      	ldr	r3, [pc, #308]	; (8008b38 <xTaskIncrementTick+0x14c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a08:	4a4b      	ldr	r2, [pc, #300]	; (8008b38 <xTaskIncrementTick+0x14c>)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d120      	bne.n	8008a56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a14:	4b49      	ldr	r3, [pc, #292]	; (8008b3c <xTaskIncrementTick+0x150>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	603b      	str	r3, [r7, #0]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <xTaskIncrementTick+0x46>
 8008a34:	4b41      	ldr	r3, [pc, #260]	; (8008b3c <xTaskIncrementTick+0x150>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	4b41      	ldr	r3, [pc, #260]	; (8008b40 <xTaskIncrementTick+0x154>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a3f      	ldr	r2, [pc, #252]	; (8008b3c <xTaskIncrementTick+0x150>)
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	4a3f      	ldr	r2, [pc, #252]	; (8008b40 <xTaskIncrementTick+0x154>)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	4b3e      	ldr	r3, [pc, #248]	; (8008b44 <xTaskIncrementTick+0x158>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a3d      	ldr	r2, [pc, #244]	; (8008b44 <xTaskIncrementTick+0x158>)
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	f000 faeb 	bl	800902c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a56:	4b3c      	ldr	r3, [pc, #240]	; (8008b48 <xTaskIncrementTick+0x15c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d349      	bcc.n	8008af4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a60:	4b36      	ldr	r3, [pc, #216]	; (8008b3c <xTaskIncrementTick+0x150>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6a:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <xTaskIncrementTick+0x15c>)
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a70:	601a      	str	r2, [r3, #0]
					break;
 8008a72:	e03f      	b.n	8008af4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a74:	4b31      	ldr	r3, [pc, #196]	; (8008b3c <xTaskIncrementTick+0x150>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d203      	bcs.n	8008a94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a8c:	4a2e      	ldr	r2, [pc, #184]	; (8008b48 <xTaskIncrementTick+0x15c>)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a92:	e02f      	b.n	8008af4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe f907 	bl	8006cac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	3318      	adds	r3, #24
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe f8fe 	bl	8006cac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <xTaskIncrementTick+0x160>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d903      	bls.n	8008ac4 <xTaskIncrementTick+0xd8>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	4a22      	ldr	r2, [pc, #136]	; (8008b4c <xTaskIncrementTick+0x160>)
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4a1f      	ldr	r2, [pc, #124]	; (8008b50 <xTaskIncrementTick+0x164>)
 8008ad2:	441a      	add	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7fe f889 	bl	8006bf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <xTaskIncrementTick+0x168>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d3b8      	bcc.n	8008a60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008af2:	e7b5      	b.n	8008a60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008af4:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <xTaskIncrementTick+0x168>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	4915      	ldr	r1, [pc, #84]	; (8008b50 <xTaskIncrementTick+0x164>)
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d901      	bls.n	8008b10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b10:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <xTaskIncrementTick+0x16c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	e004      	b.n	8008b28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <xTaskIncrementTick+0x170>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3301      	adds	r3, #1
 8008b24:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <xTaskIncrementTick+0x170>)
 8008b26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b28:	697b      	ldr	r3, [r7, #20]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	24009bb4 	.word	0x24009bb4
 8008b38:	24009b90 	.word	0x24009b90
 8008b3c:	24009b44 	.word	0x24009b44
 8008b40:	24009b48 	.word	0x24009b48
 8008b44:	24009ba4 	.word	0x24009ba4
 8008b48:	24009bac 	.word	0x24009bac
 8008b4c:	24009b94 	.word	0x24009b94
 8008b50:	240096bc 	.word	0x240096bc
 8008b54:	240096b8 	.word	0x240096b8
 8008b58:	24009ba0 	.word	0x24009ba0
 8008b5c:	24009b9c 	.word	0x24009b9c

08008b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b66:	4b32      	ldr	r3, [pc, #200]	; (8008c30 <vTaskSwitchContext+0xd0>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b6e:	4b31      	ldr	r3, [pc, #196]	; (8008c34 <vTaskSwitchContext+0xd4>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b74:	e057      	b.n	8008c26 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8008b76:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <vTaskSwitchContext+0xd4>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008b7c:	4b2e      	ldr	r3, [pc, #184]	; (8008c38 <vTaskSwitchContext+0xd8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b2d      	ldr	r3, [pc, #180]	; (8008c38 <vTaskSwitchContext+0xd8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d808      	bhi.n	8008b9e <vTaskSwitchContext+0x3e>
 8008b8c:	4b2a      	ldr	r3, [pc, #168]	; (8008c38 <vTaskSwitchContext+0xd8>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	4b29      	ldr	r3, [pc, #164]	; (8008c38 <vTaskSwitchContext+0xd8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3334      	adds	r3, #52	; 0x34
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f7f7 fd41 	bl	8000620 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9e:	4b27      	ldr	r3, [pc, #156]	; (8008c3c <vTaskSwitchContext+0xdc>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e010      	b.n	8008bc8 <vTaskSwitchContext+0x68>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <vTaskSwitchContext+0x62>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	607b      	str	r3, [r7, #4]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <vTaskSwitchContext+0x60>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	491d      	ldr	r1, [pc, #116]	; (8008c40 <vTaskSwitchContext+0xe0>)
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0e4      	beq.n	8008ba6 <vTaskSwitchContext+0x46>
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4a16      	ldr	r2, [pc, #88]	; (8008c40 <vTaskSwitchContext+0xe0>)
 8008be8:	4413      	add	r3, r2
 8008bea:	60bb      	str	r3, [r7, #8]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d104      	bne.n	8008c0c <vTaskSwitchContext+0xac>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	605a      	str	r2, [r3, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <vTaskSwitchContext+0xd8>)
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <vTaskSwitchContext+0xdc>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <vTaskSwitchContext+0xd8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3354      	adds	r3, #84	; 0x54
 8008c22:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <vTaskSwitchContext+0xe4>)
 8008c24:	6013      	str	r3, [r2, #0]
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	24009bb4 	.word	0x24009bb4
 8008c34:	24009ba0 	.word	0x24009ba0
 8008c38:	240096b8 	.word	0x240096b8
 8008c3c:	24009b94 	.word	0x24009b94
 8008c40:	240096bc 	.word	0x240096bc
 8008c44:	24000048 	.word	0x24000048

08008c48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	60fb      	str	r3, [r7, #12]
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c6e:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <vTaskPlaceOnEventList+0x44>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3318      	adds	r3, #24
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7fd ffdf 	bl	8006c3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	6838      	ldr	r0, [r7, #0]
 8008c80:	f000 fb8e 	bl	80093a0 <prvAddCurrentTaskToDelayedList>
}
 8008c84:	bf00      	nop
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	240096b8 	.word	0x240096b8

08008c90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	617b      	str	r3, [r7, #20]
}
 8008cb4:	bf00      	nop
 8008cb6:	e7fe      	b.n	8008cb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ce4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3318      	adds	r3, #24
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7fd ff96 	bl	8006bf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	68b8      	ldr	r0, [r7, #8]
 8008cd6:	f000 fb63 	bl	80093a0 <prvAddCurrentTaskToDelayedList>
	}
 8008cda:	bf00      	nop
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	240096b8 	.word	0x240096b8

08008ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	60fb      	str	r3, [r7, #12]
}
 8008d10:	bf00      	nop
 8008d12:	e7fe      	b.n	8008d12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3318      	adds	r3, #24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fd ffc7 	bl	8006cac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	; (8008d98 <xTaskRemoveFromEventList+0xb0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d11d      	bne.n	8008d62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fd ffbe 	bl	8006cac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <xTaskRemoveFromEventList+0xb4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d903      	bls.n	8008d44 <xTaskRemoveFromEventList+0x5c>
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <xTaskRemoveFromEventList+0xb4>)
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <xTaskRemoveFromEventList+0xb8>)
 8008d52:	441a      	add	r2, r3
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fd ff49 	bl	8006bf2 <vListInsertEnd>
 8008d60:	e005      	b.n	8008d6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3318      	adds	r3, #24
 8008d66:	4619      	mov	r1, r3
 8008d68:	480e      	ldr	r0, [pc, #56]	; (8008da4 <xTaskRemoveFromEventList+0xbc>)
 8008d6a:	f7fd ff42 	bl	8006bf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <xTaskRemoveFromEventList+0xc0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d905      	bls.n	8008d88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <xTaskRemoveFromEventList+0xc4>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	e001      	b.n	8008d8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d8c:	697b      	ldr	r3, [r7, #20]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	24009bb4 	.word	0x24009bb4
 8008d9c:	24009b94 	.word	0x24009b94
 8008da0:	240096bc 	.word	0x240096bc
 8008da4:	24009b4c 	.word	0x24009b4c
 8008da8:	240096b8 	.word	0x240096b8
 8008dac:	24009ba0 	.word	0x24009ba0

08008db0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008db8:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <vTaskInternalSetTimeOutState+0x24>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <vTaskInternalSetTimeOutState+0x28>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	605a      	str	r2, [r3, #4]
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	24009ba4 	.word	0x24009ba4
 8008dd8:	24009b90 	.word	0x24009b90

08008ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	613b      	str	r3, [r7, #16]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e1e:	f7fe f899 	bl	8006f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e22:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <xTaskCheckForTimeOut+0xbc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d102      	bne.n	8008e42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61fb      	str	r3, [r7, #28]
 8008e40:	e023      	b.n	8008e8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <xTaskCheckForTimeOut+0xc0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d007      	beq.n	8008e5e <xTaskCheckForTimeOut+0x82>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d302      	bcc.n	8008e5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e015      	b.n	8008e8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d20b      	bcs.n	8008e80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ff9b 	bl	8008db0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	e004      	b.n	8008e8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e86:	2301      	movs	r3, #1
 8008e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e8a:	f7fe f893 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 8008e8e:	69fb      	ldr	r3, [r7, #28]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	24009b90 	.word	0x24009b90
 8008e9c:	24009ba4 	.word	0x24009ba4

08008ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ea4:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <vTaskMissedYield+0x14>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	24009ba0 	.word	0x24009ba0

08008eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ec0:	f000 f852 	bl	8008f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ec4:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <prvIdleTask+0x28>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d9f9      	bls.n	8008ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <prvIdleTask+0x2c>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008edc:	e7f0      	b.n	8008ec0 <prvIdleTask+0x8>
 8008ede:	bf00      	nop
 8008ee0:	240096bc 	.word	0x240096bc
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eee:	2300      	movs	r3, #0
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	e00c      	b.n	8008f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a12      	ldr	r2, [pc, #72]	; (8008f48 <prvInitialiseTaskLists+0x60>)
 8008f00:	4413      	add	r3, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fd fe48 	bl	8006b98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b37      	cmp	r3, #55	; 0x37
 8008f12:	d9ef      	bls.n	8008ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f14:	480d      	ldr	r0, [pc, #52]	; (8008f4c <prvInitialiseTaskLists+0x64>)
 8008f16:	f7fd fe3f 	bl	8006b98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f1a:	480d      	ldr	r0, [pc, #52]	; (8008f50 <prvInitialiseTaskLists+0x68>)
 8008f1c:	f7fd fe3c 	bl	8006b98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f20:	480c      	ldr	r0, [pc, #48]	; (8008f54 <prvInitialiseTaskLists+0x6c>)
 8008f22:	f7fd fe39 	bl	8006b98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f26:	480c      	ldr	r0, [pc, #48]	; (8008f58 <prvInitialiseTaskLists+0x70>)
 8008f28:	f7fd fe36 	bl	8006b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f2c:	480b      	ldr	r0, [pc, #44]	; (8008f5c <prvInitialiseTaskLists+0x74>)
 8008f2e:	f7fd fe33 	bl	8006b98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <prvInitialiseTaskLists+0x78>)
 8008f34:	4a05      	ldr	r2, [pc, #20]	; (8008f4c <prvInitialiseTaskLists+0x64>)
 8008f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <prvInitialiseTaskLists+0x7c>)
 8008f3a:	4a05      	ldr	r2, [pc, #20]	; (8008f50 <prvInitialiseTaskLists+0x68>)
 8008f3c:	601a      	str	r2, [r3, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	240096bc 	.word	0x240096bc
 8008f4c:	24009b1c 	.word	0x24009b1c
 8008f50:	24009b30 	.word	0x24009b30
 8008f54:	24009b4c 	.word	0x24009b4c
 8008f58:	24009b60 	.word	0x24009b60
 8008f5c:	24009b78 	.word	0x24009b78
 8008f60:	24009b44 	.word	0x24009b44
 8008f64:	24009b48 	.word	0x24009b48

08008f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f6e:	e019      	b.n	8008fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f70:	f7fd fff0 	bl	8006f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f74:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <prvCheckTasksWaitingTermination+0x50>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fd fe93 	bl	8006cac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f86:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <prvCheckTasksWaitingTermination+0x54>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	4a0b      	ldr	r2, [pc, #44]	; (8008fbc <prvCheckTasksWaitingTermination+0x54>)
 8008f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <prvCheckTasksWaitingTermination+0x58>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <prvCheckTasksWaitingTermination+0x58>)
 8008f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f9a:	f7fe f80b 	bl	8006fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f810 	bl	8008fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <prvCheckTasksWaitingTermination+0x58>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e1      	bne.n	8008f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	24009b60 	.word	0x24009b60
 8008fbc:	24009b8c 	.word	0x24009b8c
 8008fc0:	24009b74 	.word	0x24009b74

08008fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3354      	adds	r3, #84	; 0x54
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f00e fd59 	bl	8017a88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d108      	bne.n	8008ff2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fd fcb9 	bl	800695c <vPortFree>
				vPortFree( pxTCB );
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fd fcb6 	bl	800695c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ff0:	e018      	b.n	8009024 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d103      	bne.n	8009004 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7fd fcad 	bl	800695c <vPortFree>
	}
 8009002:	e00f      	b.n	8009024 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800900a:	2b02      	cmp	r3, #2
 800900c:	d00a      	beq.n	8009024 <prvDeleteTCB+0x60>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	60fb      	str	r3, [r7, #12]
}
 8009020:	bf00      	nop
 8009022:	e7fe      	b.n	8009022 <prvDeleteTCB+0x5e>
	}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009032:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <prvResetNextTaskUnblockTime+0x38>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d104      	bne.n	8009046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <prvResetNextTaskUnblockTime+0x3c>)
 800903e:	f04f 32ff 	mov.w	r2, #4294967295
 8009042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009044:	e008      	b.n	8009058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009046:	4b07      	ldr	r3, [pc, #28]	; (8009064 <prvResetNextTaskUnblockTime+0x38>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	4a04      	ldr	r2, [pc, #16]	; (8009068 <prvResetNextTaskUnblockTime+0x3c>)
 8009056:	6013      	str	r3, [r2, #0]
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	24009b44 	.word	0x24009b44
 8009068:	24009bac 	.word	0x24009bac

0800906c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009072:	4b05      	ldr	r3, [pc, #20]	; (8009088 <xTaskGetCurrentTaskHandle+0x1c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009078:	687b      	ldr	r3, [r7, #4]
	}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	240096b8 	.word	0x240096b8

0800908c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009092:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <xTaskGetSchedulerState+0x34>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800909a:	2301      	movs	r3, #1
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	e008      	b.n	80090b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <xTaskGetSchedulerState+0x38>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090a8:	2302      	movs	r3, #2
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	e001      	b.n	80090b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090ae:	2300      	movs	r3, #0
 80090b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090b2:	687b      	ldr	r3, [r7, #4]
	}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	24009b98 	.word	0x24009b98
 80090c4:	24009bb4 	.word	0x24009bb4

080090c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d051      	beq.n	8009182 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	4b2a      	ldr	r3, [pc, #168]	; (800918c <xTaskPriorityInherit+0xc4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d241      	bcs.n	8009170 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	db06      	blt.n	8009102 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <xTaskPriorityInherit+0xc4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	6959      	ldr	r1, [r3, #20]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4a1f      	ldr	r2, [pc, #124]	; (8009190 <xTaskPriorityInherit+0xc8>)
 8009114:	4413      	add	r3, r2
 8009116:	4299      	cmp	r1, r3
 8009118:	d122      	bne.n	8009160 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	3304      	adds	r3, #4
 800911e:	4618      	mov	r0, r3
 8009120:	f7fd fdc4 	bl	8006cac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009124:	4b19      	ldr	r3, [pc, #100]	; (800918c <xTaskPriorityInherit+0xc4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <xTaskPriorityInherit+0xcc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d903      	bls.n	8009142 <xTaskPriorityInherit+0x7a>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	4a15      	ldr	r2, [pc, #84]	; (8009194 <xTaskPriorityInherit+0xcc>)
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4a10      	ldr	r2, [pc, #64]	; (8009190 <xTaskPriorityInherit+0xc8>)
 8009150:	441a      	add	r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	3304      	adds	r3, #4
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f7fd fd4a 	bl	8006bf2 <vListInsertEnd>
 800915e:	e004      	b.n	800916a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <xTaskPriorityInherit+0xc4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800916a:	2301      	movs	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	e008      	b.n	8009182 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <xTaskPriorityInherit+0xc4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917a:	429a      	cmp	r2, r3
 800917c:	d201      	bcs.n	8009182 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800917e:	2301      	movs	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009182:	68fb      	ldr	r3, [r7, #12]
	}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	240096b8 	.word	0x240096b8
 8009190:	240096bc 	.word	0x240096bc
 8009194:	24009b94 	.word	0x24009b94

08009198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d056      	beq.n	800925c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091ae:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <xTaskPriorityDisinherit+0xd0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d00a      	beq.n	80091ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	60fb      	str	r3, [r7, #12]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60bb      	str	r3, [r7, #8]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f0:	1e5a      	subs	r2, r3, #1
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fe:	429a      	cmp	r2, r3
 8009200:	d02c      	beq.n	800925c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009206:	2b00      	cmp	r3, #0
 8009208:	d128      	bne.n	800925c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	3304      	adds	r3, #4
 800920e:	4618      	mov	r0, r3
 8009210:	f7fd fd4c 	bl	8006cac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <xTaskPriorityDisinherit+0xd4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d903      	bls.n	800923c <xTaskPriorityDisinherit+0xa4>
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	4a0c      	ldr	r2, [pc, #48]	; (800926c <xTaskPriorityDisinherit+0xd4>)
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4a09      	ldr	r2, [pc, #36]	; (8009270 <xTaskPriorityDisinherit+0xd8>)
 800924a:	441a      	add	r2, r3
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7fd fccd 	bl	8006bf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009258:	2301      	movs	r3, #1
 800925a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800925c:	697b      	ldr	r3, [r7, #20]
	}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	240096b8 	.word	0x240096b8
 800926c:	24009b94 	.word	0x24009b94
 8009270:	240096bc 	.word	0x240096bc

08009274 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009282:	2301      	movs	r3, #1
 8009284:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d06a      	beq.n	8009362 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60fb      	str	r3, [r7, #12]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d902      	bls.n	80092ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	e002      	b.n	80092c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	69fa      	ldr	r2, [r7, #28]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d04b      	beq.n	8009362 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d146      	bne.n	8009362 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d10a      	bne.n	80092f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60bb      	str	r3, [r7, #8]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	db04      	blt.n	8009312 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	6959      	ldr	r1, [r3, #20]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4a13      	ldr	r2, [pc, #76]	; (8009370 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009322:	4413      	add	r3, r2
 8009324:	4299      	cmp	r1, r3
 8009326:	d11c      	bne.n	8009362 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	3304      	adds	r3, #4
 800932c:	4618      	mov	r0, r3
 800932e:	f7fd fcbd 	bl	8006cac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d903      	bls.n	8009346 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	4a0c      	ldr	r2, [pc, #48]	; (8009374 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4a07      	ldr	r2, [pc, #28]	; (8009370 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009354:	441a      	add	r2, r3
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	3304      	adds	r3, #4
 800935a:	4619      	mov	r1, r3
 800935c:	4610      	mov	r0, r2
 800935e:	f7fd fc48 	bl	8006bf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009362:	bf00      	nop
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	240096b8 	.word	0x240096b8
 8009370:	240096bc 	.word	0x240096bc
 8009374:	24009b94 	.word	0x24009b94

08009378 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800937c:	4b07      	ldr	r3, [pc, #28]	; (800939c <pvTaskIncrementMutexHeldCount+0x24>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <pvTaskIncrementMutexHeldCount+0x24>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800938a:	3201      	adds	r2, #1
 800938c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <pvTaskIncrementMutexHeldCount+0x24>)
 8009390:	681b      	ldr	r3, [r3, #0]
	}
 8009392:	4618      	mov	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	240096b8 	.word	0x240096b8

080093a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093aa:	4b21      	ldr	r3, [pc, #132]	; (8009430 <prvAddCurrentTaskToDelayedList+0x90>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b0:	4b20      	ldr	r3, [pc, #128]	; (8009434 <prvAddCurrentTaskToDelayedList+0x94>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fd fc78 	bl	8006cac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d10a      	bne.n	80093da <prvAddCurrentTaskToDelayedList+0x3a>
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ca:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <prvAddCurrentTaskToDelayedList+0x94>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4619      	mov	r1, r3
 80093d2:	4819      	ldr	r0, [pc, #100]	; (8009438 <prvAddCurrentTaskToDelayedList+0x98>)
 80093d4:	f7fd fc0d 	bl	8006bf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093d8:	e026      	b.n	8009428 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4413      	add	r3, r2
 80093e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093e2:	4b14      	ldr	r3, [pc, #80]	; (8009434 <prvAddCurrentTaskToDelayedList+0x94>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d209      	bcs.n	8009406 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <prvAddCurrentTaskToDelayedList+0x9c>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7fd fc1b 	bl	8006c3a <vListInsert>
}
 8009404:	e010      	b.n	8009428 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009406:	4b0e      	ldr	r3, [pc, #56]	; (8009440 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <prvAddCurrentTaskToDelayedList+0x94>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3304      	adds	r3, #4
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f7fd fc11 	bl	8006c3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <prvAddCurrentTaskToDelayedList+0xa4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	429a      	cmp	r2, r3
 8009420:	d202      	bcs.n	8009428 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009422:	4a08      	ldr	r2, [pc, #32]	; (8009444 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6013      	str	r3, [r2, #0]
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	24009b90 	.word	0x24009b90
 8009434:	240096b8 	.word	0x240096b8
 8009438:	24009b78 	.word	0x24009b78
 800943c:	24009b48 	.word	0x24009b48
 8009440:	24009b44 	.word	0x24009b44
 8009444:	24009bac 	.word	0x24009bac

08009448 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b08a      	sub	sp, #40	; 0x28
 800944c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009452:	f000 fb07 	bl	8009a64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009456:	4b1c      	ldr	r3, [pc, #112]	; (80094c8 <xTimerCreateTimerTask+0x80>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d021      	beq.n	80094a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009466:	1d3a      	adds	r2, r7, #4
 8009468:	f107 0108 	add.w	r1, r7, #8
 800946c:	f107 030c 	add.w	r3, r7, #12
 8009470:	4618      	mov	r0, r3
 8009472:	f7fd f98d 	bl	8006790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	9202      	str	r2, [sp, #8]
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	2302      	movs	r3, #2
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2300      	movs	r3, #0
 8009486:	460a      	mov	r2, r1
 8009488:	4910      	ldr	r1, [pc, #64]	; (80094cc <xTimerCreateTimerTask+0x84>)
 800948a:	4811      	ldr	r0, [pc, #68]	; (80094d0 <xTimerCreateTimerTask+0x88>)
 800948c:	f7fe ff84 	bl	8008398 <xTaskCreateStatic>
 8009490:	4603      	mov	r3, r0
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <xTimerCreateTimerTask+0x8c>)
 8009494:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <xTimerCreateTimerTask+0x8c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800949e:	2301      	movs	r3, #1
 80094a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	613b      	str	r3, [r7, #16]
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094be:	697b      	ldr	r3, [r7, #20]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	24009be8 	.word	0x24009be8
 80094cc:	08019aac 	.word	0x08019aac
 80094d0:	0800960d 	.word	0x0800960d
 80094d4:	24009bec 	.word	0x24009bec

080094d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xTimerGenericCommand+0x2e>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	623b      	str	r3, [r7, #32]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009506:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <xTimerGenericCommand+0x98>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d02a      	beq.n	8009564 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b05      	cmp	r3, #5
 800951e:	dc18      	bgt.n	8009552 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009520:	f7ff fdb4 	bl	800908c <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b02      	cmp	r3, #2
 8009528:	d109      	bne.n	800953e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800952a:	4b11      	ldr	r3, [pc, #68]	; (8009570 <xTimerGenericCommand+0x98>)
 800952c:	6818      	ldr	r0, [r3, #0]
 800952e:	f107 0110 	add.w	r1, r7, #16
 8009532:	2300      	movs	r3, #0
 8009534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009536:	f7fe f88d 	bl	8007654 <xQueueGenericSend>
 800953a:	6278      	str	r0, [r7, #36]	; 0x24
 800953c:	e012      	b.n	8009564 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <xTimerGenericCommand+0x98>)
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f107 0110 	add.w	r1, r7, #16
 8009546:	2300      	movs	r3, #0
 8009548:	2200      	movs	r2, #0
 800954a:	f7fe f883 	bl	8007654 <xQueueGenericSend>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24
 8009550:	e008      	b.n	8009564 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009552:	4b07      	ldr	r3, [pc, #28]	; (8009570 <xTimerGenericCommand+0x98>)
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f107 0110 	add.w	r1, r7, #16
 800955a:	2300      	movs	r3, #0
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	f7fe f977 	bl	8007850 <xQueueGenericSendFromISR>
 8009562:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	24009be8 	.word	0x24009be8

08009574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af02      	add	r7, sp, #8
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957e:	4b22      	ldr	r3, [pc, #136]	; (8009608 <prvProcessExpiredTimer+0x94>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3304      	adds	r3, #4
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd fb8d 	bl	8006cac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d022      	beq.n	80095e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	699a      	ldr	r2, [r3, #24]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	18d1      	adds	r1, r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	6978      	ldr	r0, [r7, #20]
 80095ae:	f000 f8d1 	bl	8009754 <prvInsertTimerInActiveList>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01f      	beq.n	80095f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095b8:	2300      	movs	r3, #0
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	2300      	movs	r3, #0
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	2100      	movs	r1, #0
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f7ff ff88 	bl	80094d8 <xTimerGenericCommand>
 80095c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d113      	bne.n	80095f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	6978      	ldr	r0, [r7, #20]
 80095fe:	4798      	blx	r3
}
 8009600:	bf00      	nop
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	24009be0 	.word	0x24009be0

0800960c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009614:	f107 0308 	add.w	r3, r7, #8
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f857 	bl	80096cc <prvGetNextExpireTime>
 800961e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4619      	mov	r1, r3
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f803 	bl	8009630 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800962a:	f000 f8d5 	bl	80097d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800962e:	e7f1      	b.n	8009614 <prvTimerTask+0x8>

08009630 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800963a:	f7ff f909 	bl	8008850 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800963e:	f107 0308 	add.w	r3, r7, #8
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f866 	bl	8009714 <prvSampleTimeNow>
 8009648:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d130      	bne.n	80096b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <prvProcessTimerOrBlockTask+0x3c>
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	429a      	cmp	r2, r3
 800965c:	d806      	bhi.n	800966c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800965e:	f7ff f905 	bl	800886c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff ff85 	bl	8009574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800966a:	e024      	b.n	80096b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d008      	beq.n	8009684 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009672:	4b13      	ldr	r3, [pc, #76]	; (80096c0 <prvProcessTimerOrBlockTask+0x90>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <prvProcessTimerOrBlockTask+0x50>
 800967c:	2301      	movs	r3, #1
 800967e:	e000      	b.n	8009682 <prvProcessTimerOrBlockTask+0x52>
 8009680:	2300      	movs	r3, #0
 8009682:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009684:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <prvProcessTimerOrBlockTask+0x94>)
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4619      	mov	r1, r3
 8009692:	f7fe fe4d 	bl	8008330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009696:	f7ff f8e9 	bl	800886c <xTaskResumeAll>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096a0:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <prvProcessTimerOrBlockTask+0x98>)
 80096a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
}
 80096b0:	e001      	b.n	80096b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096b2:	f7ff f8db 	bl	800886c <xTaskResumeAll>
}
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	24009be4 	.word	0x24009be4
 80096c4:	24009be8 	.word	0x24009be8
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <prvGetNextExpireTime+0x44>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <prvGetNextExpireTime+0x16>
 80096de:	2201      	movs	r2, #1
 80096e0:	e000      	b.n	80096e4 <prvGetNextExpireTime+0x18>
 80096e2:	2200      	movs	r2, #0
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <prvGetNextExpireTime+0x44>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	e001      	b.n	8009700 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009700:	68fb      	ldr	r3, [r7, #12]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	24009be0 	.word	0x24009be0

08009714 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800971c:	f7ff f944 	bl	80089a8 <xTaskGetTickCount>
 8009720:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009722:	4b0b      	ldr	r3, [pc, #44]	; (8009750 <prvSampleTimeNow+0x3c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	429a      	cmp	r2, r3
 800972a:	d205      	bcs.n	8009738 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800972c:	f000 f936 	bl	800999c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	e002      	b.n	800973e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800973e:	4a04      	ldr	r2, [pc, #16]	; (8009750 <prvSampleTimeNow+0x3c>)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009744:	68fb      	ldr	r3, [r7, #12]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	24009bf0 	.word	0x24009bf0

08009754 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	429a      	cmp	r2, r3
 8009778:	d812      	bhi.n	80097a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	429a      	cmp	r2, r3
 8009786:	d302      	bcc.n	800978e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	e01b      	b.n	80097c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800978e:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <prvInsertTimerInActiveList+0x7c>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3304      	adds	r3, #4
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f7fd fa4e 	bl	8006c3a <vListInsert>
 800979e:	e012      	b.n	80097c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d206      	bcs.n	80097b6 <prvInsertTimerInActiveList+0x62>
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d302      	bcc.n	80097b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e007      	b.n	80097c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097b6:	4b07      	ldr	r3, [pc, #28]	; (80097d4 <prvInsertTimerInActiveList+0x80>)
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3304      	adds	r3, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fd fa3a 	bl	8006c3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097c6:	697b      	ldr	r3, [r7, #20]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	24009be4 	.word	0x24009be4
 80097d4:	24009be0 	.word	0x24009be0

080097d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08e      	sub	sp, #56	; 0x38
 80097dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097de:	e0ca      	b.n	8009976 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da18      	bge.n	8009818 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097e6:	1d3b      	adds	r3, r7, #4
 80097e8:	3304      	adds	r3, #4
 80097ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	61fb      	str	r3, [r7, #28]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800980e:	6850      	ldr	r0, [r2, #4]
 8009810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009812:	6892      	ldr	r2, [r2, #8]
 8009814:	4611      	mov	r1, r2
 8009816:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f2c0 80aa 	blt.w	8009974 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d004      	beq.n	8009836 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	3304      	adds	r3, #4
 8009830:	4618      	mov	r0, r3
 8009832:	f7fd fa3b 	bl	8006cac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009836:	463b      	mov	r3, r7
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff ff6b 	bl	8009714 <prvSampleTimeNow>
 800983e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b09      	cmp	r3, #9
 8009844:	f200 8097 	bhi.w	8009976 <prvProcessReceivedCommands+0x19e>
 8009848:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <prvProcessReceivedCommands+0x78>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009879 	.word	0x08009879
 8009854:	08009879 	.word	0x08009879
 8009858:	08009879 	.word	0x08009879
 800985c:	080098ed 	.word	0x080098ed
 8009860:	08009901 	.word	0x08009901
 8009864:	0800994b 	.word	0x0800994b
 8009868:	08009879 	.word	0x08009879
 800986c:	08009879 	.word	0x08009879
 8009870:	080098ed 	.word	0x080098ed
 8009874:	08009901 	.word	0x08009901
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	b2da      	uxtb	r2, r3
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	18d1      	adds	r1, r2, r3
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009898:	f7ff ff5c 	bl	8009754 <prvInsertTimerInActiveList>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d069      	beq.n	8009976 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d05e      	beq.n	8009976 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	441a      	add	r2, r3
 80098c0:	2300      	movs	r3, #0
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2300      	movs	r3, #0
 80098c6:	2100      	movs	r1, #0
 80098c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ca:	f7ff fe05 	bl	80094d8 <xTimerGenericCommand>
 80098ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d14f      	bne.n	8009976 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	61bb      	str	r3, [r7, #24]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098f2:	f023 0301 	bic.w	r3, r3, #1
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80098fe:	e03a      	b.n	8009976 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009906:	f043 0301 	orr.w	r3, r3, #1
 800990a:	b2da      	uxtb	r2, r3
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	617b      	str	r3, [r7, #20]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	699a      	ldr	r2, [r3, #24]
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	18d1      	adds	r1, r2, r3
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009944:	f7ff ff06 	bl	8009754 <prvInsertTimerInActiveList>
					break;
 8009948:	e015      	b.n	8009976 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995a:	f7fc ffff 	bl	800695c <vPortFree>
 800995e:	e00a      	b.n	8009976 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009966:	f023 0301 	bic.w	r3, r3, #1
 800996a:	b2da      	uxtb	r2, r3
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009972:	e000      	b.n	8009976 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009974:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009976:	4b08      	ldr	r3, [pc, #32]	; (8009998 <prvProcessReceivedCommands+0x1c0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1d39      	adds	r1, r7, #4
 800997c:	2200      	movs	r2, #0
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe f88e 	bl	8007aa0 <xQueueReceive>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	f47f af2a 	bne.w	80097e0 <prvProcessReceivedCommands+0x8>
	}
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3730      	adds	r7, #48	; 0x30
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	24009be8 	.word	0x24009be8

0800999c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099a2:	e048      	b.n	8009a36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099a4:	4b2d      	ldr	r3, [pc, #180]	; (8009a5c <prvSwitchTimerLists+0xc0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ae:	4b2b      	ldr	r3, [pc, #172]	; (8009a5c <prvSwitchTimerLists+0xc0>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd f975 	bl	8006cac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d02e      	beq.n	8009a36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4413      	add	r3, r2
 80099e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d90e      	bls.n	8009a08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099f6:	4b19      	ldr	r3, [pc, #100]	; (8009a5c <prvSwitchTimerLists+0xc0>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3304      	adds	r3, #4
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f7fd f91a 	bl	8006c3a <vListInsert>
 8009a06:	e016      	b.n	8009a36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	2100      	movs	r1, #0
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff fd60 	bl	80094d8 <xTimerGenericCommand>
 8009a18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	603b      	str	r3, [r7, #0]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <prvSwitchTimerLists+0xc0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1b1      	bne.n	80099a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a40:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <prvSwitchTimerLists+0xc0>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <prvSwitchTimerLists+0xc4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a04      	ldr	r2, [pc, #16]	; (8009a5c <prvSwitchTimerLists+0xc0>)
 8009a4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a4e:	4a04      	ldr	r2, [pc, #16]	; (8009a60 <prvSwitchTimerLists+0xc4>)
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	6013      	str	r3, [r2, #0]
}
 8009a54:	bf00      	nop
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	24009be0 	.word	0x24009be0
 8009a60:	24009be4 	.word	0x24009be4

08009a64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a6a:	f7fd fa73 	bl	8006f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a6e:	4b15      	ldr	r3, [pc, #84]	; (8009ac4 <prvCheckForValidListAndQueue+0x60>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d120      	bne.n	8009ab8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a76:	4814      	ldr	r0, [pc, #80]	; (8009ac8 <prvCheckForValidListAndQueue+0x64>)
 8009a78:	f7fd f88e 	bl	8006b98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a7c:	4813      	ldr	r0, [pc, #76]	; (8009acc <prvCheckForValidListAndQueue+0x68>)
 8009a7e:	f7fd f88b 	bl	8006b98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <prvCheckForValidListAndQueue+0x6c>)
 8009a84:	4a10      	ldr	r2, [pc, #64]	; (8009ac8 <prvCheckForValidListAndQueue+0x64>)
 8009a86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <prvCheckForValidListAndQueue+0x70>)
 8009a8a:	4a10      	ldr	r2, [pc, #64]	; (8009acc <prvCheckForValidListAndQueue+0x68>)
 8009a8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <prvCheckForValidListAndQueue+0x74>)
 8009a94:	4a11      	ldr	r2, [pc, #68]	; (8009adc <prvCheckForValidListAndQueue+0x78>)
 8009a96:	2110      	movs	r1, #16
 8009a98:	200a      	movs	r0, #10
 8009a9a:	f7fd fbe5 	bl	8007268 <xQueueGenericCreateStatic>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4a08      	ldr	r2, [pc, #32]	; (8009ac4 <prvCheckForValidListAndQueue+0x60>)
 8009aa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009aa4:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <prvCheckForValidListAndQueue+0x60>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d005      	beq.n	8009ab8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009aac:	4b05      	ldr	r3, [pc, #20]	; (8009ac4 <prvCheckForValidListAndQueue+0x60>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	490b      	ldr	r1, [pc, #44]	; (8009ae0 <prvCheckForValidListAndQueue+0x7c>)
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fbe8 	bl	8008288 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ab8:	f7fd fa7c 	bl	8006fb4 <vPortExitCritical>
}
 8009abc:	bf00      	nop
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	24009be8 	.word	0x24009be8
 8009ac8:	24009bb8 	.word	0x24009bb8
 8009acc:	24009bcc 	.word	0x24009bcc
 8009ad0:	24009be0 	.word	0x24009be0
 8009ad4:	24009be4 	.word	0x24009be4
 8009ad8:	24009c94 	.word	0x24009c94
 8009adc:	24009bf4 	.word	0x24009bf4
 8009ae0:	08019ab4 	.word	0x08019ab4

08009ae4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	461a      	mov	r2, r3
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f00c fe05 	bl	8016708 <tcpip_send_msg_wait_sem>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <netconn_apimsg+0x2e>
    return apimsg->err;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009b10:	e001      	b.n	8009b16 <netconn_apimsg+0x32>
  }
  return err;
 8009b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	; 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	603a      	str	r2, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 ff3b 	bl	800a9b0 <netconn_alloc>
 8009b3a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d054      	beq.n	8009bec <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009b42:	79bb      	ldrb	r3, [r7, #6]
 8009b44:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009b4a:	f107 0308 	add.w	r3, r7, #8
 8009b4e:	4619      	mov	r1, r3
 8009b50:	4829      	ldr	r0, [pc, #164]	; (8009bf8 <netconn_new_with_proto_and_callback+0xd8>)
 8009b52:	f7ff ffc7 	bl	8009ae4 <netconn_apimsg>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009b5c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d043      	beq.n	8009bec <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <netconn_new_with_proto_and_callback+0x58>
 8009b6c:	4b23      	ldr	r3, [pc, #140]	; (8009bfc <netconn_new_with_proto_and_callback+0xdc>)
 8009b6e:	22a3      	movs	r2, #163	; 0xa3
 8009b70:	4923      	ldr	r1, [pc, #140]	; (8009c00 <netconn_new_with_proto_and_callback+0xe0>)
 8009b72:	4824      	ldr	r0, [pc, #144]	; (8009c04 <netconn_new_with_proto_and_callback+0xe4>)
 8009b74:	f00d ff24 	bl	80179c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	3310      	adds	r3, #16
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f006 fa77 	bl	8010070 <sys_mbox_valid>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d105      	bne.n	8009b94 <netconn_new_with_proto_and_callback+0x74>
 8009b88:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <netconn_new_with_proto_and_callback+0xdc>)
 8009b8a:	22a4      	movs	r2, #164	; 0xa4
 8009b8c:	491e      	ldr	r1, [pc, #120]	; (8009c08 <netconn_new_with_proto_and_callback+0xe8>)
 8009b8e:	481d      	ldr	r0, [pc, #116]	; (8009c04 <netconn_new_with_proto_and_callback+0xe4>)
 8009b90:	f00d ff16 	bl	80179c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	3314      	adds	r3, #20
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f006 fa69 	bl	8010070 <sys_mbox_valid>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <netconn_new_with_proto_and_callback+0x90>
 8009ba4:	4b15      	ldr	r3, [pc, #84]	; (8009bfc <netconn_new_with_proto_and_callback+0xdc>)
 8009ba6:	22a6      	movs	r2, #166	; 0xa6
 8009ba8:	4918      	ldr	r1, [pc, #96]	; (8009c0c <netconn_new_with_proto_and_callback+0xec>)
 8009baa:	4816      	ldr	r0, [pc, #88]	; (8009c04 <netconn_new_with_proto_and_callback+0xe4>)
 8009bac:	f00d ff08 	bl	80179c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	330c      	adds	r3, #12
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f006 fae9 	bl	801018c <sys_sem_valid>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d105      	bne.n	8009bcc <netconn_new_with_proto_and_callback+0xac>
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <netconn_new_with_proto_and_callback+0xdc>)
 8009bc2:	22a9      	movs	r2, #169	; 0xa9
 8009bc4:	4912      	ldr	r1, [pc, #72]	; (8009c10 <netconn_new_with_proto_and_callback+0xf0>)
 8009bc6:	480f      	ldr	r0, [pc, #60]	; (8009c04 <netconn_new_with_proto_and_callback+0xe4>)
 8009bc8:	f00d fefa 	bl	80179c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	330c      	adds	r3, #12
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f006 face 	bl	8010172 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd8:	3310      	adds	r3, #16
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f006 f9d4 	bl	800ff88 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009be2:	2007      	movs	r0, #7
 8009be4:	f004 ffac 	bl	800eb40 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	e000      	b.n	8009bee <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3730      	adds	r7, #48	; 0x30
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800a985 	.word	0x0800a985
 8009bfc:	08019abc 	.word	0x08019abc
 8009c00:	08019b4c 	.word	0x08019b4c
 8009c04:	08019b70 	.word	0x08019b70
 8009c08:	08019b98 	.word	0x08019b98
 8009c0c:	08019bb0 	.word	0x08019bb0
 8009c10:	08019bd4 	.word	0x08019bd4

08009c14 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08c      	sub	sp, #48	; 0x30
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	e014      	b.n	8009c50 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009c2a:	2329      	movs	r3, #41	; 0x29
 8009c2c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	4619      	mov	r1, r3
 8009c34:	4808      	ldr	r0, [pc, #32]	; (8009c58 <netconn_prepare_delete+0x44>)
 8009c36:	f7ff ff55 	bl	8009ae4 <netconn_apimsg>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009c40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <netconn_prepare_delete+0x3a>
    return err;
 8009c48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c4c:	e000      	b.n	8009c50 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3730      	adds	r7, #48	; 0x30
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	0800aef1 	.word	0x0800aef1

08009c5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <netconn_delete+0x12>
    return ERR_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e00d      	b.n	8009c8a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ffd0 	bl	8009c14 <netconn_prepare_delete>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d102      	bne.n	8009c86 <netconn_delete+0x2a>
    netconn_free(conn);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 ff03 	bl	800aa8c <netconn_free>
  }
  return err;
 8009c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08e      	sub	sp, #56	; 0x38
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d109      	bne.n	8009cbc <netconn_bind+0x28>
 8009ca8:	4b11      	ldr	r3, [pc, #68]	; (8009cf0 <netconn_bind+0x5c>)
 8009caa:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009cae:	4911      	ldr	r1, [pc, #68]	; (8009cf4 <netconn_bind+0x60>)
 8009cb0:	4811      	ldr	r0, [pc, #68]	; (8009cf8 <netconn_bind+0x64>)
 8009cb2:	f00d fe85 	bl	80179c0 <iprintf>
 8009cb6:	f06f 030f 	mvn.w	r3, #15
 8009cba:	e015      	b.n	8009ce8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	; (8009cfc <netconn_bind+0x68>)
 8009cc4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009cd2:	f107 0314 	add.w	r3, r7, #20
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4809      	ldr	r0, [pc, #36]	; (8009d00 <netconn_bind+0x6c>)
 8009cda:	f7ff ff03 	bl	8009ae4 <netconn_apimsg>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009ce4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3738      	adds	r7, #56	; 0x38
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	08019abc 	.word	0x08019abc
 8009cf4:	08019c50 	.word	0x08019c50
 8009cf8:	08019b70 	.word	0x08019b70
 8009cfc:	0801d484 	.word	0x0801d484
 8009d00:	0800b0b1 	.word	0x0800b0b1

08009d04 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08e      	sub	sp, #56	; 0x38
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <netconn_connect+0x28>
 8009d18:	4b11      	ldr	r3, [pc, #68]	; (8009d60 <netconn_connect+0x5c>)
 8009d1a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009d1e:	4911      	ldr	r1, [pc, #68]	; (8009d64 <netconn_connect+0x60>)
 8009d20:	4811      	ldr	r0, [pc, #68]	; (8009d68 <netconn_connect+0x64>)
 8009d22:	f00d fe4d 	bl	80179c0 <iprintf>
 8009d26:	f06f 030f 	mvn.w	r3, #15
 8009d2a:	e015      	b.n	8009d58 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009d32:	4b0e      	ldr	r3, [pc, #56]	; (8009d6c <netconn_connect+0x68>)
 8009d34:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009d3e:	88fb      	ldrh	r3, [r7, #6]
 8009d40:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009d42:	f107 0314 	add.w	r3, r7, #20
 8009d46:	4619      	mov	r1, r3
 8009d48:	4809      	ldr	r0, [pc, #36]	; (8009d70 <netconn_connect+0x6c>)
 8009d4a:	f7ff fecb 	bl	8009ae4 <netconn_apimsg>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009d54:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3738      	adds	r7, #56	; 0x38
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	08019abc 	.word	0x08019abc
 8009d64:	08019c8c 	.word	0x08019c8c
 8009d68:	08019b70 	.word	0x08019b70
 8009d6c:	0801d484 	.word	0x0801d484
 8009d70:	0800b245 	.word	0x0800b245

08009d74 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <netconn_recv_data+0x2c>
 8009d8c:	4b58      	ldr	r3, [pc, #352]	; (8009ef0 <netconn_recv_data+0x17c>)
 8009d8e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009d92:	4958      	ldr	r1, [pc, #352]	; (8009ef4 <netconn_recv_data+0x180>)
 8009d94:	4858      	ldr	r0, [pc, #352]	; (8009ef8 <netconn_recv_data+0x184>)
 8009d96:	f00d fe13 	bl	80179c0 <iprintf>
 8009d9a:	f06f 030f 	mvn.w	r3, #15
 8009d9e:	e0a2      	b.n	8009ee6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d109      	bne.n	8009dc0 <netconn_recv_data+0x4c>
 8009dac:	4b50      	ldr	r3, [pc, #320]	; (8009ef0 <netconn_recv_data+0x17c>)
 8009dae:	f240 224a 	movw	r2, #586	; 0x24a
 8009db2:	4952      	ldr	r1, [pc, #328]	; (8009efc <netconn_recv_data+0x188>)
 8009db4:	4850      	ldr	r0, [pc, #320]	; (8009ef8 <netconn_recv_data+0x184>)
 8009db6:	f00d fe03 	bl	80179c0 <iprintf>
 8009dba:	f06f 030f 	mvn.w	r3, #15
 8009dbe:	e092      	b.n	8009ee6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3310      	adds	r3, #16
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f006 f953 	bl	8010070 <sys_mbox_valid>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10e      	bne.n	8009dee <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 fa23 	bl	800a21c <netconn_err>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009dda:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009de2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009de6:	e07e      	b.n	8009ee6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009de8:	f06f 030a 	mvn.w	r3, #10
 8009dec:	e07b      	b.n	8009ee6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	7f1b      	ldrb	r3, [r3, #28]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10f      	bne.n	8009e1a <netconn_recv_data+0xa6>
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	7f1b      	ldrb	r3, [r3, #28]
 8009e08:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d023      	beq.n	8009e62 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3310      	adds	r3, #16
 8009e1e:	f107 0218 	add.w	r2, r7, #24
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f006 f90c 	bl	8010042 <sys_arch_mbox_tryfetch>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e30:	d11f      	bne.n	8009e72 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 f9f2 	bl	800a21c <netconn_err>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009e3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009e44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009e48:	e04d      	b.n	8009ee6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	7f1b      	ldrb	r3, [r3, #28]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009e56:	f06f 030a 	mvn.w	r3, #10
 8009e5a:	e044      	b.n	8009ee6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009e5c:	f06f 0306 	mvn.w	r3, #6
 8009e60:	e041      	b.n	8009ee6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3310      	adds	r3, #16
 8009e66:	f107 0118 	add.w	r1, r7, #24
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f006 f8b7 	bl	800ffe0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d117      	bne.n	8009eae <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	f107 0217 	add.w	r2, r7, #23
 8009e84:	4611      	mov	r1, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fa1a 	bl	800a2c0 <lwip_netconn_is_err_msg>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d009      	beq.n	8009ea6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e96:	f113 0f0f 	cmn.w	r3, #15
 8009e9a:	d101      	bne.n	8009ea0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e022      	b.n	8009ee6 <netconn_recv_data+0x172>
      }
      return err;
 8009ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ea4:	e01f      	b.n	8009ee6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	891b      	ldrh	r3, [r3, #8]
 8009eaa:	83fb      	strh	r3, [r7, #30]
 8009eac:	e00d      	b.n	8009eca <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <netconn_recv_data+0x14e>
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <netconn_recv_data+0x17c>)
 8009eb6:	f240 2291 	movw	r2, #657	; 0x291
 8009eba:	4911      	ldr	r1, [pc, #68]	; (8009f00 <netconn_recv_data+0x18c>)
 8009ebc:	480e      	ldr	r0, [pc, #56]	; (8009ef8 <netconn_recv_data+0x184>)
 8009ebe:	f00d fd7f 	bl	80179c0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	891b      	ldrh	r3, [r3, #8]
 8009ec8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d005      	beq.n	8009ede <netconn_recv_data+0x16a>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed6:	8bfa      	ldrh	r2, [r7, #30]
 8009ed8:	2101      	movs	r1, #1
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	08019abc 	.word	0x08019abc
 8009ef4:	08019d30 	.word	0x08019d30
 8009ef8:	08019b70 	.word	0x08019b70
 8009efc:	08019d50 	.word	0x08019d50
 8009f00:	08019d6c 	.word	0x08019d6c

08009f04 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <netconn_tcp_recvd_msg+0x1e>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d009      	beq.n	8009f36 <netconn_tcp_recvd_msg+0x32>
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <netconn_tcp_recvd_msg+0x50>)
 8009f24:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009f28:	490b      	ldr	r1, [pc, #44]	; (8009f58 <netconn_tcp_recvd_msg+0x54>)
 8009f2a:	480c      	ldr	r0, [pc, #48]	; (8009f5c <netconn_tcp_recvd_msg+0x58>)
 8009f2c:	f00d fd48 	bl	80179c0 <iprintf>
 8009f30:	f06f 030f 	mvn.w	r3, #15
 8009f34:	e00a      	b.n	8009f4c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4806      	ldr	r0, [pc, #24]	; (8009f60 <netconn_tcp_recvd_msg+0x5c>)
 8009f46:	f7ff fdcd 	bl	8009ae4 <netconn_apimsg>
 8009f4a:	4603      	mov	r3, r0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	08019abc 	.word	0x08019abc
 8009f58:	08019d78 	.word	0x08019d78
 8009f5c:	08019b70 	.word	0x08019b70
 8009f60:	0800b453 	.word	0x0800b453

08009f64 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b090      	sub	sp, #64	; 0x40
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3310      	adds	r3, #16
 8009f76:	4618      	mov	r0, r3
 8009f78:	f006 f87a 	bl	8010070 <sys_mbox_valid>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009f82:	f06f 030a 	mvn.w	r3, #10
 8009f86:	e06d      	b.n	800a064 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	7f1b      	ldrb	r3, [r3, #28]
 8009f8c:	b25b      	sxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da07      	bge.n	8009fa2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	7f1b      	ldrb	r3, [r3, #28]
 8009f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009fa0:	e039      	b.n	800a016 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff fee3 	bl	8009d74 <netconn_recv_data>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009fb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009fbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009fc0:	e050      	b.n	800a064 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	f003 0308 	and.w	r3, r3, #8
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10e      	bne.n	8009ff0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <netconn_recv_data_tcp+0x7a>
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	891b      	ldrh	r3, [r3, #8]
 8009fdc:	e000      	b.n	8009fe0 <netconn_recv_data_tcp+0x7c>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fe4:	f107 0214 	add.w	r2, r7, #20
 8009fe8:	4619      	mov	r1, r3
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff ff8a 	bl	8009f04 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d134      	bne.n	800a060 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009ff6:	79fb      	ldrb	r3, [r7, #7]
 8009ff8:	f003 0310 	and.w	r3, r3, #16
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	7f1b      	ldrb	r3, [r3, #28]
 800a004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a00e:	f06f 0306 	mvn.w	r3, #6
 800a012:	e027      	b.n	800a064 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a014:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d005      	beq.n	800a02a <netconn_recv_data_tcp+0xc6>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	2200      	movs	r2, #0
 800a024:	2101      	movs	r1, #1
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10f      	bne.n	800a052 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f8f2 	bl	800a21c <netconn_err>
 800a038:	4603      	mov	r3, r0
 800a03a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a03e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <netconn_recv_data_tcp+0xe8>
          return err;
 800a046:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a04a:	e00b      	b.n	800a064 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a04c:	f06f 030d 	mvn.w	r3, #13
 800a050:	e008      	b.n	800a064 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a052:	2101      	movs	r1, #1
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f8b1 	bl	800a1bc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a05a:	f06f 030e 	mvn.w	r3, #14
 800a05e:	e001      	b.n	800a064 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a060:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a064:	4618      	mov	r0, r3
 800a066:	3740      	adds	r7, #64	; 0x40
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d109      	bne.n	800a094 <netconn_recv+0x28>
 800a080:	4b32      	ldr	r3, [pc, #200]	; (800a14c <netconn_recv+0xe0>)
 800a082:	f240 3263 	movw	r2, #867	; 0x363
 800a086:	4932      	ldr	r1, [pc, #200]	; (800a150 <netconn_recv+0xe4>)
 800a088:	4832      	ldr	r0, [pc, #200]	; (800a154 <netconn_recv+0xe8>)
 800a08a:	f00d fc99 	bl	80179c0 <iprintf>
 800a08e:	f06f 030f 	mvn.w	r3, #15
 800a092:	e056      	b.n	800a142 <netconn_recv+0xd6>
  *new_buf = NULL;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d109      	bne.n	800a0b4 <netconn_recv+0x48>
 800a0a0:	4b2a      	ldr	r3, [pc, #168]	; (800a14c <netconn_recv+0xe0>)
 800a0a2:	f240 3265 	movw	r2, #869	; 0x365
 800a0a6:	492c      	ldr	r1, [pc, #176]	; (800a158 <netconn_recv+0xec>)
 800a0a8:	482a      	ldr	r0, [pc, #168]	; (800a154 <netconn_recv+0xe8>)
 800a0aa:	f00d fc89 	bl	80179c0 <iprintf>
 800a0ae:	f06f 030f 	mvn.w	r3, #15
 800a0b2:	e046      	b.n	800a142 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0bc:	2b10      	cmp	r3, #16
 800a0be:	d13a      	bne.n	800a136 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a0c4:	2006      	movs	r0, #6
 800a0c6:	f004 fcc5 	bl	800ea54 <memp_malloc>
 800a0ca:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d102      	bne.n	800a0d8 <netconn_recv+0x6c>
      return ERR_MEM;
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d6:	e034      	b.n	800a142 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a0d8:	f107 030c 	add.w	r3, r7, #12
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff ff3f 	bl	8009f64 <netconn_recv_data_tcp>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a0ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d006      	beq.n	800a100 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a0f2:	6979      	ldr	r1, [r7, #20]
 800a0f4:	2006      	movs	r0, #6
 800a0f6:	f004 fd23 	bl	800eb40 <memp_free>
      return err;
 800a0fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0fe:	e020      	b.n	800a142 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <netconn_recv+0xa8>
 800a106:	4b11      	ldr	r3, [pc, #68]	; (800a14c <netconn_recv+0xe0>)
 800a108:	f240 3279 	movw	r2, #889	; 0x379
 800a10c:	4913      	ldr	r1, [pc, #76]	; (800a15c <netconn_recv+0xf0>)
 800a10e:	4811      	ldr	r0, [pc, #68]	; (800a154 <netconn_recv+0xe8>)
 800a110:	f00d fc56 	bl	80179c0 <iprintf>

    buf->p = p;
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2200      	movs	r2, #0
 800a124:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2200      	movs	r2, #0
 800a12a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	e005      	b.n	800a142 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a136:	2200      	movs	r2, #0
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fe1a 	bl	8009d74 <netconn_recv_data>
 800a140:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	08019abc 	.word	0x08019abc
 800a150:	08019d30 	.word	0x08019d30
 800a154:	08019b70 	.word	0x08019b70
 800a158:	08019d50 	.word	0x08019d50
 800a15c:	08019dc8 	.word	0x08019dc8

0800a160 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08c      	sub	sp, #48	; 0x30
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <netconn_send+0x24>
 800a170:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <netconn_send+0x4c>)
 800a172:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a176:	490e      	ldr	r1, [pc, #56]	; (800a1b0 <netconn_send+0x50>)
 800a178:	480e      	ldr	r0, [pc, #56]	; (800a1b4 <netconn_send+0x54>)
 800a17a:	f00d fc21 	bl	80179c0 <iprintf>
 800a17e:	f06f 030f 	mvn.w	r3, #15
 800a182:	e00e      	b.n	800a1a2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	4619      	mov	r1, r3
 800a192:	4809      	ldr	r0, [pc, #36]	; (800a1b8 <netconn_send+0x58>)
 800a194:	f7ff fca6 	bl	8009ae4 <netconn_apimsg>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a19e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3730      	adds	r7, #48	; 0x30
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	08019abc 	.word	0x08019abc
 800a1b0:	08019dd4 	.word	0x08019dd4
 800a1b4:	08019b70 	.word	0x08019b70
 800a1b8:	0800b3b9 	.word	0x0800b3b9

0800a1bc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08c      	sub	sp, #48	; 0x30
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <netconn_close_shutdown+0x26>
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <netconn_close_shutdown+0x50>)
 800a1d0:	f240 4247 	movw	r2, #1095	; 0x447
 800a1d4:	490e      	ldr	r1, [pc, #56]	; (800a210 <netconn_close_shutdown+0x54>)
 800a1d6:	480f      	ldr	r0, [pc, #60]	; (800a214 <netconn_close_shutdown+0x58>)
 800a1d8:	f00d fbf2 	bl	80179c0 <iprintf>
 800a1dc:	f06f 030f 	mvn.w	r3, #15
 800a1e0:	e010      	b.n	800a204 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a1ea:	2329      	movs	r3, #41	; 0x29
 800a1ec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a1ee:	f107 030c 	add.w	r3, r7, #12
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4808      	ldr	r0, [pc, #32]	; (800a218 <netconn_close_shutdown+0x5c>)
 800a1f6:	f7ff fc75 	bl	8009ae4 <netconn_apimsg>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a200:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a204:	4618      	mov	r0, r3
 800a206:	3730      	adds	r7, #48	; 0x30
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	08019abc 	.word	0x08019abc
 800a210:	08019e54 	.word	0x08019e54
 800a214:	08019b70 	.word	0x08019b70
 800a218:	0800b859 	.word	0x0800b859

0800a21c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <netconn_err+0x12>
    return ERR_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e00d      	b.n	800a24a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a22e:	f006 f829 	bl	8010284 <sys_arch_protect>
 800a232:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	7a1b      	ldrb	r3, [r3, #8]
 800a238:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f006 f82d 	bl	80102a0 <sys_arch_unprotect>
  return err;
 800a246:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a25e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a262:	f113 0f0d 	cmn.w	r3, #13
 800a266:	d009      	beq.n	800a27c <lwip_netconn_err_to_msg+0x28>
 800a268:	f113 0f0d 	cmn.w	r3, #13
 800a26c:	dc0c      	bgt.n	800a288 <lwip_netconn_err_to_msg+0x34>
 800a26e:	f113 0f0f 	cmn.w	r3, #15
 800a272:	d007      	beq.n	800a284 <lwip_netconn_err_to_msg+0x30>
 800a274:	f113 0f0e 	cmn.w	r3, #14
 800a278:	d002      	beq.n	800a280 <lwip_netconn_err_to_msg+0x2c>
 800a27a:	e005      	b.n	800a288 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <lwip_netconn_err_to_msg+0x54>)
 800a27e:	e00e      	b.n	800a29e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a280:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <lwip_netconn_err_to_msg+0x58>)
 800a282:	e00c      	b.n	800a29e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a284:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <lwip_netconn_err_to_msg+0x5c>)
 800a286:	e00a      	b.n	800a29e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <lwip_netconn_err_to_msg+0x48>
 800a290:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <lwip_netconn_err_to_msg+0x60>)
 800a292:	227d      	movs	r2, #125	; 0x7d
 800a294:	4908      	ldr	r1, [pc, #32]	; (800a2b8 <lwip_netconn_err_to_msg+0x64>)
 800a296:	4809      	ldr	r0, [pc, #36]	; (800a2bc <lwip_netconn_err_to_msg+0x68>)
 800a298:	f00d fb92 	bl	80179c0 <iprintf>
      return NULL;
 800a29c:	2300      	movs	r3, #0
  }
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0801d470 	.word	0x0801d470
 800a2ac:	0801d471 	.word	0x0801d471
 800a2b0:	0801d472 	.word	0x0801d472
 800a2b4:	08019e70 	.word	0x08019e70
 800a2b8:	08019f00 	.word	0x08019f00
 800a2bc:	08019f10 	.word	0x08019f10

0800a2c0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d105      	bne.n	800a2dc <lwip_netconn_is_err_msg+0x1c>
 800a2d0:	4b12      	ldr	r3, [pc, #72]	; (800a31c <lwip_netconn_is_err_msg+0x5c>)
 800a2d2:	2285      	movs	r2, #133	; 0x85
 800a2d4:	4912      	ldr	r1, [pc, #72]	; (800a320 <lwip_netconn_is_err_msg+0x60>)
 800a2d6:	4813      	ldr	r0, [pc, #76]	; (800a324 <lwip_netconn_is_err_msg+0x64>)
 800a2d8:	f00d fb72 	bl	80179c0 <iprintf>

  if (msg == &netconn_aborted) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a12      	ldr	r2, [pc, #72]	; (800a328 <lwip_netconn_is_err_msg+0x68>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d104      	bne.n	800a2ee <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	22f3      	movs	r2, #243	; 0xf3
 800a2e8:	701a      	strb	r2, [r3, #0]
    return 1;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e012      	b.n	800a314 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a0e      	ldr	r2, [pc, #56]	; (800a32c <lwip_netconn_is_err_msg+0x6c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d104      	bne.n	800a300 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	22f2      	movs	r2, #242	; 0xf2
 800a2fa:	701a      	strb	r2, [r3, #0]
    return 1;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e009      	b.n	800a314 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a0b      	ldr	r2, [pc, #44]	; (800a330 <lwip_netconn_is_err_msg+0x70>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d104      	bne.n	800a312 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	22f1      	movs	r2, #241	; 0xf1
 800a30c:	701a      	strb	r2, [r3, #0]
    return 1;
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	08019e70 	.word	0x08019e70
 800a320:	08019f38 	.word	0x08019f38
 800a324:	08019f10 	.word	0x08019f10
 800a328:	0801d470 	.word	0x0801d470
 800a32c:	0801d471 	.word	0x0801d471
 800a330:	0801d472 	.word	0x0801d472

0800a334 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d105      	bne.n	800a354 <recv_udp+0x20>
 800a348:	4b34      	ldr	r3, [pc, #208]	; (800a41c <recv_udp+0xe8>)
 800a34a:	22e5      	movs	r2, #229	; 0xe5
 800a34c:	4934      	ldr	r1, [pc, #208]	; (800a420 <recv_udp+0xec>)
 800a34e:	4835      	ldr	r0, [pc, #212]	; (800a424 <recv_udp+0xf0>)
 800a350:	f00d fb36 	bl	80179c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d105      	bne.n	800a366 <recv_udp+0x32>
 800a35a:	4b30      	ldr	r3, [pc, #192]	; (800a41c <recv_udp+0xe8>)
 800a35c:	22e6      	movs	r2, #230	; 0xe6
 800a35e:	4932      	ldr	r1, [pc, #200]	; (800a428 <recv_udp+0xf4>)
 800a360:	4830      	ldr	r0, [pc, #192]	; (800a424 <recv_udp+0xf0>)
 800a362:	f00d fb2d 	bl	80179c0 <iprintf>
  conn = (struct netconn *)arg;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <recv_udp+0x44>
    pbuf_free(p);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f005 fab3 	bl	800f8dc <pbuf_free>
    return;
 800a376:	e04d      	b.n	800a414 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d005      	beq.n	800a38e <recv_udp+0x5a>
 800a382:	4b26      	ldr	r3, [pc, #152]	; (800a41c <recv_udp+0xe8>)
 800a384:	22ee      	movs	r2, #238	; 0xee
 800a386:	4929      	ldr	r1, [pc, #164]	; (800a42c <recv_udp+0xf8>)
 800a388:	4826      	ldr	r0, [pc, #152]	; (800a424 <recv_udp+0xf0>)
 800a38a:	f00d fb19 	bl	80179c0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	3310      	adds	r3, #16
 800a392:	4618      	mov	r0, r3
 800a394:	f005 fe6c 	bl	8010070 <sys_mbox_valid>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d103      	bne.n	800a3a6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f005 fa9c 	bl	800f8dc <pbuf_free>
    return;
 800a3a4:	e036      	b.n	800a414 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a3a6:	2006      	movs	r0, #6
 800a3a8:	f004 fb54 	bl	800ea54 <memp_malloc>
 800a3ac:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <recv_udp+0x88>
    pbuf_free(p);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f005 fa91 	bl	800f8dc <pbuf_free>
    return;
 800a3ba:	e02b      	b.n	800a414 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <recv_udp+0xa0>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	e000      	b.n	800a3d6 <recv_udp+0xa2>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a3de:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	891b      	ldrh	r3, [r3, #8]
 800a3e4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	69b9      	ldr	r1, [r7, #24]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f005 fddd 	bl	800ffac <sys_mbox_trypost>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a3f8:	69b8      	ldr	r0, [r7, #24]
 800a3fa:	f004 fbcb 	bl	800eb94 <netbuf_delete>
    return;
 800a3fe:	e009      	b.n	800a414 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d005      	beq.n	800a414 <recv_udp+0xe0>
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	8afa      	ldrh	r2, [r7, #22]
 800a40e:	2100      	movs	r1, #0
 800a410:	69f8      	ldr	r0, [r7, #28]
 800a412:	4798      	blx	r3
  }
}
 800a414:	3720      	adds	r7, #32
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	08019e70 	.word	0x08019e70
 800a420:	08019f44 	.word	0x08019f44
 800a424:	08019f10 	.word	0x08019f10
 800a428:	08019f68 	.word	0x08019f68
 800a42c:	08019f88 	.word	0x08019f88

0800a430 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d106      	bne.n	800a452 <recv_tcp+0x22>
 800a444:	4b36      	ldr	r3, [pc, #216]	; (800a520 <recv_tcp+0xf0>)
 800a446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a44a:	4936      	ldr	r1, [pc, #216]	; (800a524 <recv_tcp+0xf4>)
 800a44c:	4836      	ldr	r0, [pc, #216]	; (800a528 <recv_tcp+0xf8>)
 800a44e:	f00d fab7 	bl	80179c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <recv_tcp+0x36>
 800a458:	4b31      	ldr	r3, [pc, #196]	; (800a520 <recv_tcp+0xf0>)
 800a45a:	f240 122d 	movw	r2, #301	; 0x12d
 800a45e:	4933      	ldr	r1, [pc, #204]	; (800a52c <recv_tcp+0xfc>)
 800a460:	4831      	ldr	r0, [pc, #196]	; (800a528 <recv_tcp+0xf8>)
 800a462:	f00d faad 	bl	80179c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d006      	beq.n	800a47c <recv_tcp+0x4c>
 800a46e:	4b2c      	ldr	r3, [pc, #176]	; (800a520 <recv_tcp+0xf0>)
 800a470:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a474:	492e      	ldr	r1, [pc, #184]	; (800a530 <recv_tcp+0x100>)
 800a476:	482c      	ldr	r0, [pc, #176]	; (800a528 <recv_tcp+0xf8>)
 800a478:	f00d faa2 	bl	80179c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <recv_tcp+0x5c>
    return ERR_VAL;
 800a486:	f06f 0305 	mvn.w	r3, #5
 800a48a:	e045      	b.n	800a518 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	429a      	cmp	r2, r3
 800a494:	d006      	beq.n	800a4a4 <recv_tcp+0x74>
 800a496:	4b22      	ldr	r3, [pc, #136]	; (800a520 <recv_tcp+0xf0>)
 800a498:	f240 1235 	movw	r2, #309	; 0x135
 800a49c:	4925      	ldr	r1, [pc, #148]	; (800a534 <recv_tcp+0x104>)
 800a49e:	4822      	ldr	r0, [pc, #136]	; (800a528 <recv_tcp+0xf8>)
 800a4a0:	f00d fa8e 	bl	80179c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	3310      	adds	r3, #16
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f005 fde1 	bl	8010070 <sys_mbox_valid>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10d      	bne.n	800a4d0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d008      	beq.n	800a4cc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	891b      	ldrh	r3, [r3, #8]
 800a4be:	4619      	mov	r1, r3
 800a4c0:	68b8      	ldr	r0, [r7, #8]
 800a4c2:	f006 fb59 	bl	8010b78 <tcp_recved>
      pbuf_free(p);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f005 fa08 	bl	800f8dc <pbuf_free>
    }
    return ERR_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e023      	b.n	800a518 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d005      	beq.n	800a4e2 <recv_tcp+0xb2>
    msg = p;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	891b      	ldrh	r3, [r3, #8]
 800a4de:	83fb      	strh	r3, [r7, #30]
 800a4e0:	e003      	b.n	800a4ea <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a4e2:	4b15      	ldr	r3, [pc, #84]	; (800a538 <recv_tcp+0x108>)
 800a4e4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	3310      	adds	r3, #16
 800a4ee:	69b9      	ldr	r1, [r7, #24]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f005 fd5b 	bl	800ffac <sys_mbox_trypost>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a500:	e00a      	b.n	800a518 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <recv_tcp+0xe6>
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	8bfa      	ldrh	r2, [r7, #30]
 800a510:	2100      	movs	r1, #0
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	4798      	blx	r3
  }

  return ERR_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	08019e70 	.word	0x08019e70
 800a524:	08019fa8 	.word	0x08019fa8
 800a528:	08019f10 	.word	0x08019f10
 800a52c:	08019fcc 	.word	0x08019fcc
 800a530:	08019fec 	.word	0x08019fec
 800a534:	0801a004 	.word	0x0801a004
 800a538:	0801d472 	.word	0x0801d472

0800a53c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d106      	bne.n	800a55e <poll_tcp+0x22>
 800a550:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <poll_tcp+0xc0>)
 800a552:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a556:	492a      	ldr	r1, [pc, #168]	; (800a600 <poll_tcp+0xc4>)
 800a558:	482a      	ldr	r0, [pc, #168]	; (800a604 <poll_tcp+0xc8>)
 800a55a:	f00d fa31 	bl	80179c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	785b      	ldrb	r3, [r3, #1]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d104      	bne.n	800a570 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a566:	2101      	movs	r1, #1
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 ffa7 	bl	800b4bc <lwip_netconn_do_writemore>
 800a56e:	e016      	b.n	800a59e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	785b      	ldrb	r3, [r3, #1]
 800a574:	2b04      	cmp	r3, #4
 800a576:	d112      	bne.n	800a59e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <poll_tcp+0x5a>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	7a5b      	ldrb	r3, [r3, #9]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d005      	beq.n	800a596 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	7a5a      	ldrb	r2, [r3, #9]
 800a590:	3a01      	subs	r2, #1
 800a592:	b2d2      	uxtb	r2, r2
 800a594:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a596:	2101      	movs	r1, #1
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 fb3f 	bl	800ac1c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	7f1b      	ldrb	r3, [r3, #28]
 800a5a2:	f003 0310 	and.w	r3, r3, #16
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d022      	beq.n	800a5f0 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d01e      	beq.n	800a5f0 <poll_tcp+0xb4>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5ba:	f640 3269 	movw	r2, #2921	; 0xb69
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d916      	bls.n	800a5f0 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a5ca:	2b07      	cmp	r3, #7
 800a5cc:	d810      	bhi.n	800a5f0 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	7f1b      	ldrb	r3, [r3, #28]
 800a5d2:	f023 0310 	bic.w	r3, r3, #16
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d005      	beq.n	800a5f0 <poll_tcp+0xb4>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	08019e70 	.word	0x08019e70
 800a600:	0801a024 	.word	0x0801a024
 800a604:	08019f10 	.word	0x08019f10

0800a608 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <sent_tcp+0x26>
 800a620:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <sent_tcp+0xa0>)
 800a622:	f240 1293 	movw	r2, #403	; 0x193
 800a626:	4921      	ldr	r1, [pc, #132]	; (800a6ac <sent_tcp+0xa4>)
 800a628:	4821      	ldr	r0, [pc, #132]	; (800a6b0 <sent_tcp+0xa8>)
 800a62a:	f00d f9c9 	bl	80179c0 <iprintf>

  if (conn) {
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d033      	beq.n	800a69c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d104      	bne.n	800a646 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a63c:	2101      	movs	r1, #1
 800a63e:	6978      	ldr	r0, [r7, #20]
 800a640:	f000 ff3c 	bl	800b4bc <lwip_netconn_do_writemore>
 800a644:	e007      	b.n	800a656 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	785b      	ldrb	r3, [r3, #1]
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d103      	bne.n	800a656 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a64e:	2101      	movs	r1, #1
 800a650:	6978      	ldr	r0, [r7, #20]
 800a652:	f000 fae3 	bl	800ac1c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01e      	beq.n	800a69c <sent_tcp+0x94>
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a666:	f640 3269 	movw	r2, #2921	; 0xb69
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d916      	bls.n	800a69c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a676:	2b07      	cmp	r3, #7
 800a678:	d810      	bhi.n	800a69c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	7f1b      	ldrb	r3, [r3, #28]
 800a67e:	f023 0310 	bic.w	r3, r3, #16
 800a682:	b2da      	uxtb	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <sent_tcp+0x94>
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	2102      	movs	r1, #2
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	08019e70 	.word	0x08019e70
 800a6ac:	0801a024 	.word	0x0801a024
 800a6b0:	08019f10 	.word	0x08019f10

0800a6b4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <err_tcp+0x24>
 800a6ca:	4b5f      	ldr	r3, [pc, #380]	; (800a848 <err_tcp+0x194>)
 800a6cc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a6d0:	495e      	ldr	r1, [pc, #376]	; (800a84c <err_tcp+0x198>)
 800a6d2:	485f      	ldr	r0, [pc, #380]	; (800a850 <err_tcp+0x19c>)
 800a6d4:	f00d f974 	bl	80179c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a6d8:	f005 fdd4 	bl	8010284 <sys_arch_protect>
 800a6dc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	78fa      	ldrb	r2, [r7, #3]
 800a6e8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	7f1b      	ldrb	r3, [r3, #28]
 800a6ee:	f043 0301 	orr.w	r3, r3, #1
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	2200      	movs	r2, #0
 800a702:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a704:	69b8      	ldr	r0, [r7, #24]
 800a706:	f005 fdcb 	bl	80102a0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <err_tcp+0x6a>
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	2200      	movs	r2, #0
 800a718:	2104      	movs	r1, #4
 800a71a:	69f8      	ldr	r0, [r7, #28]
 800a71c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d005      	beq.n	800a732 <err_tcp+0x7e>
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	2200      	movs	r2, #0
 800a72c:	2100      	movs	r1, #0
 800a72e:	69f8      	ldr	r0, [r7, #28]
 800a730:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d005      	beq.n	800a746 <err_tcp+0x92>
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2200      	movs	r2, #0
 800a740:	2102      	movs	r1, #2
 800a742:	69f8      	ldr	r0, [r7, #28]
 800a744:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7ff fd82 	bl	800a254 <lwip_netconn_err_to_msg>
 800a750:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	3310      	adds	r3, #16
 800a756:	4618      	mov	r0, r3
 800a758:	f005 fc8a 	bl	8010070 <sys_mbox_valid>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d005      	beq.n	800a76e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	3310      	adds	r3, #16
 800a766:	6939      	ldr	r1, [r7, #16]
 800a768:	4618      	mov	r0, r3
 800a76a:	f005 fc1f 	bl	800ffac <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3314      	adds	r3, #20
 800a772:	4618      	mov	r0, r3
 800a774:	f005 fc7c 	bl	8010070 <sys_mbox_valid>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	3314      	adds	r3, #20
 800a782:	6939      	ldr	r1, [r7, #16]
 800a784:	4618      	mov	r0, r3
 800a786:	f005 fc11 	bl	800ffac <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d005      	beq.n	800a79c <err_tcp+0xe8>
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	2b04      	cmp	r3, #4
 800a794:	d002      	beq.n	800a79c <err_tcp+0xe8>
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d143      	bne.n	800a824 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	7f1b      	ldrb	r3, [r3, #28]
 800a7a0:	f003 0304 	and.w	r3, r3, #4
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bf14      	ite	ne
 800a7a8:	2301      	movne	r3, #1
 800a7aa:	2300      	moveq	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	7f1b      	ldrb	r3, [r3, #28]
 800a7b4:	f023 0304 	bic.w	r3, r3, #4
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d13b      	bne.n	800a83c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d106      	bne.n	800a7da <err_tcp+0x126>
 800a7cc:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <err_tcp+0x194>)
 800a7ce:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a7d2:	4920      	ldr	r1, [pc, #128]	; (800a854 <err_tcp+0x1a0>)
 800a7d4:	481e      	ldr	r0, [pc, #120]	; (800a850 <err_tcp+0x19c>)
 800a7d6:	f00d f8f3 	bl	80179c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d104      	bne.n	800a7ea <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	711a      	strb	r2, [r3, #4]
 800a7e8:	e003      	b.n	800a7f2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a7fc:	68b8      	ldr	r0, [r7, #8]
 800a7fe:	f005 fcc5 	bl	801018c <sys_sem_valid>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d106      	bne.n	800a816 <err_tcp+0x162>
 800a808:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <err_tcp+0x194>)
 800a80a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a80e:	4912      	ldr	r1, [pc, #72]	; (800a858 <err_tcp+0x1a4>)
 800a810:	480f      	ldr	r0, [pc, #60]	; (800a850 <err_tcp+0x19c>)
 800a812:	f00d f8d5 	bl	80179c0 <iprintf>
      conn->current_msg = NULL;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2200      	movs	r2, #0
 800a81a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a81c:	68b8      	ldr	r0, [r7, #8]
 800a81e:	f005 fc9b 	bl	8010158 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a822:	e00b      	b.n	800a83c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d008      	beq.n	800a83e <err_tcp+0x18a>
 800a82c:	4b06      	ldr	r3, [pc, #24]	; (800a848 <err_tcp+0x194>)
 800a82e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a832:	490a      	ldr	r1, [pc, #40]	; (800a85c <err_tcp+0x1a8>)
 800a834:	4806      	ldr	r0, [pc, #24]	; (800a850 <err_tcp+0x19c>)
 800a836:	f00d f8c3 	bl	80179c0 <iprintf>
  }
}
 800a83a:	e000      	b.n	800a83e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a83c:	bf00      	nop
}
 800a83e:	bf00      	nop
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	08019e70 	.word	0x08019e70
 800a84c:	0801a024 	.word	0x0801a024
 800a850:	08019f10 	.word	0x08019f10
 800a854:	0801a034 	.word	0x0801a034
 800a858:	0801a050 	.word	0x0801a050
 800a85c:	0801a06c 	.word	0x0801a06c

0800a860 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f007 f969 	bl	8011b48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a876:	490a      	ldr	r1, [pc, #40]	; (800a8a0 <setup_tcp+0x40>)
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f007 f977 	bl	8011b6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a87e:	4909      	ldr	r1, [pc, #36]	; (800a8a4 <setup_tcp+0x44>)
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f007 f997 	bl	8011bb4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a886:	2202      	movs	r2, #2
 800a888:	4907      	ldr	r1, [pc, #28]	; (800a8a8 <setup_tcp+0x48>)
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f007 f9f2 	bl	8011c74 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a890:	4906      	ldr	r1, [pc, #24]	; (800a8ac <setup_tcp+0x4c>)
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f007 f9b2 	bl	8011bfc <tcp_err>
}
 800a898:	bf00      	nop
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	0800a431 	.word	0x0800a431
 800a8a4:	0800a609 	.word	0x0800a609
 800a8a8:	0800a53d 	.word	0x0800a53d
 800a8ac:	0800a6b5 	.word	0x0800a6b5

0800a8b0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d006      	beq.n	800a8d4 <pcb_new+0x24>
 800a8c6:	4b2b      	ldr	r3, [pc, #172]	; (800a974 <pcb_new+0xc4>)
 800a8c8:	f240 2265 	movw	r2, #613	; 0x265
 800a8cc:	492a      	ldr	r1, [pc, #168]	; (800a978 <pcb_new+0xc8>)
 800a8ce:	482b      	ldr	r0, [pc, #172]	; (800a97c <pcb_new+0xcc>)
 800a8d0:	f00d f876 	bl	80179c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8de:	2b10      	cmp	r3, #16
 800a8e0:	d022      	beq.n	800a928 <pcb_new+0x78>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d133      	bne.n	800a94e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681c      	ldr	r4, [r3, #0]
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f00c fe36 	bl	801755e <udp_new_ip_type>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d02a      	beq.n	800a956 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b22      	cmp	r3, #34	; 0x22
 800a908:	d104      	bne.n	800a914 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6858      	ldr	r0, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	4917      	ldr	r1, [pc, #92]	; (800a980 <pcb_new+0xd0>)
 800a922:	f00c fd9d 	bl	8017460 <udp_recv>
      }
      break;
 800a926:	e016      	b.n	800a956 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681c      	ldr	r4, [r3, #0]
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	4618      	mov	r0, r3
 800a930:	f007 f8fc 	bl	8011b2c <tcp_new_ip_type>
 800a934:	4603      	mov	r3, r0
 800a936:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00b      	beq.n	800a95a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff ff8a 	bl	800a860 <setup_tcp>
      }
      break;
 800a94c:	e005      	b.n	800a95a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	22fa      	movs	r2, #250	; 0xfa
 800a952:	711a      	strb	r2, [r3, #4]
      return;
 800a954:	e00a      	b.n	800a96c <pcb_new+0xbc>
      break;
 800a956:	bf00      	nop
 800a958:	e000      	b.n	800a95c <pcb_new+0xac>
      break;
 800a95a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d102      	bne.n	800a96c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	22ff      	movs	r2, #255	; 0xff
 800a96a:	711a      	strb	r2, [r3, #4]
  }
}
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd90      	pop	{r4, r7, pc}
 800a972:	bf00      	nop
 800a974:	08019e70 	.word	0x08019e70
 800a978:	0801a0b0 	.word	0x0801a0b0
 800a97c:	08019f10 	.word	0x08019f10
 800a980:	0800a335 	.word	0x0800a335

0800a984 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d102      	bne.n	800a9a6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7ff ff85 	bl	800a8b0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	6039      	str	r1, [r7, #0]
 800a9ba:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a9c0:	2007      	movs	r0, #7
 800a9c2:	f004 f847 	bl	800ea54 <memp_malloc>
 800a9c6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <netconn_alloc+0x22>
    return NULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e052      	b.n	800aa78 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	79fa      	ldrb	r2, [r7, #7]
 800a9dc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9ea:	2b10      	cmp	r3, #16
 800a9ec:	d004      	beq.n	800a9f8 <netconn_alloc+0x48>
 800a9ee:	2b20      	cmp	r3, #32
 800a9f0:	d105      	bne.n	800a9fe <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a9f2:	2306      	movs	r3, #6
 800a9f4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a9f6:	e00a      	b.n	800aa0e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a9f8:	2306      	movs	r3, #6
 800a9fa:	617b      	str	r3, [r7, #20]
      break;
 800a9fc:	e007      	b.n	800aa0e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a9fe:	4b20      	ldr	r3, [pc, #128]	; (800aa80 <netconn_alloc+0xd0>)
 800aa00:	f240 22e5 	movw	r2, #741	; 0x2e5
 800aa04:	491f      	ldr	r1, [pc, #124]	; (800aa84 <netconn_alloc+0xd4>)
 800aa06:	4820      	ldr	r0, [pc, #128]	; (800aa88 <netconn_alloc+0xd8>)
 800aa08:	f00c ffda 	bl	80179c0 <iprintf>
      goto free_and_return;
 800aa0c:	e02f      	b.n	800aa6e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3310      	adds	r3, #16
 800aa12:	6979      	ldr	r1, [r7, #20]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f005 fa9d 	bl	800ff54 <sys_mbox_new>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d125      	bne.n	800aa6c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	330c      	adds	r3, #12
 800aa24:	2100      	movs	r1, #0
 800aa26:	4618      	mov	r0, r3
 800aa28:	f005 fb40 	bl	80100ac <sys_sem_new>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3310      	adds	r3, #16
 800aa36:	4618      	mov	r0, r3
 800aa38:	f005 faa6 	bl	800ff88 <sys_mbox_free>
    goto free_and_return;
 800aa3c:	e017      	b.n	800aa6e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3314      	adds	r3, #20
 800aa42:	4618      	mov	r0, r3
 800aa44:	f005 fb25 	bl	8010092 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f04f 32ff 	mov.w	r2, #4294967295
 800aa54:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	7cfa      	ldrb	r2, [r7, #19]
 800aa66:	771a      	strb	r2, [r3, #28]
  return conn;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	e005      	b.n	800aa78 <netconn_alloc+0xc8>
    goto free_and_return;
 800aa6c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	2007      	movs	r0, #7
 800aa72:	f004 f865 	bl	800eb40 <memp_free>
  return NULL;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	08019e70 	.word	0x08019e70
 800aa84:	0801a0d0 	.word	0x0801a0d0
 800aa88:	08019f10 	.word	0x08019f10

0800aa8c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <netconn_free+0x1e>
 800aa9c:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <netconn_free+0x80>)
 800aa9e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800aaa2:	491b      	ldr	r1, [pc, #108]	; (800ab10 <netconn_free+0x84>)
 800aaa4:	481b      	ldr	r0, [pc, #108]	; (800ab14 <netconn_free+0x88>)
 800aaa6:	f00c ff8b 	bl	80179c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3310      	adds	r3, #16
 800aaae:	4618      	mov	r0, r3
 800aab0:	f005 fade 	bl	8010070 <sys_mbox_valid>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d006      	beq.n	800aac8 <netconn_free+0x3c>
 800aaba:	4b14      	ldr	r3, [pc, #80]	; (800ab0c <netconn_free+0x80>)
 800aabc:	f240 3223 	movw	r2, #803	; 0x323
 800aac0:	4915      	ldr	r1, [pc, #84]	; (800ab18 <netconn_free+0x8c>)
 800aac2:	4814      	ldr	r0, [pc, #80]	; (800ab14 <netconn_free+0x88>)
 800aac4:	f00c ff7c 	bl	80179c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	3314      	adds	r3, #20
 800aacc:	4618      	mov	r0, r3
 800aace:	f005 facf 	bl	8010070 <sys_mbox_valid>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d006      	beq.n	800aae6 <netconn_free+0x5a>
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <netconn_free+0x80>)
 800aada:	f240 3226 	movw	r2, #806	; 0x326
 800aade:	490f      	ldr	r1, [pc, #60]	; (800ab1c <netconn_free+0x90>)
 800aae0:	480c      	ldr	r0, [pc, #48]	; (800ab14 <netconn_free+0x88>)
 800aae2:	f00c ff6d 	bl	80179c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	330c      	adds	r3, #12
 800aaea:	4618      	mov	r0, r3
 800aaec:	f005 fb41 	bl	8010172 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f005 fb5a 	bl	80101ae <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	2007      	movs	r0, #7
 800aafe:	f004 f81f 	bl	800eb40 <memp_free>
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	08019e70 	.word	0x08019e70
 800ab10:	0801a0f8 	.word	0x0801a0f8
 800ab14:	08019f10 	.word	0x08019f10
 800ab18:	0801a128 	.word	0x0801a128
 800ab1c:	0801a164 	.word	0x0801a164

0800ab20 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3310      	adds	r3, #16
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f005 fa9f 	bl	8010070 <sys_mbox_valid>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d02f      	beq.n	800ab98 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ab38:	e018      	b.n	800ab6c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab42:	2b10      	cmp	r3, #16
 800ab44:	d10e      	bne.n	800ab64 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f107 020f 	add.w	r2, r7, #15
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fbb6 	bl	800a2c0 <lwip_netconn_is_err_msg>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d108      	bne.n	800ab6c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f004 febd 	bl	800f8dc <pbuf_free>
 800ab62:	e003      	b.n	800ab6c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f004 f814 	bl	800eb94 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3310      	adds	r3, #16
 800ab70:	f107 0210 	add.w	r2, r7, #16
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f005 fa63 	bl	8010042 <sys_arch_mbox_tryfetch>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab82:	d1da      	bne.n	800ab3a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3310      	adds	r3, #16
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f005 f9fd 	bl	800ff88 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3310      	adds	r3, #16
 800ab92:	4618      	mov	r0, r3
 800ab94:	f005 fa7d 	bl	8010092 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3314      	adds	r3, #20
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f005 fa67 	bl	8010070 <sys_mbox_valid>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d034      	beq.n	800ac12 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aba8:	e01d      	b.n	800abe6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f107 020e 	add.w	r2, r7, #14
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff fb84 	bl	800a2c0 <lwip_netconn_is_err_msg>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d113      	bne.n	800abe6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800abc2:	6978      	ldr	r0, [r7, #20]
 800abc4:	f7ff ffac 	bl	800ab20 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d007      	beq.n	800abe0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f005 fecf 	bl	8010978 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2200      	movs	r2, #0
 800abde:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800abe0:	6978      	ldr	r0, [r7, #20]
 800abe2:	f7ff ff53 	bl	800aa8c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3314      	adds	r3, #20
 800abea:	f107 0210 	add.w	r2, r7, #16
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f005 fa26 	bl	8010042 <sys_arch_mbox_tryfetch>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d1d5      	bne.n	800abaa <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3314      	adds	r3, #20
 800ac02:	4618      	mov	r0, r3
 800ac04:	f005 f9c0 	bl	800ff88 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3314      	adds	r3, #20
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f005 fa40 	bl	8010092 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ac12:	bf00      	nop
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <lwip_netconn_do_close_internal+0x24>
 800ac32:	4b87      	ldr	r3, [pc, #540]	; (800ae50 <lwip_netconn_do_close_internal+0x234>)
 800ac34:	f240 32a2 	movw	r2, #930	; 0x3a2
 800ac38:	4986      	ldr	r1, [pc, #536]	; (800ae54 <lwip_netconn_do_close_internal+0x238>)
 800ac3a:	4887      	ldr	r0, [pc, #540]	; (800ae58 <lwip_netconn_do_close_internal+0x23c>)
 800ac3c:	f00c fec0 	bl	80179c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac48:	2b10      	cmp	r3, #16
 800ac4a:	d006      	beq.n	800ac5a <lwip_netconn_do_close_internal+0x3e>
 800ac4c:	4b80      	ldr	r3, [pc, #512]	; (800ae50 <lwip_netconn_do_close_internal+0x234>)
 800ac4e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ac52:	4982      	ldr	r1, [pc, #520]	; (800ae5c <lwip_netconn_do_close_internal+0x240>)
 800ac54:	4880      	ldr	r0, [pc, #512]	; (800ae58 <lwip_netconn_do_close_internal+0x23c>)
 800ac56:	f00c feb3 	bl	80179c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d006      	beq.n	800ac70 <lwip_netconn_do_close_internal+0x54>
 800ac62:	4b7b      	ldr	r3, [pc, #492]	; (800ae50 <lwip_netconn_do_close_internal+0x234>)
 800ac64:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ac68:	497d      	ldr	r1, [pc, #500]	; (800ae60 <lwip_netconn_do_close_internal+0x244>)
 800ac6a:	487b      	ldr	r0, [pc, #492]	; (800ae58 <lwip_netconn_do_close_internal+0x23c>)
 800ac6c:	f00c fea8 	bl	80179c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d106      	bne.n	800ac86 <lwip_netconn_do_close_internal+0x6a>
 800ac78:	4b75      	ldr	r3, [pc, #468]	; (800ae50 <lwip_netconn_do_close_internal+0x234>)
 800ac7a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ac7e:	4979      	ldr	r1, [pc, #484]	; (800ae64 <lwip_netconn_do_close_internal+0x248>)
 800ac80:	4875      	ldr	r0, [pc, #468]	; (800ae58 <lwip_netconn_do_close_internal+0x23c>)
 800ac82:	f00c fe9d 	bl	80179c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d106      	bne.n	800ac9c <lwip_netconn_do_close_internal+0x80>
 800ac8e:	4b70      	ldr	r3, [pc, #448]	; (800ae50 <lwip_netconn_do_close_internal+0x234>)
 800ac90:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ac94:	4974      	ldr	r1, [pc, #464]	; (800ae68 <lwip_netconn_do_close_internal+0x24c>)
 800ac96:	4870      	ldr	r0, [pc, #448]	; (800ae58 <lwip_netconn_do_close_internal+0x23c>)
 800ac98:	f00c fe92 	bl	80179c0 <iprintf>

  tpcb = conn->pcb.tcp;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	7a1b      	ldrb	r3, [r3, #8]
 800aca8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	2b03      	cmp	r3, #3
 800acbe:	d102      	bne.n	800acc6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800acc0:	2301      	movs	r3, #1
 800acc2:	75bb      	strb	r3, [r7, #22]
 800acc4:	e01f      	b.n	800ad06 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00e      	beq.n	800acea <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800acd0:	2b05      	cmp	r3, #5
 800acd2:	d007      	beq.n	800ace4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800acd8:	2b06      	cmp	r3, #6
 800acda:	d003      	beq.n	800ace4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d102      	bne.n	800acea <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ace4:	2301      	movs	r3, #1
 800ace6:	75bb      	strb	r3, [r7, #22]
 800ace8:	e00d      	b.n	800ad06 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800acea:	7b7b      	ldrb	r3, [r7, #13]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <lwip_netconn_do_close_internal+0xe6>
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	8b5b      	ldrh	r3, [r3, #26]
 800acf4:	f003 0310 	and.w	r3, r3, #16
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800acfc:	2301      	movs	r3, #1
 800acfe:	75bb      	strb	r3, [r7, #22]
 800ad00:	e001      	b.n	800ad06 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ad06:	7dbb      	ldrb	r3, [r7, #22]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f006 ff1a 	bl	8011b48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	7d1b      	ldrb	r3, [r3, #20]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d104      	bne.n	800ad26 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	6938      	ldr	r0, [r7, #16]
 800ad20:	f006 ff90 	bl	8011c44 <tcp_accept>
 800ad24:	e01d      	b.n	800ad62 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d007      	beq.n	800ad3c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	6938      	ldr	r0, [r7, #16]
 800ad30:	f006 ff1c 	bl	8011b6c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ad34:	2100      	movs	r1, #0
 800ad36:	6938      	ldr	r0, [r7, #16]
 800ad38:	f006 ff84 	bl	8011c44 <tcp_accept>
    }
    if (shut_tx) {
 800ad3c:	7b7b      	ldrb	r3, [r7, #13]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ad42:	2100      	movs	r1, #0
 800ad44:	6938      	ldr	r0, [r7, #16]
 800ad46:	f006 ff35 	bl	8011bb4 <tcp_sent>
    }
    if (shut_close) {
 800ad4a:	7dbb      	ldrb	r3, [r7, #22]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d008      	beq.n	800ad62 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ad50:	2200      	movs	r2, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	6938      	ldr	r0, [r7, #16]
 800ad56:	f006 ff8d 	bl	8011c74 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	6938      	ldr	r0, [r7, #16]
 800ad5e:	f006 ff4d 	bl	8011bfc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ad62:	7dbb      	ldrb	r3, [r7, #22]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d005      	beq.n	800ad74 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ad68:	6938      	ldr	r0, [r7, #16]
 800ad6a:	f005 fcb9 	bl	80106e0 <tcp_close>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	75fb      	strb	r3, [r7, #23]
 800ad72:	e007      	b.n	800ad84 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	7b7a      	ldrb	r2, [r7, #13]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6938      	ldr	r0, [r7, #16]
 800ad7c:	f005 fcde 	bl	801073c <tcp_shutdown>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ad84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	757b      	strb	r3, [r7, #21]
 800ad90:	e016      	b.n	800adc0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ad92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d10f      	bne.n	800adbc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	7a5b      	ldrb	r3, [r3, #9]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10c      	bne.n	800adc0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ada6:	2301      	movs	r3, #1
 800ada8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800adaa:	7dbb      	ldrb	r3, [r7, #22]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d007      	beq.n	800adc0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800adb0:	6938      	ldr	r0, [r7, #16]
 800adb2:	f005 fde1 	bl	8010978 <tcp_abort>
          err = ERR_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	75fb      	strb	r3, [r7, #23]
 800adba:	e001      	b.n	800adc0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800adbc:	2301      	movs	r3, #1
 800adbe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800adc0:	7d7b      	ldrb	r3, [r7, #21]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d052      	beq.n	800ae6c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	330c      	adds	r3, #12
 800adce:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	7dfa      	ldrb	r2, [r7, #23]
 800add6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ade4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d129      	bne.n	800ae40 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800adec:	7dbb      	ldrb	r3, [r7, #22]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00c      	beq.n	800ae0c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <lwip_netconn_do_close_internal+0x1f0>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2200      	movs	r2, #0
 800ae06:	2104      	movs	r1, #4
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	4798      	blx	r3
      }
      if (shut_rx) {
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d009      	beq.n	800ae26 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d005      	beq.n	800ae26 <lwip_netconn_do_close_internal+0x20a>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2100      	movs	r1, #0
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	4798      	blx	r3
      }
      if (shut_tx) {
 800ae26:	7b7b      	ldrb	r3, [r7, #13]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d009      	beq.n	800ae40 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <lwip_netconn_do_close_internal+0x224>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2102      	movs	r1, #2
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ae46:	68b8      	ldr	r0, [r7, #8]
 800ae48:	f005 f986 	bl	8010158 <sys_sem_signal>
    }
    return ERR_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	e03c      	b.n	800aeca <lwip_netconn_do_close_internal+0x2ae>
 800ae50:	08019e70 	.word	0x08019e70
 800ae54:	0801a1a0 	.word	0x0801a1a0
 800ae58:	08019f10 	.word	0x08019f10
 800ae5c:	0801a1b0 	.word	0x0801a1b0
 800ae60:	0801a1d0 	.word	0x0801a1d0
 800ae64:	0801a1f4 	.word	0x0801a1f4
 800ae68:	0801a034 	.word	0x0801a034
  }
  if (!close_finished) {
 800ae6c:	7d7b      	ldrb	r3, [r7, #21]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d11e      	bne.n	800aeb0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	7d1b      	ldrb	r3, [r3, #20]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d106      	bne.n	800ae88 <lwip_netconn_do_close_internal+0x26c>
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <lwip_netconn_do_close_internal+0x2b8>)
 800ae7c:	f240 4241 	movw	r2, #1089	; 0x441
 800ae80:	4915      	ldr	r1, [pc, #84]	; (800aed8 <lwip_netconn_do_close_internal+0x2bc>)
 800ae82:	4816      	ldr	r0, [pc, #88]	; (800aedc <lwip_netconn_do_close_internal+0x2c0>)
 800ae84:	f00c fd9c 	bl	80179c0 <iprintf>
    if (shut_tx) {
 800ae88:	7b7b      	ldrb	r3, [r7, #13]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800ae8e:	4914      	ldr	r1, [pc, #80]	; (800aee0 <lwip_netconn_do_close_internal+0x2c4>)
 800ae90:	6938      	ldr	r0, [r7, #16]
 800ae92:	f006 fe8f 	bl	8011bb4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ae96:	2201      	movs	r2, #1
 800ae98:	4912      	ldr	r1, [pc, #72]	; (800aee4 <lwip_netconn_do_close_internal+0x2c8>)
 800ae9a:	6938      	ldr	r0, [r7, #16]
 800ae9c:	f006 feea 	bl	8011c74 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800aea0:	4911      	ldr	r1, [pc, #68]	; (800aee8 <lwip_netconn_do_close_internal+0x2cc>)
 800aea2:	6938      	ldr	r0, [r7, #16]
 800aea4:	f006 feaa 	bl	8011bfc <tcp_err>
    tcp_arg(tpcb, conn);
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	6938      	ldr	r0, [r7, #16]
 800aeac:	f006 fe4c 	bl	8011b48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800aeb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <lwip_netconn_do_close_internal+0x2aa>
 800aeb8:	4b06      	ldr	r3, [pc, #24]	; (800aed4 <lwip_netconn_do_close_internal+0x2b8>)
 800aeba:	f240 424d 	movw	r2, #1101	; 0x44d
 800aebe:	490b      	ldr	r1, [pc, #44]	; (800aeec <lwip_netconn_do_close_internal+0x2d0>)
 800aec0:	4806      	ldr	r0, [pc, #24]	; (800aedc <lwip_netconn_do_close_internal+0x2c0>)
 800aec2:	f00c fd7d 	bl	80179c0 <iprintf>
  return err;
 800aec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	08019e70 	.word	0x08019e70
 800aed8:	0801a208 	.word	0x0801a208
 800aedc:	08019f10 	.word	0x08019f10
 800aee0:	0800a609 	.word	0x0800a609
 800aee4:	0800a53d 	.word	0x0800a53d
 800aee8:	0800a6b5 	.word	0x0800a6b5
 800aeec:	0801a22c 	.word	0x0801a22c

0800aef0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00d      	beq.n	800af26 <lwip_netconn_do_delconn+0x36>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af14:	2b10      	cmp	r3, #16
 800af16:	d006      	beq.n	800af26 <lwip_netconn_do_delconn+0x36>
 800af18:	4b5f      	ldr	r3, [pc, #380]	; (800b098 <lwip_netconn_do_delconn+0x1a8>)
 800af1a:	f240 425e 	movw	r2, #1118	; 0x45e
 800af1e:	495f      	ldr	r1, [pc, #380]	; (800b09c <lwip_netconn_do_delconn+0x1ac>)
 800af20:	485f      	ldr	r0, [pc, #380]	; (800b0a0 <lwip_netconn_do_delconn+0x1b0>)
 800af22:	f00c fd4d 	bl	80179c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d005      	beq.n	800af38 <lwip_netconn_do_delconn+0x48>
 800af2c:	7afb      	ldrb	r3, [r7, #11]
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d002      	beq.n	800af38 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d109      	bne.n	800af4c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800af38:	7afb      	ldrb	r3, [r7, #11]
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d10a      	bne.n	800af54 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	7f1b      	ldrb	r3, [r3, #28]
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d103      	bne.n	800af54 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	22fb      	movs	r2, #251	; 0xfb
 800af50:	711a      	strb	r2, [r3, #4]
 800af52:	e095      	b.n	800b080 <lwip_netconn_do_delconn+0x190>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	2b03      	cmp	r3, #3
 800af58:	d10d      	bne.n	800af76 <lwip_netconn_do_delconn+0x86>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	7f1b      	ldrb	r3, [r3, #28]
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b00      	cmp	r3, #0
 800af66:	d106      	bne.n	800af76 <lwip_netconn_do_delconn+0x86>
 800af68:	4b4b      	ldr	r3, [pc, #300]	; (800b098 <lwip_netconn_do_delconn+0x1a8>)
 800af6a:	f240 427a 	movw	r2, #1146	; 0x47a
 800af6e:	494d      	ldr	r1, [pc, #308]	; (800b0a4 <lwip_netconn_do_delconn+0x1b4>)
 800af70:	484b      	ldr	r0, [pc, #300]	; (800b0a0 <lwip_netconn_do_delconn+0x1b0>)
 800af72:	f00c fd25 	bl	80179c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff fdcd 	bl	800ab20 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d05d      	beq.n	800b04c <lwip_netconn_do_delconn+0x15c>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af9a:	2b10      	cmp	r3, #16
 800af9c:	d00d      	beq.n	800afba <lwip_netconn_do_delconn+0xca>
 800af9e:	2b20      	cmp	r3, #32
 800afa0:	d14f      	bne.n	800b042 <lwip_netconn_do_delconn+0x152>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f00c fa76 	bl	80174a4 <udp_remove>
          break;
 800afb8:	e044      	b.n	800b044 <lwip_netconn_do_delconn+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d006      	beq.n	800afd2 <lwip_netconn_do_delconn+0xe2>
 800afc4:	4b34      	ldr	r3, [pc, #208]	; (800b098 <lwip_netconn_do_delconn+0x1a8>)
 800afc6:	f240 4294 	movw	r2, #1172	; 0x494
 800afca:	4937      	ldr	r1, [pc, #220]	; (800b0a8 <lwip_netconn_do_delconn+0x1b8>)
 800afcc:	4834      	ldr	r0, [pc, #208]	; (800b0a0 <lwip_netconn_do_delconn+0x1b0>)
 800afce:	f00c fcf7 	bl	80179c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2204      	movs	r2, #4
 800afd8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2203      	movs	r2, #3
 800afde:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2100      	movs	r1, #0
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff fe14 	bl	800ac1c <lwip_netconn_do_close_internal>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d049      	beq.n	800b08e <lwip_netconn_do_delconn+0x19e>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	785b      	ldrb	r3, [r3, #1]
 800b000:	2b04      	cmp	r3, #4
 800b002:	d006      	beq.n	800b012 <lwip_netconn_do_delconn+0x122>
 800b004:	4b24      	ldr	r3, [pc, #144]	; (800b098 <lwip_netconn_do_delconn+0x1a8>)
 800b006:	f240 429a 	movw	r2, #1178	; 0x49a
 800b00a:	4928      	ldr	r1, [pc, #160]	; (800b0ac <lwip_netconn_do_delconn+0x1bc>)
 800b00c:	4824      	ldr	r0, [pc, #144]	; (800b0a0 <lwip_netconn_do_delconn+0x1b0>)
 800b00e:	f00c fcd7 	bl	80179c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b012:	f7fa fe29 	bl	8005c68 <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	330c      	adds	r3, #12
 800b01c:	2100      	movs	r1, #0
 800b01e:	4618      	mov	r0, r3
 800b020:	f005 f869 	bl	80100f6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b024:	f7fa fe10 	bl	8005c48 <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d02d      	beq.n	800b08e <lwip_netconn_do_delconn+0x19e>
 800b032:	4b19      	ldr	r3, [pc, #100]	; (800b098 <lwip_netconn_do_delconn+0x1a8>)
 800b034:	f240 429e 	movw	r2, #1182	; 0x49e
 800b038:	491c      	ldr	r1, [pc, #112]	; (800b0ac <lwip_netconn_do_delconn+0x1bc>)
 800b03a:	4819      	ldr	r0, [pc, #100]	; (800b0a0 <lwip_netconn_do_delconn+0x1b0>)
 800b03c:	f00c fcc0 	bl	80179c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b040:	e025      	b.n	800b08e <lwip_netconn_do_delconn+0x19e>
#endif /* LWIP_TCP */
        default:
          break;
 800b042:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2200      	movs	r2, #0
 800b04a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	2b00      	cmp	r3, #0
 800b054:	d007      	beq.n	800b066 <lwip_netconn_do_delconn+0x176>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	6810      	ldr	r0, [r2, #0]
 800b060:	2200      	movs	r2, #0
 800b062:	2100      	movs	r1, #0
 800b064:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d007      	beq.n	800b080 <lwip_netconn_do_delconn+0x190>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	6810      	ldr	r0, [r2, #0]
 800b07a:	2200      	movs	r2, #0
 800b07c:	2102      	movs	r1, #2
 800b07e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	330c      	adds	r3, #12
 800b086:	4618      	mov	r0, r3
 800b088:	f005 f880 	bl	801018c <sys_sem_valid>
 800b08c:	e000      	b.n	800b090 <lwip_netconn_do_delconn+0x1a0>
          return;
 800b08e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	08019e70 	.word	0x08019e70
 800b09c:	0801a23c 	.word	0x0801a23c
 800b0a0:	08019f10 	.word	0x08019f10
 800b0a4:	0801a250 	.word	0x0801a250
 800b0a8:	0801a270 	.word	0x0801a270
 800b0ac:	0801a28c 	.word	0x0801a28c

0800b0b0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d025      	beq.n	800b112 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d00e      	beq.n	800b0f2 <lwip_netconn_do_bind+0x42>
 800b0d4:	2b20      	cmp	r3, #32
 800b0d6:	d119      	bne.n	800b10c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6858      	ldr	r0, [r3, #4]
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	6899      	ldr	r1, [r3, #8]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	899b      	ldrh	r3, [r3, #12]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f00c f8c0 	bl	801726c <udp_bind>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]
        break;
 800b0f0:	e011      	b.n	800b116 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6858      	ldr	r0, [r3, #4]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	6899      	ldr	r1, [r3, #8]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	899b      	ldrh	r3, [r3, #12]
 800b100:	461a      	mov	r2, r3
 800b102:	f005 fc45 	bl	8010990 <tcp_bind>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]
        break;
 800b10a:	e004      	b.n	800b116 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b10c:	23fa      	movs	r3, #250	; 0xfa
 800b10e:	73fb      	strb	r3, [r7, #15]
        break;
 800b110:	e001      	b.n	800b116 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b112:	23fa      	movs	r3, #250	; 0xfa
 800b114:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	7bfa      	ldrb	r2, [r7, #15]
 800b11a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b11c:	bf00      	nop
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b088      	sub	sp, #32
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	4613      	mov	r3, r2
 800b130:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800b140:	f06f 0305 	mvn.w	r3, #5
 800b144:	e070      	b.n	800b228 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	785b      	ldrb	r3, [r3, #1]
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d006      	beq.n	800b15c <lwip_netconn_do_connected+0x38>
 800b14e:	4b38      	ldr	r3, [pc, #224]	; (800b230 <lwip_netconn_do_connected+0x10c>)
 800b150:	f240 5223 	movw	r2, #1315	; 0x523
 800b154:	4937      	ldr	r1, [pc, #220]	; (800b234 <lwip_netconn_do_connected+0x110>)
 800b156:	4838      	ldr	r0, [pc, #224]	; (800b238 <lwip_netconn_do_connected+0x114>)
 800b158:	f00c fc32 	bl	80179c0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10c      	bne.n	800b17e <lwip_netconn_do_connected+0x5a>
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	7f1b      	ldrb	r3, [r3, #28]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <lwip_netconn_do_connected+0x5a>
 800b170:	4b2f      	ldr	r3, [pc, #188]	; (800b230 <lwip_netconn_do_connected+0x10c>)
 800b172:	f240 5224 	movw	r2, #1316	; 0x524
 800b176:	4931      	ldr	r1, [pc, #196]	; (800b23c <lwip_netconn_do_connected+0x118>)
 800b178:	482f      	ldr	r0, [pc, #188]	; (800b238 <lwip_netconn_do_connected+0x114>)
 800b17a:	f00c fc21 	bl	80179c0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d008      	beq.n	800b198 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	79fa      	ldrb	r2, [r7, #7]
 800b18c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	330c      	adds	r3, #12
 800b196:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1a0:	2b10      	cmp	r3, #16
 800b1a2:	d106      	bne.n	800b1b2 <lwip_netconn_do_connected+0x8e>
 800b1a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800b1ac:	69b8      	ldr	r0, [r7, #24]
 800b1ae:	f7ff fb57 	bl	800a860 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	7f1b      	ldrb	r3, [r3, #28]
 800b1b6:	f003 0304 	and.w	r3, r3, #4
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bf0c      	ite	eq
 800b1be:	2301      	moveq	r3, #1
 800b1c0:	2300      	movne	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	7f1b      	ldrb	r3, [r3, #28]
 800b1ca:	f023 0304 	bic.w	r3, r3, #4
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <lwip_netconn_do_connected+0xbc>
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10c      	bne.n	800b1fa <lwip_netconn_do_connected+0xd6>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <lwip_netconn_do_connected+0xc8>
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d006      	beq.n	800b1fa <lwip_netconn_do_connected+0xd6>
 800b1ec:	4b10      	ldr	r3, [pc, #64]	; (800b230 <lwip_netconn_do_connected+0x10c>)
 800b1ee:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800b1f2:	4913      	ldr	r1, [pc, #76]	; (800b240 <lwip_netconn_do_connected+0x11c>)
 800b1f4:	4810      	ldr	r0, [pc, #64]	; (800b238 <lwip_netconn_do_connected+0x114>)
 800b1f6:	f00c fbe3 	bl	80179c0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2200      	movs	r2, #0
 800b204:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d005      	beq.n	800b21a <lwip_netconn_do_connected+0xf6>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2200      	movs	r2, #0
 800b214:	2102      	movs	r1, #2
 800b216:	69b8      	ldr	r0, [r7, #24]
 800b218:	4798      	blx	r3

  if (was_blocking) {
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800b220:	69f8      	ldr	r0, [r7, #28]
 800b222:	f004 ff99 	bl	8010158 <sys_sem_signal>
  }
  return ERR_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	08019e70 	.word	0x08019e70
 800b234:	0801a294 	.word	0x0801a294
 800b238:	08019f10 	.word	0x08019f10
 800b23c:	0801a2b4 	.word	0x0801a2b4
 800b240:	0801a2f4 	.word	0x0801a2f4

0800b244 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d102      	bne.n	800b260 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800b25a:	23f1      	movs	r3, #241	; 0xf1
 800b25c:	75fb      	strb	r3, [r7, #23]
 800b25e:	e099      	b.n	800b394 <lwip_netconn_do_connect+0x150>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b26a:	2b10      	cmp	r3, #16
 800b26c:	d00f      	beq.n	800b28e <lwip_netconn_do_connect+0x4a>
 800b26e:	2b20      	cmp	r3, #32
 800b270:	f040 8085 	bne.w	800b37e <lwip_netconn_do_connect+0x13a>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6858      	ldr	r0, [r3, #4]
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	6899      	ldr	r1, [r3, #8]
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	899b      	ldrh	r3, [r3, #12]
 800b282:	461a      	mov	r2, r3
 800b284:	f00c f87c 	bl	8017380 <udp_connect>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
        break;
 800b28c:	e082      	b.n	800b394 <lwip_netconn_do_connect+0x150>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b03      	cmp	r3, #3
 800b296:	d102      	bne.n	800b29e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800b298:	23f7      	movs	r3, #247	; 0xf7
 800b29a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800b29c:	e079      	b.n	800b392 <lwip_netconn_do_connect+0x14e>
        } else if (msg->conn->state != NETCONN_NONE) {
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800b2a8:	23f6      	movs	r3, #246	; 0xf6
 800b2aa:	75fb      	strb	r3, [r7, #23]
        break;
 800b2ac:	e071      	b.n	800b392 <lwip_netconn_do_connect+0x14e>
          setup_tcp(msg->conn);
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7ff fad4 	bl	800a860 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6858      	ldr	r0, [r3, #4]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	6899      	ldr	r1, [r3, #8]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	899a      	ldrh	r2, [r3, #12]
 800b2c6:	4b37      	ldr	r3, [pc, #220]	; (800b3a4 <lwip_netconn_do_connect+0x160>)
 800b2c8:	f005 fcf0 	bl	8010cac <tcp_connect>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800b2d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d15c      	bne.n	800b392 <lwip_netconn_do_connect+0x14e>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	7f1b      	ldrb	r3, [r3, #28]
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bf14      	ite	ne
 800b2e6:	2301      	movne	r3, #1
 800b2e8:	2300      	moveq	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <lwip_netconn_do_connect+0xcc>
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	7f1a      	ldrb	r2, [r3, #28]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0204 	orr.w	r2, r2, #4
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	771a      	strb	r2, [r3, #28]
 800b30e:	e008      	b.n	800b322 <lwip_netconn_do_connect+0xde>
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	7f1a      	ldrb	r2, [r3, #28]
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f022 0204 	bic.w	r2, r2, #4
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800b328:	23fb      	movs	r3, #251	; 0xfb
 800b32a:	75fb      	strb	r3, [r7, #23]
        break;
 800b32c:	e031      	b.n	800b392 <lwip_netconn_do_connect+0x14e>
              msg->conn->current_msg = msg;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	785b      	ldrb	r3, [r3, #1]
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d006      	beq.n	800b34e <lwip_netconn_do_connect+0x10a>
 800b340:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <lwip_netconn_do_connect+0x164>)
 800b342:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b346:	4919      	ldr	r1, [pc, #100]	; (800b3ac <lwip_netconn_do_connect+0x168>)
 800b348:	4819      	ldr	r0, [pc, #100]	; (800b3b0 <lwip_netconn_do_connect+0x16c>)
 800b34a:	f00c fb39 	bl	80179c0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800b34e:	f7fa fc8b 	bl	8005c68 <sys_unlock_tcpip_core>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	330c      	adds	r3, #12
 800b358:	2100      	movs	r1, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f004 fecb 	bl	80100f6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b360:	f7fa fc72 	bl	8005c48 <sys_lock_tcpip_core>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	2b03      	cmp	r3, #3
 800b36c:	d116      	bne.n	800b39c <lwip_netconn_do_connect+0x158>
 800b36e:	4b0e      	ldr	r3, [pc, #56]	; (800b3a8 <lwip_netconn_do_connect+0x164>)
 800b370:	f240 5274 	movw	r2, #1396	; 0x574
 800b374:	490d      	ldr	r1, [pc, #52]	; (800b3ac <lwip_netconn_do_connect+0x168>)
 800b376:	480e      	ldr	r0, [pc, #56]	; (800b3b0 <lwip_netconn_do_connect+0x16c>)
 800b378:	f00c fb22 	bl	80179c0 <iprintf>
              return;
 800b37c:	e00e      	b.n	800b39c <lwip_netconn_do_connect+0x158>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b37e:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <lwip_netconn_do_connect+0x164>)
 800b380:	f240 527d 	movw	r2, #1405	; 0x57d
 800b384:	490b      	ldr	r1, [pc, #44]	; (800b3b4 <lwip_netconn_do_connect+0x170>)
 800b386:	480a      	ldr	r0, [pc, #40]	; (800b3b0 <lwip_netconn_do_connect+0x16c>)
 800b388:	f00c fb1a 	bl	80179c0 <iprintf>
 800b38c:	23fa      	movs	r3, #250	; 0xfa
 800b38e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b390:	e000      	b.n	800b394 <lwip_netconn_do_connect+0x150>
        break;
 800b392:	bf00      	nop
    }
  }
  msg->err = err;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	7dfa      	ldrb	r2, [r7, #23]
 800b398:	711a      	strb	r2, [r3, #4]
 800b39a:	e000      	b.n	800b39e <lwip_netconn_do_connect+0x15a>
              return;
 800b39c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	0800b125 	.word	0x0800b125
 800b3a8:	08019e70 	.word	0x08019e70
 800b3ac:	0801a28c 	.word	0x0801a28c
 800b3b0:	08019f10 	.word	0x08019f10
 800b3b4:	0801a314 	.word	0x0801a314

0800b3b8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fe ff27 	bl	800a21c <netconn_err>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d134      	bne.n	800b444 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d02d      	beq.n	800b440 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3ee:	2b20      	cmp	r3, #32
 800b3f0:	d123      	bne.n	800b43a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10c      	bne.n	800b416 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4619      	mov	r1, r3
 800b40a:	4610      	mov	r0, r2
 800b40c:	f00b fd42 	bl	8016e94 <udp_send>
 800b410:	4603      	mov	r3, r0
 800b412:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b414:	e016      	b.n	800b444 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6858      	ldr	r0, [r3, #4]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	6819      	ldr	r1, [r3, #0]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f103 0208 	add.w	r2, r3, #8
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	899b      	ldrh	r3, [r3, #12]
 800b430:	f00b fd64 	bl	8016efc <udp_sendto>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]
          break;
 800b438:	e004      	b.n	800b444 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b43a:	23f5      	movs	r3, #245	; 0xf5
 800b43c:	73fb      	strb	r3, [r7, #15]
          break;
 800b43e:	e001      	b.n	800b444 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b440:	23f5      	movs	r3, #245	; 0xf5
 800b442:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	7bfa      	ldrb	r2, [r7, #15]
 800b448:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b44a:	bf00      	nop
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	2200      	movs	r2, #0
 800b462:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d022      	beq.n	800b4b4 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b478:	2b10      	cmp	r3, #16
 800b47a:	d11b      	bne.n	800b4b4 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b488:	d202      	bcs.n	800b490 <lwip_netconn_do_recv+0x3e>
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	e001      	b.n	800b494 <lwip_netconn_do_recv+0x42>
 800b490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b494:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	89fa      	ldrh	r2, [r7, #14]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f005 fb69 	bl	8010b78 <tcp_recved>
        remaining -= recved;
 800b4a6:	89fb      	ldrh	r3, [r7, #14]
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e6      	bne.n	800b482 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d106      	bne.n	800b4e0 <lwip_netconn_do_writemore+0x24>
 800b4d2:	4b96      	ldr	r3, [pc, #600]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b4d4:	f240 6273 	movw	r2, #1651	; 0x673
 800b4d8:	4995      	ldr	r1, [pc, #596]	; (800b730 <lwip_netconn_do_writemore+0x274>)
 800b4da:	4896      	ldr	r0, [pc, #600]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b4dc:	f00c fa70 	bl	80179c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d006      	beq.n	800b4f6 <lwip_netconn_do_writemore+0x3a>
 800b4e8:	4b90      	ldr	r3, [pc, #576]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b4ea:	f240 6274 	movw	r2, #1652	; 0x674
 800b4ee:	4992      	ldr	r1, [pc, #584]	; (800b738 <lwip_netconn_do_writemore+0x27c>)
 800b4f0:	4890      	ldr	r0, [pc, #576]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b4f2:	f00c fa65 	bl	80179c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d106      	bne.n	800b50c <lwip_netconn_do_writemore+0x50>
 800b4fe:	4b8b      	ldr	r3, [pc, #556]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b500:	f240 6275 	movw	r2, #1653	; 0x675
 800b504:	498d      	ldr	r1, [pc, #564]	; (800b73c <lwip_netconn_do_writemore+0x280>)
 800b506:	488b      	ldr	r0, [pc, #556]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b508:	f00c fa5a 	bl	80179c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <lwip_netconn_do_writemore+0x66>
 800b514:	4b85      	ldr	r3, [pc, #532]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b516:	f240 6276 	movw	r2, #1654	; 0x676
 800b51a:	4989      	ldr	r1, [pc, #548]	; (800b740 <lwip_netconn_do_writemore+0x284>)
 800b51c:	4885      	ldr	r0, [pc, #532]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b51e:	f00c fa4f 	bl	80179c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	699a      	ldr	r2, [r3, #24]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d306      	bcc.n	800b540 <lwip_netconn_do_writemore+0x84>
 800b532:	4b7e      	ldr	r3, [pc, #504]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b534:	f240 6277 	movw	r2, #1655	; 0x677
 800b538:	4982      	ldr	r1, [pc, #520]	; (800b744 <lwip_netconn_do_writemore+0x288>)
 800b53a:	487e      	ldr	r0, [pc, #504]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b53c:	f00c fa40 	bl	80179c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	899b      	ldrh	r3, [r3, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <lwip_netconn_do_writemore+0x9c>
 800b54a:	4b78      	ldr	r3, [pc, #480]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b54c:	f240 6279 	movw	r2, #1657	; 0x679
 800b550:	497d      	ldr	r1, [pc, #500]	; (800b748 <lwip_netconn_do_writemore+0x28c>)
 800b552:	4878      	ldr	r0, [pc, #480]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b554:	f00c fa34 	bl	80179c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a1b      	ldr	r3, [r3, #32]
 800b55c:	7f1b      	ldrb	r3, [r3, #28]
 800b55e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	7f1b      	ldrb	r3, [r3, #28]
 800b564:	f003 0302 	and.w	r3, r3, #2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d104      	bne.n	800b576 <lwip_netconn_do_writemore+0xba>
 800b56c:	7ebb      	ldrb	r3, [r7, #26]
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <lwip_netconn_do_writemore+0xbe>
 800b576:	2301      	movs	r3, #1
 800b578:	e000      	b.n	800b57c <lwip_netconn_do_writemore+0xc0>
 800b57a:	2300      	movs	r3, #0
 800b57c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	4413      	add	r3, r2
 800b58e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a1b      	ldr	r3, [r3, #32]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a1b      	ldr	r3, [r3, #32]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a8:	d307      	bcc.n	800b5ba <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b5aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5ae:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b5b0:	7ebb      	ldrb	r3, [r7, #26]
 800b5b2:	f043 0302 	orr.w	r3, r3, #2
 800b5b6:	76bb      	strb	r3, [r7, #26]
 800b5b8:	e001      	b.n	800b5be <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b5c6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b5c8:	89fa      	ldrh	r2, [r7, #14]
 800b5ca:	8bbb      	ldrh	r3, [r7, #28]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d216      	bcs.n	800b5fe <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b5d0:	89fb      	ldrh	r3, [r7, #14]
 800b5d2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b5d4:	7e3b      	ldrb	r3, [r7, #24]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00d      	beq.n	800b5f6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b5da:	8bbb      	ldrh	r3, [r7, #28]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10e      	bne.n	800b5fe <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a1b      	ldr	r3, [r3, #32]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d102      	bne.n	800b5f0 <lwip_netconn_do_writemore+0x134>
 800b5ea:	f06f 0306 	mvn.w	r3, #6
 800b5ee:	e000      	b.n	800b5f2 <lwip_netconn_do_writemore+0x136>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b5f4:	e07d      	b.n	800b6f2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b5f6:	7ebb      	ldrb	r3, [r7, #26]
 800b5f8:	f043 0302 	orr.w	r3, r3, #2
 800b5fc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	8bbb      	ldrh	r3, [r7, #28]
 800b606:	441a      	add	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d906      	bls.n	800b622 <lwip_netconn_do_writemore+0x166>
 800b614:	4b45      	ldr	r3, [pc, #276]	; (800b72c <lwip_netconn_do_writemore+0x270>)
 800b616:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b61a:	494c      	ldr	r1, [pc, #304]	; (800b74c <lwip_netconn_do_writemore+0x290>)
 800b61c:	4845      	ldr	r0, [pc, #276]	; (800b734 <lwip_netconn_do_writemore+0x278>)
 800b61e:	f00c f9cf 	bl	80179c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b622:	8bbb      	ldrh	r3, [r7, #28]
 800b624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b628:	4293      	cmp	r3, r2
 800b62a:	d103      	bne.n	800b634 <lwip_netconn_do_writemore+0x178>
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b632:	d209      	bcs.n	800b648 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b638:	8bba      	ldrh	r2, [r7, #28]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d10b      	bne.n	800b656 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	899b      	ldrh	r3, [r3, #12]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d906      	bls.n	800b656 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b648:	2301      	movs	r3, #1
 800b64a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b64c:	7ebb      	ldrb	r3, [r7, #26]
 800b64e:	f043 0302 	orr.w	r3, r3, #2
 800b652:	76bb      	strb	r3, [r7, #26]
 800b654:	e001      	b.n	800b65a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6858      	ldr	r0, [r3, #4]
 800b65e:	7ebb      	ldrb	r3, [r7, #26]
 800b660:	8bba      	ldrh	r2, [r7, #28]
 800b662:	6979      	ldr	r1, [r7, #20]
 800b664:	f009 f9bc 	bl	80149e0 <tcp_write>
 800b668:	4603      	mov	r3, r0
 800b66a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b66c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d12c      	bne.n	800b6ce <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a1b      	ldr	r3, [r3, #32]
 800b678:	6999      	ldr	r1, [r3, #24]
 800b67a:	8bba      	ldrh	r2, [r7, #28]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	440a      	add	r2, r1
 800b682:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a1b      	ldr	r3, [r3, #32]
 800b688:	6919      	ldr	r1, [r3, #16]
 800b68a:	8bba      	ldrh	r2, [r7, #28]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	440a      	add	r2, r1
 800b692:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d113      	bne.n	800b6ce <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	899a      	ldrh	r2, [r3, #12]
 800b6ac:	3a01      	subs	r2, #1
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	899b      	ldrh	r3, [r3, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	3208      	adds	r2, #8
 800b6c4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b6ce:	7e7b      	ldrb	r3, [r7, #25]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d004      	beq.n	800b6de <lwip_netconn_do_writemore+0x222>
 800b6d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f43f af50 	beq.w	800b57e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b6de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d004      	beq.n	800b6f0 <lwip_netconn_do_writemore+0x234>
 800b6e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ee:	d147      	bne.n	800b780 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800b6f0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b6f2:	7e3b      	ldrb	r3, [r7, #24]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d02b      	beq.n	800b750 <lwip_netconn_do_writemore+0x294>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	699a      	ldr	r2, [r3, #24]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	429a      	cmp	r2, r3
 800b706:	d223      	bcs.n	800b750 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <lwip_netconn_do_writemore+0x260>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	2200      	movs	r2, #0
 800b716:	2103      	movs	r1, #3
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7f1b      	ldrb	r3, [r3, #28]
 800b720:	f043 0310 	orr.w	r3, r3, #16
 800b724:	b2da      	uxtb	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	771a      	strb	r2, [r3, #28]
 800b72a:	e029      	b.n	800b780 <lwip_netconn_do_writemore+0x2c4>
 800b72c:	08019e70 	.word	0x08019e70
 800b730:	0801a024 	.word	0x0801a024
 800b734:	08019f10 	.word	0x08019f10
 800b738:	0801a32c 	.word	0x0801a32c
 800b73c:	0801a034 	.word	0x0801a034
 800b740:	0801a34c 	.word	0x0801a34c
 800b744:	0801a364 	.word	0x0801a364
 800b748:	0801a3a4 	.word	0x0801a3a4
 800b74c:	0801a3cc 	.word	0x0801a3cc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b758:	f640 3269 	movw	r2, #2921	; 0xb69
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d905      	bls.n	800b76c <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b768:	2b07      	cmp	r3, #7
 800b76a:	d909      	bls.n	800b780 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <lwip_netconn_do_writemore+0x2c4>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	2200      	movs	r2, #0
 800b77a:	2103      	movs	r1, #3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b780:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d11d      	bne.n	800b7c4 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	429a      	cmp	r2, r3
 800b796:	d002      	beq.n	800b79e <lwip_netconn_do_writemore+0x2e2>
 800b798:	7e3b      	ldrb	r3, [r7, #24]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f009 ff06 	bl	80155b8 <tcp_output>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b7b0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b7b4:	f113 0f04 	cmn.w	r3, #4
 800b7b8:	d12c      	bne.n	800b814 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b7ba:	7b3b      	ldrb	r3, [r7, #12]
 800b7bc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	76fb      	strb	r3, [r7, #27]
 800b7c2:	e027      	b.n	800b814 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800b7c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7cc:	d120      	bne.n	800b810 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f009 fef0 	bl	80155b8 <tcp_output>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b7dc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b7e0:	f113 0f04 	cmn.w	r3, #4
 800b7e4:	d104      	bne.n	800b7f0 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b7e6:	7b7b      	ldrb	r3, [r7, #13]
 800b7e8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	76fb      	strb	r3, [r7, #27]
 800b7ee:	e011      	b.n	800b814 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800b7f0:	7e3b      	ldrb	r3, [r7, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00e      	beq.n	800b814 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <lwip_netconn_do_writemore+0x34a>
 800b800:	f06f 0306 	mvn.w	r3, #6
 800b804:	e000      	b.n	800b808 <lwip_netconn_do_writemore+0x34c>
 800b806:	2300      	movs	r3, #0
 800b808:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b80a:	2301      	movs	r3, #1
 800b80c:	76fb      	strb	r3, [r7, #27]
 800b80e:	e001      	b.n	800b814 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b810:	2301      	movs	r3, #1
 800b812:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b814:	7efb      	ldrb	r3, [r7, #27]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d015      	beq.n	800b846 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	330c      	adds	r3, #12
 800b822:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	7ffa      	ldrb	r2, [r7, #31]
 800b82a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b838:	78fb      	ldrb	r3, [r7, #3]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d006      	beq.n	800b84c <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b83e:	68b8      	ldr	r0, [r7, #8]
 800b840:	f004 fc8a 	bl	8010158 <sys_sem_signal>
 800b844:	e002      	b.n	800b84c <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	e000      	b.n	800b84e <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop

0800b858 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d067      	beq.n	800b946 <lwip_netconn_do_close+0xee>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b880:	2b10      	cmp	r3, #16
 800b882:	d160      	bne.n	800b946 <lwip_netconn_do_close+0xee>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d002      	beq.n	800b892 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b88c:	7afb      	ldrb	r3, [r7, #11]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d059      	beq.n	800b946 <lwip_netconn_do_close+0xee>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b892:	7afb      	ldrb	r3, [r7, #11]
 800b894:	2b03      	cmp	r3, #3
 800b896:	d103      	bne.n	800b8a0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	22f5      	movs	r2, #245	; 0xf5
 800b89c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b89e:	e057      	b.n	800b950 <lwip_netconn_do_close+0xf8>
    } else if (state == NETCONN_WRITE) {
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d103      	bne.n	800b8ae <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	22fb      	movs	r2, #251	; 0xfb
 800b8aa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b8ac:	e050      	b.n	800b950 <lwip_netconn_do_close+0xf8>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	7a1b      	ldrb	r3, [r3, #8]
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d004      	beq.n	800b8c4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f92e 	bl	800ab20 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d006      	beq.n	800b8dc <lwip_netconn_do_close+0x84>
 800b8ce:	4b22      	ldr	r3, [pc, #136]	; (800b958 <lwip_netconn_do_close+0x100>)
 800b8d0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b8d4:	4921      	ldr	r1, [pc, #132]	; (800b95c <lwip_netconn_do_close+0x104>)
 800b8d6:	4822      	ldr	r0, [pc, #136]	; (800b960 <lwip_netconn_do_close+0x108>)
 800b8d8:	f00c f872 	bl	80179c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2204      	movs	r2, #4
 800b8e2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff f992 	bl	800ac1c <lwip_netconn_do_close_internal>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d027      	beq.n	800b94e <lwip_netconn_do_close+0xf6>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	785b      	ldrb	r3, [r3, #1]
 800b904:	2b04      	cmp	r3, #4
 800b906:	d006      	beq.n	800b916 <lwip_netconn_do_close+0xbe>
 800b908:	4b13      	ldr	r3, [pc, #76]	; (800b958 <lwip_netconn_do_close+0x100>)
 800b90a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b90e:	4915      	ldr	r1, [pc, #84]	; (800b964 <lwip_netconn_do_close+0x10c>)
 800b910:	4813      	ldr	r0, [pc, #76]	; (800b960 <lwip_netconn_do_close+0x108>)
 800b912:	f00c f855 	bl	80179c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b916:	f7fa f9a7 	bl	8005c68 <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	330c      	adds	r3, #12
 800b920:	2100      	movs	r1, #0
 800b922:	4618      	mov	r0, r3
 800b924:	f004 fbe7 	bl	80100f6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b928:	f7fa f98e 	bl	8005c48 <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	785b      	ldrb	r3, [r3, #1]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00b      	beq.n	800b94e <lwip_netconn_do_close+0xf6>
 800b936:	4b08      	ldr	r3, [pc, #32]	; (800b958 <lwip_netconn_do_close+0x100>)
 800b938:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b93c:	4909      	ldr	r1, [pc, #36]	; (800b964 <lwip_netconn_do_close+0x10c>)
 800b93e:	4808      	ldr	r0, [pc, #32]	; (800b960 <lwip_netconn_do_close+0x108>)
 800b940:	f00c f83e 	bl	80179c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b944:	e003      	b.n	800b94e <lwip_netconn_do_close+0xf6>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	22f5      	movs	r2, #245	; 0xf5
 800b94a:	711a      	strb	r2, [r3, #4]
 800b94c:	e000      	b.n	800b950 <lwip_netconn_do_close+0xf8>
      return;
 800b94e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	08019e70 	.word	0x08019e70
 800b95c:	0801a270 	.word	0x0801a270
 800b960:	08019f10 	.word	0x08019f10
 800b964:	0801a28c 	.word	0x0801a28c

0800b968 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	021b      	lsls	r3, r3, #8
 800b976:	b21a      	sxth	r2, r3
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	0a1b      	lsrs	r3, r3, #8
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	b21b      	sxth	r3, r3
 800b980:	4313      	orrs	r3, r2
 800b982:	b21b      	sxth	r3, r3
 800b984:	b29b      	uxth	r3, r3
}
 800b986:	4618      	mov	r0, r3
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b992:	b480      	push	{r7}
 800b994:	b083      	sub	sp, #12
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	061a      	lsls	r2, r3, #24
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	021b      	lsls	r3, r3, #8
 800b9a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b9b0:	431a      	orrs	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	0e1b      	lsrs	r3, r3, #24
 800b9b6:	4313      	orrs	r3, r2
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b9cc:	4915      	ldr	r1, [pc, #84]	; (800ba24 <etharp_free_entry+0x60>)
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	4413      	add	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	440b      	add	r3, r1
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d013      	beq.n	800ba08 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b9e0:	4910      	ldr	r1, [pc, #64]	; (800ba24 <etharp_free_entry+0x60>)
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	4413      	add	r3, r2
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	440b      	add	r3, r1
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f003 ff73 	bl	800f8dc <pbuf_free>
    arp_table[i].q = NULL;
 800b9f6:	490b      	ldr	r1, [pc, #44]	; (800ba24 <etharp_free_entry+0x60>)
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	4413      	add	r3, r2
 800ba00:	00db      	lsls	r3, r3, #3
 800ba02:	440b      	add	r3, r1
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ba08:	4906      	ldr	r1, [pc, #24]	; (800ba24 <etharp_free_entry+0x60>)
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	4413      	add	r3, r2
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	440b      	add	r3, r1
 800ba16:	3314      	adds	r3, #20
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	24009ce4 	.word	0x24009ce4

0800ba28 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba2e:	2300      	movs	r3, #0
 800ba30:	607b      	str	r3, [r7, #4]
 800ba32:	e096      	b.n	800bb62 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ba34:	494f      	ldr	r1, [pc, #316]	; (800bb74 <etharp_tmr+0x14c>)
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	4413      	add	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	440b      	add	r3, r1
 800ba42:	3314      	adds	r3, #20
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 8086 	beq.w	800bb5c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ba50:	4948      	ldr	r1, [pc, #288]	; (800bb74 <etharp_tmr+0x14c>)
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4613      	mov	r3, r2
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	4413      	add	r3, r2
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	440b      	add	r3, r1
 800ba5e:	3312      	adds	r3, #18
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	3301      	adds	r3, #1
 800ba64:	b298      	uxth	r0, r3
 800ba66:	4943      	ldr	r1, [pc, #268]	; (800bb74 <etharp_tmr+0x14c>)
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	4413      	add	r3, r2
 800ba70:	00db      	lsls	r3, r3, #3
 800ba72:	440b      	add	r3, r1
 800ba74:	3312      	adds	r3, #18
 800ba76:	4602      	mov	r2, r0
 800ba78:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ba7a:	493e      	ldr	r1, [pc, #248]	; (800bb74 <etharp_tmr+0x14c>)
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	440b      	add	r3, r1
 800ba88:	3312      	adds	r3, #18
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ba90:	d215      	bcs.n	800babe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ba92:	4938      	ldr	r1, [pc, #224]	; (800bb74 <etharp_tmr+0x14c>)
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	005b      	lsls	r3, r3, #1
 800ba9a:	4413      	add	r3, r2
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	440b      	add	r3, r1
 800baa0:	3314      	adds	r3, #20
 800baa2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d10e      	bne.n	800bac6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800baa8:	4932      	ldr	r1, [pc, #200]	; (800bb74 <etharp_tmr+0x14c>)
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4613      	mov	r3, r2
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4413      	add	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	440b      	add	r3, r1
 800bab6:	3312      	adds	r3, #18
 800bab8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800baba:	2b04      	cmp	r3, #4
 800babc:	d903      	bls.n	800bac6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff ff80 	bl	800b9c4 <etharp_free_entry>
 800bac4:	e04a      	b.n	800bb5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bac6:	492b      	ldr	r1, [pc, #172]	; (800bb74 <etharp_tmr+0x14c>)
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4413      	add	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	440b      	add	r3, r1
 800bad4:	3314      	adds	r3, #20
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d10a      	bne.n	800baf2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800badc:	4925      	ldr	r1, [pc, #148]	; (800bb74 <etharp_tmr+0x14c>)
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4613      	mov	r3, r2
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	4413      	add	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	440b      	add	r3, r1
 800baea:	3314      	adds	r3, #20
 800baec:	2204      	movs	r2, #4
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	e034      	b.n	800bb5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800baf2:	4920      	ldr	r1, [pc, #128]	; (800bb74 <etharp_tmr+0x14c>)
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	4613      	mov	r3, r2
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4413      	add	r3, r2
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	440b      	add	r3, r1
 800bb00:	3314      	adds	r3, #20
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b04      	cmp	r3, #4
 800bb06:	d10a      	bne.n	800bb1e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bb08:	491a      	ldr	r1, [pc, #104]	; (800bb74 <etharp_tmr+0x14c>)
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	4413      	add	r3, r2
 800bb12:	00db      	lsls	r3, r3, #3
 800bb14:	440b      	add	r3, r1
 800bb16:	3314      	adds	r3, #20
 800bb18:	2202      	movs	r2, #2
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	e01e      	b.n	800bb5c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bb1e:	4915      	ldr	r1, [pc, #84]	; (800bb74 <etharp_tmr+0x14c>)
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	4613      	mov	r3, r2
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	440b      	add	r3, r1
 800bb2c:	3314      	adds	r3, #20
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d113      	bne.n	800bb5c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bb34:	490f      	ldr	r1, [pc, #60]	; (800bb74 <etharp_tmr+0x14c>)
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	005b      	lsls	r3, r3, #1
 800bb3c:	4413      	add	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	440b      	add	r3, r1
 800bb42:	3308      	adds	r3, #8
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	4413      	add	r3, r2
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	4a08      	ldr	r2, [pc, #32]	; (800bb74 <etharp_tmr+0x14c>)
 800bb52:	4413      	add	r3, r2
 800bb54:	3304      	adds	r3, #4
 800bb56:	4619      	mov	r1, r3
 800bb58:	f000 fe72 	bl	800c840 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	607b      	str	r3, [r7, #4]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b09      	cmp	r3, #9
 800bb66:	f77f af65 	ble.w	800ba34 <etharp_tmr+0xc>
      }
    }
  }
}
 800bb6a:	bf00      	nop
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	24009ce4 	.word	0x24009ce4

0800bb78 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08a      	sub	sp, #40	; 0x28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	460b      	mov	r3, r1
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bb86:	230a      	movs	r3, #10
 800bb88:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bb8a:	230a      	movs	r3, #10
 800bb8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bb8e:	230a      	movs	r3, #10
 800bb90:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bb96:	230a      	movs	r3, #10
 800bb98:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	83bb      	strh	r3, [r7, #28]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	837b      	strh	r3, [r7, #26]
 800bba2:	2300      	movs	r3, #0
 800bba4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bba6:	2300      	movs	r3, #0
 800bba8:	843b      	strh	r3, [r7, #32]
 800bbaa:	e0ae      	b.n	800bd0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bbac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bbb0:	49a6      	ldr	r1, [pc, #664]	; (800be4c <etharp_find_entry+0x2d4>)
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	4413      	add	r3, r2
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	440b      	add	r3, r1
 800bbbc:	3314      	adds	r3, #20
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bbc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bbc6:	2b0a      	cmp	r3, #10
 800bbc8:	d105      	bne.n	800bbd6 <etharp_find_entry+0x5e>
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bbd0:	8c3b      	ldrh	r3, [r7, #32]
 800bbd2:	847b      	strh	r3, [r7, #34]	; 0x22
 800bbd4:	e095      	b.n	800bd02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 8092 	beq.w	800bd02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d009      	beq.n	800bbf8 <etharp_find_entry+0x80>
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d806      	bhi.n	800bbf8 <etharp_find_entry+0x80>
 800bbea:	4b99      	ldr	r3, [pc, #612]	; (800be50 <etharp_find_entry+0x2d8>)
 800bbec:	f240 1223 	movw	r2, #291	; 0x123
 800bbf0:	4998      	ldr	r1, [pc, #608]	; (800be54 <etharp_find_entry+0x2dc>)
 800bbf2:	4899      	ldr	r0, [pc, #612]	; (800be58 <etharp_find_entry+0x2e0>)
 800bbf4:	f00b fee4 	bl	80179c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d020      	beq.n	800bc40 <etharp_find_entry+0xc8>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6819      	ldr	r1, [r3, #0]
 800bc02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc06:	4891      	ldr	r0, [pc, #580]	; (800be4c <etharp_find_entry+0x2d4>)
 800bc08:	4613      	mov	r3, r2
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	4413      	add	r3, r2
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	4403      	add	r3, r0
 800bc12:	3304      	adds	r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4299      	cmp	r1, r3
 800bc18:	d112      	bne.n	800bc40 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00c      	beq.n	800bc3a <etharp_find_entry+0xc2>
 800bc20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc24:	4989      	ldr	r1, [pc, #548]	; (800be4c <etharp_find_entry+0x2d4>)
 800bc26:	4613      	mov	r3, r2
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	4413      	add	r3, r2
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	440b      	add	r3, r1
 800bc30:	3308      	adds	r3, #8
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d102      	bne.n	800bc40 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bc3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bc3e:	e100      	b.n	800be42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d140      	bne.n	800bcc8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bc46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc4a:	4980      	ldr	r1, [pc, #512]	; (800be4c <etharp_find_entry+0x2d4>)
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	005b      	lsls	r3, r3, #1
 800bc50:	4413      	add	r3, r2
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	440b      	add	r3, r1
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d01a      	beq.n	800bc92 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bc5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc60:	497a      	ldr	r1, [pc, #488]	; (800be4c <etharp_find_entry+0x2d4>)
 800bc62:	4613      	mov	r3, r2
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	4413      	add	r3, r2
 800bc68:	00db      	lsls	r3, r3, #3
 800bc6a:	440b      	add	r3, r1
 800bc6c:	3312      	adds	r3, #18
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	8bba      	ldrh	r2, [r7, #28]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d845      	bhi.n	800bd02 <etharp_find_entry+0x18a>
            old_queue = i;
 800bc76:	8c3b      	ldrh	r3, [r7, #32]
 800bc78:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bc7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc7e:	4973      	ldr	r1, [pc, #460]	; (800be4c <etharp_find_entry+0x2d4>)
 800bc80:	4613      	mov	r3, r2
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	4413      	add	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	440b      	add	r3, r1
 800bc8a:	3312      	adds	r3, #18
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	83bb      	strh	r3, [r7, #28]
 800bc90:	e037      	b.n	800bd02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bc92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc96:	496d      	ldr	r1, [pc, #436]	; (800be4c <etharp_find_entry+0x2d4>)
 800bc98:	4613      	mov	r3, r2
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	4413      	add	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	440b      	add	r3, r1
 800bca2:	3312      	adds	r3, #18
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	8b7a      	ldrh	r2, [r7, #26]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d82a      	bhi.n	800bd02 <etharp_find_entry+0x18a>
            old_pending = i;
 800bcac:	8c3b      	ldrh	r3, [r7, #32]
 800bcae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bcb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcb4:	4965      	ldr	r1, [pc, #404]	; (800be4c <etharp_find_entry+0x2d4>)
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4413      	add	r3, r2
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	440b      	add	r3, r1
 800bcc0:	3312      	adds	r3, #18
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	837b      	strh	r3, [r7, #26]
 800bcc6:	e01c      	b.n	800bd02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d919      	bls.n	800bd02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bcce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcd2:	495e      	ldr	r1, [pc, #376]	; (800be4c <etharp_find_entry+0x2d4>)
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	4413      	add	r3, r2
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	440b      	add	r3, r1
 800bcde:	3312      	adds	r3, #18
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	8b3a      	ldrh	r2, [r7, #24]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d80c      	bhi.n	800bd02 <etharp_find_entry+0x18a>
            old_stable = i;
 800bce8:	8c3b      	ldrh	r3, [r7, #32]
 800bcea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bcec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcf0:	4956      	ldr	r1, [pc, #344]	; (800be4c <etharp_find_entry+0x2d4>)
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	4413      	add	r3, r2
 800bcf8:	00db      	lsls	r3, r3, #3
 800bcfa:	440b      	add	r3, r1
 800bcfc:	3312      	adds	r3, #18
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd02:	8c3b      	ldrh	r3, [r7, #32]
 800bd04:	3301      	adds	r3, #1
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	843b      	strh	r3, [r7, #32]
 800bd0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd0e:	2b09      	cmp	r3, #9
 800bd10:	f77f af4c 	ble.w	800bbac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	f003 0302 	and.w	r3, r3, #2
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d108      	bne.n	800bd30 <etharp_find_entry+0x1b8>
 800bd1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bd22:	2b0a      	cmp	r3, #10
 800bd24:	d107      	bne.n	800bd36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bd26:	7afb      	ldrb	r3, [r7, #11]
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bd30:	f04f 33ff 	mov.w	r3, #4294967295
 800bd34:	e085      	b.n	800be42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bd36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	dc02      	bgt.n	800bd44 <etharp_find_entry+0x1cc>
    i = empty;
 800bd3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd40:	843b      	strh	r3, [r7, #32]
 800bd42:	e039      	b.n	800bdb8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bd44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bd48:	2b09      	cmp	r3, #9
 800bd4a:	dc14      	bgt.n	800bd76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bd4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd4e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bd50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd54:	493d      	ldr	r1, [pc, #244]	; (800be4c <etharp_find_entry+0x2d4>)
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	440b      	add	r3, r1
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d018      	beq.n	800bd98 <etharp_find_entry+0x220>
 800bd66:	4b3a      	ldr	r3, [pc, #232]	; (800be50 <etharp_find_entry+0x2d8>)
 800bd68:	f240 126d 	movw	r2, #365	; 0x16d
 800bd6c:	493b      	ldr	r1, [pc, #236]	; (800be5c <etharp_find_entry+0x2e4>)
 800bd6e:	483a      	ldr	r0, [pc, #232]	; (800be58 <etharp_find_entry+0x2e0>)
 800bd70:	f00b fe26 	bl	80179c0 <iprintf>
 800bd74:	e010      	b.n	800bd98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bd76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bd7a:	2b09      	cmp	r3, #9
 800bd7c:	dc02      	bgt.n	800bd84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bd7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd80:	843b      	strh	r3, [r7, #32]
 800bd82:	e009      	b.n	800bd98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bd84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bd88:	2b09      	cmp	r3, #9
 800bd8a:	dc02      	bgt.n	800bd92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bd8c:	8bfb      	ldrh	r3, [r7, #30]
 800bd8e:	843b      	strh	r3, [r7, #32]
 800bd90:	e002      	b.n	800bd98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bd92:	f04f 33ff 	mov.w	r3, #4294967295
 800bd96:	e054      	b.n	800be42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bd98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	dd06      	ble.n	800bdae <etharp_find_entry+0x236>
 800bda0:	4b2b      	ldr	r3, [pc, #172]	; (800be50 <etharp_find_entry+0x2d8>)
 800bda2:	f240 127f 	movw	r2, #383	; 0x17f
 800bda6:	492e      	ldr	r1, [pc, #184]	; (800be60 <etharp_find_entry+0x2e8>)
 800bda8:	482b      	ldr	r0, [pc, #172]	; (800be58 <etharp_find_entry+0x2e0>)
 800bdaa:	f00b fe09 	bl	80179c0 <iprintf>
    etharp_free_entry(i);
 800bdae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fe06 	bl	800b9c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bdb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdbc:	2b09      	cmp	r3, #9
 800bdbe:	dd06      	ble.n	800bdce <etharp_find_entry+0x256>
 800bdc0:	4b23      	ldr	r3, [pc, #140]	; (800be50 <etharp_find_entry+0x2d8>)
 800bdc2:	f240 1283 	movw	r2, #387	; 0x183
 800bdc6:	4926      	ldr	r1, [pc, #152]	; (800be60 <etharp_find_entry+0x2e8>)
 800bdc8:	4823      	ldr	r0, [pc, #140]	; (800be58 <etharp_find_entry+0x2e0>)
 800bdca:	f00b fdf9 	bl	80179c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bdce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdd2:	491e      	ldr	r1, [pc, #120]	; (800be4c <etharp_find_entry+0x2d4>)
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	4413      	add	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	440b      	add	r3, r1
 800bdde:	3314      	adds	r3, #20
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d006      	beq.n	800bdf4 <etharp_find_entry+0x27c>
 800bde6:	4b1a      	ldr	r3, [pc, #104]	; (800be50 <etharp_find_entry+0x2d8>)
 800bde8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bdec:	491d      	ldr	r1, [pc, #116]	; (800be64 <etharp_find_entry+0x2ec>)
 800bdee:	481a      	ldr	r0, [pc, #104]	; (800be58 <etharp_find_entry+0x2e0>)
 800bdf0:	f00b fde6 	bl	80179c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00b      	beq.n	800be12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bdfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6819      	ldr	r1, [r3, #0]
 800be02:	4812      	ldr	r0, [pc, #72]	; (800be4c <etharp_find_entry+0x2d4>)
 800be04:	4613      	mov	r3, r2
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	4413      	add	r3, r2
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	4403      	add	r3, r0
 800be0e:	3304      	adds	r3, #4
 800be10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800be12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be16:	490d      	ldr	r1, [pc, #52]	; (800be4c <etharp_find_entry+0x2d4>)
 800be18:	4613      	mov	r3, r2
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	4413      	add	r3, r2
 800be1e:	00db      	lsls	r3, r3, #3
 800be20:	440b      	add	r3, r1
 800be22:	3312      	adds	r3, #18
 800be24:	2200      	movs	r2, #0
 800be26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800be28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be2c:	4907      	ldr	r1, [pc, #28]	; (800be4c <etharp_find_entry+0x2d4>)
 800be2e:	4613      	mov	r3, r2
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	4413      	add	r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	440b      	add	r3, r1
 800be38:	3308      	adds	r3, #8
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800be3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3728      	adds	r7, #40	; 0x28
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	24009ce4 	.word	0x24009ce4
 800be50:	0801a424 	.word	0x0801a424
 800be54:	0801a4b8 	.word	0x0801a4b8
 800be58:	0801a4f8 	.word	0x0801a4f8
 800be5c:	0801a520 	.word	0x0801a520
 800be60:	0801a538 	.word	0x0801a538
 800be64:	0801a54c 	.word	0x0801a54c

0800be68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be7c:	2b06      	cmp	r3, #6
 800be7e:	d006      	beq.n	800be8e <etharp_update_arp_entry+0x26>
 800be80:	4b48      	ldr	r3, [pc, #288]	; (800bfa4 <etharp_update_arp_entry+0x13c>)
 800be82:	f240 12a9 	movw	r2, #425	; 0x1a9
 800be86:	4948      	ldr	r1, [pc, #288]	; (800bfa8 <etharp_update_arp_entry+0x140>)
 800be88:	4848      	ldr	r0, [pc, #288]	; (800bfac <etharp_update_arp_entry+0x144>)
 800be8a:	f00b fd99 	bl	80179c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d012      	beq.n	800beba <etharp_update_arp_entry+0x52>
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00e      	beq.n	800beba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68f9      	ldr	r1, [r7, #12]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 fada 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800bea8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800beb6:	2be0      	cmp	r3, #224	; 0xe0
 800beb8:	d102      	bne.n	800bec0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800beba:	f06f 030f 	mvn.w	r3, #15
 800bebe:	e06c      	b.n	800bf9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bec0:	78fb      	ldrb	r3, [r7, #3]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	4619      	mov	r1, r3
 800bec6:	68b8      	ldr	r0, [r7, #8]
 800bec8:	f7ff fe56 	bl	800bb78 <etharp_find_entry>
 800becc:	4603      	mov	r3, r0
 800bece:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bed0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	da02      	bge.n	800bede <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bed8:	8afb      	ldrh	r3, [r7, #22]
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	e05d      	b.n	800bf9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bede:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bee2:	4933      	ldr	r1, [pc, #204]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800bee4:	4613      	mov	r3, r2
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	4413      	add	r3, r2
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	440b      	add	r3, r1
 800beee:	3314      	adds	r3, #20
 800bef0:	2202      	movs	r2, #2
 800bef2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bef8:	492d      	ldr	r1, [pc, #180]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800befa:	4613      	mov	r3, r2
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	4413      	add	r3, r2
 800bf00:	00db      	lsls	r3, r3, #3
 800bf02:	440b      	add	r3, r1
 800bf04:	3308      	adds	r3, #8
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bf0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4413      	add	r3, r2
 800bf14:	00db      	lsls	r3, r3, #3
 800bf16:	3308      	adds	r3, #8
 800bf18:	4a25      	ldr	r2, [pc, #148]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800bf1a:	4413      	add	r3, r2
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	2206      	movs	r2, #6
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f00b fc87 	bl	8017836 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bf28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf2c:	4920      	ldr	r1, [pc, #128]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800bf2e:	4613      	mov	r3, r2
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4413      	add	r3, r2
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	440b      	add	r3, r1
 800bf38:	3312      	adds	r3, #18
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bf3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf42:	491b      	ldr	r1, [pc, #108]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	00db      	lsls	r3, r3, #3
 800bf4c:	440b      	add	r3, r1
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d021      	beq.n	800bf98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bf54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf58:	4915      	ldr	r1, [pc, #84]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	4413      	add	r3, r2
 800bf60:	00db      	lsls	r3, r3, #3
 800bf62:	440b      	add	r3, r1
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bf68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf6c:	4910      	ldr	r1, [pc, #64]	; (800bfb0 <etharp_update_arp_entry+0x148>)
 800bf6e:	4613      	mov	r3, r2
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	4413      	add	r3, r2
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	440b      	add	r3, r1
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bf82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6939      	ldr	r1, [r7, #16]
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 fcf9 	bl	800c984 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bf92:	6938      	ldr	r0, [r7, #16]
 800bf94:	f003 fca2 	bl	800f8dc <pbuf_free>
  }
  return ERR_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	0801a424 	.word	0x0801a424
 800bfa8:	0801a578 	.word	0x0801a578
 800bfac:	0801a4f8 	.word	0x0801a4f8
 800bfb0:	24009ce4 	.word	0x24009ce4

0800bfb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	e01e      	b.n	800c000 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800bfc2:	4913      	ldr	r1, [pc, #76]	; (800c010 <etharp_cleanup_netif+0x5c>)
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	4413      	add	r3, r2
 800bfcc:	00db      	lsls	r3, r3, #3
 800bfce:	440b      	add	r3, r1
 800bfd0:	3314      	adds	r3, #20
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bfd6:	7afb      	ldrb	r3, [r7, #11]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00e      	beq.n	800bffa <etharp_cleanup_netif+0x46>
 800bfdc:	490c      	ldr	r1, [pc, #48]	; (800c010 <etharp_cleanup_netif+0x5c>)
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	440b      	add	r3, r1
 800bfea:	3308      	adds	r3, #8
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d102      	bne.n	800bffa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7ff fce5 	bl	800b9c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3301      	adds	r3, #1
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b09      	cmp	r3, #9
 800c004:	dddd      	ble.n	800bfc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	24009ce4 	.word	0x24009ce4

0800c014 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c014:	b5b0      	push	{r4, r5, r7, lr}
 800c016:	b08a      	sub	sp, #40	; 0x28
 800c018:	af04      	add	r7, sp, #16
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 800c01e:	f7f9 fe31 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d107      	bne.n	800c038 <etharp_input+0x24>
 800c028:	4b3d      	ldr	r3, [pc, #244]	; (800c120 <etharp_input+0x10c>)
 800c02a:	f240 228a 	movw	r2, #650	; 0x28a
 800c02e:	493d      	ldr	r1, [pc, #244]	; (800c124 <etharp_input+0x110>)
 800c030:	483d      	ldr	r0, [pc, #244]	; (800c128 <etharp_input+0x114>)
 800c032:	f00b fcc5 	bl	80179c0 <iprintf>
 800c036:	e06f      	b.n	800c118 <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	b29b      	uxth	r3, r3
 800c044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c048:	d10c      	bne.n	800c064 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c04e:	2b06      	cmp	r3, #6
 800c050:	d108      	bne.n	800c064 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c056:	2b04      	cmp	r3, #4
 800c058:	d104      	bne.n	800c064 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	885b      	ldrh	r3, [r3, #2]
 800c05e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c060:	2b08      	cmp	r3, #8
 800c062:	d003      	beq.n	800c06c <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f003 fc39 	bl	800f8dc <pbuf_free>
    return;
 800c06a:	e055      	b.n	800c118 <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	330e      	adds	r3, #14
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	3318      	adds	r3, #24
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	3304      	adds	r3, #4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <etharp_input+0x78>
    for_us = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	75fb      	strb	r3, [r7, #23]
 800c08a:	e009      	b.n	800c0a0 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	3304      	adds	r3, #4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	429a      	cmp	r2, r3
 800c096:	bf0c      	ite	eq
 800c098:	2301      	moveq	r3, #1
 800c09a:	2300      	movne	r3, #0
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f103 0208 	add.w	r2, r3, #8
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <etharp_input+0x9c>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e000      	b.n	800c0b2 <etharp_input+0x9e>
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	f107 010c 	add.w	r1, r7, #12
 800c0b6:	6838      	ldr	r0, [r7, #0]
 800c0b8:	f7ff fed6 	bl	800be68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	88db      	ldrh	r3, [r3, #6]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0c6:	d003      	beq.n	800c0d0 <etharp_input+0xbc>
 800c0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0cc:	d01e      	beq.n	800c10c <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c0ce:	e020      	b.n	800c112 <etharp_input+0xfe>
      if (for_us) {
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d01c      	beq.n	800c110 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c0f0:	2102      	movs	r1, #2
 800c0f2:	9103      	str	r1, [sp, #12]
 800c0f4:	f107 010c 	add.w	r1, r7, #12
 800c0f8:	9102      	str	r1, [sp, #8]
 800c0fa:	9201      	str	r2, [sp, #4]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	462b      	mov	r3, r5
 800c100:	4622      	mov	r2, r4
 800c102:	4601      	mov	r1, r0
 800c104:	6838      	ldr	r0, [r7, #0]
 800c106:	f000 faed 	bl	800c6e4 <etharp_raw>
      break;
 800c10a:	e001      	b.n	800c110 <etharp_input+0xfc>
      break;
 800c10c:	bf00      	nop
 800c10e:	e000      	b.n	800c112 <etharp_input+0xfe>
      break;
 800c110:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f003 fbe2 	bl	800f8dc <pbuf_free>
}
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bdb0      	pop	{r4, r5, r7, pc}
 800c11e:	bf00      	nop
 800c120:	0801a424 	.word	0x0801a424
 800c124:	0801a5d0 	.word	0x0801a5d0
 800c128:	0801a4f8 	.word	0x0801a4f8

0800c12c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af02      	add	r7, sp, #8
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4613      	mov	r3, r2
 800c138:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c13a:	79fa      	ldrb	r2, [r7, #7]
 800c13c:	4944      	ldr	r1, [pc, #272]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c13e:	4613      	mov	r3, r2
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	4413      	add	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	440b      	add	r3, r1
 800c148:	3314      	adds	r3, #20
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d806      	bhi.n	800c15e <etharp_output_to_arp_index+0x32>
 800c150:	4b40      	ldr	r3, [pc, #256]	; (800c254 <etharp_output_to_arp_index+0x128>)
 800c152:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c156:	4940      	ldr	r1, [pc, #256]	; (800c258 <etharp_output_to_arp_index+0x12c>)
 800c158:	4840      	ldr	r0, [pc, #256]	; (800c25c <etharp_output_to_arp_index+0x130>)
 800c15a:	f00b fc31 	bl	80179c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c15e:	79fa      	ldrb	r2, [r7, #7]
 800c160:	493b      	ldr	r1, [pc, #236]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	440b      	add	r3, r1
 800c16c:	3314      	adds	r3, #20
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d153      	bne.n	800c21c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c174:	79fa      	ldrb	r2, [r7, #7]
 800c176:	4936      	ldr	r1, [pc, #216]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c178:	4613      	mov	r3, r2
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	4413      	add	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	440b      	add	r3, r1
 800c182:	3312      	adds	r3, #18
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c18a:	d919      	bls.n	800c1c0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c18c:	79fa      	ldrb	r2, [r7, #7]
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	4a2e      	ldr	r2, [pc, #184]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c198:	4413      	add	r3, r2
 800c19a:	3304      	adds	r3, #4
 800c19c:	4619      	mov	r1, r3
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f000 fb4e 	bl	800c840 <etharp_request>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d138      	bne.n	800c21c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c1aa:	79fa      	ldrb	r2, [r7, #7]
 800c1ac:	4928      	ldr	r1, [pc, #160]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	4413      	add	r3, r2
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	e02d      	b.n	800c21c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	4923      	ldr	r1, [pc, #140]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	4413      	add	r3, r2
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	440b      	add	r3, r1
 800c1ce:	3312      	adds	r3, #18
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c1d6:	d321      	bcc.n	800c21c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c1d8:	79fa      	ldrb	r2, [r7, #7]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4a1b      	ldr	r2, [pc, #108]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c1e4:	4413      	add	r3, r2
 800c1e6:	1d19      	adds	r1, r3, #4
 800c1e8:	79fa      	ldrb	r2, [r7, #7]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	4a16      	ldr	r2, [pc, #88]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 fafd 	bl	800c7fc <etharp_request_dst>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d109      	bne.n	800c21c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	4911      	ldr	r1, [pc, #68]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c20c:	4613      	mov	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	4413      	add	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	440b      	add	r3, r1
 800c216:	3314      	adds	r3, #20
 800c218:	2203      	movs	r2, #3
 800c21a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c222:	79fa      	ldrb	r2, [r7, #7]
 800c224:	4613      	mov	r3, r2
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	4413      	add	r3, r2
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	3308      	adds	r3, #8
 800c22e:	4a08      	ldr	r2, [pc, #32]	; (800c250 <etharp_output_to_arp_index+0x124>)
 800c230:	4413      	add	r3, r2
 800c232:	3304      	adds	r3, #4
 800c234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c238:	9200      	str	r2, [sp, #0]
 800c23a:	460a      	mov	r2, r1
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 fba0 	bl	800c984 <ethernet_output>
 800c244:	4603      	mov	r3, r0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	24009ce4 	.word	0x24009ce4
 800c254:	0801a424 	.word	0x0801a424
 800c258:	0801a5f0 	.word	0x0801a5f0
 800c25c:	0801a4f8 	.word	0x0801a4f8

0800c260 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08a      	sub	sp, #40	; 0x28
 800c264:	af02      	add	r7, sp, #8
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 800c270:	f7f9 fd08 	bl	8005c84 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <etharp_output+0x28>
 800c27a:	4b73      	ldr	r3, [pc, #460]	; (800c448 <etharp_output+0x1e8>)
 800c27c:	f240 321e 	movw	r2, #798	; 0x31e
 800c280:	4972      	ldr	r1, [pc, #456]	; (800c44c <etharp_output+0x1ec>)
 800c282:	4873      	ldr	r0, [pc, #460]	; (800c450 <etharp_output+0x1f0>)
 800c284:	f00b fb9c 	bl	80179c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d106      	bne.n	800c29c <etharp_output+0x3c>
 800c28e:	4b6e      	ldr	r3, [pc, #440]	; (800c448 <etharp_output+0x1e8>)
 800c290:	f240 321f 	movw	r2, #799	; 0x31f
 800c294:	496f      	ldr	r1, [pc, #444]	; (800c454 <etharp_output+0x1f4>)
 800c296:	486e      	ldr	r0, [pc, #440]	; (800c450 <etharp_output+0x1f0>)
 800c298:	f00b fb92 	bl	80179c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <etharp_output+0x50>
 800c2a2:	4b69      	ldr	r3, [pc, #420]	; (800c448 <etharp_output+0x1e8>)
 800c2a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c2a8:	496b      	ldr	r1, [pc, #428]	; (800c458 <etharp_output+0x1f8>)
 800c2aa:	4869      	ldr	r0, [pc, #420]	; (800c450 <etharp_output+0x1f0>)
 800c2ac:	f00b fb88 	bl	80179c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	68f9      	ldr	r1, [r7, #12]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f001 f8d0 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c2c2:	4b66      	ldr	r3, [pc, #408]	; (800c45c <etharp_output+0x1fc>)
 800c2c4:	61fb      	str	r3, [r7, #28]
 800c2c6:	e0af      	b.n	800c428 <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2d0:	2be0      	cmp	r3, #224	; 0xe0
 800c2d2:	d118      	bne.n	800c306 <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c2dc:	235e      	movs	r3, #94	; 0x5e
 800c2de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	3303      	adds	r3, #3
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c2fe:	f107 0310 	add.w	r3, r7, #16
 800c302:	61fb      	str	r3, [r7, #28]
 800c304:	e090      	b.n	800c428 <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3304      	adds	r3, #4
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	405a      	eors	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3308      	adds	r3, #8
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4013      	ands	r3, r2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d012      	beq.n	800c344 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c324:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c328:	4293      	cmp	r3, r2
 800c32a:	d00b      	beq.n	800c344 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	330c      	adds	r3, #12
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d003      	beq.n	800c33e <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	330c      	adds	r3, #12
 800c33a:	61bb      	str	r3, [r7, #24]
 800c33c:	e002      	b.n	800c344 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c33e:	f06f 0303 	mvn.w	r3, #3
 800c342:	e07d      	b.n	800c440 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c344:	4b46      	ldr	r3, [pc, #280]	; (800c460 <etharp_output+0x200>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	4619      	mov	r1, r3
 800c34a:	4a46      	ldr	r2, [pc, #280]	; (800c464 <etharp_output+0x204>)
 800c34c:	460b      	mov	r3, r1
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	440b      	add	r3, r1
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	4413      	add	r3, r2
 800c356:	3314      	adds	r3, #20
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d925      	bls.n	800c3aa <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c35e:	4b40      	ldr	r3, [pc, #256]	; (800c460 <etharp_output+0x200>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	4619      	mov	r1, r3
 800c364:	4a3f      	ldr	r2, [pc, #252]	; (800c464 <etharp_output+0x204>)
 800c366:	460b      	mov	r3, r1
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	440b      	add	r3, r1
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	4413      	add	r3, r2
 800c370:	3308      	adds	r3, #8
 800c372:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	429a      	cmp	r2, r3
 800c378:	d117      	bne.n	800c3aa <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	4b38      	ldr	r3, [pc, #224]	; (800c460 <etharp_output+0x200>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	4618      	mov	r0, r3
 800c384:	4937      	ldr	r1, [pc, #220]	; (800c464 <etharp_output+0x204>)
 800c386:	4603      	mov	r3, r0
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4403      	add	r3, r0
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	440b      	add	r3, r1
 800c390:	3304      	adds	r3, #4
 800c392:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c394:	429a      	cmp	r2, r3
 800c396:	d108      	bne.n	800c3aa <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c398:	4b31      	ldr	r3, [pc, #196]	; (800c460 <etharp_output+0x200>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	68b9      	ldr	r1, [r7, #8]
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fec3 	bl	800c12c <etharp_output_to_arp_index>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	e04a      	b.n	800c440 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75fb      	strb	r3, [r7, #23]
 800c3ae:	e031      	b.n	800c414 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c3b0:	7dfa      	ldrb	r2, [r7, #23]
 800c3b2:	492c      	ldr	r1, [pc, #176]	; (800c464 <etharp_output+0x204>)
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	4413      	add	r3, r2
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	440b      	add	r3, r1
 800c3be:	3314      	adds	r3, #20
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d923      	bls.n	800c40e <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c3c6:	7dfa      	ldrb	r2, [r7, #23]
 800c3c8:	4926      	ldr	r1, [pc, #152]	; (800c464 <etharp_output+0x204>)
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	4413      	add	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3308      	adds	r3, #8
 800c3d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d117      	bne.n	800c40e <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	6819      	ldr	r1, [r3, #0]
 800c3e2:	7dfa      	ldrb	r2, [r7, #23]
 800c3e4:	481f      	ldr	r0, [pc, #124]	; (800c464 <etharp_output+0x204>)
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	4413      	add	r3, r2
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	4403      	add	r3, r0
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c3f4:	4299      	cmp	r1, r3
 800c3f6:	d10a      	bne.n	800c40e <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c3f8:	4a19      	ldr	r2, [pc, #100]	; (800c460 <etharp_output+0x200>)
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
 800c400:	461a      	mov	r2, r3
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f7ff fe91 	bl	800c12c <etharp_output_to_arp_index>
 800c40a:	4603      	mov	r3, r0
 800c40c:	e018      	b.n	800c440 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	3301      	adds	r3, #1
 800c412:	75fb      	strb	r3, [r7, #23]
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	2b09      	cmp	r3, #9
 800c418:	d9ca      	bls.n	800c3b0 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	69b9      	ldr	r1, [r7, #24]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f000 f822 	bl	800c468 <etharp_query>
 800c424:	4603      	mov	r3, r0
 800c426:	e00b      	b.n	800c440 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c42e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f000 faa3 	bl	800c984 <ethernet_output>
 800c43e:	4603      	mov	r3, r0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3720      	adds	r7, #32
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	0801a424 	.word	0x0801a424
 800c44c:	0801a5d0 	.word	0x0801a5d0
 800c450:	0801a4f8 	.word	0x0801a4f8
 800c454:	0801a620 	.word	0x0801a620
 800c458:	0801a5c0 	.word	0x0801a5c0
 800c45c:	0801d474 	.word	0x0801d474
 800c460:	24009dd4 	.word	0x24009dd4
 800c464:	24009ce4 	.word	0x24009ce4

0800c468 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08c      	sub	sp, #48	; 0x30
 800c46c:	af02      	add	r7, sp, #8
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3326      	adds	r3, #38	; 0x26
 800c478:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c47a:	23ff      	movs	r3, #255	; 0xff
 800c47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68f9      	ldr	r1, [r7, #12]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 ffe6 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10c      	bne.n	800c4b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c49e:	2be0      	cmp	r3, #224	; 0xe0
 800c4a0:	d006      	beq.n	800c4b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d003      	beq.n	800c4b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d102      	bne.n	800c4b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4b0:	f06f 030f 	mvn.w	r3, #15
 800c4b4:	e101      	b.n	800c6ba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	68b8      	ldr	r0, [r7, #8]
 800c4bc:	f7ff fb5c 	bl	800bb78 <etharp_find_entry>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c4c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da02      	bge.n	800c4d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c4cc:	8a7b      	ldrh	r3, [r7, #18]
 800c4ce:	b25b      	sxtb	r3, r3
 800c4d0:	e0f3      	b.n	800c6ba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c4d2:	8a7b      	ldrh	r3, [r7, #18]
 800c4d4:	2b7e      	cmp	r3, #126	; 0x7e
 800c4d6:	d906      	bls.n	800c4e6 <etharp_query+0x7e>
 800c4d8:	4b7a      	ldr	r3, [pc, #488]	; (800c6c4 <etharp_query+0x25c>)
 800c4da:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c4de:	497a      	ldr	r1, [pc, #488]	; (800c6c8 <etharp_query+0x260>)
 800c4e0:	487a      	ldr	r0, [pc, #488]	; (800c6cc <etharp_query+0x264>)
 800c4e2:	f00b fa6d 	bl	80179c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c4e6:	8a7b      	ldrh	r3, [r7, #18]
 800c4e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c4ea:	7c7a      	ldrb	r2, [r7, #17]
 800c4ec:	4978      	ldr	r1, [pc, #480]	; (800c6d0 <etharp_query+0x268>)
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	440b      	add	r3, r1
 800c4f8:	3314      	adds	r3, #20
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d115      	bne.n	800c52c <etharp_query+0xc4>
    is_new_entry = 1;
 800c500:	2301      	movs	r3, #1
 800c502:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c504:	7c7a      	ldrb	r2, [r7, #17]
 800c506:	4972      	ldr	r1, [pc, #456]	; (800c6d0 <etharp_query+0x268>)
 800c508:	4613      	mov	r3, r2
 800c50a:	005b      	lsls	r3, r3, #1
 800c50c:	4413      	add	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	440b      	add	r3, r1
 800c512:	3314      	adds	r3, #20
 800c514:	2201      	movs	r2, #1
 800c516:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c518:	7c7a      	ldrb	r2, [r7, #17]
 800c51a:	496d      	ldr	r1, [pc, #436]	; (800c6d0 <etharp_query+0x268>)
 800c51c:	4613      	mov	r3, r2
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	4413      	add	r3, r2
 800c522:	00db      	lsls	r3, r3, #3
 800c524:	440b      	add	r3, r1
 800c526:	3308      	adds	r3, #8
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c52c:	7c7a      	ldrb	r2, [r7, #17]
 800c52e:	4968      	ldr	r1, [pc, #416]	; (800c6d0 <etharp_query+0x268>)
 800c530:	4613      	mov	r3, r2
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	4413      	add	r3, r2
 800c536:	00db      	lsls	r3, r3, #3
 800c538:	440b      	add	r3, r1
 800c53a:	3314      	adds	r3, #20
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d011      	beq.n	800c566 <etharp_query+0xfe>
 800c542:	7c7a      	ldrb	r2, [r7, #17]
 800c544:	4962      	ldr	r1, [pc, #392]	; (800c6d0 <etharp_query+0x268>)
 800c546:	4613      	mov	r3, r2
 800c548:	005b      	lsls	r3, r3, #1
 800c54a:	4413      	add	r3, r2
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	440b      	add	r3, r1
 800c550:	3314      	adds	r3, #20
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d806      	bhi.n	800c566 <etharp_query+0xfe>
 800c558:	4b5a      	ldr	r3, [pc, #360]	; (800c6c4 <etharp_query+0x25c>)
 800c55a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c55e:	495d      	ldr	r1, [pc, #372]	; (800c6d4 <etharp_query+0x26c>)
 800c560:	485a      	ldr	r0, [pc, #360]	; (800c6cc <etharp_query+0x264>)
 800c562:	f00b fa2d 	bl	80179c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d102      	bne.n	800c572 <etharp_query+0x10a>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10c      	bne.n	800c58c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f000 f963 	bl	800c840 <etharp_request>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <etharp_query+0x124>
      return result;
 800c586:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c58a:	e096      	b.n	800c6ba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <etharp_query+0x138>
 800c592:	4b4c      	ldr	r3, [pc, #304]	; (800c6c4 <etharp_query+0x25c>)
 800c594:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c598:	494f      	ldr	r1, [pc, #316]	; (800c6d8 <etharp_query+0x270>)
 800c59a:	484c      	ldr	r0, [pc, #304]	; (800c6cc <etharp_query+0x264>)
 800c59c:	f00b fa10 	bl	80179c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c5a0:	7c7a      	ldrb	r2, [r7, #17]
 800c5a2:	494b      	ldr	r1, [pc, #300]	; (800c6d0 <etharp_query+0x268>)
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	4413      	add	r3, r2
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	440b      	add	r3, r1
 800c5ae:	3314      	adds	r3, #20
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d917      	bls.n	800c5e6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c5b6:	4a49      	ldr	r2, [pc, #292]	; (800c6dc <etharp_query+0x274>)
 800c5b8:	7c7b      	ldrb	r3, [r7, #17]
 800c5ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c5bc:	7c7a      	ldrb	r2, [r7, #17]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	4413      	add	r3, r2
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	4a41      	ldr	r2, [pc, #260]	; (800c6d0 <etharp_query+0x268>)
 800c5ca:	4413      	add	r3, r2
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5d2:	9200      	str	r2, [sp, #0]
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f000 f9d3 	bl	800c984 <ethernet_output>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5e4:	e067      	b.n	800c6b6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c5e6:	7c7a      	ldrb	r2, [r7, #17]
 800c5e8:	4939      	ldr	r1, [pc, #228]	; (800c6d0 <etharp_query+0x268>)
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	440b      	add	r3, r1
 800c5f4:	3314      	adds	r3, #20
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d15c      	bne.n	800c6b6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c604:	e01c      	b.n	800c640 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	895a      	ldrh	r2, [r3, #10]
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	891b      	ldrh	r3, [r3, #8]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d10a      	bne.n	800c628 <etharp_query+0x1c0>
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <etharp_query+0x1c0>
 800c61a:	4b2a      	ldr	r3, [pc, #168]	; (800c6c4 <etharp_query+0x25c>)
 800c61c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c620:	492f      	ldr	r1, [pc, #188]	; (800c6e0 <etharp_query+0x278>)
 800c622:	482a      	ldr	r0, [pc, #168]	; (800c6cc <etharp_query+0x264>)
 800c624:	f00b f9cc 	bl	80179c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	7b1b      	ldrb	r3, [r3, #12]
 800c62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <etharp_query+0x1d2>
        copy_needed = 1;
 800c634:	2301      	movs	r3, #1
 800c636:	61bb      	str	r3, [r7, #24]
        break;
 800c638:	e005      	b.n	800c646 <etharp_query+0x1de>
      }
      p = p->next;
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1df      	bne.n	800c606 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d007      	beq.n	800c65c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c652:	200e      	movs	r0, #14
 800c654:	f003 fc4c 	bl	800fef0 <pbuf_clone>
 800c658:	61f8      	str	r0, [r7, #28]
 800c65a:	e004      	b.n	800c666 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c660:	69f8      	ldr	r0, [r7, #28]
 800c662:	f003 f9e1 	bl	800fa28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d021      	beq.n	800c6b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c66c:	7c7a      	ldrb	r2, [r7, #17]
 800c66e:	4918      	ldr	r1, [pc, #96]	; (800c6d0 <etharp_query+0x268>)
 800c670:	4613      	mov	r3, r2
 800c672:	005b      	lsls	r3, r3, #1
 800c674:	4413      	add	r3, r2
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	440b      	add	r3, r1
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c680:	7c7a      	ldrb	r2, [r7, #17]
 800c682:	4913      	ldr	r1, [pc, #76]	; (800c6d0 <etharp_query+0x268>)
 800c684:	4613      	mov	r3, r2
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	4413      	add	r3, r2
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	440b      	add	r3, r1
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4618      	mov	r0, r3
 800c692:	f003 f923 	bl	800f8dc <pbuf_free>
      }
      arp_table[i].q = p;
 800c696:	7c7a      	ldrb	r2, [r7, #17]
 800c698:	490d      	ldr	r1, [pc, #52]	; (800c6d0 <etharp_query+0x268>)
 800c69a:	4613      	mov	r3, r2
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	4413      	add	r3, r2
 800c6a0:	00db      	lsls	r3, r3, #3
 800c6a2:	440b      	add	r3, r1
 800c6a4:	69fa      	ldr	r2, [r7, #28]
 800c6a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6ae:	e002      	b.n	800c6b6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c6b0:	23ff      	movs	r3, #255	; 0xff
 800c6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c6b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3728      	adds	r7, #40	; 0x28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	0801a424 	.word	0x0801a424
 800c6c8:	0801a62c 	.word	0x0801a62c
 800c6cc:	0801a4f8 	.word	0x0801a4f8
 800c6d0:	24009ce4 	.word	0x24009ce4
 800c6d4:	0801a63c 	.word	0x0801a63c
 800c6d8:	0801a620 	.word	0x0801a620
 800c6dc:	24009dd4 	.word	0x24009dd4
 800c6e0:	0801a664 	.word	0x0801a664

0800c6e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	; 0x28
 800c6e8:	af02      	add	r7, sp, #8
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d106      	bne.n	800c70a <etharp_raw+0x26>
 800c6fc:	4b3a      	ldr	r3, [pc, #232]	; (800c7e8 <etharp_raw+0x104>)
 800c6fe:	f240 4257 	movw	r2, #1111	; 0x457
 800c702:	493a      	ldr	r1, [pc, #232]	; (800c7ec <etharp_raw+0x108>)
 800c704:	483a      	ldr	r0, [pc, #232]	; (800c7f0 <etharp_raw+0x10c>)
 800c706:	f00b f95b 	bl	80179c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c70a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c70e:	211c      	movs	r1, #28
 800c710:	200e      	movs	r0, #14
 800c712:	f002 fdff 	bl	800f314 <pbuf_alloc>
 800c716:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c71e:	f04f 33ff 	mov.w	r3, #4294967295
 800c722:	e05d      	b.n	800c7e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	895b      	ldrh	r3, [r3, #10]
 800c728:	2b1b      	cmp	r3, #27
 800c72a:	d806      	bhi.n	800c73a <etharp_raw+0x56>
 800c72c:	4b2e      	ldr	r3, [pc, #184]	; (800c7e8 <etharp_raw+0x104>)
 800c72e:	f240 4262 	movw	r2, #1122	; 0x462
 800c732:	4930      	ldr	r1, [pc, #192]	; (800c7f4 <etharp_raw+0x110>)
 800c734:	482e      	ldr	r0, [pc, #184]	; (800c7f0 <etharp_raw+0x10c>)
 800c736:	f00b f943 	bl	80179c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c740:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff f910 	bl	800b968 <lwip_htons>
 800c748:	4603      	mov	r3, r0
 800c74a:	461a      	mov	r2, r3
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c756:	2b06      	cmp	r3, #6
 800c758:	d006      	beq.n	800c768 <etharp_raw+0x84>
 800c75a:	4b23      	ldr	r3, [pc, #140]	; (800c7e8 <etharp_raw+0x104>)
 800c75c:	f240 4269 	movw	r2, #1129	; 0x469
 800c760:	4925      	ldr	r1, [pc, #148]	; (800c7f8 <etharp_raw+0x114>)
 800c762:	4823      	ldr	r0, [pc, #140]	; (800c7f0 <etharp_raw+0x10c>)
 800c764:	f00b f92c 	bl	80179c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	3308      	adds	r3, #8
 800c76c:	2206      	movs	r2, #6
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	4618      	mov	r0, r3
 800c772:	f00b f860 	bl	8017836 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	3312      	adds	r3, #18
 800c77a:	2206      	movs	r2, #6
 800c77c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c77e:	4618      	mov	r0, r3
 800c780:	f00b f859 	bl	8017836 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	330e      	adds	r3, #14
 800c788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78a:	6812      	ldr	r2, [r2, #0]
 800c78c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	3318      	adds	r3, #24
 800c792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f042 0201 	orr.w	r2, r2, #1
 800c7a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f042 0208 	orr.w	r2, r2, #8
 800c7ae:	709a      	strb	r2, [r3, #2]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	2206      	movs	r2, #6
 800c7b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2204      	movs	r2, #4
 800c7be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c7c0:	f640 0306 	movw	r3, #2054	; 0x806
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	69b9      	ldr	r1, [r7, #24]
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f8d9 	bl	800c984 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c7d2:	69b8      	ldr	r0, [r7, #24]
 800c7d4:	f003 f882 	bl	800f8dc <pbuf_free>
  p = NULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c7dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3720      	adds	r7, #32
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	0801a424 	.word	0x0801a424
 800c7ec:	0801a5d0 	.word	0x0801a5d0
 800c7f0:	0801a4f8 	.word	0x0801a4f8
 800c7f4:	0801a680 	.word	0x0801a680
 800c7f8:	0801a6b4 	.word	0x0801a6b4

0800c7fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af04      	add	r7, sp, #16
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c818:	2201      	movs	r2, #1
 800c81a:	9203      	str	r2, [sp, #12]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	9202      	str	r2, [sp, #8]
 800c820:	4a06      	ldr	r2, [pc, #24]	; (800c83c <etharp_request_dst+0x40>)
 800c822:	9201      	str	r2, [sp, #4]
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	4603      	mov	r3, r0
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7ff ff5a 	bl	800c6e4 <etharp_raw>
 800c830:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	0801d47c 	.word	0x0801d47c

0800c840 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c84a:	4a05      	ldr	r2, [pc, #20]	; (800c860 <etharp_request+0x20>)
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff ffd4 	bl	800c7fc <etharp_request_dst>
 800c854:	4603      	mov	r3, r0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	0801d474 	.word	0x0801d474

0800c864 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800c86e:	230e      	movs	r3, #14
 800c870:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800c872:	f7f9 fa07 	bl	8005c84 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	895b      	ldrh	r3, [r3, #10]
 800c87a:	2b0e      	cmp	r3, #14
 800c87c:	d96e      	bls.n	800c95c <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	7bdb      	ldrb	r3, [r3, #15]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c88c:	3301      	adds	r3, #1
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	7b1a      	ldrb	r2, [r3, #12]
 800c89e:	7b5b      	ldrb	r3, [r3, #13]
 800c8a0:	021b      	lsls	r3, r3, #8
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d023      	beq.n	800c8fa <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d10f      	bne.n	800c8da <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	785b      	ldrb	r3, [r3, #1]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d11b      	bne.n	800c8fa <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c8c6:	2b5e      	cmp	r3, #94	; 0x5e
 800c8c8:	d117      	bne.n	800c8fa <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	7b5b      	ldrb	r3, [r3, #13]
 800c8ce:	f043 0310 	orr.w	r3, r3, #16
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	735a      	strb	r2, [r3, #13]
 800c8d8:	e00f      	b.n	800c8fa <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2206      	movs	r2, #6
 800c8de:	4928      	ldr	r1, [pc, #160]	; (800c980 <ethernet_input+0x11c>)
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f00a ff98 	bl	8017816 <memcmp>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	7b5b      	ldrb	r3, [r3, #13]
 800c8f0:	f043 0308 	orr.w	r3, r3, #8
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800c8fa:	89fb      	ldrh	r3, [r7, #14]
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d003      	beq.n	800c908 <ethernet_input+0xa4>
 800c900:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800c904:	d014      	beq.n	800c930 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800c906:	e032      	b.n	800c96e <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c90e:	f003 0308 	and.w	r3, r3, #8
 800c912:	2b00      	cmp	r3, #0
 800c914:	d024      	beq.n	800c960 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c916:	8afb      	ldrh	r3, [r7, #22]
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f002 ff58 	bl	800f7d0 <pbuf_remove_header>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d11e      	bne.n	800c964 <ethernet_input+0x100>
        ip4_input(p, netif);
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fb97 	bl	800d05c <ip4_input>
      break;
 800c92e:	e013      	b.n	800c958 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c936:	f003 0308 	and.w	r3, r3, #8
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d014      	beq.n	800c968 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c93e:	8afb      	ldrh	r3, [r7, #22]
 800c940:	4619      	mov	r1, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f002 ff44 	bl	800f7d0 <pbuf_remove_header>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10e      	bne.n	800c96c <ethernet_input+0x108>
        etharp_input(p, netif);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fb5f 	bl	800c014 <etharp_input>
      break;
 800c956:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	e00c      	b.n	800c976 <ethernet_input+0x112>
    goto free_and_return;
 800c95c:	bf00      	nop
 800c95e:	e006      	b.n	800c96e <ethernet_input+0x10a>
        goto free_and_return;
 800c960:	bf00      	nop
 800c962:	e004      	b.n	800c96e <ethernet_input+0x10a>
        goto free_and_return;
 800c964:	bf00      	nop
 800c966:	e002      	b.n	800c96e <ethernet_input+0x10a>
        goto free_and_return;
 800c968:	bf00      	nop
 800c96a:	e000      	b.n	800c96e <ethernet_input+0x10a>
        goto free_and_return;
 800c96c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f002 ffb4 	bl	800f8dc <pbuf_free>
  return ERR_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	0801d474 	.word	0x0801d474

0800c984 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c992:	8c3b      	ldrh	r3, [r7, #32]
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe ffe7 	bl	800b968 <lwip_htons>
 800c99a:	4603      	mov	r3, r0
 800c99c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c99e:	210e      	movs	r1, #14
 800c9a0:	68b8      	ldr	r0, [r7, #8]
 800c9a2:	f002 ff05 	bl	800f7b0 <pbuf_add_header>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d127      	bne.n	800c9fc <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800c9ac:	f7f9 f96a 	bl	8005c84 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	8afa      	ldrh	r2, [r7, #22]
 800c9ba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	2206      	movs	r2, #6
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f00a ff37 	bl	8017836 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	3306      	adds	r3, #6
 800c9cc:	2206      	movs	r2, #6
 800c9ce:	6879      	ldr	r1, [r7, #4]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f00a ff30 	bl	8017836 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c9dc:	2b06      	cmp	r3, #6
 800c9de:	d006      	beq.n	800c9ee <ethernet_output+0x6a>
 800c9e0:	4b0a      	ldr	r3, [pc, #40]	; (800ca0c <ethernet_output+0x88>)
 800c9e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c9e6:	490a      	ldr	r1, [pc, #40]	; (800ca10 <ethernet_output+0x8c>)
 800c9e8:	480a      	ldr	r0, [pc, #40]	; (800ca14 <ethernet_output+0x90>)
 800c9ea:	f00a ffe9 	bl	80179c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	4798      	blx	r3
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	e002      	b.n	800ca02 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 800c9fc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800c9fe:	f06f 0301 	mvn.w	r3, #1
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3718      	adds	r7, #24
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	0801a6f8 	.word	0x0801a6f8
 800ca10:	0801a788 	.word	0x0801a788
 800ca14:	0801a7bc 	.word	0x0801a7bc

0800ca18 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08e      	sub	sp, #56	; 0x38
 800ca1c:	af04      	add	r7, sp, #16
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ca22:	4b87      	ldr	r3, [pc, #540]	; (800cc40 <icmp_input+0x228>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	f003 030f 	and.w	r3, r3, #15
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ca38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca3a:	2b13      	cmp	r3, #19
 800ca3c:	f240 80e8 	bls.w	800cc10 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	895b      	ldrh	r3, [r3, #10]
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	f240 80e5 	bls.w	800cc14 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ca54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80d2 	beq.w	800cc02 <icmp_input+0x1ea>
 800ca5e:	2b08      	cmp	r3, #8
 800ca60:	f040 80d2 	bne.w	800cc08 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ca64:	4b77      	ldr	r3, [pc, #476]	; (800cc44 <icmp_input+0x22c>)
 800ca66:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca68:	4b75      	ldr	r3, [pc, #468]	; (800cc40 <icmp_input+0x228>)
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca70:	2be0      	cmp	r3, #224	; 0xe0
 800ca72:	f000 80d6 	beq.w	800cc22 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ca76:	4b72      	ldr	r3, [pc, #456]	; (800cc40 <icmp_input+0x228>)
 800ca78:	695b      	ldr	r3, [r3, #20]
 800ca7a:	4a71      	ldr	r2, [pc, #452]	; (800cc40 <icmp_input+0x228>)
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	4611      	mov	r1, r2
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 fceb 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f040 80cc 	bne.w	800cc26 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	891b      	ldrh	r3, [r3, #8]
 800ca92:	2b07      	cmp	r3, #7
 800ca94:	f240 80c0 	bls.w	800cc18 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f9e0 	bl	800ce5e <inet_chksum_pbuf>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f002 ff19 	bl	800f8dc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800caaa:	e0c5      	b.n	800cc38 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800caac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caae:	330e      	adds	r3, #14
 800cab0:	4619      	mov	r1, r3
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f002 fe7c 	bl	800f7b0 <pbuf_add_header>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d04b      	beq.n	800cb56 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	891a      	ldrh	r2, [r3, #8]
 800cac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cac4:	4413      	add	r3, r2
 800cac6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	891b      	ldrh	r3, [r3, #8]
 800cacc:	8b7a      	ldrh	r2, [r7, #26]
 800cace:	429a      	cmp	r2, r3
 800cad0:	f0c0 80ab 	bcc.w	800cc2a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cad4:	8b7b      	ldrh	r3, [r7, #26]
 800cad6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cada:	4619      	mov	r1, r3
 800cadc:	200e      	movs	r0, #14
 800cade:	f002 fc19 	bl	800f314 <pbuf_alloc>
 800cae2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 80a1 	beq.w	800cc2e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	895b      	ldrh	r3, [r3, #10]
 800caf0:	461a      	mov	r2, r3
 800caf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caf4:	3308      	adds	r3, #8
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d203      	bcs.n	800cb02 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cafa:	6978      	ldr	r0, [r7, #20]
 800cafc:	f002 feee 	bl	800f8dc <pbuf_free>
          goto icmperr;
 800cb00:	e096      	b.n	800cc30 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f00a fe93 	bl	8017836 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cb10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb12:	4619      	mov	r1, r3
 800cb14:	6978      	ldr	r0, [r7, #20]
 800cb16:	f002 fe5b 	bl	800f7d0 <pbuf_remove_header>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d009      	beq.n	800cb34 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cb20:	4b49      	ldr	r3, [pc, #292]	; (800cc48 <icmp_input+0x230>)
 800cb22:	22b6      	movs	r2, #182	; 0xb6
 800cb24:	4949      	ldr	r1, [pc, #292]	; (800cc4c <icmp_input+0x234>)
 800cb26:	484a      	ldr	r0, [pc, #296]	; (800cc50 <icmp_input+0x238>)
 800cb28:	f00a ff4a 	bl	80179c0 <iprintf>
          pbuf_free(r);
 800cb2c:	6978      	ldr	r0, [r7, #20]
 800cb2e:	f002 fed5 	bl	800f8dc <pbuf_free>
          goto icmperr;
 800cb32:	e07d      	b.n	800cc30 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	6978      	ldr	r0, [r7, #20]
 800cb38:	f003 f804 	bl	800fb44 <pbuf_copy>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cb42:	6978      	ldr	r0, [r7, #20]
 800cb44:	f002 feca 	bl	800f8dc <pbuf_free>
          goto icmperr;
 800cb48:	e072      	b.n	800cc30 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f002 fec6 	bl	800f8dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	607b      	str	r3, [r7, #4]
 800cb54:	e00f      	b.n	800cb76 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb58:	330e      	adds	r3, #14
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f002 fe37 	bl	800f7d0 <pbuf_remove_header>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d006      	beq.n	800cb76 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cb68:	4b37      	ldr	r3, [pc, #220]	; (800cc48 <icmp_input+0x230>)
 800cb6a:	22c7      	movs	r2, #199	; 0xc7
 800cb6c:	4939      	ldr	r1, [pc, #228]	; (800cc54 <icmp_input+0x23c>)
 800cb6e:	4838      	ldr	r0, [pc, #224]	; (800cc50 <icmp_input+0x238>)
 800cb70:	f00a ff26 	bl	80179c0 <iprintf>
          goto icmperr;
 800cb74:	e05c      	b.n	800cc30 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cb7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f002 fe15 	bl	800f7b0 <pbuf_add_header>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d13c      	bne.n	800cc06 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cb9a:	4b29      	ldr	r3, [pc, #164]	; (800cc40 <icmp_input+0x228>)
 800cb9c:	691a      	ldr	r2, [r3, #16]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2200      	movs	r2, #0
 800cba6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	885b      	ldrh	r3, [r3, #2]
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d907      	bls.n	800cbc6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	885b      	ldrh	r3, [r3, #2]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	3309      	adds	r3, #9
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	805a      	strh	r2, [r3, #2]
 800cbc4:	e006      	b.n	800cbd4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	885b      	ldrh	r3, [r3, #2]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	3308      	adds	r3, #8
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	22ff      	movs	r2, #255	; 0xff
 800cbd8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	729a      	strb	r2, [r3, #10]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	9302      	str	r3, [sp, #8]
 800cbe8:	2301      	movs	r3, #1
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	2300      	movs	r3, #0
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	23ff      	movs	r3, #255	; 0xff
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	69f9      	ldr	r1, [r7, #28]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fb56 	bl	800d2a8 <ip4_output_if>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cc00:	e001      	b.n	800cc06 <icmp_input+0x1ee>
      break;
 800cc02:	bf00      	nop
 800cc04:	e000      	b.n	800cc08 <icmp_input+0x1f0>
      break;
 800cc06:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f002 fe67 	bl	800f8dc <pbuf_free>
  return;
 800cc0e:	e013      	b.n	800cc38 <icmp_input+0x220>
    goto lenerr;
 800cc10:	bf00      	nop
 800cc12:	e002      	b.n	800cc1a <icmp_input+0x202>
    goto lenerr;
 800cc14:	bf00      	nop
 800cc16:	e000      	b.n	800cc1a <icmp_input+0x202>
        goto lenerr;
 800cc18:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f002 fe5e 	bl	800f8dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc20:	e00a      	b.n	800cc38 <icmp_input+0x220>
        goto icmperr;
 800cc22:	bf00      	nop
 800cc24:	e004      	b.n	800cc30 <icmp_input+0x218>
        goto icmperr;
 800cc26:	bf00      	nop
 800cc28:	e002      	b.n	800cc30 <icmp_input+0x218>
          goto icmperr;
 800cc2a:	bf00      	nop
 800cc2c:	e000      	b.n	800cc30 <icmp_input+0x218>
          goto icmperr;
 800cc2e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f002 fe53 	bl	800f8dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc36:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cc38:	3728      	adds	r7, #40	; 0x28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	24009dd8 	.word	0x24009dd8
 800cc44:	24009dec 	.word	0x24009dec
 800cc48:	0801a7e4 	.word	0x0801a7e4
 800cc4c:	0801a874 	.word	0x0801a874
 800cc50:	0801a8ac 	.word	0x0801a8ac
 800cc54:	0801a8d4 	.word	0x0801a8d4

0800cc58 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	461a      	mov	r2, r3
 800cc68:	2103      	movs	r1, #3
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f814 	bl	800cc98 <icmp_send_response>
}
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	461a      	mov	r2, r3
 800cc88:	210b      	movs	r1, #11
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f804 	bl	800cc98 <icmp_send_response>
}
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08c      	sub	sp, #48	; 0x30
 800cc9c:	af04      	add	r7, sp, #16
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
 800cca4:	4613      	mov	r3, r2
 800cca6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ccac:	2124      	movs	r1, #36	; 0x24
 800ccae:	2022      	movs	r0, #34	; 0x22
 800ccb0:	f002 fb30 	bl	800f314 <pbuf_alloc>
 800ccb4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d056      	beq.n	800cd6a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	895b      	ldrh	r3, [r3, #10]
 800ccc0:	2b23      	cmp	r3, #35	; 0x23
 800ccc2:	d806      	bhi.n	800ccd2 <icmp_send_response+0x3a>
 800ccc4:	4b2b      	ldr	r3, [pc, #172]	; (800cd74 <icmp_send_response+0xdc>)
 800ccc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ccca:	492b      	ldr	r1, [pc, #172]	; (800cd78 <icmp_send_response+0xe0>)
 800cccc:	482b      	ldr	r0, [pc, #172]	; (800cd7c <icmp_send_response+0xe4>)
 800ccce:	f00a fe77 	bl	80179c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	78fa      	ldrb	r2, [r7, #3]
 800cce2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	78ba      	ldrb	r2, [r7, #2]
 800cce8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2200      	movs	r2, #0
 800ccee:	711a      	strb	r2, [r3, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	719a      	strb	r2, [r3, #6]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f103 0008 	add.w	r0, r3, #8
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	221c      	movs	r2, #28
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	f00a fd92 	bl	8017836 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cd18:	f107 030c 	add.w	r3, r7, #12
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 f903 	bl	800cf28 <ip4_route>
 800cd22:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d01b      	beq.n	800cd62 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	709a      	strb	r2, [r3, #2]
 800cd30:	2200      	movs	r2, #0
 800cd32:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	895b      	ldrh	r3, [r3, #10]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6978      	ldr	r0, [r7, #20]
 800cd3c:	f000 f87d 	bl	800ce3a <inet_chksum>
 800cd40:	4603      	mov	r3, r0
 800cd42:	461a      	mov	r2, r3
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd48:	f107 020c 	add.w	r2, r7, #12
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	9302      	str	r3, [sp, #8]
 800cd50:	2301      	movs	r3, #1
 800cd52:	9301      	str	r3, [sp, #4]
 800cd54:	2300      	movs	r3, #0
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	23ff      	movs	r3, #255	; 0xff
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	69f8      	ldr	r0, [r7, #28]
 800cd5e:	f000 faa3 	bl	800d2a8 <ip4_output_if>
  }
  pbuf_free(q);
 800cd62:	69f8      	ldr	r0, [r7, #28]
 800cd64:	f002 fdba 	bl	800f8dc <pbuf_free>
 800cd68:	e000      	b.n	800cd6c <icmp_send_response+0xd4>
    return;
 800cd6a:	bf00      	nop
}
 800cd6c:	3720      	adds	r7, #32
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	0801a7e4 	.word	0x0801a7e4
 800cd78:	0801a908 	.word	0x0801a908
 800cd7c:	0801a8ac 	.word	0x0801a8ac

0800cd80 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b089      	sub	sp, #36	; 0x24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00d      	beq.n	800cdc0 <lwip_standard_chksum+0x40>
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	dd0a      	ble.n	800cdc0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cdaa:	69fa      	ldr	r2, [r7, #28]
 800cdac:	1c53      	adds	r3, r2, #1
 800cdae:	61fb      	str	r3, [r7, #28]
 800cdb0:	f107 030e 	add.w	r3, r7, #14
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	7812      	ldrb	r2, [r2, #0]
 800cdb8:	701a      	strb	r2, [r3, #0]
    len--;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cdc4:	e00a      	b.n	800cddc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	1c9a      	adds	r2, r3, #2
 800cdca:	61ba      	str	r2, [r7, #24]
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	3b02      	subs	r3, #2
 800cdda:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	dcf1      	bgt.n	800cdc6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	dd04      	ble.n	800cdf2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cde8:	f107 030e 	add.w	r3, r7, #14
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	7812      	ldrb	r2, [r2, #0]
 800cdf0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800cdf2:	89fb      	ldrh	r3, [r7, #14]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	0c1a      	lsrs	r2, r3, #16
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4413      	add	r3, r2
 800ce06:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	0c1a      	lsrs	r2, r3, #16
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	4413      	add	r3, r2
 800ce12:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d007      	beq.n	800ce2a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	021b      	lsls	r3, r3, #8
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	0a1b      	lsrs	r3, r3, #8
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	4313      	orrs	r3, r2
 800ce28:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	b29b      	uxth	r3, r3
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3724      	adds	r7, #36	; 0x24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	460b      	mov	r3, r1
 800ce44:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ce46:	887b      	ldrh	r3, [r7, #2]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff ff98 	bl	800cd80 <lwip_standard_chksum>
 800ce50:	4603      	mov	r3, r0
 800ce52:	43db      	mvns	r3, r3
 800ce54:	b29b      	uxth	r3, r3
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b086      	sub	sp, #24
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	613b      	str	r3, [r7, #16]
 800ce72:	e02b      	b.n	800cecc <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	895b      	ldrh	r3, [r3, #10]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4610      	mov	r0, r2
 800ce80:	f7ff ff7e 	bl	800cd80 <lwip_standard_chksum>
 800ce84:	4603      	mov	r3, r0
 800ce86:	461a      	mov	r2, r3
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	0c1a      	lsrs	r2, r3, #16
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	4413      	add	r3, r2
 800ce98:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	895b      	ldrh	r3, [r3, #10]
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00e      	beq.n	800cec6 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bf0c      	ite	eq
 800ceae:	2301      	moveq	r3, #1
 800ceb0:	2300      	movne	r3, #0
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	021b      	lsls	r3, r3, #8
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	0a1b      	lsrs	r3, r3, #8
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	4313      	orrs	r3, r2
 800cec4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	613b      	str	r3, [r7, #16]
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1d0      	bne.n	800ce74 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d007      	beq.n	800cee8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	021b      	lsls	r3, r3, #8
 800cedc:	b29a      	uxth	r2, r3
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	0a1b      	lsrs	r3, r3, #8
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	4313      	orrs	r3, r2
 800cee6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	43db      	mvns	r3, r3
 800ceee:	b29b      	uxth	r3, r3
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cf02:	f003 f961 	bl	80101c8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cf06:	f001 f9ed 	bl	800e2e4 <mem_init>
  memp_init();
 800cf0a:	f001 fd35 	bl	800e978 <memp_init>
  pbuf_init();
  netif_init();
 800cf0e:	f001 fe60 	bl	800ebd2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cf12:	f009 fdfb 	bl	8016b0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cf16:	f003 f9d3 	bl	80102c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cf1a:	f009 fd37 	bl	801698c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800cf30:	f7f8 fea8 	bl	8005c84 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cf34:	4b32      	ldr	r3, [pc, #200]	; (800d000 <ip4_route+0xd8>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	e036      	b.n	800cfaa <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d02b      	beq.n	800cfa4 <ip4_route+0x7c>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf52:	089b      	lsrs	r3, r3, #2
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d022      	beq.n	800cfa4 <ip4_route+0x7c>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3304      	adds	r3, #4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d01d      	beq.n	800cfa4 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	405a      	eors	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3308      	adds	r3, #8
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	e038      	b.n	800cff6 <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf8a:	f003 0302 	and.w	r3, r3, #2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d108      	bne.n	800cfa4 <ip4_route+0x7c>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	330c      	adds	r3, #12
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d101      	bne.n	800cfa4 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	e028      	b.n	800cff6 <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1c5      	bne.n	800cf3c <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cfb0:	4b14      	ldr	r3, [pc, #80]	; (800d004 <ip4_route+0xdc>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01a      	beq.n	800cfee <ip4_route+0xc6>
 800cfb8:	4b12      	ldr	r3, [pc, #72]	; (800d004 <ip4_route+0xdc>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d012      	beq.n	800cfee <ip4_route+0xc6>
 800cfc8:	4b0e      	ldr	r3, [pc, #56]	; (800d004 <ip4_route+0xdc>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00a      	beq.n	800cfee <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <ip4_route+0xdc>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3304      	adds	r3, #4
 800cfde:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b7f      	cmp	r3, #127	; 0x7f
 800cfec:	d101      	bne.n	800cff2 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	e001      	b.n	800cff6 <ip4_route+0xce>
  }

  return netif_default;
 800cff2:	4b04      	ldr	r3, [pc, #16]	; (800d004 <ip4_route+0xdc>)
 800cff4:	681b      	ldr	r3, [r3, #0]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	24010898 	.word	0x24010898
 800d004:	2401089c 	.word	0x2401089c

0800d008 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d016      	beq.n	800d04e <ip4_input_accept+0x46>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3304      	adds	r3, #4
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d011      	beq.n	800d04e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d02a:	4b0b      	ldr	r3, [pc, #44]	; (800d058 <ip4_input_accept+0x50>)
 800d02c:	695a      	ldr	r2, [r3, #20]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	3304      	adds	r3, #4
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	429a      	cmp	r2, r3
 800d036:	d008      	beq.n	800d04a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d038:	4b07      	ldr	r3, [pc, #28]	; (800d058 <ip4_input_accept+0x50>)
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fa0c 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800d044:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e000      	b.n	800d050 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	24009dd8 	.word	0x24009dd8

0800d05c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800d066:	f7f8 fe0d 	bl	8005c84 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	091b      	lsrs	r3, r3, #4
 800d076:	b2db      	uxtb	r3, r3
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d004      	beq.n	800d086 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f002 fc2d 	bl	800f8dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	e107      	b.n	800d296 <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	f003 030f 	and.w	r3, r3, #15
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	b2db      	uxtb	r3, r3
 800d094:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	885b      	ldrh	r3, [r3, #2]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fe fc63 	bl	800b968 <lwip_htons>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	891b      	ldrh	r3, [r3, #8]
 800d0aa:	89ba      	ldrh	r2, [r7, #12]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d204      	bcs.n	800d0ba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800d0b0:	89bb      	ldrh	r3, [r7, #12]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f002 fa8d 	bl	800f5d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	895b      	ldrh	r3, [r3, #10]
 800d0be:	89fa      	ldrh	r2, [r7, #14]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d807      	bhi.n	800d0d4 <ip4_input+0x78>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	891b      	ldrh	r3, [r3, #8]
 800d0c8:	89ba      	ldrh	r2, [r7, #12]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d802      	bhi.n	800d0d4 <ip4_input+0x78>
 800d0ce:	89fb      	ldrh	r3, [r7, #14]
 800d0d0:	2b13      	cmp	r3, #19
 800d0d2:	d804      	bhi.n	800d0de <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f002 fc01 	bl	800f8dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e0db      	b.n	800d296 <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	4a6f      	ldr	r2, [pc, #444]	; (800d2a0 <ip4_input+0x244>)
 800d0e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	4a6d      	ldr	r2, [pc, #436]	; (800d2a0 <ip4_input+0x244>)
 800d0ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0ee:	4b6c      	ldr	r3, [pc, #432]	; (800d2a0 <ip4_input+0x244>)
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0f6:	2be0      	cmp	r3, #224	; 0xe0
 800d0f8:	d112      	bne.n	800d120 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d007      	beq.n	800d11a <ip4_input+0xbe>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	3304      	adds	r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <ip4_input+0xbe>
      netif = inp;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	e02a      	b.n	800d170 <ip4_input+0x114>
    } else {
      netif = NULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	e027      	b.n	800d170 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d120:	6838      	ldr	r0, [r7, #0]
 800d122:	f7ff ff71 	bl	800d008 <ip4_input_accept>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <ip4_input+0xd6>
      netif = inp;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	e01e      	b.n	800d170 <ip4_input+0x114>
    } else {
      netif = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d136:	4b5a      	ldr	r3, [pc, #360]	; (800d2a0 <ip4_input+0x244>)
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b7f      	cmp	r3, #127	; 0x7f
 800d13e:	d017      	beq.n	800d170 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d140:	4b58      	ldr	r3, [pc, #352]	; (800d2a4 <ip4_input+0x248>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	613b      	str	r3, [r7, #16]
 800d146:	e00e      	b.n	800d166 <ip4_input+0x10a>
          if (netif == inp) {
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d006      	beq.n	800d15e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d150:	6938      	ldr	r0, [r7, #16]
 800d152:	f7ff ff59 	bl	800d008 <ip4_input_accept>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d108      	bne.n	800d16e <ip4_input+0x112>
 800d15c:	e000      	b.n	800d160 <ip4_input+0x104>
            continue;
 800d15e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	613b      	str	r3, [r7, #16]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1ed      	bne.n	800d148 <ip4_input+0xec>
 800d16c:	e000      	b.n	800d170 <ip4_input+0x114>
            break;
 800d16e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d170:	4b4b      	ldr	r3, [pc, #300]	; (800d2a0 <ip4_input+0x244>)
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	4618      	mov	r0, r3
 800d178:	f000 f970 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d105      	bne.n	800d18e <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d182:	4b47      	ldr	r3, [pc, #284]	; (800d2a0 <ip4_input+0x244>)
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d18a:	2be0      	cmp	r3, #224	; 0xe0
 800d18c:	d104      	bne.n	800d198 <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f002 fba4 	bl	800f8dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d194:	2300      	movs	r3, #0
 800d196:	e07e      	b.n	800d296 <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d104      	bne.n	800d1a8 <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f002 fb9c 	bl	800f8dc <pbuf_free>
    return ERR_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	e076      	b.n	800d296 <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	88db      	ldrh	r3, [r3, #6]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 fc94 	bl	800dae8 <ip4_reass>
 800d1c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <ip4_input+0x170>
      return ERR_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	e064      	b.n	800d296 <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d1d2:	4a33      	ldr	r2, [pc, #204]	; (800d2a0 <ip4_input+0x244>)
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d1d8:	4a31      	ldr	r2, [pc, #196]	; (800d2a0 <ip4_input+0x244>)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d1de:	4a30      	ldr	r2, [pc, #192]	; (800d2a0 <ip4_input+0x244>)
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	f003 030f 	and.w	r3, r3, #15
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	4b2a      	ldr	r3, [pc, #168]	; (800d2a0 <ip4_input+0x244>)
 800d1f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d1f8:	89fb      	ldrh	r3, [r7, #14]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f002 fae7 	bl	800f7d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	7a5b      	ldrb	r3, [r3, #9]
 800d206:	2b11      	cmp	r3, #17
 800d208:	d006      	beq.n	800d218 <ip4_input+0x1bc>
 800d20a:	2b11      	cmp	r3, #17
 800d20c:	dc13      	bgt.n	800d236 <ip4_input+0x1da>
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d00c      	beq.n	800d22c <ip4_input+0x1d0>
 800d212:	2b06      	cmp	r3, #6
 800d214:	d005      	beq.n	800d222 <ip4_input+0x1c6>
 800d216:	e00e      	b.n	800d236 <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f009 fd24 	bl	8016c68 <udp_input>
        break;
 800d220:	e026      	b.n	800d270 <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d222:	6839      	ldr	r1, [r7, #0]
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f004 ff1f 	bl	8012068 <tcp_input>
        break;
 800d22a:	e021      	b.n	800d270 <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7ff fbf2 	bl	800ca18 <icmp_input>
        break;
 800d234:	e01c      	b.n	800d270 <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d236:	4b1a      	ldr	r3, [pc, #104]	; (800d2a0 <ip4_input+0x244>)
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	6939      	ldr	r1, [r7, #16]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f000 f90d 	bl	800d45c <ip4_addr_isbroadcast_u32>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10f      	bne.n	800d268 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d248:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <ip4_input+0x244>)
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d250:	2be0      	cmp	r3, #224	; 0xe0
 800d252:	d009      	beq.n	800d268 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f002 fb2b 	bl	800f8b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d260:	2102      	movs	r1, #2
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff fcf8 	bl	800cc58 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f002 fb37 	bl	800f8dc <pbuf_free>
        break;
 800d26e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d270:	4b0b      	ldr	r3, [pc, #44]	; (800d2a0 <ip4_input+0x244>)
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d276:	4b0a      	ldr	r3, [pc, #40]	; (800d2a0 <ip4_input+0x244>)
 800d278:	2200      	movs	r2, #0
 800d27a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d27c:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <ip4_input+0x244>)
 800d27e:	2200      	movs	r2, #0
 800d280:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d282:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <ip4_input+0x244>)
 800d284:	2200      	movs	r2, #0
 800d286:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d288:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <ip4_input+0x244>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d28e:	4b04      	ldr	r3, [pc, #16]	; (800d2a0 <ip4_input+0x244>)
 800d290:	2200      	movs	r2, #0
 800d292:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	24009dd8 	.word	0x24009dd8
 800d2a4:	24010898 	.word	0x24010898

0800d2a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b08a      	sub	sp, #40	; 0x28
 800d2ac:	af04      	add	r7, sp, #16
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d009      	beq.n	800d2d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <ip4_output_if+0x26>
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d102      	bne.n	800d2d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d2d4:	78fa      	ldrb	r2, [r7, #3]
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	9302      	str	r3, [sp, #8]
 800d2da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2de:	9301      	str	r3, [sp, #4]
 800d2e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	6979      	ldr	r1, [r7, #20]
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 f805 	bl	800d2fc <ip4_output_if_src>
 800d2f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3718      	adds	r7, #24
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800d30a:	f7f8 fcbb 	bl	8005c84 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	7b9b      	ldrb	r3, [r3, #14]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d006      	beq.n	800d324 <ip4_output_if_src+0x28>
 800d316:	4b4b      	ldr	r3, [pc, #300]	; (800d444 <ip4_output_if_src+0x148>)
 800d318:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d31c:	494a      	ldr	r1, [pc, #296]	; (800d448 <ip4_output_if_src+0x14c>)
 800d31e:	484b      	ldr	r0, [pc, #300]	; (800d44c <ip4_output_if_src+0x150>)
 800d320:	f00a fb4e 	bl	80179c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d060      	beq.n	800d3ec <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 800d32a:	2314      	movs	r3, #20
 800d32c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d32e:	2114      	movs	r1, #20
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f002 fa3d 	bl	800f7b0 <pbuf_add_header>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d33c:	f06f 0301 	mvn.w	r3, #1
 800d340:	e07c      	b.n	800d43c <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	895b      	ldrh	r3, [r3, #10]
 800d34c:	2b13      	cmp	r3, #19
 800d34e:	d806      	bhi.n	800d35e <ip4_output_if_src+0x62>
 800d350:	4b3c      	ldr	r3, [pc, #240]	; (800d444 <ip4_output_if_src+0x148>)
 800d352:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d356:	493e      	ldr	r1, [pc, #248]	; (800d450 <ip4_output_if_src+0x154>)
 800d358:	483c      	ldr	r0, [pc, #240]	; (800d44c <ip4_output_if_src+0x150>)
 800d35a:	f00a fb31 	bl	80179c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	78fa      	ldrb	r2, [r7, #3]
 800d362:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d36a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d374:	8b7b      	ldrh	r3, [r7, #26]
 800d376:	089b      	lsrs	r3, r3, #2
 800d378:	b29b      	uxth	r3, r3
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d380:	b2da      	uxtb	r2, r3
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d38c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	891b      	ldrh	r3, [r3, #8]
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fae8 	bl	800b968 <lwip_htons>
 800d398:	4603      	mov	r3, r0
 800d39a:	461a      	mov	r2, r3
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	719a      	strb	r2, [r3, #6]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d3aa:	4b2a      	ldr	r3, [pc, #168]	; (800d454 <ip4_output_if_src+0x158>)
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe fada 	bl	800b968 <lwip_htons>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d3bc:	4b25      	ldr	r3, [pc, #148]	; (800d454 <ip4_output_if_src+0x158>)
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	4b23      	ldr	r3, [pc, #140]	; (800d454 <ip4_output_if_src+0x158>)
 800d3c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d104      	bne.n	800d3d8 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d3ce:	4b22      	ldr	r3, [pc, #136]	; (800d458 <ip4_output_if_src+0x15c>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	60da      	str	r2, [r3, #12]
 800d3d6:	e003      	b.n	800d3e0 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	729a      	strb	r2, [r3, #10]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	72da      	strb	r2, [r3, #11]
 800d3ea:	e00f      	b.n	800d40c <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	895b      	ldrh	r3, [r3, #10]
 800d3f0:	2b13      	cmp	r3, #19
 800d3f2:	d802      	bhi.n	800d3fa <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d3f4:	f06f 0301 	mvn.w	r3, #1
 800d3f8:	e020      	b.n	800d43c <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d406:	f107 0314 	add.w	r3, r7, #20
 800d40a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00c      	beq.n	800d42e <ip4_output_if_src+0x132>
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	891a      	ldrh	r2, [r3, #8]
 800d418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d906      	bls.n	800d42e <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f000 fd53 	bl	800ded0 <ip4_frag>
 800d42a:	4603      	mov	r3, r0
 800d42c:	e006      	b.n	800d43c <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	68f9      	ldr	r1, [r7, #12]
 800d436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3720      	adds	r7, #32
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	0801a934 	.word	0x0801a934
 800d448:	0801a9c4 	.word	0x0801a9c4
 800d44c:	0801a9d0 	.word	0x0801a9d0
 800d450:	0801a9f8 	.word	0x0801a9f8
 800d454:	24009df0 	.word	0x24009df0
 800d458:	0801d484 	.word	0x0801d484

0800d45c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d470:	d002      	beq.n	800d478 <ip4_addr_isbroadcast_u32+0x1c>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d478:	2301      	movs	r3, #1
 800d47a:	e02a      	b.n	800d4d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d482:	f003 0302 	and.w	r3, r3, #2
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e021      	b.n	800d4d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	3304      	adds	r3, #4
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	429a      	cmp	r2, r3
 800d498:	d101      	bne.n	800d49e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	e019      	b.n	800d4d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	405a      	eors	r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10d      	bne.n	800d4d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	43da      	mvns	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d101      	bne.n	800d4d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e000      	b.n	800d4d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d4d0:	2300      	movs	r3, #0
  }
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3714      	adds	r7, #20
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
	...

0800d4e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d4ea:	4b12      	ldr	r3, [pc, #72]	; (800d534 <ip_reass_tmr+0x54>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d4f0:	e018      	b.n	800d524 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	7fdb      	ldrb	r3, [r3, #31]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00b      	beq.n	800d512 <ip_reass_tmr+0x32>
      r->timer--;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	7fdb      	ldrb	r3, [r3, #31]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	b2da      	uxtb	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	e008      	b.n	800d524 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d51c:	68b9      	ldr	r1, [r7, #8]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f80a 	bl	800d538 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e3      	bne.n	800d4f2 <ip_reass_tmr+0x12>
    }
  }
}
 800d52a:	bf00      	nop
 800d52c:	bf00      	nop
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	24009df4 	.word	0x24009df4

0800d538 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d105      	bne.n	800d55a <ip_reass_free_complete_datagram+0x22>
 800d54e:	4b45      	ldr	r3, [pc, #276]	; (800d664 <ip_reass_free_complete_datagram+0x12c>)
 800d550:	22ab      	movs	r2, #171	; 0xab
 800d552:	4945      	ldr	r1, [pc, #276]	; (800d668 <ip_reass_free_complete_datagram+0x130>)
 800d554:	4845      	ldr	r0, [pc, #276]	; (800d66c <ip_reass_free_complete_datagram+0x134>)
 800d556:	f00a fa33 	bl	80179c0 <iprintf>
  if (prev != NULL) {
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00a      	beq.n	800d576 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d005      	beq.n	800d576 <ip_reass_free_complete_datagram+0x3e>
 800d56a:	4b3e      	ldr	r3, [pc, #248]	; (800d664 <ip_reass_free_complete_datagram+0x12c>)
 800d56c:	22ad      	movs	r2, #173	; 0xad
 800d56e:	4940      	ldr	r1, [pc, #256]	; (800d670 <ip_reass_free_complete_datagram+0x138>)
 800d570:	483e      	ldr	r0, [pc, #248]	; (800d66c <ip_reass_free_complete_datagram+0x134>)
 800d572:	f00a fa25 	bl	80179c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	889b      	ldrh	r3, [r3, #4]
 800d582:	b29b      	uxth	r3, r3
 800d584:	2b00      	cmp	r3, #0
 800d586:	d12a      	bne.n	800d5de <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	6858      	ldr	r0, [r3, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	3308      	adds	r3, #8
 800d59e:	2214      	movs	r2, #20
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f00a f948 	bl	8017836 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	69b8      	ldr	r0, [r7, #24]
 800d5aa:	f7ff fb65 	bl	800cc78 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d5ae:	69b8      	ldr	r0, [r7, #24]
 800d5b0:	f002 fa22 	bl	800f9f8 <pbuf_clen>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d5b8:	8bfa      	ldrh	r2, [r7, #30]
 800d5ba:	8a7b      	ldrh	r3, [r7, #18]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c2:	db05      	blt.n	800d5d0 <ip_reass_free_complete_datagram+0x98>
 800d5c4:	4b27      	ldr	r3, [pc, #156]	; (800d664 <ip_reass_free_complete_datagram+0x12c>)
 800d5c6:	22bc      	movs	r2, #188	; 0xbc
 800d5c8:	492a      	ldr	r1, [pc, #168]	; (800d674 <ip_reass_free_complete_datagram+0x13c>)
 800d5ca:	4828      	ldr	r0, [pc, #160]	; (800d66c <ip_reass_free_complete_datagram+0x134>)
 800d5cc:	f00a f9f8 	bl	80179c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d5d0:	8bfa      	ldrh	r2, [r7, #30]
 800d5d2:	8a7b      	ldrh	r3, [r7, #18]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d5d8:	69b8      	ldr	r0, [r7, #24]
 800d5da:	f002 f97f 	bl	800f8dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d5e4:	e01f      	b.n	800d626 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f002 f9fe 	bl	800f9f8 <pbuf_clen>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d600:	8bfa      	ldrh	r2, [r7, #30]
 800d602:	8a7b      	ldrh	r3, [r7, #18]
 800d604:	4413      	add	r3, r2
 800d606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d60a:	db05      	blt.n	800d618 <ip_reass_free_complete_datagram+0xe0>
 800d60c:	4b15      	ldr	r3, [pc, #84]	; (800d664 <ip_reass_free_complete_datagram+0x12c>)
 800d60e:	22cc      	movs	r2, #204	; 0xcc
 800d610:	4918      	ldr	r1, [pc, #96]	; (800d674 <ip_reass_free_complete_datagram+0x13c>)
 800d612:	4816      	ldr	r0, [pc, #88]	; (800d66c <ip_reass_free_complete_datagram+0x134>)
 800d614:	f00a f9d4 	bl	80179c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d618:	8bfa      	ldrh	r2, [r7, #30]
 800d61a:	8a7b      	ldrh	r3, [r7, #18]
 800d61c:	4413      	add	r3, r2
 800d61e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f002 f95b 	bl	800f8dc <pbuf_free>
  while (p != NULL) {
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1dc      	bne.n	800d5e6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f8c2 	bl	800d7b8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d634:	4b10      	ldr	r3, [pc, #64]	; (800d678 <ip_reass_free_complete_datagram+0x140>)
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	8bfa      	ldrh	r2, [r7, #30]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d905      	bls.n	800d64a <ip_reass_free_complete_datagram+0x112>
 800d63e:	4b09      	ldr	r3, [pc, #36]	; (800d664 <ip_reass_free_complete_datagram+0x12c>)
 800d640:	22d2      	movs	r2, #210	; 0xd2
 800d642:	490e      	ldr	r1, [pc, #56]	; (800d67c <ip_reass_free_complete_datagram+0x144>)
 800d644:	4809      	ldr	r0, [pc, #36]	; (800d66c <ip_reass_free_complete_datagram+0x134>)
 800d646:	f00a f9bb 	bl	80179c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d64a:	4b0b      	ldr	r3, [pc, #44]	; (800d678 <ip_reass_free_complete_datagram+0x140>)
 800d64c:	881a      	ldrh	r2, [r3, #0]
 800d64e:	8bfb      	ldrh	r3, [r7, #30]
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	b29a      	uxth	r2, r3
 800d654:	4b08      	ldr	r3, [pc, #32]	; (800d678 <ip_reass_free_complete_datagram+0x140>)
 800d656:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d658:	8bfb      	ldrh	r3, [r7, #30]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3720      	adds	r7, #32
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	0801aa28 	.word	0x0801aa28
 800d668:	0801aabc 	.word	0x0801aabc
 800d66c:	0801aac8 	.word	0x0801aac8
 800d670:	0801aaf0 	.word	0x0801aaf0
 800d674:	0801ab04 	.word	0x0801ab04
 800d678:	24009df8 	.word	0x24009df8
 800d67c:	0801ab24 	.word	0x0801ab24

0800d680 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08a      	sub	sp, #40	; 0x28
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d68a:	2300      	movs	r3, #0
 800d68c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d692:	2300      	movs	r3, #0
 800d694:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d696:	2300      	movs	r3, #0
 800d698:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d69e:	4b28      	ldr	r3, [pc, #160]	; (800d740 <ip_reass_remove_oldest_datagram+0xc0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d6a4:	e030      	b.n	800d708 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a8:	695a      	ldr	r2, [r3, #20]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d10c      	bne.n	800d6cc <ip_reass_remove_oldest_datagram+0x4c>
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	699a      	ldr	r2, [r3, #24]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d106      	bne.n	800d6cc <ip_reass_remove_oldest_datagram+0x4c>
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	899a      	ldrh	r2, [r3, #12]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	889b      	ldrh	r3, [r3, #4]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d014      	beq.n	800d6f6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d104      	bne.n	800d6e2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	61bb      	str	r3, [r7, #24]
 800d6e0:	e009      	b.n	800d6f6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	7fda      	ldrb	r2, [r3, #31]
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	7fdb      	ldrb	r3, [r3, #31]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d803      	bhi.n	800d6f6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d700:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1cb      	bne.n	800d6a6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d008      	beq.n	800d726 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d714:	69b9      	ldr	r1, [r7, #24]
 800d716:	6a38      	ldr	r0, [r7, #32]
 800d718:	f7ff ff0e 	bl	800d538 <ip_reass_free_complete_datagram>
 800d71c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	4413      	add	r3, r2
 800d724:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	da02      	bge.n	800d734 <ip_reass_remove_oldest_datagram+0xb4>
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	2b01      	cmp	r3, #1
 800d732:	dcac      	bgt.n	800d68e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d734:	697b      	ldr	r3, [r7, #20]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3728      	adds	r7, #40	; 0x28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	24009df4 	.word	0x24009df4

0800d744 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d74e:	2004      	movs	r0, #4
 800d750:	f001 f980 	bl	800ea54 <memp_malloc>
 800d754:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d110      	bne.n	800d77e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ff8e 	bl	800d680 <ip_reass_remove_oldest_datagram>
 800d764:	4602      	mov	r2, r0
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	4293      	cmp	r3, r2
 800d76a:	dc03      	bgt.n	800d774 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d76c:	2004      	movs	r0, #4
 800d76e:	f001 f971 	bl	800ea54 <memp_malloc>
 800d772:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	e016      	b.n	800d7ac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d77e:	2220      	movs	r2, #32
 800d780:	2100      	movs	r1, #0
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f00a f87f 	bl	8017886 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	220f      	movs	r2, #15
 800d78c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <ip_reass_enqueue_new_datagram+0x70>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d796:	4a07      	ldr	r2, [pc, #28]	; (800d7b4 <ip_reass_enqueue_new_datagram+0x70>)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3308      	adds	r3, #8
 800d7a0:	2214      	movs	r2, #20
 800d7a2:	6879      	ldr	r1, [r7, #4]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f00a f846 	bl	8017836 <memcpy>
  return ipr;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	24009df4 	.word	0x24009df4

0800d7b8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d7c2:	4b10      	ldr	r3, [pc, #64]	; (800d804 <ip_reass_dequeue_datagram+0x4c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d104      	bne.n	800d7d6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a0c      	ldr	r2, [pc, #48]	; (800d804 <ip_reass_dequeue_datagram+0x4c>)
 800d7d2:	6013      	str	r3, [r2, #0]
 800d7d4:	e00d      	b.n	800d7f2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d106      	bne.n	800d7ea <ip_reass_dequeue_datagram+0x32>
 800d7dc:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <ip_reass_dequeue_datagram+0x50>)
 800d7de:	f240 1245 	movw	r2, #325	; 0x145
 800d7e2:	490a      	ldr	r1, [pc, #40]	; (800d80c <ip_reass_dequeue_datagram+0x54>)
 800d7e4:	480a      	ldr	r0, [pc, #40]	; (800d810 <ip_reass_dequeue_datagram+0x58>)
 800d7e6:	f00a f8eb 	bl	80179c0 <iprintf>
    prev->next = ipr->next;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d7f2:	6879      	ldr	r1, [r7, #4]
 800d7f4:	2004      	movs	r0, #4
 800d7f6:	f001 f9a3 	bl	800eb40 <memp_free>
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	24009df4 	.word	0x24009df4
 800d808:	0801aa28 	.word	0x0801aa28
 800d80c:	0801ab48 	.word	0x0801ab48
 800d810:	0801aac8 	.word	0x0801aac8

0800d814 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b08c      	sub	sp, #48	; 0x30
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d820:	2300      	movs	r3, #0
 800d822:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d824:	2301      	movs	r3, #1
 800d826:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	885b      	ldrh	r3, [r3, #2]
 800d832:	b29b      	uxth	r3, r3
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe f897 	bl	800b968 <lwip_htons>
 800d83a:	4603      	mov	r3, r0
 800d83c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	f003 030f 	and.w	r3, r3, #15
 800d846:	b2db      	uxtb	r3, r3
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d84c:	7e7b      	ldrb	r3, [r7, #25]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	8b7a      	ldrh	r2, [r7, #26]
 800d852:	429a      	cmp	r2, r3
 800d854:	d202      	bcs.n	800d85c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	e135      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d85c:	7e7b      	ldrb	r3, [r7, #25]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	8b7a      	ldrh	r2, [r7, #26]
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	88db      	ldrh	r3, [r3, #6]
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe f87b 	bl	800b968 <lwip_htons>
 800d872:	4603      	mov	r3, r0
 800d874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d878:	b29b      	uxth	r3, r3
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
 800d88a:	2200      	movs	r2, #0
 800d88c:	705a      	strb	r2, [r3, #1]
 800d88e:	2200      	movs	r2, #0
 800d890:	709a      	strb	r2, [r3, #2]
 800d892:	2200      	movs	r2, #0
 800d894:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	8afa      	ldrh	r2, [r7, #22]
 800d89a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d89c:	8afa      	ldrh	r2, [r7, #22]
 800d89e:	8b7b      	ldrh	r3, [r7, #26]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	88db      	ldrh	r3, [r3, #6]
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	8afa      	ldrh	r2, [r7, #22]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d902      	bls.n	800d8ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b8:	e106      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
 800d8c0:	e068      	b.n	800d994 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	889b      	ldrh	r3, [r3, #4]
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	889b      	ldrh	r3, [r3, #4]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d235      	bcs.n	800d944 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d020      	beq.n	800d926 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	889b      	ldrh	r3, [r3, #4]
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	88db      	ldrh	r3, [r3, #6]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d307      	bcc.n	800d904 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	88db      	ldrh	r3, [r3, #6]
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	889b      	ldrh	r3, [r3, #4]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	429a      	cmp	r2, r3
 800d902:	d902      	bls.n	800d90a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d904:	f04f 33ff 	mov.w	r3, #4294967295
 800d908:	e0de      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d912:	88db      	ldrh	r3, [r3, #6]
 800d914:	b29a      	uxth	r2, r3
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	889b      	ldrh	r3, [r3, #4]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d03d      	beq.n	800d99c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d920:	2300      	movs	r3, #0
 800d922:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d924:	e03a      	b.n	800d99c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	88db      	ldrh	r3, [r3, #6]
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	889b      	ldrh	r3, [r3, #4]
 800d930:	b29b      	uxth	r3, r3
 800d932:	429a      	cmp	r2, r3
 800d934:	d902      	bls.n	800d93c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d936:	f04f 33ff 	mov.w	r3, #4294967295
 800d93a:	e0c5      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	605a      	str	r2, [r3, #4]
      break;
 800d942:	e02b      	b.n	800d99c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	889b      	ldrh	r3, [r3, #4]
 800d948:	b29a      	uxth	r2, r3
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	889b      	ldrh	r3, [r3, #4]
 800d94e:	b29b      	uxth	r3, r3
 800d950:	429a      	cmp	r2, r3
 800d952:	d102      	bne.n	800d95a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d954:	f04f 33ff 	mov.w	r3, #4294967295
 800d958:	e0b6      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	889b      	ldrh	r3, [r3, #4]
 800d95e:	b29a      	uxth	r2, r3
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	88db      	ldrh	r3, [r3, #6]
 800d964:	b29b      	uxth	r3, r3
 800d966:	429a      	cmp	r2, r3
 800d968:	d202      	bcs.n	800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d96a:	f04f 33ff 	mov.w	r3, #4294967295
 800d96e:	e0ab      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	2b00      	cmp	r3, #0
 800d974:	d009      	beq.n	800d98a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	88db      	ldrh	r3, [r3, #6]
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	889b      	ldrh	r3, [r3, #4]
 800d980:	b29b      	uxth	r3, r3
 800d982:	429a      	cmp	r2, r3
 800d984:	d001      	beq.n	800d98a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	2b00      	cmp	r3, #0
 800d998:	d193      	bne.n	800d8c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d99a:	e000      	b.n	800d99e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d99c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d12d      	bne.n	800da00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d01c      	beq.n	800d9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ac:	88db      	ldrh	r3, [r3, #6]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	889b      	ldrh	r3, [r3, #4]
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d906      	bls.n	800d9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d9ba:	4b45      	ldr	r3, [pc, #276]	; (800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d9bc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d9c0:	4944      	ldr	r1, [pc, #272]	; (800dad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d9c2:	4845      	ldr	r0, [pc, #276]	; (800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d9c4:	f009 fffc 	bl	80179c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	88db      	ldrh	r3, [r3, #6]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	889b      	ldrh	r3, [r3, #4]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d010      	beq.n	800da00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	623b      	str	r3, [r7, #32]
 800d9e2:	e00d      	b.n	800da00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d006      	beq.n	800d9fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d9ec:	4b38      	ldr	r3, [pc, #224]	; (800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d9ee:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d9f2:	493a      	ldr	r1, [pc, #232]	; (800dadc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d9f4:	4838      	ldr	r0, [pc, #224]	; (800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d9f6:	f009 ffe3 	bl	80179c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d105      	bne.n	800da12 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	7f9b      	ldrb	r3, [r3, #30]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d059      	beq.n	800dac6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d04f      	beq.n	800dab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d006      	beq.n	800da2e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	889b      	ldrh	r3, [r3, #4]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	623b      	str	r3, [r7, #32]
 800da32:	e041      	b.n	800dab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da3e:	e012      	b.n	800da66 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	88db      	ldrh	r3, [r3, #6]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4e:	889b      	ldrh	r3, [r3, #4]
 800da50:	b29b      	uxth	r3, r3
 800da52:	429a      	cmp	r2, r3
 800da54:	d002      	beq.n	800da5c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	623b      	str	r3, [r7, #32]
            break;
 800da5a:	e007      	b.n	800da6c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1e9      	bne.n	800da40 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d022      	beq.n	800dab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800da7a:	4b15      	ldr	r3, [pc, #84]	; (800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da7c:	f240 12df 	movw	r2, #479	; 0x1df
 800da80:	4917      	ldr	r1, [pc, #92]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da82:	4815      	ldr	r0, [pc, #84]	; (800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da84:	f009 ff9c 	bl	80179c0 <iprintf>
          LWIP_ASSERT("sanity check",
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da90:	429a      	cmp	r2, r3
 800da92:	d106      	bne.n	800daa2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800da94:	4b0e      	ldr	r3, [pc, #56]	; (800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800da9a:	4911      	ldr	r1, [pc, #68]	; (800dae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800da9c:	480e      	ldr	r0, [pc, #56]	; (800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da9e:	f009 ff8f 	bl	80179c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d006      	beq.n	800dab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800daaa:	4b09      	ldr	r3, [pc, #36]	; (800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800daac:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dab0:	490c      	ldr	r1, [pc, #48]	; (800dae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dab2:	4809      	ldr	r0, [pc, #36]	; (800dad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dab4:	f009 ff84 	bl	80179c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bf14      	ite	ne
 800dabe:	2301      	movne	r3, #1
 800dac0:	2300      	moveq	r3, #0
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	e000      	b.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3730      	adds	r7, #48	; 0x30
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	0801aa28 	.word	0x0801aa28
 800dad4:	0801ab64 	.word	0x0801ab64
 800dad8:	0801aac8 	.word	0x0801aac8
 800dadc:	0801ab84 	.word	0x0801ab84
 800dae0:	0801abbc 	.word	0x0801abbc
 800dae4:	0801abcc 	.word	0x0801abcc

0800dae8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08e      	sub	sp, #56	; 0x38
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	f003 030f 	and.w	r3, r3, #15
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b14      	cmp	r3, #20
 800db06:	f040 8171 	bne.w	800ddec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800db0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0c:	88db      	ldrh	r3, [r3, #6]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	4618      	mov	r0, r3
 800db12:	f7fd ff29 	bl	800b968 <lwip_htons>
 800db16:	4603      	mov	r3, r0
 800db18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	885b      	ldrh	r3, [r3, #2]
 800db26:	b29b      	uxth	r3, r3
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fd ff1d 	bl	800b968 <lwip_htons>
 800db2e:	4603      	mov	r3, r0
 800db30:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	f003 030f 	and.w	r3, r3, #15
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800db42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db46:	b29b      	uxth	r3, r3
 800db48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db4a:	429a      	cmp	r2, r3
 800db4c:	f0c0 8150 	bcc.w	800ddf0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800db50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db54:	b29b      	uxth	r3, r3
 800db56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f001 ff4b 	bl	800f9f8 <pbuf_clen>
 800db62:	4603      	mov	r3, r0
 800db64:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800db66:	4b8c      	ldr	r3, [pc, #560]	; (800dd98 <ip4_reass+0x2b0>)
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	8c3b      	ldrh	r3, [r7, #32]
 800db6e:	4413      	add	r3, r2
 800db70:	2b0a      	cmp	r3, #10
 800db72:	dd10      	ble.n	800db96 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db74:	8c3b      	ldrh	r3, [r7, #32]
 800db76:	4619      	mov	r1, r3
 800db78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db7a:	f7ff fd81 	bl	800d680 <ip_reass_remove_oldest_datagram>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 8137 	beq.w	800ddf4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800db86:	4b84      	ldr	r3, [pc, #528]	; (800dd98 <ip4_reass+0x2b0>)
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	461a      	mov	r2, r3
 800db8c:	8c3b      	ldrh	r3, [r7, #32]
 800db8e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800db90:	2b0a      	cmp	r3, #10
 800db92:	f300 812f 	bgt.w	800ddf4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800db96:	4b81      	ldr	r3, [pc, #516]	; (800dd9c <ip4_reass+0x2b4>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	633b      	str	r3, [r7, #48]	; 0x30
 800db9c:	e015      	b.n	800dbca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	695a      	ldr	r2, [r3, #20]
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d10c      	bne.n	800dbc4 <ip4_reass+0xdc>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	699a      	ldr	r2, [r3, #24]
 800dbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb0:	691b      	ldr	r3, [r3, #16]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d106      	bne.n	800dbc4 <ip4_reass+0xdc>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	899a      	ldrh	r2, [r3, #12]
 800dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbc:	889b      	ldrh	r3, [r3, #4]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d006      	beq.n	800dbd2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	633b      	str	r3, [r7, #48]	; 0x30
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e6      	bne.n	800db9e <ip4_reass+0xb6>
 800dbd0:	e000      	b.n	800dbd4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dbd2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d109      	bne.n	800dbee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dbda:	8c3b      	ldrh	r3, [r7, #32]
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbe0:	f7ff fdb0 	bl	800d744 <ip_reass_enqueue_new_datagram>
 800dbe4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d11c      	bne.n	800dc26 <ip4_reass+0x13e>
      goto nullreturn;
 800dbec:	e105      	b.n	800ddfa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	88db      	ldrh	r3, [r3, #6]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fd feb7 	bl	800b968 <lwip_htons>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d110      	bne.n	800dc26 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc06:	89db      	ldrh	r3, [r3, #14]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fd fead 	bl	800b968 <lwip_htons>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d006      	beq.n	800dc26 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	2214      	movs	r2, #20
 800dc1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc20:	4618      	mov	r0, r3
 800dc22:	f009 fe08 	bl	8017836 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	88db      	ldrh	r3, [r3, #6]
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	f003 0320 	and.w	r3, r3, #32
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	bf0c      	ite	eq
 800dc34:	2301      	moveq	r3, #1
 800dc36:	2300      	movne	r3, #0
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00e      	beq.n	800dc60 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc46:	4413      	add	r3, r2
 800dc48:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dc4a:	8b7a      	ldrh	r2, [r7, #26]
 800dc4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	f0c0 80a0 	bcc.w	800dd94 <ip4_reass+0x2ac>
 800dc54:	8b7b      	ldrh	r3, [r7, #26]
 800dc56:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	f200 809a 	bhi.w	800dd94 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dc60:	69fa      	ldr	r2, [r7, #28]
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc66:	f7ff fdd5 	bl	800d814 <ip_reass_chain_frag_into_datagram_and_validate>
 800dc6a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc72:	f000 809b 	beq.w	800ddac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc76:	4b48      	ldr	r3, [pc, #288]	; (800dd98 <ip4_reass+0x2b0>)
 800dc78:	881a      	ldrh	r2, [r3, #0]
 800dc7a:	8c3b      	ldrh	r3, [r7, #32]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	b29a      	uxth	r2, r3
 800dc80:	4b45      	ldr	r3, [pc, #276]	; (800dd98 <ip4_reass+0x2b0>)
 800dc82:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00d      	beq.n	800dca6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8e:	4413      	add	r3, r2
 800dc90:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	8a7a      	ldrh	r2, [r7, #18]
 800dc96:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	7f9b      	ldrb	r3, [r3, #30]
 800dc9c:	f043 0301 	orr.w	r3, r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d171      	bne.n	800dd90 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	8b9b      	ldrh	r3, [r3, #28]
 800dcb0:	3314      	adds	r3, #20
 800dcb2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	3308      	adds	r3, #8
 800dcca:	2214      	movs	r2, #20
 800dccc:	4619      	mov	r1, r3
 800dcce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd0:	f009 fdb1 	bl	8017836 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dcd4:	8a3b      	ldrh	r3, [r7, #16]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd fe46 	bl	800b968 <lwip_htons>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	461a      	mov	r2, r3
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	2200      	movs	r2, #0
 800dce8:	719a      	strb	r2, [r3, #6]
 800dcea:	2200      	movs	r2, #0
 800dcec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	729a      	strb	r2, [r3, #10]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dcfe:	e00d      	b.n	800dd1c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dd06:	2114      	movs	r1, #20
 800dd08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd0a:	f001 fd61 	bl	800f7d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dd0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f001 feb1 	bl	800fa78 <pbuf_cat>
      r = iprh->next_pbuf;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1ee      	bne.n	800dd00 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dd22:	4b1e      	ldr	r3, [pc, #120]	; (800dd9c <ip4_reass+0x2b4>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d102      	bne.n	800dd32 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd30:	e010      	b.n	800dd54 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd32:	4b1a      	ldr	r3, [pc, #104]	; (800dd9c <ip4_reass+0x2b4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd38:	e007      	b.n	800dd4a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d006      	beq.n	800dd52 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1f4      	bne.n	800dd3a <ip4_reass+0x252>
 800dd50:	e000      	b.n	800dd54 <ip4_reass+0x26c>
          break;
 800dd52:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dd54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd58:	f7ff fd2e 	bl	800d7b8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f001 fe4b 	bl	800f9f8 <pbuf_clen>
 800dd62:	4603      	mov	r3, r0
 800dd64:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dd66:	4b0c      	ldr	r3, [pc, #48]	; (800dd98 <ip4_reass+0x2b0>)
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	8c3a      	ldrh	r2, [r7, #32]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d906      	bls.n	800dd7e <ip4_reass+0x296>
 800dd70:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <ip4_reass+0x2b8>)
 800dd72:	f240 229b 	movw	r2, #667	; 0x29b
 800dd76:	490b      	ldr	r1, [pc, #44]	; (800dda4 <ip4_reass+0x2bc>)
 800dd78:	480b      	ldr	r0, [pc, #44]	; (800dda8 <ip4_reass+0x2c0>)
 800dd7a:	f009 fe21 	bl	80179c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dd7e:	4b06      	ldr	r3, [pc, #24]	; (800dd98 <ip4_reass+0x2b0>)
 800dd80:	881a      	ldrh	r2, [r3, #0]
 800dd82:	8c3b      	ldrh	r3, [r7, #32]
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	4b03      	ldr	r3, [pc, #12]	; (800dd98 <ip4_reass+0x2b0>)
 800dd8a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	e038      	b.n	800de02 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dd90:	2300      	movs	r3, #0
 800dd92:	e036      	b.n	800de02 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800dd94:	bf00      	nop
 800dd96:	e00a      	b.n	800ddae <ip4_reass+0x2c6>
 800dd98:	24009df8 	.word	0x24009df8
 800dd9c:	24009df4 	.word	0x24009df4
 800dda0:	0801aa28 	.word	0x0801aa28
 800dda4:	0801abf0 	.word	0x0801abf0
 800dda8:	0801aac8 	.word	0x0801aac8
    goto nullreturn_ipr;
 800ddac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d106      	bne.n	800ddc2 <ip4_reass+0x2da>
 800ddb4:	4b15      	ldr	r3, [pc, #84]	; (800de0c <ip4_reass+0x324>)
 800ddb6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ddba:	4915      	ldr	r1, [pc, #84]	; (800de10 <ip4_reass+0x328>)
 800ddbc:	4815      	ldr	r0, [pc, #84]	; (800de14 <ip4_reass+0x32c>)
 800ddbe:	f009 fdff 	bl	80179c0 <iprintf>
  if (ipr->p == NULL) {
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d116      	bne.n	800ddf8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ddca:	4b13      	ldr	r3, [pc, #76]	; (800de18 <ip4_reass+0x330>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d006      	beq.n	800dde2 <ip4_reass+0x2fa>
 800ddd4:	4b0d      	ldr	r3, [pc, #52]	; (800de0c <ip4_reass+0x324>)
 800ddd6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ddda:	4910      	ldr	r1, [pc, #64]	; (800de1c <ip4_reass+0x334>)
 800dddc:	480d      	ldr	r0, [pc, #52]	; (800de14 <ip4_reass+0x32c>)
 800ddde:	f009 fdef 	bl	80179c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dde2:	2100      	movs	r1, #0
 800dde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dde6:	f7ff fce7 	bl	800d7b8 <ip_reass_dequeue_datagram>
 800ddea:	e006      	b.n	800ddfa <ip4_reass+0x312>
    goto nullreturn;
 800ddec:	bf00      	nop
 800ddee:	e004      	b.n	800ddfa <ip4_reass+0x312>
    goto nullreturn;
 800ddf0:	bf00      	nop
 800ddf2:	e002      	b.n	800ddfa <ip4_reass+0x312>
      goto nullreturn;
 800ddf4:	bf00      	nop
 800ddf6:	e000      	b.n	800ddfa <ip4_reass+0x312>
  }

nullreturn:
 800ddf8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 fd6e 	bl	800f8dc <pbuf_free>
  return NULL;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3738      	adds	r7, #56	; 0x38
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	0801aa28 	.word	0x0801aa28
 800de10:	0801ac0c 	.word	0x0801ac0c
 800de14:	0801aac8 	.word	0x0801aac8
 800de18:	24009df4 	.word	0x24009df4
 800de1c:	0801ac18 	.word	0x0801ac18

0800de20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800de24:	2005      	movs	r0, #5
 800de26:	f000 fe15 	bl	800ea54 <memp_malloc>
 800de2a:	4603      	mov	r3, r0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d106      	bne.n	800de4c <ip_frag_free_pbuf_custom_ref+0x1c>
 800de3e:	4b07      	ldr	r3, [pc, #28]	; (800de5c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800de40:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800de44:	4906      	ldr	r1, [pc, #24]	; (800de60 <ip_frag_free_pbuf_custom_ref+0x30>)
 800de46:	4807      	ldr	r0, [pc, #28]	; (800de64 <ip_frag_free_pbuf_custom_ref+0x34>)
 800de48:	f009 fdba 	bl	80179c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800de4c:	6879      	ldr	r1, [r7, #4]
 800de4e:	2005      	movs	r0, #5
 800de50:	f000 fe76 	bl	800eb40 <memp_free>
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0801aa28 	.word	0x0801aa28
 800de60:	0801ac38 	.word	0x0801ac38
 800de64:	0801aac8 	.word	0x0801aac8

0800de68 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d106      	bne.n	800de88 <ipfrag_free_pbuf_custom+0x20>
 800de7a:	4b11      	ldr	r3, [pc, #68]	; (800dec0 <ipfrag_free_pbuf_custom+0x58>)
 800de7c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800de80:	4910      	ldr	r1, [pc, #64]	; (800dec4 <ipfrag_free_pbuf_custom+0x5c>)
 800de82:	4811      	ldr	r0, [pc, #68]	; (800dec8 <ipfrag_free_pbuf_custom+0x60>)
 800de84:	f009 fd9c 	bl	80179c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d006      	beq.n	800de9e <ipfrag_free_pbuf_custom+0x36>
 800de90:	4b0b      	ldr	r3, [pc, #44]	; (800dec0 <ipfrag_free_pbuf_custom+0x58>)
 800de92:	f240 22cf 	movw	r2, #719	; 0x2cf
 800de96:	490d      	ldr	r1, [pc, #52]	; (800decc <ipfrag_free_pbuf_custom+0x64>)
 800de98:	480b      	ldr	r0, [pc, #44]	; (800dec8 <ipfrag_free_pbuf_custom+0x60>)
 800de9a:	f009 fd91 	bl	80179c0 <iprintf>
  if (pcr->original != NULL) {
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d004      	beq.n	800deb0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	695b      	ldr	r3, [r3, #20]
 800deaa:	4618      	mov	r0, r3
 800deac:	f001 fd16 	bl	800f8dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff ffbd 	bl	800de30 <ip_frag_free_pbuf_custom_ref>
}
 800deb6:	bf00      	nop
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	0801aa28 	.word	0x0801aa28
 800dec4:	0801ac44 	.word	0x0801ac44
 800dec8:	0801aac8 	.word	0x0801aac8
 800decc:	0801ac50 	.word	0x0801ac50

0800ded0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b094      	sub	sp, #80	; 0x50
 800ded4:	af02      	add	r7, sp, #8
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dee6:	3b14      	subs	r3, #20
 800dee8:	2b00      	cmp	r3, #0
 800deea:	da00      	bge.n	800deee <ip4_frag+0x1e>
 800deec:	3307      	adds	r3, #7
 800deee:	10db      	asrs	r3, r3, #3
 800def0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800def2:	2314      	movs	r3, #20
 800def4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800defc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800df00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	f003 030f 	and.w	r3, r3, #15
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	2b14      	cmp	r3, #20
 800df10:	d002      	beq.n	800df18 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800df12:	f06f 0305 	mvn.w	r3, #5
 800df16:	e110      	b.n	800e13a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	895b      	ldrh	r3, [r3, #10]
 800df1c:	2b13      	cmp	r3, #19
 800df1e:	d809      	bhi.n	800df34 <ip4_frag+0x64>
 800df20:	4b88      	ldr	r3, [pc, #544]	; (800e144 <ip4_frag+0x274>)
 800df22:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800df26:	4988      	ldr	r1, [pc, #544]	; (800e148 <ip4_frag+0x278>)
 800df28:	4888      	ldr	r0, [pc, #544]	; (800e14c <ip4_frag+0x27c>)
 800df2a:	f009 fd49 	bl	80179c0 <iprintf>
 800df2e:	f06f 0305 	mvn.w	r3, #5
 800df32:	e102      	b.n	800e13a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	88db      	ldrh	r3, [r3, #6]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fd fd14 	bl	800b968 <lwip_htons>
 800df40:	4603      	mov	r3, r0
 800df42:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800df44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800df4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df54:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	891b      	ldrh	r3, [r3, #8]
 800df5a:	3b14      	subs	r3, #20
 800df5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800df60:	e0e1      	b.n	800e126 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800df62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	b29b      	uxth	r3, r3
 800df68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df6c:	4293      	cmp	r3, r2
 800df6e:	bf28      	it	cs
 800df70:	4613      	movcs	r3, r2
 800df72:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800df74:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df78:	2114      	movs	r1, #20
 800df7a:	200e      	movs	r0, #14
 800df7c:	f001 f9ca 	bl	800f314 <pbuf_alloc>
 800df80:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 80d5 	beq.w	800e134 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	895b      	ldrh	r3, [r3, #10]
 800df8e:	2b13      	cmp	r3, #19
 800df90:	d806      	bhi.n	800dfa0 <ip4_frag+0xd0>
 800df92:	4b6c      	ldr	r3, [pc, #432]	; (800e144 <ip4_frag+0x274>)
 800df94:	f44f 7249 	mov.w	r2, #804	; 0x324
 800df98:	496d      	ldr	r1, [pc, #436]	; (800e150 <ip4_frag+0x280>)
 800df9a:	486c      	ldr	r0, [pc, #432]	; (800e14c <ip4_frag+0x27c>)
 800df9c:	f009 fd10 	bl	80179c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	2214      	movs	r2, #20
 800dfa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f009 fc44 	bl	8017836 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800dfb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800dfba:	e064      	b.n	800e086 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	895a      	ldrh	r2, [r3, #10]
 800dfc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	895b      	ldrh	r3, [r3, #10]
 800dfca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d906      	bls.n	800dfde <ip4_frag+0x10e>
 800dfd0:	4b5c      	ldr	r3, [pc, #368]	; (800e144 <ip4_frag+0x274>)
 800dfd2:	f240 322d 	movw	r2, #813	; 0x32d
 800dfd6:	495f      	ldr	r1, [pc, #380]	; (800e154 <ip4_frag+0x284>)
 800dfd8:	485c      	ldr	r0, [pc, #368]	; (800e14c <ip4_frag+0x27c>)
 800dfda:	f009 fcf1 	bl	80179c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dfde:	8bfa      	ldrh	r2, [r7, #30]
 800dfe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	bf28      	it	cs
 800dfe8:	4613      	movcs	r3, r2
 800dfea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dfee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d105      	bne.n	800e002 <ip4_frag+0x132>
        poff = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	60fb      	str	r3, [r7, #12]
        continue;
 800e000:	e041      	b.n	800e086 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e002:	f7ff ff0d 	bl	800de20 <ip_frag_alloc_pbuf_custom_ref>
 800e006:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d103      	bne.n	800e016 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e00e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e010:	f001 fc64 	bl	800f8dc <pbuf_free>
        goto memerr;
 800e014:	e08f      	b.n	800e136 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e016:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e01c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e01e:	4413      	add	r3, r2
 800e020:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e024:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e028:	9201      	str	r2, [sp, #4]
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	4603      	mov	r3, r0
 800e02e:	2241      	movs	r2, #65	; 0x41
 800e030:	2000      	movs	r0, #0
 800e032:	f001 fa9b 	bl	800f56c <pbuf_alloced_custom>
 800e036:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e03e:	69b8      	ldr	r0, [r7, #24]
 800e040:	f7ff fef6 	bl	800de30 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e046:	f001 fc49 	bl	800f8dc <pbuf_free>
        goto memerr;
 800e04a:	e074      	b.n	800e136 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f001 fceb 	bl	800fa28 <pbuf_ref>
      pcr->original = p;
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	4a3f      	ldr	r2, [pc, #252]	; (800e158 <ip4_frag+0x288>)
 800e05c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e05e:	6979      	ldr	r1, [r7, #20]
 800e060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e062:	f001 fd09 	bl	800fa78 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e066:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e06a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e074:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d004      	beq.n	800e086 <ip4_frag+0x1b6>
        poff = 0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e086:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d196      	bne.n	800dfbc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e08e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e090:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e094:	4413      	add	r3, r2
 800e096:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e09c:	f1a3 0213 	sub.w	r2, r3, #19
 800e0a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	bfcc      	ite	gt
 800e0a8:	2301      	movgt	r3, #1
 800e0aa:	2300      	movle	r3, #0
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e0b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <ip4_frag+0x1f6>
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d003      	beq.n	800e0ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e0c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e0c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e0cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e0ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fd fc49 	bl	800b968 <lwip_htons>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	461a      	mov	r2, r3
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e0de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e0e0:	3314      	adds	r3, #20
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fd fc3f 	bl	800b968 <lwip_htons>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	729a      	strb	r2, [r3, #10]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e104:	68b8      	ldr	r0, [r7, #8]
 800e106:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e10a:	f001 fbe7 	bl	800f8dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e10e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e112:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e11a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e11e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e120:	4413      	add	r3, r2
 800e122:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e126:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f47f af19 	bne.w	800df62 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e130:	2300      	movs	r3, #0
 800e132:	e002      	b.n	800e13a <ip4_frag+0x26a>
      goto memerr;
 800e134:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3748      	adds	r7, #72	; 0x48
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	0801aa28 	.word	0x0801aa28
 800e148:	0801ac5c 	.word	0x0801ac5c
 800e14c:	0801aac8 	.word	0x0801aac8
 800e150:	0801ac78 	.word	0x0801ac78
 800e154:	0801ac98 	.word	0x0801ac98
 800e158:	0800de69 	.word	0x0800de69

0800e15c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800e164:	4b04      	ldr	r3, [pc, #16]	; (800e178 <ptr_to_mem+0x1c>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	4413      	add	r3, r2
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	24009dfc 	.word	0x24009dfc

0800e17c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e184:	4b04      	ldr	r3, [pc, #16]	; (800e198 <mem_to_ptr+0x1c>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	1ad3      	subs	r3, r2, r3
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	24009dfc 	.word	0x24009dfc

0800e19c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e19c:	b590      	push	{r4, r7, lr}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e1a4:	4b45      	ldr	r3, [pc, #276]	; (800e2bc <plug_holes+0x120>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d206      	bcs.n	800e1bc <plug_holes+0x20>
 800e1ae:	4b44      	ldr	r3, [pc, #272]	; (800e2c0 <plug_holes+0x124>)
 800e1b0:	f240 12df 	movw	r2, #479	; 0x1df
 800e1b4:	4943      	ldr	r1, [pc, #268]	; (800e2c4 <plug_holes+0x128>)
 800e1b6:	4844      	ldr	r0, [pc, #272]	; (800e2c8 <plug_holes+0x12c>)
 800e1b8:	f009 fc02 	bl	80179c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e1bc:	4b43      	ldr	r3, [pc, #268]	; (800e2cc <plug_holes+0x130>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d306      	bcc.n	800e1d4 <plug_holes+0x38>
 800e1c6:	4b3e      	ldr	r3, [pc, #248]	; (800e2c0 <plug_holes+0x124>)
 800e1c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e1cc:	4940      	ldr	r1, [pc, #256]	; (800e2d0 <plug_holes+0x134>)
 800e1ce:	483e      	ldr	r0, [pc, #248]	; (800e2c8 <plug_holes+0x12c>)
 800e1d0:	f009 fbf6 	bl	80179c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	7a1b      	ldrb	r3, [r3, #8]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d006      	beq.n	800e1ea <plug_holes+0x4e>
 800e1dc:	4b38      	ldr	r3, [pc, #224]	; (800e2c0 <plug_holes+0x124>)
 800e1de:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e1e2:	493c      	ldr	r1, [pc, #240]	; (800e2d4 <plug_holes+0x138>)
 800e1e4:	4838      	ldr	r0, [pc, #224]	; (800e2c8 <plug_holes+0x12c>)
 800e1e6:	f009 fbeb 	bl	80179c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a3a      	ldr	r2, [pc, #232]	; (800e2d8 <plug_holes+0x13c>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d906      	bls.n	800e202 <plug_holes+0x66>
 800e1f4:	4b32      	ldr	r3, [pc, #200]	; (800e2c0 <plug_holes+0x124>)
 800e1f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e1fa:	4938      	ldr	r1, [pc, #224]	; (800e2dc <plug_holes+0x140>)
 800e1fc:	4832      	ldr	r0, [pc, #200]	; (800e2c8 <plug_holes+0x12c>)
 800e1fe:	f009 fbdf 	bl	80179c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff ffa8 	bl	800e15c <ptr_to_mem>
 800e20c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	429a      	cmp	r2, r3
 800e214:	d024      	beq.n	800e260 <plug_holes+0xc4>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	7a1b      	ldrb	r3, [r3, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d120      	bne.n	800e260 <plug_holes+0xc4>
 800e21e:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <plug_holes+0x130>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	429a      	cmp	r2, r3
 800e226:	d01b      	beq.n	800e260 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e228:	4b2d      	ldr	r3, [pc, #180]	; (800e2e0 <plug_holes+0x144>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d102      	bne.n	800e238 <plug_holes+0x9c>
      lfree = mem;
 800e232:	4a2b      	ldr	r2, [pc, #172]	; (800e2e0 <plug_holes+0x144>)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a24      	ldr	r2, [pc, #144]	; (800e2d8 <plug_holes+0x13c>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d00a      	beq.n	800e260 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff ff84 	bl	800e15c <ptr_to_mem>
 800e254:	4604      	mov	r4, r0
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7ff ff90 	bl	800e17c <mem_to_ptr>
 800e25c:	4603      	mov	r3, r0
 800e25e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	4618      	mov	r0, r3
 800e266:	f7ff ff79 	bl	800e15c <ptr_to_mem>
 800e26a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	d01f      	beq.n	800e2b4 <plug_holes+0x118>
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	7a1b      	ldrb	r3, [r3, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d11b      	bne.n	800e2b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e27c:	4b18      	ldr	r3, [pc, #96]	; (800e2e0 <plug_holes+0x144>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	429a      	cmp	r2, r3
 800e284:	d102      	bne.n	800e28c <plug_holes+0xf0>
      lfree = pmem;
 800e286:	4a16      	ldr	r2, [pc, #88]	; (800e2e0 <plug_holes+0x144>)
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a0f      	ldr	r2, [pc, #60]	; (800e2d8 <plug_holes+0x13c>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d00a      	beq.n	800e2b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff ff5a 	bl	800e15c <ptr_to_mem>
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	68b8      	ldr	r0, [r7, #8]
 800e2ac:	f7ff ff66 	bl	800e17c <mem_to_ptr>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	6063      	str	r3, [r4, #4]
    }
  }
}
 800e2b4:	bf00      	nop
 800e2b6:	3714      	adds	r7, #20
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd90      	pop	{r4, r7, pc}
 800e2bc:	24009dfc 	.word	0x24009dfc
 800e2c0:	0801aca8 	.word	0x0801aca8
 800e2c4:	0801ad34 	.word	0x0801ad34
 800e2c8:	0801ad4c 	.word	0x0801ad4c
 800e2cc:	24009e00 	.word	0x24009e00
 800e2d0:	0801ad74 	.word	0x0801ad74
 800e2d4:	0801ad90 	.word	0x0801ad90
 800e2d8:	0001ffe8 	.word	0x0001ffe8
 800e2dc:	0801adac 	.word	0x0801adac
 800e2e0:	24009e08 	.word	0x24009e08

0800e2e4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e2ea:	4b1b      	ldr	r3, [pc, #108]	; (800e358 <mem_init+0x74>)
 800e2ec:	4a1b      	ldr	r2, [pc, #108]	; (800e35c <mem_init+0x78>)
 800e2ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e2f0:	4b19      	ldr	r3, [pc, #100]	; (800e358 <mem_init+0x74>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a19      	ldr	r2, [pc, #100]	; (800e360 <mem_init+0x7c>)
 800e2fa:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e308:	4815      	ldr	r0, [pc, #84]	; (800e360 <mem_init+0x7c>)
 800e30a:	f7ff ff27 	bl	800e15c <ptr_to_mem>
 800e30e:	4603      	mov	r3, r0
 800e310:	4a14      	ldr	r2, [pc, #80]	; (800e364 <mem_init+0x80>)
 800e312:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e314:	4b13      	ldr	r3, [pc, #76]	; (800e364 <mem_init+0x80>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2201      	movs	r2, #1
 800e31a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e31c:	4b11      	ldr	r3, [pc, #68]	; (800e364 <mem_init+0x80>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a0f      	ldr	r2, [pc, #60]	; (800e360 <mem_init+0x7c>)
 800e322:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e324:	4b0f      	ldr	r3, [pc, #60]	; (800e364 <mem_init+0x80>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a0d      	ldr	r2, [pc, #52]	; (800e360 <mem_init+0x7c>)
 800e32a:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <mem_init+0x74>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a0d      	ldr	r2, [pc, #52]	; (800e368 <mem_init+0x84>)
 800e332:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e334:	480d      	ldr	r0, [pc, #52]	; (800e36c <mem_init+0x88>)
 800e336:	f001 ff53 	bl	80101e0 <sys_mutex_new>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d006      	beq.n	800e34e <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e340:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <mem_init+0x8c>)
 800e342:	f240 221f 	movw	r2, #543	; 0x21f
 800e346:	490b      	ldr	r1, [pc, #44]	; (800e374 <mem_init+0x90>)
 800e348:	480b      	ldr	r0, [pc, #44]	; (800e378 <mem_init+0x94>)
 800e34a:	f009 fb39 	bl	80179c0 <iprintf>
  }
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	24009dfc 	.word	0x24009dfc
 800e35c:	30020000 	.word	0x30020000
 800e360:	0001ffe8 	.word	0x0001ffe8
 800e364:	24009e00 	.word	0x24009e00
 800e368:	24009e08 	.word	0x24009e08
 800e36c:	24009e04 	.word	0x24009e04
 800e370:	0801aca8 	.word	0x0801aca8
 800e374:	0801add8 	.word	0x0801add8
 800e378:	0801ad4c 	.word	0x0801ad4c

0800e37c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b086      	sub	sp, #24
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7ff fef9 	bl	800e17c <mem_to_ptr>
 800e38a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4618      	mov	r0, r3
 800e392:	f7ff fee3 	bl	800e15c <ptr_to_mem>
 800e396:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff fedd 	bl	800e15c <ptr_to_mem>
 800e3a2:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a11      	ldr	r2, [pc, #68]	; (800e3f0 <mem_link_valid+0x74>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d818      	bhi.n	800e3e0 <mem_link_valid+0x64>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	4a0f      	ldr	r2, [pc, #60]	; (800e3f0 <mem_link_valid+0x74>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d813      	bhi.n	800e3e0 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d004      	beq.n	800e3cc <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	697a      	ldr	r2, [r7, #20]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d109      	bne.n	800e3e0 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e3cc:	4b09      	ldr	r3, [pc, #36]	; (800e3f4 <mem_link_valid+0x78>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e3d0:	693a      	ldr	r2, [r7, #16]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d006      	beq.n	800e3e4 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d001      	beq.n	800e3e4 <mem_link_valid+0x68>
    return 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e000      	b.n	800e3e6 <mem_link_valid+0x6a>
  }
  return 1;
 800e3e4:	2301      	movs	r3, #1
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0001ffe8 	.word	0x0001ffe8
 800e3f4:	24009e00 	.word	0x24009e00

0800e3f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d070      	beq.n	800e4e8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f003 0303 	and.w	r3, r3, #3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00d      	beq.n	800e42c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e410:	4b37      	ldr	r3, [pc, #220]	; (800e4f0 <mem_free+0xf8>)
 800e412:	f240 2273 	movw	r2, #627	; 0x273
 800e416:	4937      	ldr	r1, [pc, #220]	; (800e4f4 <mem_free+0xfc>)
 800e418:	4837      	ldr	r0, [pc, #220]	; (800e4f8 <mem_free+0x100>)
 800e41a:	f009 fad1 	bl	80179c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e41e:	f001 ff31 	bl	8010284 <sys_arch_protect>
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f001 ff3b 	bl	80102a0 <sys_arch_unprotect>
    return;
 800e42a:	e05e      	b.n	800e4ea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3b0c      	subs	r3, #12
 800e430:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e432:	4b32      	ldr	r3, [pc, #200]	; (800e4fc <mem_free+0x104>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	69fa      	ldr	r2, [r7, #28]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d306      	bcc.n	800e44a <mem_free+0x52>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f103 020c 	add.w	r2, r3, #12
 800e442:	4b2f      	ldr	r3, [pc, #188]	; (800e500 <mem_free+0x108>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	d90d      	bls.n	800e466 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e44a:	4b29      	ldr	r3, [pc, #164]	; (800e4f0 <mem_free+0xf8>)
 800e44c:	f240 227f 	movw	r2, #639	; 0x27f
 800e450:	492c      	ldr	r1, [pc, #176]	; (800e504 <mem_free+0x10c>)
 800e452:	4829      	ldr	r0, [pc, #164]	; (800e4f8 <mem_free+0x100>)
 800e454:	f009 fab4 	bl	80179c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e458:	f001 ff14 	bl	8010284 <sys_arch_protect>
 800e45c:	6138      	str	r0, [r7, #16]
 800e45e:	6938      	ldr	r0, [r7, #16]
 800e460:	f001 ff1e 	bl	80102a0 <sys_arch_unprotect>
    return;
 800e464:	e041      	b.n	800e4ea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e466:	4828      	ldr	r0, [pc, #160]	; (800e508 <mem_free+0x110>)
 800e468:	f001 fed0 	bl	801020c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	7a1b      	ldrb	r3, [r3, #8]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d110      	bne.n	800e496 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e474:	4b1e      	ldr	r3, [pc, #120]	; (800e4f0 <mem_free+0xf8>)
 800e476:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e47a:	4924      	ldr	r1, [pc, #144]	; (800e50c <mem_free+0x114>)
 800e47c:	481e      	ldr	r0, [pc, #120]	; (800e4f8 <mem_free+0x100>)
 800e47e:	f009 fa9f 	bl	80179c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e482:	4821      	ldr	r0, [pc, #132]	; (800e508 <mem_free+0x110>)
 800e484:	f001 fed1 	bl	801022a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e488:	f001 fefc 	bl	8010284 <sys_arch_protect>
 800e48c:	6178      	str	r0, [r7, #20]
 800e48e:	6978      	ldr	r0, [r7, #20]
 800e490:	f001 ff06 	bl	80102a0 <sys_arch_unprotect>
    return;
 800e494:	e029      	b.n	800e4ea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e496:	69f8      	ldr	r0, [r7, #28]
 800e498:	f7ff ff70 	bl	800e37c <mem_link_valid>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d110      	bne.n	800e4c4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e4a2:	4b13      	ldr	r3, [pc, #76]	; (800e4f0 <mem_free+0xf8>)
 800e4a4:	f240 2295 	movw	r2, #661	; 0x295
 800e4a8:	4919      	ldr	r1, [pc, #100]	; (800e510 <mem_free+0x118>)
 800e4aa:	4813      	ldr	r0, [pc, #76]	; (800e4f8 <mem_free+0x100>)
 800e4ac:	f009 fa88 	bl	80179c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e4b0:	4815      	ldr	r0, [pc, #84]	; (800e508 <mem_free+0x110>)
 800e4b2:	f001 feba 	bl	801022a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e4b6:	f001 fee5 	bl	8010284 <sys_arch_protect>
 800e4ba:	61b8      	str	r0, [r7, #24]
 800e4bc:	69b8      	ldr	r0, [r7, #24]
 800e4be:	f001 feef 	bl	80102a0 <sys_arch_unprotect>
    return;
 800e4c2:	e012      	b.n	800e4ea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800e4ca:	4b12      	ldr	r3, [pc, #72]	; (800e514 <mem_free+0x11c>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	69fa      	ldr	r2, [r7, #28]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d202      	bcs.n	800e4da <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e4d4:	4a0f      	ldr	r2, [pc, #60]	; (800e514 <mem_free+0x11c>)
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e4da:	69f8      	ldr	r0, [r7, #28]
 800e4dc:	f7ff fe5e 	bl	800e19c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e4e0:	4809      	ldr	r0, [pc, #36]	; (800e508 <mem_free+0x110>)
 800e4e2:	f001 fea2 	bl	801022a <sys_mutex_unlock>
 800e4e6:	e000      	b.n	800e4ea <mem_free+0xf2>
    return;
 800e4e8:	bf00      	nop
}
 800e4ea:	3720      	adds	r7, #32
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	0801aca8 	.word	0x0801aca8
 800e4f4:	0801adf4 	.word	0x0801adf4
 800e4f8:	0801ad4c 	.word	0x0801ad4c
 800e4fc:	24009dfc 	.word	0x24009dfc
 800e500:	24009e00 	.word	0x24009e00
 800e504:	0801ae18 	.word	0x0801ae18
 800e508:	24009e04 	.word	0x24009e04
 800e50c:	0801ae34 	.word	0x0801ae34
 800e510:	0801ae5c 	.word	0x0801ae5c
 800e514:	24009e08 	.word	0x24009e08

0800e518 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b08a      	sub	sp, #40	; 0x28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	3303      	adds	r3, #3
 800e526:	f023 0303 	bic.w	r3, r3, #3
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	2b0b      	cmp	r3, #11
 800e530:	d801      	bhi.n	800e536 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e532:	230c      	movs	r3, #12
 800e534:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	4a6e      	ldr	r2, [pc, #440]	; (800e6f4 <mem_trim+0x1dc>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d803      	bhi.n	800e546 <mem_trim+0x2e>
 800e53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d201      	bcs.n	800e54a <mem_trim+0x32>
    return NULL;
 800e546:	2300      	movs	r3, #0
 800e548:	e0d0      	b.n	800e6ec <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e54a:	4b6b      	ldr	r3, [pc, #428]	; (800e6f8 <mem_trim+0x1e0>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	429a      	cmp	r2, r3
 800e552:	d304      	bcc.n	800e55e <mem_trim+0x46>
 800e554:	4b69      	ldr	r3, [pc, #420]	; (800e6fc <mem_trim+0x1e4>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d306      	bcc.n	800e56c <mem_trim+0x54>
 800e55e:	4b68      	ldr	r3, [pc, #416]	; (800e700 <mem_trim+0x1e8>)
 800e560:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e564:	4967      	ldr	r1, [pc, #412]	; (800e704 <mem_trim+0x1ec>)
 800e566:	4868      	ldr	r0, [pc, #416]	; (800e708 <mem_trim+0x1f0>)
 800e568:	f009 fa2a 	bl	80179c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e56c:	4b62      	ldr	r3, [pc, #392]	; (800e6f8 <mem_trim+0x1e0>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d304      	bcc.n	800e580 <mem_trim+0x68>
 800e576:	4b61      	ldr	r3, [pc, #388]	; (800e6fc <mem_trim+0x1e4>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d307      	bcc.n	800e590 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e580:	f001 fe80 	bl	8010284 <sys_arch_protect>
 800e584:	60b8      	str	r0, [r7, #8]
 800e586:	68b8      	ldr	r0, [r7, #8]
 800e588:	f001 fe8a 	bl	80102a0 <sys_arch_unprotect>
    return rmem;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	e0ad      	b.n	800e6ec <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3b0c      	subs	r3, #12
 800e594:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e596:	6a38      	ldr	r0, [r7, #32]
 800e598:	f7ff fdf0 	bl	800e17c <mem_to_ptr>
 800e59c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	3b0c      	subs	r3, #12
 800e5a8:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d906      	bls.n	800e5c0 <mem_trim+0xa8>
 800e5b2:	4b53      	ldr	r3, [pc, #332]	; (800e700 <mem_trim+0x1e8>)
 800e5b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e5b8:	4954      	ldr	r1, [pc, #336]	; (800e70c <mem_trim+0x1f4>)
 800e5ba:	4853      	ldr	r0, [pc, #332]	; (800e708 <mem_trim+0x1f0>)
 800e5bc:	f009 fa00 	bl	80179c0 <iprintf>
  if (newsize > size) {
 800e5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d901      	bls.n	800e5cc <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	e08f      	b.n	800e6ec <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800e5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d101      	bne.n	800e5d8 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	e089      	b.n	800e6ec <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e5d8:	484d      	ldr	r0, [pc, #308]	; (800e710 <mem_trim+0x1f8>)
 800e5da:	f001 fe17 	bl	801020c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e5de:	6a3b      	ldr	r3, [r7, #32]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7ff fdba 	bl	800e15c <ptr_to_mem>
 800e5e8:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	7a1b      	ldrb	r3, [r3, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d13c      	bne.n	800e66c <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e5f2:	6a3b      	ldr	r3, [r7, #32]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a3f      	ldr	r2, [pc, #252]	; (800e6f4 <mem_trim+0x1dc>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d106      	bne.n	800e60a <mem_trim+0xf2>
 800e5fc:	4b40      	ldr	r3, [pc, #256]	; (800e700 <mem_trim+0x1e8>)
 800e5fe:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e602:	4944      	ldr	r1, [pc, #272]	; (800e714 <mem_trim+0x1fc>)
 800e604:	4840      	ldr	r0, [pc, #256]	; (800e708 <mem_trim+0x1f0>)
 800e606:	f009 f9db 	bl	80179c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e610:	69fa      	ldr	r2, [r7, #28]
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	4413      	add	r3, r2
 800e616:	330c      	adds	r3, #12
 800e618:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800e61a:	4b3f      	ldr	r3, [pc, #252]	; (800e718 <mem_trim+0x200>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	697a      	ldr	r2, [r7, #20]
 800e620:	429a      	cmp	r2, r3
 800e622:	d105      	bne.n	800e630 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800e624:	6938      	ldr	r0, [r7, #16]
 800e626:	f7ff fd99 	bl	800e15c <ptr_to_mem>
 800e62a:	4603      	mov	r3, r0
 800e62c:	4a3a      	ldr	r2, [pc, #232]	; (800e718 <mem_trim+0x200>)
 800e62e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e630:	6938      	ldr	r0, [r7, #16]
 800e632:	f7ff fd93 	bl	800e15c <ptr_to_mem>
 800e636:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	2200      	movs	r2, #0
 800e63c:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	69fa      	ldr	r2, [r7, #28]
 800e648:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	693a      	ldr	r2, [r7, #16]
 800e64e:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a27      	ldr	r2, [pc, #156]	; (800e6f4 <mem_trim+0x1dc>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d044      	beq.n	800e6e4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff fd7c 	bl	800e15c <ptr_to_mem>
 800e664:	4602      	mov	r2, r0
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	6053      	str	r3, [r2, #4]
 800e66a:	e03b      	b.n	800e6e4 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	3318      	adds	r3, #24
 800e670:	69ba      	ldr	r2, [r7, #24]
 800e672:	429a      	cmp	r2, r3
 800e674:	d336      	bcc.n	800e6e4 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e676:	69fa      	ldr	r2, [r7, #28]
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	4413      	add	r3, r2
 800e67c:	330c      	adds	r3, #12
 800e67e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e680:	6a3b      	ldr	r3, [r7, #32]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a1b      	ldr	r2, [pc, #108]	; (800e6f4 <mem_trim+0x1dc>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d106      	bne.n	800e698 <mem_trim+0x180>
 800e68a:	4b1d      	ldr	r3, [pc, #116]	; (800e700 <mem_trim+0x1e8>)
 800e68c:	f240 3216 	movw	r2, #790	; 0x316
 800e690:	4920      	ldr	r1, [pc, #128]	; (800e714 <mem_trim+0x1fc>)
 800e692:	481d      	ldr	r0, [pc, #116]	; (800e708 <mem_trim+0x1f0>)
 800e694:	f009 f994 	bl	80179c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e698:	6938      	ldr	r0, [r7, #16]
 800e69a:	f7ff fd5f 	bl	800e15c <ptr_to_mem>
 800e69e:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800e6a0:	4b1d      	ldr	r3, [pc, #116]	; (800e718 <mem_trim+0x200>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d202      	bcs.n	800e6b0 <mem_trim+0x198>
      lfree = mem2;
 800e6aa:	4a1b      	ldr	r2, [pc, #108]	; (800e718 <mem_trim+0x200>)
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	69fa      	ldr	r2, [r7, #28]
 800e6c2:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	693a      	ldr	r2, [r7, #16]
 800e6c8:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a09      	ldr	r2, [pc, #36]	; (800e6f4 <mem_trim+0x1dc>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d007      	beq.n	800e6e4 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff fd3f 	bl	800e15c <ptr_to_mem>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e6e4:	480a      	ldr	r0, [pc, #40]	; (800e710 <mem_trim+0x1f8>)
 800e6e6:	f001 fda0 	bl	801022a <sys_mutex_unlock>
  return rmem;
 800e6ea:	687b      	ldr	r3, [r7, #4]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3728      	adds	r7, #40	; 0x28
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	0001ffe8 	.word	0x0001ffe8
 800e6f8:	24009dfc 	.word	0x24009dfc
 800e6fc:	24009e00 	.word	0x24009e00
 800e700:	0801aca8 	.word	0x0801aca8
 800e704:	0801ae90 	.word	0x0801ae90
 800e708:	0801ad4c 	.word	0x0801ad4c
 800e70c:	0801aea8 	.word	0x0801aea8
 800e710:	24009e04 	.word	0x24009e04
 800e714:	0801aec8 	.word	0x0801aec8
 800e718:	24009e08 	.word	0x24009e08

0800e71c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b088      	sub	sp, #32
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <mem_malloc+0x12>
    return NULL;
 800e72a:	2300      	movs	r3, #0
 800e72c:	e0d9      	b.n	800e8e2 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3303      	adds	r3, #3
 800e732:	f023 0303 	bic.w	r3, r3, #3
 800e736:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	2b0b      	cmp	r3, #11
 800e73c:	d801      	bhi.n	800e742 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e73e:	230c      	movs	r3, #12
 800e740:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	4a69      	ldr	r2, [pc, #420]	; (800e8ec <mem_malloc+0x1d0>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d803      	bhi.n	800e752 <mem_malloc+0x36>
 800e74a:	69ba      	ldr	r2, [r7, #24]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d201      	bcs.n	800e756 <mem_malloc+0x3a>
    return NULL;
 800e752:	2300      	movs	r3, #0
 800e754:	e0c5      	b.n	800e8e2 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e756:	4866      	ldr	r0, [pc, #408]	; (800e8f0 <mem_malloc+0x1d4>)
 800e758:	f001 fd58 	bl	801020c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e75c:	4b65      	ldr	r3, [pc, #404]	; (800e8f4 <mem_malloc+0x1d8>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fd0b 	bl	800e17c <mem_to_ptr>
 800e766:	61f8      	str	r0, [r7, #28]
 800e768:	e0b0      	b.n	800e8cc <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e76a:	69f8      	ldr	r0, [r7, #28]
 800e76c:	f7ff fcf6 	bl	800e15c <ptr_to_mem>
 800e770:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	7a1b      	ldrb	r3, [r3, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	f040 80a2 	bne.w	800e8c0 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	429a      	cmp	r2, r3
 800e78a:	f200 8099 	bhi.w	800e8c0 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	f1a3 020c 	sub.w	r2, r3, #12
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	3318      	adds	r3, #24
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d331      	bcc.n	800e806 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e7a2:	69fa      	ldr	r2, [r7, #28]
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	330c      	adds	r3, #12
 800e7aa:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4a4f      	ldr	r2, [pc, #316]	; (800e8ec <mem_malloc+0x1d0>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d106      	bne.n	800e7c2 <mem_malloc+0xa6>
 800e7b4:	4b50      	ldr	r3, [pc, #320]	; (800e8f8 <mem_malloc+0x1dc>)
 800e7b6:	f240 3287 	movw	r2, #903	; 0x387
 800e7ba:	4950      	ldr	r1, [pc, #320]	; (800e8fc <mem_malloc+0x1e0>)
 800e7bc:	4850      	ldr	r0, [pc, #320]	; (800e900 <mem_malloc+0x1e4>)
 800e7be:	f009 f8ff 	bl	80179c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f7ff fcca 	bl	800e15c <ptr_to_mem>
 800e7c8:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	69fa      	ldr	r2, [r7, #28]
 800e7dc:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a3f      	ldr	r2, [pc, #252]	; (800e8ec <mem_malloc+0x1d0>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d00b      	beq.n	800e80c <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff fcaf 	bl	800e15c <ptr_to_mem>
 800e7fe:	4602      	mov	r2, r0
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6053      	str	r3, [r2, #4]
 800e804:	e002      	b.n	800e80c <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	2201      	movs	r2, #1
 800e80a:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e80c:	4b39      	ldr	r3, [pc, #228]	; (800e8f4 <mem_malloc+0x1d8>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	429a      	cmp	r2, r3
 800e814:	d127      	bne.n	800e866 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800e816:	4b37      	ldr	r3, [pc, #220]	; (800e8f4 <mem_malloc+0x1d8>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e81c:	e005      	b.n	800e82a <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4618      	mov	r0, r3
 800e824:	f7ff fc9a 	bl	800e15c <ptr_to_mem>
 800e828:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	7a1b      	ldrb	r3, [r3, #8]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d004      	beq.n	800e83c <mem_malloc+0x120>
 800e832:	4b34      	ldr	r3, [pc, #208]	; (800e904 <mem_malloc+0x1e8>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d1f0      	bne.n	800e81e <mem_malloc+0x102>
          }
          lfree = cur;
 800e83c:	4a2d      	ldr	r2, [pc, #180]	; (800e8f4 <mem_malloc+0x1d8>)
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e842:	4b2c      	ldr	r3, [pc, #176]	; (800e8f4 <mem_malloc+0x1d8>)
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	4b2f      	ldr	r3, [pc, #188]	; (800e904 <mem_malloc+0x1e8>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d00b      	beq.n	800e866 <mem_malloc+0x14a>
 800e84e:	4b29      	ldr	r3, [pc, #164]	; (800e8f4 <mem_malloc+0x1d8>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	7a1b      	ldrb	r3, [r3, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d006      	beq.n	800e866 <mem_malloc+0x14a>
 800e858:	4b27      	ldr	r3, [pc, #156]	; (800e8f8 <mem_malloc+0x1dc>)
 800e85a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e85e:	492a      	ldr	r1, [pc, #168]	; (800e908 <mem_malloc+0x1ec>)
 800e860:	4827      	ldr	r0, [pc, #156]	; (800e900 <mem_malloc+0x1e4>)
 800e862:	f009 f8ad 	bl	80179c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e866:	4822      	ldr	r0, [pc, #136]	; (800e8f0 <mem_malloc+0x1d4>)
 800e868:	f001 fcdf 	bl	801022a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	4413      	add	r3, r2
 800e872:	330c      	adds	r3, #12
 800e874:	4a23      	ldr	r2, [pc, #140]	; (800e904 <mem_malloc+0x1e8>)
 800e876:	6812      	ldr	r2, [r2, #0]
 800e878:	4293      	cmp	r3, r2
 800e87a:	d906      	bls.n	800e88a <mem_malloc+0x16e>
 800e87c:	4b1e      	ldr	r3, [pc, #120]	; (800e8f8 <mem_malloc+0x1dc>)
 800e87e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e882:	4922      	ldr	r1, [pc, #136]	; (800e90c <mem_malloc+0x1f0>)
 800e884:	481e      	ldr	r0, [pc, #120]	; (800e900 <mem_malloc+0x1e4>)
 800e886:	f009 f89b 	bl	80179c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	f003 0303 	and.w	r3, r3, #3
 800e890:	2b00      	cmp	r3, #0
 800e892:	d006      	beq.n	800e8a2 <mem_malloc+0x186>
 800e894:	4b18      	ldr	r3, [pc, #96]	; (800e8f8 <mem_malloc+0x1dc>)
 800e896:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e89a:	491d      	ldr	r1, [pc, #116]	; (800e910 <mem_malloc+0x1f4>)
 800e89c:	4818      	ldr	r0, [pc, #96]	; (800e900 <mem_malloc+0x1e4>)
 800e89e:	f009 f88f 	bl	80179c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	f003 0303 	and.w	r3, r3, #3
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d006      	beq.n	800e8ba <mem_malloc+0x19e>
 800e8ac:	4b12      	ldr	r3, [pc, #72]	; (800e8f8 <mem_malloc+0x1dc>)
 800e8ae:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e8b2:	4918      	ldr	r1, [pc, #96]	; (800e914 <mem_malloc+0x1f8>)
 800e8b4:	4812      	ldr	r0, [pc, #72]	; (800e900 <mem_malloc+0x1e4>)
 800e8b6:	f009 f883 	bl	80179c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	330c      	adds	r3, #12
 800e8be:	e010      	b.n	800e8e2 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800e8c0:	69f8      	ldr	r0, [r7, #28]
 800e8c2:	f7ff fc4b 	bl	800e15c <ptr_to_mem>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	4b07      	ldr	r3, [pc, #28]	; (800e8ec <mem_malloc+0x1d0>)
 800e8d0:	1a9b      	subs	r3, r3, r2
 800e8d2:	69fa      	ldr	r2, [r7, #28]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	f4ff af48 	bcc.w	800e76a <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e8da:	4805      	ldr	r0, [pc, #20]	; (800e8f0 <mem_malloc+0x1d4>)
 800e8dc:	f001 fca5 	bl	801022a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3720      	adds	r7, #32
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	0001ffe8 	.word	0x0001ffe8
 800e8f0:	24009e04 	.word	0x24009e04
 800e8f4:	24009e08 	.word	0x24009e08
 800e8f8:	0801aca8 	.word	0x0801aca8
 800e8fc:	0801aec8 	.word	0x0801aec8
 800e900:	0801ad4c 	.word	0x0801ad4c
 800e904:	24009e00 	.word	0x24009e00
 800e908:	0801aedc 	.word	0x0801aedc
 800e90c:	0801aef8 	.word	0x0801aef8
 800e910:	0801af28 	.word	0x0801af28
 800e914:	0801af58 	.word	0x0801af58

0800e918 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	2200      	movs	r2, #0
 800e926:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	3303      	adds	r3, #3
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e934:	2300      	movs	r3, #0
 800e936:	60fb      	str	r3, [r7, #12]
 800e938:	e011      	b.n	800e95e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	461a      	mov	r2, r3
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	4413      	add	r3, r2
 800e956:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3301      	adds	r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	885b      	ldrh	r3, [r3, #2]
 800e962:	461a      	mov	r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4293      	cmp	r3, r2
 800e968:	dbe7      	blt.n	800e93a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e96a:	bf00      	nop
 800e96c:	bf00      	nop
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e97e:	2300      	movs	r3, #0
 800e980:	80fb      	strh	r3, [r7, #6]
 800e982:	e009      	b.n	800e998 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	4a08      	ldr	r2, [pc, #32]	; (800e9a8 <memp_init+0x30>)
 800e988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff ffc3 	bl	800e918 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	3301      	adds	r3, #1
 800e996:	80fb      	strh	r3, [r7, #6]
 800e998:	88fb      	ldrh	r3, [r7, #6]
 800e99a:	2b0c      	cmp	r3, #12
 800e99c:	d9f2      	bls.n	800e984 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e99e:	bf00      	nop
 800e9a0:	bf00      	nop
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	0801d524 	.word	0x0801d524

0800e9ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e9b4:	f001 fc66 	bl	8010284 <sys_arch_protect>
 800e9b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d015      	beq.n	800e9f4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	6812      	ldr	r2, [r2, #0]
 800e9d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	f003 0303 	and.w	r3, r3, #3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d006      	beq.n	800e9ea <do_memp_malloc_pool+0x3e>
 800e9dc:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <do_memp_malloc_pool+0x58>)
 800e9de:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e9e2:	4909      	ldr	r1, [pc, #36]	; (800ea08 <do_memp_malloc_pool+0x5c>)
 800e9e4:	4809      	ldr	r0, [pc, #36]	; (800ea0c <do_memp_malloc_pool+0x60>)
 800e9e6:	f008 ffeb 	bl	80179c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f001 fc58 	bl	80102a0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	e003      	b.n	800e9fc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f001 fc53 	bl	80102a0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	0801af7c 	.word	0x0801af7c
 800ea08:	0801b008 	.word	0x0801b008
 800ea0c:	0801b02c 	.word	0x0801b02c

0800ea10 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d106      	bne.n	800ea2c <memp_malloc_pool+0x1c>
 800ea1e:	4b0a      	ldr	r3, [pc, #40]	; (800ea48 <memp_malloc_pool+0x38>)
 800ea20:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ea24:	4909      	ldr	r1, [pc, #36]	; (800ea4c <memp_malloc_pool+0x3c>)
 800ea26:	480a      	ldr	r0, [pc, #40]	; (800ea50 <memp_malloc_pool+0x40>)
 800ea28:	f008 ffca 	bl	80179c0 <iprintf>
  if (desc == NULL) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <memp_malloc_pool+0x26>
    return NULL;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e003      	b.n	800ea3e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff ffb8 	bl	800e9ac <do_memp_malloc_pool>
 800ea3c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	0801af7c 	.word	0x0801af7c
 800ea4c:	0801b054 	.word	0x0801b054
 800ea50:	0801b02c 	.word	0x0801b02c

0800ea54 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ea5e:	79fb      	ldrb	r3, [r7, #7]
 800ea60:	2b0c      	cmp	r3, #12
 800ea62:	d908      	bls.n	800ea76 <memp_malloc+0x22>
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <memp_malloc+0x3c>)
 800ea66:	f240 1257 	movw	r2, #343	; 0x157
 800ea6a:	490a      	ldr	r1, [pc, #40]	; (800ea94 <memp_malloc+0x40>)
 800ea6c:	480a      	ldr	r0, [pc, #40]	; (800ea98 <memp_malloc+0x44>)
 800ea6e:	f008 ffa7 	bl	80179c0 <iprintf>
 800ea72:	2300      	movs	r3, #0
 800ea74:	e008      	b.n	800ea88 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	4a08      	ldr	r2, [pc, #32]	; (800ea9c <memp_malloc+0x48>)
 800ea7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff ff94 	bl	800e9ac <do_memp_malloc_pool>
 800ea84:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ea86:	68fb      	ldr	r3, [r7, #12]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	0801af7c 	.word	0x0801af7c
 800ea94:	0801b068 	.word	0x0801b068
 800ea98:	0801b02c 	.word	0x0801b02c
 800ea9c:	0801d524 	.word	0x0801d524

0800eaa0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	f003 0303 	and.w	r3, r3, #3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d006      	beq.n	800eac2 <do_memp_free_pool+0x22>
 800eab4:	4b0d      	ldr	r3, [pc, #52]	; (800eaec <do_memp_free_pool+0x4c>)
 800eab6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800eaba:	490d      	ldr	r1, [pc, #52]	; (800eaf0 <do_memp_free_pool+0x50>)
 800eabc:	480d      	ldr	r0, [pc, #52]	; (800eaf4 <do_memp_free_pool+0x54>)
 800eabe:	f008 ff7f 	bl	80179c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800eac6:	f001 fbdd 	bl	8010284 <sys_arch_protect>
 800eaca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800eade:	68b8      	ldr	r0, [r7, #8]
 800eae0:	f001 fbde 	bl	80102a0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800eae4:	bf00      	nop
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	0801af7c 	.word	0x0801af7c
 800eaf0:	0801b088 	.word	0x0801b088
 800eaf4:	0801b02c 	.word	0x0801b02c

0800eaf8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d106      	bne.n	800eb16 <memp_free_pool+0x1e>
 800eb08:	4b0a      	ldr	r3, [pc, #40]	; (800eb34 <memp_free_pool+0x3c>)
 800eb0a:	f240 1295 	movw	r2, #405	; 0x195
 800eb0e:	490a      	ldr	r1, [pc, #40]	; (800eb38 <memp_free_pool+0x40>)
 800eb10:	480a      	ldr	r0, [pc, #40]	; (800eb3c <memp_free_pool+0x44>)
 800eb12:	f008 ff55 	bl	80179c0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d007      	beq.n	800eb2c <memp_free_pool+0x34>
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d004      	beq.n	800eb2c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ffbb 	bl	800eaa0 <do_memp_free_pool>
 800eb2a:	e000      	b.n	800eb2e <memp_free_pool+0x36>
    return;
 800eb2c:	bf00      	nop
}
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	0801af7c 	.word	0x0801af7c
 800eb38:	0801b054 	.word	0x0801b054
 800eb3c:	0801b02c 	.word	0x0801b02c

0800eb40 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	6039      	str	r1, [r7, #0]
 800eb4a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	2b0c      	cmp	r3, #12
 800eb50:	d907      	bls.n	800eb62 <memp_free+0x22>
 800eb52:	4b0c      	ldr	r3, [pc, #48]	; (800eb84 <memp_free+0x44>)
 800eb54:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800eb58:	490b      	ldr	r1, [pc, #44]	; (800eb88 <memp_free+0x48>)
 800eb5a:	480c      	ldr	r0, [pc, #48]	; (800eb8c <memp_free+0x4c>)
 800eb5c:	f008 ff30 	bl	80179c0 <iprintf>
 800eb60:	e00c      	b.n	800eb7c <memp_free+0x3c>

  if (mem == NULL) {
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d008      	beq.n	800eb7a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	4a09      	ldr	r2, [pc, #36]	; (800eb90 <memp_free+0x50>)
 800eb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7ff ff94 	bl	800eaa0 <do_memp_free_pool>
 800eb78:	e000      	b.n	800eb7c <memp_free+0x3c>
    return;
 800eb7a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	0801af7c 	.word	0x0801af7c
 800eb88:	0801b0a8 	.word	0x0801b0a8
 800eb8c:	0801b02c 	.word	0x0801b02c
 800eb90:	0801d524 	.word	0x0801d524

0800eb94 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d013      	beq.n	800ebca <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00b      	beq.n	800ebc2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fe94 	bl	800f8dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	605a      	str	r2, [r3, #4]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685a      	ldr	r2, [r3, #4]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ebc2:	6879      	ldr	r1, [r7, #4]
 800ebc4:	2006      	movs	r0, #6
 800ebc6:	f7ff ffbb 	bl	800eb40 <memp_free>
  }
}
 800ebca:	bf00      	nop
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ebd6:	bf00      	nop
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800ebee:	f7f7 f849 	bl	8005c84 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d108      	bne.n	800ec0a <netif_add+0x2a>
 800ebf8:	4b57      	ldr	r3, [pc, #348]	; (800ed58 <netif_add+0x178>)
 800ebfa:	f240 1227 	movw	r2, #295	; 0x127
 800ebfe:	4957      	ldr	r1, [pc, #348]	; (800ed5c <netif_add+0x17c>)
 800ec00:	4857      	ldr	r0, [pc, #348]	; (800ed60 <netif_add+0x180>)
 800ec02:	f008 fedd 	bl	80179c0 <iprintf>
 800ec06:	2300      	movs	r3, #0
 800ec08:	e0a2      	b.n	800ed50 <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d108      	bne.n	800ec22 <netif_add+0x42>
 800ec10:	4b51      	ldr	r3, [pc, #324]	; (800ed58 <netif_add+0x178>)
 800ec12:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ec16:	4953      	ldr	r1, [pc, #332]	; (800ed64 <netif_add+0x184>)
 800ec18:	4851      	ldr	r0, [pc, #324]	; (800ed60 <netif_add+0x180>)
 800ec1a:	f008 fed1 	bl	80179c0 <iprintf>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	e096      	b.n	800ed50 <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ec28:	4b4f      	ldr	r3, [pc, #316]	; (800ed68 <netif_add+0x188>)
 800ec2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ec32:	4b4d      	ldr	r3, [pc, #308]	; (800ed68 <netif_add+0x188>)
 800ec34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d101      	bne.n	800ec40 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ec3c:	4b4a      	ldr	r3, [pc, #296]	; (800ed68 <netif_add+0x188>)
 800ec3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	4a45      	ldr	r2, [pc, #276]	; (800ed6c <netif_add+0x18c>)
 800ec56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a3a      	ldr	r2, [r7, #32]
 800ec70:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ec72:	4b3f      	ldr	r3, [pc, #252]	; (800ed70 <netif_add+0x190>)
 800ec74:	781a      	ldrb	r2, [r3, #0]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	68b9      	ldr	r1, [r7, #8]
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f000 f913 	bl	800eeb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	4798      	blx	r3
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <netif_add+0xbe>
    return NULL;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e058      	b.n	800ed50 <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eca4:	2bff      	cmp	r3, #255	; 0xff
 800eca6:	d103      	bne.n	800ecb0 <netif_add+0xd0>
        netif->num = 0;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ecb4:	4b2f      	ldr	r3, [pc, #188]	; (800ed74 <netif_add+0x194>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	e02b      	b.n	800ed14 <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ecbc:	697a      	ldr	r2, [r7, #20]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d106      	bne.n	800ecd2 <netif_add+0xf2>
 800ecc4:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <netif_add+0x178>)
 800ecc6:	f240 128b 	movw	r2, #395	; 0x18b
 800ecca:	492b      	ldr	r1, [pc, #172]	; (800ed78 <netif_add+0x198>)
 800eccc:	4824      	ldr	r0, [pc, #144]	; (800ed60 <netif_add+0x180>)
 800ecce:	f008 fe77 	bl	80179c0 <iprintf>
        num_netifs++;
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	2bff      	cmp	r3, #255	; 0xff
 800ecdc:	dd06      	ble.n	800ecec <netif_add+0x10c>
 800ecde:	4b1e      	ldr	r3, [pc, #120]	; (800ed58 <netif_add+0x178>)
 800ece0:	f240 128d 	movw	r2, #397	; 0x18d
 800ece4:	4925      	ldr	r1, [pc, #148]	; (800ed7c <netif_add+0x19c>)
 800ece6:	481e      	ldr	r0, [pc, #120]	; (800ed60 <netif_add+0x180>)
 800ece8:	f008 fe6a 	bl	80179c0 <iprintf>
        if (netif2->num == netif->num) {
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d108      	bne.n	800ed0e <netif_add+0x12e>
          netif->num++;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed02:	3301      	adds	r3, #1
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ed0c:	e005      	b.n	800ed1a <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	617b      	str	r3, [r7, #20]
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1d0      	bne.n	800ecbc <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1be      	bne.n	800ec9e <netif_add+0xbe>
  }
  if (netif->num == 254) {
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed26:	2bfe      	cmp	r3, #254	; 0xfe
 800ed28:	d103      	bne.n	800ed32 <netif_add+0x152>
    netif_num = 0;
 800ed2a:	4b11      	ldr	r3, [pc, #68]	; (800ed70 <netif_add+0x190>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	701a      	strb	r2, [r3, #0]
 800ed30:	e006      	b.n	800ed40 <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed38:	3301      	adds	r3, #1
 800ed3a:	b2da      	uxtb	r2, r3
 800ed3c:	4b0c      	ldr	r3, [pc, #48]	; (800ed70 <netif_add+0x190>)
 800ed3e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ed40:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <netif_add+0x194>)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ed48:	4a0a      	ldr	r2, [pc, #40]	; (800ed74 <netif_add+0x194>)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3718      	adds	r7, #24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	0801b0c4 	.word	0x0801b0c4
 800ed5c:	0801b1b0 	.word	0x0801b1b0
 800ed60:	0801b16c 	.word	0x0801b16c
 800ed64:	0801b1cc 	.word	0x0801b1cc
 800ed68:	0801d484 	.word	0x0801d484
 800ed6c:	0800f1a3 	.word	0x0800f1a3
 800ed70:	240108a0 	.word	0x240108a0
 800ed74:	24010898 	.word	0x24010898
 800ed78:	0801b1f0 	.word	0x0801b1f0
 800ed7c:	0801b204 	.word	0x0801b204

0800ed80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f003 f919 	bl	8011fc4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ed92:	6839      	ldr	r1, [r7, #0]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f008 fbf1 	bl	801757c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ed9a:	bf00      	nop
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d106      	bne.n	800edc4 <netif_do_set_ipaddr+0x20>
 800edb6:	4b1d      	ldr	r3, [pc, #116]	; (800ee2c <netif_do_set_ipaddr+0x88>)
 800edb8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800edbc:	491c      	ldr	r1, [pc, #112]	; (800ee30 <netif_do_set_ipaddr+0x8c>)
 800edbe:	481d      	ldr	r0, [pc, #116]	; (800ee34 <netif_do_set_ipaddr+0x90>)
 800edc0:	f008 fdfe 	bl	80179c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <netif_do_set_ipaddr+0x34>
 800edca:	4b18      	ldr	r3, [pc, #96]	; (800ee2c <netif_do_set_ipaddr+0x88>)
 800edcc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800edd0:	4917      	ldr	r1, [pc, #92]	; (800ee30 <netif_do_set_ipaddr+0x8c>)
 800edd2:	4818      	ldr	r0, [pc, #96]	; (800ee34 <netif_do_set_ipaddr+0x90>)
 800edd4:	f008 fdf4 	bl	80179c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3304      	adds	r3, #4
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d01c      	beq.n	800ee20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	3304      	adds	r3, #4
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800edf6:	f107 0314 	add.w	r3, r7, #20
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff ffbf 	bl	800ed80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <netif_do_set_ipaddr+0x6a>
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	e000      	b.n	800ee10 <netif_do_set_ipaddr+0x6c>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ee14:	2101      	movs	r1, #1
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f000 f8d6 	bl	800efc8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e000      	b.n	800ee22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	0801b0c4 	.word	0x0801b0c4
 800ee30:	0801b234 	.word	0x0801b234
 800ee34:	0801b16c 	.word	0x0801b16c

0800ee38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b085      	sub	sp, #20
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	3308      	adds	r3, #8
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d00a      	beq.n	800ee68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <netif_do_set_netmask+0x26>
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	e000      	b.n	800ee60 <netif_do_set_netmask+0x28>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ee64:	2301      	movs	r3, #1
 800ee66:	e000      	b.n	800ee6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr

0800ee76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ee76:	b480      	push	{r7}
 800ee78:	b085      	sub	sp, #20
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	60f8      	str	r0, [r7, #12]
 800ee7e:	60b9      	str	r1, [r7, #8]
 800ee80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	330c      	adds	r3, #12
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d00a      	beq.n	800eea6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d002      	beq.n	800ee9c <netif_do_set_gw+0x26>
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	e000      	b.n	800ee9e <netif_do_set_gw+0x28>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800eea2:	2301      	movs	r3, #1
 800eea4:	e000      	b.n	800eea8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800eec2:	2300      	movs	r3, #0
 800eec4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800eeca:	f7f6 fedb 	bl	8005c84 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800eed4:	4b1c      	ldr	r3, [pc, #112]	; (800ef48 <netif_set_addr+0x94>)
 800eed6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800eede:	4b1a      	ldr	r3, [pc, #104]	; (800ef48 <netif_set_addr+0x94>)
 800eee0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800eee8:	4b17      	ldr	r3, [pc, #92]	; (800ef48 <netif_set_addr+0x94>)
 800eeea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d003      	beq.n	800eefa <netif_set_addr+0x46>
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d101      	bne.n	800eefe <netif_set_addr+0x4a>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e000      	b.n	800ef00 <netif_set_addr+0x4c>
 800eefe:	2300      	movs	r3, #0
 800ef00:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d006      	beq.n	800ef16 <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ef08:	f107 0310 	add.w	r3, r7, #16
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f7ff ff47 	bl	800eda4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ef16:	69fa      	ldr	r2, [r7, #28]
 800ef18:	6879      	ldr	r1, [r7, #4]
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f7ff ff8c 	bl	800ee38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ef20:	69ba      	ldr	r2, [r7, #24]
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7ff ffa6 	bl	800ee76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d106      	bne.n	800ef3e <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ef30:	f107 0310 	add.w	r3, r7, #16
 800ef34:	461a      	mov	r2, r3
 800ef36:	68b9      	ldr	r1, [r7, #8]
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f7ff ff33 	bl	800eda4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ef3e:	bf00      	nop
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	0801d484 	.word	0x0801d484

0800ef4c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ef54:	f7f6 fe96 	bl	8005c84 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ef58:	4a03      	ldr	r2, [pc, #12]	; (800ef68 <netif_set_default+0x1c>)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	2401089c 	.word	0x2401089c

0800ef6c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ef74:	f7f6 fe86 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d107      	bne.n	800ef8e <netif_set_up+0x22>
 800ef7e:	4b0f      	ldr	r3, [pc, #60]	; (800efbc <netif_set_up+0x50>)
 800ef80:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ef84:	490e      	ldr	r1, [pc, #56]	; (800efc0 <netif_set_up+0x54>)
 800ef86:	480f      	ldr	r0, [pc, #60]	; (800efc4 <netif_set_up+0x58>)
 800ef88:	f008 fd1a 	bl	80179c0 <iprintf>
 800ef8c:	e013      	b.n	800efb6 <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef94:	f003 0301 	and.w	r3, r3, #1
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10c      	bne.n	800efb6 <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efa2:	f043 0301 	orr.w	r3, r3, #1
 800efa6:	b2da      	uxtb	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800efae:	2103      	movs	r1, #3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f809 	bl	800efc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	0801b0c4 	.word	0x0801b0c4
 800efc0:	0801b2a4 	.word	0x0801b2a4
 800efc4:	0801b16c 	.word	0x0801b16c

0800efc8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <netif_issue_reports+0x20>
 800efda:	4b18      	ldr	r3, [pc, #96]	; (800f03c <netif_issue_reports+0x74>)
 800efdc:	f240 326d 	movw	r2, #877	; 0x36d
 800efe0:	4917      	ldr	r1, [pc, #92]	; (800f040 <netif_issue_reports+0x78>)
 800efe2:	4818      	ldr	r0, [pc, #96]	; (800f044 <netif_issue_reports+0x7c>)
 800efe4:	f008 fcec 	bl	80179c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efee:	f003 0304 	and.w	r3, r3, #4
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d01e      	beq.n	800f034 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800effc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f000:	2b00      	cmp	r3, #0
 800f002:	d017      	beq.n	800f034 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f004:	78fb      	ldrb	r3, [r7, #3]
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d013      	beq.n	800f036 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	3304      	adds	r3, #4
 800f012:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00e      	beq.n	800f036 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f01e:	f003 0308 	and.w	r3, r3, #8
 800f022:	2b00      	cmp	r3, #0
 800f024:	d007      	beq.n	800f036 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	3304      	adds	r3, #4
 800f02a:	4619      	mov	r1, r3
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7fd fc07 	bl	800c840 <etharp_request>
 800f032:	e000      	b.n	800f036 <netif_issue_reports+0x6e>
    return;
 800f034:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	0801b0c4 	.word	0x0801b0c4
 800f040:	0801b2c0 	.word	0x0801b2c0
 800f044:	0801b16c 	.word	0x0801b16c

0800f048 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f050:	f7f6 fe18 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d107      	bne.n	800f06a <netif_set_down+0x22>
 800f05a:	4b12      	ldr	r3, [pc, #72]	; (800f0a4 <netif_set_down+0x5c>)
 800f05c:	f240 329b 	movw	r2, #923	; 0x39b
 800f060:	4911      	ldr	r1, [pc, #68]	; (800f0a8 <netif_set_down+0x60>)
 800f062:	4812      	ldr	r0, [pc, #72]	; (800f0ac <netif_set_down+0x64>)
 800f064:	f008 fcac 	bl	80179c0 <iprintf>
 800f068:	e019      	b.n	800f09e <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f070:	f003 0301 	and.w	r3, r3, #1
 800f074:	2b00      	cmp	r3, #0
 800f076:	d012      	beq.n	800f09e <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f07e:	f023 0301 	bic.w	r3, r3, #1
 800f082:	b2da      	uxtb	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f090:	f003 0308 	and.w	r3, r3, #8
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7fc ff8b 	bl	800bfb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	0801b0c4 	.word	0x0801b0c4
 800f0a8:	0801b2e4 	.word	0x0801b2e4
 800f0ac:	0801b16c 	.word	0x0801b16c

0800f0b0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f0b8:	f7f6 fde4 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d107      	bne.n	800f0d2 <netif_set_link_up+0x22>
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <netif_set_link_up+0x60>)
 800f0c4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f0c8:	4912      	ldr	r1, [pc, #72]	; (800f114 <netif_set_link_up+0x64>)
 800f0ca:	4813      	ldr	r0, [pc, #76]	; (800f118 <netif_set_link_up+0x68>)
 800f0cc:	f008 fc78 	bl	80179c0 <iprintf>
 800f0d0:	e01b      	b.n	800f10a <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0d8:	f003 0304 	and.w	r3, r3, #4
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d114      	bne.n	800f10a <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0e6:	f043 0304 	orr.w	r3, r3, #4
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f0f2:	2103      	movs	r1, #3
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7ff ff67 	bl	800efc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	69db      	ldr	r3, [r3, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <netif_set_link_up+0x5a>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	69db      	ldr	r3, [r3, #28]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	0801b0c4 	.word	0x0801b0c4
 800f114:	0801b304 	.word	0x0801b304
 800f118:	0801b16c 	.word	0x0801b16c

0800f11c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f124:	f7f6 fdae 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d107      	bne.n	800f13e <netif_set_link_down+0x22>
 800f12e:	4b11      	ldr	r3, [pc, #68]	; (800f174 <netif_set_link_down+0x58>)
 800f130:	f240 4206 	movw	r2, #1030	; 0x406
 800f134:	4910      	ldr	r1, [pc, #64]	; (800f178 <netif_set_link_down+0x5c>)
 800f136:	4811      	ldr	r0, [pc, #68]	; (800f17c <netif_set_link_down+0x60>)
 800f138:	f008 fc42 	bl	80179c0 <iprintf>
 800f13c:	e017      	b.n	800f16e <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f144:	f003 0304 	and.w	r3, r3, #4
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d010      	beq.n	800f16e <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f152:	f023 0304 	bic.w	r3, r3, #4
 800f156:	b2da      	uxtb	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	69db      	ldr	r3, [r3, #28]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d003      	beq.n	800f16e <netif_set_link_down+0x52>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	69db      	ldr	r3, [r3, #28]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	0801b0c4 	.word	0x0801b0c4
 800f178:	0801b328 	.word	0x0801b328
 800f17c:	0801b16c 	.word	0x0801b16c

0800f180 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800f18a:	f7f6 fd7b 	bl	8005c84 <sys_check_core_locking>

  if (netif) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d002      	beq.n	800f19a <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	61da      	str	r2, [r3, #28]
  }
}
 800f19a:	bf00      	nop
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f1a2:	b480      	push	{r7}
 800f1a4:	b085      	sub	sp, #20
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	60f8      	str	r0, [r7, #12]
 800f1aa:	60b9      	str	r1, [r7, #8]
 800f1ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f1ae:	f06f 030b 	mvn.w	r3, #11
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
	...

0800f1c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800f1ca:	f7f6 fd5b 	bl	8005c84 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800f1ce:	79fb      	ldrb	r3, [r7, #7]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d013      	beq.n	800f1fc <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800f1d4:	4b0c      	ldr	r3, [pc, #48]	; (800f208 <netif_get_by_index+0x48>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	60fb      	str	r3, [r7, #12]
 800f1da:	e00c      	b.n	800f1f6 <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	79fa      	ldrb	r2, [r7, #7]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d101      	bne.n	800f1f0 <netif_get_by_index+0x30>
        return netif; /* found! */
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	e006      	b.n	800f1fe <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	60fb      	str	r3, [r7, #12]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1ef      	bne.n	800f1dc <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	24010898 	.word	0x24010898

0800f20c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f212:	f001 f837 	bl	8010284 <sys_arch_protect>
 800f216:	6038      	str	r0, [r7, #0]
 800f218:	4b0d      	ldr	r3, [pc, #52]	; (800f250 <pbuf_free_ooseq+0x44>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	701a      	strb	r2, [r3, #0]
 800f21e:	6838      	ldr	r0, [r7, #0]
 800f220:	f001 f83e 	bl	80102a0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f224:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <pbuf_free_ooseq+0x48>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	607b      	str	r3, [r7, #4]
 800f22a:	e00a      	b.n	800f242 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f230:	2b00      	cmp	r3, #0
 800f232:	d003      	beq.n	800f23c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f002 ff03 	bl	8012040 <tcp_free_ooseq>
      return;
 800f23a:	e005      	b.n	800f248 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	607b      	str	r3, [r7, #4]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1f1      	bne.n	800f22c <pbuf_free_ooseq+0x20>
    }
  }
}
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	240108a1 	.word	0x240108a1
 800f254:	240108b4 	.word	0x240108b4

0800f258 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f260:	f7ff ffd4 	bl	800f20c <pbuf_free_ooseq>
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f272:	f001 f807 	bl	8010284 <sys_arch_protect>
 800f276:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f278:	4b0f      	ldr	r3, [pc, #60]	; (800f2b8 <pbuf_pool_is_empty+0x4c>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f27e:	4b0e      	ldr	r3, [pc, #56]	; (800f2b8 <pbuf_pool_is_empty+0x4c>)
 800f280:	2201      	movs	r2, #1
 800f282:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f001 f80b 	bl	80102a0 <sys_arch_unprotect>

  if (!queued) {
 800f28a:	78fb      	ldrb	r3, [r7, #3]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d10f      	bne.n	800f2b0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f290:	2100      	movs	r1, #0
 800f292:	480a      	ldr	r0, [pc, #40]	; (800f2bc <pbuf_pool_is_empty+0x50>)
 800f294:	f007 f9f8 	bl	8016688 <tcpip_try_callback>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d008      	beq.n	800f2b0 <pbuf_pool_is_empty+0x44>
 800f29e:	f000 fff1 	bl	8010284 <sys_arch_protect>
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	4b04      	ldr	r3, [pc, #16]	; (800f2b8 <pbuf_pool_is_empty+0x4c>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 fff8 	bl	80102a0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	240108a1 	.word	0x240108a1
 800f2bc:	0800f259 	.word	0x0800f259

0800f2c0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	80fb      	strh	r3, [r7, #6]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	88fa      	ldrh	r2, [r7, #6]
 800f2e6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	88ba      	ldrh	r2, [r7, #4]
 800f2ec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f2ee:	8b3b      	ldrh	r3, [r7, #24]
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	7f3a      	ldrb	r2, [r7, #28]
 800f2fa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2201      	movs	r2, #1
 800f300:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	73da      	strb	r2, [r3, #15]
}
 800f308:	bf00      	nop
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08c      	sub	sp, #48	; 0x30
 800f318:	af02      	add	r7, sp, #8
 800f31a:	4603      	mov	r3, r0
 800f31c:	71fb      	strb	r3, [r7, #7]
 800f31e:	460b      	mov	r3, r1
 800f320:	80bb      	strh	r3, [r7, #4]
 800f322:	4613      	mov	r3, r2
 800f324:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f326:	79fb      	ldrb	r3, [r7, #7]
 800f328:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f32a:	887b      	ldrh	r3, [r7, #2]
 800f32c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f330:	f000 8082 	beq.w	800f438 <pbuf_alloc+0x124>
 800f334:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f338:	f300 80c9 	bgt.w	800f4ce <pbuf_alloc+0x1ba>
 800f33c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f340:	d010      	beq.n	800f364 <pbuf_alloc+0x50>
 800f342:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f346:	f300 80c2 	bgt.w	800f4ce <pbuf_alloc+0x1ba>
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d002      	beq.n	800f354 <pbuf_alloc+0x40>
 800f34e:	2b41      	cmp	r3, #65	; 0x41
 800f350:	f040 80bd 	bne.w	800f4ce <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f354:	887a      	ldrh	r2, [r7, #2]
 800f356:	88bb      	ldrh	r3, [r7, #4]
 800f358:	4619      	mov	r1, r3
 800f35a:	2000      	movs	r0, #0
 800f35c:	f000 f8d2 	bl	800f504 <pbuf_alloc_reference>
 800f360:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f362:	e0be      	b.n	800f4e2 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f364:	2300      	movs	r3, #0
 800f366:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f368:	2300      	movs	r3, #0
 800f36a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f36c:	88bb      	ldrh	r3, [r7, #4]
 800f36e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f370:	200c      	movs	r0, #12
 800f372:	f7ff fb6f 	bl	800ea54 <memp_malloc>
 800f376:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d109      	bne.n	800f392 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800f37e:	f7ff ff75 	bl	800f26c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <pbuf_alloc+0x7a>
            pbuf_free(p);
 800f388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38a:	f000 faa7 	bl	800f8dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f38e:	2300      	movs	r3, #0
 800f390:	e0a8      	b.n	800f4e4 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f394:	3303      	adds	r3, #3
 800f396:	b29b      	uxth	r3, r3
 800f398:	f023 0303 	bic.w	r3, r3, #3
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	f240 53ec 	movw	r3, #1516	; 0x5ec
 800f3a2:	1a9b      	subs	r3, r3, r2
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	8b7a      	ldrh	r2, [r7, #26]
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	bf28      	it	cs
 800f3ac:	4613      	movcs	r3, r2
 800f3ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f3b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3b2:	3310      	adds	r3, #16
 800f3b4:	693a      	ldr	r2, [r7, #16]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	3303      	adds	r3, #3
 800f3ba:	f023 0303 	bic.w	r3, r3, #3
 800f3be:	4618      	mov	r0, r3
 800f3c0:	89f9      	ldrh	r1, [r7, #14]
 800f3c2:	8b7a      	ldrh	r2, [r7, #26]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9301      	str	r3, [sp, #4]
 800f3c8:	887b      	ldrh	r3, [r7, #2]
 800f3ca:	9300      	str	r3, [sp, #0]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	6938      	ldr	r0, [r7, #16]
 800f3d2:	f7ff ff75 	bl	800f2c0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	f003 0303 	and.w	r3, r3, #3
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <pbuf_alloc+0xdc>
 800f3e2:	4b42      	ldr	r3, [pc, #264]	; (800f4ec <pbuf_alloc+0x1d8>)
 800f3e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3e8:	4941      	ldr	r1, [pc, #260]	; (800f4f0 <pbuf_alloc+0x1dc>)
 800f3ea:	4842      	ldr	r0, [pc, #264]	; (800f4f4 <pbuf_alloc+0x1e0>)
 800f3ec:	f008 fae8 	bl	80179c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f3f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3f2:	3303      	adds	r3, #3
 800f3f4:	f023 0303 	bic.w	r3, r3, #3
 800f3f8:	f240 52ec 	movw	r2, #1516	; 0x5ec
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d106      	bne.n	800f40e <pbuf_alloc+0xfa>
 800f400:	4b3a      	ldr	r3, [pc, #232]	; (800f4ec <pbuf_alloc+0x1d8>)
 800f402:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f406:	493c      	ldr	r1, [pc, #240]	; (800f4f8 <pbuf_alloc+0x1e4>)
 800f408:	483a      	ldr	r0, [pc, #232]	; (800f4f4 <pbuf_alloc+0x1e0>)
 800f40a:	f008 fad9 	bl	80179c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	2b00      	cmp	r3, #0
 800f412:	d102      	bne.n	800f41a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	627b      	str	r3, [r7, #36]	; 0x24
 800f418:	e002      	b.n	800f420 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	693a      	ldr	r2, [r7, #16]
 800f41e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f424:	8b7a      	ldrh	r2, [r7, #26]
 800f426:	89fb      	ldrh	r3, [r7, #14]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f42c:	2300      	movs	r3, #0
 800f42e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f430:	8b7b      	ldrh	r3, [r7, #26]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d19c      	bne.n	800f370 <pbuf_alloc+0x5c>
      break;
 800f436:	e054      	b.n	800f4e2 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f43a:	3303      	adds	r3, #3
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	f023 0303 	bic.w	r3, r3, #3
 800f442:	b29a      	uxth	r2, r3
 800f444:	88bb      	ldrh	r3, [r7, #4]
 800f446:	3303      	adds	r3, #3
 800f448:	b29b      	uxth	r3, r3
 800f44a:	f023 0303 	bic.w	r3, r3, #3
 800f44e:	b29b      	uxth	r3, r3
 800f450:	4413      	add	r3, r2
 800f452:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f454:	8b3b      	ldrh	r3, [r7, #24]
 800f456:	3310      	adds	r3, #16
 800f458:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f45a:	8b3a      	ldrh	r2, [r7, #24]
 800f45c:	88bb      	ldrh	r3, [r7, #4]
 800f45e:	3303      	adds	r3, #3
 800f460:	f023 0303 	bic.w	r3, r3, #3
 800f464:	429a      	cmp	r2, r3
 800f466:	d306      	bcc.n	800f476 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f468:	88bb      	ldrh	r3, [r7, #4]
 800f46a:	3303      	adds	r3, #3
 800f46c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f470:	697a      	ldr	r2, [r7, #20]
 800f472:	429a      	cmp	r2, r3
 800f474:	d201      	bcs.n	800f47a <pbuf_alloc+0x166>
        return NULL;
 800f476:	2300      	movs	r3, #0
 800f478:	e034      	b.n	800f4e4 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f47a:	6978      	ldr	r0, [r7, #20]
 800f47c:	f7ff f94e 	bl	800e71c <mem_malloc>
 800f480:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <pbuf_alloc+0x178>
        return NULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	e02b      	b.n	800f4e4 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f48c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f48e:	3310      	adds	r3, #16
 800f490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f492:	4413      	add	r3, r2
 800f494:	3303      	adds	r3, #3
 800f496:	f023 0303 	bic.w	r3, r3, #3
 800f49a:	4618      	mov	r0, r3
 800f49c:	88b9      	ldrh	r1, [r7, #4]
 800f49e:	88ba      	ldrh	r2, [r7, #4]
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	9301      	str	r3, [sp, #4]
 800f4a4:	887b      	ldrh	r3, [r7, #2]
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ae:	f7ff ff07 	bl	800f2c0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	f003 0303 	and.w	r3, r3, #3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d010      	beq.n	800f4e0 <pbuf_alloc+0x1cc>
 800f4be:	4b0b      	ldr	r3, [pc, #44]	; (800f4ec <pbuf_alloc+0x1d8>)
 800f4c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f4c4:	490d      	ldr	r1, [pc, #52]	; (800f4fc <pbuf_alloc+0x1e8>)
 800f4c6:	480b      	ldr	r0, [pc, #44]	; (800f4f4 <pbuf_alloc+0x1e0>)
 800f4c8:	f008 fa7a 	bl	80179c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f4cc:	e008      	b.n	800f4e0 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f4ce:	4b07      	ldr	r3, [pc, #28]	; (800f4ec <pbuf_alloc+0x1d8>)
 800f4d0:	f240 1227 	movw	r2, #295	; 0x127
 800f4d4:	490a      	ldr	r1, [pc, #40]	; (800f500 <pbuf_alloc+0x1ec>)
 800f4d6:	4807      	ldr	r0, [pc, #28]	; (800f4f4 <pbuf_alloc+0x1e0>)
 800f4d8:	f008 fa72 	bl	80179c0 <iprintf>
      return NULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	e001      	b.n	800f4e4 <pbuf_alloc+0x1d0>
      break;
 800f4e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3728      	adds	r7, #40	; 0x28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	0801b34c 	.word	0x0801b34c
 800f4f0:	0801b3d8 	.word	0x0801b3d8
 800f4f4:	0801b408 	.word	0x0801b408
 800f4f8:	0801b430 	.word	0x0801b430
 800f4fc:	0801b464 	.word	0x0801b464
 800f500:	0801b490 	.word	0x0801b490

0800f504 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af02      	add	r7, sp, #8
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	460b      	mov	r3, r1
 800f50e:	807b      	strh	r3, [r7, #2]
 800f510:	4613      	mov	r3, r2
 800f512:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f514:	883b      	ldrh	r3, [r7, #0]
 800f516:	2b41      	cmp	r3, #65	; 0x41
 800f518:	d009      	beq.n	800f52e <pbuf_alloc_reference+0x2a>
 800f51a:	883b      	ldrh	r3, [r7, #0]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d006      	beq.n	800f52e <pbuf_alloc_reference+0x2a>
 800f520:	4b0f      	ldr	r3, [pc, #60]	; (800f560 <pbuf_alloc_reference+0x5c>)
 800f522:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f526:	490f      	ldr	r1, [pc, #60]	; (800f564 <pbuf_alloc_reference+0x60>)
 800f528:	480f      	ldr	r0, [pc, #60]	; (800f568 <pbuf_alloc_reference+0x64>)
 800f52a:	f008 fa49 	bl	80179c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f52e:	200b      	movs	r0, #11
 800f530:	f7ff fa90 	bl	800ea54 <memp_malloc>
 800f534:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d101      	bne.n	800f540 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f53c:	2300      	movs	r3, #0
 800f53e:	e00b      	b.n	800f558 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f540:	8879      	ldrh	r1, [r7, #2]
 800f542:	887a      	ldrh	r2, [r7, #2]
 800f544:	2300      	movs	r3, #0
 800f546:	9301      	str	r3, [sp, #4]
 800f548:	883b      	ldrh	r3, [r7, #0]
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	460b      	mov	r3, r1
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7ff feb5 	bl	800f2c0 <pbuf_init_alloced_pbuf>
  return p;
 800f556:	68fb      	ldr	r3, [r7, #12]
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	0801b34c 	.word	0x0801b34c
 800f564:	0801b4ac 	.word	0x0801b4ac
 800f568:	0801b408 	.word	0x0801b408

0800f56c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af02      	add	r7, sp, #8
 800f572:	607b      	str	r3, [r7, #4]
 800f574:	4603      	mov	r3, r0
 800f576:	73fb      	strb	r3, [r7, #15]
 800f578:	460b      	mov	r3, r1
 800f57a:	81bb      	strh	r3, [r7, #12]
 800f57c:	4613      	mov	r3, r2
 800f57e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f584:	8a7b      	ldrh	r3, [r7, #18]
 800f586:	3303      	adds	r3, #3
 800f588:	f023 0203 	bic.w	r2, r3, #3
 800f58c:	89bb      	ldrh	r3, [r7, #12]
 800f58e:	441a      	add	r2, r3
 800f590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f592:	429a      	cmp	r2, r3
 800f594:	d901      	bls.n	800f59a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	e018      	b.n	800f5cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d007      	beq.n	800f5b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f5a0:	8a7b      	ldrh	r3, [r7, #18]
 800f5a2:	3303      	adds	r3, #3
 800f5a4:	f023 0303 	bic.w	r3, r3, #3
 800f5a8:	6a3a      	ldr	r2, [r7, #32]
 800f5aa:	4413      	add	r3, r2
 800f5ac:	617b      	str	r3, [r7, #20]
 800f5ae:	e001      	b.n	800f5b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	89b9      	ldrh	r1, [r7, #12]
 800f5b8:	89ba      	ldrh	r2, [r7, #12]
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	9301      	str	r3, [sp, #4]
 800f5be:	897b      	ldrh	r3, [r7, #10]
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	6979      	ldr	r1, [r7, #20]
 800f5c6:	f7ff fe7b 	bl	800f2c0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f5ca:	687b      	ldr	r3, [r7, #4]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3718      	adds	r7, #24
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d106      	bne.n	800f5f4 <pbuf_realloc+0x20>
 800f5e6:	4b39      	ldr	r3, [pc, #228]	; (800f6cc <pbuf_realloc+0xf8>)
 800f5e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f5ec:	4938      	ldr	r1, [pc, #224]	; (800f6d0 <pbuf_realloc+0xfc>)
 800f5ee:	4839      	ldr	r0, [pc, #228]	; (800f6d4 <pbuf_realloc+0x100>)
 800f5f0:	f008 f9e6 	bl	80179c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	891b      	ldrh	r3, [r3, #8]
 800f5f8:	887a      	ldrh	r2, [r7, #2]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d261      	bcs.n	800f6c2 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	891a      	ldrh	r2, [r3, #8]
 800f602:	887b      	ldrh	r3, [r7, #2]
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f608:	887b      	ldrh	r3, [r7, #2]
 800f60a:	817b      	strh	r3, [r7, #10]
  q = p;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f610:	e018      	b.n	800f644 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	895b      	ldrh	r3, [r3, #10]
 800f616:	897a      	ldrh	r2, [r7, #10]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	891a      	ldrh	r2, [r3, #8]
 800f620:	893b      	ldrh	r3, [r7, #8]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	b29a      	uxth	r2, r3
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <pbuf_realloc+0x70>
 800f636:	4b25      	ldr	r3, [pc, #148]	; (800f6cc <pbuf_realloc+0xf8>)
 800f638:	f240 12af 	movw	r2, #431	; 0x1af
 800f63c:	4926      	ldr	r1, [pc, #152]	; (800f6d8 <pbuf_realloc+0x104>)
 800f63e:	4825      	ldr	r0, [pc, #148]	; (800f6d4 <pbuf_realloc+0x100>)
 800f640:	f008 f9be 	bl	80179c0 <iprintf>
  while (rem_len > q->len) {
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	895b      	ldrh	r3, [r3, #10]
 800f648:	897a      	ldrh	r2, [r7, #10]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d8e1      	bhi.n	800f612 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	7b1b      	ldrb	r3, [r3, #12]
 800f652:	f003 030f 	and.w	r3, r3, #15
 800f656:	2b00      	cmp	r3, #0
 800f658:	d11f      	bne.n	800f69a <pbuf_realloc+0xc6>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	895b      	ldrh	r3, [r3, #10]
 800f65e:	897a      	ldrh	r2, [r7, #10]
 800f660:	429a      	cmp	r2, r3
 800f662:	d01a      	beq.n	800f69a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	7b5b      	ldrb	r3, [r3, #13]
 800f668:	f003 0302 	and.w	r3, r3, #2
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d114      	bne.n	800f69a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	685a      	ldr	r2, [r3, #4]
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	1ad2      	subs	r2, r2, r3
 800f678:	897b      	ldrh	r3, [r7, #10]
 800f67a:	4413      	add	r3, r2
 800f67c:	4619      	mov	r1, r3
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7fe ff4a 	bl	800e518 <mem_trim>
 800f684:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d106      	bne.n	800f69a <pbuf_realloc+0xc6>
 800f68c:	4b0f      	ldr	r3, [pc, #60]	; (800f6cc <pbuf_realloc+0xf8>)
 800f68e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f692:	4912      	ldr	r1, [pc, #72]	; (800f6dc <pbuf_realloc+0x108>)
 800f694:	480f      	ldr	r0, [pc, #60]	; (800f6d4 <pbuf_realloc+0x100>)
 800f696:	f008 f993 	bl	80179c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	897a      	ldrh	r2, [r7, #10]
 800f69e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	895a      	ldrh	r2, [r3, #10]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f000 f911 	bl	800f8dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	e000      	b.n	800f6c4 <pbuf_realloc+0xf0>
    return;
 800f6c2:	bf00      	nop

}
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	0801b34c 	.word	0x0801b34c
 800f6d0:	0801b4c0 	.word	0x0801b4c0
 800f6d4:	0801b408 	.word	0x0801b408
 800f6d8:	0801b4d8 	.word	0x0801b4d8
 800f6dc:	0801b4f0 	.word	0x0801b4f0

0800f6e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d106      	bne.n	800f702 <pbuf_add_header_impl+0x22>
 800f6f4:	4b2b      	ldr	r3, [pc, #172]	; (800f7a4 <pbuf_add_header_impl+0xc4>)
 800f6f6:	f240 12df 	movw	r2, #479	; 0x1df
 800f6fa:	492b      	ldr	r1, [pc, #172]	; (800f7a8 <pbuf_add_header_impl+0xc8>)
 800f6fc:	482b      	ldr	r0, [pc, #172]	; (800f7ac <pbuf_add_header_impl+0xcc>)
 800f6fe:	f008 f95f 	bl	80179c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d003      	beq.n	800f710 <pbuf_add_header_impl+0x30>
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f70e:	d301      	bcc.n	800f714 <pbuf_add_header_impl+0x34>
    return 1;
 800f710:	2301      	movs	r3, #1
 800f712:	e043      	b.n	800f79c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <pbuf_add_header_impl+0x3e>
    return 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	e03e      	b.n	800f79c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	891a      	ldrh	r2, [r3, #8]
 800f726:	8a7b      	ldrh	r3, [r7, #18]
 800f728:	4413      	add	r3, r2
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	8a7a      	ldrh	r2, [r7, #18]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d901      	bls.n	800f736 <pbuf_add_header_impl+0x56>
    return 1;
 800f732:	2301      	movs	r3, #1
 800f734:	e032      	b.n	800f79c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	7b1b      	ldrb	r3, [r3, #12]
 800f73a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f73c:	8a3b      	ldrh	r3, [r7, #16]
 800f73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00c      	beq.n	800f760 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	425b      	negs	r3, r3
 800f74e:	4413      	add	r3, r2
 800f750:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3310      	adds	r3, #16
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d20d      	bcs.n	800f778 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f75c:	2301      	movs	r3, #1
 800f75e:	e01d      	b.n	800f79c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d006      	beq.n	800f774 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	685a      	ldr	r2, [r3, #4]
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	425b      	negs	r3, r3
 800f76e:	4413      	add	r3, r2
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e001      	b.n	800f778 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f774:	2301      	movs	r3, #1
 800f776:	e011      	b.n	800f79c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	895a      	ldrh	r2, [r3, #10]
 800f782:	8a7b      	ldrh	r3, [r7, #18]
 800f784:	4413      	add	r3, r2
 800f786:	b29a      	uxth	r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	891a      	ldrh	r2, [r3, #8]
 800f790:	8a7b      	ldrh	r3, [r7, #18]
 800f792:	4413      	add	r3, r2
 800f794:	b29a      	uxth	r2, r3
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	811a      	strh	r2, [r3, #8]


  return 0;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	0801b34c 	.word	0x0801b34c
 800f7a8:	0801b50c 	.word	0x0801b50c
 800f7ac:	0801b408 	.word	0x0801b408

0800f7b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff ff8e 	bl	800f6e0 <pbuf_add_header_impl>
 800f7c4:	4603      	mov	r3, r0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
	...

0800f7d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d106      	bne.n	800f7ee <pbuf_remove_header+0x1e>
 800f7e0:	4b20      	ldr	r3, [pc, #128]	; (800f864 <pbuf_remove_header+0x94>)
 800f7e2:	f240 224b 	movw	r2, #587	; 0x24b
 800f7e6:	4920      	ldr	r1, [pc, #128]	; (800f868 <pbuf_remove_header+0x98>)
 800f7e8:	4820      	ldr	r0, [pc, #128]	; (800f86c <pbuf_remove_header+0x9c>)
 800f7ea:	f008 f8e9 	bl	80179c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d003      	beq.n	800f7fc <pbuf_remove_header+0x2c>
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7fa:	d301      	bcc.n	800f800 <pbuf_remove_header+0x30>
    return 1;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e02c      	b.n	800f85a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <pbuf_remove_header+0x3a>
    return 0;
 800f806:	2300      	movs	r3, #0
 800f808:	e027      	b.n	800f85a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	895b      	ldrh	r3, [r3, #10]
 800f812:	89fa      	ldrh	r2, [r7, #14]
 800f814:	429a      	cmp	r2, r3
 800f816:	d908      	bls.n	800f82a <pbuf_remove_header+0x5a>
 800f818:	4b12      	ldr	r3, [pc, #72]	; (800f864 <pbuf_remove_header+0x94>)
 800f81a:	f240 2255 	movw	r2, #597	; 0x255
 800f81e:	4914      	ldr	r1, [pc, #80]	; (800f870 <pbuf_remove_header+0xa0>)
 800f820:	4812      	ldr	r0, [pc, #72]	; (800f86c <pbuf_remove_header+0x9c>)
 800f822:	f008 f8cd 	bl	80179c0 <iprintf>
 800f826:	2301      	movs	r3, #1
 800f828:	e017      	b.n	800f85a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	441a      	add	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	895a      	ldrh	r2, [r3, #10]
 800f840:	89fb      	ldrh	r3, [r7, #14]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	891a      	ldrh	r2, [r3, #8]
 800f84e:	89fb      	ldrh	r3, [r7, #14]
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	b29a      	uxth	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	0801b34c 	.word	0x0801b34c
 800f868:	0801b50c 	.word	0x0801b50c
 800f86c:	0801b408 	.word	0x0801b408
 800f870:	0801b518 	.word	0x0801b518

0800f874 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	460b      	mov	r3, r1
 800f87e:	807b      	strh	r3, [r7, #2]
 800f880:	4613      	mov	r3, r2
 800f882:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	da08      	bge.n	800f89e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f88c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f890:	425b      	negs	r3, r3
 800f892:	4619      	mov	r1, r3
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f7ff ff9b 	bl	800f7d0 <pbuf_remove_header>
 800f89a:	4603      	mov	r3, r0
 800f89c:	e007      	b.n	800f8ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f89e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f8a2:	787a      	ldrb	r2, [r7, #1]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7ff ff1a 	bl	800f6e0 <pbuf_add_header_impl>
 800f8ac:	4603      	mov	r3, r0
  }
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	460b      	mov	r3, r1
 800f8c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f8c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7ff ffd2 	bl	800f874 <pbuf_header_impl>
 800f8d0:	4603      	mov	r3, r0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b088      	sub	sp, #32
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d10b      	bne.n	800f902 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d106      	bne.n	800f8fe <pbuf_free+0x22>
 800f8f0:	4b3b      	ldr	r3, [pc, #236]	; (800f9e0 <pbuf_free+0x104>)
 800f8f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f8f6:	493b      	ldr	r1, [pc, #236]	; (800f9e4 <pbuf_free+0x108>)
 800f8f8:	483b      	ldr	r0, [pc, #236]	; (800f9e8 <pbuf_free+0x10c>)
 800f8fa:	f008 f861 	bl	80179c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e069      	b.n	800f9d6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f906:	e062      	b.n	800f9ce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f908:	f000 fcbc 	bl	8010284 <sys_arch_protect>
 800f90c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7b9b      	ldrb	r3, [r3, #14]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d106      	bne.n	800f924 <pbuf_free+0x48>
 800f916:	4b32      	ldr	r3, [pc, #200]	; (800f9e0 <pbuf_free+0x104>)
 800f918:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f91c:	4933      	ldr	r1, [pc, #204]	; (800f9ec <pbuf_free+0x110>)
 800f91e:	4832      	ldr	r0, [pc, #200]	; (800f9e8 <pbuf_free+0x10c>)
 800f920:	f008 f84e 	bl	80179c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	7b9b      	ldrb	r3, [r3, #14]
 800f928:	3b01      	subs	r3, #1
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	739a      	strb	r2, [r3, #14]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	7b9b      	ldrb	r3, [r3, #14]
 800f934:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f936:	69b8      	ldr	r0, [r7, #24]
 800f938:	f000 fcb2 	bl	80102a0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d143      	bne.n	800f9ca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	7b1b      	ldrb	r3, [r3, #12]
 800f94c:	f003 030f 	and.w	r3, r3, #15
 800f950:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	7b5b      	ldrb	r3, [r3, #13]
 800f956:	f003 0302 	and.w	r3, r3, #2
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d011      	beq.n	800f982 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <pbuf_free+0x9c>
 800f96a:	4b1d      	ldr	r3, [pc, #116]	; (800f9e0 <pbuf_free+0x104>)
 800f96c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f970:	491f      	ldr	r1, [pc, #124]	; (800f9f0 <pbuf_free+0x114>)
 800f972:	481d      	ldr	r0, [pc, #116]	; (800f9e8 <pbuf_free+0x10c>)
 800f974:	f008 f824 	bl	80179c0 <iprintf>
        pc->custom_free_function(p);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	4798      	blx	r3
 800f980:	e01d      	b.n	800f9be <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f982:	7bfb      	ldrb	r3, [r7, #15]
 800f984:	2b02      	cmp	r3, #2
 800f986:	d104      	bne.n	800f992 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f988:	6879      	ldr	r1, [r7, #4]
 800f98a:	200c      	movs	r0, #12
 800f98c:	f7ff f8d8 	bl	800eb40 <memp_free>
 800f990:	e015      	b.n	800f9be <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d104      	bne.n	800f9a2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	200b      	movs	r0, #11
 800f99c:	f7ff f8d0 	bl	800eb40 <memp_free>
 800f9a0:	e00d      	b.n	800f9be <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f9a2:	7bfb      	ldrb	r3, [r7, #15]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d103      	bne.n	800f9b0 <pbuf_free+0xd4>
          mem_free(p);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7fe fd25 	bl	800e3f8 <mem_free>
 800f9ae:	e006      	b.n	800f9be <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f9b0:	4b0b      	ldr	r3, [pc, #44]	; (800f9e0 <pbuf_free+0x104>)
 800f9b2:	f240 320f 	movw	r2, #783	; 0x30f
 800f9b6:	490f      	ldr	r1, [pc, #60]	; (800f9f4 <pbuf_free+0x118>)
 800f9b8:	480b      	ldr	r0, [pc, #44]	; (800f9e8 <pbuf_free+0x10c>)
 800f9ba:	f008 f801 	bl	80179c0 <iprintf>
        }
      }
      count++;
 800f9be:	7ffb      	ldrb	r3, [r7, #31]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	607b      	str	r3, [r7, #4]
 800f9c8:	e001      	b.n	800f9ce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d199      	bne.n	800f908 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f9d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3720      	adds	r7, #32
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	0801b34c 	.word	0x0801b34c
 800f9e4:	0801b50c 	.word	0x0801b50c
 800f9e8:	0801b408 	.word	0x0801b408
 800f9ec:	0801b538 	.word	0x0801b538
 800f9f0:	0801b550 	.word	0x0801b550
 800f9f4:	0801b574 	.word	0x0801b574

0800f9f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fa00:	2300      	movs	r3, #0
 800fa02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fa04:	e005      	b.n	800fa12 <pbuf_clen+0x1a>
    ++len;
 800fa06:	89fb      	ldrh	r3, [r7, #14]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1f6      	bne.n	800fa06 <pbuf_clen+0xe>
  }
  return len;
 800fa18:	89fb      	ldrh	r3, [r7, #14]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3714      	adds	r7, #20
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
	...

0800fa28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d016      	beq.n	800fa64 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fa36:	f000 fc25 	bl	8010284 <sys_arch_protect>
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	7b9b      	ldrb	r3, [r3, #14]
 800fa40:	3301      	adds	r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	739a      	strb	r2, [r3, #14]
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 fc29 	bl	80102a0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	7b9b      	ldrb	r3, [r3, #14]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d106      	bne.n	800fa64 <pbuf_ref+0x3c>
 800fa56:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <pbuf_ref+0x44>)
 800fa58:	f240 3242 	movw	r2, #834	; 0x342
 800fa5c:	4904      	ldr	r1, [pc, #16]	; (800fa70 <pbuf_ref+0x48>)
 800fa5e:	4805      	ldr	r0, [pc, #20]	; (800fa74 <pbuf_ref+0x4c>)
 800fa60:	f007 ffae 	bl	80179c0 <iprintf>
  }
}
 800fa64:	bf00      	nop
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	0801b34c 	.word	0x0801b34c
 800fa70:	0801b588 	.word	0x0801b588
 800fa74:	0801b408 	.word	0x0801b408

0800fa78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <pbuf_cat+0x16>
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d107      	bne.n	800fa9e <pbuf_cat+0x26>
 800fa8e:	4b20      	ldr	r3, [pc, #128]	; (800fb10 <pbuf_cat+0x98>)
 800fa90:	f240 3259 	movw	r2, #857	; 0x359
 800fa94:	491f      	ldr	r1, [pc, #124]	; (800fb14 <pbuf_cat+0x9c>)
 800fa96:	4820      	ldr	r0, [pc, #128]	; (800fb18 <pbuf_cat+0xa0>)
 800fa98:	f007 ff92 	bl	80179c0 <iprintf>
 800fa9c:	e034      	b.n	800fb08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	60fb      	str	r3, [r7, #12]
 800faa2:	e00a      	b.n	800faba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	891a      	ldrh	r2, [r3, #8]
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	891b      	ldrh	r3, [r3, #8]
 800faac:	4413      	add	r3, r2
 800faae:	b29a      	uxth	r2, r3
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1f0      	bne.n	800faa4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	891a      	ldrh	r2, [r3, #8]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	895b      	ldrh	r3, [r3, #10]
 800faca:	429a      	cmp	r2, r3
 800facc:	d006      	beq.n	800fadc <pbuf_cat+0x64>
 800face:	4b10      	ldr	r3, [pc, #64]	; (800fb10 <pbuf_cat+0x98>)
 800fad0:	f240 3262 	movw	r2, #866	; 0x362
 800fad4:	4911      	ldr	r1, [pc, #68]	; (800fb1c <pbuf_cat+0xa4>)
 800fad6:	4810      	ldr	r0, [pc, #64]	; (800fb18 <pbuf_cat+0xa0>)
 800fad8:	f007 ff72 	bl	80179c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d006      	beq.n	800faf2 <pbuf_cat+0x7a>
 800fae4:	4b0a      	ldr	r3, [pc, #40]	; (800fb10 <pbuf_cat+0x98>)
 800fae6:	f240 3263 	movw	r2, #867	; 0x363
 800faea:	490d      	ldr	r1, [pc, #52]	; (800fb20 <pbuf_cat+0xa8>)
 800faec:	480a      	ldr	r0, [pc, #40]	; (800fb18 <pbuf_cat+0xa0>)
 800faee:	f007 ff67 	bl	80179c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	891a      	ldrh	r2, [r3, #8]
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	891b      	ldrh	r3, [r3, #8]
 800fafa:	4413      	add	r3, r2
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	0801b34c 	.word	0x0801b34c
 800fb14:	0801b59c 	.word	0x0801b59c
 800fb18:	0801b408 	.word	0x0801b408
 800fb1c:	0801b5d4 	.word	0x0801b5d4
 800fb20:	0801b604 	.word	0x0801b604

0800fb24 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7ff ffa1 	bl	800fa78 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800fb36:	6838      	ldr	r0, [r7, #0]
 800fb38:	f7ff ff76 	bl	800fa28 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800fb3c:	bf00      	nop
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	617b      	str	r3, [r7, #20]
 800fb52:	2300      	movs	r3, #0
 800fb54:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d008      	beq.n	800fb6e <pbuf_copy+0x2a>
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d005      	beq.n	800fb6e <pbuf_copy+0x2a>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	891a      	ldrh	r2, [r3, #8]
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	891b      	ldrh	r3, [r3, #8]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d209      	bcs.n	800fb82 <pbuf_copy+0x3e>
 800fb6e:	4b57      	ldr	r3, [pc, #348]	; (800fccc <pbuf_copy+0x188>)
 800fb70:	f240 32c9 	movw	r2, #969	; 0x3c9
 800fb74:	4956      	ldr	r1, [pc, #344]	; (800fcd0 <pbuf_copy+0x18c>)
 800fb76:	4857      	ldr	r0, [pc, #348]	; (800fcd4 <pbuf_copy+0x190>)
 800fb78:	f007 ff22 	bl	80179c0 <iprintf>
 800fb7c:	f06f 030f 	mvn.w	r3, #15
 800fb80:	e09f      	b.n	800fcc2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	895b      	ldrh	r3, [r3, #10]
 800fb86:	461a      	mov	r2, r3
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	1ad2      	subs	r2, r2, r3
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	895b      	ldrh	r3, [r3, #10]
 800fb90:	4619      	mov	r1, r3
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	1acb      	subs	r3, r1, r3
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d306      	bcc.n	800fba8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	895b      	ldrh	r3, [r3, #10]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	60fb      	str	r3, [r7, #12]
 800fba6:	e005      	b.n	800fbb4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	895b      	ldrh	r3, [r3, #10]
 800fbac:	461a      	mov	r2, r3
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	1ad3      	subs	r3, r2, r3
 800fbb2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	18d0      	adds	r0, r2, r3
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	685a      	ldr	r2, [r3, #4]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	f007 fe35 	bl	8017836 <memcpy>
    offset_to += len;
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	4413      	add	r3, r2
 800fbda:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	895b      	ldrh	r3, [r3, #10]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d906      	bls.n	800fbf6 <pbuf_copy+0xb2>
 800fbe8:	4b38      	ldr	r3, [pc, #224]	; (800fccc <pbuf_copy+0x188>)
 800fbea:	f240 32d9 	movw	r2, #985	; 0x3d9
 800fbee:	493a      	ldr	r1, [pc, #232]	; (800fcd8 <pbuf_copy+0x194>)
 800fbf0:	4838      	ldr	r0, [pc, #224]	; (800fcd4 <pbuf_copy+0x190>)
 800fbf2:	f007 fee5 	bl	80179c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	895b      	ldrh	r3, [r3, #10]
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d906      	bls.n	800fc10 <pbuf_copy+0xcc>
 800fc02:	4b32      	ldr	r3, [pc, #200]	; (800fccc <pbuf_copy+0x188>)
 800fc04:	f240 32da 	movw	r2, #986	; 0x3da
 800fc08:	4934      	ldr	r1, [pc, #208]	; (800fcdc <pbuf_copy+0x198>)
 800fc0a:	4832      	ldr	r0, [pc, #200]	; (800fcd4 <pbuf_copy+0x190>)
 800fc0c:	f007 fed8 	bl	80179c0 <iprintf>
    if (offset_from >= p_from->len) {
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	895b      	ldrh	r3, [r3, #10]
 800fc14:	461a      	mov	r2, r3
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d304      	bcc.n	800fc26 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	895b      	ldrh	r3, [r3, #10]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d114      	bne.n	800fc5c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fc32:	2300      	movs	r3, #0
 800fc34:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10c      	bne.n	800fc5c <pbuf_copy+0x118>
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d009      	beq.n	800fc5c <pbuf_copy+0x118>
 800fc48:	4b20      	ldr	r3, [pc, #128]	; (800fccc <pbuf_copy+0x188>)
 800fc4a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800fc4e:	4924      	ldr	r1, [pc, #144]	; (800fce0 <pbuf_copy+0x19c>)
 800fc50:	4820      	ldr	r0, [pc, #128]	; (800fcd4 <pbuf_copy+0x190>)
 800fc52:	f007 feb5 	bl	80179c0 <iprintf>
 800fc56:	f06f 030f 	mvn.w	r3, #15
 800fc5a:	e032      	b.n	800fcc2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d013      	beq.n	800fc8a <pbuf_copy+0x146>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	895a      	ldrh	r2, [r3, #10]
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	891b      	ldrh	r3, [r3, #8]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d10d      	bne.n	800fc8a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d009      	beq.n	800fc8a <pbuf_copy+0x146>
 800fc76:	4b15      	ldr	r3, [pc, #84]	; (800fccc <pbuf_copy+0x188>)
 800fc78:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fc7c:	4919      	ldr	r1, [pc, #100]	; (800fce4 <pbuf_copy+0x1a0>)
 800fc7e:	4815      	ldr	r0, [pc, #84]	; (800fcd4 <pbuf_copy+0x190>)
 800fc80:	f007 fe9e 	bl	80179c0 <iprintf>
 800fc84:	f06f 0305 	mvn.w	r3, #5
 800fc88:	e01b      	b.n	800fcc2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d013      	beq.n	800fcb8 <pbuf_copy+0x174>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	895a      	ldrh	r2, [r3, #10]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	891b      	ldrh	r3, [r3, #8]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d10d      	bne.n	800fcb8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d009      	beq.n	800fcb8 <pbuf_copy+0x174>
 800fca4:	4b09      	ldr	r3, [pc, #36]	; (800fccc <pbuf_copy+0x188>)
 800fca6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fcaa:	490e      	ldr	r1, [pc, #56]	; (800fce4 <pbuf_copy+0x1a0>)
 800fcac:	4809      	ldr	r0, [pc, #36]	; (800fcd4 <pbuf_copy+0x190>)
 800fcae:	f007 fe87 	bl	80179c0 <iprintf>
 800fcb2:	f06f 0305 	mvn.w	r3, #5
 800fcb6:	e004      	b.n	800fcc2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f47f af61 	bne.w	800fb82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3718      	adds	r7, #24
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	0801b34c 	.word	0x0801b34c
 800fcd0:	0801b650 	.word	0x0801b650
 800fcd4:	0801b408 	.word	0x0801b408
 800fcd8:	0801b680 	.word	0x0801b680
 800fcdc:	0801b698 	.word	0x0801b698
 800fce0:	0801b6b4 	.word	0x0801b6b4
 800fce4:	0801b6c4 	.word	0x0801b6c4

0800fce8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	4611      	mov	r1, r2
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	80fb      	strh	r3, [r7, #6]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d108      	bne.n	800fd1e <pbuf_copy_partial+0x36>
 800fd0c:	4b2b      	ldr	r3, [pc, #172]	; (800fdbc <pbuf_copy_partial+0xd4>)
 800fd0e:	f240 420a 	movw	r2, #1034	; 0x40a
 800fd12:	492b      	ldr	r1, [pc, #172]	; (800fdc0 <pbuf_copy_partial+0xd8>)
 800fd14:	482b      	ldr	r0, [pc, #172]	; (800fdc4 <pbuf_copy_partial+0xdc>)
 800fd16:	f007 fe53 	bl	80179c0 <iprintf>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e04a      	b.n	800fdb4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d108      	bne.n	800fd36 <pbuf_copy_partial+0x4e>
 800fd24:	4b25      	ldr	r3, [pc, #148]	; (800fdbc <pbuf_copy_partial+0xd4>)
 800fd26:	f240 420b 	movw	r2, #1035	; 0x40b
 800fd2a:	4927      	ldr	r1, [pc, #156]	; (800fdc8 <pbuf_copy_partial+0xe0>)
 800fd2c:	4825      	ldr	r0, [pc, #148]	; (800fdc4 <pbuf_copy_partial+0xdc>)
 800fd2e:	f007 fe47 	bl	80179c0 <iprintf>
 800fd32:	2300      	movs	r3, #0
 800fd34:	e03e      	b.n	800fdb4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	61fb      	str	r3, [r7, #28]
 800fd3a:	e034      	b.n	800fda6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fd3c:	88bb      	ldrh	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00a      	beq.n	800fd58 <pbuf_copy_partial+0x70>
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	895b      	ldrh	r3, [r3, #10]
 800fd46:	88ba      	ldrh	r2, [r7, #4]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d305      	bcc.n	800fd58 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	895b      	ldrh	r3, [r3, #10]
 800fd50:	88ba      	ldrh	r2, [r7, #4]
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	80bb      	strh	r3, [r7, #4]
 800fd56:	e023      	b.n	800fda0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	895a      	ldrh	r2, [r3, #10]
 800fd5c:	88bb      	ldrh	r3, [r7, #4]
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fd62:	8b3a      	ldrh	r2, [r7, #24]
 800fd64:	88fb      	ldrh	r3, [r7, #6]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d901      	bls.n	800fd6e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fd6a:	88fb      	ldrh	r3, [r7, #6]
 800fd6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fd6e:	8b7b      	ldrh	r3, [r7, #26]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	18d0      	adds	r0, r2, r3
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	685a      	ldr	r2, [r3, #4]
 800fd78:	88bb      	ldrh	r3, [r7, #4]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	8b3a      	ldrh	r2, [r7, #24]
 800fd7e:	4619      	mov	r1, r3
 800fd80:	f007 fd59 	bl	8017836 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fd84:	8afa      	ldrh	r2, [r7, #22]
 800fd86:	8b3b      	ldrh	r3, [r7, #24]
 800fd88:	4413      	add	r3, r2
 800fd8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fd8c:	8b7a      	ldrh	r2, [r7, #26]
 800fd8e:	8b3b      	ldrh	r3, [r7, #24]
 800fd90:	4413      	add	r3, r2
 800fd92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fd94:	88fa      	ldrh	r2, [r7, #6]
 800fd96:	8b3b      	ldrh	r3, [r7, #24]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	61fb      	str	r3, [r7, #28]
 800fda6:	88fb      	ldrh	r3, [r7, #6]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <pbuf_copy_partial+0xca>
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d1c4      	bne.n	800fd3c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fdb2:	8afb      	ldrh	r3, [r7, #22]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3720      	adds	r7, #32
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	0801b34c 	.word	0x0801b34c
 800fdc0:	0801b6f0 	.word	0x0801b6f0
 800fdc4:	0801b408 	.word	0x0801b408
 800fdc8:	0801b710 	.word	0x0801b710

0800fdcc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b088      	sub	sp, #32
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	4613      	mov	r3, r2
 800fdd8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800fdda:	88fb      	ldrh	r3, [r7, #6]
 800fddc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d109      	bne.n	800fdfc <pbuf_take+0x30>
 800fde8:	4b3a      	ldr	r3, [pc, #232]	; (800fed4 <pbuf_take+0x108>)
 800fdea:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800fdee:	493a      	ldr	r1, [pc, #232]	; (800fed8 <pbuf_take+0x10c>)
 800fdf0:	483a      	ldr	r0, [pc, #232]	; (800fedc <pbuf_take+0x110>)
 800fdf2:	f007 fde5 	bl	80179c0 <iprintf>
 800fdf6:	f06f 030f 	mvn.w	r3, #15
 800fdfa:	e067      	b.n	800fecc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d109      	bne.n	800fe16 <pbuf_take+0x4a>
 800fe02:	4b34      	ldr	r3, [pc, #208]	; (800fed4 <pbuf_take+0x108>)
 800fe04:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800fe08:	4935      	ldr	r1, [pc, #212]	; (800fee0 <pbuf_take+0x114>)
 800fe0a:	4834      	ldr	r0, [pc, #208]	; (800fedc <pbuf_take+0x110>)
 800fe0c:	f007 fdd8 	bl	80179c0 <iprintf>
 800fe10:	f06f 030f 	mvn.w	r3, #15
 800fe14:	e05a      	b.n	800fecc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	891b      	ldrh	r3, [r3, #8]
 800fe1a:	88fa      	ldrh	r2, [r7, #6]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d909      	bls.n	800fe34 <pbuf_take+0x68>
 800fe20:	4b2c      	ldr	r3, [pc, #176]	; (800fed4 <pbuf_take+0x108>)
 800fe22:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800fe26:	492f      	ldr	r1, [pc, #188]	; (800fee4 <pbuf_take+0x118>)
 800fe28:	482c      	ldr	r0, [pc, #176]	; (800fedc <pbuf_take+0x110>)
 800fe2a:	f007 fdc9 	bl	80179c0 <iprintf>
 800fe2e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe32:	e04b      	b.n	800fecc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d007      	beq.n	800fe4a <pbuf_take+0x7e>
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <pbuf_take+0x7e>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	891b      	ldrh	r3, [r3, #8]
 800fe44:	88fa      	ldrh	r2, [r7, #6]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d902      	bls.n	800fe50 <pbuf_take+0x84>
    return ERR_ARG;
 800fe4a:	f06f 030f 	mvn.w	r3, #15
 800fe4e:	e03d      	b.n	800fecc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	61fb      	str	r3, [r7, #28]
 800fe54:	e028      	b.n	800fea8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d106      	bne.n	800fe6a <pbuf_take+0x9e>
 800fe5c:	4b1d      	ldr	r3, [pc, #116]	; (800fed4 <pbuf_take+0x108>)
 800fe5e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800fe62:	4921      	ldr	r1, [pc, #132]	; (800fee8 <pbuf_take+0x11c>)
 800fe64:	481d      	ldr	r0, [pc, #116]	; (800fedc <pbuf_take+0x110>)
 800fe66:	f007 fdab 	bl	80179c0 <iprintf>
    buf_copy_len = total_copy_len;
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	895b      	ldrh	r3, [r3, #10]
 800fe72:	461a      	mov	r2, r3
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d902      	bls.n	800fe80 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800fe7a:	69fb      	ldr	r3, [r7, #28]
 800fe7c:	895b      	ldrh	r3, [r3, #10]
 800fe7e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	6858      	ldr	r0, [r3, #4]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	4413      	add	r3, r2
 800fe8a:	69ba      	ldr	r2, [r7, #24]
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	f007 fcd2 	bl	8017836 <memcpy>
    total_copy_len -= buf_copy_len;
 800fe92:	697a      	ldr	r2, [r7, #20]
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	4413      	add	r3, r2
 800fea0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	61fb      	str	r3, [r7, #28]
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1d3      	bne.n	800fe56 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d103      	bne.n	800febc <pbuf_take+0xf0>
 800feb4:	88fb      	ldrh	r3, [r7, #6]
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d006      	beq.n	800feca <pbuf_take+0xfe>
 800febc:	4b05      	ldr	r3, [pc, #20]	; (800fed4 <pbuf_take+0x108>)
 800febe:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800fec2:	490a      	ldr	r1, [pc, #40]	; (800feec <pbuf_take+0x120>)
 800fec4:	4805      	ldr	r0, [pc, #20]	; (800fedc <pbuf_take+0x110>)
 800fec6:	f007 fd7b 	bl	80179c0 <iprintf>
  return ERR_OK;
 800feca:	2300      	movs	r3, #0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3720      	adds	r7, #32
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	0801b34c 	.word	0x0801b34c
 800fed8:	0801b780 	.word	0x0801b780
 800fedc:	0801b408 	.word	0x0801b408
 800fee0:	0801b798 	.word	0x0801b798
 800fee4:	0801b7b4 	.word	0x0801b7b4
 800fee8:	0801b7d4 	.word	0x0801b7d4
 800feec:	0801b7ec 	.word	0x0801b7ec

0800fef0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	4603      	mov	r3, r0
 800fef8:	603a      	str	r2, [r7, #0]
 800fefa:	71fb      	strb	r3, [r7, #7]
 800fefc:	460b      	mov	r3, r1
 800fefe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	8919      	ldrh	r1, [r3, #8]
 800ff04:	88ba      	ldrh	r2, [r7, #4]
 800ff06:	79fb      	ldrb	r3, [r7, #7]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff fa03 	bl	800f314 <pbuf_alloc>
 800ff0e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d101      	bne.n	800ff1a <pbuf_clone+0x2a>
    return NULL;
 800ff16:	2300      	movs	r3, #0
 800ff18:	e011      	b.n	800ff3e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	f7ff fe11 	bl	800fb44 <pbuf_copy>
 800ff22:	4603      	mov	r3, r0
 800ff24:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ff26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d006      	beq.n	800ff3c <pbuf_clone+0x4c>
 800ff2e:	4b06      	ldr	r3, [pc, #24]	; (800ff48 <pbuf_clone+0x58>)
 800ff30:	f240 5224 	movw	r2, #1316	; 0x524
 800ff34:	4905      	ldr	r1, [pc, #20]	; (800ff4c <pbuf_clone+0x5c>)
 800ff36:	4806      	ldr	r0, [pc, #24]	; (800ff50 <pbuf_clone+0x60>)
 800ff38:	f007 fd42 	bl	80179c0 <iprintf>
  return q;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	0801b34c 	.word	0x0801b34c
 800ff4c:	0801b81c 	.word	0x0801b81c
 800ff50:	0801b408 	.word	0x0801b408

0800ff54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	2200      	movs	r2, #0
 800ff62:	2104      	movs	r1, #4
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7f6 fa83 	bl	8006470 <osMessageQueueNew>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <sys_mbox_new+0x2a>
    return ERR_MEM;
 800ff78:	f04f 33ff 	mov.w	r3, #4294967295
 800ff7c:	e000      	b.n	800ff80 <sys_mbox_new+0x2c>

  return ERR_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7f6 fb9d 	bl	80066d4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7f6 fbb8 	bl	8006714 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6818      	ldr	r0, [r3, #0]
 800ffba:	4639      	mov	r1, r7
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f7f6 faca 	bl	8006558 <osMessageQueuePut>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d102      	bne.n	800ffd0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	73fb      	strb	r3, [r7, #15]
 800ffce:	e001      	b.n	800ffd4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800ffd0:	23ff      	movs	r3, #255	; 0xff
 800ffd2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800ffd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800ffec:	f7f5 ff20 	bl	8005e30 <osKernelGetTickCount>
 800fff0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d013      	beq.n	8010020 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6818      	ldr	r0, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	f7f6 fb09 	bl	8006618 <osMessageQueueGet>
 8010006:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d105      	bne.n	801001a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801000e:	f7f5 ff0f 	bl	8005e30 <osKernelGetTickCount>
 8010012:	4602      	mov	r2, r0
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	e00f      	b.n	801003a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801001a:	f04f 33ff 	mov.w	r3, #4294967295
 801001e:	e00c      	b.n	801003a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	6818      	ldr	r0, [r3, #0]
 8010024:	f04f 33ff 	mov.w	r3, #4294967295
 8010028:	2200      	movs	r2, #0
 801002a:	68b9      	ldr	r1, [r7, #8]
 801002c:	f7f6 faf4 	bl	8006618 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8010030:	f7f5 fefe 	bl	8005e30 <osKernelGetTickCount>
 8010034:	4602      	mov	r2, r0
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801003a:	4618      	mov	r0, r3
 801003c:	3718      	adds	r7, #24
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6818      	ldr	r0, [r3, #0]
 8010050:	2300      	movs	r3, #0
 8010052:	2200      	movs	r2, #0
 8010054:	6839      	ldr	r1, [r7, #0]
 8010056:	f7f6 fadf 	bl	8006618 <osMessageQueueGet>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d101      	bne.n	8010064 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8010060:	2300      	movs	r3, #0
 8010062:	e001      	b.n	8010068 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8010064:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d101      	bne.n	8010084 <sys_mbox_valid+0x14>
    return 0;
 8010080:	2300      	movs	r3, #0
 8010082:	e000      	b.n	8010086 <sys_mbox_valid+0x16>
  else
    return 1;
 8010084:	2301      	movs	r3, #1
}
 8010086:	4618      	mov	r0, r3
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8010092:	b480      	push	{r7}
 8010094:	b083      	sub	sp, #12
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	601a      	str	r2, [r3, #0]
}
 80100a0:	bf00      	nop
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	460b      	mov	r3, r1
 80100b6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80100b8:	78fb      	ldrb	r3, [r7, #3]
 80100ba:	2200      	movs	r2, #0
 80100bc:	4619      	mov	r1, r3
 80100be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80100c2:	f7f6 f891 	bl	80061e8 <osSemaphoreNew>
 80100c6:	4602      	mov	r2, r0
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d102      	bne.n	80100da <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80100d4:	f04f 33ff 	mov.w	r3, #4294967295
 80100d8:	e009      	b.n	80100ee <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80100da:	78fb      	ldrb	r3, [r7, #3]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d105      	bne.n	80100ec <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2100      	movs	r1, #0
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7f6 f908 	bl	80062fc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b084      	sub	sp, #16
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8010100:	f7f5 fe96 	bl	8005e30 <osKernelGetTickCount>
 8010104:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d011      	beq.n	8010130 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	6839      	ldr	r1, [r7, #0]
 8010112:	4618      	mov	r0, r3
 8010114:	f7f6 f8f2 	bl	80062fc <osSemaphoreAcquire>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d105      	bne.n	801012a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801011e:	f7f5 fe87 	bl	8005e30 <osKernelGetTickCount>
 8010122:	4602      	mov	r2, r0
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	e012      	b.n	8010150 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801012a:	f04f 33ff 	mov.w	r3, #4294967295
 801012e:	e00f      	b.n	8010150 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8010130:	bf00      	nop
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f04f 31ff 	mov.w	r1, #4294967295
 801013a:	4618      	mov	r0, r3
 801013c:	f7f6 f8de 	bl	80062fc <osSemaphoreAcquire>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1f5      	bne.n	8010132 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8010146:	f7f5 fe73 	bl	8005e30 <osKernelGetTickCount>
 801014a:	4602      	mov	r2, r0
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8010150:	4618      	mov	r0, r3
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4618      	mov	r0, r3
 8010166:	f7f6 f91b 	bl	80063a0 <osSemaphoreRelease>
}
 801016a:	bf00      	nop
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4618      	mov	r0, r3
 8010180:	f7f6 f952 	bl	8006428 <osSemaphoreDelete>
}
 8010184:	bf00      	nop
 8010186:	3708      	adds	r7, #8
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <sys_sem_valid+0x14>
    return 0;
 801019c:	2300      	movs	r3, #0
 801019e:	e000      	b.n	80101a2 <sys_sem_valid+0x16>
  else
    return 1;
 80101a0:	2301      	movs	r3, #1
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	370c      	adds	r7, #12
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b083      	sub	sp, #12
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	601a      	str	r2, [r3, #0]
}
 80101bc:	bf00      	nop
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80101cc:	2000      	movs	r0, #0
 80101ce:	f7f5 fefd 	bl	8005fcc <osMutexNew>
 80101d2:	4603      	mov	r3, r0
 80101d4:	4a01      	ldr	r2, [pc, #4]	; (80101dc <sys_init+0x14>)
 80101d6:	6013      	str	r3, [r2, #0]
#endif
}
 80101d8:	bf00      	nop
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	240108a4 	.word	0x240108a4

080101e0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80101e8:	2000      	movs	r0, #0
 80101ea:	f7f5 feef 	bl	8005fcc <osMutexNew>
 80101ee:	4602      	mov	r2, r0
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d102      	bne.n	8010202 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80101fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010200:	e000      	b.n	8010204 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f04f 31ff 	mov.w	r1, #4294967295
 801021c:	4618      	mov	r0, r3
 801021e:	f7f5 ff5b 	bl	80060d8 <osMutexAcquire>
#endif
}
 8010222:	bf00      	nop
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b082      	sub	sp, #8
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4618      	mov	r0, r3
 8010238:	f7f5 ff99 	bl	800616e <osMutexRelease>
}
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b08e      	sub	sp, #56	; 0x38
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8010252:	f107 0314 	add.w	r3, r7, #20
 8010256:	2224      	movs	r2, #36	; 0x24
 8010258:	2100      	movs	r1, #0
 801025a:	4618      	mov	r0, r3
 801025c:	f007 fb13 	bl	8017886 <memset>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	617b      	str	r3, [r7, #20]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	62bb      	str	r3, [r7, #40]	; 0x28
 8010268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801026a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801026c:	f107 0314 	add.w	r3, r7, #20
 8010270:	461a      	mov	r2, r3
 8010272:	6879      	ldr	r1, [r7, #4]
 8010274:	68b8      	ldr	r0, [r7, #8]
 8010276:	f7f5 fdf0 	bl	8005e5a <osThreadNew>
 801027a:	4603      	mov	r3, r0
#endif
}
 801027c:	4618      	mov	r0, r3
 801027e:	3738      	adds	r7, #56	; 0x38
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010288:	4b04      	ldr	r3, [pc, #16]	; (801029c <sys_arch_protect+0x18>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f04f 31ff 	mov.w	r1, #4294967295
 8010290:	4618      	mov	r0, r3
 8010292:	f7f5 ff21 	bl	80060d8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8010296:	2301      	movs	r3, #1
}
 8010298:	4618      	mov	r0, r3
 801029a:	bd80      	pop	{r7, pc}
 801029c:	240108a4 	.word	0x240108a4

080102a0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80102a8:	4b04      	ldr	r3, [pc, #16]	; (80102bc <sys_arch_unprotect+0x1c>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7f5 ff5e 	bl	800616e <osMutexRelease>
}
 80102b2:	bf00      	nop
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	240108a4 	.word	0x240108a4

080102c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80102c4:	f007 fb94 	bl	80179f0 <rand>
 80102c8:	4603      	mov	r3, r0
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	4b01      	ldr	r3, [pc, #4]	; (80102e0 <tcp_init+0x20>)
 80102da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80102dc:	bf00      	nop
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	2400003c 	.word	0x2400003c

080102e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	7d1b      	ldrb	r3, [r3, #20]
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d105      	bne.n	8010300 <tcp_free+0x1c>
 80102f4:	4b06      	ldr	r3, [pc, #24]	; (8010310 <tcp_free+0x2c>)
 80102f6:	22d4      	movs	r2, #212	; 0xd4
 80102f8:	4906      	ldr	r1, [pc, #24]	; (8010314 <tcp_free+0x30>)
 80102fa:	4807      	ldr	r0, [pc, #28]	; (8010318 <tcp_free+0x34>)
 80102fc:	f007 fb60 	bl	80179c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010300:	6879      	ldr	r1, [r7, #4]
 8010302:	2001      	movs	r0, #1
 8010304:	f7fe fc1c 	bl	800eb40 <memp_free>
}
 8010308:	bf00      	nop
 801030a:	3708      	adds	r7, #8
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	0801b8a8 	.word	0x0801b8a8
 8010314:	0801b934 	.word	0x0801b934
 8010318:	0801b948 	.word	0x0801b948

0801031c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	7d1b      	ldrb	r3, [r3, #20]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d105      	bne.n	8010338 <tcp_free_listen+0x1c>
 801032c:	4b06      	ldr	r3, [pc, #24]	; (8010348 <tcp_free_listen+0x2c>)
 801032e:	22df      	movs	r2, #223	; 0xdf
 8010330:	4906      	ldr	r1, [pc, #24]	; (801034c <tcp_free_listen+0x30>)
 8010332:	4807      	ldr	r0, [pc, #28]	; (8010350 <tcp_free_listen+0x34>)
 8010334:	f007 fb44 	bl	80179c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010338:	6879      	ldr	r1, [r7, #4]
 801033a:	2002      	movs	r0, #2
 801033c:	f7fe fc00 	bl	800eb40 <memp_free>
}
 8010340:	bf00      	nop
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	0801b8a8 	.word	0x0801b8a8
 801034c:	0801b970 	.word	0x0801b970
 8010350:	0801b948 	.word	0x0801b948

08010354 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010358:	f001 f902 	bl	8011560 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801035c:	4b07      	ldr	r3, [pc, #28]	; (801037c <tcp_tmr+0x28>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	3301      	adds	r3, #1
 8010362:	b2da      	uxtb	r2, r3
 8010364:	4b05      	ldr	r3, [pc, #20]	; (801037c <tcp_tmr+0x28>)
 8010366:	701a      	strb	r2, [r3, #0]
 8010368:	4b04      	ldr	r3, [pc, #16]	; (801037c <tcp_tmr+0x28>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010374:	f000 fdb4 	bl	8010ee0 <tcp_slowtmr>
  }
}
 8010378:	bf00      	nop
 801037a:	bd80      	pop	{r7, pc}
 801037c:	240108bd 	.word	0x240108bd

08010380 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d105      	bne.n	801039c <tcp_remove_listener+0x1c>
 8010390:	4b0d      	ldr	r3, [pc, #52]	; (80103c8 <tcp_remove_listener+0x48>)
 8010392:	22ff      	movs	r2, #255	; 0xff
 8010394:	490d      	ldr	r1, [pc, #52]	; (80103cc <tcp_remove_listener+0x4c>)
 8010396:	480e      	ldr	r0, [pc, #56]	; (80103d0 <tcp_remove_listener+0x50>)
 8010398:	f007 fb12 	bl	80179c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	60fb      	str	r3, [r7, #12]
 80103a0:	e00a      	b.n	80103b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d102      	bne.n	80103b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2200      	movs	r2, #0
 80103b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	68db      	ldr	r3, [r3, #12]
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1f1      	bne.n	80103a2 <tcp_remove_listener+0x22>
    }
  }
}
 80103be:	bf00      	nop
 80103c0:	bf00      	nop
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	0801b8a8 	.word	0x0801b8a8
 80103cc:	0801b98c 	.word	0x0801b98c
 80103d0:	0801b948 	.word	0x0801b948

080103d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <tcp_listen_closed+0x1c>
 80103e2:	4b14      	ldr	r3, [pc, #80]	; (8010434 <tcp_listen_closed+0x60>)
 80103e4:	f240 1211 	movw	r2, #273	; 0x111
 80103e8:	4913      	ldr	r1, [pc, #76]	; (8010438 <tcp_listen_closed+0x64>)
 80103ea:	4814      	ldr	r0, [pc, #80]	; (801043c <tcp_listen_closed+0x68>)
 80103ec:	f007 fae8 	bl	80179c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	7d1b      	ldrb	r3, [r3, #20]
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d006      	beq.n	8010406 <tcp_listen_closed+0x32>
 80103f8:	4b0e      	ldr	r3, [pc, #56]	; (8010434 <tcp_listen_closed+0x60>)
 80103fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80103fe:	4910      	ldr	r1, [pc, #64]	; (8010440 <tcp_listen_closed+0x6c>)
 8010400:	480e      	ldr	r0, [pc, #56]	; (801043c <tcp_listen_closed+0x68>)
 8010402:	f007 fadd 	bl	80179c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010406:	2301      	movs	r3, #1
 8010408:	60fb      	str	r3, [r7, #12]
 801040a:	e00b      	b.n	8010424 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801040c:	4a0d      	ldr	r2, [pc, #52]	; (8010444 <tcp_listen_closed+0x70>)
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	6879      	ldr	r1, [r7, #4]
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff ffb1 	bl	8010380 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	3301      	adds	r3, #1
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2b03      	cmp	r3, #3
 8010428:	d9f0      	bls.n	801040c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801042a:	bf00      	nop
 801042c:	bf00      	nop
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	0801b8a8 	.word	0x0801b8a8
 8010438:	0801b9b4 	.word	0x0801b9b4
 801043c:	0801b948 	.word	0x0801b948
 8010440:	0801b9c0 	.word	0x0801b9c0
 8010444:	0801d570 	.word	0x0801d570

08010448 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010448:	b5b0      	push	{r4, r5, r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af04      	add	r7, sp, #16
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	460b      	mov	r3, r1
 8010452:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d106      	bne.n	8010468 <tcp_close_shutdown+0x20>
 801045a:	4b63      	ldr	r3, [pc, #396]	; (80105e8 <tcp_close_shutdown+0x1a0>)
 801045c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010460:	4962      	ldr	r1, [pc, #392]	; (80105ec <tcp_close_shutdown+0x1a4>)
 8010462:	4863      	ldr	r0, [pc, #396]	; (80105f0 <tcp_close_shutdown+0x1a8>)
 8010464:	f007 faac 	bl	80179c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010468:	78fb      	ldrb	r3, [r7, #3]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d067      	beq.n	801053e <tcp_close_shutdown+0xf6>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	7d1b      	ldrb	r3, [r3, #20]
 8010472:	2b04      	cmp	r3, #4
 8010474:	d003      	beq.n	801047e <tcp_close_shutdown+0x36>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1b      	ldrb	r3, [r3, #20]
 801047a:	2b07      	cmp	r3, #7
 801047c:	d15f      	bne.n	801053e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010482:	2b00      	cmp	r3, #0
 8010484:	d105      	bne.n	8010492 <tcp_close_shutdown+0x4a>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801048a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801048e:	4293      	cmp	r3, r2
 8010490:	d055      	beq.n	801053e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	8b5b      	ldrh	r3, [r3, #26]
 8010496:	f003 0310 	and.w	r3, r3, #16
 801049a:	2b00      	cmp	r3, #0
 801049c:	d106      	bne.n	80104ac <tcp_close_shutdown+0x64>
 801049e:	4b52      	ldr	r3, [pc, #328]	; (80105e8 <tcp_close_shutdown+0x1a0>)
 80104a0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80104a4:	4953      	ldr	r1, [pc, #332]	; (80105f4 <tcp_close_shutdown+0x1ac>)
 80104a6:	4852      	ldr	r0, [pc, #328]	; (80105f0 <tcp_close_shutdown+0x1a8>)
 80104a8:	f007 fa8a 	bl	80179c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80104b4:	687d      	ldr	r5, [r7, #4]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3304      	adds	r3, #4
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	8ad2      	ldrh	r2, [r2, #22]
 80104be:	6879      	ldr	r1, [r7, #4]
 80104c0:	8b09      	ldrh	r1, [r1, #24]
 80104c2:	9102      	str	r1, [sp, #8]
 80104c4:	9201      	str	r2, [sp, #4]
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	462b      	mov	r3, r5
 80104ca:	4622      	mov	r2, r4
 80104cc:	4601      	mov	r1, r0
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f005 fe28 	bl	8016124 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f001 fbff 	bl	8011cd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80104da:	4b47      	ldr	r3, [pc, #284]	; (80105f8 <tcp_close_shutdown+0x1b0>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d105      	bne.n	80104f0 <tcp_close_shutdown+0xa8>
 80104e4:	4b44      	ldr	r3, [pc, #272]	; (80105f8 <tcp_close_shutdown+0x1b0>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	68db      	ldr	r3, [r3, #12]
 80104ea:	4a43      	ldr	r2, [pc, #268]	; (80105f8 <tcp_close_shutdown+0x1b0>)
 80104ec:	6013      	str	r3, [r2, #0]
 80104ee:	e013      	b.n	8010518 <tcp_close_shutdown+0xd0>
 80104f0:	4b41      	ldr	r3, [pc, #260]	; (80105f8 <tcp_close_shutdown+0x1b0>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60fb      	str	r3, [r7, #12]
 80104f6:	e00c      	b.n	8010512 <tcp_close_shutdown+0xca>
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d104      	bne.n	801050c <tcp_close_shutdown+0xc4>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68da      	ldr	r2, [r3, #12]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	60da      	str	r2, [r3, #12]
 801050a:	e005      	b.n	8010518 <tcp_close_shutdown+0xd0>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	60fb      	str	r3, [r7, #12]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1ef      	bne.n	80104f8 <tcp_close_shutdown+0xb0>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	60da      	str	r2, [r3, #12]
 801051e:	4b37      	ldr	r3, [pc, #220]	; (80105fc <tcp_close_shutdown+0x1b4>)
 8010520:	2201      	movs	r2, #1
 8010522:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010524:	4b36      	ldr	r3, [pc, #216]	; (8010600 <tcp_close_shutdown+0x1b8>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	429a      	cmp	r2, r3
 801052c:	d102      	bne.n	8010534 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801052e:	f004 f899 	bl	8014664 <tcp_trigger_input_pcb_close>
 8010532:	e002      	b.n	801053a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff fed5 	bl	80102e4 <tcp_free>
      }
      return ERR_OK;
 801053a:	2300      	movs	r3, #0
 801053c:	e050      	b.n	80105e0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	7d1b      	ldrb	r3, [r3, #20]
 8010542:	2b02      	cmp	r3, #2
 8010544:	d03b      	beq.n	80105be <tcp_close_shutdown+0x176>
 8010546:	2b02      	cmp	r3, #2
 8010548:	dc44      	bgt.n	80105d4 <tcp_close_shutdown+0x18c>
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <tcp_close_shutdown+0x10c>
 801054e:	2b01      	cmp	r3, #1
 8010550:	d02a      	beq.n	80105a8 <tcp_close_shutdown+0x160>
 8010552:	e03f      	b.n	80105d4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8adb      	ldrh	r3, [r3, #22]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d021      	beq.n	80105a0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801055c:	4b29      	ldr	r3, [pc, #164]	; (8010604 <tcp_close_shutdown+0x1bc>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d105      	bne.n	8010572 <tcp_close_shutdown+0x12a>
 8010566:	4b27      	ldr	r3, [pc, #156]	; (8010604 <tcp_close_shutdown+0x1bc>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	4a25      	ldr	r2, [pc, #148]	; (8010604 <tcp_close_shutdown+0x1bc>)
 801056e:	6013      	str	r3, [r2, #0]
 8010570:	e013      	b.n	801059a <tcp_close_shutdown+0x152>
 8010572:	4b24      	ldr	r3, [pc, #144]	; (8010604 <tcp_close_shutdown+0x1bc>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	60bb      	str	r3, [r7, #8]
 8010578:	e00c      	b.n	8010594 <tcp_close_shutdown+0x14c>
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	429a      	cmp	r2, r3
 8010582:	d104      	bne.n	801058e <tcp_close_shutdown+0x146>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	68da      	ldr	r2, [r3, #12]
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	60da      	str	r2, [r3, #12]
 801058c:	e005      	b.n	801059a <tcp_close_shutdown+0x152>
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	60bb      	str	r3, [r7, #8]
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1ef      	bne.n	801057a <tcp_close_shutdown+0x132>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff fe9f 	bl	80102e4 <tcp_free>
      break;
 80105a6:	e01a      	b.n	80105de <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f7ff ff13 	bl	80103d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80105ae:	6879      	ldr	r1, [r7, #4]
 80105b0:	4815      	ldr	r0, [pc, #84]	; (8010608 <tcp_close_shutdown+0x1c0>)
 80105b2:	f001 fbe1 	bl	8011d78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff feb0 	bl	801031c <tcp_free_listen>
      break;
 80105bc:	e00f      	b.n	80105de <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	480d      	ldr	r0, [pc, #52]	; (80105f8 <tcp_close_shutdown+0x1b0>)
 80105c2:	f001 fbd9 	bl	8011d78 <tcp_pcb_remove>
 80105c6:	4b0d      	ldr	r3, [pc, #52]	; (80105fc <tcp_close_shutdown+0x1b4>)
 80105c8:	2201      	movs	r2, #1
 80105ca:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7ff fe89 	bl	80102e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80105d2:	e004      	b.n	80105de <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 f819 	bl	801060c <tcp_close_shutdown_fin>
 80105da:	4603      	mov	r3, r0
 80105dc:	e000      	b.n	80105e0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80105de:	2300      	movs	r3, #0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bdb0      	pop	{r4, r5, r7, pc}
 80105e8:	0801b8a8 	.word	0x0801b8a8
 80105ec:	0801b9d8 	.word	0x0801b9d8
 80105f0:	0801b948 	.word	0x0801b948
 80105f4:	0801b9f8 	.word	0x0801b9f8
 80105f8:	240108b4 	.word	0x240108b4
 80105fc:	240108bc 	.word	0x240108bc
 8010600:	240108f4 	.word	0x240108f4
 8010604:	240108ac 	.word	0x240108ac
 8010608:	240108b0 	.word	0x240108b0

0801060c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d106      	bne.n	8010628 <tcp_close_shutdown_fin+0x1c>
 801061a:	4b2e      	ldr	r3, [pc, #184]	; (80106d4 <tcp_close_shutdown_fin+0xc8>)
 801061c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010620:	492d      	ldr	r1, [pc, #180]	; (80106d8 <tcp_close_shutdown_fin+0xcc>)
 8010622:	482e      	ldr	r0, [pc, #184]	; (80106dc <tcp_close_shutdown_fin+0xd0>)
 8010624:	f007 f9cc 	bl	80179c0 <iprintf>

  switch (pcb->state) {
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	7d1b      	ldrb	r3, [r3, #20]
 801062c:	2b07      	cmp	r3, #7
 801062e:	d020      	beq.n	8010672 <tcp_close_shutdown_fin+0x66>
 8010630:	2b07      	cmp	r3, #7
 8010632:	dc2b      	bgt.n	801068c <tcp_close_shutdown_fin+0x80>
 8010634:	2b03      	cmp	r3, #3
 8010636:	d002      	beq.n	801063e <tcp_close_shutdown_fin+0x32>
 8010638:	2b04      	cmp	r3, #4
 801063a:	d00d      	beq.n	8010658 <tcp_close_shutdown_fin+0x4c>
 801063c:	e026      	b.n	801068c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f004 fe7c 	bl	801533c <tcp_send_fin>
 8010644:	4603      	mov	r3, r0
 8010646:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d11f      	bne.n	8010690 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2205      	movs	r2, #5
 8010654:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010656:	e01b      	b.n	8010690 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f004 fe6f 	bl	801533c <tcp_send_fin>
 801065e:	4603      	mov	r3, r0
 8010660:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d114      	bne.n	8010694 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2205      	movs	r2, #5
 801066e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010670:	e010      	b.n	8010694 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f004 fe62 	bl	801533c <tcp_send_fin>
 8010678:	4603      	mov	r3, r0
 801067a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d109      	bne.n	8010698 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2209      	movs	r2, #9
 8010688:	751a      	strb	r2, [r3, #20]
      }
      break;
 801068a:	e005      	b.n	8010698 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801068c:	2300      	movs	r3, #0
 801068e:	e01c      	b.n	80106ca <tcp_close_shutdown_fin+0xbe>
      break;
 8010690:	bf00      	nop
 8010692:	e002      	b.n	801069a <tcp_close_shutdown_fin+0x8e>
      break;
 8010694:	bf00      	nop
 8010696:	e000      	b.n	801069a <tcp_close_shutdown_fin+0x8e>
      break;
 8010698:	bf00      	nop
  }

  if (err == ERR_OK) {
 801069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d103      	bne.n	80106aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f004 ff88 	bl	80155b8 <tcp_output>
 80106a8:	e00d      	b.n	80106c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80106aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b2:	d108      	bne.n	80106c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	8b5b      	ldrh	r3, [r3, #26]
 80106b8:	f043 0308 	orr.w	r3, r3, #8
 80106bc:	b29a      	uxth	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80106c2:	2300      	movs	r3, #0
 80106c4:	e001      	b.n	80106ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80106c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	0801b8a8 	.word	0x0801b8a8
 80106d8:	0801b9b4 	.word	0x0801b9b4
 80106dc:	0801b948 	.word	0x0801b948

080106e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80106e8:	f7f5 facc 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d109      	bne.n	8010706 <tcp_close+0x26>
 80106f2:	4b0f      	ldr	r3, [pc, #60]	; (8010730 <tcp_close+0x50>)
 80106f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80106f8:	490e      	ldr	r1, [pc, #56]	; (8010734 <tcp_close+0x54>)
 80106fa:	480f      	ldr	r0, [pc, #60]	; (8010738 <tcp_close+0x58>)
 80106fc:	f007 f960 	bl	80179c0 <iprintf>
 8010700:	f06f 030f 	mvn.w	r3, #15
 8010704:	e00f      	b.n	8010726 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	7d1b      	ldrb	r3, [r3, #20]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d006      	beq.n	801071c <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	8b5b      	ldrh	r3, [r3, #26]
 8010712:	f043 0310 	orr.w	r3, r3, #16
 8010716:	b29a      	uxth	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801071c:	2101      	movs	r1, #1
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f7ff fe92 	bl	8010448 <tcp_close_shutdown>
 8010724:	4603      	mov	r3, r0
}
 8010726:	4618      	mov	r0, r3
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	0801b8a8 	.word	0x0801b8a8
 8010734:	0801ba14 	.word	0x0801ba14
 8010738:	0801b948 	.word	0x0801b948

0801073c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8010748:	f7f5 fa9c 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d109      	bne.n	8010766 <tcp_shutdown+0x2a>
 8010752:	4b26      	ldr	r3, [pc, #152]	; (80107ec <tcp_shutdown+0xb0>)
 8010754:	f240 2207 	movw	r2, #519	; 0x207
 8010758:	4925      	ldr	r1, [pc, #148]	; (80107f0 <tcp_shutdown+0xb4>)
 801075a:	4826      	ldr	r0, [pc, #152]	; (80107f4 <tcp_shutdown+0xb8>)
 801075c:	f007 f930 	bl	80179c0 <iprintf>
 8010760:	f06f 030f 	mvn.w	r3, #15
 8010764:	e03d      	b.n	80107e2 <tcp_shutdown+0xa6>

  if (pcb->state == LISTEN) {
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	7d1b      	ldrb	r3, [r3, #20]
 801076a:	2b01      	cmp	r3, #1
 801076c:	d102      	bne.n	8010774 <tcp_shutdown+0x38>
    return ERR_CONN;
 801076e:	f06f 030a 	mvn.w	r3, #10
 8010772:	e036      	b.n	80107e2 <tcp_shutdown+0xa6>
  }
  if (shut_rx) {
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d01b      	beq.n	80107b2 <tcp_shutdown+0x76>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	8b5b      	ldrh	r3, [r3, #26]
 801077e:	f043 0310 	orr.w	r3, r3, #16
 8010782:	b29a      	uxth	r2, r3
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d005      	beq.n	801079a <tcp_shutdown+0x5e>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801078e:	2101      	movs	r1, #1
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f7ff fe59 	bl	8010448 <tcp_close_shutdown>
 8010796:	4603      	mov	r3, r0
 8010798:	e023      	b.n	80107e2 <tcp_shutdown+0xa6>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d007      	beq.n	80107b2 <tcp_shutdown+0x76>
      pbuf_free(pcb->refused_data);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff f898 	bl	800f8dc <pbuf_free>
      pcb->refused_data = NULL;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d013      	beq.n	80107e0 <tcp_shutdown+0xa4>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	7d1b      	ldrb	r3, [r3, #20]
 80107bc:	2b04      	cmp	r3, #4
 80107be:	dc02      	bgt.n	80107c6 <tcp_shutdown+0x8a>
 80107c0:	2b03      	cmp	r3, #3
 80107c2:	da02      	bge.n	80107ca <tcp_shutdown+0x8e>
 80107c4:	e009      	b.n	80107da <tcp_shutdown+0x9e>
 80107c6:	2b07      	cmp	r3, #7
 80107c8:	d107      	bne.n	80107da <tcp_shutdown+0x9e>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	4619      	mov	r1, r3
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f7ff fe39 	bl	8010448 <tcp_close_shutdown>
 80107d6:	4603      	mov	r3, r0
 80107d8:	e003      	b.n	80107e2 <tcp_shutdown+0xa6>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80107da:	f06f 030a 	mvn.w	r3, #10
 80107de:	e000      	b.n	80107e2 <tcp_shutdown+0xa6>
    }
  }
  return ERR_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3710      	adds	r7, #16
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	0801b8a8 	.word	0x0801b8a8
 80107f0:	0801ba2c 	.word	0x0801ba2c
 80107f4:	0801b948 	.word	0x0801b948

080107f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b08e      	sub	sp, #56	; 0x38
 80107fc:	af04      	add	r7, sp, #16
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 8010802:	f7f5 fa3f 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d107      	bne.n	801081c <tcp_abandon+0x24>
 801080c:	4b52      	ldr	r3, [pc, #328]	; (8010958 <tcp_abandon+0x160>)
 801080e:	f240 223d 	movw	r2, #573	; 0x23d
 8010812:	4952      	ldr	r1, [pc, #328]	; (801095c <tcp_abandon+0x164>)
 8010814:	4852      	ldr	r0, [pc, #328]	; (8010960 <tcp_abandon+0x168>)
 8010816:	f007 f8d3 	bl	80179c0 <iprintf>
 801081a:	e099      	b.n	8010950 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	7d1b      	ldrb	r3, [r3, #20]
 8010820:	2b01      	cmp	r3, #1
 8010822:	d106      	bne.n	8010832 <tcp_abandon+0x3a>
 8010824:	4b4c      	ldr	r3, [pc, #304]	; (8010958 <tcp_abandon+0x160>)
 8010826:	f44f 7210 	mov.w	r2, #576	; 0x240
 801082a:	494e      	ldr	r1, [pc, #312]	; (8010964 <tcp_abandon+0x16c>)
 801082c:	484c      	ldr	r0, [pc, #304]	; (8010960 <tcp_abandon+0x168>)
 801082e:	f007 f8c7 	bl	80179c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	7d1b      	ldrb	r3, [r3, #20]
 8010836:	2b0a      	cmp	r3, #10
 8010838:	d107      	bne.n	801084a <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801083a:	6879      	ldr	r1, [r7, #4]
 801083c:	484a      	ldr	r0, [pc, #296]	; (8010968 <tcp_abandon+0x170>)
 801083e:	f001 fa9b 	bl	8011d78 <tcp_pcb_remove>
    tcp_free(pcb);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7ff fd4e 	bl	80102e4 <tcp_free>
 8010848:	e082      	b.n	8010950 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801084e:	2300      	movs	r3, #0
 8010850:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010856:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010864:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	691b      	ldr	r3, [r3, #16]
 801086a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	7d1b      	ldrb	r3, [r3, #20]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d126      	bne.n	80108c2 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	8adb      	ldrh	r3, [r3, #22]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d02e      	beq.n	80108da <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801087c:	4b3b      	ldr	r3, [pc, #236]	; (801096c <tcp_abandon+0x174>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	429a      	cmp	r2, r3
 8010884:	d105      	bne.n	8010892 <tcp_abandon+0x9a>
 8010886:	4b39      	ldr	r3, [pc, #228]	; (801096c <tcp_abandon+0x174>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	4a37      	ldr	r2, [pc, #220]	; (801096c <tcp_abandon+0x174>)
 801088e:	6013      	str	r3, [r2, #0]
 8010890:	e013      	b.n	80108ba <tcp_abandon+0xc2>
 8010892:	4b36      	ldr	r3, [pc, #216]	; (801096c <tcp_abandon+0x174>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	61fb      	str	r3, [r7, #28]
 8010898:	e00c      	b.n	80108b4 <tcp_abandon+0xbc>
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	68db      	ldr	r3, [r3, #12]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d104      	bne.n	80108ae <tcp_abandon+0xb6>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	68da      	ldr	r2, [r3, #12]
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	60da      	str	r2, [r3, #12]
 80108ac:	e005      	b.n	80108ba <tcp_abandon+0xc2>
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	61fb      	str	r3, [r7, #28]
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1ef      	bne.n	801089a <tcp_abandon+0xa2>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2200      	movs	r2, #0
 80108be:	60da      	str	r2, [r3, #12]
 80108c0:	e00b      	b.n	80108da <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	8adb      	ldrh	r3, [r3, #22]
 80108ca:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80108cc:	6879      	ldr	r1, [r7, #4]
 80108ce:	4828      	ldr	r0, [pc, #160]	; (8010970 <tcp_abandon+0x178>)
 80108d0:	f001 fa52 	bl	8011d78 <tcp_pcb_remove>
 80108d4:	4b27      	ldr	r3, [pc, #156]	; (8010974 <tcp_abandon+0x17c>)
 80108d6:	2201      	movs	r2, #1
 80108d8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d004      	beq.n	80108ec <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108e6:	4618      	mov	r0, r3
 80108e8:	f000 ff1c 	bl	8011724 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d004      	beq.n	80108fe <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 ff13 	bl	8011724 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010902:	2b00      	cmp	r3, #0
 8010904:	d004      	beq.n	8010910 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801090a:	4618      	mov	r0, r3
 801090c:	f000 ff0a 	bl	8011724 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00e      	beq.n	8010934 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010916:	6879      	ldr	r1, [r7, #4]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3304      	adds	r3, #4
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	8b12      	ldrh	r2, [r2, #24]
 8010920:	9202      	str	r2, [sp, #8]
 8010922:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010924:	9201      	str	r2, [sp, #4]
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	460b      	mov	r3, r1
 801092a:	697a      	ldr	r2, [r7, #20]
 801092c:	69b9      	ldr	r1, [r7, #24]
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f005 fbf8 	bl	8016124 <tcp_rst>
    }
    last_state = pcb->state;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	7d1b      	ldrb	r3, [r3, #20]
 8010938:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7ff fcd2 	bl	80102e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d004      	beq.n	8010950 <tcp_abandon+0x158>
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f06f 010c 	mvn.w	r1, #12
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	4798      	blx	r3
  }
}
 8010950:	3728      	adds	r7, #40	; 0x28
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	0801b8a8 	.word	0x0801b8a8
 801095c:	0801ba48 	.word	0x0801ba48
 8010960:	0801b948 	.word	0x0801b948
 8010964:	0801ba64 	.word	0x0801ba64
 8010968:	240108b8 	.word	0x240108b8
 801096c:	240108ac 	.word	0x240108ac
 8010970:	240108b4 	.word	0x240108b4
 8010974:	240108bc 	.word	0x240108bc

08010978 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010980:	2101      	movs	r1, #1
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff ff38 	bl	80107f8 <tcp_abandon>
}
 8010988:	bf00      	nop
 801098a:	3708      	adds	r7, #8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b088      	sub	sp, #32
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	4613      	mov	r3, r2
 801099c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801099e:	2304      	movs	r3, #4
 80109a0:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 80109a2:	f7f5 f96f 	bl	8005c84 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 80109ac:	4b3e      	ldr	r3, [pc, #248]	; (8010aa8 <tcp_bind+0x118>)
 80109ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d109      	bne.n	80109ca <tcp_bind+0x3a>
 80109b6:	4b3d      	ldr	r3, [pc, #244]	; (8010aac <tcp_bind+0x11c>)
 80109b8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80109bc:	493c      	ldr	r1, [pc, #240]	; (8010ab0 <tcp_bind+0x120>)
 80109be:	483d      	ldr	r0, [pc, #244]	; (8010ab4 <tcp_bind+0x124>)
 80109c0:	f006 fffe 	bl	80179c0 <iprintf>
 80109c4:	f06f 030f 	mvn.w	r3, #15
 80109c8:	e06a      	b.n	8010aa0 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	7d1b      	ldrb	r3, [r3, #20]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d009      	beq.n	80109e6 <tcp_bind+0x56>
 80109d2:	4b36      	ldr	r3, [pc, #216]	; (8010aac <tcp_bind+0x11c>)
 80109d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80109d8:	4937      	ldr	r1, [pc, #220]	; (8010ab8 <tcp_bind+0x128>)
 80109da:	4836      	ldr	r0, [pc, #216]	; (8010ab4 <tcp_bind+0x124>)
 80109dc:	f006 fff0 	bl	80179c0 <iprintf>
 80109e0:	f06f 0305 	mvn.w	r3, #5
 80109e4:	e05c      	b.n	8010aa0 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80109e6:	88fb      	ldrh	r3, [r7, #6]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d109      	bne.n	8010a00 <tcp_bind+0x70>
    port = tcp_new_port();
 80109ec:	f000 f918 	bl	8010c20 <tcp_new_port>
 80109f0:	4603      	mov	r3, r0
 80109f2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80109f4:	88fb      	ldrh	r3, [r7, #6]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d135      	bne.n	8010a66 <tcp_bind+0xd6>
      return ERR_BUF;
 80109fa:	f06f 0301 	mvn.w	r3, #1
 80109fe:	e04f      	b.n	8010aa0 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010a00:	2300      	movs	r3, #0
 8010a02:	61fb      	str	r3, [r7, #28]
 8010a04:	e02b      	b.n	8010a5e <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010a06:	4a2d      	ldr	r2, [pc, #180]	; (8010abc <tcp_bind+0x12c>)
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	61bb      	str	r3, [r7, #24]
 8010a12:	e01e      	b.n	8010a52 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	8adb      	ldrh	r3, [r3, #22]
 8010a18:	88fa      	ldrh	r2, [r7, #6]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d116      	bne.n	8010a4c <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010a1e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d010      	beq.n	8010a46 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00c      	beq.n	8010a46 <tcp_bind+0xb6>
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d009      	beq.n	8010a46 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d005      	beq.n	8010a46 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d102      	bne.n	8010a4c <tcp_bind+0xbc>
              return ERR_USE;
 8010a46:	f06f 0307 	mvn.w	r3, #7
 8010a4a:	e029      	b.n	8010aa0 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	68db      	ldr	r3, [r3, #12]
 8010a50:	61bb      	str	r3, [r7, #24]
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d1dd      	bne.n	8010a14 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	61fb      	str	r3, [r7, #28]
 8010a5e:	69fa      	ldr	r2, [r7, #28]
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	dbcf      	blt.n	8010a06 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00c      	beq.n	8010a86 <tcp_bind+0xf6>
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d008      	beq.n	8010a86 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d002      	beq.n	8010a80 <tcp_bind+0xf0>
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	e000      	b.n	8010a82 <tcp_bind+0xf2>
 8010a80:	2300      	movs	r3, #0
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	88fa      	ldrh	r2, [r7, #6]
 8010a8a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010a8c:	4b0c      	ldr	r3, [pc, #48]	; (8010ac0 <tcp_bind+0x130>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	60da      	str	r2, [r3, #12]
 8010a94:	4a0a      	ldr	r2, [pc, #40]	; (8010ac0 <tcp_bind+0x130>)
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	f005 feb5 	bl	8016808 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3720      	adds	r7, #32
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	0801d484 	.word	0x0801d484
 8010aac:	0801b8a8 	.word	0x0801b8a8
 8010ab0:	0801ba98 	.word	0x0801ba98
 8010ab4:	0801b948 	.word	0x0801b948
 8010ab8:	0801bab0 	.word	0x0801bab0
 8010abc:	0801d570 	.word	0x0801d570
 8010ac0:	240108ac 	.word	0x240108ac

08010ac4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <tcp_update_rcv_ann_wnd+0x1c>
 8010ad2:	4b25      	ldr	r3, [pc, #148]	; (8010b68 <tcp_update_rcv_ann_wnd+0xa4>)
 8010ad4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010ad8:	4924      	ldr	r1, [pc, #144]	; (8010b6c <tcp_update_rcv_ann_wnd+0xa8>)
 8010ada:	4825      	ldr	r0, [pc, #148]	; (8010b70 <tcp_update_rcv_ann_wnd+0xac>)
 8010adc:	f006 ff70 	bl	80179c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010ae8:	4413      	add	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010af4:	f640 3168 	movw	r1, #2920	; 0xb68
 8010af8:	428a      	cmp	r2, r1
 8010afa:	bf28      	it	cs
 8010afc:	460a      	movcs	r2, r1
 8010afe:	b292      	uxth	r2, r2
 8010b00:	4413      	add	r3, r2
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	1ad3      	subs	r3, r2, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	db08      	blt.n	8010b1c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	1ad3      	subs	r3, r2, r3
 8010b1a:	e020      	b.n	8010b5e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	dd03      	ble.n	8010b32 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010b30:	e014      	b.n	8010b5c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b44:	d306      	bcc.n	8010b54 <tcp_update_rcv_ann_wnd+0x90>
 8010b46:	4b08      	ldr	r3, [pc, #32]	; (8010b68 <tcp_update_rcv_ann_wnd+0xa4>)
 8010b48:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010b4c:	4909      	ldr	r1, [pc, #36]	; (8010b74 <tcp_update_rcv_ann_wnd+0xb0>)
 8010b4e:	4808      	ldr	r0, [pc, #32]	; (8010b70 <tcp_update_rcv_ann_wnd+0xac>)
 8010b50:	f006 ff36 	bl	80179c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010b5c:	2300      	movs	r3, #0
  }
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	0801b8a8 	.word	0x0801b8a8
 8010b6c:	0801bb60 	.word	0x0801bb60
 8010b70:	0801b948 	.word	0x0801b948
 8010b74:	0801bb84 	.word	0x0801bb84

08010b78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	460b      	mov	r3, r1
 8010b82:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 8010b84:	f7f5 f87e 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d107      	bne.n	8010b9e <tcp_recved+0x26>
 8010b8e:	4b20      	ldr	r3, [pc, #128]	; (8010c10 <tcp_recved+0x98>)
 8010b90:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010b94:	491f      	ldr	r1, [pc, #124]	; (8010c14 <tcp_recved+0x9c>)
 8010b96:	4820      	ldr	r0, [pc, #128]	; (8010c18 <tcp_recved+0xa0>)
 8010b98:	f006 ff12 	bl	80179c0 <iprintf>
 8010b9c:	e034      	b.n	8010c08 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	7d1b      	ldrb	r3, [r3, #20]
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d106      	bne.n	8010bb4 <tcp_recved+0x3c>
 8010ba6:	4b1a      	ldr	r3, [pc, #104]	; (8010c10 <tcp_recved+0x98>)
 8010ba8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010bac:	491b      	ldr	r1, [pc, #108]	; (8010c1c <tcp_recved+0xa4>)
 8010bae:	481a      	ldr	r0, [pc, #104]	; (8010c18 <tcp_recved+0xa0>)
 8010bb0:	f006 ff06 	bl	80179c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010bb8:	887b      	ldrh	r3, [r7, #2]
 8010bba:	4413      	add	r3, r2
 8010bbc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010bbe:	89fb      	ldrh	r3, [r7, #14]
 8010bc0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d804      	bhi.n	8010bd2 <tcp_recved+0x5a>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bcc:	89fa      	ldrh	r2, [r7, #14]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d204      	bcs.n	8010bdc <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010bd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8010bda:	e002      	b.n	8010be2 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	89fa      	ldrh	r2, [r7, #14]
 8010be0:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff ff6e 	bl	8010ac4 <tcp_update_rcv_ann_wnd>
 8010be8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d909      	bls.n	8010c08 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8b5b      	ldrh	r3, [r3, #26]
 8010bf8:	f043 0302 	orr.w	r3, r3, #2
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f004 fcd8 	bl	80155b8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	0801b8a8 	.word	0x0801b8a8
 8010c14:	0801bba0 	.word	0x0801bba0
 8010c18:	0801b948 	.word	0x0801b948
 8010c1c:	0801bbb8 	.word	0x0801bbb8

08010c20 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010c2a:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <tcp_new_port+0x84>)
 8010c2c:	881b      	ldrh	r3, [r3, #0]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	b29a      	uxth	r2, r3
 8010c32:	4b1c      	ldr	r3, [pc, #112]	; (8010ca4 <tcp_new_port+0x84>)
 8010c34:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010c36:	4b1b      	ldr	r3, [pc, #108]	; (8010ca4 <tcp_new_port+0x84>)
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d103      	bne.n	8010c4a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010c42:	4b18      	ldr	r3, [pc, #96]	; (8010ca4 <tcp_new_port+0x84>)
 8010c44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010c48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	71fb      	strb	r3, [r7, #7]
 8010c4e:	e01e      	b.n	8010c8e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010c50:	79fb      	ldrb	r3, [r7, #7]
 8010c52:	4a15      	ldr	r2, [pc, #84]	; (8010ca8 <tcp_new_port+0x88>)
 8010c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	603b      	str	r3, [r7, #0]
 8010c5c:	e011      	b.n	8010c82 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	8ada      	ldrh	r2, [r3, #22]
 8010c62:	4b10      	ldr	r3, [pc, #64]	; (8010ca4 <tcp_new_port+0x84>)
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d108      	bne.n	8010c7c <tcp_new_port+0x5c>
        n++;
 8010c6a:	88bb      	ldrh	r3, [r7, #4]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010c70:	88bb      	ldrh	r3, [r7, #4]
 8010c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c76:	d3d8      	bcc.n	8010c2a <tcp_new_port+0xa>
          return 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e00d      	b.n	8010c98 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	603b      	str	r3, [r7, #0]
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d1ea      	bne.n	8010c5e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010c88:	79fb      	ldrb	r3, [r7, #7]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	71fb      	strb	r3, [r7, #7]
 8010c8e:	79fb      	ldrb	r3, [r7, #7]
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d9dd      	bls.n	8010c50 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010c94:	4b03      	ldr	r3, [pc, #12]	; (8010ca4 <tcp_new_port+0x84>)
 8010c96:	881b      	ldrh	r3, [r3, #0]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	2400003c 	.word	0x2400003c
 8010ca8:	0801d570 	.word	0x0801d570

08010cac <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08a      	sub	sp, #40	; 0x28
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	603b      	str	r3, [r7, #0]
 8010cb8:	4613      	mov	r3, r2
 8010cba:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	627b      	str	r3, [r7, #36]	; 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 8010cc0:	f7f4 ffe0 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d109      	bne.n	8010cde <tcp_connect+0x32>
 8010cca:	4b7d      	ldr	r3, [pc, #500]	; (8010ec0 <tcp_connect+0x214>)
 8010ccc:	f240 4235 	movw	r2, #1077	; 0x435
 8010cd0:	497c      	ldr	r1, [pc, #496]	; (8010ec4 <tcp_connect+0x218>)
 8010cd2:	487d      	ldr	r0, [pc, #500]	; (8010ec8 <tcp_connect+0x21c>)
 8010cd4:	f006 fe74 	bl	80179c0 <iprintf>
 8010cd8:	f06f 030f 	mvn.w	r3, #15
 8010cdc:	e0ec      	b.n	8010eb8 <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d109      	bne.n	8010cf8 <tcp_connect+0x4c>
 8010ce4:	4b76      	ldr	r3, [pc, #472]	; (8010ec0 <tcp_connect+0x214>)
 8010ce6:	f240 4236 	movw	r2, #1078	; 0x436
 8010cea:	4978      	ldr	r1, [pc, #480]	; (8010ecc <tcp_connect+0x220>)
 8010cec:	4876      	ldr	r0, [pc, #472]	; (8010ec8 <tcp_connect+0x21c>)
 8010cee:	f006 fe67 	bl	80179c0 <iprintf>
 8010cf2:	f06f 030f 	mvn.w	r3, #15
 8010cf6:	e0df      	b.n	8010eb8 <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	7d1b      	ldrb	r3, [r3, #20]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d009      	beq.n	8010d14 <tcp_connect+0x68>
 8010d00:	4b6f      	ldr	r3, [pc, #444]	; (8010ec0 <tcp_connect+0x214>)
 8010d02:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8010d06:	4972      	ldr	r1, [pc, #456]	; (8010ed0 <tcp_connect+0x224>)
 8010d08:	486f      	ldr	r0, [pc, #444]	; (8010ec8 <tcp_connect+0x21c>)
 8010d0a:	f006 fe59 	bl	80179c0 <iprintf>
 8010d0e:	f06f 0309 	mvn.w	r3, #9
 8010d12:	e0d1      	b.n	8010eb8 <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d002      	beq.n	8010d20 <tcp_connect+0x74>
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	e000      	b.n	8010d22 <tcp_connect+0x76>
 8010d20:	2300      	movs	r3, #0
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	88fa      	ldrh	r2, [r7, #6]
 8010d2a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	7a1b      	ldrb	r3, [r3, #8]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d006      	beq.n	8010d42 <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	7a1b      	ldrb	r3, [r3, #8]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7fe fa41 	bl	800f1c0 <netif_get_by_index>
 8010d3e:	6278      	str	r0, [r7, #36]	; 0x24
 8010d40:	e005      	b.n	8010d4e <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3304      	adds	r3, #4
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fc f8ee 	bl	800cf28 <ip4_route>
 8010d4c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d102      	bne.n	8010d5a <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010d54:	f06f 0303 	mvn.w	r3, #3
 8010d58:	e0ae      	b.n	8010eb8 <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d003      	beq.n	8010d68 <tcp_connect+0xbc>
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d111      	bne.n	8010d8c <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d002      	beq.n	8010d74 <tcp_connect+0xc8>
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	3304      	adds	r3, #4
 8010d72:	e000      	b.n	8010d76 <tcp_connect+0xca>
 8010d74:	2300      	movs	r3, #0
 8010d76:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d102      	bne.n	8010d84 <tcp_connect+0xd8>
      return ERR_RTE;
 8010d7e:	f06f 0303 	mvn.w	r3, #3
 8010d82:	e099      	b.n	8010eb8 <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	8adb      	ldrh	r3, [r3, #22]
 8010d90:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	8adb      	ldrh	r3, [r3, #22]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d10c      	bne.n	8010db4 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 8010d9a:	f7ff ff41 	bl	8010c20 <tcp_new_port>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	461a      	mov	r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	8adb      	ldrh	r3, [r3, #22]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d102      	bne.n	8010db4 <tcp_connect+0x108>
      return ERR_BUF;
 8010dae:	f06f 0301 	mvn.w	r3, #1
 8010db2:	e081      	b.n	8010eb8 <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f001 f873 	bl	8011ea0 <tcp_next_iss>
 8010dba:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	697a      	ldr	r2, [r7, #20]
 8010dc6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	1e5a      	subs	r2, r3, #1
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	1e5a      	subs	r2, r3, #1
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	1e5a      	subs	r2, r3, #1
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010dfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010e08:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	3304      	adds	r3, #4
 8010e12:	461a      	mov	r2, r3
 8010e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e16:	f001 f869 	bl	8011eec <tcp_eff_send_mss_netif>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2201      	movs	r2, #1
 8010e26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	683a      	ldr	r2, [r7, #0]
 8010e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010e32:	2102      	movs	r1, #2
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f004 fad1 	bl	80153dc <tcp_enqueue_flags>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8010e3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d136      	bne.n	8010eb4 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2202      	movs	r2, #2
 8010e4a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8010e4c:	8b7b      	ldrh	r3, [r7, #26]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d021      	beq.n	8010e96 <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010e52:	4b20      	ldr	r3, [pc, #128]	; (8010ed4 <tcp_connect+0x228>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d105      	bne.n	8010e68 <tcp_connect+0x1bc>
 8010e5c:	4b1d      	ldr	r3, [pc, #116]	; (8010ed4 <tcp_connect+0x228>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	4a1c      	ldr	r2, [pc, #112]	; (8010ed4 <tcp_connect+0x228>)
 8010e64:	6013      	str	r3, [r2, #0]
 8010e66:	e013      	b.n	8010e90 <tcp_connect+0x1e4>
 8010e68:	4b1a      	ldr	r3, [pc, #104]	; (8010ed4 <tcp_connect+0x228>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	623b      	str	r3, [r7, #32]
 8010e6e:	e00c      	b.n	8010e8a <tcp_connect+0x1de>
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d104      	bne.n	8010e84 <tcp_connect+0x1d8>
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	68da      	ldr	r2, [r3, #12]
 8010e7e:	6a3b      	ldr	r3, [r7, #32]
 8010e80:	60da      	str	r2, [r3, #12]
 8010e82:	e005      	b.n	8010e90 <tcp_connect+0x1e4>
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	623b      	str	r3, [r7, #32]
 8010e8a:	6a3b      	ldr	r3, [r7, #32]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d1ef      	bne.n	8010e70 <tcp_connect+0x1c4>
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2200      	movs	r2, #0
 8010e94:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8010e96:	4b10      	ldr	r3, [pc, #64]	; (8010ed8 <tcp_connect+0x22c>)
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	60da      	str	r2, [r3, #12]
 8010e9e:	4a0e      	ldr	r2, [pc, #56]	; (8010ed8 <tcp_connect+0x22c>)
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	6013      	str	r3, [r2, #0]
 8010ea4:	f005 fcb0 	bl	8016808 <tcp_timer_needed>
 8010ea8:	4b0c      	ldr	r3, [pc, #48]	; (8010edc <tcp_connect+0x230>)
 8010eaa:	2201      	movs	r2, #1
 8010eac:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f004 fb82 	bl	80155b8 <tcp_output>
  }
  return ret;
 8010eb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3728      	adds	r7, #40	; 0x28
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	0801b8a8 	.word	0x0801b8a8
 8010ec4:	0801bbe0 	.word	0x0801bbe0
 8010ec8:	0801b948 	.word	0x0801b948
 8010ecc:	0801bbfc 	.word	0x0801bbfc
 8010ed0:	0801bc18 	.word	0x0801bc18
 8010ed4:	240108ac 	.word	0x240108ac
 8010ed8:	240108b4 	.word	0x240108b4
 8010edc:	240108bc 	.word	0x240108bc

08010ee0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010ee0:	b5b0      	push	{r4, r5, r7, lr}
 8010ee2:	b090      	sub	sp, #64	; 0x40
 8010ee4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010eec:	4b94      	ldr	r3, [pc, #592]	; (8011140 <tcp_slowtmr+0x260>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	4a93      	ldr	r2, [pc, #588]	; (8011140 <tcp_slowtmr+0x260>)
 8010ef4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010ef6:	4b93      	ldr	r3, [pc, #588]	; (8011144 <tcp_slowtmr+0x264>)
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	3301      	adds	r3, #1
 8010efc:	b2da      	uxtb	r2, r3
 8010efe:	4b91      	ldr	r3, [pc, #580]	; (8011144 <tcp_slowtmr+0x264>)
 8010f00:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010f02:	2300      	movs	r3, #0
 8010f04:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010f06:	4b90      	ldr	r3, [pc, #576]	; (8011148 <tcp_slowtmr+0x268>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010f0c:	e29d      	b.n	801144a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f10:	7d1b      	ldrb	r3, [r3, #20]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d106      	bne.n	8010f24 <tcp_slowtmr+0x44>
 8010f16:	4b8d      	ldr	r3, [pc, #564]	; (801114c <tcp_slowtmr+0x26c>)
 8010f18:	f240 42be 	movw	r2, #1214	; 0x4be
 8010f1c:	498c      	ldr	r1, [pc, #560]	; (8011150 <tcp_slowtmr+0x270>)
 8010f1e:	488d      	ldr	r0, [pc, #564]	; (8011154 <tcp_slowtmr+0x274>)
 8010f20:	f006 fd4e 	bl	80179c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f26:	7d1b      	ldrb	r3, [r3, #20]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d106      	bne.n	8010f3a <tcp_slowtmr+0x5a>
 8010f2c:	4b87      	ldr	r3, [pc, #540]	; (801114c <tcp_slowtmr+0x26c>)
 8010f2e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010f32:	4989      	ldr	r1, [pc, #548]	; (8011158 <tcp_slowtmr+0x278>)
 8010f34:	4887      	ldr	r0, [pc, #540]	; (8011154 <tcp_slowtmr+0x274>)
 8010f36:	f006 fd43 	bl	80179c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3c:	7d1b      	ldrb	r3, [r3, #20]
 8010f3e:	2b0a      	cmp	r3, #10
 8010f40:	d106      	bne.n	8010f50 <tcp_slowtmr+0x70>
 8010f42:	4b82      	ldr	r3, [pc, #520]	; (801114c <tcp_slowtmr+0x26c>)
 8010f44:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010f48:	4984      	ldr	r1, [pc, #528]	; (801115c <tcp_slowtmr+0x27c>)
 8010f4a:	4882      	ldr	r0, [pc, #520]	; (8011154 <tcp_slowtmr+0x274>)
 8010f4c:	f006 fd38 	bl	80179c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	7f9a      	ldrb	r2, [r3, #30]
 8010f54:	4b7b      	ldr	r3, [pc, #492]	; (8011144 <tcp_slowtmr+0x264>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d105      	bne.n	8010f68 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010f66:	e270      	b.n	801144a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010f68:	4b76      	ldr	r3, [pc, #472]	; (8011144 <tcp_slowtmr+0x264>)
 8010f6a:	781a      	ldrb	r2, [r3, #0]
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010f70:	2300      	movs	r3, #0
 8010f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f7e:	7d1b      	ldrb	r3, [r3, #20]
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d10a      	bne.n	8010f9a <tcp_slowtmr+0xba>
 8010f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f8a:	2b05      	cmp	r3, #5
 8010f8c:	d905      	bls.n	8010f9a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f92:	3301      	adds	r3, #1
 8010f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f98:	e11e      	b.n	80111d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fa0:	2b0b      	cmp	r3, #11
 8010fa2:	d905      	bls.n	8010fb0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fa8:	3301      	adds	r3, #1
 8010faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fae:	e113      	b.n	80111d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d075      	beq.n	80110a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8010fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d006      	beq.n	8010fd0 <tcp_slowtmr+0xf0>
 8010fc2:	4b62      	ldr	r3, [pc, #392]	; (801114c <tcp_slowtmr+0x26c>)
 8010fc4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010fc8:	4965      	ldr	r1, [pc, #404]	; (8011160 <tcp_slowtmr+0x280>)
 8010fca:	4862      	ldr	r0, [pc, #392]	; (8011154 <tcp_slowtmr+0x274>)
 8010fcc:	f006 fcf8 	bl	80179c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d106      	bne.n	8010fe6 <tcp_slowtmr+0x106>
 8010fd8:	4b5c      	ldr	r3, [pc, #368]	; (801114c <tcp_slowtmr+0x26c>)
 8010fda:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010fde:	4961      	ldr	r1, [pc, #388]	; (8011164 <tcp_slowtmr+0x284>)
 8010fe0:	485c      	ldr	r0, [pc, #368]	; (8011154 <tcp_slowtmr+0x274>)
 8010fe2:	f006 fced 	bl	80179c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010fec:	2b0b      	cmp	r3, #11
 8010fee:	d905      	bls.n	8010ffc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ffa:	e0ed      	b.n	80111d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011002:	3b01      	subs	r3, #1
 8011004:	4a58      	ldr	r2, [pc, #352]	; (8011168 <tcp_slowtmr+0x288>)
 8011006:	5cd3      	ldrb	r3, [r2, r3]
 8011008:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011010:	7c7a      	ldrb	r2, [r7, #17]
 8011012:	429a      	cmp	r2, r3
 8011014:	d907      	bls.n	8011026 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011018:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801101c:	3301      	adds	r3, #1
 801101e:	b2da      	uxtb	r2, r3
 8011020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011022:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801102c:	7c7a      	ldrb	r2, [r7, #17]
 801102e:	429a      	cmp	r2, r3
 8011030:	f200 80d2 	bhi.w	80111d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011034:	2301      	movs	r3, #1
 8011036:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801103e:	2b00      	cmp	r3, #0
 8011040:	d108      	bne.n	8011054 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011044:	f005 f962 	bl	801630c <tcp_zero_window_probe>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d014      	beq.n	8011078 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801104e:	2300      	movs	r3, #0
 8011050:	623b      	str	r3, [r7, #32]
 8011052:	e011      	b.n	8011078 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801105a:	4619      	mov	r1, r3
 801105c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801105e:	f004 f825 	bl	80150ac <tcp_split_unsent_seg>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	d107      	bne.n	8011078 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801106a:	f004 faa5 	bl	80155b8 <tcp_output>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d101      	bne.n	8011078 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011074:	2300      	movs	r3, #0
 8011076:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011078:	6a3b      	ldr	r3, [r7, #32]
 801107a:	2b00      	cmp	r3, #0
 801107c:	f000 80ac 	beq.w	80111d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011082:	2200      	movs	r2, #0
 8011084:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801108e:	2b06      	cmp	r3, #6
 8011090:	f200 80a2 	bhi.w	80111d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801109a:	3301      	adds	r3, #1
 801109c:	b2da      	uxtb	r2, r3
 801109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80110a4:	e098      	b.n	80111d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80110a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	db0f      	blt.n	80110d0 <tcp_slowtmr+0x1f0>
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d008      	beq.n	80110d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80110be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	3301      	adds	r3, #1
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	b21a      	sxth	r2, r3
 80110cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80110d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80110dc:	429a      	cmp	r2, r3
 80110de:	db7b      	blt.n	80111d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80110e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110e2:	f004 fd5d 	bl	8015ba0 <tcp_rexmit_rto_prepare>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d007      	beq.n	80110fc <tcp_slowtmr+0x21c>
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d171      	bne.n	80111d8 <tcp_slowtmr+0x2f8>
 80110f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d06d      	beq.n	80111d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80110fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fe:	7d1b      	ldrb	r3, [r3, #20]
 8011100:	2b02      	cmp	r3, #2
 8011102:	d03a      	beq.n	801117a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801110a:	2b0c      	cmp	r3, #12
 801110c:	bf28      	it	cs
 801110e:	230c      	movcs	r3, #12
 8011110:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011118:	10db      	asrs	r3, r3, #3
 801111a:	b21b      	sxth	r3, r3
 801111c:	461a      	mov	r2, r3
 801111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011120:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011124:	4413      	add	r3, r2
 8011126:	7efa      	ldrb	r2, [r7, #27]
 8011128:	4910      	ldr	r1, [pc, #64]	; (801116c <tcp_slowtmr+0x28c>)
 801112a:	5c8a      	ldrb	r2, [r1, r2]
 801112c:	4093      	lsls	r3, r2
 801112e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011136:	4293      	cmp	r3, r2
 8011138:	dc1a      	bgt.n	8011170 <tcp_slowtmr+0x290>
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	b21a      	sxth	r2, r3
 801113e:	e019      	b.n	8011174 <tcp_slowtmr+0x294>
 8011140:	240108a8 	.word	0x240108a8
 8011144:	240108be 	.word	0x240108be
 8011148:	240108b4 	.word	0x240108b4
 801114c:	0801b8a8 	.word	0x0801b8a8
 8011150:	0801bc48 	.word	0x0801bc48
 8011154:	0801b948 	.word	0x0801b948
 8011158:	0801bc74 	.word	0x0801bc74
 801115c:	0801bca0 	.word	0x0801bca0
 8011160:	0801bcd0 	.word	0x0801bcd0
 8011164:	0801bd04 	.word	0x0801bd04
 8011168:	0801d568 	.word	0x0801d568
 801116c:	0801d558 	.word	0x0801d558
 8011170:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	2200      	movs	r2, #0
 801117e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011188:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801118c:	4293      	cmp	r3, r2
 801118e:	bf28      	it	cs
 8011190:	4613      	movcs	r3, r2
 8011192:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011194:	8a7b      	ldrh	r3, [r7, #18]
 8011196:	085b      	lsrs	r3, r3, #1
 8011198:	b29a      	uxth	r2, r3
 801119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80111a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111aa:	005b      	lsls	r3, r3, #1
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d206      	bcs.n	80111c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80111b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111b6:	005b      	lsls	r3, r3, #1
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80111c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80111ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111cc:	2200      	movs	r2, #0
 80111ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80111d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111d4:	f004 fd54 	bl	8015c80 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80111d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111da:	7d1b      	ldrb	r3, [r3, #20]
 80111dc:	2b06      	cmp	r3, #6
 80111de:	d111      	bne.n	8011204 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	8b5b      	ldrh	r3, [r3, #26]
 80111e4:	f003 0310 	and.w	r3, r3, #16
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00b      	beq.n	8011204 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80111ec:	4b9c      	ldr	r3, [pc, #624]	; (8011460 <tcp_slowtmr+0x580>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f2:	6a1b      	ldr	r3, [r3, #32]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	2b28      	cmp	r3, #40	; 0x28
 80111f8:	d904      	bls.n	8011204 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80111fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111fe:	3301      	adds	r3, #1
 8011200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	7a5b      	ldrb	r3, [r3, #9]
 8011208:	f003 0308 	and.w	r3, r3, #8
 801120c:	2b00      	cmp	r3, #0
 801120e:	d04a      	beq.n	80112a6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011214:	2b04      	cmp	r3, #4
 8011216:	d003      	beq.n	8011220 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801121c:	2b07      	cmp	r3, #7
 801121e:	d142      	bne.n	80112a6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011220:	4b8f      	ldr	r3, [pc, #572]	; (8011460 <tcp_slowtmr+0x580>)
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	6a1b      	ldr	r3, [r3, #32]
 8011228:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011230:	4b8c      	ldr	r3, [pc, #560]	; (8011464 <tcp_slowtmr+0x584>)
 8011232:	440b      	add	r3, r1
 8011234:	498c      	ldr	r1, [pc, #560]	; (8011468 <tcp_slowtmr+0x588>)
 8011236:	fba1 1303 	umull	r1, r3, r1, r3
 801123a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801123c:	429a      	cmp	r2, r3
 801123e:	d90a      	bls.n	8011256 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011244:	3301      	adds	r3, #1
 8011246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801124a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801124e:	3301      	adds	r3, #1
 8011250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011254:	e027      	b.n	80112a6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011256:	4b82      	ldr	r3, [pc, #520]	; (8011460 <tcp_slowtmr+0x580>)
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125c:	6a1b      	ldr	r3, [r3, #32]
 801125e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801126c:	4618      	mov	r0, r3
 801126e:	4b7f      	ldr	r3, [pc, #508]	; (801146c <tcp_slowtmr+0x58c>)
 8011270:	fb00 f303 	mul.w	r3, r0, r3
 8011274:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011276:	497c      	ldr	r1, [pc, #496]	; (8011468 <tcp_slowtmr+0x588>)
 8011278:	fba1 1303 	umull	r1, r3, r1, r3
 801127c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801127e:	429a      	cmp	r2, r3
 8011280:	d911      	bls.n	80112a6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011284:	f005 f802 	bl	801628c <tcp_keepalive>
 8011288:	4603      	mov	r3, r0
 801128a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801128e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011292:	2b00      	cmp	r3, #0
 8011294:	d107      	bne.n	80112a6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801129c:	3301      	adds	r3, #1
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80112a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d011      	beq.n	80112d2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80112ae:	4b6c      	ldr	r3, [pc, #432]	; (8011460 <tcp_slowtmr+0x580>)
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b4:	6a1b      	ldr	r3, [r3, #32]
 80112b6:	1ad2      	subs	r2, r2, r3
 80112b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80112be:	4619      	mov	r1, r3
 80112c0:	460b      	mov	r3, r1
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	440b      	add	r3, r1
 80112c6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d302      	bcc.n	80112d2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80112cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ce:	f000 feb7 	bl	8012040 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	7d1b      	ldrb	r3, [r3, #20]
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d10b      	bne.n	80112f2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80112da:	4b61      	ldr	r3, [pc, #388]	; (8011460 <tcp_slowtmr+0x580>)
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e0:	6a1b      	ldr	r3, [r3, #32]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	2b28      	cmp	r3, #40	; 0x28
 80112e6:	d904      	bls.n	80112f2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80112e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112ec:	3301      	adds	r3, #1
 80112ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	7d1b      	ldrb	r3, [r3, #20]
 80112f6:	2b09      	cmp	r3, #9
 80112f8:	d10b      	bne.n	8011312 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80112fa:	4b59      	ldr	r3, [pc, #356]	; (8011460 <tcp_slowtmr+0x580>)
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	1ad3      	subs	r3, r2, r3
 8011304:	2bf0      	cmp	r3, #240	; 0xf0
 8011306:	d904      	bls.n	8011312 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801130c:	3301      	adds	r3, #1
 801130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011316:	2b00      	cmp	r3, #0
 8011318:	d060      	beq.n	80113dc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011320:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011324:	f000 fcd8 	bl	8011cd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132a:	2b00      	cmp	r3, #0
 801132c:	d010      	beq.n	8011350 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801132e:	4b50      	ldr	r3, [pc, #320]	; (8011470 <tcp_slowtmr+0x590>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011334:	429a      	cmp	r2, r3
 8011336:	d106      	bne.n	8011346 <tcp_slowtmr+0x466>
 8011338:	4b4e      	ldr	r3, [pc, #312]	; (8011474 <tcp_slowtmr+0x594>)
 801133a:	f240 526d 	movw	r2, #1389	; 0x56d
 801133e:	494e      	ldr	r1, [pc, #312]	; (8011478 <tcp_slowtmr+0x598>)
 8011340:	484e      	ldr	r0, [pc, #312]	; (801147c <tcp_slowtmr+0x59c>)
 8011342:	f006 fb3d 	bl	80179c0 <iprintf>
        prev->next = pcb->next;
 8011346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011348:	68da      	ldr	r2, [r3, #12]
 801134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134c:	60da      	str	r2, [r3, #12]
 801134e:	e00f      	b.n	8011370 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011350:	4b47      	ldr	r3, [pc, #284]	; (8011470 <tcp_slowtmr+0x590>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011356:	429a      	cmp	r2, r3
 8011358:	d006      	beq.n	8011368 <tcp_slowtmr+0x488>
 801135a:	4b46      	ldr	r3, [pc, #280]	; (8011474 <tcp_slowtmr+0x594>)
 801135c:	f240 5271 	movw	r2, #1393	; 0x571
 8011360:	4947      	ldr	r1, [pc, #284]	; (8011480 <tcp_slowtmr+0x5a0>)
 8011362:	4846      	ldr	r0, [pc, #280]	; (801147c <tcp_slowtmr+0x59c>)
 8011364:	f006 fb2c 	bl	80179c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	4a40      	ldr	r2, [pc, #256]	; (8011470 <tcp_slowtmr+0x590>)
 801136e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011374:	2b00      	cmp	r3, #0
 8011376:	d013      	beq.n	80113a0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011380:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011384:	3304      	adds	r3, #4
 8011386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011388:	8ad2      	ldrh	r2, [r2, #22]
 801138a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801138c:	8b09      	ldrh	r1, [r1, #24]
 801138e:	9102      	str	r1, [sp, #8]
 8011390:	9201      	str	r2, [sp, #4]
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	462b      	mov	r3, r5
 8011396:	4622      	mov	r2, r4
 8011398:	4601      	mov	r1, r0
 801139a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801139c:	f004 fec2 	bl	8016124 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80113a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a2:	691b      	ldr	r3, [r3, #16]
 80113a4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	7d1b      	ldrb	r3, [r3, #20]
 80113aa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80113ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80113b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80113b6:	6838      	ldr	r0, [r7, #0]
 80113b8:	f7fe ff94 	bl	80102e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80113bc:	4b31      	ldr	r3, [pc, #196]	; (8011484 <tcp_slowtmr+0x5a4>)
 80113be:	2200      	movs	r2, #0
 80113c0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d004      	beq.n	80113d2 <tcp_slowtmr+0x4f2>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	f06f 010c 	mvn.w	r1, #12
 80113ce:	68b8      	ldr	r0, [r7, #8]
 80113d0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80113d2:	4b2c      	ldr	r3, [pc, #176]	; (8011484 <tcp_slowtmr+0x5a4>)
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d037      	beq.n	801144a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80113da:	e592      	b.n	8010f02 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80113dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80113e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	7f1b      	ldrb	r3, [r3, #28]
 80113ea:	3301      	adds	r3, #1
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80113f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f4:	7f1a      	ldrb	r2, [r3, #28]
 80113f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f8:	7f5b      	ldrb	r3, [r3, #29]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d325      	bcc.n	801144a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80113fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011400:	2200      	movs	r2, #0
 8011402:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011404:	4b1f      	ldr	r3, [pc, #124]	; (8011484 <tcp_slowtmr+0x5a4>)
 8011406:	2200      	movs	r2, #0
 8011408:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00b      	beq.n	801142c <tcp_slowtmr+0x54c>
 8011414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801141a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801141c:	6912      	ldr	r2, [r2, #16]
 801141e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011420:	4610      	mov	r0, r2
 8011422:	4798      	blx	r3
 8011424:	4603      	mov	r3, r0
 8011426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801142a:	e002      	b.n	8011432 <tcp_slowtmr+0x552>
 801142c:	2300      	movs	r3, #0
 801142e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011432:	4b14      	ldr	r3, [pc, #80]	; (8011484 <tcp_slowtmr+0x5a4>)
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d000      	beq.n	801143c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801143a:	e562      	b.n	8010f02 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801143c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011440:	2b00      	cmp	r3, #0
 8011442:	d102      	bne.n	801144a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011446:	f004 f8b7 	bl	80155b8 <tcp_output>
  while (pcb != NULL) {
 801144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144c:	2b00      	cmp	r3, #0
 801144e:	f47f ad5e 	bne.w	8010f0e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011452:	2300      	movs	r3, #0
 8011454:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011456:	4b0c      	ldr	r3, [pc, #48]	; (8011488 <tcp_slowtmr+0x5a8>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801145c:	e069      	b.n	8011532 <tcp_slowtmr+0x652>
 801145e:	bf00      	nop
 8011460:	240108a8 	.word	0x240108a8
 8011464:	000a4cb8 	.word	0x000a4cb8
 8011468:	10624dd3 	.word	0x10624dd3
 801146c:	000124f8 	.word	0x000124f8
 8011470:	240108b4 	.word	0x240108b4
 8011474:	0801b8a8 	.word	0x0801b8a8
 8011478:	0801bd3c 	.word	0x0801bd3c
 801147c:	0801b948 	.word	0x0801b948
 8011480:	0801bd68 	.word	0x0801bd68
 8011484:	240108bc 	.word	0x240108bc
 8011488:	240108b8 	.word	0x240108b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801148c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	2b0a      	cmp	r3, #10
 8011492:	d006      	beq.n	80114a2 <tcp_slowtmr+0x5c2>
 8011494:	4b2b      	ldr	r3, [pc, #172]	; (8011544 <tcp_slowtmr+0x664>)
 8011496:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801149a:	492b      	ldr	r1, [pc, #172]	; (8011548 <tcp_slowtmr+0x668>)
 801149c:	482b      	ldr	r0, [pc, #172]	; (801154c <tcp_slowtmr+0x66c>)
 801149e:	f006 fa8f 	bl	80179c0 <iprintf>
    pcb_remove = 0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80114a8:	4b29      	ldr	r3, [pc, #164]	; (8011550 <tcp_slowtmr+0x670>)
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	6a1b      	ldr	r3, [r3, #32]
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	2bf0      	cmp	r3, #240	; 0xf0
 80114b4:	d904      	bls.n	80114c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80114b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ba:	3301      	adds	r3, #1
 80114bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d02f      	beq.n	8011528 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80114c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114ca:	f000 fc05 	bl	8011cd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80114ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d010      	beq.n	80114f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80114d4:	4b1f      	ldr	r3, [pc, #124]	; (8011554 <tcp_slowtmr+0x674>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114da:	429a      	cmp	r2, r3
 80114dc:	d106      	bne.n	80114ec <tcp_slowtmr+0x60c>
 80114de:	4b19      	ldr	r3, [pc, #100]	; (8011544 <tcp_slowtmr+0x664>)
 80114e0:	f240 52af 	movw	r2, #1455	; 0x5af
 80114e4:	491c      	ldr	r1, [pc, #112]	; (8011558 <tcp_slowtmr+0x678>)
 80114e6:	4819      	ldr	r0, [pc, #100]	; (801154c <tcp_slowtmr+0x66c>)
 80114e8:	f006 fa6a 	bl	80179c0 <iprintf>
        prev->next = pcb->next;
 80114ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ee:	68da      	ldr	r2, [r3, #12]
 80114f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f2:	60da      	str	r2, [r3, #12]
 80114f4:	e00f      	b.n	8011516 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80114f6:	4b17      	ldr	r3, [pc, #92]	; (8011554 <tcp_slowtmr+0x674>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d006      	beq.n	801150e <tcp_slowtmr+0x62e>
 8011500:	4b10      	ldr	r3, [pc, #64]	; (8011544 <tcp_slowtmr+0x664>)
 8011502:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011506:	4915      	ldr	r1, [pc, #84]	; (801155c <tcp_slowtmr+0x67c>)
 8011508:	4810      	ldr	r0, [pc, #64]	; (801154c <tcp_slowtmr+0x66c>)
 801150a:	f006 fa59 	bl	80179c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	4a10      	ldr	r2, [pc, #64]	; (8011554 <tcp_slowtmr+0x674>)
 8011514:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011518:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011520:	69f8      	ldr	r0, [r7, #28]
 8011522:	f7fe fedf 	bl	80102e4 <tcp_free>
 8011526:	e004      	b.n	8011532 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	68db      	ldr	r3, [r3, #12]
 8011530:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1a9      	bne.n	801148c <tcp_slowtmr+0x5ac>
    }
  }
}
 8011538:	bf00      	nop
 801153a:	bf00      	nop
 801153c:	3730      	adds	r7, #48	; 0x30
 801153e:	46bd      	mov	sp, r7
 8011540:	bdb0      	pop	{r4, r5, r7, pc}
 8011542:	bf00      	nop
 8011544:	0801b8a8 	.word	0x0801b8a8
 8011548:	0801bd94 	.word	0x0801bd94
 801154c:	0801b948 	.word	0x0801b948
 8011550:	240108a8 	.word	0x240108a8
 8011554:	240108b8 	.word	0x240108b8
 8011558:	0801bdc4 	.word	0x0801bdc4
 801155c:	0801bdec 	.word	0x0801bdec

08011560 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011566:	4b2d      	ldr	r3, [pc, #180]	; (801161c <tcp_fasttmr+0xbc>)
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	3301      	adds	r3, #1
 801156c:	b2da      	uxtb	r2, r3
 801156e:	4b2b      	ldr	r3, [pc, #172]	; (801161c <tcp_fasttmr+0xbc>)
 8011570:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011572:	4b2b      	ldr	r3, [pc, #172]	; (8011620 <tcp_fasttmr+0xc0>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011578:	e048      	b.n	801160c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	7f9a      	ldrb	r2, [r3, #30]
 801157e:	4b27      	ldr	r3, [pc, #156]	; (801161c <tcp_fasttmr+0xbc>)
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	429a      	cmp	r2, r3
 8011584:	d03f      	beq.n	8011606 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011586:	4b25      	ldr	r3, [pc, #148]	; (801161c <tcp_fasttmr+0xbc>)
 8011588:	781a      	ldrb	r2, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	8b5b      	ldrh	r3, [r3, #26]
 8011592:	f003 0301 	and.w	r3, r3, #1
 8011596:	2b00      	cmp	r3, #0
 8011598:	d010      	beq.n	80115bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	8b5b      	ldrh	r3, [r3, #26]
 801159e:	f043 0302 	orr.w	r3, r3, #2
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f004 f805 	bl	80155b8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	8b5b      	ldrh	r3, [r3, #26]
 80115b2:	f023 0303 	bic.w	r3, r3, #3
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	8b5b      	ldrh	r3, [r3, #26]
 80115c0:	f003 0308 	and.w	r3, r3, #8
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d009      	beq.n	80115dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	8b5b      	ldrh	r3, [r3, #26]
 80115cc:	f023 0308 	bic.w	r3, r3, #8
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7ff f818 	bl	801060c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00a      	beq.n	8011600 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80115ea:	4b0e      	ldr	r3, [pc, #56]	; (8011624 <tcp_fasttmr+0xc4>)
 80115ec:	2200      	movs	r2, #0
 80115ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f819 	bl	8011628 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80115f6:	4b0b      	ldr	r3, [pc, #44]	; (8011624 <tcp_fasttmr+0xc4>)
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d000      	beq.n	8011600 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80115fe:	e7b8      	b.n	8011572 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	607b      	str	r3, [r7, #4]
 8011604:	e002      	b.n	801160c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	68db      	ldr	r3, [r3, #12]
 801160a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d1b3      	bne.n	801157a <tcp_fasttmr+0x1a>
    }
  }
}
 8011612:	bf00      	nop
 8011614:	bf00      	nop
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	240108be 	.word	0x240108be
 8011620:	240108b4 	.word	0x240108b4
 8011624:	240108bc 	.word	0x240108bc

08011628 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011628:	b590      	push	{r4, r7, lr}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d109      	bne.n	801164a <tcp_process_refused_data+0x22>
 8011636:	4b38      	ldr	r3, [pc, #224]	; (8011718 <tcp_process_refused_data+0xf0>)
 8011638:	f240 6209 	movw	r2, #1545	; 0x609
 801163c:	4937      	ldr	r1, [pc, #220]	; (801171c <tcp_process_refused_data+0xf4>)
 801163e:	4838      	ldr	r0, [pc, #224]	; (8011720 <tcp_process_refused_data+0xf8>)
 8011640:	f006 f9be 	bl	80179c0 <iprintf>
 8011644:	f06f 030f 	mvn.w	r3, #15
 8011648:	e061      	b.n	801170e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801164e:	7b5b      	ldrb	r3, [r3, #13]
 8011650:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011656:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00b      	beq.n	8011680 <tcp_process_refused_data+0x58>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6918      	ldr	r0, [r3, #16]
 8011672:	2300      	movs	r3, #0
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	6879      	ldr	r1, [r7, #4]
 8011678:	47a0      	blx	r4
 801167a:	4603      	mov	r3, r0
 801167c:	73fb      	strb	r3, [r7, #15]
 801167e:	e007      	b.n	8011690 <tcp_process_refused_data+0x68>
 8011680:	2300      	movs	r3, #0
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	6879      	ldr	r1, [r7, #4]
 8011686:	2000      	movs	r0, #0
 8011688:	f000 f8a6 	bl	80117d8 <tcp_recv_null>
 801168c:	4603      	mov	r3, r0
 801168e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d12b      	bne.n	80116f0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011698:	7bbb      	ldrb	r3, [r7, #14]
 801169a:	f003 0320 	and.w	r3, r3, #32
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d034      	beq.n	801170c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116a6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d005      	beq.n	80116ba <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116b2:	3301      	adds	r3, #1
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00b      	beq.n	80116dc <tcp_process_refused_data+0xb4>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6918      	ldr	r0, [r3, #16]
 80116ce:	2300      	movs	r3, #0
 80116d0:	2200      	movs	r2, #0
 80116d2:	6879      	ldr	r1, [r7, #4]
 80116d4:	47a0      	blx	r4
 80116d6:	4603      	mov	r3, r0
 80116d8:	73fb      	strb	r3, [r7, #15]
 80116da:	e001      	b.n	80116e0 <tcp_process_refused_data+0xb8>
 80116dc:	2300      	movs	r3, #0
 80116de:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80116e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116e4:	f113 0f0d 	cmn.w	r3, #13
 80116e8:	d110      	bne.n	801170c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80116ea:	f06f 030c 	mvn.w	r3, #12
 80116ee:	e00e      	b.n	801170e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80116f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116f4:	f113 0f0d 	cmn.w	r3, #13
 80116f8:	d102      	bne.n	8011700 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80116fa:	f06f 030c 	mvn.w	r3, #12
 80116fe:	e006      	b.n	801170e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	68ba      	ldr	r2, [r7, #8]
 8011704:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011706:	f06f 0304 	mvn.w	r3, #4
 801170a:	e000      	b.n	801170e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801170c:	2300      	movs	r3, #0
}
 801170e:	4618      	mov	r0, r3
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	bd90      	pop	{r4, r7, pc}
 8011716:	bf00      	nop
 8011718:	0801b8a8 	.word	0x0801b8a8
 801171c:	0801be14 	.word	0x0801be14
 8011720:	0801b948 	.word	0x0801b948

08011724 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801172c:	e007      	b.n	801173e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f80a 	bl	801174e <tcp_seg_free>
    seg = next;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d1f4      	bne.n	801172e <tcp_segs_free+0xa>
  }
}
 8011744:	bf00      	nop
 8011746:	bf00      	nop
 8011748:	3710      	adds	r7, #16
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801174e:	b580      	push	{r7, lr}
 8011750:	b082      	sub	sp, #8
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00c      	beq.n	8011776 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d004      	beq.n	801176e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	4618      	mov	r0, r3
 801176a:	f7fe f8b7 	bl	800f8dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801176e:	6879      	ldr	r1, [r7, #4]
 8011770:	2003      	movs	r0, #3
 8011772:	f7fd f9e5 	bl	800eb40 <memp_free>
  }
}
 8011776:	bf00      	nop
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
	...

08011780 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_seg_copy+0x1c>
 801178e:	4b0f      	ldr	r3, [pc, #60]	; (80117cc <tcp_seg_copy+0x4c>)
 8011790:	f240 6282 	movw	r2, #1666	; 0x682
 8011794:	490e      	ldr	r1, [pc, #56]	; (80117d0 <tcp_seg_copy+0x50>)
 8011796:	480f      	ldr	r0, [pc, #60]	; (80117d4 <tcp_seg_copy+0x54>)
 8011798:	f006 f912 	bl	80179c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801179c:	2003      	movs	r0, #3
 801179e:	f7fd f959 	bl	800ea54 <memp_malloc>
 80117a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d101      	bne.n	80117ae <tcp_seg_copy+0x2e>
    return NULL;
 80117aa:	2300      	movs	r3, #0
 80117ac:	e00a      	b.n	80117c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80117ae:	2210      	movs	r2, #16
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f006 f83f 	bl	8017836 <memcpy>
  pbuf_ref(cseg->p);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fe f933 	bl	800fa28 <pbuf_ref>
  return cseg;
 80117c2:	68fb      	ldr	r3, [r7, #12]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3710      	adds	r7, #16
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	0801b8a8 	.word	0x0801b8a8
 80117d0:	0801be58 	.word	0x0801be58
 80117d4:	0801b948 	.word	0x0801b948

080117d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
 80117e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d109      	bne.n	8011800 <tcp_recv_null+0x28>
 80117ec:	4b12      	ldr	r3, [pc, #72]	; (8011838 <tcp_recv_null+0x60>)
 80117ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80117f2:	4912      	ldr	r1, [pc, #72]	; (801183c <tcp_recv_null+0x64>)
 80117f4:	4812      	ldr	r0, [pc, #72]	; (8011840 <tcp_recv_null+0x68>)
 80117f6:	f006 f8e3 	bl	80179c0 <iprintf>
 80117fa:	f06f 030f 	mvn.w	r3, #15
 80117fe:	e016      	b.n	801182e <tcp_recv_null+0x56>

  if (p != NULL) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d009      	beq.n	801181a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	891b      	ldrh	r3, [r3, #8]
 801180a:	4619      	mov	r1, r3
 801180c:	68b8      	ldr	r0, [r7, #8]
 801180e:	f7ff f9b3 	bl	8010b78 <tcp_recved>
    pbuf_free(p);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7fe f862 	bl	800f8dc <pbuf_free>
 8011818:	e008      	b.n	801182c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801181a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d104      	bne.n	801182c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011822:	68b8      	ldr	r0, [r7, #8]
 8011824:	f7fe ff5c 	bl	80106e0 <tcp_close>
 8011828:	4603      	mov	r3, r0
 801182a:	e000      	b.n	801182e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801182c:	2300      	movs	r3, #0
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	0801b8a8 	.word	0x0801b8a8
 801183c:	0801be74 	.word	0x0801be74
 8011840:	0801b948 	.word	0x0801b948

08011844 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b086      	sub	sp, #24
 8011848:	af00      	add	r7, sp, #0
 801184a:	4603      	mov	r3, r0
 801184c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011852:	2b00      	cmp	r3, #0
 8011854:	db01      	blt.n	801185a <tcp_kill_prio+0x16>
 8011856:	79fb      	ldrb	r3, [r7, #7]
 8011858:	e000      	b.n	801185c <tcp_kill_prio+0x18>
 801185a:	237f      	movs	r3, #127	; 0x7f
 801185c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801185e:	7afb      	ldrb	r3, [r7, #11]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d034      	beq.n	80118ce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011864:	7afb      	ldrb	r3, [r7, #11]
 8011866:	3b01      	subs	r3, #1
 8011868:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801186e:	2300      	movs	r3, #0
 8011870:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011872:	4b19      	ldr	r3, [pc, #100]	; (80118d8 <tcp_kill_prio+0x94>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	617b      	str	r3, [r7, #20]
 8011878:	e01f      	b.n	80118ba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	7d5b      	ldrb	r3, [r3, #21]
 801187e:	7afa      	ldrb	r2, [r7, #11]
 8011880:	429a      	cmp	r2, r3
 8011882:	d80c      	bhi.n	801189e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011888:	7afa      	ldrb	r2, [r7, #11]
 801188a:	429a      	cmp	r2, r3
 801188c:	d112      	bne.n	80118b4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801188e:	4b13      	ldr	r3, [pc, #76]	; (80118dc <tcp_kill_prio+0x98>)
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	68fa      	ldr	r2, [r7, #12]
 801189a:	429a      	cmp	r2, r3
 801189c:	d80a      	bhi.n	80118b4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801189e:	4b0f      	ldr	r3, [pc, #60]	; (80118dc <tcp_kill_prio+0x98>)
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	1ad3      	subs	r3, r2, r3
 80118a8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	7d5b      	ldrb	r3, [r3, #21]
 80118b2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	617b      	str	r3, [r7, #20]
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1dc      	bne.n	801187a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d004      	beq.n	80118d0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80118c6:	6938      	ldr	r0, [r7, #16]
 80118c8:	f7ff f856 	bl	8010978 <tcp_abort>
 80118cc:	e000      	b.n	80118d0 <tcp_kill_prio+0x8c>
    return;
 80118ce:	bf00      	nop
  }
}
 80118d0:	3718      	adds	r7, #24
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	240108b4 	.word	0x240108b4
 80118dc:	240108a8 	.word	0x240108a8

080118e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b086      	sub	sp, #24
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	4603      	mov	r3, r0
 80118e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80118ea:	79fb      	ldrb	r3, [r7, #7]
 80118ec:	2b08      	cmp	r3, #8
 80118ee:	d009      	beq.n	8011904 <tcp_kill_state+0x24>
 80118f0:	79fb      	ldrb	r3, [r7, #7]
 80118f2:	2b09      	cmp	r3, #9
 80118f4:	d006      	beq.n	8011904 <tcp_kill_state+0x24>
 80118f6:	4b1a      	ldr	r3, [pc, #104]	; (8011960 <tcp_kill_state+0x80>)
 80118f8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80118fc:	4919      	ldr	r1, [pc, #100]	; (8011964 <tcp_kill_state+0x84>)
 80118fe:	481a      	ldr	r0, [pc, #104]	; (8011968 <tcp_kill_state+0x88>)
 8011900:	f006 f85e 	bl	80179c0 <iprintf>

  inactivity = 0;
 8011904:	2300      	movs	r3, #0
 8011906:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011908:	2300      	movs	r3, #0
 801190a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801190c:	4b17      	ldr	r3, [pc, #92]	; (801196c <tcp_kill_state+0x8c>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	617b      	str	r3, [r7, #20]
 8011912:	e017      	b.n	8011944 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	7d1b      	ldrb	r3, [r3, #20]
 8011918:	79fa      	ldrb	r2, [r7, #7]
 801191a:	429a      	cmp	r2, r3
 801191c:	d10f      	bne.n	801193e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801191e:	4b14      	ldr	r3, [pc, #80]	; (8011970 <tcp_kill_state+0x90>)
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	6a1b      	ldr	r3, [r3, #32]
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	429a      	cmp	r2, r3
 801192c:	d807      	bhi.n	801193e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801192e:	4b10      	ldr	r3, [pc, #64]	; (8011970 <tcp_kill_state+0x90>)
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	6a1b      	ldr	r3, [r3, #32]
 8011936:	1ad3      	subs	r3, r2, r3
 8011938:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	617b      	str	r3, [r7, #20]
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1e4      	bne.n	8011914 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d003      	beq.n	8011958 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011950:	2100      	movs	r1, #0
 8011952:	6938      	ldr	r0, [r7, #16]
 8011954:	f7fe ff50 	bl	80107f8 <tcp_abandon>
  }
}
 8011958:	bf00      	nop
 801195a:	3718      	adds	r7, #24
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	0801b8a8 	.word	0x0801b8a8
 8011964:	0801be90 	.word	0x0801be90
 8011968:	0801b948 	.word	0x0801b948
 801196c:	240108b4 	.word	0x240108b4
 8011970:	240108a8 	.word	0x240108a8

08011974 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801197e:	2300      	movs	r3, #0
 8011980:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011982:	4b12      	ldr	r3, [pc, #72]	; (80119cc <tcp_kill_timewait+0x58>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	60fb      	str	r3, [r7, #12]
 8011988:	e012      	b.n	80119b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801198a:	4b11      	ldr	r3, [pc, #68]	; (80119d0 <tcp_kill_timewait+0x5c>)
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	6a1b      	ldr	r3, [r3, #32]
 8011992:	1ad3      	subs	r3, r2, r3
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	429a      	cmp	r2, r3
 8011998:	d807      	bhi.n	80119aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801199a:	4b0d      	ldr	r3, [pc, #52]	; (80119d0 <tcp_kill_timewait+0x5c>)
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	60fb      	str	r3, [r7, #12]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1e9      	bne.n	801198a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80119bc:	68b8      	ldr	r0, [r7, #8]
 80119be:	f7fe ffdb 	bl	8010978 <tcp_abort>
  }
}
 80119c2:	bf00      	nop
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	240108b8 	.word	0x240108b8
 80119d0:	240108a8 	.word	0x240108a8

080119d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80119da:	4b10      	ldr	r3, [pc, #64]	; (8011a1c <tcp_handle_closepend+0x48>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80119e0:	e014      	b.n	8011a0c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	68db      	ldr	r3, [r3, #12]
 80119e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	8b5b      	ldrh	r3, [r3, #26]
 80119ec:	f003 0308 	and.w	r3, r3, #8
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	8b5b      	ldrh	r3, [r3, #26]
 80119f8:	f023 0308 	bic.w	r3, r3, #8
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7fe fe02 	bl	801060c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1e7      	bne.n	80119e2 <tcp_handle_closepend+0xe>
  }
}
 8011a12:	bf00      	nop
 8011a14:	bf00      	nop
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	240108b4 	.word	0x240108b4

08011a20 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	4603      	mov	r3, r0
 8011a28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8011a2a:	f7f4 f92b 	bl	8005c84 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a2e:	2001      	movs	r0, #1
 8011a30:	f7fd f810 	bl	800ea54 <memp_malloc>
 8011a34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d126      	bne.n	8011a8a <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011a3c:	f7ff ffca 	bl	80119d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011a40:	f7ff ff98 	bl	8011974 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a44:	2001      	movs	r0, #1
 8011a46:	f7fd f805 	bl	800ea54 <memp_malloc>
 8011a4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d11b      	bne.n	8011a8a <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011a52:	2009      	movs	r0, #9
 8011a54:	f7ff ff44 	bl	80118e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a58:	2001      	movs	r0, #1
 8011a5a:	f7fc fffb 	bl	800ea54 <memp_malloc>
 8011a5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d111      	bne.n	8011a8a <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011a66:	2008      	movs	r0, #8
 8011a68:	f7ff ff3a 	bl	80118e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a6c:	2001      	movs	r0, #1
 8011a6e:	f7fc fff1 	bl	800ea54 <memp_malloc>
 8011a72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d107      	bne.n	8011a8a <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011a7a:	79fb      	ldrb	r3, [r7, #7]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7ff fee1 	bl	8011844 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011a82:	2001      	movs	r0, #1
 8011a84:	f7fc ffe6 	bl	800ea54 <memp_malloc>
 8011a88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d03f      	beq.n	8011b10 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011a90:	229c      	movs	r2, #156	; 0x9c
 8011a92:	2100      	movs	r1, #0
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f005 fef6 	bl	8017886 <memset>
    pcb->prio = prio;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	79fa      	ldrb	r2, [r7, #7]
 8011a9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011aa6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	22ff      	movs	r2, #255	; 0xff
 8011abe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ac6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2206      	movs	r2, #6
 8011acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2206      	movs	r2, #6
 8011ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011adc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011ae6:	4b0d      	ldr	r3, [pc, #52]	; (8011b1c <tcp_alloc+0xfc>)
 8011ae8:	681a      	ldr	r2, [r3, #0]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011aee:	4b0c      	ldr	r3, [pc, #48]	; (8011b20 <tcp_alloc+0x100>)
 8011af0:	781a      	ldrb	r2, [r3, #0]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011afc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	4a08      	ldr	r2, [pc, #32]	; (8011b24 <tcp_alloc+0x104>)
 8011b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	4a07      	ldr	r2, [pc, #28]	; (8011b28 <tcp_alloc+0x108>)
 8011b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011b10:	68fb      	ldr	r3, [r7, #12]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	240108a8 	.word	0x240108a8
 8011b20:	240108be 	.word	0x240108be
 8011b24:	080117d9 	.word	0x080117d9
 8011b28:	006ddd00 	.word	0x006ddd00

08011b2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	4603      	mov	r3, r0
 8011b34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011b36:	2040      	movs	r0, #64	; 0x40
 8011b38:	f7ff ff72 	bl	8011a20 <tcp_alloc>
 8011b3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011b52:	f7f4 f897 	bl	8005c84 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d002      	beq.n	8011b62 <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	683a      	ldr	r2, [r7, #0]
 8011b60:	611a      	str	r2, [r3, #16]
  }
}
 8011b62:	bf00      	nop
 8011b64:	3708      	adds	r7, #8
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
	...

08011b6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011b76:	f7f4 f885 	bl	8005c84 <sys_check_core_locking>
  if (pcb != NULL) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d00e      	beq.n	8011b9e <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	7d1b      	ldrb	r3, [r3, #20]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d106      	bne.n	8011b96 <tcp_recv+0x2a>
 8011b88:	4b07      	ldr	r3, [pc, #28]	; (8011ba8 <tcp_recv+0x3c>)
 8011b8a:	f240 72df 	movw	r2, #2015	; 0x7df
 8011b8e:	4907      	ldr	r1, [pc, #28]	; (8011bac <tcp_recv+0x40>)
 8011b90:	4807      	ldr	r0, [pc, #28]	; (8011bb0 <tcp_recv+0x44>)
 8011b92:	f005 ff15 	bl	80179c0 <iprintf>
    pcb->recv = recv;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	683a      	ldr	r2, [r7, #0]
 8011b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8011b9e:	bf00      	nop
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	0801b8a8 	.word	0x0801b8a8
 8011bac:	0801bea0 	.word	0x0801bea0
 8011bb0:	0801b948 	.word	0x0801b948

08011bb4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011bbe:	f7f4 f861 	bl	8005c84 <sys_check_core_locking>
  if (pcb != NULL) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d00e      	beq.n	8011be6 <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	7d1b      	ldrb	r3, [r3, #20]
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d106      	bne.n	8011bde <tcp_sent+0x2a>
 8011bd0:	4b07      	ldr	r3, [pc, #28]	; (8011bf0 <tcp_sent+0x3c>)
 8011bd2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011bd6:	4907      	ldr	r1, [pc, #28]	; (8011bf4 <tcp_sent+0x40>)
 8011bd8:	4807      	ldr	r0, [pc, #28]	; (8011bf8 <tcp_sent+0x44>)
 8011bda:	f005 fef1 	bl	80179c0 <iprintf>
    pcb->sent = sent;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011be6:	bf00      	nop
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	0801b8a8 	.word	0x0801b8a8
 8011bf4:	0801bec8 	.word	0x0801bec8
 8011bf8:	0801b948 	.word	0x0801b948

08011bfc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011c06:	f7f4 f83d 	bl	8005c84 <sys_check_core_locking>
  if (pcb != NULL) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00e      	beq.n	8011c2e <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	7d1b      	ldrb	r3, [r3, #20]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d106      	bne.n	8011c26 <tcp_err+0x2a>
 8011c18:	4b07      	ldr	r3, [pc, #28]	; (8011c38 <tcp_err+0x3c>)
 8011c1a:	f640 020d 	movw	r2, #2061	; 0x80d
 8011c1e:	4907      	ldr	r1, [pc, #28]	; (8011c3c <tcp_err+0x40>)
 8011c20:	4807      	ldr	r0, [pc, #28]	; (8011c40 <tcp_err+0x44>)
 8011c22:	f005 fecd 	bl	80179c0 <iprintf>
    pcb->errf = err;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	683a      	ldr	r2, [r7, #0]
 8011c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011c2e:	bf00      	nop
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	0801b8a8 	.word	0x0801b8a8
 8011c3c:	0801bef0 	.word	0x0801bef0
 8011c40:	0801b948 	.word	0x0801b948

08011c44 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011c4e:	f7f4 f819 	bl	8005c84 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d008      	beq.n	8011c6a <tcp_accept+0x26>
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	7d1b      	ldrb	r3, [r3, #20]
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d104      	bne.n	8011c6a <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	683a      	ldr	r2, [r7, #0]
 8011c68:	619a      	str	r2, [r3, #24]
  }
}
 8011c6a:	bf00      	nop
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
	...

08011c74 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 8011c82:	f7f3 ffff 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d107      	bne.n	8011c9c <tcp_poll+0x28>
 8011c8c:	4b0e      	ldr	r3, [pc, #56]	; (8011cc8 <tcp_poll+0x54>)
 8011c8e:	f640 023d 	movw	r2, #2109	; 0x83d
 8011c92:	490e      	ldr	r1, [pc, #56]	; (8011ccc <tcp_poll+0x58>)
 8011c94:	480e      	ldr	r0, [pc, #56]	; (8011cd0 <tcp_poll+0x5c>)
 8011c96:	f005 fe93 	bl	80179c0 <iprintf>
 8011c9a:	e011      	b.n	8011cc0 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	7d1b      	ldrb	r3, [r3, #20]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d106      	bne.n	8011cb2 <tcp_poll+0x3e>
 8011ca4:	4b08      	ldr	r3, [pc, #32]	; (8011cc8 <tcp_poll+0x54>)
 8011ca6:	f640 023e 	movw	r2, #2110	; 0x83e
 8011caa:	490a      	ldr	r1, [pc, #40]	; (8011cd4 <tcp_poll+0x60>)
 8011cac:	4808      	ldr	r0, [pc, #32]	; (8011cd0 <tcp_poll+0x5c>)
 8011cae:	f005 fe87 	bl	80179c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	68ba      	ldr	r2, [r7, #8]
 8011cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	79fa      	ldrb	r2, [r7, #7]
 8011cbe:	775a      	strb	r2, [r3, #29]
}
 8011cc0:	3710      	adds	r7, #16
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	0801b8a8 	.word	0x0801b8a8
 8011ccc:	0801bf18 	.word	0x0801bf18
 8011cd0:	0801b948 	.word	0x0801b948
 8011cd4:	0801bf30 	.word	0x0801bf30

08011cd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d107      	bne.n	8011cf6 <tcp_pcb_purge+0x1e>
 8011ce6:	4b21      	ldr	r3, [pc, #132]	; (8011d6c <tcp_pcb_purge+0x94>)
 8011ce8:	f640 0251 	movw	r2, #2129	; 0x851
 8011cec:	4920      	ldr	r1, [pc, #128]	; (8011d70 <tcp_pcb_purge+0x98>)
 8011cee:	4821      	ldr	r0, [pc, #132]	; (8011d74 <tcp_pcb_purge+0x9c>)
 8011cf0:	f005 fe66 	bl	80179c0 <iprintf>
 8011cf4:	e037      	b.n	8011d66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	7d1b      	ldrb	r3, [r3, #20]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d033      	beq.n	8011d66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011d02:	2b0a      	cmp	r3, #10
 8011d04:	d02f      	beq.n	8011d66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d02b      	beq.n	8011d66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d007      	beq.n	8011d26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7fd fdde 	bl	800f8dc <pbuf_free>
      pcb->refused_data = NULL;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2200      	movs	r2, #0
 8011d24:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d002      	beq.n	8011d34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 f986 	bl	8012040 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d3a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ff fcef 	bl	8011724 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff fcea 	bl	8011724 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	0801b8a8 	.word	0x0801b8a8
 8011d70:	0801bf50 	.word	0x0801bf50
 8011d74:	0801b948 	.word	0x0801b948

08011d78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <tcp_pcb_remove+0x1e>
 8011d88:	4b3e      	ldr	r3, [pc, #248]	; (8011e84 <tcp_pcb_remove+0x10c>)
 8011d8a:	f640 0283 	movw	r2, #2179	; 0x883
 8011d8e:	493e      	ldr	r1, [pc, #248]	; (8011e88 <tcp_pcb_remove+0x110>)
 8011d90:	483e      	ldr	r0, [pc, #248]	; (8011e8c <tcp_pcb_remove+0x114>)
 8011d92:	f005 fe15 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d106      	bne.n	8011daa <tcp_pcb_remove+0x32>
 8011d9c:	4b39      	ldr	r3, [pc, #228]	; (8011e84 <tcp_pcb_remove+0x10c>)
 8011d9e:	f640 0284 	movw	r2, #2180	; 0x884
 8011da2:	493b      	ldr	r1, [pc, #236]	; (8011e90 <tcp_pcb_remove+0x118>)
 8011da4:	4839      	ldr	r0, [pc, #228]	; (8011e8c <tcp_pcb_remove+0x114>)
 8011da6:	f005 fe0b 	bl	80179c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	683a      	ldr	r2, [r7, #0]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d105      	bne.n	8011dc0 <tcp_pcb_remove+0x48>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68da      	ldr	r2, [r3, #12]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	e013      	b.n	8011de8 <tcp_pcb_remove+0x70>
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60fb      	str	r3, [r7, #12]
 8011dc6:	e00c      	b.n	8011de2 <tcp_pcb_remove+0x6a>
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d104      	bne.n	8011ddc <tcp_pcb_remove+0x64>
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	68da      	ldr	r2, [r3, #12]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	60da      	str	r2, [r3, #12]
 8011dda:	e005      	b.n	8011de8 <tcp_pcb_remove+0x70>
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	60fb      	str	r3, [r7, #12]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d1ef      	bne.n	8011dc8 <tcp_pcb_remove+0x50>
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	2200      	movs	r2, #0
 8011dec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011dee:	6838      	ldr	r0, [r7, #0]
 8011df0:	f7ff ff72 	bl	8011cd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	7d1b      	ldrb	r3, [r3, #20]
 8011df8:	2b0a      	cmp	r3, #10
 8011dfa:	d013      	beq.n	8011e24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d00f      	beq.n	8011e24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	8b5b      	ldrh	r3, [r3, #26]
 8011e08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d009      	beq.n	8011e24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	8b5b      	ldrh	r3, [r3, #26]
 8011e14:	f043 0302 	orr.w	r3, r3, #2
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e1e:	6838      	ldr	r0, [r7, #0]
 8011e20:	f003 fbca 	bl	80155b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	7d1b      	ldrb	r3, [r3, #20]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d020      	beq.n	8011e6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d006      	beq.n	8011e42 <tcp_pcb_remove+0xca>
 8011e34:	4b13      	ldr	r3, [pc, #76]	; (8011e84 <tcp_pcb_remove+0x10c>)
 8011e36:	f640 0293 	movw	r2, #2195	; 0x893
 8011e3a:	4916      	ldr	r1, [pc, #88]	; (8011e94 <tcp_pcb_remove+0x11c>)
 8011e3c:	4813      	ldr	r0, [pc, #76]	; (8011e8c <tcp_pcb_remove+0x114>)
 8011e3e:	f005 fdbf 	bl	80179c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d006      	beq.n	8011e58 <tcp_pcb_remove+0xe0>
 8011e4a:	4b0e      	ldr	r3, [pc, #56]	; (8011e84 <tcp_pcb_remove+0x10c>)
 8011e4c:	f640 0294 	movw	r2, #2196	; 0x894
 8011e50:	4911      	ldr	r1, [pc, #68]	; (8011e98 <tcp_pcb_remove+0x120>)
 8011e52:	480e      	ldr	r0, [pc, #56]	; (8011e8c <tcp_pcb_remove+0x114>)
 8011e54:	f005 fdb4 	bl	80179c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d006      	beq.n	8011e6e <tcp_pcb_remove+0xf6>
 8011e60:	4b08      	ldr	r3, [pc, #32]	; (8011e84 <tcp_pcb_remove+0x10c>)
 8011e62:	f640 0296 	movw	r2, #2198	; 0x896
 8011e66:	490d      	ldr	r1, [pc, #52]	; (8011e9c <tcp_pcb_remove+0x124>)
 8011e68:	4808      	ldr	r0, [pc, #32]	; (8011e8c <tcp_pcb_remove+0x114>)
 8011e6a:	f005 fda9 	bl	80179c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2200      	movs	r2, #0
 8011e72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	2200      	movs	r2, #0
 8011e78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011e7a:	bf00      	nop
 8011e7c:	3710      	adds	r7, #16
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	0801b8a8 	.word	0x0801b8a8
 8011e88:	0801bf6c 	.word	0x0801bf6c
 8011e8c:	0801b948 	.word	0x0801b948
 8011e90:	0801bf88 	.word	0x0801bf88
 8011e94:	0801bfa8 	.word	0x0801bfa8
 8011e98:	0801bfc0 	.word	0x0801bfc0
 8011e9c:	0801bfdc 	.word	0x0801bfdc

08011ea0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d106      	bne.n	8011ebc <tcp_next_iss+0x1c>
 8011eae:	4b0a      	ldr	r3, [pc, #40]	; (8011ed8 <tcp_next_iss+0x38>)
 8011eb0:	f640 02af 	movw	r2, #2223	; 0x8af
 8011eb4:	4909      	ldr	r1, [pc, #36]	; (8011edc <tcp_next_iss+0x3c>)
 8011eb6:	480a      	ldr	r0, [pc, #40]	; (8011ee0 <tcp_next_iss+0x40>)
 8011eb8:	f005 fd82 	bl	80179c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011ebc:	4b09      	ldr	r3, [pc, #36]	; (8011ee4 <tcp_next_iss+0x44>)
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	4b09      	ldr	r3, [pc, #36]	; (8011ee8 <tcp_next_iss+0x48>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	4a07      	ldr	r2, [pc, #28]	; (8011ee4 <tcp_next_iss+0x44>)
 8011ec8:	6013      	str	r3, [r2, #0]
  return iss;
 8011eca:	4b06      	ldr	r3, [pc, #24]	; (8011ee4 <tcp_next_iss+0x44>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3708      	adds	r7, #8
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	bf00      	nop
 8011ed8:	0801b8a8 	.word	0x0801b8a8
 8011edc:	0801bff4 	.word	0x0801bff4
 8011ee0:	0801b948 	.word	0x0801b948
 8011ee4:	24000040 	.word	0x24000040
 8011ee8:	240108a8 	.word	0x240108a8

08011eec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
 8011ef8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d106      	bne.n	8011f0e <tcp_eff_send_mss_netif+0x22>
 8011f00:	4b14      	ldr	r3, [pc, #80]	; (8011f54 <tcp_eff_send_mss_netif+0x68>)
 8011f02:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011f06:	4914      	ldr	r1, [pc, #80]	; (8011f58 <tcp_eff_send_mss_netif+0x6c>)
 8011f08:	4814      	ldr	r0, [pc, #80]	; (8011f5c <tcp_eff_send_mss_netif+0x70>)
 8011f0a:	f005 fd59 	bl	80179c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d101      	bne.n	8011f18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011f14:	89fb      	ldrh	r3, [r7, #14]
 8011f16:	e019      	b.n	8011f4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011f1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011f1e:	8afb      	ldrh	r3, [r7, #22]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d012      	beq.n	8011f4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011f24:	2328      	movs	r3, #40	; 0x28
 8011f26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011f28:	8afa      	ldrh	r2, [r7, #22]
 8011f2a:	8abb      	ldrh	r3, [r7, #20]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d904      	bls.n	8011f3a <tcp_eff_send_mss_netif+0x4e>
 8011f30:	8afa      	ldrh	r2, [r7, #22]
 8011f32:	8abb      	ldrh	r3, [r7, #20]
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	e000      	b.n	8011f3c <tcp_eff_send_mss_netif+0x50>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011f3e:	8a7a      	ldrh	r2, [r7, #18]
 8011f40:	89fb      	ldrh	r3, [r7, #14]
 8011f42:	4293      	cmp	r3, r2
 8011f44:	bf28      	it	cs
 8011f46:	4613      	movcs	r3, r2
 8011f48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3718      	adds	r7, #24
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0801b8a8 	.word	0x0801b8a8
 8011f58:	0801c010 	.word	0x0801c010
 8011f5c:	0801b948 	.word	0x0801b948

08011f60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d119      	bne.n	8011fa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011f74:	4b10      	ldr	r3, [pc, #64]	; (8011fb8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011f76:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011f7a:	4910      	ldr	r1, [pc, #64]	; (8011fbc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011f7c:	4810      	ldr	r0, [pc, #64]	; (8011fc0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011f7e:	f005 fd1f 	bl	80179c0 <iprintf>

  while (pcb != NULL) {
 8011f82:	e011      	b.n	8011fa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d108      	bne.n	8011fa2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f7fe fcee 	bl	8010978 <tcp_abort>
      pcb = next;
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	60fb      	str	r3, [r7, #12]
 8011fa0:	e002      	b.n	8011fa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d1ea      	bne.n	8011f84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011fae:	bf00      	nop
 8011fb0:	bf00      	nop
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	0801b8a8 	.word	0x0801b8a8
 8011fbc:	0801c038 	.word	0x0801c038
 8011fc0:	0801b948 	.word	0x0801b948

08011fc4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d02a      	beq.n	801202a <tcp_netif_ip_addr_changed+0x66>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d026      	beq.n	801202a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011fdc:	4b15      	ldr	r3, [pc, #84]	; (8012034 <tcp_netif_ip_addr_changed+0x70>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f7ff ffbc 	bl	8011f60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011fe8:	4b13      	ldr	r3, [pc, #76]	; (8012038 <tcp_netif_ip_addr_changed+0x74>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4619      	mov	r1, r3
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f7ff ffb6 	bl	8011f60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d017      	beq.n	801202a <tcp_netif_ip_addr_changed+0x66>
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d013      	beq.n	801202a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012002:	4b0e      	ldr	r3, [pc, #56]	; (801203c <tcp_netif_ip_addr_changed+0x78>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	60fb      	str	r3, [r7, #12]
 8012008:	e00c      	b.n	8012024 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	429a      	cmp	r2, r3
 8012014:	d103      	bne.n	801201e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	60fb      	str	r3, [r7, #12]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d1ef      	bne.n	801200a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801202a:	bf00      	nop
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	240108b4 	.word	0x240108b4
 8012038:	240108ac 	.word	0x240108ac
 801203c:	240108b0 	.word	0x240108b0

08012040 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801204c:	2b00      	cmp	r3, #0
 801204e:	d007      	beq.n	8012060 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012054:	4618      	mov	r0, r3
 8012056:	f7ff fb65 	bl	8011724 <tcp_segs_free>
    pcb->ooseq = NULL;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012060:	bf00      	nop
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012068:	b590      	push	{r4, r7, lr}
 801206a:	b08d      	sub	sp, #52	; 0x34
 801206c:	af04      	add	r7, sp, #16
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 8012072:	f7f3 fe07 	bl	8005c84 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d105      	bne.n	8012088 <tcp_input+0x20>
 801207c:	4b9b      	ldr	r3, [pc, #620]	; (80122ec <tcp_input+0x284>)
 801207e:	2283      	movs	r2, #131	; 0x83
 8012080:	499b      	ldr	r1, [pc, #620]	; (80122f0 <tcp_input+0x288>)
 8012082:	489c      	ldr	r0, [pc, #624]	; (80122f4 <tcp_input+0x28c>)
 8012084:	f005 fc9c 	bl	80179c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	4a9a      	ldr	r2, [pc, #616]	; (80122f8 <tcp_input+0x290>)
 801208e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	895b      	ldrh	r3, [r3, #10]
 8012094:	2b13      	cmp	r3, #19
 8012096:	f240 83d1 	bls.w	801283c <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801209a:	4b98      	ldr	r3, [pc, #608]	; (80122fc <tcp_input+0x294>)
 801209c:	695b      	ldr	r3, [r3, #20]
 801209e:	4a97      	ldr	r2, [pc, #604]	; (80122fc <tcp_input+0x294>)
 80120a0:	6812      	ldr	r2, [r2, #0]
 80120a2:	4611      	mov	r1, r2
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fb f9d9 	bl	800d45c <ip4_addr_isbroadcast_u32>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f040 83c7 	bne.w	8012840 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80120b2:	4b92      	ldr	r3, [pc, #584]	; (80122fc <tcp_input+0x294>)
 80120b4:	695b      	ldr	r3, [r3, #20]
 80120b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80120ba:	2be0      	cmp	r3, #224	; 0xe0
 80120bc:	f000 83c0 	beq.w	8012840 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80120c0:	4b8d      	ldr	r3, [pc, #564]	; (80122f8 <tcp_input+0x290>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	899b      	ldrh	r3, [r3, #12]
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7f9 fc4d 	bl	800b968 <lwip_htons>
 80120ce:	4603      	mov	r3, r0
 80120d0:	0b1b      	lsrs	r3, r3, #12
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	009b      	lsls	r3, r3, #2
 80120d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80120da:	7cbb      	ldrb	r3, [r7, #18]
 80120dc:	2b13      	cmp	r3, #19
 80120de:	f240 83b1 	bls.w	8012844 <tcp_input+0x7dc>
 80120e2:	7cbb      	ldrb	r3, [r7, #18]
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	891b      	ldrh	r3, [r3, #8]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	f200 83aa 	bhi.w	8012844 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80120f0:	7cbb      	ldrb	r3, [r7, #18]
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	3b14      	subs	r3, #20
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	4b81      	ldr	r3, [pc, #516]	; (8012300 <tcp_input+0x298>)
 80120fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80120fc:	4b81      	ldr	r3, [pc, #516]	; (8012304 <tcp_input+0x29c>)
 80120fe:	2200      	movs	r2, #0
 8012100:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	895a      	ldrh	r2, [r3, #10]
 8012106:	7cbb      	ldrb	r3, [r7, #18]
 8012108:	b29b      	uxth	r3, r3
 801210a:	429a      	cmp	r2, r3
 801210c:	d309      	bcc.n	8012122 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801210e:	4b7c      	ldr	r3, [pc, #496]	; (8012300 <tcp_input+0x298>)
 8012110:	881a      	ldrh	r2, [r3, #0]
 8012112:	4b7d      	ldr	r3, [pc, #500]	; (8012308 <tcp_input+0x2a0>)
 8012114:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012116:	7cbb      	ldrb	r3, [r7, #18]
 8012118:	4619      	mov	r1, r3
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7fd fb58 	bl	800f7d0 <pbuf_remove_header>
 8012120:	e04e      	b.n	80121c0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d105      	bne.n	8012136 <tcp_input+0xce>
 801212a:	4b70      	ldr	r3, [pc, #448]	; (80122ec <tcp_input+0x284>)
 801212c:	22c2      	movs	r2, #194	; 0xc2
 801212e:	4977      	ldr	r1, [pc, #476]	; (801230c <tcp_input+0x2a4>)
 8012130:	4870      	ldr	r0, [pc, #448]	; (80122f4 <tcp_input+0x28c>)
 8012132:	f005 fc45 	bl	80179c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012136:	2114      	movs	r1, #20
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7fd fb49 	bl	800f7d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	895a      	ldrh	r2, [r3, #10]
 8012142:	4b71      	ldr	r3, [pc, #452]	; (8012308 <tcp_input+0x2a0>)
 8012144:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012146:	4b6e      	ldr	r3, [pc, #440]	; (8012300 <tcp_input+0x298>)
 8012148:	881a      	ldrh	r2, [r3, #0]
 801214a:	4b6f      	ldr	r3, [pc, #444]	; (8012308 <tcp_input+0x2a0>)
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012152:	4b6d      	ldr	r3, [pc, #436]	; (8012308 <tcp_input+0x2a0>)
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	4619      	mov	r1, r3
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7fd fb39 	bl	800f7d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	895b      	ldrh	r3, [r3, #10]
 8012164:	8a3a      	ldrh	r2, [r7, #16]
 8012166:	429a      	cmp	r2, r3
 8012168:	f200 836e 	bhi.w	8012848 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	4a64      	ldr	r2, [pc, #400]	; (8012304 <tcp_input+0x29c>)
 8012174:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	8a3a      	ldrh	r2, [r7, #16]
 801217c:	4611      	mov	r1, r2
 801217e:	4618      	mov	r0, r3
 8012180:	f7fd fb26 	bl	800f7d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	891a      	ldrh	r2, [r3, #8]
 8012188:	8a3b      	ldrh	r3, [r7, #16]
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	895b      	ldrh	r3, [r3, #10]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d005      	beq.n	80121a6 <tcp_input+0x13e>
 801219a:	4b54      	ldr	r3, [pc, #336]	; (80122ec <tcp_input+0x284>)
 801219c:	22df      	movs	r2, #223	; 0xdf
 801219e:	495c      	ldr	r1, [pc, #368]	; (8012310 <tcp_input+0x2a8>)
 80121a0:	4854      	ldr	r0, [pc, #336]	; (80122f4 <tcp_input+0x28c>)
 80121a2:	f005 fc0d 	bl	80179c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	891a      	ldrh	r2, [r3, #8]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	891b      	ldrh	r3, [r3, #8]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d005      	beq.n	80121c0 <tcp_input+0x158>
 80121b4:	4b4d      	ldr	r3, [pc, #308]	; (80122ec <tcp_input+0x284>)
 80121b6:	22e0      	movs	r2, #224	; 0xe0
 80121b8:	4956      	ldr	r1, [pc, #344]	; (8012314 <tcp_input+0x2ac>)
 80121ba:	484e      	ldr	r0, [pc, #312]	; (80122f4 <tcp_input+0x28c>)
 80121bc:	f005 fc00 	bl	80179c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80121c0:	4b4d      	ldr	r3, [pc, #308]	; (80122f8 <tcp_input+0x290>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4a4b      	ldr	r2, [pc, #300]	; (80122f8 <tcp_input+0x290>)
 80121ca:	6814      	ldr	r4, [r2, #0]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7f9 fbcb 	bl	800b968 <lwip_htons>
 80121d2:	4603      	mov	r3, r0
 80121d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80121d6:	4b48      	ldr	r3, [pc, #288]	; (80122f8 <tcp_input+0x290>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	885b      	ldrh	r3, [r3, #2]
 80121dc:	b29b      	uxth	r3, r3
 80121de:	4a46      	ldr	r2, [pc, #280]	; (80122f8 <tcp_input+0x290>)
 80121e0:	6814      	ldr	r4, [r2, #0]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7f9 fbc0 	bl	800b968 <lwip_htons>
 80121e8:	4603      	mov	r3, r0
 80121ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80121ec:	4b42      	ldr	r3, [pc, #264]	; (80122f8 <tcp_input+0x290>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	4a41      	ldr	r2, [pc, #260]	; (80122f8 <tcp_input+0x290>)
 80121f4:	6814      	ldr	r4, [r2, #0]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7f9 fbcb 	bl	800b992 <lwip_htonl>
 80121fc:	4603      	mov	r3, r0
 80121fe:	6063      	str	r3, [r4, #4]
 8012200:	6863      	ldr	r3, [r4, #4]
 8012202:	4a45      	ldr	r2, [pc, #276]	; (8012318 <tcp_input+0x2b0>)
 8012204:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012206:	4b3c      	ldr	r3, [pc, #240]	; (80122f8 <tcp_input+0x290>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	4a3a      	ldr	r2, [pc, #232]	; (80122f8 <tcp_input+0x290>)
 801220e:	6814      	ldr	r4, [r2, #0]
 8012210:	4618      	mov	r0, r3
 8012212:	f7f9 fbbe 	bl	800b992 <lwip_htonl>
 8012216:	4603      	mov	r3, r0
 8012218:	60a3      	str	r3, [r4, #8]
 801221a:	68a3      	ldr	r3, [r4, #8]
 801221c:	4a3f      	ldr	r2, [pc, #252]	; (801231c <tcp_input+0x2b4>)
 801221e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012220:	4b35      	ldr	r3, [pc, #212]	; (80122f8 <tcp_input+0x290>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	89db      	ldrh	r3, [r3, #14]
 8012226:	b29b      	uxth	r3, r3
 8012228:	4a33      	ldr	r2, [pc, #204]	; (80122f8 <tcp_input+0x290>)
 801222a:	6814      	ldr	r4, [r2, #0]
 801222c:	4618      	mov	r0, r3
 801222e:	f7f9 fb9b 	bl	800b968 <lwip_htons>
 8012232:	4603      	mov	r3, r0
 8012234:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012236:	4b30      	ldr	r3, [pc, #192]	; (80122f8 <tcp_input+0x290>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	899b      	ldrh	r3, [r3, #12]
 801223c:	b29b      	uxth	r3, r3
 801223e:	4618      	mov	r0, r3
 8012240:	f7f9 fb92 	bl	800b968 <lwip_htons>
 8012244:	4603      	mov	r3, r0
 8012246:	b2db      	uxtb	r3, r3
 8012248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801224c:	b2da      	uxtb	r2, r3
 801224e:	4b34      	ldr	r3, [pc, #208]	; (8012320 <tcp_input+0x2b8>)
 8012250:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	891a      	ldrh	r2, [r3, #8]
 8012256:	4b33      	ldr	r3, [pc, #204]	; (8012324 <tcp_input+0x2bc>)
 8012258:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801225a:	4b31      	ldr	r3, [pc, #196]	; (8012320 <tcp_input+0x2b8>)
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	f003 0303 	and.w	r3, r3, #3
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00c      	beq.n	8012280 <tcp_input+0x218>
    tcplen++;
 8012266:	4b2f      	ldr	r3, [pc, #188]	; (8012324 <tcp_input+0x2bc>)
 8012268:	881b      	ldrh	r3, [r3, #0]
 801226a:	3301      	adds	r3, #1
 801226c:	b29a      	uxth	r2, r3
 801226e:	4b2d      	ldr	r3, [pc, #180]	; (8012324 <tcp_input+0x2bc>)
 8012270:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	891a      	ldrh	r2, [r3, #8]
 8012276:	4b2b      	ldr	r3, [pc, #172]	; (8012324 <tcp_input+0x2bc>)
 8012278:	881b      	ldrh	r3, [r3, #0]
 801227a:	429a      	cmp	r2, r3
 801227c:	f200 82e6 	bhi.w	801284c <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012280:	2300      	movs	r3, #0
 8012282:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012284:	4b28      	ldr	r3, [pc, #160]	; (8012328 <tcp_input+0x2c0>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	61fb      	str	r3, [r7, #28]
 801228a:	e09d      	b.n	80123c8 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	7d1b      	ldrb	r3, [r3, #20]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d105      	bne.n	80122a0 <tcp_input+0x238>
 8012294:	4b15      	ldr	r3, [pc, #84]	; (80122ec <tcp_input+0x284>)
 8012296:	22fb      	movs	r2, #251	; 0xfb
 8012298:	4924      	ldr	r1, [pc, #144]	; (801232c <tcp_input+0x2c4>)
 801229a:	4816      	ldr	r0, [pc, #88]	; (80122f4 <tcp_input+0x28c>)
 801229c:	f005 fb90 	bl	80179c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	7d1b      	ldrb	r3, [r3, #20]
 80122a4:	2b0a      	cmp	r3, #10
 80122a6:	d105      	bne.n	80122b4 <tcp_input+0x24c>
 80122a8:	4b10      	ldr	r3, [pc, #64]	; (80122ec <tcp_input+0x284>)
 80122aa:	22fc      	movs	r2, #252	; 0xfc
 80122ac:	4920      	ldr	r1, [pc, #128]	; (8012330 <tcp_input+0x2c8>)
 80122ae:	4811      	ldr	r0, [pc, #68]	; (80122f4 <tcp_input+0x28c>)
 80122b0:	f005 fb86 	bl	80179c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	7d1b      	ldrb	r3, [r3, #20]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d105      	bne.n	80122c8 <tcp_input+0x260>
 80122bc:	4b0b      	ldr	r3, [pc, #44]	; (80122ec <tcp_input+0x284>)
 80122be:	22fd      	movs	r2, #253	; 0xfd
 80122c0:	491c      	ldr	r1, [pc, #112]	; (8012334 <tcp_input+0x2cc>)
 80122c2:	480c      	ldr	r0, [pc, #48]	; (80122f4 <tcp_input+0x28c>)
 80122c4:	f005 fb7c 	bl	80179c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	7a1b      	ldrb	r3, [r3, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d033      	beq.n	8012338 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	7a1a      	ldrb	r2, [r3, #8]
 80122d4:	4b09      	ldr	r3, [pc, #36]	; (80122fc <tcp_input+0x294>)
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122dc:	3301      	adds	r3, #1
 80122de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d029      	beq.n	8012338 <tcp_input+0x2d0>
      prev = pcb;
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	61bb      	str	r3, [r7, #24]
      continue;
 80122e8:	e06b      	b.n	80123c2 <tcp_input+0x35a>
 80122ea:	bf00      	nop
 80122ec:	0801c06c 	.word	0x0801c06c
 80122f0:	0801c0fc 	.word	0x0801c0fc
 80122f4:	0801c114 	.word	0x0801c114
 80122f8:	240108d0 	.word	0x240108d0
 80122fc:	24009dd8 	.word	0x24009dd8
 8012300:	240108d4 	.word	0x240108d4
 8012304:	240108d8 	.word	0x240108d8
 8012308:	240108d6 	.word	0x240108d6
 801230c:	0801c13c 	.word	0x0801c13c
 8012310:	0801c14c 	.word	0x0801c14c
 8012314:	0801c158 	.word	0x0801c158
 8012318:	240108e0 	.word	0x240108e0
 801231c:	240108e4 	.word	0x240108e4
 8012320:	240108ec 	.word	0x240108ec
 8012324:	240108ea 	.word	0x240108ea
 8012328:	240108b4 	.word	0x240108b4
 801232c:	0801c178 	.word	0x0801c178
 8012330:	0801c1a0 	.word	0x0801c1a0
 8012334:	0801c1cc 	.word	0x0801c1cc
    }

    if (pcb->remote_port == tcphdr->src &&
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	8b1a      	ldrh	r2, [r3, #24]
 801233c:	4b72      	ldr	r3, [pc, #456]	; (8012508 <tcp_input+0x4a0>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	881b      	ldrh	r3, [r3, #0]
 8012342:	b29b      	uxth	r3, r3
 8012344:	429a      	cmp	r2, r3
 8012346:	d13a      	bne.n	80123be <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	8ada      	ldrh	r2, [r3, #22]
 801234c:	4b6e      	ldr	r3, [pc, #440]	; (8012508 <tcp_input+0x4a0>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	885b      	ldrh	r3, [r3, #2]
 8012352:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012354:	429a      	cmp	r2, r3
 8012356:	d132      	bne.n	80123be <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	685a      	ldr	r2, [r3, #4]
 801235c:	4b6b      	ldr	r3, [pc, #428]	; (801250c <tcp_input+0x4a4>)
 801235e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012360:	429a      	cmp	r2, r3
 8012362:	d12c      	bne.n	80123be <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	681a      	ldr	r2, [r3, #0]
 8012368:	4b68      	ldr	r3, [pc, #416]	; (801250c <tcp_input+0x4a4>)
 801236a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801236c:	429a      	cmp	r2, r3
 801236e:	d126      	bne.n	80123be <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	69fa      	ldr	r2, [r7, #28]
 8012376:	429a      	cmp	r2, r3
 8012378:	d106      	bne.n	8012388 <tcp_input+0x320>
 801237a:	4b65      	ldr	r3, [pc, #404]	; (8012510 <tcp_input+0x4a8>)
 801237c:	f240 120d 	movw	r2, #269	; 0x10d
 8012380:	4964      	ldr	r1, [pc, #400]	; (8012514 <tcp_input+0x4ac>)
 8012382:	4865      	ldr	r0, [pc, #404]	; (8012518 <tcp_input+0x4b0>)
 8012384:	f005 fb1c 	bl	80179c0 <iprintf>
      if (prev != NULL) {
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d00a      	beq.n	80123a4 <tcp_input+0x33c>
        prev->next = pcb->next;
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	68da      	ldr	r2, [r3, #12]
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012396:	4b61      	ldr	r3, [pc, #388]	; (801251c <tcp_input+0x4b4>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801239e:	4a5f      	ldr	r2, [pc, #380]	; (801251c <tcp_input+0x4b4>)
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	68db      	ldr	r3, [r3, #12]
 80123a8:	69fa      	ldr	r2, [r7, #28]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d111      	bne.n	80123d2 <tcp_input+0x36a>
 80123ae:	4b58      	ldr	r3, [pc, #352]	; (8012510 <tcp_input+0x4a8>)
 80123b0:	f240 1215 	movw	r2, #277	; 0x115
 80123b4:	495a      	ldr	r1, [pc, #360]	; (8012520 <tcp_input+0x4b8>)
 80123b6:	4858      	ldr	r0, [pc, #352]	; (8012518 <tcp_input+0x4b0>)
 80123b8:	f005 fb02 	bl	80179c0 <iprintf>
      break;
 80123bc:	e009      	b.n	80123d2 <tcp_input+0x36a>
    }
    prev = pcb;
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	61fb      	str	r3, [r7, #28]
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	f47f af5e 	bne.w	801228c <tcp_input+0x224>
 80123d0:	e000      	b.n	80123d4 <tcp_input+0x36c>
      break;
 80123d2:	bf00      	nop
  }

  if (pcb == NULL) {
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f040 80aa 	bne.w	8012530 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80123dc:	4b51      	ldr	r3, [pc, #324]	; (8012524 <tcp_input+0x4bc>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	61fb      	str	r3, [r7, #28]
 80123e2:	e03f      	b.n	8012464 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	7d1b      	ldrb	r3, [r3, #20]
 80123e8:	2b0a      	cmp	r3, #10
 80123ea:	d006      	beq.n	80123fa <tcp_input+0x392>
 80123ec:	4b48      	ldr	r3, [pc, #288]	; (8012510 <tcp_input+0x4a8>)
 80123ee:	f240 121f 	movw	r2, #287	; 0x11f
 80123f2:	494d      	ldr	r1, [pc, #308]	; (8012528 <tcp_input+0x4c0>)
 80123f4:	4848      	ldr	r0, [pc, #288]	; (8012518 <tcp_input+0x4b0>)
 80123f6:	f005 fae3 	bl	80179c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	7a1b      	ldrb	r3, [r3, #8]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d009      	beq.n	8012416 <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	7a1a      	ldrb	r2, [r3, #8]
 8012406:	4b41      	ldr	r3, [pc, #260]	; (801250c <tcp_input+0x4a4>)
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801240e:	3301      	adds	r3, #1
 8012410:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012412:	429a      	cmp	r2, r3
 8012414:	d122      	bne.n	801245c <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	8b1a      	ldrh	r2, [r3, #24]
 801241a:	4b3b      	ldr	r3, [pc, #236]	; (8012508 <tcp_input+0x4a0>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	881b      	ldrh	r3, [r3, #0]
 8012420:	b29b      	uxth	r3, r3
 8012422:	429a      	cmp	r2, r3
 8012424:	d11b      	bne.n	801245e <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 8012426:	69fb      	ldr	r3, [r7, #28]
 8012428:	8ada      	ldrh	r2, [r3, #22]
 801242a:	4b37      	ldr	r3, [pc, #220]	; (8012508 <tcp_input+0x4a0>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	885b      	ldrh	r3, [r3, #2]
 8012430:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012432:	429a      	cmp	r2, r3
 8012434:	d113      	bne.n	801245e <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	685a      	ldr	r2, [r3, #4]
 801243a:	4b34      	ldr	r3, [pc, #208]	; (801250c <tcp_input+0x4a4>)
 801243c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801243e:	429a      	cmp	r2, r3
 8012440:	d10d      	bne.n	801245e <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012442:	69fb      	ldr	r3, [r7, #28]
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	4b31      	ldr	r3, [pc, #196]	; (801250c <tcp_input+0x4a4>)
 8012448:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801244a:	429a      	cmp	r2, r3
 801244c:	d107      	bne.n	801245e <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801244e:	69f8      	ldr	r0, [r7, #28]
 8012450:	f000 fb56 	bl	8012b00 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7fd fa41 	bl	800f8dc <pbuf_free>
        return;
 801245a:	e1fd      	b.n	8012858 <tcp_input+0x7f0>
        continue;
 801245c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	61fb      	str	r3, [r7, #28]
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1bc      	bne.n	80123e4 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801246a:	2300      	movs	r3, #0
 801246c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801246e:	4b2f      	ldr	r3, [pc, #188]	; (801252c <tcp_input+0x4c4>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	617b      	str	r3, [r7, #20]
 8012474:	e02a      	b.n	80124cc <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	7a1b      	ldrb	r3, [r3, #8]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00c      	beq.n	8012498 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	7a1a      	ldrb	r2, [r3, #8]
 8012482:	4b22      	ldr	r3, [pc, #136]	; (801250c <tcp_input+0x4a4>)
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801248a:	3301      	adds	r3, #1
 801248c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801248e:	429a      	cmp	r2, r3
 8012490:	d002      	beq.n	8012498 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	61bb      	str	r3, [r7, #24]
        continue;
 8012496:	e016      	b.n	80124c6 <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	8ada      	ldrh	r2, [r3, #22]
 801249c:	4b1a      	ldr	r3, [pc, #104]	; (8012508 <tcp_input+0x4a0>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	885b      	ldrh	r3, [r3, #2]
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d10c      	bne.n	80124c2 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	4b17      	ldr	r3, [pc, #92]	; (801250c <tcp_input+0x4a4>)
 80124ae:	695b      	ldr	r3, [r3, #20]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d00f      	beq.n	80124d4 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d00d      	beq.n	80124d6 <tcp_input+0x46e>
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d009      	beq.n	80124d6 <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	617b      	str	r3, [r7, #20]
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1d1      	bne.n	8012476 <tcp_input+0x40e>
 80124d2:	e000      	b.n	80124d6 <tcp_input+0x46e>
            break;
 80124d4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d029      	beq.n	8012530 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00a      	beq.n	80124f8 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	68da      	ldr	r2, [r3, #12]
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80124ea:	4b10      	ldr	r3, [pc, #64]	; (801252c <tcp_input+0x4c4>)
 80124ec:	681a      	ldr	r2, [r3, #0]
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80124f2:	4a0e      	ldr	r2, [pc, #56]	; (801252c <tcp_input+0x4c4>)
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80124f8:	6978      	ldr	r0, [r7, #20]
 80124fa:	f000 fa03 	bl	8012904 <tcp_listen_input>
      }
      pbuf_free(p);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7fd f9ec 	bl	800f8dc <pbuf_free>
      return;
 8012504:	e1a8      	b.n	8012858 <tcp_input+0x7f0>
 8012506:	bf00      	nop
 8012508:	240108d0 	.word	0x240108d0
 801250c:	24009dd8 	.word	0x24009dd8
 8012510:	0801c06c 	.word	0x0801c06c
 8012514:	0801c1f4 	.word	0x0801c1f4
 8012518:	0801c114 	.word	0x0801c114
 801251c:	240108b4 	.word	0x240108b4
 8012520:	0801c220 	.word	0x0801c220
 8012524:	240108b8 	.word	0x240108b8
 8012528:	0801c24c 	.word	0x0801c24c
 801252c:	240108b0 	.word	0x240108b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	2b00      	cmp	r3, #0
 8012534:	f000 8158 	beq.w	80127e8 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012538:	4b95      	ldr	r3, [pc, #596]	; (8012790 <tcp_input+0x728>)
 801253a:	2200      	movs	r2, #0
 801253c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	891a      	ldrh	r2, [r3, #8]
 8012542:	4b93      	ldr	r3, [pc, #588]	; (8012790 <tcp_input+0x728>)
 8012544:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012546:	4a92      	ldr	r2, [pc, #584]	; (8012790 <tcp_input+0x728>)
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801254c:	4b91      	ldr	r3, [pc, #580]	; (8012794 <tcp_input+0x72c>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a8f      	ldr	r2, [pc, #572]	; (8012790 <tcp_input+0x728>)
 8012552:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012554:	4b90      	ldr	r3, [pc, #576]	; (8012798 <tcp_input+0x730>)
 8012556:	2200      	movs	r2, #0
 8012558:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801255a:	4b90      	ldr	r3, [pc, #576]	; (801279c <tcp_input+0x734>)
 801255c:	2200      	movs	r2, #0
 801255e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012560:	4b8f      	ldr	r3, [pc, #572]	; (80127a0 <tcp_input+0x738>)
 8012562:	2200      	movs	r2, #0
 8012564:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012566:	4b8f      	ldr	r3, [pc, #572]	; (80127a4 <tcp_input+0x73c>)
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	f003 0308 	and.w	r3, r3, #8
 801256e:	2b00      	cmp	r3, #0
 8012570:	d006      	beq.n	8012580 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	7b5b      	ldrb	r3, [r3, #13]
 8012576:	f043 0301 	orr.w	r3, r3, #1
 801257a:	b2da      	uxtb	r2, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012584:	2b00      	cmp	r3, #0
 8012586:	d017      	beq.n	80125b8 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012588:	69f8      	ldr	r0, [r7, #28]
 801258a:	f7ff f84d 	bl	8011628 <tcp_process_refused_data>
 801258e:	4603      	mov	r3, r0
 8012590:	f113 0f0d 	cmn.w	r3, #13
 8012594:	d007      	beq.n	80125a6 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801259a:	2b00      	cmp	r3, #0
 801259c:	d00c      	beq.n	80125b8 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801259e:	4b82      	ldr	r3, [pc, #520]	; (80127a8 <tcp_input+0x740>)
 80125a0:	881b      	ldrh	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d008      	beq.n	80125b8 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	f040 80e4 	bne.w	8012778 <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80125b0:	69f8      	ldr	r0, [r7, #28]
 80125b2:	f003 fe09 	bl	80161c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80125b6:	e0df      	b.n	8012778 <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 80125b8:	4a7c      	ldr	r2, [pc, #496]	; (80127ac <tcp_input+0x744>)
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80125be:	69f8      	ldr	r0, [r7, #28]
 80125c0:	f000 fb18 	bl	8012bf4 <tcp_process>
 80125c4:	4603      	mov	r3, r0
 80125c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80125c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125cc:	f113 0f0d 	cmn.w	r3, #13
 80125d0:	f000 80d4 	beq.w	801277c <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 80125d4:	4b71      	ldr	r3, [pc, #452]	; (801279c <tcp_input+0x734>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	f003 0308 	and.w	r3, r3, #8
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d015      	beq.n	801260c <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d008      	beq.n	80125fc <tcp_input+0x594>
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125f0:	69fa      	ldr	r2, [r7, #28]
 80125f2:	6912      	ldr	r2, [r2, #16]
 80125f4:	f06f 010d 	mvn.w	r1, #13
 80125f8:	4610      	mov	r0, r2
 80125fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80125fc:	69f9      	ldr	r1, [r7, #28]
 80125fe:	486c      	ldr	r0, [pc, #432]	; (80127b0 <tcp_input+0x748>)
 8012600:	f7ff fbba 	bl	8011d78 <tcp_pcb_remove>
        tcp_free(pcb);
 8012604:	69f8      	ldr	r0, [r7, #28]
 8012606:	f7fd fe6d 	bl	80102e4 <tcp_free>
 801260a:	e0da      	b.n	80127c2 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 801260c:	2300      	movs	r3, #0
 801260e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012610:	4b63      	ldr	r3, [pc, #396]	; (80127a0 <tcp_input+0x738>)
 8012612:	881b      	ldrh	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d01d      	beq.n	8012654 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012618:	4b61      	ldr	r3, [pc, #388]	; (80127a0 <tcp_input+0x738>)
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00a      	beq.n	801263e <tcp_input+0x5d6>
 8012628:	69fb      	ldr	r3, [r7, #28]
 801262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801262e:	69fa      	ldr	r2, [r7, #28]
 8012630:	6910      	ldr	r0, [r2, #16]
 8012632:	89fa      	ldrh	r2, [r7, #14]
 8012634:	69f9      	ldr	r1, [r7, #28]
 8012636:	4798      	blx	r3
 8012638:	4603      	mov	r3, r0
 801263a:	74fb      	strb	r3, [r7, #19]
 801263c:	e001      	b.n	8012642 <tcp_input+0x5da>
 801263e:	2300      	movs	r3, #0
 8012640:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012646:	f113 0f0d 	cmn.w	r3, #13
 801264a:	f000 8099 	beq.w	8012780 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 801264e:	4b54      	ldr	r3, [pc, #336]	; (80127a0 <tcp_input+0x738>)
 8012650:	2200      	movs	r2, #0
 8012652:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012654:	69f8      	ldr	r0, [r7, #28]
 8012656:	f000 f915 	bl	8012884 <tcp_input_delayed_close>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	f040 8091 	bne.w	8012784 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012662:	4b4d      	ldr	r3, [pc, #308]	; (8012798 <tcp_input+0x730>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d041      	beq.n	80126ee <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801266e:	2b00      	cmp	r3, #0
 8012670:	d006      	beq.n	8012680 <tcp_input+0x618>
 8012672:	4b50      	ldr	r3, [pc, #320]	; (80127b4 <tcp_input+0x74c>)
 8012674:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012678:	494f      	ldr	r1, [pc, #316]	; (80127b8 <tcp_input+0x750>)
 801267a:	4850      	ldr	r0, [pc, #320]	; (80127bc <tcp_input+0x754>)
 801267c:	f005 f9a0 	bl	80179c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012680:	69fb      	ldr	r3, [r7, #28]
 8012682:	8b5b      	ldrh	r3, [r3, #26]
 8012684:	f003 0310 	and.w	r3, r3, #16
 8012688:	2b00      	cmp	r3, #0
 801268a:	d008      	beq.n	801269e <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801268c:	4b42      	ldr	r3, [pc, #264]	; (8012798 <tcp_input+0x730>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4618      	mov	r0, r3
 8012692:	f7fd f923 	bl	800f8dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012696:	69f8      	ldr	r0, [r7, #28]
 8012698:	f7fe f96e 	bl	8010978 <tcp_abort>
            goto aborted;
 801269c:	e091      	b.n	80127c2 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d00c      	beq.n	80126c2 <tcp_input+0x65a>
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	6918      	ldr	r0, [r3, #16]
 80126b2:	4b39      	ldr	r3, [pc, #228]	; (8012798 <tcp_input+0x730>)
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	2300      	movs	r3, #0
 80126b8:	69f9      	ldr	r1, [r7, #28]
 80126ba:	47a0      	blx	r4
 80126bc:	4603      	mov	r3, r0
 80126be:	74fb      	strb	r3, [r7, #19]
 80126c0:	e008      	b.n	80126d4 <tcp_input+0x66c>
 80126c2:	4b35      	ldr	r3, [pc, #212]	; (8012798 <tcp_input+0x730>)
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	2300      	movs	r3, #0
 80126c8:	69f9      	ldr	r1, [r7, #28]
 80126ca:	2000      	movs	r0, #0
 80126cc:	f7ff f884 	bl	80117d8 <tcp_recv_null>
 80126d0:	4603      	mov	r3, r0
 80126d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80126d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126d8:	f113 0f0d 	cmn.w	r3, #13
 80126dc:	d054      	beq.n	8012788 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80126de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d003      	beq.n	80126ee <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80126e6:	4b2c      	ldr	r3, [pc, #176]	; (8012798 <tcp_input+0x730>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80126ee:	4b2b      	ldr	r3, [pc, #172]	; (801279c <tcp_input+0x734>)
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	f003 0320 	and.w	r3, r3, #32
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d031      	beq.n	801275e <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d009      	beq.n	8012716 <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012706:	7b5a      	ldrb	r2, [r3, #13]
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801270c:	f042 0220 	orr.w	r2, r2, #32
 8012710:	b2d2      	uxtb	r2, r2
 8012712:	735a      	strb	r2, [r3, #13]
 8012714:	e023      	b.n	801275e <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801271a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801271e:	4293      	cmp	r3, r2
 8012720:	d005      	beq.n	801272e <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012726:	3301      	adds	r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	69fb      	ldr	r3, [r7, #28]
 801272c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012734:	2b00      	cmp	r3, #0
 8012736:	d00b      	beq.n	8012750 <tcp_input+0x6e8>
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	6918      	ldr	r0, [r3, #16]
 8012742:	2300      	movs	r3, #0
 8012744:	2200      	movs	r2, #0
 8012746:	69f9      	ldr	r1, [r7, #28]
 8012748:	47a0      	blx	r4
 801274a:	4603      	mov	r3, r0
 801274c:	74fb      	strb	r3, [r7, #19]
 801274e:	e001      	b.n	8012754 <tcp_input+0x6ec>
 8012750:	2300      	movs	r3, #0
 8012752:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012754:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012758:	f113 0f0d 	cmn.w	r3, #13
 801275c:	d016      	beq.n	801278c <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801275e:	4b13      	ldr	r3, [pc, #76]	; (80127ac <tcp_input+0x744>)
 8012760:	2200      	movs	r2, #0
 8012762:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012764:	69f8      	ldr	r0, [r7, #28]
 8012766:	f000 f88d 	bl	8012884 <tcp_input_delayed_close>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d127      	bne.n	80127c0 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012770:	69f8      	ldr	r0, [r7, #28]
 8012772:	f002 ff21 	bl	80155b8 <tcp_output>
 8012776:	e024      	b.n	80127c2 <tcp_input+0x75a>
        goto aborted;
 8012778:	bf00      	nop
 801277a:	e022      	b.n	80127c2 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801277c:	bf00      	nop
 801277e:	e020      	b.n	80127c2 <tcp_input+0x75a>
              goto aborted;
 8012780:	bf00      	nop
 8012782:	e01e      	b.n	80127c2 <tcp_input+0x75a>
          goto aborted;
 8012784:	bf00      	nop
 8012786:	e01c      	b.n	80127c2 <tcp_input+0x75a>
            goto aborted;
 8012788:	bf00      	nop
 801278a:	e01a      	b.n	80127c2 <tcp_input+0x75a>
              goto aborted;
 801278c:	bf00      	nop
 801278e:	e018      	b.n	80127c2 <tcp_input+0x75a>
 8012790:	240108c0 	.word	0x240108c0
 8012794:	240108d0 	.word	0x240108d0
 8012798:	240108f0 	.word	0x240108f0
 801279c:	240108ed 	.word	0x240108ed
 80127a0:	240108e8 	.word	0x240108e8
 80127a4:	240108ec 	.word	0x240108ec
 80127a8:	240108ea 	.word	0x240108ea
 80127ac:	240108f4 	.word	0x240108f4
 80127b0:	240108b4 	.word	0x240108b4
 80127b4:	0801c06c 	.word	0x0801c06c
 80127b8:	0801c27c 	.word	0x0801c27c
 80127bc:	0801c114 	.word	0x0801c114
          goto aborted;
 80127c0:	bf00      	nop
    tcp_input_pcb = NULL;
 80127c2:	4b27      	ldr	r3, [pc, #156]	; (8012860 <tcp_input+0x7f8>)
 80127c4:	2200      	movs	r2, #0
 80127c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80127c8:	4b26      	ldr	r3, [pc, #152]	; (8012864 <tcp_input+0x7fc>)
 80127ca:	2200      	movs	r2, #0
 80127cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80127ce:	4b26      	ldr	r3, [pc, #152]	; (8012868 <tcp_input+0x800>)
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d03f      	beq.n	8012856 <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 80127d6:	4b24      	ldr	r3, [pc, #144]	; (8012868 <tcp_input+0x800>)
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fd f87e 	bl	800f8dc <pbuf_free>
      inseg.p = NULL;
 80127e0:	4b21      	ldr	r3, [pc, #132]	; (8012868 <tcp_input+0x800>)
 80127e2:	2200      	movs	r2, #0
 80127e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80127e6:	e036      	b.n	8012856 <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80127e8:	4b20      	ldr	r3, [pc, #128]	; (801286c <tcp_input+0x804>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	899b      	ldrh	r3, [r3, #12]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7f9 f8b9 	bl	800b968 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	f003 0304 	and.w	r3, r3, #4
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d118      	bne.n	8012834 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012802:	4b1b      	ldr	r3, [pc, #108]	; (8012870 <tcp_input+0x808>)
 8012804:	6819      	ldr	r1, [r3, #0]
 8012806:	4b1b      	ldr	r3, [pc, #108]	; (8012874 <tcp_input+0x80c>)
 8012808:	881b      	ldrh	r3, [r3, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	4b1a      	ldr	r3, [pc, #104]	; (8012878 <tcp_input+0x810>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012812:	4b16      	ldr	r3, [pc, #88]	; (801286c <tcp_input+0x804>)
 8012814:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012816:	885b      	ldrh	r3, [r3, #2]
 8012818:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801281a:	4a14      	ldr	r2, [pc, #80]	; (801286c <tcp_input+0x804>)
 801281c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801281e:	8812      	ldrh	r2, [r2, #0]
 8012820:	b292      	uxth	r2, r2
 8012822:	9202      	str	r2, [sp, #8]
 8012824:	9301      	str	r3, [sp, #4]
 8012826:	4b15      	ldr	r3, [pc, #84]	; (801287c <tcp_input+0x814>)
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	4b15      	ldr	r3, [pc, #84]	; (8012880 <tcp_input+0x818>)
 801282c:	4602      	mov	r2, r0
 801282e:	2000      	movs	r0, #0
 8012830:	f003 fc78 	bl	8016124 <tcp_rst>
    pbuf_free(p);
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f7fd f851 	bl	800f8dc <pbuf_free>
  return;
 801283a:	e00c      	b.n	8012856 <tcp_input+0x7ee>
    goto dropped;
 801283c:	bf00      	nop
 801283e:	e006      	b.n	801284e <tcp_input+0x7e6>
    goto dropped;
 8012840:	bf00      	nop
 8012842:	e004      	b.n	801284e <tcp_input+0x7e6>
    goto dropped;
 8012844:	bf00      	nop
 8012846:	e002      	b.n	801284e <tcp_input+0x7e6>
      goto dropped;
 8012848:	bf00      	nop
 801284a:	e000      	b.n	801284e <tcp_input+0x7e6>
      goto dropped;
 801284c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f7fd f844 	bl	800f8dc <pbuf_free>
 8012854:	e000      	b.n	8012858 <tcp_input+0x7f0>
  return;
 8012856:	bf00      	nop
}
 8012858:	3724      	adds	r7, #36	; 0x24
 801285a:	46bd      	mov	sp, r7
 801285c:	bd90      	pop	{r4, r7, pc}
 801285e:	bf00      	nop
 8012860:	240108f4 	.word	0x240108f4
 8012864:	240108f0 	.word	0x240108f0
 8012868:	240108c0 	.word	0x240108c0
 801286c:	240108d0 	.word	0x240108d0
 8012870:	240108e4 	.word	0x240108e4
 8012874:	240108ea 	.word	0x240108ea
 8012878:	240108e0 	.word	0x240108e0
 801287c:	24009de8 	.word	0x24009de8
 8012880:	24009dec 	.word	0x24009dec

08012884 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_input_delayed_close+0x1c>
 8012892:	4b17      	ldr	r3, [pc, #92]	; (80128f0 <tcp_input_delayed_close+0x6c>)
 8012894:	f240 225a 	movw	r2, #602	; 0x25a
 8012898:	4916      	ldr	r1, [pc, #88]	; (80128f4 <tcp_input_delayed_close+0x70>)
 801289a:	4817      	ldr	r0, [pc, #92]	; (80128f8 <tcp_input_delayed_close+0x74>)
 801289c:	f005 f890 	bl	80179c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80128a0:	4b16      	ldr	r3, [pc, #88]	; (80128fc <tcp_input_delayed_close+0x78>)
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	f003 0310 	and.w	r3, r3, #16
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d01c      	beq.n	80128e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	8b5b      	ldrh	r3, [r3, #26]
 80128b0:	f003 0310 	and.w	r3, r3, #16
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d10d      	bne.n	80128d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d008      	beq.n	80128d4 <tcp_input_delayed_close+0x50>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	6912      	ldr	r2, [r2, #16]
 80128cc:	f06f 010e 	mvn.w	r1, #14
 80128d0:	4610      	mov	r0, r2
 80128d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80128d4:	6879      	ldr	r1, [r7, #4]
 80128d6:	480a      	ldr	r0, [pc, #40]	; (8012900 <tcp_input_delayed_close+0x7c>)
 80128d8:	f7ff fa4e 	bl	8011d78 <tcp_pcb_remove>
    tcp_free(pcb);
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f7fd fd01 	bl	80102e4 <tcp_free>
    return 1;
 80128e2:	2301      	movs	r3, #1
 80128e4:	e000      	b.n	80128e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	0801c06c 	.word	0x0801c06c
 80128f4:	0801c298 	.word	0x0801c298
 80128f8:	0801c114 	.word	0x0801c114
 80128fc:	240108ed 	.word	0x240108ed
 8012900:	240108b4 	.word	0x240108b4

08012904 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012904:	b590      	push	{r4, r7, lr}
 8012906:	b08b      	sub	sp, #44	; 0x2c
 8012908:	af04      	add	r7, sp, #16
 801290a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801290c:	4b6f      	ldr	r3, [pc, #444]	; (8012acc <tcp_listen_input+0x1c8>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	f003 0304 	and.w	r3, r3, #4
 8012914:	2b00      	cmp	r3, #0
 8012916:	f040 80d2 	bne.w	8012abe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d106      	bne.n	801292e <tcp_listen_input+0x2a>
 8012920:	4b6b      	ldr	r3, [pc, #428]	; (8012ad0 <tcp_listen_input+0x1cc>)
 8012922:	f240 2281 	movw	r2, #641	; 0x281
 8012926:	496b      	ldr	r1, [pc, #428]	; (8012ad4 <tcp_listen_input+0x1d0>)
 8012928:	486b      	ldr	r0, [pc, #428]	; (8012ad8 <tcp_listen_input+0x1d4>)
 801292a:	f005 f849 	bl	80179c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801292e:	4b67      	ldr	r3, [pc, #412]	; (8012acc <tcp_listen_input+0x1c8>)
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	f003 0310 	and.w	r3, r3, #16
 8012936:	2b00      	cmp	r3, #0
 8012938:	d019      	beq.n	801296e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801293a:	4b68      	ldr	r3, [pc, #416]	; (8012adc <tcp_listen_input+0x1d8>)
 801293c:	6819      	ldr	r1, [r3, #0]
 801293e:	4b68      	ldr	r3, [pc, #416]	; (8012ae0 <tcp_listen_input+0x1dc>)
 8012940:	881b      	ldrh	r3, [r3, #0]
 8012942:	461a      	mov	r2, r3
 8012944:	4b67      	ldr	r3, [pc, #412]	; (8012ae4 <tcp_listen_input+0x1e0>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801294a:	4b67      	ldr	r3, [pc, #412]	; (8012ae8 <tcp_listen_input+0x1e4>)
 801294c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801294e:	885b      	ldrh	r3, [r3, #2]
 8012950:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012952:	4a65      	ldr	r2, [pc, #404]	; (8012ae8 <tcp_listen_input+0x1e4>)
 8012954:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012956:	8812      	ldrh	r2, [r2, #0]
 8012958:	b292      	uxth	r2, r2
 801295a:	9202      	str	r2, [sp, #8]
 801295c:	9301      	str	r3, [sp, #4]
 801295e:	4b63      	ldr	r3, [pc, #396]	; (8012aec <tcp_listen_input+0x1e8>)
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	4b63      	ldr	r3, [pc, #396]	; (8012af0 <tcp_listen_input+0x1ec>)
 8012964:	4602      	mov	r2, r0
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f003 fbdc 	bl	8016124 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801296c:	e0a9      	b.n	8012ac2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801296e:	4b57      	ldr	r3, [pc, #348]	; (8012acc <tcp_listen_input+0x1c8>)
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	f003 0302 	and.w	r3, r3, #2
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 80a3 	beq.w	8012ac2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	7d5b      	ldrb	r3, [r3, #21]
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff f84d 	bl	8011a20 <tcp_alloc>
 8012986:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d111      	bne.n	80129b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	699b      	ldr	r3, [r3, #24]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d00a      	beq.n	80129ac <tcp_listen_input+0xa8>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	699b      	ldr	r3, [r3, #24]
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	6910      	ldr	r0, [r2, #16]
 801299e:	f04f 32ff 	mov.w	r2, #4294967295
 80129a2:	2100      	movs	r1, #0
 80129a4:	4798      	blx	r3
 80129a6:	4603      	mov	r3, r0
 80129a8:	73bb      	strb	r3, [r7, #14]
      return;
 80129aa:	e08b      	b.n	8012ac4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80129ac:	23f0      	movs	r3, #240	; 0xf0
 80129ae:	73bb      	strb	r3, [r7, #14]
      return;
 80129b0:	e088      	b.n	8012ac4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80129b2:	4b50      	ldr	r3, [pc, #320]	; (8012af4 <tcp_listen_input+0x1f0>)
 80129b4:	695a      	ldr	r2, [r3, #20]
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80129ba:	4b4e      	ldr	r3, [pc, #312]	; (8012af4 <tcp_listen_input+0x1f0>)
 80129bc:	691a      	ldr	r2, [r3, #16]
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	8ada      	ldrh	r2, [r3, #22]
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80129ca:	4b47      	ldr	r3, [pc, #284]	; (8012ae8 <tcp_listen_input+0x1e4>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	881b      	ldrh	r3, [r3, #0]
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	2203      	movs	r2, #3
 80129da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80129dc:	4b41      	ldr	r3, [pc, #260]	; (8012ae4 <tcp_listen_input+0x1e0>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	1c5a      	adds	r2, r3, #1
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80129ee:	6978      	ldr	r0, [r7, #20]
 80129f0:	f7ff fa56 	bl	8011ea0 <tcp_next_iss>
 80129f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	693a      	ldr	r2, [r7, #16]
 80129fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	693a      	ldr	r2, [r7, #16]
 8012a00:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	693a      	ldr	r2, [r7, #16]
 8012a06:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	693a      	ldr	r2, [r7, #16]
 8012a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012a0e:	4b35      	ldr	r3, [pc, #212]	; (8012ae4 <tcp_listen_input+0x1e0>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	1e5a      	subs	r2, r3, #1
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	691a      	ldr	r2, [r3, #16]
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	7a5b      	ldrb	r3, [r3, #9]
 8012a2a:	f003 030c 	and.w	r3, r3, #12
 8012a2e:	b2da      	uxtb	r2, r3
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	7a1a      	ldrb	r2, [r3, #8]
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012a3c:	4b2e      	ldr	r3, [pc, #184]	; (8012af8 <tcp_listen_input+0x1f4>)
 8012a3e:	681a      	ldr	r2, [r3, #0]
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	60da      	str	r2, [r3, #12]
 8012a44:	4a2c      	ldr	r2, [pc, #176]	; (8012af8 <tcp_listen_input+0x1f4>)
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	6013      	str	r3, [r2, #0]
 8012a4a:	f003 fedd 	bl	8016808 <tcp_timer_needed>
 8012a4e:	4b2b      	ldr	r3, [pc, #172]	; (8012afc <tcp_listen_input+0x1f8>)
 8012a50:	2201      	movs	r2, #1
 8012a52:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012a54:	6978      	ldr	r0, [r7, #20]
 8012a56:	f001 fd8f 	bl	8014578 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012a5a:	4b23      	ldr	r3, [pc, #140]	; (8012ae8 <tcp_listen_input+0x1e4>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	89db      	ldrh	r3, [r3, #14]
 8012a60:	b29a      	uxth	r2, r3
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	3304      	adds	r3, #4
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fa fa53 	bl	800cf28 <ip4_route>
 8012a82:	4601      	mov	r1, r0
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	3304      	adds	r3, #4
 8012a88:	461a      	mov	r2, r3
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	f7ff fa2e 	bl	8011eec <tcp_eff_send_mss_netif>
 8012a90:	4603      	mov	r3, r0
 8012a92:	461a      	mov	r2, r3
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012a98:	2112      	movs	r1, #18
 8012a9a:	6978      	ldr	r0, [r7, #20]
 8012a9c:	f002 fc9e 	bl	80153dc <tcp_enqueue_flags>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d004      	beq.n	8012ab6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012aac:	2100      	movs	r1, #0
 8012aae:	6978      	ldr	r0, [r7, #20]
 8012ab0:	f7fd fea2 	bl	80107f8 <tcp_abandon>
      return;
 8012ab4:	e006      	b.n	8012ac4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012ab6:	6978      	ldr	r0, [r7, #20]
 8012ab8:	f002 fd7e 	bl	80155b8 <tcp_output>
  return;
 8012abc:	e001      	b.n	8012ac2 <tcp_listen_input+0x1be>
    return;
 8012abe:	bf00      	nop
 8012ac0:	e000      	b.n	8012ac4 <tcp_listen_input+0x1c0>
  return;
 8012ac2:	bf00      	nop
}
 8012ac4:	371c      	adds	r7, #28
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd90      	pop	{r4, r7, pc}
 8012aca:	bf00      	nop
 8012acc:	240108ec 	.word	0x240108ec
 8012ad0:	0801c06c 	.word	0x0801c06c
 8012ad4:	0801c2c0 	.word	0x0801c2c0
 8012ad8:	0801c114 	.word	0x0801c114
 8012adc:	240108e4 	.word	0x240108e4
 8012ae0:	240108ea 	.word	0x240108ea
 8012ae4:	240108e0 	.word	0x240108e0
 8012ae8:	240108d0 	.word	0x240108d0
 8012aec:	24009de8 	.word	0x24009de8
 8012af0:	24009dec 	.word	0x24009dec
 8012af4:	24009dd8 	.word	0x24009dd8
 8012af8:	240108b4 	.word	0x240108b4
 8012afc:	240108bc 	.word	0x240108bc

08012b00 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b086      	sub	sp, #24
 8012b04:	af04      	add	r7, sp, #16
 8012b06:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012b08:	4b2f      	ldr	r3, [pc, #188]	; (8012bc8 <tcp_timewait_input+0xc8>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	f003 0304 	and.w	r3, r3, #4
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d153      	bne.n	8012bbc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d106      	bne.n	8012b28 <tcp_timewait_input+0x28>
 8012b1a:	4b2c      	ldr	r3, [pc, #176]	; (8012bcc <tcp_timewait_input+0xcc>)
 8012b1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012b20:	492b      	ldr	r1, [pc, #172]	; (8012bd0 <tcp_timewait_input+0xd0>)
 8012b22:	482c      	ldr	r0, [pc, #176]	; (8012bd4 <tcp_timewait_input+0xd4>)
 8012b24:	f004 ff4c 	bl	80179c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012b28:	4b27      	ldr	r3, [pc, #156]	; (8012bc8 <tcp_timewait_input+0xc8>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	f003 0302 	and.w	r3, r3, #2
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d02a      	beq.n	8012b8a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012b34:	4b28      	ldr	r3, [pc, #160]	; (8012bd8 <tcp_timewait_input+0xd8>)
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	db2d      	blt.n	8012b9e <tcp_timewait_input+0x9e>
 8012b42:	4b25      	ldr	r3, [pc, #148]	; (8012bd8 <tcp_timewait_input+0xd8>)
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4a:	6879      	ldr	r1, [r7, #4]
 8012b4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b4e:	440b      	add	r3, r1
 8012b50:	1ad3      	subs	r3, r2, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	dc23      	bgt.n	8012b9e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b56:	4b21      	ldr	r3, [pc, #132]	; (8012bdc <tcp_timewait_input+0xdc>)
 8012b58:	6819      	ldr	r1, [r3, #0]
 8012b5a:	4b21      	ldr	r3, [pc, #132]	; (8012be0 <tcp_timewait_input+0xe0>)
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	461a      	mov	r2, r3
 8012b60:	4b1d      	ldr	r3, [pc, #116]	; (8012bd8 <tcp_timewait_input+0xd8>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b66:	4b1f      	ldr	r3, [pc, #124]	; (8012be4 <tcp_timewait_input+0xe4>)
 8012b68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b6a:	885b      	ldrh	r3, [r3, #2]
 8012b6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b6e:	4a1d      	ldr	r2, [pc, #116]	; (8012be4 <tcp_timewait_input+0xe4>)
 8012b70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b72:	8812      	ldrh	r2, [r2, #0]
 8012b74:	b292      	uxth	r2, r2
 8012b76:	9202      	str	r2, [sp, #8]
 8012b78:	9301      	str	r3, [sp, #4]
 8012b7a:	4b1b      	ldr	r3, [pc, #108]	; (8012be8 <tcp_timewait_input+0xe8>)
 8012b7c:	9300      	str	r3, [sp, #0]
 8012b7e:	4b1b      	ldr	r3, [pc, #108]	; (8012bec <tcp_timewait_input+0xec>)
 8012b80:	4602      	mov	r2, r0
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f003 face 	bl	8016124 <tcp_rst>
      return;
 8012b88:	e01b      	b.n	8012bc2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012b8a:	4b0f      	ldr	r3, [pc, #60]	; (8012bc8 <tcp_timewait_input+0xc8>)
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	f003 0301 	and.w	r3, r3, #1
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d003      	beq.n	8012b9e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012b96:	4b16      	ldr	r3, [pc, #88]	; (8012bf0 <tcp_timewait_input+0xf0>)
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012b9e:	4b10      	ldr	r3, [pc, #64]	; (8012be0 <tcp_timewait_input+0xe0>)
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00c      	beq.n	8012bc0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	8b5b      	ldrh	r3, [r3, #26]
 8012baa:	f043 0302 	orr.w	r3, r3, #2
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f002 fcff 	bl	80155b8 <tcp_output>
  }
  return;
 8012bba:	e001      	b.n	8012bc0 <tcp_timewait_input+0xc0>
    return;
 8012bbc:	bf00      	nop
 8012bbe:	e000      	b.n	8012bc2 <tcp_timewait_input+0xc2>
  return;
 8012bc0:	bf00      	nop
}
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	240108ec 	.word	0x240108ec
 8012bcc:	0801c06c 	.word	0x0801c06c
 8012bd0:	0801c2e0 	.word	0x0801c2e0
 8012bd4:	0801c114 	.word	0x0801c114
 8012bd8:	240108e0 	.word	0x240108e0
 8012bdc:	240108e4 	.word	0x240108e4
 8012be0:	240108ea 	.word	0x240108ea
 8012be4:	240108d0 	.word	0x240108d0
 8012be8:	24009de8 	.word	0x24009de8
 8012bec:	24009dec 	.word	0x24009dec
 8012bf0:	240108a8 	.word	0x240108a8

08012bf4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012bf4:	b590      	push	{r4, r7, lr}
 8012bf6:	b08d      	sub	sp, #52	; 0x34
 8012bf8:	af04      	add	r7, sp, #16
 8012bfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012c00:	2300      	movs	r3, #0
 8012c02:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d106      	bne.n	8012c18 <tcp_process+0x24>
 8012c0a:	4b9d      	ldr	r3, [pc, #628]	; (8012e80 <tcp_process+0x28c>)
 8012c0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012c10:	499c      	ldr	r1, [pc, #624]	; (8012e84 <tcp_process+0x290>)
 8012c12:	489d      	ldr	r0, [pc, #628]	; (8012e88 <tcp_process+0x294>)
 8012c14:	f004 fed4 	bl	80179c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012c18:	4b9c      	ldr	r3, [pc, #624]	; (8012e8c <tcp_process+0x298>)
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	f003 0304 	and.w	r3, r3, #4
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d04e      	beq.n	8012cc2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	7d1b      	ldrb	r3, [r3, #20]
 8012c28:	2b02      	cmp	r3, #2
 8012c2a:	d108      	bne.n	8012c3e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c30:	4b97      	ldr	r3, [pc, #604]	; (8012e90 <tcp_process+0x29c>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d123      	bne.n	8012c80 <tcp_process+0x8c>
        acceptable = 1;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	76fb      	strb	r3, [r7, #27]
 8012c3c:	e020      	b.n	8012c80 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c42:	4b94      	ldr	r3, [pc, #592]	; (8012e94 <tcp_process+0x2a0>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d102      	bne.n	8012c50 <tcp_process+0x5c>
        acceptable = 1;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	76fb      	strb	r3, [r7, #27]
 8012c4e:	e017      	b.n	8012c80 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c50:	4b90      	ldr	r3, [pc, #576]	; (8012e94 <tcp_process+0x2a0>)
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c58:	1ad3      	subs	r3, r2, r3
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	db10      	blt.n	8012c80 <tcp_process+0x8c>
 8012c5e:	4b8d      	ldr	r3, [pc, #564]	; (8012e94 <tcp_process+0x2a0>)
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c66:	6879      	ldr	r1, [r7, #4]
 8012c68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c6a:	440b      	add	r3, r1
 8012c6c:	1ad3      	subs	r3, r2, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	dc06      	bgt.n	8012c80 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	8b5b      	ldrh	r3, [r3, #26]
 8012c76:	f043 0302 	orr.w	r3, r3, #2
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012c80:	7efb      	ldrb	r3, [r7, #27]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d01b      	beq.n	8012cbe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	7d1b      	ldrb	r3, [r3, #20]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d106      	bne.n	8012c9c <tcp_process+0xa8>
 8012c8e:	4b7c      	ldr	r3, [pc, #496]	; (8012e80 <tcp_process+0x28c>)
 8012c90:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012c94:	4980      	ldr	r1, [pc, #512]	; (8012e98 <tcp_process+0x2a4>)
 8012c96:	487c      	ldr	r0, [pc, #496]	; (8012e88 <tcp_process+0x294>)
 8012c98:	f004 fe92 	bl	80179c0 <iprintf>
      recv_flags |= TF_RESET;
 8012c9c:	4b7f      	ldr	r3, [pc, #508]	; (8012e9c <tcp_process+0x2a8>)
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	f043 0308 	orr.w	r3, r3, #8
 8012ca4:	b2da      	uxtb	r2, r3
 8012ca6:	4b7d      	ldr	r3, [pc, #500]	; (8012e9c <tcp_process+0x2a8>)
 8012ca8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	8b5b      	ldrh	r3, [r3, #26]
 8012cae:	f023 0301 	bic.w	r3, r3, #1
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012cb8:	f06f 030d 	mvn.w	r3, #13
 8012cbc:	e37a      	b.n	80133b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e378      	b.n	80133b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012cc2:	4b72      	ldr	r3, [pc, #456]	; (8012e8c <tcp_process+0x298>)
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	f003 0302 	and.w	r3, r3, #2
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d010      	beq.n	8012cf0 <tcp_process+0xfc>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	7d1b      	ldrb	r3, [r3, #20]
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d00c      	beq.n	8012cf0 <tcp_process+0xfc>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	7d1b      	ldrb	r3, [r3, #20]
 8012cda:	2b03      	cmp	r3, #3
 8012cdc:	d008      	beq.n	8012cf0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	8b5b      	ldrh	r3, [r3, #26]
 8012ce2:	f043 0302 	orr.w	r3, r3, #2
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012cec:	2300      	movs	r3, #0
 8012cee:	e361      	b.n	80133b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	8b5b      	ldrh	r3, [r3, #26]
 8012cf4:	f003 0310 	and.w	r3, r3, #16
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d103      	bne.n	8012d04 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012cfc:	4b68      	ldr	r3, [pc, #416]	; (8012ea0 <tcp_process+0x2ac>)
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f001 fc2f 	bl	8014578 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	7d1b      	ldrb	r3, [r3, #20]
 8012d1e:	3b02      	subs	r3, #2
 8012d20:	2b07      	cmp	r3, #7
 8012d22:	f200 8337 	bhi.w	8013394 <tcp_process+0x7a0>
 8012d26:	a201      	add	r2, pc, #4	; (adr r2, 8012d2c <tcp_process+0x138>)
 8012d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d2c:	08012d4d 	.word	0x08012d4d
 8012d30:	08012f7d 	.word	0x08012f7d
 8012d34:	080130f5 	.word	0x080130f5
 8012d38:	0801311f 	.word	0x0801311f
 8012d3c:	08013243 	.word	0x08013243
 8012d40:	080130f5 	.word	0x080130f5
 8012d44:	080132cf 	.word	0x080132cf
 8012d48:	0801335f 	.word	0x0801335f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012d4c:	4b4f      	ldr	r3, [pc, #316]	; (8012e8c <tcp_process+0x298>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	f003 0310 	and.w	r3, r3, #16
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f000 80e4 	beq.w	8012f22 <tcp_process+0x32e>
 8012d5a:	4b4c      	ldr	r3, [pc, #304]	; (8012e8c <tcp_process+0x298>)
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	f003 0302 	and.w	r3, r3, #2
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f000 80dd 	beq.w	8012f22 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	4b48      	ldr	r3, [pc, #288]	; (8012e90 <tcp_process+0x29c>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	f040 80d5 	bne.w	8012f22 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012d78:	4b46      	ldr	r3, [pc, #280]	; (8012e94 <tcp_process+0x2a0>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	1c5a      	adds	r2, r3, #1
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012d8a:	4b41      	ldr	r3, [pc, #260]	; (8012e90 <tcp_process+0x29c>)
 8012d8c:	681a      	ldr	r2, [r3, #0]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012d92:	4b44      	ldr	r3, [pc, #272]	; (8012ea4 <tcp_process+0x2b0>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	89db      	ldrh	r3, [r3, #14]
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012dac:	4b39      	ldr	r3, [pc, #228]	; (8012e94 <tcp_process+0x2a0>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	1e5a      	subs	r2, r3, #1
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2204      	movs	r2, #4
 8012dba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	3304      	adds	r3, #4
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7fa f8af 	bl	800cf28 <ip4_route>
 8012dca:	4601      	mov	r1, r0
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	3304      	adds	r3, #4
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f7ff f88a 	bl	8011eec <tcp_eff_send_mss_netif>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	461a      	mov	r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012de4:	009a      	lsls	r2, r3, #2
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	f241 111c 	movw	r1, #4380	; 0x111c
 8012df0:	428b      	cmp	r3, r1
 8012df2:	bf38      	it	cc
 8012df4:	460b      	movcc	r3, r1
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d204      	bcs.n	8012e04 <tcp_process+0x210>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dfe:	009b      	lsls	r3, r3, #2
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	e00d      	b.n	8012e20 <tcp_process+0x22c>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e08:	005b      	lsls	r3, r3, #1
 8012e0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d904      	bls.n	8012e1c <tcp_process+0x228>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	e001      	b.n	8012e20 <tcp_process+0x22c>
 8012e1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d106      	bne.n	8012e3e <tcp_process+0x24a>
 8012e30:	4b13      	ldr	r3, [pc, #76]	; (8012e80 <tcp_process+0x28c>)
 8012e32:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012e36:	491c      	ldr	r1, [pc, #112]	; (8012ea8 <tcp_process+0x2b4>)
 8012e38:	4813      	ldr	r0, [pc, #76]	; (8012e88 <tcp_process+0x294>)
 8012e3a:	f004 fdc1 	bl	80179c0 <iprintf>
        --pcb->snd_queuelen;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e44:	3b01      	subs	r3, #1
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e52:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d12a      	bne.n	8012eb0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e5e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d106      	bne.n	8012e74 <tcp_process+0x280>
 8012e66:	4b06      	ldr	r3, [pc, #24]	; (8012e80 <tcp_process+0x28c>)
 8012e68:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012e6c:	490f      	ldr	r1, [pc, #60]	; (8012eac <tcp_process+0x2b8>)
 8012e6e:	4806      	ldr	r0, [pc, #24]	; (8012e88 <tcp_process+0x294>)
 8012e70:	f004 fda6 	bl	80179c0 <iprintf>
          pcb->unsent = rseg->next;
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e7c:	e01c      	b.n	8012eb8 <tcp_process+0x2c4>
 8012e7e:	bf00      	nop
 8012e80:	0801c06c 	.word	0x0801c06c
 8012e84:	0801c300 	.word	0x0801c300
 8012e88:	0801c114 	.word	0x0801c114
 8012e8c:	240108ec 	.word	0x240108ec
 8012e90:	240108e4 	.word	0x240108e4
 8012e94:	240108e0 	.word	0x240108e0
 8012e98:	0801c31c 	.word	0x0801c31c
 8012e9c:	240108ed 	.word	0x240108ed
 8012ea0:	240108a8 	.word	0x240108a8
 8012ea4:	240108d0 	.word	0x240108d0
 8012ea8:	0801c33c 	.word	0x0801c33c
 8012eac:	0801c354 	.word	0x0801c354
        } else {
          pcb->unacked = rseg->next;
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012eb8:	69f8      	ldr	r0, [r7, #28]
 8012eba:	f7fe fc48 	bl	801174e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d104      	bne.n	8012ed0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ecc:	861a      	strh	r2, [r3, #48]	; 0x30
 8012ece:	e006      	b.n	8012ede <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d00a      	beq.n	8012efe <tcp_process+0x30a>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	6910      	ldr	r0, [r2, #16]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	6879      	ldr	r1, [r7, #4]
 8012ef6:	4798      	blx	r3
 8012ef8:	4603      	mov	r3, r0
 8012efa:	76bb      	strb	r3, [r7, #26]
 8012efc:	e001      	b.n	8012f02 <tcp_process+0x30e>
 8012efe:	2300      	movs	r3, #0
 8012f00:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012f02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012f06:	f113 0f0d 	cmn.w	r3, #13
 8012f0a:	d102      	bne.n	8012f12 <tcp_process+0x31e>
          return ERR_ABRT;
 8012f0c:	f06f 030c 	mvn.w	r3, #12
 8012f10:	e250      	b.n	80133b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	8b5b      	ldrh	r3, [r3, #26]
 8012f16:	f043 0302 	orr.w	r3, r3, #2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012f20:	e23a      	b.n	8013398 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012f22:	4b98      	ldr	r3, [pc, #608]	; (8013184 <tcp_process+0x590>)
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	f003 0310 	and.w	r3, r3, #16
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f000 8234 	beq.w	8013398 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f30:	4b95      	ldr	r3, [pc, #596]	; (8013188 <tcp_process+0x594>)
 8012f32:	6819      	ldr	r1, [r3, #0]
 8012f34:	4b95      	ldr	r3, [pc, #596]	; (801318c <tcp_process+0x598>)
 8012f36:	881b      	ldrh	r3, [r3, #0]
 8012f38:	461a      	mov	r2, r3
 8012f3a:	4b95      	ldr	r3, [pc, #596]	; (8013190 <tcp_process+0x59c>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f40:	4b94      	ldr	r3, [pc, #592]	; (8013194 <tcp_process+0x5a0>)
 8012f42:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f44:	885b      	ldrh	r3, [r3, #2]
 8012f46:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f48:	4a92      	ldr	r2, [pc, #584]	; (8013194 <tcp_process+0x5a0>)
 8012f4a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f4c:	8812      	ldrh	r2, [r2, #0]
 8012f4e:	b292      	uxth	r2, r2
 8012f50:	9202      	str	r2, [sp, #8]
 8012f52:	9301      	str	r3, [sp, #4]
 8012f54:	4b90      	ldr	r3, [pc, #576]	; (8013198 <tcp_process+0x5a4>)
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	4b90      	ldr	r3, [pc, #576]	; (801319c <tcp_process+0x5a8>)
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f003 f8e1 	bl	8016124 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f68:	2b05      	cmp	r3, #5
 8012f6a:	f200 8215 	bhi.w	8013398 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2200      	movs	r2, #0
 8012f72:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f002 feab 	bl	8015cd0 <tcp_rexmit_rto>
      break;
 8012f7a:	e20d      	b.n	8013398 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012f7c:	4b81      	ldr	r3, [pc, #516]	; (8013184 <tcp_process+0x590>)
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	f003 0310 	and.w	r3, r3, #16
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 80a1 	beq.w	80130cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f8a:	4b7f      	ldr	r3, [pc, #508]	; (8013188 <tcp_process+0x594>)
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f92:	1ad3      	subs	r3, r2, r3
 8012f94:	3b01      	subs	r3, #1
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	db7e      	blt.n	8013098 <tcp_process+0x4a4>
 8012f9a:	4b7b      	ldr	r3, [pc, #492]	; (8013188 <tcp_process+0x594>)
 8012f9c:	681a      	ldr	r2, [r3, #0]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	dc77      	bgt.n	8013098 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2204      	movs	r2, #4
 8012fac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d102      	bne.n	8012fbc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012fb6:	23fa      	movs	r3, #250	; 0xfa
 8012fb8:	76bb      	strb	r3, [r7, #26]
 8012fba:	e01d      	b.n	8012ff8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fc0:	699b      	ldr	r3, [r3, #24]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d106      	bne.n	8012fd4 <tcp_process+0x3e0>
 8012fc6:	4b76      	ldr	r3, [pc, #472]	; (80131a0 <tcp_process+0x5ac>)
 8012fc8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012fcc:	4975      	ldr	r1, [pc, #468]	; (80131a4 <tcp_process+0x5b0>)
 8012fce:	4876      	ldr	r0, [pc, #472]	; (80131a8 <tcp_process+0x5b4>)
 8012fd0:	f004 fcf6 	bl	80179c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fd8:	699b      	ldr	r3, [r3, #24]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00a      	beq.n	8012ff4 <tcp_process+0x400>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fe2:	699b      	ldr	r3, [r3, #24]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	6910      	ldr	r0, [r2, #16]
 8012fe8:	2200      	movs	r2, #0
 8012fea:	6879      	ldr	r1, [r7, #4]
 8012fec:	4798      	blx	r3
 8012fee:	4603      	mov	r3, r0
 8012ff0:	76bb      	strb	r3, [r7, #26]
 8012ff2:	e001      	b.n	8012ff8 <tcp_process+0x404>
 8012ff4:	23f0      	movs	r3, #240	; 0xf0
 8012ff6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012ff8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d00a      	beq.n	8013016 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013000:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013004:	f113 0f0d 	cmn.w	r3, #13
 8013008:	d002      	beq.n	8013010 <tcp_process+0x41c>
              tcp_abort(pcb);
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f7fd fcb4 	bl	8010978 <tcp_abort>
            }
            return ERR_ABRT;
 8013010:	f06f 030c 	mvn.w	r3, #12
 8013014:	e1ce      	b.n	80133b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 fae0 	bl	80135dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801301c:	4b63      	ldr	r3, [pc, #396]	; (80131ac <tcp_process+0x5b8>)
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d005      	beq.n	8013030 <tcp_process+0x43c>
            recv_acked--;
 8013024:	4b61      	ldr	r3, [pc, #388]	; (80131ac <tcp_process+0x5b8>)
 8013026:	881b      	ldrh	r3, [r3, #0]
 8013028:	3b01      	subs	r3, #1
 801302a:	b29a      	uxth	r2, r3
 801302c:	4b5f      	ldr	r3, [pc, #380]	; (80131ac <tcp_process+0x5b8>)
 801302e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013034:	009a      	lsls	r2, r3, #2
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	f241 111c 	movw	r1, #4380	; 0x111c
 8013040:	428b      	cmp	r3, r1
 8013042:	bf38      	it	cc
 8013044:	460b      	movcc	r3, r1
 8013046:	429a      	cmp	r2, r3
 8013048:	d204      	bcs.n	8013054 <tcp_process+0x460>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	b29b      	uxth	r3, r3
 8013052:	e00d      	b.n	8013070 <tcp_process+0x47c>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013058:	005b      	lsls	r3, r3, #1
 801305a:	f241 121c 	movw	r2, #4380	; 0x111c
 801305e:	4293      	cmp	r3, r2
 8013060:	d904      	bls.n	801306c <tcp_process+0x478>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	b29b      	uxth	r3, r3
 801306a:	e001      	b.n	8013070 <tcp_process+0x47c>
 801306c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013076:	4b4e      	ldr	r3, [pc, #312]	; (80131b0 <tcp_process+0x5bc>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	f003 0320 	and.w	r3, r3, #32
 801307e:	2b00      	cmp	r3, #0
 8013080:	d037      	beq.n	80130f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	8b5b      	ldrh	r3, [r3, #26]
 8013086:	f043 0302 	orr.w	r3, r3, #2
 801308a:	b29a      	uxth	r2, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2207      	movs	r2, #7
 8013094:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013096:	e02c      	b.n	80130f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013098:	4b3b      	ldr	r3, [pc, #236]	; (8013188 <tcp_process+0x594>)
 801309a:	6819      	ldr	r1, [r3, #0]
 801309c:	4b3b      	ldr	r3, [pc, #236]	; (801318c <tcp_process+0x598>)
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	461a      	mov	r2, r3
 80130a2:	4b3b      	ldr	r3, [pc, #236]	; (8013190 <tcp_process+0x59c>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130a8:	4b3a      	ldr	r3, [pc, #232]	; (8013194 <tcp_process+0x5a0>)
 80130aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130ac:	885b      	ldrh	r3, [r3, #2]
 80130ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130b0:	4a38      	ldr	r2, [pc, #224]	; (8013194 <tcp_process+0x5a0>)
 80130b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130b4:	8812      	ldrh	r2, [r2, #0]
 80130b6:	b292      	uxth	r2, r2
 80130b8:	9202      	str	r2, [sp, #8]
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	4b36      	ldr	r3, [pc, #216]	; (8013198 <tcp_process+0x5a4>)
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	4b36      	ldr	r3, [pc, #216]	; (801319c <tcp_process+0x5a8>)
 80130c2:	4602      	mov	r2, r0
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	f003 f82d 	bl	8016124 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80130ca:	e167      	b.n	801339c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80130cc:	4b2d      	ldr	r3, [pc, #180]	; (8013184 <tcp_process+0x590>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 0302 	and.w	r3, r3, #2
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f000 8161 	beq.w	801339c <tcp_process+0x7a8>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130de:	1e5a      	subs	r2, r3, #1
 80130e0:	4b2b      	ldr	r3, [pc, #172]	; (8013190 <tcp_process+0x59c>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	f040 8159 	bne.w	801339c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f002 fe12 	bl	8015d14 <tcp_rexmit>
      break;
 80130f0:	e154      	b.n	801339c <tcp_process+0x7a8>
 80130f2:	e153      	b.n	801339c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f000 fa71 	bl	80135dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80130fa:	4b2d      	ldr	r3, [pc, #180]	; (80131b0 <tcp_process+0x5bc>)
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	f003 0320 	and.w	r3, r3, #32
 8013102:	2b00      	cmp	r3, #0
 8013104:	f000 814c 	beq.w	80133a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	8b5b      	ldrh	r3, [r3, #26]
 801310c:	f043 0302 	orr.w	r3, r3, #2
 8013110:	b29a      	uxth	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2207      	movs	r2, #7
 801311a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801311c:	e140      	b.n	80133a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 fa5c 	bl	80135dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013124:	4b22      	ldr	r3, [pc, #136]	; (80131b0 <tcp_process+0x5bc>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	f003 0320 	and.w	r3, r3, #32
 801312c:	2b00      	cmp	r3, #0
 801312e:	d071      	beq.n	8013214 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013130:	4b14      	ldr	r3, [pc, #80]	; (8013184 <tcp_process+0x590>)
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	f003 0310 	and.w	r3, r3, #16
 8013138:	2b00      	cmp	r3, #0
 801313a:	d060      	beq.n	80131fe <tcp_process+0x60a>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013140:	4b11      	ldr	r3, [pc, #68]	; (8013188 <tcp_process+0x594>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	429a      	cmp	r2, r3
 8013146:	d15a      	bne.n	80131fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801314c:	2b00      	cmp	r3, #0
 801314e:	d156      	bne.n	80131fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	8b5b      	ldrh	r3, [r3, #26]
 8013154:	f043 0302 	orr.w	r3, r3, #2
 8013158:	b29a      	uxth	r2, r3
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7fe fdba 	bl	8011cd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013164:	4b13      	ldr	r3, [pc, #76]	; (80131b4 <tcp_process+0x5c0>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	429a      	cmp	r2, r3
 801316c:	d105      	bne.n	801317a <tcp_process+0x586>
 801316e:	4b11      	ldr	r3, [pc, #68]	; (80131b4 <tcp_process+0x5c0>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	4a0f      	ldr	r2, [pc, #60]	; (80131b4 <tcp_process+0x5c0>)
 8013176:	6013      	str	r3, [r2, #0]
 8013178:	e02e      	b.n	80131d8 <tcp_process+0x5e4>
 801317a:	4b0e      	ldr	r3, [pc, #56]	; (80131b4 <tcp_process+0x5c0>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	617b      	str	r3, [r7, #20]
 8013180:	e027      	b.n	80131d2 <tcp_process+0x5de>
 8013182:	bf00      	nop
 8013184:	240108ec 	.word	0x240108ec
 8013188:	240108e4 	.word	0x240108e4
 801318c:	240108ea 	.word	0x240108ea
 8013190:	240108e0 	.word	0x240108e0
 8013194:	240108d0 	.word	0x240108d0
 8013198:	24009de8 	.word	0x24009de8
 801319c:	24009dec 	.word	0x24009dec
 80131a0:	0801c06c 	.word	0x0801c06c
 80131a4:	0801c368 	.word	0x0801c368
 80131a8:	0801c114 	.word	0x0801c114
 80131ac:	240108e8 	.word	0x240108e8
 80131b0:	240108ed 	.word	0x240108ed
 80131b4:	240108b4 	.word	0x240108b4
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d104      	bne.n	80131cc <tcp_process+0x5d8>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	68da      	ldr	r2, [r3, #12]
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	60da      	str	r2, [r3, #12]
 80131ca:	e005      	b.n	80131d8 <tcp_process+0x5e4>
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	617b      	str	r3, [r7, #20]
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d1ef      	bne.n	80131b8 <tcp_process+0x5c4>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	60da      	str	r2, [r3, #12]
 80131de:	4b77      	ldr	r3, [pc, #476]	; (80133bc <tcp_process+0x7c8>)
 80131e0:	2201      	movs	r2, #1
 80131e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	220a      	movs	r2, #10
 80131e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80131ea:	4b75      	ldr	r3, [pc, #468]	; (80133c0 <tcp_process+0x7cc>)
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	60da      	str	r2, [r3, #12]
 80131f2:	4a73      	ldr	r2, [pc, #460]	; (80133c0 <tcp_process+0x7cc>)
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6013      	str	r3, [r2, #0]
 80131f8:	f003 fb06 	bl	8016808 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80131fc:	e0d2      	b.n	80133a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	8b5b      	ldrh	r3, [r3, #26]
 8013202:	f043 0302 	orr.w	r3, r3, #2
 8013206:	b29a      	uxth	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2208      	movs	r2, #8
 8013210:	751a      	strb	r2, [r3, #20]
      break;
 8013212:	e0c7      	b.n	80133a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013214:	4b6b      	ldr	r3, [pc, #428]	; (80133c4 <tcp_process+0x7d0>)
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	f003 0310 	and.w	r3, r3, #16
 801321c:	2b00      	cmp	r3, #0
 801321e:	f000 80c1 	beq.w	80133a4 <tcp_process+0x7b0>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013226:	4b68      	ldr	r3, [pc, #416]	; (80133c8 <tcp_process+0x7d4>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	429a      	cmp	r2, r3
 801322c:	f040 80ba 	bne.w	80133a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013234:	2b00      	cmp	r3, #0
 8013236:	f040 80b5 	bne.w	80133a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2206      	movs	r2, #6
 801323e:	751a      	strb	r2, [r3, #20]
      break;
 8013240:	e0b0      	b.n	80133a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f000 f9ca 	bl	80135dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013248:	4b60      	ldr	r3, [pc, #384]	; (80133cc <tcp_process+0x7d8>)
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	f003 0320 	and.w	r3, r3, #32
 8013250:	2b00      	cmp	r3, #0
 8013252:	f000 80a9 	beq.w	80133a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	8b5b      	ldrh	r3, [r3, #26]
 801325a:	f043 0302 	orr.w	r3, r3, #2
 801325e:	b29a      	uxth	r2, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7fe fd37 	bl	8011cd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801326a:	4b59      	ldr	r3, [pc, #356]	; (80133d0 <tcp_process+0x7dc>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	429a      	cmp	r2, r3
 8013272:	d105      	bne.n	8013280 <tcp_process+0x68c>
 8013274:	4b56      	ldr	r3, [pc, #344]	; (80133d0 <tcp_process+0x7dc>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	4a55      	ldr	r2, [pc, #340]	; (80133d0 <tcp_process+0x7dc>)
 801327c:	6013      	str	r3, [r2, #0]
 801327e:	e013      	b.n	80132a8 <tcp_process+0x6b4>
 8013280:	4b53      	ldr	r3, [pc, #332]	; (80133d0 <tcp_process+0x7dc>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	613b      	str	r3, [r7, #16]
 8013286:	e00c      	b.n	80132a2 <tcp_process+0x6ae>
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	429a      	cmp	r2, r3
 8013290:	d104      	bne.n	801329c <tcp_process+0x6a8>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	68da      	ldr	r2, [r3, #12]
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	60da      	str	r2, [r3, #12]
 801329a:	e005      	b.n	80132a8 <tcp_process+0x6b4>
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	613b      	str	r3, [r7, #16]
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1ef      	bne.n	8013288 <tcp_process+0x694>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2200      	movs	r2, #0
 80132ac:	60da      	str	r2, [r3, #12]
 80132ae:	4b43      	ldr	r3, [pc, #268]	; (80133bc <tcp_process+0x7c8>)
 80132b0:	2201      	movs	r2, #1
 80132b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	220a      	movs	r2, #10
 80132b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80132ba:	4b41      	ldr	r3, [pc, #260]	; (80133c0 <tcp_process+0x7cc>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	60da      	str	r2, [r3, #12]
 80132c2:	4a3f      	ldr	r2, [pc, #252]	; (80133c0 <tcp_process+0x7cc>)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6013      	str	r3, [r2, #0]
 80132c8:	f003 fa9e 	bl	8016808 <tcp_timer_needed>
      }
      break;
 80132cc:	e06c      	b.n	80133a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f000 f984 	bl	80135dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80132d4:	4b3b      	ldr	r3, [pc, #236]	; (80133c4 <tcp_process+0x7d0>)
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 0310 	and.w	r3, r3, #16
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d065      	beq.n	80133ac <tcp_process+0x7b8>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132e4:	4b38      	ldr	r3, [pc, #224]	; (80133c8 <tcp_process+0x7d4>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d15f      	bne.n	80133ac <tcp_process+0x7b8>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d15b      	bne.n	80133ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f7fe fcef 	bl	8011cd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80132fa:	4b35      	ldr	r3, [pc, #212]	; (80133d0 <tcp_process+0x7dc>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	429a      	cmp	r2, r3
 8013302:	d105      	bne.n	8013310 <tcp_process+0x71c>
 8013304:	4b32      	ldr	r3, [pc, #200]	; (80133d0 <tcp_process+0x7dc>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	4a31      	ldr	r2, [pc, #196]	; (80133d0 <tcp_process+0x7dc>)
 801330c:	6013      	str	r3, [r2, #0]
 801330e:	e013      	b.n	8013338 <tcp_process+0x744>
 8013310:	4b2f      	ldr	r3, [pc, #188]	; (80133d0 <tcp_process+0x7dc>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	60fb      	str	r3, [r7, #12]
 8013316:	e00c      	b.n	8013332 <tcp_process+0x73e>
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	68db      	ldr	r3, [r3, #12]
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	429a      	cmp	r2, r3
 8013320:	d104      	bne.n	801332c <tcp_process+0x738>
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	68da      	ldr	r2, [r3, #12]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	60da      	str	r2, [r3, #12]
 801332a:	e005      	b.n	8013338 <tcp_process+0x744>
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	60fb      	str	r3, [r7, #12]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d1ef      	bne.n	8013318 <tcp_process+0x724>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2200      	movs	r2, #0
 801333c:	60da      	str	r2, [r3, #12]
 801333e:	4b1f      	ldr	r3, [pc, #124]	; (80133bc <tcp_process+0x7c8>)
 8013340:	2201      	movs	r2, #1
 8013342:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	220a      	movs	r2, #10
 8013348:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801334a:	4b1d      	ldr	r3, [pc, #116]	; (80133c0 <tcp_process+0x7cc>)
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	60da      	str	r2, [r3, #12]
 8013352:	4a1b      	ldr	r2, [pc, #108]	; (80133c0 <tcp_process+0x7cc>)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6013      	str	r3, [r2, #0]
 8013358:	f003 fa56 	bl	8016808 <tcp_timer_needed>
      }
      break;
 801335c:	e026      	b.n	80133ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 f93c 	bl	80135dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013364:	4b17      	ldr	r3, [pc, #92]	; (80133c4 <tcp_process+0x7d0>)
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	f003 0310 	and.w	r3, r3, #16
 801336c:	2b00      	cmp	r3, #0
 801336e:	d01f      	beq.n	80133b0 <tcp_process+0x7bc>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013374:	4b14      	ldr	r3, [pc, #80]	; (80133c8 <tcp_process+0x7d4>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	429a      	cmp	r2, r3
 801337a:	d119      	bne.n	80133b0 <tcp_process+0x7bc>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013380:	2b00      	cmp	r3, #0
 8013382:	d115      	bne.n	80133b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013384:	4b11      	ldr	r3, [pc, #68]	; (80133cc <tcp_process+0x7d8>)
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f043 0310 	orr.w	r3, r3, #16
 801338c:	b2da      	uxtb	r2, r3
 801338e:	4b0f      	ldr	r3, [pc, #60]	; (80133cc <tcp_process+0x7d8>)
 8013390:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013392:	e00d      	b.n	80133b0 <tcp_process+0x7bc>
    default:
      break;
 8013394:	bf00      	nop
 8013396:	e00c      	b.n	80133b2 <tcp_process+0x7be>
      break;
 8013398:	bf00      	nop
 801339a:	e00a      	b.n	80133b2 <tcp_process+0x7be>
      break;
 801339c:	bf00      	nop
 801339e:	e008      	b.n	80133b2 <tcp_process+0x7be>
      break;
 80133a0:	bf00      	nop
 80133a2:	e006      	b.n	80133b2 <tcp_process+0x7be>
      break;
 80133a4:	bf00      	nop
 80133a6:	e004      	b.n	80133b2 <tcp_process+0x7be>
      break;
 80133a8:	bf00      	nop
 80133aa:	e002      	b.n	80133b2 <tcp_process+0x7be>
      break;
 80133ac:	bf00      	nop
 80133ae:	e000      	b.n	80133b2 <tcp_process+0x7be>
      break;
 80133b0:	bf00      	nop
  }
  return ERR_OK;
 80133b2:	2300      	movs	r3, #0
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3724      	adds	r7, #36	; 0x24
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd90      	pop	{r4, r7, pc}
 80133bc:	240108bc 	.word	0x240108bc
 80133c0:	240108b8 	.word	0x240108b8
 80133c4:	240108ec 	.word	0x240108ec
 80133c8:	240108e4 	.word	0x240108e4
 80133cc:	240108ed 	.word	0x240108ed
 80133d0:	240108b4 	.word	0x240108b4

080133d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80133d4:	b590      	push	{r4, r7, lr}
 80133d6:	b085      	sub	sp, #20
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d106      	bne.n	80133f2 <tcp_oos_insert_segment+0x1e>
 80133e4:	4b3b      	ldr	r3, [pc, #236]	; (80134d4 <tcp_oos_insert_segment+0x100>)
 80133e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80133ea:	493b      	ldr	r1, [pc, #236]	; (80134d8 <tcp_oos_insert_segment+0x104>)
 80133ec:	483b      	ldr	r0, [pc, #236]	; (80134dc <tcp_oos_insert_segment+0x108>)
 80133ee:	f004 fae7 	bl	80179c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	68db      	ldr	r3, [r3, #12]
 80133f6:	899b      	ldrh	r3, [r3, #12]
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f8 fab4 	bl	800b968 <lwip_htons>
 8013400:	4603      	mov	r3, r0
 8013402:	b2db      	uxtb	r3, r3
 8013404:	f003 0301 	and.w	r3, r3, #1
 8013408:	2b00      	cmp	r3, #0
 801340a:	d028      	beq.n	801345e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801340c:	6838      	ldr	r0, [r7, #0]
 801340e:	f7fe f989 	bl	8011724 <tcp_segs_free>
    next = NULL;
 8013412:	2300      	movs	r3, #0
 8013414:	603b      	str	r3, [r7, #0]
 8013416:	e056      	b.n	80134c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	68db      	ldr	r3, [r3, #12]
 801341c:	899b      	ldrh	r3, [r3, #12]
 801341e:	b29b      	uxth	r3, r3
 8013420:	4618      	mov	r0, r3
 8013422:	f7f8 faa1 	bl	800b968 <lwip_htons>
 8013426:	4603      	mov	r3, r0
 8013428:	b2db      	uxtb	r3, r3
 801342a:	f003 0301 	and.w	r3, r3, #1
 801342e:	2b00      	cmp	r3, #0
 8013430:	d00d      	beq.n	801344e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	899b      	ldrh	r3, [r3, #12]
 8013438:	b29c      	uxth	r4, r3
 801343a:	2001      	movs	r0, #1
 801343c:	f7f8 fa94 	bl	800b968 <lwip_htons>
 8013440:	4603      	mov	r3, r0
 8013442:	461a      	mov	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	4322      	orrs	r2, r4
 801344a:	b292      	uxth	r2, r2
 801344c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f7fe f978 	bl	801174e <tcp_seg_free>
    while (next &&
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d00e      	beq.n	8013482 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	891b      	ldrh	r3, [r3, #8]
 8013468:	461a      	mov	r2, r3
 801346a:	4b1d      	ldr	r3, [pc, #116]	; (80134e0 <tcp_oos_insert_segment+0x10c>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	441a      	add	r2, r3
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	685b      	ldr	r3, [r3, #4]
 8013476:	6839      	ldr	r1, [r7, #0]
 8013478:	8909      	ldrh	r1, [r1, #8]
 801347a:	440b      	add	r3, r1
 801347c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801347e:	2b00      	cmp	r3, #0
 8013480:	daca      	bge.n	8013418 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d01e      	beq.n	80134c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	891b      	ldrh	r3, [r3, #8]
 801348c:	461a      	mov	r2, r3
 801348e:	4b14      	ldr	r3, [pc, #80]	; (80134e0 <tcp_oos_insert_segment+0x10c>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	441a      	add	r2, r3
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801349c:	2b00      	cmp	r3, #0
 801349e:	dd12      	ble.n	80134c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	4b0d      	ldr	r3, [pc, #52]	; (80134e0 <tcp_oos_insert_segment+0x10c>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	b29a      	uxth	r2, r3
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	685a      	ldr	r2, [r3, #4]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	891b      	ldrh	r3, [r3, #8]
 80134be:	4619      	mov	r1, r3
 80134c0:	4610      	mov	r0, r2
 80134c2:	f7fc f887 	bl	800f5d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	683a      	ldr	r2, [r7, #0]
 80134ca:	601a      	str	r2, [r3, #0]
}
 80134cc:	bf00      	nop
 80134ce:	3714      	adds	r7, #20
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd90      	pop	{r4, r7, pc}
 80134d4:	0801c06c 	.word	0x0801c06c
 80134d8:	0801c388 	.word	0x0801c388
 80134dc:	0801c114 	.word	0x0801c114
 80134e0:	240108e0 	.word	0x240108e0

080134e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80134e4:	b5b0      	push	{r4, r5, r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80134f2:	e03e      	b.n	8013572 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	4618      	mov	r0, r3
 8013504:	f7fc fa78 	bl	800f9f8 <pbuf_clen>
 8013508:	4603      	mov	r3, r0
 801350a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013512:	8a7a      	ldrh	r2, [r7, #18]
 8013514:	429a      	cmp	r2, r3
 8013516:	d906      	bls.n	8013526 <tcp_free_acked_segments+0x42>
 8013518:	4b2a      	ldr	r3, [pc, #168]	; (80135c4 <tcp_free_acked_segments+0xe0>)
 801351a:	f240 4257 	movw	r2, #1111	; 0x457
 801351e:	492a      	ldr	r1, [pc, #168]	; (80135c8 <tcp_free_acked_segments+0xe4>)
 8013520:	482a      	ldr	r0, [pc, #168]	; (80135cc <tcp_free_acked_segments+0xe8>)
 8013522:	f004 fa4d 	bl	80179c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801352c:	8a7b      	ldrh	r3, [r7, #18]
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	b29a      	uxth	r2, r3
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	891a      	ldrh	r2, [r3, #8]
 801353c:	4b24      	ldr	r3, [pc, #144]	; (80135d0 <tcp_free_acked_segments+0xec>)
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	4413      	add	r3, r2
 8013542:	b29a      	uxth	r2, r3
 8013544:	4b22      	ldr	r3, [pc, #136]	; (80135d0 <tcp_free_acked_segments+0xec>)
 8013546:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013548:	6978      	ldr	r0, [r7, #20]
 801354a:	f7fe f900 	bl	801174e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013554:	2b00      	cmp	r3, #0
 8013556:	d00c      	beq.n	8013572 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d109      	bne.n	8013572 <tcp_free_acked_segments+0x8e>
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d106      	bne.n	8013572 <tcp_free_acked_segments+0x8e>
 8013564:	4b17      	ldr	r3, [pc, #92]	; (80135c4 <tcp_free_acked_segments+0xe0>)
 8013566:	f240 4261 	movw	r2, #1121	; 0x461
 801356a:	491a      	ldr	r1, [pc, #104]	; (80135d4 <tcp_free_acked_segments+0xf0>)
 801356c:	4817      	ldr	r0, [pc, #92]	; (80135cc <tcp_free_acked_segments+0xe8>)
 801356e:	f004 fa27 	bl	80179c0 <iprintf>
  while (seg_list != NULL &&
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d020      	beq.n	80135ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	68db      	ldr	r3, [r3, #12]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	4618      	mov	r0, r3
 8013580:	f7f8 fa07 	bl	800b992 <lwip_htonl>
 8013584:	4604      	mov	r4, r0
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	891b      	ldrh	r3, [r3, #8]
 801358a:	461d      	mov	r5, r3
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	899b      	ldrh	r3, [r3, #12]
 8013592:	b29b      	uxth	r3, r3
 8013594:	4618      	mov	r0, r3
 8013596:	f7f8 f9e7 	bl	800b968 <lwip_htons>
 801359a:	4603      	mov	r3, r0
 801359c:	b2db      	uxtb	r3, r3
 801359e:	f003 0303 	and.w	r3, r3, #3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <tcp_free_acked_segments+0xc6>
 80135a6:	2301      	movs	r3, #1
 80135a8:	e000      	b.n	80135ac <tcp_free_acked_segments+0xc8>
 80135aa:	2300      	movs	r3, #0
 80135ac:	442b      	add	r3, r5
 80135ae:	18e2      	adds	r2, r4, r3
 80135b0:	4b09      	ldr	r3, [pc, #36]	; (80135d8 <tcp_free_acked_segments+0xf4>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	dd9c      	ble.n	80134f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80135ba:	68bb      	ldr	r3, [r7, #8]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3718      	adds	r7, #24
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bdb0      	pop	{r4, r5, r7, pc}
 80135c4:	0801c06c 	.word	0x0801c06c
 80135c8:	0801c3b0 	.word	0x0801c3b0
 80135cc:	0801c114 	.word	0x0801c114
 80135d0:	240108e8 	.word	0x240108e8
 80135d4:	0801c3d8 	.word	0x0801c3d8
 80135d8:	240108e4 	.word	0x240108e4

080135dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80135dc:	b5b0      	push	{r4, r5, r7, lr}
 80135de:	b094      	sub	sp, #80	; 0x50
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80135e4:	2300      	movs	r3, #0
 80135e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d106      	bne.n	80135fc <tcp_receive+0x20>
 80135ee:	4b91      	ldr	r3, [pc, #580]	; (8013834 <tcp_receive+0x258>)
 80135f0:	f240 427b 	movw	r2, #1147	; 0x47b
 80135f4:	4990      	ldr	r1, [pc, #576]	; (8013838 <tcp_receive+0x25c>)
 80135f6:	4891      	ldr	r0, [pc, #580]	; (801383c <tcp_receive+0x260>)
 80135f8:	f004 f9e2 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	7d1b      	ldrb	r3, [r3, #20]
 8013600:	2b03      	cmp	r3, #3
 8013602:	d806      	bhi.n	8013612 <tcp_receive+0x36>
 8013604:	4b8b      	ldr	r3, [pc, #556]	; (8013834 <tcp_receive+0x258>)
 8013606:	f240 427c 	movw	r2, #1148	; 0x47c
 801360a:	498d      	ldr	r1, [pc, #564]	; (8013840 <tcp_receive+0x264>)
 801360c:	488b      	ldr	r0, [pc, #556]	; (801383c <tcp_receive+0x260>)
 801360e:	f004 f9d7 	bl	80179c0 <iprintf>

  if (flags & TCP_ACK) {
 8013612:	4b8c      	ldr	r3, [pc, #560]	; (8013844 <tcp_receive+0x268>)
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	f003 0310 	and.w	r3, r3, #16
 801361a:	2b00      	cmp	r3, #0
 801361c:	f000 8264 	beq.w	8013ae8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013626:	461a      	mov	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801362c:	4413      	add	r3, r2
 801362e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013634:	4b84      	ldr	r3, [pc, #528]	; (8013848 <tcp_receive+0x26c>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	db1b      	blt.n	8013676 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013642:	4b81      	ldr	r3, [pc, #516]	; (8013848 <tcp_receive+0x26c>)
 8013644:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013646:	429a      	cmp	r2, r3
 8013648:	d106      	bne.n	8013658 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801364e:	4b7f      	ldr	r3, [pc, #508]	; (801384c <tcp_receive+0x270>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	1ad3      	subs	r3, r2, r3
 8013654:	2b00      	cmp	r3, #0
 8013656:	db0e      	blt.n	8013676 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801365c:	4b7b      	ldr	r3, [pc, #492]	; (801384c <tcp_receive+0x270>)
 801365e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013660:	429a      	cmp	r2, r3
 8013662:	d125      	bne.n	80136b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013664:	4b7a      	ldr	r3, [pc, #488]	; (8013850 <tcp_receive+0x274>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	89db      	ldrh	r3, [r3, #14]
 801366a:	b29a      	uxth	r2, r3
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013672:	429a      	cmp	r2, r3
 8013674:	d91c      	bls.n	80136b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013676:	4b76      	ldr	r3, [pc, #472]	; (8013850 <tcp_receive+0x274>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	89db      	ldrh	r3, [r3, #14]
 801367c:	b29a      	uxth	r2, r3
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013690:	429a      	cmp	r2, r3
 8013692:	d205      	bcs.n	80136a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80136a0:	4b69      	ldr	r3, [pc, #420]	; (8013848 <tcp_receive+0x26c>)
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80136a8:	4b68      	ldr	r3, [pc, #416]	; (801384c <tcp_receive+0x270>)
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80136b0:	4b66      	ldr	r3, [pc, #408]	; (801384c <tcp_receive+0x270>)
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136b8:	1ad3      	subs	r3, r2, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	dc58      	bgt.n	8013770 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80136be:	4b65      	ldr	r3, [pc, #404]	; (8013854 <tcp_receive+0x278>)
 80136c0:	881b      	ldrh	r3, [r3, #0]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d14b      	bne.n	801375e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80136d0:	4413      	add	r3, r2
 80136d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d142      	bne.n	801375e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80136de:	2b00      	cmp	r3, #0
 80136e0:	db3d      	blt.n	801375e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80136e6:	4b59      	ldr	r3, [pc, #356]	; (801384c <tcp_receive+0x270>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d137      	bne.n	801375e <tcp_receive+0x182>
              found_dupack = 1;
 80136ee:	2301      	movs	r3, #1
 80136f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80136f8:	2bff      	cmp	r3, #255	; 0xff
 80136fa:	d007      	beq.n	801370c <tcp_receive+0x130>
                ++pcb->dupacks;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013702:	3301      	adds	r3, #1
 8013704:	b2da      	uxtb	r2, r3
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013712:	2b03      	cmp	r3, #3
 8013714:	d91b      	bls.n	801374e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013720:	4413      	add	r3, r2
 8013722:	b29a      	uxth	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801372a:	429a      	cmp	r2, r3
 801372c:	d30a      	bcc.n	8013744 <tcp_receive+0x168>
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013738:	4413      	add	r3, r2
 801373a:	b29a      	uxth	r2, r3
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013742:	e004      	b.n	801374e <tcp_receive+0x172>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801374a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013754:	2b02      	cmp	r3, #2
 8013756:	d902      	bls.n	801375e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f002 fb47 	bl	8015dec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013760:	2b00      	cmp	r3, #0
 8013762:	f040 8161 	bne.w	8013a28 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2200      	movs	r2, #0
 801376a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801376e:	e15b      	b.n	8013a28 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013770:	4b36      	ldr	r3, [pc, #216]	; (801384c <tcp_receive+0x270>)
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013778:	1ad3      	subs	r3, r2, r3
 801377a:	3b01      	subs	r3, #1
 801377c:	2b00      	cmp	r3, #0
 801377e:	f2c0 814e 	blt.w	8013a1e <tcp_receive+0x442>
 8013782:	4b32      	ldr	r3, [pc, #200]	; (801384c <tcp_receive+0x270>)
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	f300 8146 	bgt.w	8013a1e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	8b5b      	ldrh	r3, [r3, #26]
 8013796:	f003 0304 	and.w	r3, r3, #4
 801379a:	2b00      	cmp	r3, #0
 801379c:	d010      	beq.n	80137c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	8b5b      	ldrh	r3, [r3, #26]
 80137a2:	f023 0304 	bic.w	r3, r3, #4
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2200      	movs	r2, #0
 80137bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2200      	movs	r2, #0
 80137c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137ce:	10db      	asrs	r3, r3, #3
 80137d0:	b21b      	sxth	r3, r3
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137da:	b29b      	uxth	r3, r3
 80137dc:	4413      	add	r3, r2
 80137de:	b29b      	uxth	r3, r3
 80137e0:	b21a      	sxth	r2, r3
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80137e8:	4b18      	ldr	r3, [pc, #96]	; (801384c <tcp_receive+0x270>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	1ad3      	subs	r3, r2, r3
 80137f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2200      	movs	r2, #0
 80137fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013800:	4b12      	ldr	r3, [pc, #72]	; (801384c <tcp_receive+0x270>)
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	7d1b      	ldrb	r3, [r3, #20]
 801380c:	2b03      	cmp	r3, #3
 801380e:	f240 8097 	bls.w	8013940 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801381e:	429a      	cmp	r2, r3
 8013820:	d245      	bcs.n	80138ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	8b5b      	ldrh	r3, [r3, #26]
 8013826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801382a:	2b00      	cmp	r3, #0
 801382c:	d014      	beq.n	8013858 <tcp_receive+0x27c>
 801382e:	2301      	movs	r3, #1
 8013830:	e013      	b.n	801385a <tcp_receive+0x27e>
 8013832:	bf00      	nop
 8013834:	0801c06c 	.word	0x0801c06c
 8013838:	0801c3f8 	.word	0x0801c3f8
 801383c:	0801c114 	.word	0x0801c114
 8013840:	0801c414 	.word	0x0801c414
 8013844:	240108ec 	.word	0x240108ec
 8013848:	240108e0 	.word	0x240108e0
 801384c:	240108e4 	.word	0x240108e4
 8013850:	240108d0 	.word	0x240108d0
 8013854:	240108ea 	.word	0x240108ea
 8013858:	2302      	movs	r3, #2
 801385a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801385e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013868:	fb12 f303 	smulbb	r3, r2, r3
 801386c:	b29b      	uxth	r3, r3
 801386e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013870:	4293      	cmp	r3, r2
 8013872:	bf28      	it	cs
 8013874:	4613      	movcs	r3, r2
 8013876:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801387e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013880:	4413      	add	r3, r2
 8013882:	b29a      	uxth	r2, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801388a:	429a      	cmp	r2, r3
 801388c:	d309      	bcc.n	80138a2 <tcp_receive+0x2c6>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013894:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013896:	4413      	add	r3, r2
 8013898:	b29a      	uxth	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80138a0:	e04e      	b.n	8013940 <tcp_receive+0x364>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80138ac:	e048      	b.n	8013940 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80138b6:	4413      	add	r3, r2
 80138b8:	b29a      	uxth	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d309      	bcc.n	80138d8 <tcp_receive+0x2fc>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80138cc:	4413      	add	r3, r2
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80138d6:	e004      	b.n	80138e2 <tcp_receive+0x306>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d326      	bcc.n	8013940 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	b29a      	uxth	r2, r3
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013912:	4413      	add	r3, r2
 8013914:	b29a      	uxth	r2, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801391c:	429a      	cmp	r2, r3
 801391e:	d30a      	bcc.n	8013936 <tcp_receive+0x35a>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801392a:	4413      	add	r3, r2
 801392c:	b29a      	uxth	r2, r3
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013934:	e004      	b.n	8013940 <tcp_receive+0x364>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801393c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013948:	4a98      	ldr	r2, [pc, #608]	; (8013bac <tcp_receive+0x5d0>)
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff fdca 	bl	80134e4 <tcp_free_acked_segments>
 8013950:	4602      	mov	r2, r0
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801395e:	4a94      	ldr	r2, [pc, #592]	; (8013bb0 <tcp_receive+0x5d4>)
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7ff fdbf 	bl	80134e4 <tcp_free_acked_segments>
 8013966:	4602      	mov	r2, r0
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013970:	2b00      	cmp	r3, #0
 8013972:	d104      	bne.n	801397e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801397a:	861a      	strh	r2, [r3, #48]	; 0x30
 801397c:	e002      	b.n	8013984 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2200      	movs	r2, #0
 8013988:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801398e:	2b00      	cmp	r3, #0
 8013990:	d103      	bne.n	801399a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2200      	movs	r2, #0
 8013996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80139a0:	4b84      	ldr	r3, [pc, #528]	; (8013bb4 <tcp_receive+0x5d8>)
 80139a2:	881b      	ldrh	r3, [r3, #0]
 80139a4:	4413      	add	r3, r2
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8b5b      	ldrh	r3, [r3, #26]
 80139b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d035      	beq.n	8013a26 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d118      	bne.n	80139f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00c      	beq.n	80139e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139d2:	68db      	ldr	r3, [r3, #12]
 80139d4:	685b      	ldr	r3, [r3, #4]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7f7 ffdb 	bl	800b992 <lwip_htonl>
 80139dc:	4603      	mov	r3, r0
 80139de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	dc20      	bgt.n	8013a26 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	8b5b      	ldrh	r3, [r3, #26]
 80139e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80139f2:	e018      	b.n	8013a26 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139fc:	68db      	ldr	r3, [r3, #12]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7f7 ffc6 	bl	800b992 <lwip_htonl>
 8013a06:	4603      	mov	r3, r0
 8013a08:	1ae3      	subs	r3, r4, r3
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	dc0b      	bgt.n	8013a26 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	8b5b      	ldrh	r3, [r3, #26]
 8013a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a1c:	e003      	b.n	8013a26 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f002 fbd2 	bl	80161c8 <tcp_send_empty_ack>
 8013a24:	e000      	b.n	8013a28 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a26:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d05b      	beq.n	8013ae8 <tcp_receive+0x50c>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a34:	4b60      	ldr	r3, [pc, #384]	; (8013bb8 <tcp_receive+0x5dc>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	1ad3      	subs	r3, r2, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	da54      	bge.n	8013ae8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013a3e:	4b5f      	ldr	r3, [pc, #380]	; (8013bbc <tcp_receive+0x5e0>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013a52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a5c:	10db      	asrs	r3, r3, #3
 8013a5e:	b21b      	sxth	r3, r3
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a76:	4413      	add	r3, r2
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	b21a      	sxth	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013a80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	da05      	bge.n	8013a94 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013a8c:	425b      	negs	r3, r3
 8013a8e:	b29b      	uxth	r3, r3
 8013a90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013a94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a9e:	109b      	asrs	r3, r3, #2
 8013aa0:	b21b      	sxth	r3, r3
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	1ad3      	subs	r3, r2, r3
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ab2:	b29a      	uxth	r2, r3
 8013ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013ab8:	4413      	add	r3, r2
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	b21a      	sxth	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ac8:	10db      	asrs	r3, r3, #3
 8013aca:	b21b      	sxth	r3, r3
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	4413      	add	r3, r2
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	b21a      	sxth	r2, r3
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013ae8:	4b35      	ldr	r3, [pc, #212]	; (8013bc0 <tcp_receive+0x5e4>)
 8013aea:	881b      	ldrh	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	f000 84e2 	beq.w	80144b6 <tcp_receive+0xeda>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	7d1b      	ldrb	r3, [r3, #20]
 8013af6:	2b06      	cmp	r3, #6
 8013af8:	f200 84dd 	bhi.w	80144b6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b00:	4b30      	ldr	r3, [pc, #192]	; (8013bc4 <tcp_receive+0x5e8>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	1ad3      	subs	r3, r2, r3
 8013b06:	3b01      	subs	r3, #1
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f2c0 808f 	blt.w	8013c2c <tcp_receive+0x650>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b12:	4b2b      	ldr	r3, [pc, #172]	; (8013bc0 <tcp_receive+0x5e4>)
 8013b14:	881b      	ldrh	r3, [r3, #0]
 8013b16:	4619      	mov	r1, r3
 8013b18:	4b2a      	ldr	r3, [pc, #168]	; (8013bc4 <tcp_receive+0x5e8>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	440b      	add	r3, r1
 8013b1e:	1ad3      	subs	r3, r2, r3
 8013b20:	3301      	adds	r3, #1
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	f300 8082 	bgt.w	8013c2c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013b28:	4b27      	ldr	r3, [pc, #156]	; (8013bc8 <tcp_receive+0x5ec>)
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b32:	4b24      	ldr	r3, [pc, #144]	; (8013bc4 <tcp_receive+0x5e8>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	1ad3      	subs	r3, r2, r3
 8013b38:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013b3a:	4b23      	ldr	r3, [pc, #140]	; (8013bc8 <tcp_receive+0x5ec>)
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d106      	bne.n	8013b50 <tcp_receive+0x574>
 8013b42:	4b22      	ldr	r3, [pc, #136]	; (8013bcc <tcp_receive+0x5f0>)
 8013b44:	f240 5294 	movw	r2, #1428	; 0x594
 8013b48:	4921      	ldr	r1, [pc, #132]	; (8013bd0 <tcp_receive+0x5f4>)
 8013b4a:	4822      	ldr	r0, [pc, #136]	; (8013bd4 <tcp_receive+0x5f8>)
 8013b4c:	f003 ff38 	bl	80179c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d906      	bls.n	8013b68 <tcp_receive+0x58c>
 8013b5a:	4b1c      	ldr	r3, [pc, #112]	; (8013bcc <tcp_receive+0x5f0>)
 8013b5c:	f240 5295 	movw	r2, #1429	; 0x595
 8013b60:	491d      	ldr	r1, [pc, #116]	; (8013bd8 <tcp_receive+0x5fc>)
 8013b62:	481c      	ldr	r0, [pc, #112]	; (8013bd4 <tcp_receive+0x5f8>)
 8013b64:	f003 ff2c 	bl	80179c0 <iprintf>
      off = (u16_t)off32;
 8013b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013b6e:	4b16      	ldr	r3, [pc, #88]	; (8013bc8 <tcp_receive+0x5ec>)
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	891b      	ldrh	r3, [r3, #8]
 8013b74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d906      	bls.n	8013b8a <tcp_receive+0x5ae>
 8013b7c:	4b13      	ldr	r3, [pc, #76]	; (8013bcc <tcp_receive+0x5f0>)
 8013b7e:	f240 5297 	movw	r2, #1431	; 0x597
 8013b82:	4916      	ldr	r1, [pc, #88]	; (8013bdc <tcp_receive+0x600>)
 8013b84:	4813      	ldr	r0, [pc, #76]	; (8013bd4 <tcp_receive+0x5f8>)
 8013b86:	f003 ff1b 	bl	80179c0 <iprintf>
      inseg.len -= off;
 8013b8a:	4b0f      	ldr	r3, [pc, #60]	; (8013bc8 <tcp_receive+0x5ec>)
 8013b8c:	891a      	ldrh	r2, [r3, #8]
 8013b8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b92:	1ad3      	subs	r3, r2, r3
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	4b0c      	ldr	r3, [pc, #48]	; (8013bc8 <tcp_receive+0x5ec>)
 8013b98:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013b9a:	4b0b      	ldr	r3, [pc, #44]	; (8013bc8 <tcp_receive+0x5ec>)
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	891a      	ldrh	r2, [r3, #8]
 8013ba0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013ba8:	e02a      	b.n	8013c00 <tcp_receive+0x624>
 8013baa:	bf00      	nop
 8013bac:	0801c430 	.word	0x0801c430
 8013bb0:	0801c438 	.word	0x0801c438
 8013bb4:	240108e8 	.word	0x240108e8
 8013bb8:	240108e4 	.word	0x240108e4
 8013bbc:	240108a8 	.word	0x240108a8
 8013bc0:	240108ea 	.word	0x240108ea
 8013bc4:	240108e0 	.word	0x240108e0
 8013bc8:	240108c0 	.word	0x240108c0
 8013bcc:	0801c06c 	.word	0x0801c06c
 8013bd0:	0801c440 	.word	0x0801c440
 8013bd4:	0801c114 	.word	0x0801c114
 8013bd8:	0801c450 	.word	0x0801c450
 8013bdc:	0801c460 	.word	0x0801c460
        off -= p->len;
 8013be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be2:	895b      	ldrh	r3, [r3, #10]
 8013be4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013bf2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c02:	895b      	ldrh	r3, [r3, #10]
 8013c04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d8e9      	bhi.n	8013be0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013c0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c10:	4619      	mov	r1, r3
 8013c12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013c14:	f7fb fddc 	bl	800f7d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c1c:	4a91      	ldr	r2, [pc, #580]	; (8013e64 <tcp_receive+0x888>)
 8013c1e:	6013      	str	r3, [r2, #0]
 8013c20:	4b91      	ldr	r3, [pc, #580]	; (8013e68 <tcp_receive+0x88c>)
 8013c22:	68db      	ldr	r3, [r3, #12]
 8013c24:	4a8f      	ldr	r2, [pc, #572]	; (8013e64 <tcp_receive+0x888>)
 8013c26:	6812      	ldr	r2, [r2, #0]
 8013c28:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013c2a:	e00d      	b.n	8013c48 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013c2c:	4b8d      	ldr	r3, [pc, #564]	; (8013e64 <tcp_receive+0x888>)
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c34:	1ad3      	subs	r3, r2, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	da06      	bge.n	8013c48 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	8b5b      	ldrh	r3, [r3, #26]
 8013c3e:	f043 0302 	orr.w	r3, r3, #2
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013c48:	4b86      	ldr	r3, [pc, #536]	; (8013e64 <tcp_receive+0x888>)
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c50:	1ad3      	subs	r3, r2, r3
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	f2c0 842a 	blt.w	80144ac <tcp_receive+0xed0>
 8013c58:	4b82      	ldr	r3, [pc, #520]	; (8013e64 <tcp_receive+0x888>)
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c60:	6879      	ldr	r1, [r7, #4]
 8013c62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c64:	440b      	add	r3, r1
 8013c66:	1ad3      	subs	r3, r2, r3
 8013c68:	3301      	adds	r3, #1
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f300 841e 	bgt.w	80144ac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c74:	4b7b      	ldr	r3, [pc, #492]	; (8013e64 <tcp_receive+0x888>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	f040 829a 	bne.w	80141b2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013c7e:	4b7a      	ldr	r3, [pc, #488]	; (8013e68 <tcp_receive+0x88c>)
 8013c80:	891c      	ldrh	r4, [r3, #8]
 8013c82:	4b79      	ldr	r3, [pc, #484]	; (8013e68 <tcp_receive+0x88c>)
 8013c84:	68db      	ldr	r3, [r3, #12]
 8013c86:	899b      	ldrh	r3, [r3, #12]
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7f7 fe6c 	bl	800b968 <lwip_htons>
 8013c90:	4603      	mov	r3, r0
 8013c92:	b2db      	uxtb	r3, r3
 8013c94:	f003 0303 	and.w	r3, r3, #3
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <tcp_receive+0x6c4>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e000      	b.n	8013ca2 <tcp_receive+0x6c6>
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	4423      	add	r3, r4
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	4b71      	ldr	r3, [pc, #452]	; (8013e6c <tcp_receive+0x890>)
 8013ca8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013cae:	4b6f      	ldr	r3, [pc, #444]	; (8013e6c <tcp_receive+0x890>)
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d275      	bcs.n	8013da2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013cb6:	4b6c      	ldr	r3, [pc, #432]	; (8013e68 <tcp_receive+0x88c>)
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	899b      	ldrh	r3, [r3, #12]
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7f7 fe52 	bl	800b968 <lwip_htons>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	f003 0301 	and.w	r3, r3, #1
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d01f      	beq.n	8013d10 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013cd0:	4b65      	ldr	r3, [pc, #404]	; (8013e68 <tcp_receive+0x88c>)
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	899b      	ldrh	r3, [r3, #12]
 8013cd6:	b29b      	uxth	r3, r3
 8013cd8:	b21b      	sxth	r3, r3
 8013cda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013cde:	b21c      	sxth	r4, r3
 8013ce0:	4b61      	ldr	r3, [pc, #388]	; (8013e68 <tcp_receive+0x88c>)
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	899b      	ldrh	r3, [r3, #12]
 8013ce6:	b29b      	uxth	r3, r3
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f7 fe3d 	bl	800b968 <lwip_htons>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7f7 fe34 	bl	800b968 <lwip_htons>
 8013d00:	4603      	mov	r3, r0
 8013d02:	b21b      	sxth	r3, r3
 8013d04:	4323      	orrs	r3, r4
 8013d06:	b21a      	sxth	r2, r3
 8013d08:	4b57      	ldr	r3, [pc, #348]	; (8013e68 <tcp_receive+0x88c>)
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	b292      	uxth	r2, r2
 8013d0e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d14:	4b54      	ldr	r3, [pc, #336]	; (8013e68 <tcp_receive+0x88c>)
 8013d16:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013d18:	4b53      	ldr	r3, [pc, #332]	; (8013e68 <tcp_receive+0x88c>)
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	899b      	ldrh	r3, [r3, #12]
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f7 fe21 	bl	800b968 <lwip_htons>
 8013d26:	4603      	mov	r3, r0
 8013d28:	b2db      	uxtb	r3, r3
 8013d2a:	f003 0302 	and.w	r3, r3, #2
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d005      	beq.n	8013d3e <tcp_receive+0x762>
            inseg.len -= 1;
 8013d32:	4b4d      	ldr	r3, [pc, #308]	; (8013e68 <tcp_receive+0x88c>)
 8013d34:	891b      	ldrh	r3, [r3, #8]
 8013d36:	3b01      	subs	r3, #1
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	4b4b      	ldr	r3, [pc, #300]	; (8013e68 <tcp_receive+0x88c>)
 8013d3c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013d3e:	4b4a      	ldr	r3, [pc, #296]	; (8013e68 <tcp_receive+0x88c>)
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	4a49      	ldr	r2, [pc, #292]	; (8013e68 <tcp_receive+0x88c>)
 8013d44:	8912      	ldrh	r2, [r2, #8]
 8013d46:	4611      	mov	r1, r2
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fb fc43 	bl	800f5d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013d4e:	4b46      	ldr	r3, [pc, #280]	; (8013e68 <tcp_receive+0x88c>)
 8013d50:	891c      	ldrh	r4, [r3, #8]
 8013d52:	4b45      	ldr	r3, [pc, #276]	; (8013e68 <tcp_receive+0x88c>)
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	899b      	ldrh	r3, [r3, #12]
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7f7 fe04 	bl	800b968 <lwip_htons>
 8013d60:	4603      	mov	r3, r0
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	f003 0303 	and.w	r3, r3, #3
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d001      	beq.n	8013d70 <tcp_receive+0x794>
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e000      	b.n	8013d72 <tcp_receive+0x796>
 8013d70:	2300      	movs	r3, #0
 8013d72:	4423      	add	r3, r4
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	4b3d      	ldr	r3, [pc, #244]	; (8013e6c <tcp_receive+0x890>)
 8013d78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d7a:	4b3c      	ldr	r3, [pc, #240]	; (8013e6c <tcp_receive+0x890>)
 8013d7c:	881b      	ldrh	r3, [r3, #0]
 8013d7e:	461a      	mov	r2, r3
 8013d80:	4b38      	ldr	r3, [pc, #224]	; (8013e64 <tcp_receive+0x888>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	441a      	add	r2, r3
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d8a:	6879      	ldr	r1, [r7, #4]
 8013d8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d8e:	440b      	add	r3, r1
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d006      	beq.n	8013da2 <tcp_receive+0x7c6>
 8013d94:	4b36      	ldr	r3, [pc, #216]	; (8013e70 <tcp_receive+0x894>)
 8013d96:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013d9a:	4936      	ldr	r1, [pc, #216]	; (8013e74 <tcp_receive+0x898>)
 8013d9c:	4836      	ldr	r0, [pc, #216]	; (8013e78 <tcp_receive+0x89c>)
 8013d9e:	f003 fe0f 	bl	80179c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f000 80e7 	beq.w	8013f7a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013dac:	4b2e      	ldr	r3, [pc, #184]	; (8013e68 <tcp_receive+0x88c>)
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	899b      	ldrh	r3, [r3, #12]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7f7 fdd7 	bl	800b968 <lwip_htons>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	f003 0301 	and.w	r3, r3, #1
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d010      	beq.n	8013de8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013dc6:	e00a      	b.n	8013dde <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dcc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dd2:	681a      	ldr	r2, [r3, #0]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f7fd fcb8 	bl	801174e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d1f0      	bne.n	8013dc8 <tcp_receive+0x7ec>
 8013de6:	e0c8      	b.n	8013f7a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013dee:	e052      	b.n	8013e96 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	899b      	ldrh	r3, [r3, #12]
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f7 fdb5 	bl	800b968 <lwip_htons>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	f003 0301 	and.w	r3, r3, #1
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d03d      	beq.n	8013e86 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013e0a:	4b17      	ldr	r3, [pc, #92]	; (8013e68 <tcp_receive+0x88c>)
 8013e0c:	68db      	ldr	r3, [r3, #12]
 8013e0e:	899b      	ldrh	r3, [r3, #12]
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7f7 fda8 	bl	800b968 <lwip_htons>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d130      	bne.n	8013e86 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013e24:	4b10      	ldr	r3, [pc, #64]	; (8013e68 <tcp_receive+0x88c>)
 8013e26:	68db      	ldr	r3, [r3, #12]
 8013e28:	899b      	ldrh	r3, [r3, #12]
 8013e2a:	b29c      	uxth	r4, r3
 8013e2c:	2001      	movs	r0, #1
 8013e2e:	f7f7 fd9b 	bl	800b968 <lwip_htons>
 8013e32:	4603      	mov	r3, r0
 8013e34:	461a      	mov	r2, r3
 8013e36:	4b0c      	ldr	r3, [pc, #48]	; (8013e68 <tcp_receive+0x88c>)
 8013e38:	68db      	ldr	r3, [r3, #12]
 8013e3a:	4322      	orrs	r2, r4
 8013e3c:	b292      	uxth	r2, r2
 8013e3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013e40:	4b09      	ldr	r3, [pc, #36]	; (8013e68 <tcp_receive+0x88c>)
 8013e42:	891c      	ldrh	r4, [r3, #8]
 8013e44:	4b08      	ldr	r3, [pc, #32]	; (8013e68 <tcp_receive+0x88c>)
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	899b      	ldrh	r3, [r3, #12]
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7f7 fd8b 	bl	800b968 <lwip_htons>
 8013e52:	4603      	mov	r3, r0
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	f003 0303 	and.w	r3, r3, #3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d00e      	beq.n	8013e7c <tcp_receive+0x8a0>
 8013e5e:	2301      	movs	r3, #1
 8013e60:	e00d      	b.n	8013e7e <tcp_receive+0x8a2>
 8013e62:	bf00      	nop
 8013e64:	240108e0 	.word	0x240108e0
 8013e68:	240108c0 	.word	0x240108c0
 8013e6c:	240108ea 	.word	0x240108ea
 8013e70:	0801c06c 	.word	0x0801c06c
 8013e74:	0801c470 	.word	0x0801c470
 8013e78:	0801c114 	.word	0x0801c114
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4423      	add	r3, r4
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	4b98      	ldr	r3, [pc, #608]	; (80140e4 <tcp_receive+0xb08>)
 8013e84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e88:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013e90:	6938      	ldr	r0, [r7, #16]
 8013e92:	f7fd fc5c 	bl	801174e <tcp_seg_free>
            while (next &&
 8013e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d00e      	beq.n	8013eba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013e9c:	4b91      	ldr	r3, [pc, #580]	; (80140e4 <tcp_receive+0xb08>)
 8013e9e:	881b      	ldrh	r3, [r3, #0]
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	4b91      	ldr	r3, [pc, #580]	; (80140e8 <tcp_receive+0xb0c>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	441a      	add	r2, r3
 8013ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013eb0:	8909      	ldrh	r1, [r1, #8]
 8013eb2:	440b      	add	r3, r1
 8013eb4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	da9a      	bge.n	8013df0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d059      	beq.n	8013f74 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013ec0:	4b88      	ldr	r3, [pc, #544]	; (80140e4 <tcp_receive+0xb08>)
 8013ec2:	881b      	ldrh	r3, [r3, #0]
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	4b88      	ldr	r3, [pc, #544]	; (80140e8 <tcp_receive+0xb0c>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	441a      	add	r2, r3
 8013ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	dd4d      	ble.n	8013f74 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	4b81      	ldr	r3, [pc, #516]	; (80140e8 <tcp_receive+0xb0c>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	1ad3      	subs	r3, r2, r3
 8013ee8:	b29a      	uxth	r2, r3
 8013eea:	4b80      	ldr	r3, [pc, #512]	; (80140ec <tcp_receive+0xb10>)
 8013eec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013eee:	4b7f      	ldr	r3, [pc, #508]	; (80140ec <tcp_receive+0xb10>)
 8013ef0:	68db      	ldr	r3, [r3, #12]
 8013ef2:	899b      	ldrh	r3, [r3, #12]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7f7 fd36 	bl	800b968 <lwip_htons>
 8013efc:	4603      	mov	r3, r0
 8013efe:	b2db      	uxtb	r3, r3
 8013f00:	f003 0302 	and.w	r3, r3, #2
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d005      	beq.n	8013f14 <tcp_receive+0x938>
                inseg.len -= 1;
 8013f08:	4b78      	ldr	r3, [pc, #480]	; (80140ec <tcp_receive+0xb10>)
 8013f0a:	891b      	ldrh	r3, [r3, #8]
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	4b76      	ldr	r3, [pc, #472]	; (80140ec <tcp_receive+0xb10>)
 8013f12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013f14:	4b75      	ldr	r3, [pc, #468]	; (80140ec <tcp_receive+0xb10>)
 8013f16:	685b      	ldr	r3, [r3, #4]
 8013f18:	4a74      	ldr	r2, [pc, #464]	; (80140ec <tcp_receive+0xb10>)
 8013f1a:	8912      	ldrh	r2, [r2, #8]
 8013f1c:	4611      	mov	r1, r2
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fb fb58 	bl	800f5d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013f24:	4b71      	ldr	r3, [pc, #452]	; (80140ec <tcp_receive+0xb10>)
 8013f26:	891c      	ldrh	r4, [r3, #8]
 8013f28:	4b70      	ldr	r3, [pc, #448]	; (80140ec <tcp_receive+0xb10>)
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	899b      	ldrh	r3, [r3, #12]
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7f7 fd19 	bl	800b968 <lwip_htons>
 8013f36:	4603      	mov	r3, r0
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	f003 0303 	and.w	r3, r3, #3
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d001      	beq.n	8013f46 <tcp_receive+0x96a>
 8013f42:	2301      	movs	r3, #1
 8013f44:	e000      	b.n	8013f48 <tcp_receive+0x96c>
 8013f46:	2300      	movs	r3, #0
 8013f48:	4423      	add	r3, r4
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	4b65      	ldr	r3, [pc, #404]	; (80140e4 <tcp_receive+0xb08>)
 8013f4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013f50:	4b64      	ldr	r3, [pc, #400]	; (80140e4 <tcp_receive+0xb08>)
 8013f52:	881b      	ldrh	r3, [r3, #0]
 8013f54:	461a      	mov	r2, r3
 8013f56:	4b64      	ldr	r3, [pc, #400]	; (80140e8 <tcp_receive+0xb0c>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	441a      	add	r2, r3
 8013f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f5e:	68db      	ldr	r3, [r3, #12]
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d006      	beq.n	8013f74 <tcp_receive+0x998>
 8013f66:	4b62      	ldr	r3, [pc, #392]	; (80140f0 <tcp_receive+0xb14>)
 8013f68:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013f6c:	4961      	ldr	r1, [pc, #388]	; (80140f4 <tcp_receive+0xb18>)
 8013f6e:	4862      	ldr	r0, [pc, #392]	; (80140f8 <tcp_receive+0xb1c>)
 8013f70:	f003 fd26 	bl	80179c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013f7a:	4b5a      	ldr	r3, [pc, #360]	; (80140e4 <tcp_receive+0xb08>)
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	461a      	mov	r2, r3
 8013f80:	4b59      	ldr	r3, [pc, #356]	; (80140e8 <tcp_receive+0xb0c>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	441a      	add	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f8e:	4b55      	ldr	r3, [pc, #340]	; (80140e4 <tcp_receive+0xb08>)
 8013f90:	881b      	ldrh	r3, [r3, #0]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d206      	bcs.n	8013fa4 <tcp_receive+0x9c8>
 8013f96:	4b56      	ldr	r3, [pc, #344]	; (80140f0 <tcp_receive+0xb14>)
 8013f98:	f240 6207 	movw	r2, #1543	; 0x607
 8013f9c:	4957      	ldr	r1, [pc, #348]	; (80140fc <tcp_receive+0xb20>)
 8013f9e:	4856      	ldr	r0, [pc, #344]	; (80140f8 <tcp_receive+0xb1c>)
 8013fa0:	f003 fd0e 	bl	80179c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013fa8:	4b4e      	ldr	r3, [pc, #312]	; (80140e4 <tcp_receive+0xb08>)
 8013faa:	881b      	ldrh	r3, [r3, #0]
 8013fac:	1ad3      	subs	r3, r2, r3
 8013fae:	b29a      	uxth	r2, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f7fc fd85 	bl	8010ac4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013fba:	4b4c      	ldr	r3, [pc, #304]	; (80140ec <tcp_receive+0xb10>)
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	891b      	ldrh	r3, [r3, #8]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d006      	beq.n	8013fd2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013fc4:	4b49      	ldr	r3, [pc, #292]	; (80140ec <tcp_receive+0xb10>)
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	4a4d      	ldr	r2, [pc, #308]	; (8014100 <tcp_receive+0xb24>)
 8013fca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013fcc:	4b47      	ldr	r3, [pc, #284]	; (80140ec <tcp_receive+0xb10>)
 8013fce:	2200      	movs	r2, #0
 8013fd0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013fd2:	4b46      	ldr	r3, [pc, #280]	; (80140ec <tcp_receive+0xb10>)
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	899b      	ldrh	r3, [r3, #12]
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7f7 fcc4 	bl	800b968 <lwip_htons>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	f003 0301 	and.w	r3, r3, #1
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f000 80b8 	beq.w	801415e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013fee:	4b45      	ldr	r3, [pc, #276]	; (8014104 <tcp_receive+0xb28>)
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	f043 0320 	orr.w	r3, r3, #32
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	4b42      	ldr	r3, [pc, #264]	; (8014104 <tcp_receive+0xb28>)
 8013ffa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013ffc:	e0af      	b.n	801415e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014002:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	685b      	ldr	r3, [r3, #4]
 801400c:	4a36      	ldr	r2, [pc, #216]	; (80140e8 <tcp_receive+0xb0c>)
 801400e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	891b      	ldrh	r3, [r3, #8]
 8014014:	461c      	mov	r4, r3
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	899b      	ldrh	r3, [r3, #12]
 801401c:	b29b      	uxth	r3, r3
 801401e:	4618      	mov	r0, r3
 8014020:	f7f7 fca2 	bl	800b968 <lwip_htons>
 8014024:	4603      	mov	r3, r0
 8014026:	b2db      	uxtb	r3, r3
 8014028:	f003 0303 	and.w	r3, r3, #3
 801402c:	2b00      	cmp	r3, #0
 801402e:	d001      	beq.n	8014034 <tcp_receive+0xa58>
 8014030:	2301      	movs	r3, #1
 8014032:	e000      	b.n	8014036 <tcp_receive+0xa5a>
 8014034:	2300      	movs	r3, #0
 8014036:	191a      	adds	r2, r3, r4
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801403c:	441a      	add	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014046:	461c      	mov	r4, r3
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	891b      	ldrh	r3, [r3, #8]
 801404c:	461d      	mov	r5, r3
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	899b      	ldrh	r3, [r3, #12]
 8014054:	b29b      	uxth	r3, r3
 8014056:	4618      	mov	r0, r3
 8014058:	f7f7 fc86 	bl	800b968 <lwip_htons>
 801405c:	4603      	mov	r3, r0
 801405e:	b2db      	uxtb	r3, r3
 8014060:	f003 0303 	and.w	r3, r3, #3
 8014064:	2b00      	cmp	r3, #0
 8014066:	d001      	beq.n	801406c <tcp_receive+0xa90>
 8014068:	2301      	movs	r3, #1
 801406a:	e000      	b.n	801406e <tcp_receive+0xa92>
 801406c:	2300      	movs	r3, #0
 801406e:	442b      	add	r3, r5
 8014070:	429c      	cmp	r4, r3
 8014072:	d206      	bcs.n	8014082 <tcp_receive+0xaa6>
 8014074:	4b1e      	ldr	r3, [pc, #120]	; (80140f0 <tcp_receive+0xb14>)
 8014076:	f240 622b 	movw	r2, #1579	; 0x62b
 801407a:	4923      	ldr	r1, [pc, #140]	; (8014108 <tcp_receive+0xb2c>)
 801407c:	481e      	ldr	r0, [pc, #120]	; (80140f8 <tcp_receive+0xb1c>)
 801407e:	f003 fc9f 	bl	80179c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	891b      	ldrh	r3, [r3, #8]
 8014086:	461c      	mov	r4, r3
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	899b      	ldrh	r3, [r3, #12]
 801408e:	b29b      	uxth	r3, r3
 8014090:	4618      	mov	r0, r3
 8014092:	f7f7 fc69 	bl	800b968 <lwip_htons>
 8014096:	4603      	mov	r3, r0
 8014098:	b2db      	uxtb	r3, r3
 801409a:	f003 0303 	and.w	r3, r3, #3
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d001      	beq.n	80140a6 <tcp_receive+0xaca>
 80140a2:	2301      	movs	r3, #1
 80140a4:	e000      	b.n	80140a8 <tcp_receive+0xacc>
 80140a6:	2300      	movs	r3, #0
 80140a8:	1919      	adds	r1, r3, r4
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80140ae:	b28b      	uxth	r3, r1
 80140b0:	1ad3      	subs	r3, r2, r3
 80140b2:	b29a      	uxth	r2, r3
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7fc fd03 	bl	8010ac4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	891b      	ldrh	r3, [r3, #8]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d028      	beq.n	801411a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80140c8:	4b0d      	ldr	r3, [pc, #52]	; (8014100 <tcp_receive+0xb24>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d01d      	beq.n	801410c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80140d0:	4b0b      	ldr	r3, [pc, #44]	; (8014100 <tcp_receive+0xb24>)
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	4619      	mov	r1, r3
 80140da:	4610      	mov	r0, r2
 80140dc:	f7fb fccc 	bl	800fa78 <pbuf_cat>
 80140e0:	e018      	b.n	8014114 <tcp_receive+0xb38>
 80140e2:	bf00      	nop
 80140e4:	240108ea 	.word	0x240108ea
 80140e8:	240108e0 	.word	0x240108e0
 80140ec:	240108c0 	.word	0x240108c0
 80140f0:	0801c06c 	.word	0x0801c06c
 80140f4:	0801c4a8 	.word	0x0801c4a8
 80140f8:	0801c114 	.word	0x0801c114
 80140fc:	0801c4e4 	.word	0x0801c4e4
 8014100:	240108f0 	.word	0x240108f0
 8014104:	240108ed 	.word	0x240108ed
 8014108:	0801c504 	.word	0x0801c504
            } else {
              recv_data = cseg->p;
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	4a70      	ldr	r2, [pc, #448]	; (80142d4 <tcp_receive+0xcf8>)
 8014112:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	2200      	movs	r2, #0
 8014118:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	68db      	ldr	r3, [r3, #12]
 801411e:	899b      	ldrh	r3, [r3, #12]
 8014120:	b29b      	uxth	r3, r3
 8014122:	4618      	mov	r0, r3
 8014124:	f7f7 fc20 	bl	800b968 <lwip_htons>
 8014128:	4603      	mov	r3, r0
 801412a:	b2db      	uxtb	r3, r3
 801412c:	f003 0301 	and.w	r3, r3, #1
 8014130:	2b00      	cmp	r3, #0
 8014132:	d00d      	beq.n	8014150 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014134:	4b68      	ldr	r3, [pc, #416]	; (80142d8 <tcp_receive+0xcfc>)
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	f043 0320 	orr.w	r3, r3, #32
 801413c:	b2da      	uxtb	r2, r3
 801413e:	4b66      	ldr	r3, [pc, #408]	; (80142d8 <tcp_receive+0xcfc>)
 8014140:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	7d1b      	ldrb	r3, [r3, #20]
 8014146:	2b04      	cmp	r3, #4
 8014148:	d102      	bne.n	8014150 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2207      	movs	r2, #7
 801414e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014158:	68b8      	ldr	r0, [r7, #8]
 801415a:	f7fd faf8 	bl	801174e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014162:	2b00      	cmp	r3, #0
 8014164:	d008      	beq.n	8014178 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	685a      	ldr	r2, [r3, #4]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014172:	429a      	cmp	r2, r3
 8014174:	f43f af43 	beq.w	8013ffe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	8b5b      	ldrh	r3, [r3, #26]
 801417c:	f003 0301 	and.w	r3, r3, #1
 8014180:	2b00      	cmp	r3, #0
 8014182:	d00e      	beq.n	80141a2 <tcp_receive+0xbc6>
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	8b5b      	ldrh	r3, [r3, #26]
 8014188:	f023 0301 	bic.w	r3, r3, #1
 801418c:	b29a      	uxth	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	835a      	strh	r2, [r3, #26]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	8b5b      	ldrh	r3, [r3, #26]
 8014196:	f043 0302 	orr.w	r3, r3, #2
 801419a:	b29a      	uxth	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80141a0:	e188      	b.n	80144b4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	8b5b      	ldrh	r3, [r3, #26]
 80141a6:	f043 0301 	orr.w	r3, r3, #1
 80141aa:	b29a      	uxth	r2, r3
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80141b0:	e180      	b.n	80144b4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d106      	bne.n	80141c8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80141ba:	4848      	ldr	r0, [pc, #288]	; (80142dc <tcp_receive+0xd00>)
 80141bc:	f7fd fae0 	bl	8011780 <tcp_seg_copy>
 80141c0:	4602      	mov	r2, r0
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	675a      	str	r2, [r3, #116]	; 0x74
 80141c6:	e16d      	b.n	80144a4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80141c8:	2300      	movs	r3, #0
 80141ca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80141d2:	e157      	b.n	8014484 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80141d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	685a      	ldr	r2, [r3, #4]
 80141da:	4b41      	ldr	r3, [pc, #260]	; (80142e0 <tcp_receive+0xd04>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d11d      	bne.n	801421e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80141e2:	4b3e      	ldr	r3, [pc, #248]	; (80142dc <tcp_receive+0xd00>)
 80141e4:	891a      	ldrh	r2, [r3, #8]
 80141e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e8:	891b      	ldrh	r3, [r3, #8]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	f240 814f 	bls.w	801448e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80141f0:	483a      	ldr	r0, [pc, #232]	; (80142dc <tcp_receive+0xd00>)
 80141f2:	f7fd fac5 	bl	8011780 <tcp_seg_copy>
 80141f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	f000 8149 	beq.w	8014492 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014202:	2b00      	cmp	r3, #0
 8014204:	d003      	beq.n	801420e <tcp_receive+0xc32>
                    prev->next = cseg;
 8014206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014208:	697a      	ldr	r2, [r7, #20]
 801420a:	601a      	str	r2, [r3, #0]
 801420c:	e002      	b.n	8014214 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	697a      	ldr	r2, [r7, #20]
 8014212:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014216:	6978      	ldr	r0, [r7, #20]
 8014218:	f7ff f8dc 	bl	80133d4 <tcp_oos_insert_segment>
                }
                break;
 801421c:	e139      	b.n	8014492 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801421e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014220:	2b00      	cmp	r3, #0
 8014222:	d117      	bne.n	8014254 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014224:	4b2e      	ldr	r3, [pc, #184]	; (80142e0 <tcp_receive+0xd04>)
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	1ad3      	subs	r3, r2, r3
 8014230:	2b00      	cmp	r3, #0
 8014232:	da57      	bge.n	80142e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014234:	4829      	ldr	r0, [pc, #164]	; (80142dc <tcp_receive+0xd00>)
 8014236:	f7fd faa3 	bl	8011780 <tcp_seg_copy>
 801423a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801423c:	69bb      	ldr	r3, [r7, #24]
 801423e:	2b00      	cmp	r3, #0
 8014240:	f000 8129 	beq.w	8014496 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	69ba      	ldr	r2, [r7, #24]
 8014248:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801424a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801424c:	69b8      	ldr	r0, [r7, #24]
 801424e:	f7ff f8c1 	bl	80133d4 <tcp_oos_insert_segment>
                  }
                  break;
 8014252:	e120      	b.n	8014496 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014254:	4b22      	ldr	r3, [pc, #136]	; (80142e0 <tcp_receive+0xd04>)
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	1ad3      	subs	r3, r2, r3
 8014260:	3b01      	subs	r3, #1
 8014262:	2b00      	cmp	r3, #0
 8014264:	db3e      	blt.n	80142e4 <tcp_receive+0xd08>
 8014266:	4b1e      	ldr	r3, [pc, #120]	; (80142e0 <tcp_receive+0xd04>)
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801426c:	68db      	ldr	r3, [r3, #12]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	1ad3      	subs	r3, r2, r3
 8014272:	3301      	adds	r3, #1
 8014274:	2b00      	cmp	r3, #0
 8014276:	dc35      	bgt.n	80142e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014278:	4818      	ldr	r0, [pc, #96]	; (80142dc <tcp_receive+0xd00>)
 801427a:	f7fd fa81 	bl	8011780 <tcp_seg_copy>
 801427e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	2b00      	cmp	r3, #0
 8014284:	f000 8109 	beq.w	801449a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014290:	8912      	ldrh	r2, [r2, #8]
 8014292:	441a      	add	r2, r3
 8014294:	4b12      	ldr	r3, [pc, #72]	; (80142e0 <tcp_receive+0xd04>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	1ad3      	subs	r3, r2, r3
 801429a:	2b00      	cmp	r3, #0
 801429c:	dd12      	ble.n	80142c4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801429e:	4b10      	ldr	r3, [pc, #64]	; (80142e0 <tcp_receive+0xd04>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a6:	68db      	ldr	r3, [r3, #12]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	1ad3      	subs	r3, r2, r3
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80142b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142b6:	685a      	ldr	r2, [r3, #4]
 80142b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ba:	891b      	ldrh	r3, [r3, #8]
 80142bc:	4619      	mov	r1, r3
 80142be:	4610      	mov	r0, r2
 80142c0:	f7fb f988 	bl	800f5d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80142c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c6:	69fa      	ldr	r2, [r7, #28]
 80142c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80142ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142cc:	69f8      	ldr	r0, [r7, #28]
 80142ce:	f7ff f881 	bl	80133d4 <tcp_oos_insert_segment>
                  }
                  break;
 80142d2:	e0e2      	b.n	801449a <tcp_receive+0xebe>
 80142d4:	240108f0 	.word	0x240108f0
 80142d8:	240108ed 	.word	0x240108ed
 80142dc:	240108c0 	.word	0x240108c0
 80142e0:	240108e0 	.word	0x240108e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80142e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80142e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f040 80c6 	bne.w	801447e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80142f2:	4b80      	ldr	r3, [pc, #512]	; (80144f4 <tcp_receive+0xf18>)
 80142f4:	681a      	ldr	r2, [r3, #0]
 80142f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f340 80bd 	ble.w	801447e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	899b      	ldrh	r3, [r3, #12]
 801430a:	b29b      	uxth	r3, r3
 801430c:	4618      	mov	r0, r3
 801430e:	f7f7 fb2b 	bl	800b968 <lwip_htons>
 8014312:	4603      	mov	r3, r0
 8014314:	b2db      	uxtb	r3, r3
 8014316:	f003 0301 	and.w	r3, r3, #1
 801431a:	2b00      	cmp	r3, #0
 801431c:	f040 80bf 	bne.w	801449e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014320:	4875      	ldr	r0, [pc, #468]	; (80144f8 <tcp_receive+0xf1c>)
 8014322:	f7fd fa2d 	bl	8011780 <tcp_seg_copy>
 8014326:	4602      	mov	r2, r0
 8014328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	f000 80b6 	beq.w	80144a2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014338:	68db      	ldr	r3, [r3, #12]
 801433a:	685b      	ldr	r3, [r3, #4]
 801433c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801433e:	8912      	ldrh	r2, [r2, #8]
 8014340:	441a      	add	r2, r3
 8014342:	4b6c      	ldr	r3, [pc, #432]	; (80144f4 <tcp_receive+0xf18>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	1ad3      	subs	r3, r2, r3
 8014348:	2b00      	cmp	r3, #0
 801434a:	dd12      	ble.n	8014372 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801434c:	4b69      	ldr	r3, [pc, #420]	; (80144f4 <tcp_receive+0xf18>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	b29a      	uxth	r2, r3
 8014352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014354:	68db      	ldr	r3, [r3, #12]
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	b29b      	uxth	r3, r3
 801435a:	1ad3      	subs	r3, r2, r3
 801435c:	b29a      	uxth	r2, r3
 801435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014360:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014364:	685a      	ldr	r2, [r3, #4]
 8014366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014368:	891b      	ldrh	r3, [r3, #8]
 801436a:	4619      	mov	r1, r3
 801436c:	4610      	mov	r0, r2
 801436e:	f7fb f931 	bl	800f5d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014372:	4b62      	ldr	r3, [pc, #392]	; (80144fc <tcp_receive+0xf20>)
 8014374:	881b      	ldrh	r3, [r3, #0]
 8014376:	461a      	mov	r2, r3
 8014378:	4b5e      	ldr	r3, [pc, #376]	; (80144f4 <tcp_receive+0xf18>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	441a      	add	r2, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014382:	6879      	ldr	r1, [r7, #4]
 8014384:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014386:	440b      	add	r3, r1
 8014388:	1ad3      	subs	r3, r2, r3
 801438a:	2b00      	cmp	r3, #0
 801438c:	f340 8089 	ble.w	80144a2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	899b      	ldrh	r3, [r3, #12]
 8014398:	b29b      	uxth	r3, r3
 801439a:	4618      	mov	r0, r3
 801439c:	f7f7 fae4 	bl	800b968 <lwip_htons>
 80143a0:	4603      	mov	r3, r0
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	f003 0301 	and.w	r3, r3, #1
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d022      	beq.n	80143f2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80143ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	899b      	ldrh	r3, [r3, #12]
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	b21b      	sxth	r3, r3
 80143b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80143bc:	b21c      	sxth	r4, r3
 80143be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	899b      	ldrh	r3, [r3, #12]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7f7 facd 	bl	800b968 <lwip_htons>
 80143ce:	4603      	mov	r3, r0
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80143d8:	b29b      	uxth	r3, r3
 80143da:	4618      	mov	r0, r3
 80143dc:	f7f7 fac4 	bl	800b968 <lwip_htons>
 80143e0:	4603      	mov	r3, r0
 80143e2:	b21b      	sxth	r3, r3
 80143e4:	4323      	orrs	r3, r4
 80143e6:	b21a      	sxth	r2, r3
 80143e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	68db      	ldr	r3, [r3, #12]
 80143ee:	b292      	uxth	r2, r2
 80143f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143fc:	4413      	add	r3, r2
 80143fe:	b299      	uxth	r1, r3
 8014400:	4b3c      	ldr	r3, [pc, #240]	; (80144f4 <tcp_receive+0xf18>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	b29a      	uxth	r2, r3
 8014406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	1a8a      	subs	r2, r1, r2
 801440c:	b292      	uxth	r2, r2
 801440e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	685a      	ldr	r2, [r3, #4]
 8014416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	891b      	ldrh	r3, [r3, #8]
 801441c:	4619      	mov	r1, r3
 801441e:	4610      	mov	r0, r2
 8014420:	f7fb f8d8 	bl	800f5d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	891c      	ldrh	r4, [r3, #8]
 801442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	899b      	ldrh	r3, [r3, #12]
 8014432:	b29b      	uxth	r3, r3
 8014434:	4618      	mov	r0, r3
 8014436:	f7f7 fa97 	bl	800b968 <lwip_htons>
 801443a:	4603      	mov	r3, r0
 801443c:	b2db      	uxtb	r3, r3
 801443e:	f003 0303 	and.w	r3, r3, #3
 8014442:	2b00      	cmp	r3, #0
 8014444:	d001      	beq.n	801444a <tcp_receive+0xe6e>
 8014446:	2301      	movs	r3, #1
 8014448:	e000      	b.n	801444c <tcp_receive+0xe70>
 801444a:	2300      	movs	r3, #0
 801444c:	4423      	add	r3, r4
 801444e:	b29a      	uxth	r2, r3
 8014450:	4b2a      	ldr	r3, [pc, #168]	; (80144fc <tcp_receive+0xf20>)
 8014452:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014454:	4b29      	ldr	r3, [pc, #164]	; (80144fc <tcp_receive+0xf20>)
 8014456:	881b      	ldrh	r3, [r3, #0]
 8014458:	461a      	mov	r2, r3
 801445a:	4b26      	ldr	r3, [pc, #152]	; (80144f4 <tcp_receive+0xf18>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	441a      	add	r2, r3
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014464:	6879      	ldr	r1, [r7, #4]
 8014466:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014468:	440b      	add	r3, r1
 801446a:	429a      	cmp	r2, r3
 801446c:	d019      	beq.n	80144a2 <tcp_receive+0xec6>
 801446e:	4b24      	ldr	r3, [pc, #144]	; (8014500 <tcp_receive+0xf24>)
 8014470:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014474:	4923      	ldr	r1, [pc, #140]	; (8014504 <tcp_receive+0xf28>)
 8014476:	4824      	ldr	r0, [pc, #144]	; (8014508 <tcp_receive+0xf2c>)
 8014478:	f003 faa2 	bl	80179c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801447c:	e011      	b.n	80144a2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	63bb      	str	r3, [r7, #56]	; 0x38
 8014484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014486:	2b00      	cmp	r3, #0
 8014488:	f47f aea4 	bne.w	80141d4 <tcp_receive+0xbf8>
 801448c:	e00a      	b.n	80144a4 <tcp_receive+0xec8>
                break;
 801448e:	bf00      	nop
 8014490:	e008      	b.n	80144a4 <tcp_receive+0xec8>
                break;
 8014492:	bf00      	nop
 8014494:	e006      	b.n	80144a4 <tcp_receive+0xec8>
                  break;
 8014496:	bf00      	nop
 8014498:	e004      	b.n	80144a4 <tcp_receive+0xec8>
                  break;
 801449a:	bf00      	nop
 801449c:	e002      	b.n	80144a4 <tcp_receive+0xec8>
                  break;
 801449e:	bf00      	nop
 80144a0:	e000      	b.n	80144a4 <tcp_receive+0xec8>
                break;
 80144a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f001 fe8f 	bl	80161c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80144aa:	e003      	b.n	80144b4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f001 fe8b 	bl	80161c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80144b2:	e01a      	b.n	80144ea <tcp_receive+0xf0e>
 80144b4:	e019      	b.n	80144ea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80144b6:	4b0f      	ldr	r3, [pc, #60]	; (80144f4 <tcp_receive+0xf18>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	db0a      	blt.n	80144da <tcp_receive+0xefe>
 80144c4:	4b0b      	ldr	r3, [pc, #44]	; (80144f4 <tcp_receive+0xf18>)
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144cc:	6879      	ldr	r1, [r7, #4]
 80144ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80144d0:	440b      	add	r3, r1
 80144d2:	1ad3      	subs	r3, r2, r3
 80144d4:	3301      	adds	r3, #1
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	dd07      	ble.n	80144ea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	8b5b      	ldrh	r3, [r3, #26]
 80144de:	f043 0302 	orr.w	r3, r3, #2
 80144e2:	b29a      	uxth	r2, r3
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80144e8:	e7ff      	b.n	80144ea <tcp_receive+0xf0e>
 80144ea:	bf00      	nop
 80144ec:	3750      	adds	r7, #80	; 0x50
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bdb0      	pop	{r4, r5, r7, pc}
 80144f2:	bf00      	nop
 80144f4:	240108e0 	.word	0x240108e0
 80144f8:	240108c0 	.word	0x240108c0
 80144fc:	240108ea 	.word	0x240108ea
 8014500:	0801c06c 	.word	0x0801c06c
 8014504:	0801c470 	.word	0x0801c470
 8014508:	0801c114 	.word	0x0801c114

0801450c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014512:	4b15      	ldr	r3, [pc, #84]	; (8014568 <tcp_get_next_optbyte+0x5c>)
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	1c5a      	adds	r2, r3, #1
 8014518:	b291      	uxth	r1, r2
 801451a:	4a13      	ldr	r2, [pc, #76]	; (8014568 <tcp_get_next_optbyte+0x5c>)
 801451c:	8011      	strh	r1, [r2, #0]
 801451e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014520:	4b12      	ldr	r3, [pc, #72]	; (801456c <tcp_get_next_optbyte+0x60>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d004      	beq.n	8014532 <tcp_get_next_optbyte+0x26>
 8014528:	4b11      	ldr	r3, [pc, #68]	; (8014570 <tcp_get_next_optbyte+0x64>)
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	88fa      	ldrh	r2, [r7, #6]
 801452e:	429a      	cmp	r2, r3
 8014530:	d208      	bcs.n	8014544 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014532:	4b10      	ldr	r3, [pc, #64]	; (8014574 <tcp_get_next_optbyte+0x68>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	3314      	adds	r3, #20
 8014538:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801453a:	88fb      	ldrh	r3, [r7, #6]
 801453c:	683a      	ldr	r2, [r7, #0]
 801453e:	4413      	add	r3, r2
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	e00b      	b.n	801455c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014544:	88fb      	ldrh	r3, [r7, #6]
 8014546:	b2da      	uxtb	r2, r3
 8014548:	4b09      	ldr	r3, [pc, #36]	; (8014570 <tcp_get_next_optbyte+0x64>)
 801454a:	881b      	ldrh	r3, [r3, #0]
 801454c:	b2db      	uxtb	r3, r3
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014552:	4b06      	ldr	r3, [pc, #24]	; (801456c <tcp_get_next_optbyte+0x60>)
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	797b      	ldrb	r3, [r7, #5]
 8014558:	4413      	add	r3, r2
 801455a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801455c:	4618      	mov	r0, r3
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr
 8014568:	240108dc 	.word	0x240108dc
 801456c:	240108d8 	.word	0x240108d8
 8014570:	240108d6 	.word	0x240108d6
 8014574:	240108d0 	.word	0x240108d0

08014578 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b084      	sub	sp, #16
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d106      	bne.n	8014594 <tcp_parseopt+0x1c>
 8014586:	4b32      	ldr	r3, [pc, #200]	; (8014650 <tcp_parseopt+0xd8>)
 8014588:	f240 727d 	movw	r2, #1917	; 0x77d
 801458c:	4931      	ldr	r1, [pc, #196]	; (8014654 <tcp_parseopt+0xdc>)
 801458e:	4832      	ldr	r0, [pc, #200]	; (8014658 <tcp_parseopt+0xe0>)
 8014590:	f003 fa16 	bl	80179c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014594:	4b31      	ldr	r3, [pc, #196]	; (801465c <tcp_parseopt+0xe4>)
 8014596:	881b      	ldrh	r3, [r3, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d056      	beq.n	801464a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801459c:	4b30      	ldr	r3, [pc, #192]	; (8014660 <tcp_parseopt+0xe8>)
 801459e:	2200      	movs	r2, #0
 80145a0:	801a      	strh	r2, [r3, #0]
 80145a2:	e046      	b.n	8014632 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80145a4:	f7ff ffb2 	bl	801450c <tcp_get_next_optbyte>
 80145a8:	4603      	mov	r3, r0
 80145aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80145ac:	7bfb      	ldrb	r3, [r7, #15]
 80145ae:	2b02      	cmp	r3, #2
 80145b0:	d006      	beq.n	80145c0 <tcp_parseopt+0x48>
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	dc2c      	bgt.n	8014610 <tcp_parseopt+0x98>
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d042      	beq.n	8014640 <tcp_parseopt+0xc8>
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d128      	bne.n	8014610 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80145be:	e038      	b.n	8014632 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80145c0:	f7ff ffa4 	bl	801450c <tcp_get_next_optbyte>
 80145c4:	4603      	mov	r3, r0
 80145c6:	2b04      	cmp	r3, #4
 80145c8:	d13c      	bne.n	8014644 <tcp_parseopt+0xcc>
 80145ca:	4b25      	ldr	r3, [pc, #148]	; (8014660 <tcp_parseopt+0xe8>)
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	3301      	adds	r3, #1
 80145d0:	4a22      	ldr	r2, [pc, #136]	; (801465c <tcp_parseopt+0xe4>)
 80145d2:	8812      	ldrh	r2, [r2, #0]
 80145d4:	4293      	cmp	r3, r2
 80145d6:	da35      	bge.n	8014644 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80145d8:	f7ff ff98 	bl	801450c <tcp_get_next_optbyte>
 80145dc:	4603      	mov	r3, r0
 80145de:	b29b      	uxth	r3, r3
 80145e0:	021b      	lsls	r3, r3, #8
 80145e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80145e4:	f7ff ff92 	bl	801450c <tcp_get_next_optbyte>
 80145e8:	4603      	mov	r3, r0
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	89bb      	ldrh	r3, [r7, #12]
 80145ee:	4313      	orrs	r3, r2
 80145f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80145f2:	89bb      	ldrh	r3, [r7, #12]
 80145f4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80145f8:	4293      	cmp	r3, r2
 80145fa:	d804      	bhi.n	8014606 <tcp_parseopt+0x8e>
 80145fc:	89bb      	ldrh	r3, [r7, #12]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d001      	beq.n	8014606 <tcp_parseopt+0x8e>
 8014602:	89ba      	ldrh	r2, [r7, #12]
 8014604:	e001      	b.n	801460a <tcp_parseopt+0x92>
 8014606:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801460e:	e010      	b.n	8014632 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014610:	f7ff ff7c 	bl	801450c <tcp_get_next_optbyte>
 8014614:	4603      	mov	r3, r0
 8014616:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014618:	7afb      	ldrb	r3, [r7, #11]
 801461a:	2b01      	cmp	r3, #1
 801461c:	d914      	bls.n	8014648 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801461e:	7afb      	ldrb	r3, [r7, #11]
 8014620:	b29a      	uxth	r2, r3
 8014622:	4b0f      	ldr	r3, [pc, #60]	; (8014660 <tcp_parseopt+0xe8>)
 8014624:	881b      	ldrh	r3, [r3, #0]
 8014626:	4413      	add	r3, r2
 8014628:	b29b      	uxth	r3, r3
 801462a:	3b02      	subs	r3, #2
 801462c:	b29a      	uxth	r2, r3
 801462e:	4b0c      	ldr	r3, [pc, #48]	; (8014660 <tcp_parseopt+0xe8>)
 8014630:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014632:	4b0b      	ldr	r3, [pc, #44]	; (8014660 <tcp_parseopt+0xe8>)
 8014634:	881a      	ldrh	r2, [r3, #0]
 8014636:	4b09      	ldr	r3, [pc, #36]	; (801465c <tcp_parseopt+0xe4>)
 8014638:	881b      	ldrh	r3, [r3, #0]
 801463a:	429a      	cmp	r2, r3
 801463c:	d3b2      	bcc.n	80145a4 <tcp_parseopt+0x2c>
 801463e:	e004      	b.n	801464a <tcp_parseopt+0xd2>
          return;
 8014640:	bf00      	nop
 8014642:	e002      	b.n	801464a <tcp_parseopt+0xd2>
            return;
 8014644:	bf00      	nop
 8014646:	e000      	b.n	801464a <tcp_parseopt+0xd2>
            return;
 8014648:	bf00      	nop
      }
    }
  }
}
 801464a:	3710      	adds	r7, #16
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	0801c06c 	.word	0x0801c06c
 8014654:	0801c52c 	.word	0x0801c52c
 8014658:	0801c114 	.word	0x0801c114
 801465c:	240108d4 	.word	0x240108d4
 8014660:	240108dc 	.word	0x240108dc

08014664 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014664:	b480      	push	{r7}
 8014666:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014668:	4b05      	ldr	r3, [pc, #20]	; (8014680 <tcp_trigger_input_pcb_close+0x1c>)
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	f043 0310 	orr.w	r3, r3, #16
 8014670:	b2da      	uxtb	r2, r3
 8014672:	4b03      	ldr	r3, [pc, #12]	; (8014680 <tcp_trigger_input_pcb_close+0x1c>)
 8014674:	701a      	strb	r2, [r3, #0]
}
 8014676:	bf00      	nop
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr
 8014680:	240108ed 	.word	0x240108ed

08014684 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b084      	sub	sp, #16
 8014688:	af00      	add	r7, sp, #0
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <tcp_route+0x28>
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	7a1b      	ldrb	r3, [r3, #8]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d006      	beq.n	80146ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	7a1b      	ldrb	r3, [r3, #8]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fa fd8c 	bl	800f1c0 <netif_get_by_index>
 80146a8:	4603      	mov	r3, r0
 80146aa:	e003      	b.n	80146b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7f8 fc3b 	bl	800cf28 <ip4_route>
 80146b2:	4603      	mov	r3, r0
  }
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	3710      	adds	r7, #16
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80146bc:	b590      	push	{r4, r7, lr}
 80146be:	b087      	sub	sp, #28
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	60f8      	str	r0, [r7, #12]
 80146c4:	60b9      	str	r1, [r7, #8]
 80146c6:	603b      	str	r3, [r7, #0]
 80146c8:	4613      	mov	r3, r2
 80146ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d105      	bne.n	80146de <tcp_create_segment+0x22>
 80146d2:	4b44      	ldr	r3, [pc, #272]	; (80147e4 <tcp_create_segment+0x128>)
 80146d4:	22a3      	movs	r2, #163	; 0xa3
 80146d6:	4944      	ldr	r1, [pc, #272]	; (80147e8 <tcp_create_segment+0x12c>)
 80146d8:	4844      	ldr	r0, [pc, #272]	; (80147ec <tcp_create_segment+0x130>)
 80146da:	f003 f971 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d105      	bne.n	80146f0 <tcp_create_segment+0x34>
 80146e4:	4b3f      	ldr	r3, [pc, #252]	; (80147e4 <tcp_create_segment+0x128>)
 80146e6:	22a4      	movs	r2, #164	; 0xa4
 80146e8:	4941      	ldr	r1, [pc, #260]	; (80147f0 <tcp_create_segment+0x134>)
 80146ea:	4840      	ldr	r0, [pc, #256]	; (80147ec <tcp_create_segment+0x130>)
 80146ec:	f003 f968 	bl	80179c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80146f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80146f4:	009b      	lsls	r3, r3, #2
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	f003 0304 	and.w	r3, r3, #4
 80146fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80146fe:	2003      	movs	r0, #3
 8014700:	f7fa f9a8 	bl	800ea54 <memp_malloc>
 8014704:	6138      	str	r0, [r7, #16]
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d104      	bne.n	8014716 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801470c:	68b8      	ldr	r0, [r7, #8]
 801470e:	f7fb f8e5 	bl	800f8dc <pbuf_free>
    return NULL;
 8014712:	2300      	movs	r3, #0
 8014714:	e061      	b.n	80147da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801471c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	2200      	movs	r2, #0
 8014722:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	68ba      	ldr	r2, [r7, #8]
 8014728:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	891a      	ldrh	r2, [r3, #8]
 801472e:	7dfb      	ldrb	r3, [r7, #23]
 8014730:	b29b      	uxth	r3, r3
 8014732:	429a      	cmp	r2, r3
 8014734:	d205      	bcs.n	8014742 <tcp_create_segment+0x86>
 8014736:	4b2b      	ldr	r3, [pc, #172]	; (80147e4 <tcp_create_segment+0x128>)
 8014738:	22b0      	movs	r2, #176	; 0xb0
 801473a:	492e      	ldr	r1, [pc, #184]	; (80147f4 <tcp_create_segment+0x138>)
 801473c:	482b      	ldr	r0, [pc, #172]	; (80147ec <tcp_create_segment+0x130>)
 801473e:	f003 f93f 	bl	80179c0 <iprintf>
  seg->len = p->tot_len - optlen;
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	891a      	ldrh	r2, [r3, #8]
 8014746:	7dfb      	ldrb	r3, [r7, #23]
 8014748:	b29b      	uxth	r3, r3
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	b29a      	uxth	r2, r3
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014752:	2114      	movs	r1, #20
 8014754:	68b8      	ldr	r0, [r7, #8]
 8014756:	f7fb f82b 	bl	800f7b0 <pbuf_add_header>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d004      	beq.n	801476a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014760:	6938      	ldr	r0, [r7, #16]
 8014762:	f7fc fff4 	bl	801174e <tcp_seg_free>
    return NULL;
 8014766:	2300      	movs	r3, #0
 8014768:	e037      	b.n	80147da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	685a      	ldr	r2, [r3, #4]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	8ada      	ldrh	r2, [r3, #22]
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	68dc      	ldr	r4, [r3, #12]
 801477c:	4610      	mov	r0, r2
 801477e:	f7f7 f8f3 	bl	800b968 <lwip_htons>
 8014782:	4603      	mov	r3, r0
 8014784:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	8b1a      	ldrh	r2, [r3, #24]
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	68dc      	ldr	r4, [r3, #12]
 801478e:	4610      	mov	r0, r2
 8014790:	f7f7 f8ea 	bl	800b968 <lwip_htons>
 8014794:	4603      	mov	r3, r0
 8014796:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	68dc      	ldr	r4, [r3, #12]
 801479c:	6838      	ldr	r0, [r7, #0]
 801479e:	f7f7 f8f8 	bl	800b992 <lwip_htonl>
 80147a2:	4603      	mov	r3, r0
 80147a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80147a6:	7dfb      	ldrb	r3, [r7, #23]
 80147a8:	089b      	lsrs	r3, r3, #2
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	3305      	adds	r3, #5
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	031b      	lsls	r3, r3, #12
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	79fb      	ldrb	r3, [r7, #7]
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	4313      	orrs	r3, r2
 80147bc:	b29a      	uxth	r2, r3
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	68dc      	ldr	r4, [r3, #12]
 80147c2:	4610      	mov	r0, r2
 80147c4:	f7f7 f8d0 	bl	800b968 <lwip_htons>
 80147c8:	4603      	mov	r3, r0
 80147ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	68db      	ldr	r3, [r3, #12]
 80147d0:	2200      	movs	r2, #0
 80147d2:	749a      	strb	r2, [r3, #18]
 80147d4:	2200      	movs	r2, #0
 80147d6:	74da      	strb	r2, [r3, #19]
  return seg;
 80147d8:	693b      	ldr	r3, [r7, #16]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	371c      	adds	r7, #28
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd90      	pop	{r4, r7, pc}
 80147e2:	bf00      	nop
 80147e4:	0801c548 	.word	0x0801c548
 80147e8:	0801c5d8 	.word	0x0801c5d8
 80147ec:	0801c5f8 	.word	0x0801c5f8
 80147f0:	0801c620 	.word	0x0801c620
 80147f4:	0801c644 	.word	0x0801c644

080147f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b086      	sub	sp, #24
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	607b      	str	r3, [r7, #4]
 8014800:	4603      	mov	r3, r0
 8014802:	73fb      	strb	r3, [r7, #15]
 8014804:	460b      	mov	r3, r1
 8014806:	81bb      	strh	r3, [r7, #12]
 8014808:	4613      	mov	r3, r2
 801480a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801480c:	89bb      	ldrh	r3, [r7, #12]
 801480e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d105      	bne.n	8014822 <tcp_pbuf_prealloc+0x2a>
 8014816:	4b30      	ldr	r3, [pc, #192]	; (80148d8 <tcp_pbuf_prealloc+0xe0>)
 8014818:	22e8      	movs	r2, #232	; 0xe8
 801481a:	4930      	ldr	r1, [pc, #192]	; (80148dc <tcp_pbuf_prealloc+0xe4>)
 801481c:	4830      	ldr	r0, [pc, #192]	; (80148e0 <tcp_pbuf_prealloc+0xe8>)
 801481e:	f003 f8cf 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014822:	6a3b      	ldr	r3, [r7, #32]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d105      	bne.n	8014834 <tcp_pbuf_prealloc+0x3c>
 8014828:	4b2b      	ldr	r3, [pc, #172]	; (80148d8 <tcp_pbuf_prealloc+0xe0>)
 801482a:	22e9      	movs	r2, #233	; 0xe9
 801482c:	492d      	ldr	r1, [pc, #180]	; (80148e4 <tcp_pbuf_prealloc+0xec>)
 801482e:	482c      	ldr	r0, [pc, #176]	; (80148e0 <tcp_pbuf_prealloc+0xe8>)
 8014830:	f003 f8c6 	bl	80179c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014834:	89ba      	ldrh	r2, [r7, #12]
 8014836:	897b      	ldrh	r3, [r7, #10]
 8014838:	429a      	cmp	r2, r3
 801483a:	d221      	bcs.n	8014880 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801483c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014840:	f003 0302 	and.w	r3, r3, #2
 8014844:	2b00      	cmp	r3, #0
 8014846:	d111      	bne.n	801486c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	8b5b      	ldrh	r3, [r3, #26]
 801484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014850:	2b00      	cmp	r3, #0
 8014852:	d115      	bne.n	8014880 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014858:	2b00      	cmp	r3, #0
 801485a:	d007      	beq.n	801486c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801485c:	6a3b      	ldr	r3, [r7, #32]
 801485e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014860:	2b00      	cmp	r3, #0
 8014862:	d103      	bne.n	801486c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014864:	6a3b      	ldr	r3, [r7, #32]
 8014866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014868:	2b00      	cmp	r3, #0
 801486a:	d009      	beq.n	8014880 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801486c:	89bb      	ldrh	r3, [r7, #12]
 801486e:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8014872:	f023 0203 	bic.w	r2, r3, #3
 8014876:	897b      	ldrh	r3, [r7, #10]
 8014878:	4293      	cmp	r3, r2
 801487a:	bf28      	it	cs
 801487c:	4613      	movcs	r3, r2
 801487e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014880:	8af9      	ldrh	r1, [r7, #22]
 8014882:	7bfb      	ldrb	r3, [r7, #15]
 8014884:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014888:	4618      	mov	r0, r3
 801488a:	f7fa fd43 	bl	800f314 <pbuf_alloc>
 801488e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d101      	bne.n	801489a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014896:	2300      	movs	r3, #0
 8014898:	e019      	b.n	80148ce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d006      	beq.n	80148b0 <tcp_pbuf_prealloc+0xb8>
 80148a2:	4b0d      	ldr	r3, [pc, #52]	; (80148d8 <tcp_pbuf_prealloc+0xe0>)
 80148a4:	f240 120b 	movw	r2, #267	; 0x10b
 80148a8:	490f      	ldr	r1, [pc, #60]	; (80148e8 <tcp_pbuf_prealloc+0xf0>)
 80148aa:	480d      	ldr	r0, [pc, #52]	; (80148e0 <tcp_pbuf_prealloc+0xe8>)
 80148ac:	f003 f888 	bl	80179c0 <iprintf>
  *oversize = p->len - length;
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	895a      	ldrh	r2, [r3, #10]
 80148b4:	89bb      	ldrh	r3, [r7, #12]
 80148b6:	1ad3      	subs	r3, r2, r3
 80148b8:	b29a      	uxth	r2, r3
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	89ba      	ldrh	r2, [r7, #12]
 80148c2:	811a      	strh	r2, [r3, #8]
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	891a      	ldrh	r2, [r3, #8]
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	815a      	strh	r2, [r3, #10]
  return p;
 80148cc:	693b      	ldr	r3, [r7, #16]
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3718      	adds	r7, #24
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	0801c548 	.word	0x0801c548
 80148dc:	0801c65c 	.word	0x0801c65c
 80148e0:	0801c5f8 	.word	0x0801c5f8
 80148e4:	0801c680 	.word	0x0801c680
 80148e8:	0801c6a0 	.word	0x0801c6a0

080148ec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	460b      	mov	r3, r1
 80148f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d106      	bne.n	801490c <tcp_write_checks+0x20>
 80148fe:	4b33      	ldr	r3, [pc, #204]	; (80149cc <tcp_write_checks+0xe0>)
 8014900:	f240 1233 	movw	r2, #307	; 0x133
 8014904:	4932      	ldr	r1, [pc, #200]	; (80149d0 <tcp_write_checks+0xe4>)
 8014906:	4833      	ldr	r0, [pc, #204]	; (80149d4 <tcp_write_checks+0xe8>)
 8014908:	f003 f85a 	bl	80179c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	7d1b      	ldrb	r3, [r3, #20]
 8014910:	2b04      	cmp	r3, #4
 8014912:	d00e      	beq.n	8014932 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014918:	2b07      	cmp	r3, #7
 801491a:	d00a      	beq.n	8014932 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014920:	2b02      	cmp	r3, #2
 8014922:	d006      	beq.n	8014932 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014928:	2b03      	cmp	r3, #3
 801492a:	d002      	beq.n	8014932 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801492c:	f06f 030a 	mvn.w	r3, #10
 8014930:	e048      	b.n	80149c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014932:	887b      	ldrh	r3, [r7, #2]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <tcp_write_checks+0x50>
    return ERR_OK;
 8014938:	2300      	movs	r3, #0
 801493a:	e043      	b.n	80149c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014942:	887a      	ldrh	r2, [r7, #2]
 8014944:	429a      	cmp	r2, r3
 8014946:	d909      	bls.n	801495c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	8b5b      	ldrh	r3, [r3, #26]
 801494c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014950:	b29a      	uxth	r2, r3
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014956:	f04f 33ff 	mov.w	r3, #4294967295
 801495a:	e033      	b.n	80149c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014962:	2b0f      	cmp	r3, #15
 8014964:	d909      	bls.n	801497a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8b5b      	ldrh	r3, [r3, #26]
 801496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801496e:	b29a      	uxth	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014974:	f04f 33ff 	mov.w	r3, #4294967295
 8014978:	e024      	b.n	80149c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014980:	2b00      	cmp	r3, #0
 8014982:	d00f      	beq.n	80149a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014988:	2b00      	cmp	r3, #0
 801498a:	d11a      	bne.n	80149c2 <tcp_write_checks+0xd6>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014990:	2b00      	cmp	r3, #0
 8014992:	d116      	bne.n	80149c2 <tcp_write_checks+0xd6>
 8014994:	4b0d      	ldr	r3, [pc, #52]	; (80149cc <tcp_write_checks+0xe0>)
 8014996:	f240 1255 	movw	r2, #341	; 0x155
 801499a:	490f      	ldr	r1, [pc, #60]	; (80149d8 <tcp_write_checks+0xec>)
 801499c:	480d      	ldr	r0, [pc, #52]	; (80149d4 <tcp_write_checks+0xe8>)
 801499e:	f003 f80f 	bl	80179c0 <iprintf>
 80149a2:	e00e      	b.n	80149c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d103      	bne.n	80149b4 <tcp_write_checks+0xc8>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d006      	beq.n	80149c2 <tcp_write_checks+0xd6>
 80149b4:	4b05      	ldr	r3, [pc, #20]	; (80149cc <tcp_write_checks+0xe0>)
 80149b6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80149ba:	4908      	ldr	r1, [pc, #32]	; (80149dc <tcp_write_checks+0xf0>)
 80149bc:	4805      	ldr	r0, [pc, #20]	; (80149d4 <tcp_write_checks+0xe8>)
 80149be:	f002 ffff 	bl	80179c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}
 80149cc:	0801c548 	.word	0x0801c548
 80149d0:	0801c6b4 	.word	0x0801c6b4
 80149d4:	0801c5f8 	.word	0x0801c5f8
 80149d8:	0801c6d4 	.word	0x0801c6d4
 80149dc:	0801c710 	.word	0x0801c710

080149e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80149e0:	b590      	push	{r4, r7, lr}
 80149e2:	b09b      	sub	sp, #108	; 0x6c
 80149e4:	af04      	add	r7, sp, #16
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	4611      	mov	r1, r2
 80149ec:	461a      	mov	r2, r3
 80149ee:	460b      	mov	r3, r1
 80149f0:	80fb      	strh	r3, [r7, #6]
 80149f2:	4613      	mov	r3, r2
 80149f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80149f6:	2300      	movs	r3, #0
 80149f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80149fa:	2300      	movs	r3, #0
 80149fc:	653b      	str	r3, [r7, #80]	; 0x50
 80149fe:	2300      	movs	r3, #0
 8014a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a02:	2300      	movs	r3, #0
 8014a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8014a06:	2300      	movs	r3, #0
 8014a08:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014a10:	2300      	movs	r3, #0
 8014a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d109      	bne.n	8014a3c <tcp_write+0x5c>
 8014a28:	4ba5      	ldr	r3, [pc, #660]	; (8014cc0 <tcp_write+0x2e0>)
 8014a2a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014a2e:	49a5      	ldr	r1, [pc, #660]	; (8014cc4 <tcp_write+0x2e4>)
 8014a30:	48a5      	ldr	r0, [pc, #660]	; (8014cc8 <tcp_write+0x2e8>)
 8014a32:	f002 ffc5 	bl	80179c0 <iprintf>
 8014a36:	f06f 030f 	mvn.w	r3, #15
 8014a3a:	e32c      	b.n	8015096 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014a42:	085b      	lsrs	r3, r3, #1
 8014a44:	b29a      	uxth	r2, r3
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a4a:	4293      	cmp	r3, r2
 8014a4c:	bf28      	it	cs
 8014a4e:	4613      	movcs	r3, r2
 8014a50:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d102      	bne.n	8014a5e <tcp_write+0x7e>
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a5c:	e000      	b.n	8014a60 <tcp_write+0x80>
 8014a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a60:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT_CORE_LOCKED();
 8014a62:	f7f1 f90f 	bl	8005c84 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d109      	bne.n	8014a80 <tcp_write+0xa0>
 8014a6c:	4b94      	ldr	r3, [pc, #592]	; (8014cc0 <tcp_write+0x2e0>)
 8014a6e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014a72:	4996      	ldr	r1, [pc, #600]	; (8014ccc <tcp_write+0x2ec>)
 8014a74:	4894      	ldr	r0, [pc, #592]	; (8014cc8 <tcp_write+0x2e8>)
 8014a76:	f002 ffa3 	bl	80179c0 <iprintf>
 8014a7a:	f06f 030f 	mvn.w	r3, #15
 8014a7e:	e30a      	b.n	8015096 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014a80:	88fb      	ldrh	r3, [r7, #6]
 8014a82:	4619      	mov	r1, r3
 8014a84:	68f8      	ldr	r0, [r7, #12]
 8014a86:	f7ff ff31 	bl	80148ec <tcp_write_checks>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014a90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d002      	beq.n	8014a9e <tcp_write+0xbe>
    return err;
 8014a98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014a9c:	e2fb      	b.n	8015096 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014aa4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f000 80f6 	beq.w	8014ca4 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014abc:	653b      	str	r3, [r7, #80]	; 0x50
 8014abe:	e002      	b.n	8014ac6 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 8014ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1f8      	bne.n	8014ac0 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ad0:	7a9b      	ldrb	r3, [r3, #10]
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	b29b      	uxth	r3, r3
 8014ad6:	f003 0304 	and.w	r3, r3, #4
 8014ada:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014adc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ae0:	891b      	ldrh	r3, [r3, #8]
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	8c3b      	ldrh	r3, [r7, #32]
 8014ae6:	440b      	add	r3, r1
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	da06      	bge.n	8014afa <tcp_write+0x11a>
 8014aec:	4b74      	ldr	r3, [pc, #464]	; (8014cc0 <tcp_write+0x2e0>)
 8014aee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014af2:	4977      	ldr	r1, [pc, #476]	; (8014cd0 <tcp_write+0x2f0>)
 8014af4:	4874      	ldr	r0, [pc, #464]	; (8014cc8 <tcp_write+0x2e8>)
 8014af6:	f002 ff63 	bl	80179c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014afc:	891a      	ldrh	r2, [r3, #8]
 8014afe:	8c3b      	ldrh	r3, [r7, #32]
 8014b00:	4413      	add	r3, r2
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b06:	1ad3      	subs	r3, r2, r3
 8014b08:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014b10:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014b12:	8a7b      	ldrh	r3, [r7, #18]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d026      	beq.n	8014b66 <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014b18:	8a7b      	ldrh	r3, [r7, #18]
 8014b1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d206      	bcs.n	8014b2e <tcp_write+0x14e>
 8014b20:	4b67      	ldr	r3, [pc, #412]	; (8014cc0 <tcp_write+0x2e0>)
 8014b22:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014b26:	496b      	ldr	r1, [pc, #428]	; (8014cd4 <tcp_write+0x2f4>)
 8014b28:	4867      	ldr	r0, [pc, #412]	; (8014cc8 <tcp_write+0x2e8>)
 8014b2a:	f002 ff49 	bl	80179c0 <iprintf>
      seg = last_unsent;
 8014b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b30:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014b32:	8a7b      	ldrh	r3, [r7, #18]
 8014b34:	88fa      	ldrh	r2, [r7, #6]
 8014b36:	4293      	cmp	r3, r2
 8014b38:	bf28      	it	cs
 8014b3a:	4613      	movcs	r3, r2
 8014b3c:	b29b      	uxth	r3, r3
 8014b3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b40:	4293      	cmp	r3, r2
 8014b42:	bf28      	it	cs
 8014b44:	4613      	movcs	r3, r2
 8014b46:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b4e:	4413      	add	r3, r2
 8014b50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014b54:	8a7a      	ldrh	r2, [r7, #18]
 8014b56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b58:	1ad3      	subs	r3, r2, r3
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014b5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014b62:	1ad3      	subs	r3, r2, r3
 8014b64:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014b66:	8a7b      	ldrh	r3, [r7, #18]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d00b      	beq.n	8014b84 <tcp_write+0x1a4>
 8014b6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b70:	88fb      	ldrh	r3, [r7, #6]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d006      	beq.n	8014b84 <tcp_write+0x1a4>
 8014b76:	4b52      	ldr	r3, [pc, #328]	; (8014cc0 <tcp_write+0x2e0>)
 8014b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b7c:	4956      	ldr	r1, [pc, #344]	; (8014cd8 <tcp_write+0x2f8>)
 8014b7e:	4852      	ldr	r0, [pc, #328]	; (8014cc8 <tcp_write+0x2e8>)
 8014b80:	f002 ff1e 	bl	80179c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014b84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b88:	88fb      	ldrh	r3, [r7, #6]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	f080 8167 	bcs.w	8014e5e <tcp_write+0x47e>
 8014b90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	f000 8163 	beq.w	8014e5e <tcp_write+0x47e>
 8014b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b9a:	891b      	ldrh	r3, [r3, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	f000 815e 	beq.w	8014e5e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014ba2:	88fa      	ldrh	r2, [r7, #6]
 8014ba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ba8:	1ad2      	subs	r2, r2, r3
 8014baa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bac:	4293      	cmp	r3, r2
 8014bae:	bfa8      	it	ge
 8014bb0:	4613      	movge	r3, r2
 8014bb2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bb6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014bb8:	797b      	ldrb	r3, [r7, #5]
 8014bba:	f003 0301 	and.w	r3, r3, #1
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d027      	beq.n	8014c12 <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014bc2:	f107 0012 	add.w	r0, r7, #18
 8014bc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014bc8:	8bf9      	ldrh	r1, [r7, #30]
 8014bca:	2301      	movs	r3, #1
 8014bcc:	9302      	str	r3, [sp, #8]
 8014bce:	797b      	ldrb	r3, [r7, #5]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2000      	movs	r0, #0
 8014bda:	f7ff fe0d 	bl	80147f8 <tcp_pbuf_prealloc>
 8014bde:	6578      	str	r0, [r7, #84]	; 0x54
 8014be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	f000 8225 	beq.w	8015032 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bea:	6858      	ldr	r0, [r3, #4]
 8014bec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	8bfa      	ldrh	r2, [r7, #30]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	f002 fe1d 	bl	8017836 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014bfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014bfe:	f7fa fefb 	bl	800f9f8 <pbuf_clen>
 8014c02:	4603      	mov	r3, r0
 8014c04:	461a      	mov	r2, r3
 8014c06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014c0a:	4413      	add	r3, r2
 8014c0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014c10:	e041      	b.n	8014c96 <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	637b      	str	r3, [r7, #52]	; 0x34
 8014c18:	e002      	b.n	8014c20 <tcp_write+0x240>
 8014c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8014c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d1f8      	bne.n	8014c1a <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c2a:	7b1b      	ldrb	r3, [r3, #12]
 8014c2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d115      	bne.n	8014c60 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c3a:	8952      	ldrh	r2, [r2, #10]
 8014c3c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014c3e:	68ba      	ldr	r2, [r7, #8]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d10d      	bne.n	8014c60 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014c44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d006      	beq.n	8014c5a <tcp_write+0x27a>
 8014c4c:	4b1c      	ldr	r3, [pc, #112]	; (8014cc0 <tcp_write+0x2e0>)
 8014c4e:	f240 2231 	movw	r2, #561	; 0x231
 8014c52:	4922      	ldr	r1, [pc, #136]	; (8014cdc <tcp_write+0x2fc>)
 8014c54:	481c      	ldr	r0, [pc, #112]	; (8014cc8 <tcp_write+0x2e8>)
 8014c56:	f002 feb3 	bl	80179c0 <iprintf>
          extendlen = seglen;
 8014c5a:	8bfb      	ldrh	r3, [r7, #30]
 8014c5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014c5e:	e01a      	b.n	8014c96 <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014c60:	8bfb      	ldrh	r3, [r7, #30]
 8014c62:	2201      	movs	r2, #1
 8014c64:	4619      	mov	r1, r3
 8014c66:	2000      	movs	r0, #0
 8014c68:	f7fa fb54 	bl	800f314 <pbuf_alloc>
 8014c6c:	6578      	str	r0, [r7, #84]	; 0x54
 8014c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	f000 81e0 	beq.w	8015036 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014c76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014c7a:	68ba      	ldr	r2, [r7, #8]
 8014c7c:	441a      	add	r2, r3
 8014c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c80:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014c82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c84:	f7fa feb8 	bl	800f9f8 <pbuf_clen>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014c90:	4413      	add	r3, r2
 8014c92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014c96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014c9a:	8bfb      	ldrh	r3, [r7, #30]
 8014c9c:	4413      	add	r3, r2
 8014c9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014ca2:	e0dc      	b.n	8014e5e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f000 80d7 	beq.w	8014e5e <tcp_write+0x47e>
 8014cb0:	4b03      	ldr	r3, [pc, #12]	; (8014cc0 <tcp_write+0x2e0>)
 8014cb2:	f240 224a 	movw	r2, #586	; 0x24a
 8014cb6:	490a      	ldr	r1, [pc, #40]	; (8014ce0 <tcp_write+0x300>)
 8014cb8:	4803      	ldr	r0, [pc, #12]	; (8014cc8 <tcp_write+0x2e8>)
 8014cba:	f002 fe81 	bl	80179c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014cbe:	e0ce      	b.n	8014e5e <tcp_write+0x47e>
 8014cc0:	0801c548 	.word	0x0801c548
 8014cc4:	0801c744 	.word	0x0801c744
 8014cc8:	0801c5f8 	.word	0x0801c5f8
 8014ccc:	0801c75c 	.word	0x0801c75c
 8014cd0:	0801c790 	.word	0x0801c790
 8014cd4:	0801c7a8 	.word	0x0801c7a8
 8014cd8:	0801c7c8 	.word	0x0801c7c8
 8014cdc:	0801c7e8 	.word	0x0801c7e8
 8014ce0:	0801c814 	.word	0x0801c814
    struct pbuf *p;
    u16_t left = len - pos;
 8014ce4:	88fa      	ldrh	r2, [r7, #6]
 8014ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014cea:	1ad3      	subs	r3, r2, r3
 8014cec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014cee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014cf6:	1ad3      	subs	r3, r2, r3
 8014cf8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014cfa:	8b7a      	ldrh	r2, [r7, #26]
 8014cfc:	8bbb      	ldrh	r3, [r7, #28]
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	bf28      	it	cs
 8014d02:	4613      	movcs	r3, r2
 8014d04:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014d06:	797b      	ldrb	r3, [r7, #5]
 8014d08:	f003 0301 	and.w	r3, r3, #1
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d036      	beq.n	8014d7e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014d10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d14:	b29a      	uxth	r2, r3
 8014d16:	8b3b      	ldrh	r3, [r7, #24]
 8014d18:	4413      	add	r3, r2
 8014d1a:	b299      	uxth	r1, r3
 8014d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	bf0c      	ite	eq
 8014d22:	2301      	moveq	r3, #1
 8014d24:	2300      	movne	r3, #0
 8014d26:	b2db      	uxtb	r3, r3
 8014d28:	f107 0012 	add.w	r0, r7, #18
 8014d2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014d2e:	9302      	str	r3, [sp, #8]
 8014d30:	797b      	ldrb	r3, [r7, #5]
 8014d32:	9301      	str	r3, [sp, #4]
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	9300      	str	r3, [sp, #0]
 8014d38:	4603      	mov	r3, r0
 8014d3a:	2036      	movs	r0, #54	; 0x36
 8014d3c:	f7ff fd5c 	bl	80147f8 <tcp_pbuf_prealloc>
 8014d40:	6338      	str	r0, [r7, #48]	; 0x30
 8014d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f000 8178 	beq.w	801503a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4c:	895b      	ldrh	r3, [r3, #10]
 8014d4e:	8b3a      	ldrh	r2, [r7, #24]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d906      	bls.n	8014d62 <tcp_write+0x382>
 8014d54:	4b8c      	ldr	r3, [pc, #560]	; (8014f88 <tcp_write+0x5a8>)
 8014d56:	f240 2266 	movw	r2, #614	; 0x266
 8014d5a:	498c      	ldr	r1, [pc, #560]	; (8014f8c <tcp_write+0x5ac>)
 8014d5c:	488c      	ldr	r0, [pc, #560]	; (8014f90 <tcp_write+0x5b0>)
 8014d5e:	f002 fe2f 	bl	80179c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d64:	685a      	ldr	r2, [r3, #4]
 8014d66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014d6a:	18d0      	adds	r0, r2, r3
 8014d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d70:	68ba      	ldr	r2, [r7, #8]
 8014d72:	4413      	add	r3, r2
 8014d74:	8b3a      	ldrh	r2, [r7, #24]
 8014d76:	4619      	mov	r1, r3
 8014d78:	f002 fd5d 	bl	8017836 <memcpy>
 8014d7c:	e02f      	b.n	8014dde <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014d7e:	8a7b      	ldrh	r3, [r7, #18]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d006      	beq.n	8014d92 <tcp_write+0x3b2>
 8014d84:	4b80      	ldr	r3, [pc, #512]	; (8014f88 <tcp_write+0x5a8>)
 8014d86:	f240 2271 	movw	r2, #625	; 0x271
 8014d8a:	4982      	ldr	r1, [pc, #520]	; (8014f94 <tcp_write+0x5b4>)
 8014d8c:	4880      	ldr	r0, [pc, #512]	; (8014f90 <tcp_write+0x5b0>)
 8014d8e:	f002 fe17 	bl	80179c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014d92:	8b3b      	ldrh	r3, [r7, #24]
 8014d94:	2201      	movs	r2, #1
 8014d96:	4619      	mov	r1, r3
 8014d98:	2036      	movs	r0, #54	; 0x36
 8014d9a:	f7fa fabb 	bl	800f314 <pbuf_alloc>
 8014d9e:	6178      	str	r0, [r7, #20]
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	f000 814b 	beq.w	801503e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014da8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014dac:	68ba      	ldr	r2, [r7, #8]
 8014dae:	441a      	add	r2, r3
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014db4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	2036      	movs	r0, #54	; 0x36
 8014dc2:	f7fa faa7 	bl	800f314 <pbuf_alloc>
 8014dc6:	6338      	str	r0, [r7, #48]	; 0x30
 8014dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d103      	bne.n	8014dd6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014dce:	6978      	ldr	r0, [r7, #20]
 8014dd0:	f7fa fd84 	bl	800f8dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014dd4:	e136      	b.n	8015044 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014dd6:	6979      	ldr	r1, [r7, #20]
 8014dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dda:	f7fa fe4d 	bl	800fa78 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014de0:	f7fa fe0a 	bl	800f9f8 <pbuf_clen>
 8014de4:	4603      	mov	r3, r0
 8014de6:	461a      	mov	r2, r3
 8014de8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014dec:	4413      	add	r3, r2
 8014dee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014df6:	2b10      	cmp	r3, #16
 8014df8:	d903      	bls.n	8014e02 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dfc:	f7fa fd6e 	bl	800f8dc <pbuf_free>
      goto memerr;
 8014e00:	e120      	b.n	8015044 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014e06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e0a:	441a      	add	r2, r3
 8014e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e10:	9300      	str	r3, [sp, #0]
 8014e12:	4613      	mov	r3, r2
 8014e14:	2200      	movs	r2, #0
 8014e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e18:	68f8      	ldr	r0, [r7, #12]
 8014e1a:	f7ff fc4f 	bl	80146bc <tcp_create_segment>
 8014e1e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f000 810d 	beq.w	8015042 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d102      	bne.n	8014e34 <tcp_write+0x454>
      queue = seg;
 8014e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e30:	647b      	str	r3, [r7, #68]	; 0x44
 8014e32:	e00c      	b.n	8014e4e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d106      	bne.n	8014e48 <tcp_write+0x468>
 8014e3a:	4b53      	ldr	r3, [pc, #332]	; (8014f88 <tcp_write+0x5a8>)
 8014e3c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014e40:	4955      	ldr	r1, [pc, #340]	; (8014f98 <tcp_write+0x5b8>)
 8014e42:	4853      	ldr	r0, [pc, #332]	; (8014f90 <tcp_write+0x5b0>)
 8014e44:	f002 fdbc 	bl	80179c0 <iprintf>
      prev_seg->next = seg;
 8014e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e4c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e50:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014e52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e56:	8b3b      	ldrh	r3, [r7, #24]
 8014e58:	4413      	add	r3, r2
 8014e5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014e5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e62:	88fb      	ldrh	r3, [r7, #6]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	f4ff af3d 	bcc.w	8014ce4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014e6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d02c      	beq.n	8014eca <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e76:	e01e      	b.n	8014eb6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8014e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e7a:	891a      	ldrh	r2, [r3, #8]
 8014e7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e7e:	4413      	add	r3, r2
 8014e80:	b29a      	uxth	r2, r3
 8014e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e84:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d110      	bne.n	8014eb0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e94:	8952      	ldrh	r2, [r2, #10]
 8014e96:	4413      	add	r3, r2
 8014e98:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014e9a:	68b9      	ldr	r1, [r7, #8]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f002 fcca 	bl	8017836 <memcpy>
        p->len += oversize_used;
 8014ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea4:	895a      	ldrh	r2, [r3, #10]
 8014ea6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ea8:	4413      	add	r3, r2
 8014eaa:	b29a      	uxth	r2, r3
 8014eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eae:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d1dd      	bne.n	8014e78 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8014ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ebe:	891a      	ldrh	r2, [r3, #8]
 8014ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ec2:	4413      	add	r3, r2
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ec8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014eca:	8a7a      	ldrh	r2, [r7, #18]
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d018      	beq.n	8014f0a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d106      	bne.n	8014eec <tcp_write+0x50c>
 8014ede:	4b2a      	ldr	r3, [pc, #168]	; (8014f88 <tcp_write+0x5a8>)
 8014ee0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8014ee4:	492d      	ldr	r1, [pc, #180]	; (8014f9c <tcp_write+0x5bc>)
 8014ee6:	482a      	ldr	r0, [pc, #168]	; (8014f90 <tcp_write+0x5b0>)
 8014ee8:	f002 fd6a 	bl	80179c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fa fdc0 	bl	800fa78 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014efa:	891a      	ldrh	r2, [r3, #8]
 8014efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014efe:	891b      	ldrh	r3, [r3, #8]
 8014f00:	4413      	add	r3, r2
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f06:	811a      	strh	r2, [r3, #8]
 8014f08:	e037      	b.n	8014f7a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8014f0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d034      	beq.n	8014f7a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d003      	beq.n	8014f1e <tcp_write+0x53e>
 8014f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d106      	bne.n	8014f2c <tcp_write+0x54c>
 8014f1e:	4b1a      	ldr	r3, [pc, #104]	; (8014f88 <tcp_write+0x5a8>)
 8014f20:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014f24:	491e      	ldr	r1, [pc, #120]	; (8014fa0 <tcp_write+0x5c0>)
 8014f26:	481a      	ldr	r0, [pc, #104]	; (8014f90 <tcp_write+0x5b0>)
 8014f28:	f002 fd4a 	bl	80179c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f2e:	685b      	ldr	r3, [r3, #4]
 8014f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f32:	e009      	b.n	8014f48 <tcp_write+0x568>
      p->tot_len += extendlen;
 8014f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f36:	891a      	ldrh	r2, [r3, #8]
 8014f38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f3a:	4413      	add	r3, r2
 8014f3c:	b29a      	uxth	r2, r3
 8014f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f40:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1f1      	bne.n	8014f34 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8014f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f52:	891a      	ldrh	r2, [r3, #8]
 8014f54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f56:	4413      	add	r3, r2
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f60:	895a      	ldrh	r2, [r3, #10]
 8014f62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f64:	4413      	add	r3, r2
 8014f66:	b29a      	uxth	r2, r3
 8014f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f6a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f6e:	891a      	ldrh	r2, [r3, #8]
 8014f70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f72:	4413      	add	r3, r2
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f78:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d111      	bne.n	8014fa4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f84:	66da      	str	r2, [r3, #108]	; 0x6c
 8014f86:	e010      	b.n	8014faa <tcp_write+0x5ca>
 8014f88:	0801c548 	.word	0x0801c548
 8014f8c:	0801c844 	.word	0x0801c844
 8014f90:	0801c5f8 	.word	0x0801c5f8
 8014f94:	0801c884 	.word	0x0801c884
 8014f98:	0801c894 	.word	0x0801c894
 8014f9c:	0801c8a8 	.word	0x0801c8a8
 8014fa0:	0801c8e0 	.word	0x0801c8e0
  } else {
    last_unsent->next = queue;
 8014fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fa8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014fae:	88fb      	ldrh	r3, [r7, #6]
 8014fb0:	441a      	add	r2, r3
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014fbc:	88fb      	ldrh	r3, [r7, #6]
 8014fbe:	1ad3      	subs	r3, r2, r3
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014fce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00e      	beq.n	8014ffa <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d10a      	bne.n	8014ffa <tcp_write+0x61a>
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d106      	bne.n	8014ffa <tcp_write+0x61a>
 8014fec:	4b2c      	ldr	r3, [pc, #176]	; (80150a0 <tcp_write+0x6c0>)
 8014fee:	f240 3212 	movw	r2, #786	; 0x312
 8014ff2:	492c      	ldr	r1, [pc, #176]	; (80150a4 <tcp_write+0x6c4>)
 8014ff4:	482c      	ldr	r0, [pc, #176]	; (80150a8 <tcp_write+0x6c8>)
 8014ff6:	f002 fce3 	bl	80179c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d016      	beq.n	801502e <tcp_write+0x64e>
 8015000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d012      	beq.n	801502e <tcp_write+0x64e>
 8015008:	797b      	ldrb	r3, [r7, #5]
 801500a:	f003 0302 	and.w	r3, r3, #2
 801500e:	2b00      	cmp	r3, #0
 8015010:	d10d      	bne.n	801502e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015014:	68db      	ldr	r3, [r3, #12]
 8015016:	899b      	ldrh	r3, [r3, #12]
 8015018:	b29c      	uxth	r4, r3
 801501a:	2008      	movs	r0, #8
 801501c:	f7f6 fca4 	bl	800b968 <lwip_htons>
 8015020:	4603      	mov	r3, r0
 8015022:	461a      	mov	r2, r3
 8015024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	4322      	orrs	r2, r4
 801502a:	b292      	uxth	r2, r2
 801502c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801502e:	2300      	movs	r3, #0
 8015030:	e031      	b.n	8015096 <tcp_write+0x6b6>
          goto memerr;
 8015032:	bf00      	nop
 8015034:	e006      	b.n	8015044 <tcp_write+0x664>
            goto memerr;
 8015036:	bf00      	nop
 8015038:	e004      	b.n	8015044 <tcp_write+0x664>
        goto memerr;
 801503a:	bf00      	nop
 801503c:	e002      	b.n	8015044 <tcp_write+0x664>
        goto memerr;
 801503e:	bf00      	nop
 8015040:	e000      	b.n	8015044 <tcp_write+0x664>
      goto memerr;
 8015042:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	8b5b      	ldrh	r3, [r3, #26]
 8015048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801504c:	b29a      	uxth	r2, r3
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015054:	2b00      	cmp	r3, #0
 8015056:	d002      	beq.n	801505e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8015058:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801505a:	f7fa fc3f 	bl	800f8dc <pbuf_free>
  }
  if (queue != NULL) {
 801505e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015060:	2b00      	cmp	r3, #0
 8015062:	d002      	beq.n	801506a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8015064:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015066:	f7fc fb5d 	bl	8011724 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015070:	2b00      	cmp	r3, #0
 8015072:	d00e      	beq.n	8015092 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015078:	2b00      	cmp	r3, #0
 801507a:	d10a      	bne.n	8015092 <tcp_write+0x6b2>
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015080:	2b00      	cmp	r3, #0
 8015082:	d106      	bne.n	8015092 <tcp_write+0x6b2>
 8015084:	4b06      	ldr	r3, [pc, #24]	; (80150a0 <tcp_write+0x6c0>)
 8015086:	f240 3227 	movw	r2, #807	; 0x327
 801508a:	4906      	ldr	r1, [pc, #24]	; (80150a4 <tcp_write+0x6c4>)
 801508c:	4806      	ldr	r0, [pc, #24]	; (80150a8 <tcp_write+0x6c8>)
 801508e:	f002 fc97 	bl	80179c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015096:	4618      	mov	r0, r3
 8015098:	375c      	adds	r7, #92	; 0x5c
 801509a:	46bd      	mov	sp, r7
 801509c:	bd90      	pop	{r4, r7, pc}
 801509e:	bf00      	nop
 80150a0:	0801c548 	.word	0x0801c548
 80150a4:	0801c918 	.word	0x0801c918
 80150a8:	0801c5f8 	.word	0x0801c5f8

080150ac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80150ac:	b590      	push	{r4, r7, lr}
 80150ae:	b08b      	sub	sp, #44	; 0x2c
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	460b      	mov	r3, r1
 80150b6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80150b8:	2300      	movs	r3, #0
 80150ba:	61fb      	str	r3, [r7, #28]
 80150bc:	2300      	movs	r3, #0
 80150be:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80150c0:	2300      	movs	r3, #0
 80150c2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d106      	bne.n	80150d8 <tcp_split_unsent_seg+0x2c>
 80150ca:	4b95      	ldr	r3, [pc, #596]	; (8015320 <tcp_split_unsent_seg+0x274>)
 80150cc:	f240 324b 	movw	r2, #843	; 0x34b
 80150d0:	4994      	ldr	r1, [pc, #592]	; (8015324 <tcp_split_unsent_seg+0x278>)
 80150d2:	4895      	ldr	r0, [pc, #596]	; (8015328 <tcp_split_unsent_seg+0x27c>)
 80150d4:	f002 fc74 	bl	80179c0 <iprintf>

  useg = pcb->unsent;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150dc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d102      	bne.n	80150ea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80150e4:	f04f 33ff 	mov.w	r3, #4294967295
 80150e8:	e116      	b.n	8015318 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80150ea:	887b      	ldrh	r3, [r7, #2]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d109      	bne.n	8015104 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80150f0:	4b8b      	ldr	r3, [pc, #556]	; (8015320 <tcp_split_unsent_seg+0x274>)
 80150f2:	f240 3253 	movw	r2, #851	; 0x353
 80150f6:	498d      	ldr	r1, [pc, #564]	; (801532c <tcp_split_unsent_seg+0x280>)
 80150f8:	488b      	ldr	r0, [pc, #556]	; (8015328 <tcp_split_unsent_seg+0x27c>)
 80150fa:	f002 fc61 	bl	80179c0 <iprintf>
    return ERR_VAL;
 80150fe:	f06f 0305 	mvn.w	r3, #5
 8015102:	e109      	b.n	8015318 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	891b      	ldrh	r3, [r3, #8]
 8015108:	887a      	ldrh	r2, [r7, #2]
 801510a:	429a      	cmp	r2, r3
 801510c:	d301      	bcc.n	8015112 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801510e:	2300      	movs	r3, #0
 8015110:	e102      	b.n	8015318 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015116:	887a      	ldrh	r2, [r7, #2]
 8015118:	429a      	cmp	r2, r3
 801511a:	d906      	bls.n	801512a <tcp_split_unsent_seg+0x7e>
 801511c:	4b80      	ldr	r3, [pc, #512]	; (8015320 <tcp_split_unsent_seg+0x274>)
 801511e:	f240 325b 	movw	r2, #859	; 0x35b
 8015122:	4983      	ldr	r1, [pc, #524]	; (8015330 <tcp_split_unsent_seg+0x284>)
 8015124:	4880      	ldr	r0, [pc, #512]	; (8015328 <tcp_split_unsent_seg+0x27c>)
 8015126:	f002 fc4b 	bl	80179c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	891b      	ldrh	r3, [r3, #8]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d106      	bne.n	8015140 <tcp_split_unsent_seg+0x94>
 8015132:	4b7b      	ldr	r3, [pc, #492]	; (8015320 <tcp_split_unsent_seg+0x274>)
 8015134:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015138:	497e      	ldr	r1, [pc, #504]	; (8015334 <tcp_split_unsent_seg+0x288>)
 801513a:	487b      	ldr	r0, [pc, #492]	; (8015328 <tcp_split_unsent_seg+0x27c>)
 801513c:	f002 fc40 	bl	80179c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	7a9b      	ldrb	r3, [r3, #10]
 8015144:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015146:	7bfb      	ldrb	r3, [r7, #15]
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	b2db      	uxtb	r3, r3
 801514c:	f003 0304 	and.w	r3, r3, #4
 8015150:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	891a      	ldrh	r2, [r3, #8]
 8015156:	887b      	ldrh	r3, [r7, #2]
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801515c:	7bbb      	ldrb	r3, [r7, #14]
 801515e:	b29a      	uxth	r2, r3
 8015160:	89bb      	ldrh	r3, [r7, #12]
 8015162:	4413      	add	r3, r2
 8015164:	b29b      	uxth	r3, r3
 8015166:	f44f 7220 	mov.w	r2, #640	; 0x280
 801516a:	4619      	mov	r1, r3
 801516c:	2036      	movs	r0, #54	; 0x36
 801516e:	f7fa f8d1 	bl	800f314 <pbuf_alloc>
 8015172:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	2b00      	cmp	r3, #0
 8015178:	f000 80b7 	beq.w	80152ea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	891a      	ldrh	r2, [r3, #8]
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	891b      	ldrh	r3, [r3, #8]
 8015186:	1ad3      	subs	r3, r2, r3
 8015188:	b29a      	uxth	r2, r3
 801518a:	887b      	ldrh	r3, [r7, #2]
 801518c:	4413      	add	r3, r2
 801518e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	6858      	ldr	r0, [r3, #4]
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	685a      	ldr	r2, [r3, #4]
 8015198:	7bbb      	ldrb	r3, [r7, #14]
 801519a:	18d1      	adds	r1, r2, r3
 801519c:	897b      	ldrh	r3, [r7, #10]
 801519e:	89ba      	ldrh	r2, [r7, #12]
 80151a0:	f7fa fda2 	bl	800fce8 <pbuf_copy_partial>
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	89bb      	ldrh	r3, [r7, #12]
 80151aa:	4293      	cmp	r3, r2
 80151ac:	f040 809f 	bne.w	80152ee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	68db      	ldr	r3, [r3, #12]
 80151b4:	899b      	ldrh	r3, [r3, #12]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7f6 fbd5 	bl	800b968 <lwip_htons>
 80151be:	4603      	mov	r3, r0
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80151c6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80151c8:	2300      	movs	r3, #0
 80151ca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80151cc:	7efb      	ldrb	r3, [r7, #27]
 80151ce:	f003 0308 	and.w	r3, r3, #8
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d007      	beq.n	80151e6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80151d6:	7efb      	ldrb	r3, [r7, #27]
 80151d8:	f023 0308 	bic.w	r3, r3, #8
 80151dc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80151de:	7ebb      	ldrb	r3, [r7, #26]
 80151e0:	f043 0308 	orr.w	r3, r3, #8
 80151e4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80151e6:	7efb      	ldrb	r3, [r7, #27]
 80151e8:	f003 0301 	and.w	r3, r3, #1
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d007      	beq.n	8015200 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80151f0:	7efb      	ldrb	r3, [r7, #27]
 80151f2:	f023 0301 	bic.w	r3, r3, #1
 80151f6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80151f8:	7ebb      	ldrb	r3, [r7, #26]
 80151fa:	f043 0301 	orr.w	r3, r3, #1
 80151fe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	68db      	ldr	r3, [r3, #12]
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	4618      	mov	r0, r3
 8015208:	f7f6 fbc3 	bl	800b992 <lwip_htonl>
 801520c:	4602      	mov	r2, r0
 801520e:	887b      	ldrh	r3, [r7, #2]
 8015210:	18d1      	adds	r1, r2, r3
 8015212:	7eba      	ldrb	r2, [r7, #26]
 8015214:	7bfb      	ldrb	r3, [r7, #15]
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	460b      	mov	r3, r1
 801521a:	6939      	ldr	r1, [r7, #16]
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7ff fa4d 	bl	80146bc <tcp_create_segment>
 8015222:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d063      	beq.n	80152f2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801522a:	697b      	ldr	r3, [r7, #20]
 801522c:	685b      	ldr	r3, [r3, #4]
 801522e:	4618      	mov	r0, r3
 8015230:	f7fa fbe2 	bl	800f9f8 <pbuf_clen>
 8015234:	4603      	mov	r3, r0
 8015236:	461a      	mov	r2, r3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801523e:	1a9b      	subs	r3, r3, r2
 8015240:	b29a      	uxth	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	6858      	ldr	r0, [r3, #4]
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	891a      	ldrh	r2, [r3, #8]
 8015252:	89bb      	ldrh	r3, [r7, #12]
 8015254:	1ad3      	subs	r3, r2, r3
 8015256:	b29b      	uxth	r3, r3
 8015258:	4619      	mov	r1, r3
 801525a:	f7fa f9bb 	bl	800f5d4 <pbuf_realloc>
  useg->len -= remainder;
 801525e:	697b      	ldr	r3, [r7, #20]
 8015260:	891a      	ldrh	r2, [r3, #8]
 8015262:	89bb      	ldrh	r3, [r7, #12]
 8015264:	1ad3      	subs	r3, r2, r3
 8015266:	b29a      	uxth	r2, r3
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	899b      	ldrh	r3, [r3, #12]
 8015272:	b29c      	uxth	r4, r3
 8015274:	7efb      	ldrb	r3, [r7, #27]
 8015276:	b29b      	uxth	r3, r3
 8015278:	4618      	mov	r0, r3
 801527a:	f7f6 fb75 	bl	800b968 <lwip_htons>
 801527e:	4603      	mov	r3, r0
 8015280:	461a      	mov	r2, r3
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	68db      	ldr	r3, [r3, #12]
 8015286:	4322      	orrs	r2, r4
 8015288:	b292      	uxth	r2, r2
 801528a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	4618      	mov	r0, r3
 8015292:	f7fa fbb1 	bl	800f9f8 <pbuf_clen>
 8015296:	4603      	mov	r3, r0
 8015298:	461a      	mov	r2, r3
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152a0:	4413      	add	r3, r2
 80152a2:	b29a      	uxth	r2, r3
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fa fba2 	bl	800f9f8 <pbuf_clen>
 80152b4:	4603      	mov	r3, r0
 80152b6:	461a      	mov	r2, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152be:	4413      	add	r3, r2
 80152c0:	b29a      	uxth	r2, r3
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	681a      	ldr	r2, [r3, #0]
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	69fa      	ldr	r2, [r7, #28]
 80152d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d103      	bne.n	80152e6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	2200      	movs	r2, #0
 80152e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80152e6:	2300      	movs	r3, #0
 80152e8:	e016      	b.n	8015318 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80152ea:	bf00      	nop
 80152ec:	e002      	b.n	80152f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80152ee:	bf00      	nop
 80152f0:	e000      	b.n	80152f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80152f2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d006      	beq.n	8015308 <tcp_split_unsent_seg+0x25c>
 80152fa:	4b09      	ldr	r3, [pc, #36]	; (8015320 <tcp_split_unsent_seg+0x274>)
 80152fc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015300:	490d      	ldr	r1, [pc, #52]	; (8015338 <tcp_split_unsent_seg+0x28c>)
 8015302:	4809      	ldr	r0, [pc, #36]	; (8015328 <tcp_split_unsent_seg+0x27c>)
 8015304:	f002 fb5c 	bl	80179c0 <iprintf>
  if (p != NULL) {
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d002      	beq.n	8015314 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801530e:	6938      	ldr	r0, [r7, #16]
 8015310:	f7fa fae4 	bl	800f8dc <pbuf_free>
  }

  return ERR_MEM;
 8015314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015318:	4618      	mov	r0, r3
 801531a:	3724      	adds	r7, #36	; 0x24
 801531c:	46bd      	mov	sp, r7
 801531e:	bd90      	pop	{r4, r7, pc}
 8015320:	0801c548 	.word	0x0801c548
 8015324:	0801c938 	.word	0x0801c938
 8015328:	0801c5f8 	.word	0x0801c5f8
 801532c:	0801c95c 	.word	0x0801c95c
 8015330:	0801c980 	.word	0x0801c980
 8015334:	0801c990 	.word	0x0801c990
 8015338:	0801c9a0 	.word	0x0801c9a0

0801533c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801533c:	b590      	push	{r4, r7, lr}
 801533e:	b085      	sub	sp, #20
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d106      	bne.n	8015358 <tcp_send_fin+0x1c>
 801534a:	4b21      	ldr	r3, [pc, #132]	; (80153d0 <tcp_send_fin+0x94>)
 801534c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015350:	4920      	ldr	r1, [pc, #128]	; (80153d4 <tcp_send_fin+0x98>)
 8015352:	4821      	ldr	r0, [pc, #132]	; (80153d8 <tcp_send_fin+0x9c>)
 8015354:	f002 fb34 	bl	80179c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801535c:	2b00      	cmp	r3, #0
 801535e:	d02e      	beq.n	80153be <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015364:	60fb      	str	r3, [r7, #12]
 8015366:	e002      	b.n	801536e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d1f8      	bne.n	8015368 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	899b      	ldrh	r3, [r3, #12]
 801537c:	b29b      	uxth	r3, r3
 801537e:	4618      	mov	r0, r3
 8015380:	f7f6 faf2 	bl	800b968 <lwip_htons>
 8015384:	4603      	mov	r3, r0
 8015386:	b2db      	uxtb	r3, r3
 8015388:	f003 0307 	and.w	r3, r3, #7
 801538c:	2b00      	cmp	r3, #0
 801538e:	d116      	bne.n	80153be <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	899b      	ldrh	r3, [r3, #12]
 8015396:	b29c      	uxth	r4, r3
 8015398:	2001      	movs	r0, #1
 801539a:	f7f6 fae5 	bl	800b968 <lwip_htons>
 801539e:	4603      	mov	r3, r0
 80153a0:	461a      	mov	r2, r3
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	4322      	orrs	r2, r4
 80153a8:	b292      	uxth	r2, r2
 80153aa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	8b5b      	ldrh	r3, [r3, #26]
 80153b0:	f043 0320 	orr.w	r3, r3, #32
 80153b4:	b29a      	uxth	r2, r3
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80153ba:	2300      	movs	r3, #0
 80153bc:	e004      	b.n	80153c8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80153be:	2101      	movs	r1, #1
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f000 f80b 	bl	80153dc <tcp_enqueue_flags>
 80153c6:	4603      	mov	r3, r0
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3714      	adds	r7, #20
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd90      	pop	{r4, r7, pc}
 80153d0:	0801c548 	.word	0x0801c548
 80153d4:	0801c9ac 	.word	0x0801c9ac
 80153d8:	0801c5f8 	.word	0x0801c5f8

080153dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b08a      	sub	sp, #40	; 0x28
 80153e0:	af02      	add	r7, sp, #8
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	460b      	mov	r3, r1
 80153e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80153e8:	2300      	movs	r3, #0
 80153ea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80153ec:	2300      	movs	r3, #0
 80153ee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80153f0:	78fb      	ldrb	r3, [r7, #3]
 80153f2:	f003 0303 	and.w	r3, r3, #3
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d106      	bne.n	8015408 <tcp_enqueue_flags+0x2c>
 80153fa:	4b67      	ldr	r3, [pc, #412]	; (8015598 <tcp_enqueue_flags+0x1bc>)
 80153fc:	f240 4211 	movw	r2, #1041	; 0x411
 8015400:	4966      	ldr	r1, [pc, #408]	; (801559c <tcp_enqueue_flags+0x1c0>)
 8015402:	4867      	ldr	r0, [pc, #412]	; (80155a0 <tcp_enqueue_flags+0x1c4>)
 8015404:	f002 fadc 	bl	80179c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d106      	bne.n	801541c <tcp_enqueue_flags+0x40>
 801540e:	4b62      	ldr	r3, [pc, #392]	; (8015598 <tcp_enqueue_flags+0x1bc>)
 8015410:	f240 4213 	movw	r2, #1043	; 0x413
 8015414:	4963      	ldr	r1, [pc, #396]	; (80155a4 <tcp_enqueue_flags+0x1c8>)
 8015416:	4862      	ldr	r0, [pc, #392]	; (80155a0 <tcp_enqueue_flags+0x1c4>)
 8015418:	f002 fad2 	bl	80179c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801541c:	78fb      	ldrb	r3, [r7, #3]
 801541e:	f003 0302 	and.w	r3, r3, #2
 8015422:	2b00      	cmp	r3, #0
 8015424:	d001      	beq.n	801542a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015426:	2301      	movs	r3, #1
 8015428:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801542a:	7ffb      	ldrb	r3, [r7, #31]
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	b2db      	uxtb	r3, r3
 8015430:	f003 0304 	and.w	r3, r3, #4
 8015434:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015436:	7dfb      	ldrb	r3, [r7, #23]
 8015438:	b29b      	uxth	r3, r3
 801543a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801543e:	4619      	mov	r1, r3
 8015440:	2036      	movs	r0, #54	; 0x36
 8015442:	f7f9 ff67 	bl	800f314 <pbuf_alloc>
 8015446:	6138      	str	r0, [r7, #16]
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d109      	bne.n	8015462 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	8b5b      	ldrh	r3, [r3, #26]
 8015452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015456:	b29a      	uxth	r2, r3
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801545c:	f04f 33ff 	mov.w	r3, #4294967295
 8015460:	e095      	b.n	801558e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	895a      	ldrh	r2, [r3, #10]
 8015466:	7dfb      	ldrb	r3, [r7, #23]
 8015468:	b29b      	uxth	r3, r3
 801546a:	429a      	cmp	r2, r3
 801546c:	d206      	bcs.n	801547c <tcp_enqueue_flags+0xa0>
 801546e:	4b4a      	ldr	r3, [pc, #296]	; (8015598 <tcp_enqueue_flags+0x1bc>)
 8015470:	f240 4239 	movw	r2, #1081	; 0x439
 8015474:	494c      	ldr	r1, [pc, #304]	; (80155a8 <tcp_enqueue_flags+0x1cc>)
 8015476:	484a      	ldr	r0, [pc, #296]	; (80155a0 <tcp_enqueue_flags+0x1c4>)
 8015478:	f002 faa2 	bl	80179c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015480:	78fa      	ldrb	r2, [r7, #3]
 8015482:	7ffb      	ldrb	r3, [r7, #31]
 8015484:	9300      	str	r3, [sp, #0]
 8015486:	460b      	mov	r3, r1
 8015488:	6939      	ldr	r1, [r7, #16]
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f7ff f916 	bl	80146bc <tcp_create_segment>
 8015490:	60f8      	str	r0, [r7, #12]
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d109      	bne.n	80154ac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	8b5b      	ldrh	r3, [r3, #26]
 801549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154a0:	b29a      	uxth	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80154a6:	f04f 33ff 	mov.w	r3, #4294967295
 80154aa:	e070      	b.n	801558e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	f003 0303 	and.w	r3, r3, #3
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d006      	beq.n	80154c6 <tcp_enqueue_flags+0xea>
 80154b8:	4b37      	ldr	r3, [pc, #220]	; (8015598 <tcp_enqueue_flags+0x1bc>)
 80154ba:	f240 4242 	movw	r2, #1090	; 0x442
 80154be:	493b      	ldr	r1, [pc, #236]	; (80155ac <tcp_enqueue_flags+0x1d0>)
 80154c0:	4837      	ldr	r0, [pc, #220]	; (80155a0 <tcp_enqueue_flags+0x1c4>)
 80154c2:	f002 fa7d 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	891b      	ldrh	r3, [r3, #8]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d006      	beq.n	80154dc <tcp_enqueue_flags+0x100>
 80154ce:	4b32      	ldr	r3, [pc, #200]	; (8015598 <tcp_enqueue_flags+0x1bc>)
 80154d0:	f240 4243 	movw	r2, #1091	; 0x443
 80154d4:	4936      	ldr	r1, [pc, #216]	; (80155b0 <tcp_enqueue_flags+0x1d4>)
 80154d6:	4832      	ldr	r0, [pc, #200]	; (80155a0 <tcp_enqueue_flags+0x1c4>)
 80154d8:	f002 fa72 	bl	80179c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d103      	bne.n	80154ec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	68fa      	ldr	r2, [r7, #12]
 80154e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80154ea:	e00d      	b.n	8015508 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154f0:	61bb      	str	r3, [r7, #24]
 80154f2:	e002      	b.n	80154fa <tcp_enqueue_flags+0x11e>
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	61bb      	str	r3, [r7, #24]
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1f8      	bne.n	80154f4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015502:	69bb      	ldr	r3, [r7, #24]
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2200      	movs	r2, #0
 801550c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015510:	78fb      	ldrb	r3, [r7, #3]
 8015512:	f003 0302 	and.w	r3, r3, #2
 8015516:	2b00      	cmp	r3, #0
 8015518:	d104      	bne.n	8015524 <tcp_enqueue_flags+0x148>
 801551a:	78fb      	ldrb	r3, [r7, #3]
 801551c:	f003 0301 	and.w	r3, r3, #1
 8015520:	2b00      	cmp	r3, #0
 8015522:	d004      	beq.n	801552e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015528:	1c5a      	adds	r2, r3, #1
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801552e:	78fb      	ldrb	r3, [r7, #3]
 8015530:	f003 0301 	and.w	r3, r3, #1
 8015534:	2b00      	cmp	r3, #0
 8015536:	d006      	beq.n	8015546 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	8b5b      	ldrh	r3, [r3, #26]
 801553c:	f043 0320 	orr.w	r3, r3, #32
 8015540:	b29a      	uxth	r2, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	4618      	mov	r0, r3
 801554c:	f7fa fa54 	bl	800f9f8 <pbuf_clen>
 8015550:	4603      	mov	r3, r0
 8015552:	461a      	mov	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801555a:	4413      	add	r3, r2
 801555c:	b29a      	uxth	r2, r3
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801556a:	2b00      	cmp	r3, #0
 801556c:	d00e      	beq.n	801558c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015572:	2b00      	cmp	r3, #0
 8015574:	d10a      	bne.n	801558c <tcp_enqueue_flags+0x1b0>
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801557a:	2b00      	cmp	r3, #0
 801557c:	d106      	bne.n	801558c <tcp_enqueue_flags+0x1b0>
 801557e:	4b06      	ldr	r3, [pc, #24]	; (8015598 <tcp_enqueue_flags+0x1bc>)
 8015580:	f240 4265 	movw	r2, #1125	; 0x465
 8015584:	490b      	ldr	r1, [pc, #44]	; (80155b4 <tcp_enqueue_flags+0x1d8>)
 8015586:	4806      	ldr	r0, [pc, #24]	; (80155a0 <tcp_enqueue_flags+0x1c4>)
 8015588:	f002 fa1a 	bl	80179c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801558c:	2300      	movs	r3, #0
}
 801558e:	4618      	mov	r0, r3
 8015590:	3720      	adds	r7, #32
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	0801c548 	.word	0x0801c548
 801559c:	0801c9c8 	.word	0x0801c9c8
 80155a0:	0801c5f8 	.word	0x0801c5f8
 80155a4:	0801ca20 	.word	0x0801ca20
 80155a8:	0801ca40 	.word	0x0801ca40
 80155ac:	0801ca7c 	.word	0x0801ca7c
 80155b0:	0801ca94 	.word	0x0801ca94
 80155b4:	0801cac0 	.word	0x0801cac0

080155b8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80155b8:	b5b0      	push	{r4, r5, r7, lr}
 80155ba:	b08a      	sub	sp, #40	; 0x28
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 80155c0:	f7f0 fb60 	bl	8005c84 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d106      	bne.n	80155d8 <tcp_output+0x20>
 80155ca:	4b8a      	ldr	r3, [pc, #552]	; (80157f4 <tcp_output+0x23c>)
 80155cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80155d0:	4989      	ldr	r1, [pc, #548]	; (80157f8 <tcp_output+0x240>)
 80155d2:	488a      	ldr	r0, [pc, #552]	; (80157fc <tcp_output+0x244>)
 80155d4:	f002 f9f4 	bl	80179c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	7d1b      	ldrb	r3, [r3, #20]
 80155dc:	2b01      	cmp	r3, #1
 80155de:	d106      	bne.n	80155ee <tcp_output+0x36>
 80155e0:	4b84      	ldr	r3, [pc, #528]	; (80157f4 <tcp_output+0x23c>)
 80155e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80155e6:	4986      	ldr	r1, [pc, #536]	; (8015800 <tcp_output+0x248>)
 80155e8:	4884      	ldr	r0, [pc, #528]	; (80157fc <tcp_output+0x244>)
 80155ea:	f002 f9e9 	bl	80179c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80155ee:	4b85      	ldr	r3, [pc, #532]	; (8015804 <tcp_output+0x24c>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d101      	bne.n	80155fc <tcp_output+0x44>
    return ERR_OK;
 80155f8:	2300      	movs	r3, #0
 80155fa:	e1ce      	b.n	801599a <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015608:	4293      	cmp	r3, r2
 801560a:	bf28      	it	cs
 801560c:	4613      	movcs	r3, r2
 801560e:	b29b      	uxth	r3, r3
 8015610:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015616:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561a:	2b00      	cmp	r3, #0
 801561c:	d10b      	bne.n	8015636 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	8b5b      	ldrh	r3, [r3, #26]
 8015622:	f003 0302 	and.w	r3, r3, #2
 8015626:	2b00      	cmp	r3, #0
 8015628:	f000 81aa 	beq.w	8015980 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f000 fdcb 	bl	80161c8 <tcp_send_empty_ack>
 8015632:	4603      	mov	r3, r0
 8015634:	e1b1      	b.n	801599a <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015636:	6879      	ldr	r1, [r7, #4]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3304      	adds	r3, #4
 801563c:	461a      	mov	r2, r3
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f7ff f820 	bl	8014684 <tcp_route>
 8015644:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d102      	bne.n	8015652 <tcp_output+0x9a>
    return ERR_RTE;
 801564c:	f06f 0303 	mvn.w	r3, #3
 8015650:	e1a3      	b.n	801599a <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d003      	beq.n	8015660 <tcp_output+0xa8>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d111      	bne.n	8015684 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d002      	beq.n	801566c <tcp_output+0xb4>
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	3304      	adds	r3, #4
 801566a:	e000      	b.n	801566e <tcp_output+0xb6>
 801566c:	2300      	movs	r3, #0
 801566e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d102      	bne.n	801567c <tcp_output+0xc4>
      return ERR_RTE;
 8015676:	f06f 0303 	mvn.w	r3, #3
 801567a:	e18e      	b.n	801599a <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801567c:	693b      	ldr	r3, [r7, #16]
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f7f6 f981 	bl	800b992 <lwip_htonl>
 8015690:	4602      	mov	r2, r0
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015696:	1ad3      	subs	r3, r2, r3
 8015698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801569a:	8912      	ldrh	r2, [r2, #8]
 801569c:	4413      	add	r3, r2
 801569e:	69ba      	ldr	r2, [r7, #24]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d227      	bcs.n	80156f4 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156aa:	461a      	mov	r2, r3
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d114      	bne.n	80156dc <tcp_output+0x124>
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d110      	bne.n	80156dc <tcp_output+0x124>
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d10b      	bne.n	80156dc <tcp_output+0x124>
      pcb->persist_cnt = 0;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2200      	movs	r2, #0
 80156c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2201      	movs	r2, #1
 80156d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2200      	movs	r2, #0
 80156d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	8b5b      	ldrh	r3, [r3, #26]
 80156e0:	f003 0302 	and.w	r3, r3, #2
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	f000 814d 	beq.w	8015984 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f000 fd6c 	bl	80161c8 <tcp_send_empty_ack>
 80156f0:	4603      	mov	r3, r0
 80156f2:	e152      	b.n	801599a <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015700:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015702:	6a3b      	ldr	r3, [r7, #32]
 8015704:	2b00      	cmp	r3, #0
 8015706:	f000 811c 	beq.w	8015942 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801570a:	e002      	b.n	8015712 <tcp_output+0x15a>
 801570c:	6a3b      	ldr	r3, [r7, #32]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	623b      	str	r3, [r7, #32]
 8015712:	6a3b      	ldr	r3, [r7, #32]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d1f8      	bne.n	801570c <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801571a:	e112      	b.n	8015942 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	899b      	ldrh	r3, [r3, #12]
 8015722:	b29b      	uxth	r3, r3
 8015724:	4618      	mov	r0, r3
 8015726:	f7f6 f91f 	bl	800b968 <lwip_htons>
 801572a:	4603      	mov	r3, r0
 801572c:	b2db      	uxtb	r3, r3
 801572e:	f003 0304 	and.w	r3, r3, #4
 8015732:	2b00      	cmp	r3, #0
 8015734:	d006      	beq.n	8015744 <tcp_output+0x18c>
 8015736:	4b2f      	ldr	r3, [pc, #188]	; (80157f4 <tcp_output+0x23c>)
 8015738:	f240 5236 	movw	r2, #1334	; 0x536
 801573c:	4932      	ldr	r1, [pc, #200]	; (8015808 <tcp_output+0x250>)
 801573e:	482f      	ldr	r0, [pc, #188]	; (80157fc <tcp_output+0x244>)
 8015740:	f002 f93e 	bl	80179c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015748:	2b00      	cmp	r3, #0
 801574a:	d01f      	beq.n	801578c <tcp_output+0x1d4>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8b5b      	ldrh	r3, [r3, #26]
 8015750:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015754:	2b00      	cmp	r3, #0
 8015756:	d119      	bne.n	801578c <tcp_output+0x1d4>
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801575c:	2b00      	cmp	r3, #0
 801575e:	d00b      	beq.n	8015778 <tcp_output+0x1c0>
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d110      	bne.n	801578c <tcp_output+0x1d4>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801576e:	891a      	ldrh	r2, [r3, #8]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015774:	429a      	cmp	r2, r3
 8015776:	d209      	bcs.n	801578c <tcp_output+0x1d4>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801577e:	2b00      	cmp	r3, #0
 8015780:	d004      	beq.n	801578c <tcp_output+0x1d4>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015788:	2b0f      	cmp	r3, #15
 801578a:	d901      	bls.n	8015790 <tcp_output+0x1d8>
 801578c:	2301      	movs	r3, #1
 801578e:	e000      	b.n	8015792 <tcp_output+0x1da>
 8015790:	2300      	movs	r3, #0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d106      	bne.n	80157a4 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	8b5b      	ldrh	r3, [r3, #26]
 801579a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801579e:	2b00      	cmp	r3, #0
 80157a0:	f000 80e4 	beq.w	801596c <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	7d1b      	ldrb	r3, [r3, #20]
 80157a8:	2b02      	cmp	r3, #2
 80157aa:	d00d      	beq.n	80157c8 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80157ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ae:	68db      	ldr	r3, [r3, #12]
 80157b0:	899b      	ldrh	r3, [r3, #12]
 80157b2:	b29c      	uxth	r4, r3
 80157b4:	2010      	movs	r0, #16
 80157b6:	f7f6 f8d7 	bl	800b968 <lwip_htons>
 80157ba:	4603      	mov	r3, r0
 80157bc:	461a      	mov	r2, r3
 80157be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	4322      	orrs	r2, r4
 80157c4:	b292      	uxth	r2, r2
 80157c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80157c8:	697a      	ldr	r2, [r7, #20]
 80157ca:	6879      	ldr	r1, [r7, #4]
 80157cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157ce:	f000 f909 	bl	80159e4 <tcp_output_segment>
 80157d2:	4603      	mov	r3, r0
 80157d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80157d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d016      	beq.n	801580c <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	8b5b      	ldrh	r3, [r3, #26]
 80157e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	835a      	strh	r2, [r3, #26]
      return err;
 80157ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157f0:	e0d3      	b.n	801599a <tcp_output+0x3e2>
 80157f2:	bf00      	nop
 80157f4:	0801c548 	.word	0x0801c548
 80157f8:	0801cae8 	.word	0x0801cae8
 80157fc:	0801c5f8 	.word	0x0801c5f8
 8015800:	0801cb00 	.word	0x0801cb00
 8015804:	240108f4 	.word	0x240108f4
 8015808:	0801cb28 	.word	0x0801cb28
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	7d1b      	ldrb	r3, [r3, #20]
 8015818:	2b02      	cmp	r3, #2
 801581a:	d006      	beq.n	801582a <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	8b5b      	ldrh	r3, [r3, #26]
 8015820:	f023 0303 	bic.w	r3, r3, #3
 8015824:	b29a      	uxth	r2, r3
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	4618      	mov	r0, r3
 8015832:	f7f6 f8ae 	bl	800b992 <lwip_htonl>
 8015836:	4604      	mov	r4, r0
 8015838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583a:	891b      	ldrh	r3, [r3, #8]
 801583c:	461d      	mov	r5, r3
 801583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015840:	68db      	ldr	r3, [r3, #12]
 8015842:	899b      	ldrh	r3, [r3, #12]
 8015844:	b29b      	uxth	r3, r3
 8015846:	4618      	mov	r0, r3
 8015848:	f7f6 f88e 	bl	800b968 <lwip_htons>
 801584c:	4603      	mov	r3, r0
 801584e:	b2db      	uxtb	r3, r3
 8015850:	f003 0303 	and.w	r3, r3, #3
 8015854:	2b00      	cmp	r3, #0
 8015856:	d001      	beq.n	801585c <tcp_output+0x2a4>
 8015858:	2301      	movs	r3, #1
 801585a:	e000      	b.n	801585e <tcp_output+0x2a6>
 801585c:	2300      	movs	r3, #0
 801585e:	442b      	add	r3, r5
 8015860:	4423      	add	r3, r4
 8015862:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	2b00      	cmp	r3, #0
 801586e:	da02      	bge.n	8015876 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	68ba      	ldr	r2, [r7, #8]
 8015874:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015878:	891b      	ldrh	r3, [r3, #8]
 801587a:	461c      	mov	r4, r3
 801587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	899b      	ldrh	r3, [r3, #12]
 8015882:	b29b      	uxth	r3, r3
 8015884:	4618      	mov	r0, r3
 8015886:	f7f6 f86f 	bl	800b968 <lwip_htons>
 801588a:	4603      	mov	r3, r0
 801588c:	b2db      	uxtb	r3, r3
 801588e:	f003 0303 	and.w	r3, r3, #3
 8015892:	2b00      	cmp	r3, #0
 8015894:	d001      	beq.n	801589a <tcp_output+0x2e2>
 8015896:	2301      	movs	r3, #1
 8015898:	e000      	b.n	801589c <tcp_output+0x2e4>
 801589a:	2300      	movs	r3, #0
 801589c:	4423      	add	r3, r4
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d049      	beq.n	8015936 <tcp_output+0x37e>
      seg->next = NULL;
 80158a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a4:	2200      	movs	r2, #0
 80158a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d105      	bne.n	80158bc <tcp_output+0x304>
        pcb->unacked = seg;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	623b      	str	r3, [r7, #32]
 80158ba:	e03f      	b.n	801593c <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80158bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7f6 f865 	bl	800b992 <lwip_htonl>
 80158c8:	4604      	mov	r4, r0
 80158ca:	6a3b      	ldr	r3, [r7, #32]
 80158cc:	68db      	ldr	r3, [r3, #12]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f6 f85e 	bl	800b992 <lwip_htonl>
 80158d6:	4603      	mov	r3, r0
 80158d8:	1ae3      	subs	r3, r4, r3
 80158da:	2b00      	cmp	r3, #0
 80158dc:	da24      	bge.n	8015928 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	3370      	adds	r3, #112	; 0x70
 80158e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80158e4:	e002      	b.n	80158ec <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80158e6:	69fb      	ldr	r3, [r7, #28]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d011      	beq.n	8015918 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80158f4:	69fb      	ldr	r3, [r7, #28]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	68db      	ldr	r3, [r3, #12]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f6 f848 	bl	800b992 <lwip_htonl>
 8015902:	4604      	mov	r4, r0
 8015904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	4618      	mov	r0, r3
 801590c:	f7f6 f841 	bl	800b992 <lwip_htonl>
 8015910:	4603      	mov	r3, r0
 8015912:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015914:	2b00      	cmp	r3, #0
 8015916:	dbe6      	blt.n	80158e6 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8015918:	69fb      	ldr	r3, [r7, #28]
 801591a:	681a      	ldr	r2, [r3, #0]
 801591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	e009      	b.n	801593c <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015928:	6a3b      	ldr	r3, [r7, #32]
 801592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801592c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801592e:	6a3b      	ldr	r3, [r7, #32]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	623b      	str	r3, [r7, #32]
 8015934:	e002      	b.n	801593c <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015938:	f7fb ff09 	bl	801174e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015940:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015944:	2b00      	cmp	r3, #0
 8015946:	d012      	beq.n	801596e <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801594a:	68db      	ldr	r3, [r3, #12]
 801594c:	685b      	ldr	r3, [r3, #4]
 801594e:	4618      	mov	r0, r3
 8015950:	f7f6 f81f 	bl	800b992 <lwip_htonl>
 8015954:	4602      	mov	r2, r0
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801595a:	1ad3      	subs	r3, r2, r3
 801595c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801595e:	8912      	ldrh	r2, [r2, #8]
 8015960:	4413      	add	r3, r2
  while (seg != NULL &&
 8015962:	69ba      	ldr	r2, [r7, #24]
 8015964:	429a      	cmp	r2, r3
 8015966:	f4bf aed9 	bcs.w	801571c <tcp_output+0x164>
 801596a:	e000      	b.n	801596e <tcp_output+0x3b6>
      break;
 801596c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015972:	2b00      	cmp	r3, #0
 8015974:	d108      	bne.n	8015988 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2200      	movs	r2, #0
 801597a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801597e:	e004      	b.n	801598a <tcp_output+0x3d2>
    goto output_done;
 8015980:	bf00      	nop
 8015982:	e002      	b.n	801598a <tcp_output+0x3d2>
    goto output_done;
 8015984:	bf00      	nop
 8015986:	e000      	b.n	801598a <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015988:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	8b5b      	ldrh	r3, [r3, #26]
 801598e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015992:	b29a      	uxth	r2, r3
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015998:	2300      	movs	r3, #0
}
 801599a:	4618      	mov	r0, r3
 801599c:	3728      	adds	r7, #40	; 0x28
 801599e:	46bd      	mov	sp, r7
 80159a0:	bdb0      	pop	{r4, r5, r7, pc}
 80159a2:	bf00      	nop

080159a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d106      	bne.n	80159c0 <tcp_output_segment_busy+0x1c>
 80159b2:	4b09      	ldr	r3, [pc, #36]	; (80159d8 <tcp_output_segment_busy+0x34>)
 80159b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80159b8:	4908      	ldr	r1, [pc, #32]	; (80159dc <tcp_output_segment_busy+0x38>)
 80159ba:	4809      	ldr	r0, [pc, #36]	; (80159e0 <tcp_output_segment_busy+0x3c>)
 80159bc:	f002 f800 	bl	80179c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	7b9b      	ldrb	r3, [r3, #14]
 80159c6:	2b01      	cmp	r3, #1
 80159c8:	d001      	beq.n	80159ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80159ca:	2301      	movs	r3, #1
 80159cc:	e000      	b.n	80159d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80159ce:	2300      	movs	r3, #0
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3708      	adds	r7, #8
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	0801c548 	.word	0x0801c548
 80159dc:	0801cb40 	.word	0x0801cb40
 80159e0:	0801c5f8 	.word	0x0801c5f8

080159e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80159e4:	b5b0      	push	{r4, r5, r7, lr}
 80159e6:	b08c      	sub	sp, #48	; 0x30
 80159e8:	af04      	add	r7, sp, #16
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d106      	bne.n	8015a04 <tcp_output_segment+0x20>
 80159f6:	4b63      	ldr	r3, [pc, #396]	; (8015b84 <tcp_output_segment+0x1a0>)
 80159f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80159fc:	4962      	ldr	r1, [pc, #392]	; (8015b88 <tcp_output_segment+0x1a4>)
 80159fe:	4863      	ldr	r0, [pc, #396]	; (8015b8c <tcp_output_segment+0x1a8>)
 8015a00:	f001 ffde 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d106      	bne.n	8015a18 <tcp_output_segment+0x34>
 8015a0a:	4b5e      	ldr	r3, [pc, #376]	; (8015b84 <tcp_output_segment+0x1a0>)
 8015a0c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015a10:	495f      	ldr	r1, [pc, #380]	; (8015b90 <tcp_output_segment+0x1ac>)
 8015a12:	485e      	ldr	r0, [pc, #376]	; (8015b8c <tcp_output_segment+0x1a8>)
 8015a14:	f001 ffd4 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d106      	bne.n	8015a2c <tcp_output_segment+0x48>
 8015a1e:	4b59      	ldr	r3, [pc, #356]	; (8015b84 <tcp_output_segment+0x1a0>)
 8015a20:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015a24:	495b      	ldr	r1, [pc, #364]	; (8015b94 <tcp_output_segment+0x1b0>)
 8015a26:	4859      	ldr	r0, [pc, #356]	; (8015b8c <tcp_output_segment+0x1a8>)
 8015a28:	f001 ffca 	bl	80179c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015a2c:	68f8      	ldr	r0, [r7, #12]
 8015a2e:	f7ff ffb9 	bl	80159a4 <tcp_output_segment_busy>
 8015a32:	4603      	mov	r3, r0
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d001      	beq.n	8015a3c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e09f      	b.n	8015b7c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	68dc      	ldr	r4, [r3, #12]
 8015a44:	4610      	mov	r0, r2
 8015a46:	f7f5 ffa4 	bl	800b992 <lwip_htonl>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	68dc      	ldr	r4, [r3, #12]
 8015a56:	4610      	mov	r0, r2
 8015a58:	f7f5 ff86 	bl	800b968 <lwip_htons>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015a68:	441a      	add	r2, r3
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	3314      	adds	r3, #20
 8015a74:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	7a9b      	ldrb	r3, [r3, #10]
 8015a7a:	f003 0301 	and.w	r3, r3, #1
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d015      	beq.n	8015aae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	3304      	adds	r3, #4
 8015a86:	461a      	mov	r2, r3
 8015a88:	6879      	ldr	r1, [r7, #4]
 8015a8a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015a8e:	f7fc fa2d 	bl	8011eec <tcp_eff_send_mss_netif>
 8015a92:	4603      	mov	r3, r0
 8015a94:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015a96:	8b7b      	ldrh	r3, [r7, #26]
 8015a98:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7f5 ff78 	bl	800b992 <lwip_htonl>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	69fb      	ldr	r3, [r7, #28]
 8015aa6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	3304      	adds	r3, #4
 8015aac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	da02      	bge.n	8015abe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	2200      	movs	r2, #0
 8015abc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d10c      	bne.n	8015ae0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015ac6:	4b34      	ldr	r3, [pc, #208]	; (8015b98 <tcp_output_segment+0x1b4>)
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	68db      	ldr	r3, [r3, #12]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7f5 ff5c 	bl	800b992 <lwip_htonl>
 8015ada:	4602      	mov	r2, r0
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	68da      	ldr	r2, [r3, #12]
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	685b      	ldr	r3, [r3, #4]
 8015aea:	1ad3      	subs	r3, r2, r3
 8015aec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	8959      	ldrh	r1, [r3, #10]
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	8b3a      	ldrh	r2, [r7, #24]
 8015afa:	1a8a      	subs	r2, r1, r2
 8015afc:	b292      	uxth	r2, r2
 8015afe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	8919      	ldrh	r1, [r3, #8]
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	8b3a      	ldrh	r2, [r7, #24]
 8015b0c:	1a8a      	subs	r2, r1, r2
 8015b0e:	b292      	uxth	r2, r2
 8015b10:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	68fa      	ldr	r2, [r7, #12]
 8015b18:	68d2      	ldr	r2, [r2, #12]
 8015b1a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	68db      	ldr	r3, [r3, #12]
 8015b20:	2200      	movs	r2, #0
 8015b22:	741a      	strb	r2, [r3, #16]
 8015b24:	2200      	movs	r2, #0
 8015b26:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	68db      	ldr	r3, [r3, #12]
 8015b2c:	f103 0214 	add.w	r2, r3, #20
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	7a9b      	ldrb	r3, [r3, #10]
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	f003 0304 	and.w	r3, r3, #4
 8015b3a:	4413      	add	r3, r2
 8015b3c:	69fa      	ldr	r2, [r7, #28]
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d006      	beq.n	8015b50 <tcp_output_segment+0x16c>
 8015b42:	4b10      	ldr	r3, [pc, #64]	; (8015b84 <tcp_output_segment+0x1a0>)
 8015b44:	f240 621c 	movw	r2, #1564	; 0x61c
 8015b48:	4914      	ldr	r1, [pc, #80]	; (8015b9c <tcp_output_segment+0x1b8>)
 8015b4a:	4810      	ldr	r0, [pc, #64]	; (8015b8c <tcp_output_segment+0x1a8>)
 8015b4c:	f001 ff38 	bl	80179c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	6858      	ldr	r0, [r3, #4]
 8015b54:	68b9      	ldr	r1, [r7, #8]
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	1d1c      	adds	r4, r3, #4
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	7add      	ldrb	r5, [r3, #11]
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	7a9b      	ldrb	r3, [r3, #10]
 8015b62:	687a      	ldr	r2, [r7, #4]
 8015b64:	9202      	str	r2, [sp, #8]
 8015b66:	2206      	movs	r2, #6
 8015b68:	9201      	str	r2, [sp, #4]
 8015b6a:	9300      	str	r3, [sp, #0]
 8015b6c:	462b      	mov	r3, r5
 8015b6e:	4622      	mov	r2, r4
 8015b70:	f7f7 fb9a 	bl	800d2a8 <ip4_output_if>
 8015b74:	4603      	mov	r3, r0
 8015b76:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3720      	adds	r7, #32
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bdb0      	pop	{r4, r5, r7, pc}
 8015b84:	0801c548 	.word	0x0801c548
 8015b88:	0801cb68 	.word	0x0801cb68
 8015b8c:	0801c5f8 	.word	0x0801c5f8
 8015b90:	0801cb88 	.word	0x0801cb88
 8015b94:	0801cba8 	.word	0x0801cba8
 8015b98:	240108a8 	.word	0x240108a8
 8015b9c:	0801cbcc 	.word	0x0801cbcc

08015ba0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015ba0:	b5b0      	push	{r4, r5, r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d106      	bne.n	8015bbc <tcp_rexmit_rto_prepare+0x1c>
 8015bae:	4b31      	ldr	r3, [pc, #196]	; (8015c74 <tcp_rexmit_rto_prepare+0xd4>)
 8015bb0:	f240 6263 	movw	r2, #1635	; 0x663
 8015bb4:	4930      	ldr	r1, [pc, #192]	; (8015c78 <tcp_rexmit_rto_prepare+0xd8>)
 8015bb6:	4831      	ldr	r0, [pc, #196]	; (8015c7c <tcp_rexmit_rto_prepare+0xdc>)
 8015bb8:	f001 ff02 	bl	80179c0 <iprintf>

  if (pcb->unacked == NULL) {
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d102      	bne.n	8015bca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015bc4:	f06f 0305 	mvn.w	r3, #5
 8015bc8:	e050      	b.n	8015c6c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bce:	60fb      	str	r3, [r7, #12]
 8015bd0:	e00b      	b.n	8015bea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015bd2:	68f8      	ldr	r0, [r7, #12]
 8015bd4:	f7ff fee6 	bl	80159a4 <tcp_output_segment_busy>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d002      	beq.n	8015be4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015bde:	f06f 0305 	mvn.w	r3, #5
 8015be2:	e043      	b.n	8015c6c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	60fb      	str	r3, [r7, #12]
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d1ef      	bne.n	8015bd2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff fed6 	bl	80159a4 <tcp_output_segment_busy>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d002      	beq.n	8015c04 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015bfe:	f06f 0305 	mvn.w	r3, #5
 8015c02:	e033      	b.n	8015c6c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2200      	movs	r2, #0
 8015c18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	8b5b      	ldrh	r3, [r3, #26]
 8015c1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015c22:	b29a      	uxth	r2, r3
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	685b      	ldr	r3, [r3, #4]
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7f5 feaf 	bl	800b992 <lwip_htonl>
 8015c34:	4604      	mov	r4, r0
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	891b      	ldrh	r3, [r3, #8]
 8015c3a:	461d      	mov	r5, r3
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	899b      	ldrh	r3, [r3, #12]
 8015c42:	b29b      	uxth	r3, r3
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7f5 fe8f 	bl	800b968 <lwip_htons>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	b2db      	uxtb	r3, r3
 8015c4e:	f003 0303 	and.w	r3, r3, #3
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d001      	beq.n	8015c5a <tcp_rexmit_rto_prepare+0xba>
 8015c56:	2301      	movs	r3, #1
 8015c58:	e000      	b.n	8015c5c <tcp_rexmit_rto_prepare+0xbc>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	442b      	add	r3, r5
 8015c5e:	18e2      	adds	r2, r4, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2200      	movs	r2, #0
 8015c68:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015c6a:	2300      	movs	r3, #0
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3710      	adds	r7, #16
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bdb0      	pop	{r4, r5, r7, pc}
 8015c74:	0801c548 	.word	0x0801c548
 8015c78:	0801cbe0 	.word	0x0801cbe0
 8015c7c:	0801c5f8 	.word	0x0801c5f8

08015c80 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b082      	sub	sp, #8
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d106      	bne.n	8015c9c <tcp_rexmit_rto_commit+0x1c>
 8015c8e:	4b0d      	ldr	r3, [pc, #52]	; (8015cc4 <tcp_rexmit_rto_commit+0x44>)
 8015c90:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015c94:	490c      	ldr	r1, [pc, #48]	; (8015cc8 <tcp_rexmit_rto_commit+0x48>)
 8015c96:	480d      	ldr	r0, [pc, #52]	; (8015ccc <tcp_rexmit_rto_commit+0x4c>)
 8015c98:	f001 fe92 	bl	80179c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ca2:	2bff      	cmp	r3, #255	; 0xff
 8015ca4:	d007      	beq.n	8015cb6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015cac:	3301      	adds	r3, #1
 8015cae:	b2da      	uxtb	r2, r3
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f7ff fc7e 	bl	80155b8 <tcp_output>
}
 8015cbc:	bf00      	nop
 8015cbe:	3708      	adds	r7, #8
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	0801c548 	.word	0x0801c548
 8015cc8:	0801cc04 	.word	0x0801cc04
 8015ccc:	0801c5f8 	.word	0x0801c5f8

08015cd0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b082      	sub	sp, #8
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d106      	bne.n	8015cec <tcp_rexmit_rto+0x1c>
 8015cde:	4b0a      	ldr	r3, [pc, #40]	; (8015d08 <tcp_rexmit_rto+0x38>)
 8015ce0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015ce4:	4909      	ldr	r1, [pc, #36]	; (8015d0c <tcp_rexmit_rto+0x3c>)
 8015ce6:	480a      	ldr	r0, [pc, #40]	; (8015d10 <tcp_rexmit_rto+0x40>)
 8015ce8:	f001 fe6a 	bl	80179c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f7ff ff57 	bl	8015ba0 <tcp_rexmit_rto_prepare>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d102      	bne.n	8015cfe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f7ff ffc1 	bl	8015c80 <tcp_rexmit_rto_commit>
  }
}
 8015cfe:	bf00      	nop
 8015d00:	3708      	adds	r7, #8
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	bf00      	nop
 8015d08:	0801c548 	.word	0x0801c548
 8015d0c:	0801cc28 	.word	0x0801cc28
 8015d10:	0801c5f8 	.word	0x0801c5f8

08015d14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015d14:	b590      	push	{r4, r7, lr}
 8015d16:	b085      	sub	sp, #20
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d106      	bne.n	8015d30 <tcp_rexmit+0x1c>
 8015d22:	4b2f      	ldr	r3, [pc, #188]	; (8015de0 <tcp_rexmit+0xcc>)
 8015d24:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015d28:	492e      	ldr	r1, [pc, #184]	; (8015de4 <tcp_rexmit+0xd0>)
 8015d2a:	482f      	ldr	r0, [pc, #188]	; (8015de8 <tcp_rexmit+0xd4>)
 8015d2c:	f001 fe48 	bl	80179c0 <iprintf>

  if (pcb->unacked == NULL) {
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d102      	bne.n	8015d3e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015d38:	f06f 0305 	mvn.w	r3, #5
 8015d3c:	e04c      	b.n	8015dd8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d42:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015d44:	68b8      	ldr	r0, [r7, #8]
 8015d46:	f7ff fe2d 	bl	80159a4 <tcp_output_segment_busy>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d002      	beq.n	8015d56 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015d50:	f06f 0305 	mvn.w	r3, #5
 8015d54:	e040      	b.n	8015dd8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015d56:	68bb      	ldr	r3, [r7, #8]
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	336c      	adds	r3, #108	; 0x6c
 8015d62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015d64:	e002      	b.n	8015d6c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d011      	beq.n	8015d98 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	68db      	ldr	r3, [r3, #12]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7f5 fe08 	bl	800b992 <lwip_htonl>
 8015d82:	4604      	mov	r4, r0
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	68db      	ldr	r3, [r3, #12]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7f5 fe01 	bl	800b992 <lwip_htonl>
 8015d90:	4603      	mov	r3, r0
 8015d92:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	dbe6      	blt.n	8015d66 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	68ba      	ldr	r2, [r7, #8]
 8015da4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d103      	bne.n	8015db6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2200      	movs	r2, #0
 8015db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015dbc:	2bff      	cmp	r3, #255	; 0xff
 8015dbe:	d007      	beq.n	8015dd0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	b2da      	uxtb	r2, r3
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015dd6:	2300      	movs	r3, #0
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3714      	adds	r7, #20
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd90      	pop	{r4, r7, pc}
 8015de0:	0801c548 	.word	0x0801c548
 8015de4:	0801cc44 	.word	0x0801cc44
 8015de8:	0801c5f8 	.word	0x0801c5f8

08015dec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d106      	bne.n	8015e08 <tcp_rexmit_fast+0x1c>
 8015dfa:	4b2a      	ldr	r3, [pc, #168]	; (8015ea4 <tcp_rexmit_fast+0xb8>)
 8015dfc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015e00:	4929      	ldr	r1, [pc, #164]	; (8015ea8 <tcp_rexmit_fast+0xbc>)
 8015e02:	482a      	ldr	r0, [pc, #168]	; (8015eac <tcp_rexmit_fast+0xc0>)
 8015e04:	f001 fddc 	bl	80179c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d045      	beq.n	8015e9c <tcp_rexmit_fast+0xb0>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	8b5b      	ldrh	r3, [r3, #26]
 8015e14:	f003 0304 	and.w	r3, r3, #4
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d13f      	bne.n	8015e9c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7ff ff79 	bl	8015d14 <tcp_rexmit>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d139      	bne.n	8015e9c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e34:	4293      	cmp	r3, r2
 8015e36:	bf28      	it	cs
 8015e38:	4613      	movcs	r3, r2
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	da00      	bge.n	8015e42 <tcp_rexmit_fast+0x56>
 8015e40:	3301      	adds	r3, #1
 8015e42:	105b      	asrs	r3, r3, #1
 8015e44:	b29a      	uxth	r2, r3
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015e52:	461a      	mov	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d206      	bcs.n	8015e6c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e62:	005b      	lsls	r3, r3, #1
 8015e64:	b29a      	uxth	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e76:	4619      	mov	r1, r3
 8015e78:	0049      	lsls	r1, r1, #1
 8015e7a:	440b      	add	r3, r1
 8015e7c:	b29b      	uxth	r3, r3
 8015e7e:	4413      	add	r3, r2
 8015e80:	b29a      	uxth	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	8b5b      	ldrh	r3, [r3, #26]
 8015e8c:	f043 0304 	orr.w	r3, r3, #4
 8015e90:	b29a      	uxth	r2, r3
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015e9c:	bf00      	nop
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	0801c548 	.word	0x0801c548
 8015ea8:	0801cc5c 	.word	0x0801cc5c
 8015eac:	0801c5f8 	.word	0x0801c5f8

08015eb0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b086      	sub	sp, #24
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	607b      	str	r3, [r7, #4]
 8015eba:	460b      	mov	r3, r1
 8015ebc:	817b      	strh	r3, [r7, #10]
 8015ebe:	4613      	mov	r3, r2
 8015ec0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015ec2:	897a      	ldrh	r2, [r7, #10]
 8015ec4:	893b      	ldrh	r3, [r7, #8]
 8015ec6:	4413      	add	r3, r2
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	3314      	adds	r3, #20
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	2022      	movs	r0, #34	; 0x22
 8015ed6:	f7f9 fa1d 	bl	800f314 <pbuf_alloc>
 8015eda:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d04d      	beq.n	8015f7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015ee2:	897b      	ldrh	r3, [r7, #10]
 8015ee4:	3313      	adds	r3, #19
 8015ee6:	697a      	ldr	r2, [r7, #20]
 8015ee8:	8952      	ldrh	r2, [r2, #10]
 8015eea:	4293      	cmp	r3, r2
 8015eec:	db06      	blt.n	8015efc <tcp_output_alloc_header_common+0x4c>
 8015eee:	4b26      	ldr	r3, [pc, #152]	; (8015f88 <tcp_output_alloc_header_common+0xd8>)
 8015ef0:	f240 7223 	movw	r2, #1827	; 0x723
 8015ef4:	4925      	ldr	r1, [pc, #148]	; (8015f8c <tcp_output_alloc_header_common+0xdc>)
 8015ef6:	4826      	ldr	r0, [pc, #152]	; (8015f90 <tcp_output_alloc_header_common+0xe0>)
 8015ef8:	f001 fd62 	bl	80179c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015f02:	8c3b      	ldrh	r3, [r7, #32]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7f5 fd2f 	bl	800b968 <lwip_htons>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	461a      	mov	r2, r3
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7f5 fd27 	bl	800b968 <lwip_htons>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	461a      	mov	r2, r3
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015f28:	68f8      	ldr	r0, [r7, #12]
 8015f2a:	f7f5 fd32 	bl	800b992 <lwip_htonl>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015f34:	897b      	ldrh	r3, [r7, #10]
 8015f36:	089b      	lsrs	r3, r3, #2
 8015f38:	b29b      	uxth	r3, r3
 8015f3a:	3305      	adds	r3, #5
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	031b      	lsls	r3, r3, #12
 8015f40:	b29a      	uxth	r2, r3
 8015f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	4313      	orrs	r3, r2
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7f5 fd0b 	bl	800b968 <lwip_htons>
 8015f52:	4603      	mov	r3, r0
 8015f54:	461a      	mov	r2, r3
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015f5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7f5 fd03 	bl	800b968 <lwip_htons>
 8015f62:	4603      	mov	r3, r0
 8015f64:	461a      	mov	r2, r3
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	741a      	strb	r2, [r3, #16]
 8015f70:	2200      	movs	r2, #0
 8015f72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	2200      	movs	r2, #0
 8015f78:	749a      	strb	r2, [r3, #18]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015f7e:	697b      	ldr	r3, [r7, #20]
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3718      	adds	r7, #24
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}
 8015f88:	0801c548 	.word	0x0801c548
 8015f8c:	0801cc7c 	.word	0x0801cc7c
 8015f90:	0801c5f8 	.word	0x0801c5f8

08015f94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015f94:	b5b0      	push	{r4, r5, r7, lr}
 8015f96:	b08a      	sub	sp, #40	; 0x28
 8015f98:	af04      	add	r7, sp, #16
 8015f9a:	60f8      	str	r0, [r7, #12]
 8015f9c:	607b      	str	r3, [r7, #4]
 8015f9e:	460b      	mov	r3, r1
 8015fa0:	817b      	strh	r3, [r7, #10]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d106      	bne.n	8015fba <tcp_output_alloc_header+0x26>
 8015fac:	4b15      	ldr	r3, [pc, #84]	; (8016004 <tcp_output_alloc_header+0x70>)
 8015fae:	f240 7242 	movw	r2, #1858	; 0x742
 8015fb2:	4915      	ldr	r1, [pc, #84]	; (8016008 <tcp_output_alloc_header+0x74>)
 8015fb4:	4815      	ldr	r0, [pc, #84]	; (801600c <tcp_output_alloc_header+0x78>)
 8015fb6:	f001 fd03 	bl	80179c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	8adb      	ldrh	r3, [r3, #22]
 8015fc2:	68fa      	ldr	r2, [r7, #12]
 8015fc4:	8b12      	ldrh	r2, [r2, #24]
 8015fc6:	68f9      	ldr	r1, [r7, #12]
 8015fc8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015fca:	893d      	ldrh	r5, [r7, #8]
 8015fcc:	897c      	ldrh	r4, [r7, #10]
 8015fce:	9103      	str	r1, [sp, #12]
 8015fd0:	2110      	movs	r1, #16
 8015fd2:	9102      	str	r1, [sp, #8]
 8015fd4:	9201      	str	r2, [sp, #4]
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	462a      	mov	r2, r5
 8015fdc:	4621      	mov	r1, r4
 8015fde:	f7ff ff67 	bl	8015eb0 <tcp_output_alloc_header_common>
 8015fe2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015fe4:	697b      	ldr	r3, [r7, #20]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d006      	beq.n	8015ff8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fee:	68fa      	ldr	r2, [r7, #12]
 8015ff0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015ff2:	441a      	add	r2, r3
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015ff8:	697b      	ldr	r3, [r7, #20]
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	3718      	adds	r7, #24
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bdb0      	pop	{r4, r5, r7, pc}
 8016002:	bf00      	nop
 8016004:	0801c548 	.word	0x0801c548
 8016008:	0801ccac 	.word	0x0801ccac
 801600c:	0801c5f8 	.word	0x0801c5f8

08016010 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b088      	sub	sp, #32
 8016014:	af00      	add	r7, sp, #0
 8016016:	60f8      	str	r0, [r7, #12]
 8016018:	60b9      	str	r1, [r7, #8]
 801601a:	4611      	mov	r1, r2
 801601c:	461a      	mov	r2, r3
 801601e:	460b      	mov	r3, r1
 8016020:	71fb      	strb	r3, [r7, #7]
 8016022:	4613      	mov	r3, r2
 8016024:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016026:	2300      	movs	r3, #0
 8016028:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d106      	bne.n	801603e <tcp_output_fill_options+0x2e>
 8016030:	4b13      	ldr	r3, [pc, #76]	; (8016080 <tcp_output_fill_options+0x70>)
 8016032:	f240 7256 	movw	r2, #1878	; 0x756
 8016036:	4913      	ldr	r1, [pc, #76]	; (8016084 <tcp_output_fill_options+0x74>)
 8016038:	4813      	ldr	r0, [pc, #76]	; (8016088 <tcp_output_fill_options+0x78>)
 801603a:	f001 fcc1 	bl	80179c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	3314      	adds	r3, #20
 8016048:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	f103 0214 	add.w	r2, r3, #20
 8016050:	8bfb      	ldrh	r3, [r7, #30]
 8016052:	009b      	lsls	r3, r3, #2
 8016054:	4619      	mov	r1, r3
 8016056:	79fb      	ldrb	r3, [r7, #7]
 8016058:	009b      	lsls	r3, r3, #2
 801605a:	f003 0304 	and.w	r3, r3, #4
 801605e:	440b      	add	r3, r1
 8016060:	4413      	add	r3, r2
 8016062:	697a      	ldr	r2, [r7, #20]
 8016064:	429a      	cmp	r2, r3
 8016066:	d006      	beq.n	8016076 <tcp_output_fill_options+0x66>
 8016068:	4b05      	ldr	r3, [pc, #20]	; (8016080 <tcp_output_fill_options+0x70>)
 801606a:	f240 7275 	movw	r2, #1909	; 0x775
 801606e:	4907      	ldr	r1, [pc, #28]	; (801608c <tcp_output_fill_options+0x7c>)
 8016070:	4805      	ldr	r0, [pc, #20]	; (8016088 <tcp_output_fill_options+0x78>)
 8016072:	f001 fca5 	bl	80179c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016076:	bf00      	nop
 8016078:	3720      	adds	r7, #32
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	0801c548 	.word	0x0801c548
 8016084:	0801ccd4 	.word	0x0801ccd4
 8016088:	0801c5f8 	.word	0x0801c5f8
 801608c:	0801cbcc 	.word	0x0801cbcc

08016090 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b08a      	sub	sp, #40	; 0x28
 8016094:	af04      	add	r7, sp, #16
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
 801609c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d106      	bne.n	80160b2 <tcp_output_control_segment+0x22>
 80160a4:	4b1c      	ldr	r3, [pc, #112]	; (8016118 <tcp_output_control_segment+0x88>)
 80160a6:	f240 7287 	movw	r2, #1927	; 0x787
 80160aa:	491c      	ldr	r1, [pc, #112]	; (801611c <tcp_output_control_segment+0x8c>)
 80160ac:	481c      	ldr	r0, [pc, #112]	; (8016120 <tcp_output_control_segment+0x90>)
 80160ae:	f001 fc87 	bl	80179c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80160b2:	683a      	ldr	r2, [r7, #0]
 80160b4:	6879      	ldr	r1, [r7, #4]
 80160b6:	68f8      	ldr	r0, [r7, #12]
 80160b8:	f7fe fae4 	bl	8014684 <tcp_route>
 80160bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d102      	bne.n	80160ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80160c4:	23fc      	movs	r3, #252	; 0xfc
 80160c6:	75fb      	strb	r3, [r7, #23]
 80160c8:	e01c      	b.n	8016104 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d006      	beq.n	80160de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	7adb      	ldrb	r3, [r3, #11]
 80160d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	7a9b      	ldrb	r3, [r3, #10]
 80160da:	757b      	strb	r3, [r7, #21]
 80160dc:	e003      	b.n	80160e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80160de:	23ff      	movs	r3, #255	; 0xff
 80160e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80160e6:	7dba      	ldrb	r2, [r7, #22]
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	9302      	str	r3, [sp, #8]
 80160ec:	2306      	movs	r3, #6
 80160ee:	9301      	str	r3, [sp, #4]
 80160f0:	7d7b      	ldrb	r3, [r7, #21]
 80160f2:	9300      	str	r3, [sp, #0]
 80160f4:	4613      	mov	r3, r2
 80160f6:	683a      	ldr	r2, [r7, #0]
 80160f8:	6879      	ldr	r1, [r7, #4]
 80160fa:	68b8      	ldr	r0, [r7, #8]
 80160fc:	f7f7 f8d4 	bl	800d2a8 <ip4_output_if>
 8016100:	4603      	mov	r3, r0
 8016102:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016104:	68b8      	ldr	r0, [r7, #8]
 8016106:	f7f9 fbe9 	bl	800f8dc <pbuf_free>
  return err;
 801610a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3718      	adds	r7, #24
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
 8016116:	bf00      	nop
 8016118:	0801c548 	.word	0x0801c548
 801611c:	0801ccfc 	.word	0x0801ccfc
 8016120:	0801c5f8 	.word	0x0801c5f8

08016124 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016124:	b590      	push	{r4, r7, lr}
 8016126:	b08b      	sub	sp, #44	; 0x2c
 8016128:	af04      	add	r7, sp, #16
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	607a      	str	r2, [r7, #4]
 8016130:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d106      	bne.n	8016146 <tcp_rst+0x22>
 8016138:	4b1f      	ldr	r3, [pc, #124]	; (80161b8 <tcp_rst+0x94>)
 801613a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801613e:	491f      	ldr	r1, [pc, #124]	; (80161bc <tcp_rst+0x98>)
 8016140:	481f      	ldr	r0, [pc, #124]	; (80161c0 <tcp_rst+0x9c>)
 8016142:	f001 fc3d 	bl	80179c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016148:	2b00      	cmp	r3, #0
 801614a:	d106      	bne.n	801615a <tcp_rst+0x36>
 801614c:	4b1a      	ldr	r3, [pc, #104]	; (80161b8 <tcp_rst+0x94>)
 801614e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016152:	491c      	ldr	r1, [pc, #112]	; (80161c4 <tcp_rst+0xa0>)
 8016154:	481a      	ldr	r0, [pc, #104]	; (80161c0 <tcp_rst+0x9c>)
 8016156:	f001 fc33 	bl	80179c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801615a:	2300      	movs	r3, #0
 801615c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801615e:	f24d 0316 	movw	r3, #53270	; 0xd016
 8016162:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016164:	7dfb      	ldrb	r3, [r7, #23]
 8016166:	b29c      	uxth	r4, r3
 8016168:	68b8      	ldr	r0, [r7, #8]
 801616a:	f7f5 fc12 	bl	800b992 <lwip_htonl>
 801616e:	4602      	mov	r2, r0
 8016170:	8abb      	ldrh	r3, [r7, #20]
 8016172:	9303      	str	r3, [sp, #12]
 8016174:	2314      	movs	r3, #20
 8016176:	9302      	str	r3, [sp, #8]
 8016178:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801617a:	9301      	str	r3, [sp, #4]
 801617c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801617e:	9300      	str	r3, [sp, #0]
 8016180:	4613      	mov	r3, r2
 8016182:	2200      	movs	r2, #0
 8016184:	4621      	mov	r1, r4
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f7ff fe92 	bl	8015eb0 <tcp_output_alloc_header_common>
 801618c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d00c      	beq.n	80161ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016194:	7dfb      	ldrb	r3, [r7, #23]
 8016196:	2200      	movs	r2, #0
 8016198:	6939      	ldr	r1, [r7, #16]
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	f7ff ff38 	bl	8016010 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80161a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	6939      	ldr	r1, [r7, #16]
 80161a6:	68f8      	ldr	r0, [r7, #12]
 80161a8:	f7ff ff72 	bl	8016090 <tcp_output_control_segment>
 80161ac:	e000      	b.n	80161b0 <tcp_rst+0x8c>
    return;
 80161ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80161b0:	371c      	adds	r7, #28
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd90      	pop	{r4, r7, pc}
 80161b6:	bf00      	nop
 80161b8:	0801c548 	.word	0x0801c548
 80161bc:	0801cd28 	.word	0x0801cd28
 80161c0:	0801c5f8 	.word	0x0801c5f8
 80161c4:	0801cd44 	.word	0x0801cd44

080161c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80161c8:	b590      	push	{r4, r7, lr}
 80161ca:	b087      	sub	sp, #28
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80161d0:	2300      	movs	r3, #0
 80161d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80161d4:	2300      	movs	r3, #0
 80161d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d106      	bne.n	80161ec <tcp_send_empty_ack+0x24>
 80161de:	4b28      	ldr	r3, [pc, #160]	; (8016280 <tcp_send_empty_ack+0xb8>)
 80161e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80161e4:	4927      	ldr	r1, [pc, #156]	; (8016284 <tcp_send_empty_ack+0xbc>)
 80161e6:	4828      	ldr	r0, [pc, #160]	; (8016288 <tcp_send_empty_ack+0xc0>)
 80161e8:	f001 fbea 	bl	80179c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80161ec:	7dfb      	ldrb	r3, [r7, #23]
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	b2db      	uxtb	r3, r3
 80161f2:	f003 0304 	and.w	r3, r3, #4
 80161f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80161f8:	7d7b      	ldrb	r3, [r7, #21]
 80161fa:	b29c      	uxth	r4, r3
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016200:	4618      	mov	r0, r3
 8016202:	f7f5 fbc6 	bl	800b992 <lwip_htonl>
 8016206:	4603      	mov	r3, r0
 8016208:	2200      	movs	r2, #0
 801620a:	4621      	mov	r1, r4
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f7ff fec1 	bl	8015f94 <tcp_output_alloc_header>
 8016212:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d109      	bne.n	801622e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	8b5b      	ldrh	r3, [r3, #26]
 801621e:	f043 0303 	orr.w	r3, r3, #3
 8016222:	b29a      	uxth	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016228:	f06f 0301 	mvn.w	r3, #1
 801622c:	e023      	b.n	8016276 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801622e:	7dbb      	ldrb	r3, [r7, #22]
 8016230:	7dfa      	ldrb	r2, [r7, #23]
 8016232:	6939      	ldr	r1, [r7, #16]
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f7ff feeb 	bl	8016010 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801623a:	687a      	ldr	r2, [r7, #4]
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	3304      	adds	r3, #4
 8016240:	6939      	ldr	r1, [r7, #16]
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f7ff ff24 	bl	8016090 <tcp_output_control_segment>
 8016248:	4603      	mov	r3, r0
 801624a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801624c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d007      	beq.n	8016264 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	8b5b      	ldrh	r3, [r3, #26]
 8016258:	f043 0303 	orr.w	r3, r3, #3
 801625c:	b29a      	uxth	r2, r3
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	835a      	strh	r2, [r3, #26]
 8016262:	e006      	b.n	8016272 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	8b5b      	ldrh	r3, [r3, #26]
 8016268:	f023 0303 	bic.w	r3, r3, #3
 801626c:	b29a      	uxth	r2, r3
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016276:	4618      	mov	r0, r3
 8016278:	371c      	adds	r7, #28
 801627a:	46bd      	mov	sp, r7
 801627c:	bd90      	pop	{r4, r7, pc}
 801627e:	bf00      	nop
 8016280:	0801c548 	.word	0x0801c548
 8016284:	0801cd60 	.word	0x0801cd60
 8016288:	0801c5f8 	.word	0x0801c5f8

0801628c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801628c:	b590      	push	{r4, r7, lr}
 801628e:	b087      	sub	sp, #28
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016294:	2300      	movs	r3, #0
 8016296:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d106      	bne.n	80162ac <tcp_keepalive+0x20>
 801629e:	4b18      	ldr	r3, [pc, #96]	; (8016300 <tcp_keepalive+0x74>)
 80162a0:	f640 0224 	movw	r2, #2084	; 0x824
 80162a4:	4917      	ldr	r1, [pc, #92]	; (8016304 <tcp_keepalive+0x78>)
 80162a6:	4818      	ldr	r0, [pc, #96]	; (8016308 <tcp_keepalive+0x7c>)
 80162a8:	f001 fb8a 	bl	80179c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80162ac:	7dfb      	ldrb	r3, [r7, #23]
 80162ae:	b29c      	uxth	r4, r3
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162b4:	3b01      	subs	r3, #1
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7f5 fb6b 	bl	800b992 <lwip_htonl>
 80162bc:	4603      	mov	r3, r0
 80162be:	2200      	movs	r2, #0
 80162c0:	4621      	mov	r1, r4
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f7ff fe66 	bl	8015f94 <tcp_output_alloc_header>
 80162c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d102      	bne.n	80162d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80162d0:	f04f 33ff 	mov.w	r3, #4294967295
 80162d4:	e010      	b.n	80162f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80162d6:	7dfb      	ldrb	r3, [r7, #23]
 80162d8:	2200      	movs	r2, #0
 80162da:	6939      	ldr	r1, [r7, #16]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f7ff fe97 	bl	8016010 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80162e2:	687a      	ldr	r2, [r7, #4]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	3304      	adds	r3, #4
 80162e8:	6939      	ldr	r1, [r7, #16]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f7ff fed0 	bl	8016090 <tcp_output_control_segment>
 80162f0:	4603      	mov	r3, r0
 80162f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80162f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	371c      	adds	r7, #28
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd90      	pop	{r4, r7, pc}
 8016300:	0801c548 	.word	0x0801c548
 8016304:	0801cd80 	.word	0x0801cd80
 8016308:	0801c5f8 	.word	0x0801c5f8

0801630c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801630c:	b590      	push	{r4, r7, lr}
 801630e:	b08b      	sub	sp, #44	; 0x2c
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016314:	2300      	movs	r3, #0
 8016316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d106      	bne.n	801632e <tcp_zero_window_probe+0x22>
 8016320:	4b4c      	ldr	r3, [pc, #304]	; (8016454 <tcp_zero_window_probe+0x148>)
 8016322:	f640 024f 	movw	r2, #2127	; 0x84f
 8016326:	494c      	ldr	r1, [pc, #304]	; (8016458 <tcp_zero_window_probe+0x14c>)
 8016328:	484c      	ldr	r0, [pc, #304]	; (801645c <tcp_zero_window_probe+0x150>)
 801632a:	f001 fb49 	bl	80179c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016332:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016334:	6a3b      	ldr	r3, [r7, #32]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d101      	bne.n	801633e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801633a:	2300      	movs	r3, #0
 801633c:	e086      	b.n	801644c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016344:	2bff      	cmp	r3, #255	; 0xff
 8016346:	d007      	beq.n	8016358 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801634e:	3301      	adds	r3, #1
 8016350:	b2da      	uxtb	r2, r3
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016358:	6a3b      	ldr	r3, [r7, #32]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	899b      	ldrh	r3, [r3, #12]
 801635e:	b29b      	uxth	r3, r3
 8016360:	4618      	mov	r0, r3
 8016362:	f7f5 fb01 	bl	800b968 <lwip_htons>
 8016366:	4603      	mov	r3, r0
 8016368:	b2db      	uxtb	r3, r3
 801636a:	f003 0301 	and.w	r3, r3, #1
 801636e:	2b00      	cmp	r3, #0
 8016370:	d005      	beq.n	801637e <tcp_zero_window_probe+0x72>
 8016372:	6a3b      	ldr	r3, [r7, #32]
 8016374:	891b      	ldrh	r3, [r3, #8]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d101      	bne.n	801637e <tcp_zero_window_probe+0x72>
 801637a:	2301      	movs	r3, #1
 801637c:	e000      	b.n	8016380 <tcp_zero_window_probe+0x74>
 801637e:	2300      	movs	r3, #0
 8016380:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016382:	7ffb      	ldrb	r3, [r7, #31]
 8016384:	2b00      	cmp	r3, #0
 8016386:	bf0c      	ite	eq
 8016388:	2301      	moveq	r3, #1
 801638a:	2300      	movne	r3, #0
 801638c:	b2db      	uxtb	r3, r3
 801638e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016394:	b299      	uxth	r1, r3
 8016396:	6a3b      	ldr	r3, [r7, #32]
 8016398:	68db      	ldr	r3, [r3, #12]
 801639a:	685b      	ldr	r3, [r3, #4]
 801639c:	8bba      	ldrh	r2, [r7, #28]
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f7ff fdf8 	bl	8015f94 <tcp_output_alloc_header>
 80163a4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d102      	bne.n	80163b2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80163ac:	f04f 33ff 	mov.w	r3, #4294967295
 80163b0:	e04c      	b.n	801644c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80163b2:	69bb      	ldr	r3, [r7, #24]
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80163b8:	7ffb      	ldrb	r3, [r7, #31]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d011      	beq.n	80163e2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	899b      	ldrh	r3, [r3, #12]
 80163c2:	b29b      	uxth	r3, r3
 80163c4:	b21b      	sxth	r3, r3
 80163c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80163ca:	b21c      	sxth	r4, r3
 80163cc:	2011      	movs	r0, #17
 80163ce:	f7f5 facb 	bl	800b968 <lwip_htons>
 80163d2:	4603      	mov	r3, r0
 80163d4:	b21b      	sxth	r3, r3
 80163d6:	4323      	orrs	r3, r4
 80163d8:	b21b      	sxth	r3, r3
 80163da:	b29a      	uxth	r2, r3
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	819a      	strh	r2, [r3, #12]
 80163e0:	e010      	b.n	8016404 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80163e2:	69bb      	ldr	r3, [r7, #24]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	3314      	adds	r3, #20
 80163e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80163ea:	6a3b      	ldr	r3, [r7, #32]
 80163ec:	6858      	ldr	r0, [r3, #4]
 80163ee:	6a3b      	ldr	r3, [r7, #32]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	891a      	ldrh	r2, [r3, #8]
 80163f4:	6a3b      	ldr	r3, [r7, #32]
 80163f6:	891b      	ldrh	r3, [r3, #8]
 80163f8:	1ad3      	subs	r3, r2, r3
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	2201      	movs	r2, #1
 80163fe:	6939      	ldr	r1, [r7, #16]
 8016400:	f7f9 fc72 	bl	800fce8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016404:	6a3b      	ldr	r3, [r7, #32]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	4618      	mov	r0, r3
 801640c:	f7f5 fac1 	bl	800b992 <lwip_htonl>
 8016410:	4603      	mov	r3, r0
 8016412:	3301      	adds	r3, #1
 8016414:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	1ad3      	subs	r3, r2, r3
 801641e:	2b00      	cmp	r3, #0
 8016420:	da02      	bge.n	8016428 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	68fa      	ldr	r2, [r7, #12]
 8016426:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801642c:	2200      	movs	r2, #0
 801642e:	69b9      	ldr	r1, [r7, #24]
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f7ff fded 	bl	8016010 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	3304      	adds	r3, #4
 801643c:	69b9      	ldr	r1, [r7, #24]
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7ff fe26 	bl	8016090 <tcp_output_control_segment>
 8016444:	4603      	mov	r3, r0
 8016446:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016448:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801644c:	4618      	mov	r0, r3
 801644e:	372c      	adds	r7, #44	; 0x2c
 8016450:	46bd      	mov	sp, r7
 8016452:	bd90      	pop	{r4, r7, pc}
 8016454:	0801c548 	.word	0x0801c548
 8016458:	0801cd9c 	.word	0x0801cd9c
 801645c:	0801c5f8 	.word	0x0801c5f8

08016460 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 801646a:	f7ef fc0b 	bl	8005c84 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 801646e:	f000 fb13 	bl	8016a98 <sys_timeouts_sleeptime>
 8016472:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801647a:	d109      	bne.n	8016490 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801647c:	f7ef fbf4 	bl	8005c68 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016480:	2200      	movs	r2, #0
 8016482:	6839      	ldr	r1, [r7, #0]
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f7f9 fdab 	bl	800ffe0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801648a:	f7ef fbdd 	bl	8005c48 <sys_lock_tcpip_core>
    return;
 801648e:	e016      	b.n	80164be <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d102      	bne.n	801649c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016496:	f000 fac3 	bl	8016a20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801649a:	e7e6      	b.n	801646a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801649c:	f7ef fbe4 	bl	8005c68 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80164a0:	68fa      	ldr	r2, [r7, #12]
 80164a2:	6839      	ldr	r1, [r7, #0]
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7f9 fd9b 	bl	800ffe0 <sys_arch_mbox_fetch>
 80164aa:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80164ac:	f7ef fbcc 	bl	8005c48 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164b6:	d102      	bne.n	80164be <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80164b8:	f000 fab2 	bl	8016a20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80164bc:	e7d5      	b.n	801646a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 80164cc:	f7ef fc16 	bl	8005cfc <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 80164d0:	f7ef fbba 	bl	8005c48 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 80164d4:	4b0f      	ldr	r3, [pc, #60]	; (8016514 <tcpip_thread+0x50>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d005      	beq.n	80164e8 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 80164dc:	4b0d      	ldr	r3, [pc, #52]	; (8016514 <tcpip_thread+0x50>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a0d      	ldr	r2, [pc, #52]	; (8016518 <tcpip_thread+0x54>)
 80164e2:	6812      	ldr	r2, [r2, #0]
 80164e4:	4610      	mov	r0, r2
 80164e6:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80164e8:	f107 030c 	add.w	r3, r7, #12
 80164ec:	4619      	mov	r1, r3
 80164ee:	480b      	ldr	r0, [pc, #44]	; (801651c <tcpip_thread+0x58>)
 80164f0:	f7ff ffb6 	bl	8016460 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d106      	bne.n	8016508 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80164fa:	4b09      	ldr	r3, [pc, #36]	; (8016520 <tcpip_thread+0x5c>)
 80164fc:	2291      	movs	r2, #145	; 0x91
 80164fe:	4909      	ldr	r1, [pc, #36]	; (8016524 <tcpip_thread+0x60>)
 8016500:	4809      	ldr	r0, [pc, #36]	; (8016528 <tcpip_thread+0x64>)
 8016502:	f001 fa5d 	bl	80179c0 <iprintf>
      continue;
 8016506:	e003      	b.n	8016510 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	4618      	mov	r0, r3
 801650c:	f000 f80e 	bl	801652c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016510:	e7ea      	b.n	80164e8 <tcpip_thread+0x24>
 8016512:	bf00      	nop
 8016514:	240108f8 	.word	0x240108f8
 8016518:	240108fc 	.word	0x240108fc
 801651c:	24010900 	.word	0x24010900
 8016520:	0801cdc0 	.word	0x0801cdc0
 8016524:	0801ce4c 	.word	0x0801ce4c
 8016528:	0801ce6c 	.word	0x0801ce6c

0801652c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	2b02      	cmp	r3, #2
 801653a:	d026      	beq.n	801658a <tcpip_thread_handle_msg+0x5e>
 801653c:	2b02      	cmp	r3, #2
 801653e:	dc2b      	bgt.n	8016598 <tcpip_thread_handle_msg+0x6c>
 8016540:	2b00      	cmp	r3, #0
 8016542:	d002      	beq.n	801654a <tcpip_thread_handle_msg+0x1e>
 8016544:	2b01      	cmp	r3, #1
 8016546:	d015      	beq.n	8016574 <tcpip_thread_handle_msg+0x48>
 8016548:	e026      	b.n	8016598 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	68db      	ldr	r3, [r3, #12]
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	6850      	ldr	r0, [r2, #4]
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	6892      	ldr	r2, [r2, #8]
 8016556:	4611      	mov	r1, r2
 8016558:	4798      	blx	r3
 801655a:	4603      	mov	r3, r0
 801655c:	2b00      	cmp	r3, #0
 801655e:	d004      	beq.n	801656a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	4618      	mov	r0, r3
 8016566:	f7f9 f9b9 	bl	800f8dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801656a:	6879      	ldr	r1, [r7, #4]
 801656c:	2009      	movs	r0, #9
 801656e:	f7f8 fae7 	bl	800eb40 <memp_free>
      break;
 8016572:	e018      	b.n	80165a6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	685b      	ldr	r3, [r3, #4]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	6892      	ldr	r2, [r2, #8]
 801657c:	4610      	mov	r0, r2
 801657e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016580:	6879      	ldr	r1, [r7, #4]
 8016582:	2008      	movs	r0, #8
 8016584:	f7f8 fadc 	bl	800eb40 <memp_free>
      break;
 8016588:	e00d      	b.n	80165a6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	687a      	ldr	r2, [r7, #4]
 8016590:	6892      	ldr	r2, [r2, #8]
 8016592:	4610      	mov	r0, r2
 8016594:	4798      	blx	r3
      break;
 8016596:	e006      	b.n	80165a6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016598:	4b05      	ldr	r3, [pc, #20]	; (80165b0 <tcpip_thread_handle_msg+0x84>)
 801659a:	22cf      	movs	r2, #207	; 0xcf
 801659c:	4905      	ldr	r1, [pc, #20]	; (80165b4 <tcpip_thread_handle_msg+0x88>)
 801659e:	4806      	ldr	r0, [pc, #24]	; (80165b8 <tcpip_thread_handle_msg+0x8c>)
 80165a0:	f001 fa0e 	bl	80179c0 <iprintf>
      break;
 80165a4:	bf00      	nop
  }
}
 80165a6:	bf00      	nop
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	0801cdc0 	.word	0x0801cdc0
 80165b4:	0801ce4c 	.word	0x0801ce4c
 80165b8:	0801ce6c 	.word	0x0801ce6c

080165bc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b086      	sub	sp, #24
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	60f8      	str	r0, [r7, #12]
 80165c4:	60b9      	str	r1, [r7, #8]
 80165c6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80165c8:	481a      	ldr	r0, [pc, #104]	; (8016634 <tcpip_inpkt+0x78>)
 80165ca:	f7f9 fd51 	bl	8010070 <sys_mbox_valid>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d105      	bne.n	80165e0 <tcpip_inpkt+0x24>
 80165d4:	4b18      	ldr	r3, [pc, #96]	; (8016638 <tcpip_inpkt+0x7c>)
 80165d6:	22fc      	movs	r2, #252	; 0xfc
 80165d8:	4918      	ldr	r1, [pc, #96]	; (801663c <tcpip_inpkt+0x80>)
 80165da:	4819      	ldr	r0, [pc, #100]	; (8016640 <tcpip_inpkt+0x84>)
 80165dc:	f001 f9f0 	bl	80179c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80165e0:	2009      	movs	r0, #9
 80165e2:	f7f8 fa37 	bl	800ea54 <memp_malloc>
 80165e6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d102      	bne.n	80165f4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80165ee:	f04f 33ff 	mov.w	r3, #4294967295
 80165f2:	e01a      	b.n	801662a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	2200      	movs	r2, #0
 80165f8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	68ba      	ldr	r2, [r7, #8]
 8016604:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801660c:	6979      	ldr	r1, [r7, #20]
 801660e:	4809      	ldr	r0, [pc, #36]	; (8016634 <tcpip_inpkt+0x78>)
 8016610:	f7f9 fccc 	bl	800ffac <sys_mbox_trypost>
 8016614:	4603      	mov	r3, r0
 8016616:	2b00      	cmp	r3, #0
 8016618:	d006      	beq.n	8016628 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801661a:	6979      	ldr	r1, [r7, #20]
 801661c:	2009      	movs	r0, #9
 801661e:	f7f8 fa8f 	bl	800eb40 <memp_free>
    return ERR_MEM;
 8016622:	f04f 33ff 	mov.w	r3, #4294967295
 8016626:	e000      	b.n	801662a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016628:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801662a:	4618      	mov	r0, r3
 801662c:	3718      	adds	r7, #24
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	24010900 	.word	0x24010900
 8016638:	0801cdc0 	.word	0x0801cdc0
 801663c:	0801ce94 	.word	0x0801ce94
 8016640:	0801ce6c 	.word	0x0801ce6c

08016644 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016654:	f003 0318 	and.w	r3, r3, #24
 8016658:	2b00      	cmp	r3, #0
 801665a:	d006      	beq.n	801666a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801665c:	4a08      	ldr	r2, [pc, #32]	; (8016680 <tcpip_input+0x3c>)
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f7ff ffab 	bl	80165bc <tcpip_inpkt>
 8016666:	4603      	mov	r3, r0
 8016668:	e005      	b.n	8016676 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801666a:	4a06      	ldr	r2, [pc, #24]	; (8016684 <tcpip_input+0x40>)
 801666c:	6839      	ldr	r1, [r7, #0]
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f7ff ffa4 	bl	80165bc <tcpip_inpkt>
 8016674:	4603      	mov	r3, r0
}
 8016676:	4618      	mov	r0, r3
 8016678:	3708      	adds	r7, #8
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	0800c865 	.word	0x0800c865
 8016684:	0800d05d 	.word	0x0800d05d

08016688 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016692:	4819      	ldr	r0, [pc, #100]	; (80166f8 <tcpip_try_callback+0x70>)
 8016694:	f7f9 fcec 	bl	8010070 <sys_mbox_valid>
 8016698:	4603      	mov	r3, r0
 801669a:	2b00      	cmp	r3, #0
 801669c:	d106      	bne.n	80166ac <tcpip_try_callback+0x24>
 801669e:	4b17      	ldr	r3, [pc, #92]	; (80166fc <tcpip_try_callback+0x74>)
 80166a0:	f240 125d 	movw	r2, #349	; 0x15d
 80166a4:	4916      	ldr	r1, [pc, #88]	; (8016700 <tcpip_try_callback+0x78>)
 80166a6:	4817      	ldr	r0, [pc, #92]	; (8016704 <tcpip_try_callback+0x7c>)
 80166a8:	f001 f98a 	bl	80179c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80166ac:	2008      	movs	r0, #8
 80166ae:	f7f8 f9d1 	bl	800ea54 <memp_malloc>
 80166b2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d102      	bne.n	80166c0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80166ba:	f04f 33ff 	mov.w	r3, #4294967295
 80166be:	e017      	b.n	80166f0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	2201      	movs	r2, #1
 80166c4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	687a      	ldr	r2, [r7, #4]
 80166ca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	683a      	ldr	r2, [r7, #0]
 80166d0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80166d2:	68f9      	ldr	r1, [r7, #12]
 80166d4:	4808      	ldr	r0, [pc, #32]	; (80166f8 <tcpip_try_callback+0x70>)
 80166d6:	f7f9 fc69 	bl	800ffac <sys_mbox_trypost>
 80166da:	4603      	mov	r3, r0
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d006      	beq.n	80166ee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80166e0:	68f9      	ldr	r1, [r7, #12]
 80166e2:	2008      	movs	r0, #8
 80166e4:	f7f8 fa2c 	bl	800eb40 <memp_free>
    return ERR_MEM;
 80166e8:	f04f 33ff 	mov.w	r3, #4294967295
 80166ec:	e000      	b.n	80166f0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3710      	adds	r7, #16
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	24010900 	.word	0x24010900
 80166fc:	0801cdc0 	.word	0x0801cdc0
 8016700:	0801ce94 	.word	0x0801ce94
 8016704:	0801ce6c 	.word	0x0801ce6c

08016708 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b084      	sub	sp, #16
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016714:	f7ef fa98 	bl	8005c48 <sys_lock_tcpip_core>
  fn(apimsg);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	68b8      	ldr	r0, [r7, #8]
 801671c:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801671e:	f7ef faa3 	bl	8005c68 <sys_unlock_tcpip_core>
  return ERR_OK;
 8016722:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8016724:	4618      	mov	r0, r3
 8016726:	3710      	adds	r7, #16
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}

0801672c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af02      	add	r7, sp, #8
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	6039      	str	r1, [r7, #0]
  lwip_init();
 8016736:	f7f6 fbdf 	bl	800cef8 <lwip_init>

  tcpip_init_done = initfunc;
 801673a:	4a17      	ldr	r2, [pc, #92]	; (8016798 <tcpip_init+0x6c>)
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016740:	4a16      	ldr	r2, [pc, #88]	; (801679c <tcpip_init+0x70>)
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016746:	2106      	movs	r1, #6
 8016748:	4815      	ldr	r0, [pc, #84]	; (80167a0 <tcpip_init+0x74>)
 801674a:	f7f9 fc03 	bl	800ff54 <sys_mbox_new>
 801674e:	4603      	mov	r3, r0
 8016750:	2b00      	cmp	r3, #0
 8016752:	d006      	beq.n	8016762 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016754:	4b13      	ldr	r3, [pc, #76]	; (80167a4 <tcpip_init+0x78>)
 8016756:	f240 2261 	movw	r2, #609	; 0x261
 801675a:	4913      	ldr	r1, [pc, #76]	; (80167a8 <tcpip_init+0x7c>)
 801675c:	4813      	ldr	r0, [pc, #76]	; (80167ac <tcpip_init+0x80>)
 801675e:	f001 f92f 	bl	80179c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016762:	4813      	ldr	r0, [pc, #76]	; (80167b0 <tcpip_init+0x84>)
 8016764:	f7f9 fd3c 	bl	80101e0 <sys_mutex_new>
 8016768:	4603      	mov	r3, r0
 801676a:	2b00      	cmp	r3, #0
 801676c:	d006      	beq.n	801677c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801676e:	4b0d      	ldr	r3, [pc, #52]	; (80167a4 <tcpip_init+0x78>)
 8016770:	f240 2265 	movw	r2, #613	; 0x265
 8016774:	490f      	ldr	r1, [pc, #60]	; (80167b4 <tcpip_init+0x88>)
 8016776:	480d      	ldr	r0, [pc, #52]	; (80167ac <tcpip_init+0x80>)
 8016778:	f001 f922 	bl	80179c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801677c:	2318      	movs	r3, #24
 801677e:	9300      	str	r3, [sp, #0]
 8016780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016784:	2200      	movs	r2, #0
 8016786:	490c      	ldr	r1, [pc, #48]	; (80167b8 <tcpip_init+0x8c>)
 8016788:	480c      	ldr	r0, [pc, #48]	; (80167bc <tcpip_init+0x90>)
 801678a:	f7f9 fd5b 	bl	8010244 <sys_thread_new>
}
 801678e:	bf00      	nop
 8016790:	3708      	adds	r7, #8
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}
 8016796:	bf00      	nop
 8016798:	240108f8 	.word	0x240108f8
 801679c:	240108fc 	.word	0x240108fc
 80167a0:	24010900 	.word	0x24010900
 80167a4:	0801cdc0 	.word	0x0801cdc0
 80167a8:	0801cea4 	.word	0x0801cea4
 80167ac:	0801ce6c 	.word	0x0801ce6c
 80167b0:	24010904 	.word	0x24010904
 80167b4:	0801cec8 	.word	0x0801cec8
 80167b8:	080164c5 	.word	0x080164c5
 80167bc:	0801ceec 	.word	0x0801ceec

080167c0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80167c8:	f7f9 fdc4 	bl	8010354 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80167cc:	4b0a      	ldr	r3, [pc, #40]	; (80167f8 <tcpip_tcp_timer+0x38>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d103      	bne.n	80167dc <tcpip_tcp_timer+0x1c>
 80167d4:	4b09      	ldr	r3, [pc, #36]	; (80167fc <tcpip_tcp_timer+0x3c>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d005      	beq.n	80167e8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80167dc:	2200      	movs	r2, #0
 80167de:	4908      	ldr	r1, [pc, #32]	; (8016800 <tcpip_tcp_timer+0x40>)
 80167e0:	20fa      	movs	r0, #250	; 0xfa
 80167e2:	f000 f8f5 	bl	80169d0 <sys_timeout>
 80167e6:	e003      	b.n	80167f0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80167e8:	4b06      	ldr	r3, [pc, #24]	; (8016804 <tcpip_tcp_timer+0x44>)
 80167ea:	2200      	movs	r2, #0
 80167ec:	601a      	str	r2, [r3, #0]
  }
}
 80167ee:	bf00      	nop
 80167f0:	bf00      	nop
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	240108b4 	.word	0x240108b4
 80167fc:	240108b8 	.word	0x240108b8
 8016800:	080167c1 	.word	0x080167c1
 8016804:	24010910 	.word	0x24010910

08016808 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 801680c:	f7ef fa3a 	bl	8005c84 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016810:	4b0a      	ldr	r3, [pc, #40]	; (801683c <tcp_timer_needed+0x34>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d10f      	bne.n	8016838 <tcp_timer_needed+0x30>
 8016818:	4b09      	ldr	r3, [pc, #36]	; (8016840 <tcp_timer_needed+0x38>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d103      	bne.n	8016828 <tcp_timer_needed+0x20>
 8016820:	4b08      	ldr	r3, [pc, #32]	; (8016844 <tcp_timer_needed+0x3c>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d007      	beq.n	8016838 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016828:	4b04      	ldr	r3, [pc, #16]	; (801683c <tcp_timer_needed+0x34>)
 801682a:	2201      	movs	r2, #1
 801682c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801682e:	2200      	movs	r2, #0
 8016830:	4905      	ldr	r1, [pc, #20]	; (8016848 <tcp_timer_needed+0x40>)
 8016832:	20fa      	movs	r0, #250	; 0xfa
 8016834:	f000 f8cc 	bl	80169d0 <sys_timeout>
  }
}
 8016838:	bf00      	nop
 801683a:	bd80      	pop	{r7, pc}
 801683c:	24010910 	.word	0x24010910
 8016840:	240108b4 	.word	0x240108b4
 8016844:	240108b8 	.word	0x240108b8
 8016848:	080167c1 	.word	0x080167c1

0801684c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b086      	sub	sp, #24
 8016850:	af00      	add	r7, sp, #0
 8016852:	60f8      	str	r0, [r7, #12]
 8016854:	60b9      	str	r1, [r7, #8]
 8016856:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016858:	200a      	movs	r0, #10
 801685a:	f7f8 f8fb 	bl	800ea54 <memp_malloc>
 801685e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d109      	bne.n	801687a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d151      	bne.n	8016910 <sys_timeout_abs+0xc4>
 801686c:	4b2a      	ldr	r3, [pc, #168]	; (8016918 <sys_timeout_abs+0xcc>)
 801686e:	22be      	movs	r2, #190	; 0xbe
 8016870:	492a      	ldr	r1, [pc, #168]	; (801691c <sys_timeout_abs+0xd0>)
 8016872:	482b      	ldr	r0, [pc, #172]	; (8016920 <sys_timeout_abs+0xd4>)
 8016874:	f001 f8a4 	bl	80179c0 <iprintf>
    return;
 8016878:	e04a      	b.n	8016910 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	2200      	movs	r2, #0
 801687e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	68ba      	ldr	r2, [r7, #8]
 8016884:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016886:	693b      	ldr	r3, [r7, #16]
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	68fa      	ldr	r2, [r7, #12]
 8016890:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016892:	4b24      	ldr	r3, [pc, #144]	; (8016924 <sys_timeout_abs+0xd8>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d103      	bne.n	80168a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801689a:	4a22      	ldr	r2, [pc, #136]	; (8016924 <sys_timeout_abs+0xd8>)
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	6013      	str	r3, [r2, #0]
    return;
 80168a0:	e037      	b.n	8016912 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	685a      	ldr	r2, [r3, #4]
 80168a6:	4b1f      	ldr	r3, [pc, #124]	; (8016924 <sys_timeout_abs+0xd8>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	685b      	ldr	r3, [r3, #4]
 80168ac:	1ad3      	subs	r3, r2, r3
 80168ae:	0fdb      	lsrs	r3, r3, #31
 80168b0:	f003 0301 	and.w	r3, r3, #1
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d007      	beq.n	80168ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80168ba:	4b1a      	ldr	r3, [pc, #104]	; (8016924 <sys_timeout_abs+0xd8>)
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80168c2:	4a18      	ldr	r2, [pc, #96]	; (8016924 <sys_timeout_abs+0xd8>)
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	6013      	str	r3, [r2, #0]
 80168c8:	e023      	b.n	8016912 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80168ca:	4b16      	ldr	r3, [pc, #88]	; (8016924 <sys_timeout_abs+0xd8>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	617b      	str	r3, [r7, #20]
 80168d0:	e01a      	b.n	8016908 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d00b      	beq.n	80168f2 <sys_timeout_abs+0xa6>
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	685a      	ldr	r2, [r3, #4]
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	685b      	ldr	r3, [r3, #4]
 80168e4:	1ad3      	subs	r3, r2, r3
 80168e6:	0fdb      	lsrs	r3, r3, #31
 80168e8:	f003 0301 	and.w	r3, r3, #1
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d007      	beq.n	8016902 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	693a      	ldr	r2, [r7, #16]
 80168fe:	601a      	str	r2, [r3, #0]
        break;
 8016900:	e007      	b.n	8016912 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	617b      	str	r3, [r7, #20]
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d1e1      	bne.n	80168d2 <sys_timeout_abs+0x86>
 801690e:	e000      	b.n	8016912 <sys_timeout_abs+0xc6>
    return;
 8016910:	bf00      	nop
      }
    }
  }
}
 8016912:	3718      	adds	r7, #24
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	0801cefc 	.word	0x0801cefc
 801691c:	0801cf8c 	.word	0x0801cf8c
 8016920:	0801cfcc 	.word	0x0801cfcc
 8016924:	24010908 	.word	0x24010908

08016928 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b086      	sub	sp, #24
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	4798      	blx	r3

  now = sys_now();
 801693a:	f7ee ff21 	bl	8005780 <sys_now>
 801693e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	4b0f      	ldr	r3, [pc, #60]	; (8016984 <lwip_cyclic_timer+0x5c>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4413      	add	r3, r2
 801694a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801694c:	68fa      	ldr	r2, [r7, #12]
 801694e:	693b      	ldr	r3, [r7, #16]
 8016950:	1ad3      	subs	r3, r2, r3
 8016952:	0fdb      	lsrs	r3, r3, #31
 8016954:	f003 0301 	and.w	r3, r3, #1
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b00      	cmp	r3, #0
 801695c:	d009      	beq.n	8016972 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	693b      	ldr	r3, [r7, #16]
 8016964:	4413      	add	r3, r2
 8016966:	687a      	ldr	r2, [r7, #4]
 8016968:	4907      	ldr	r1, [pc, #28]	; (8016988 <lwip_cyclic_timer+0x60>)
 801696a:	4618      	mov	r0, r3
 801696c:	f7ff ff6e 	bl	801684c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016970:	e004      	b.n	801697c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016972:	687a      	ldr	r2, [r7, #4]
 8016974:	4904      	ldr	r1, [pc, #16]	; (8016988 <lwip_cyclic_timer+0x60>)
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f7ff ff68 	bl	801684c <sys_timeout_abs>
}
 801697c:	bf00      	nop
 801697e:	3718      	adds	r7, #24
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}
 8016984:	2401090c 	.word	0x2401090c
 8016988:	08016929 	.word	0x08016929

0801698c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016992:	2301      	movs	r3, #1
 8016994:	607b      	str	r3, [r7, #4]
 8016996:	e00e      	b.n	80169b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016998:	4a0b      	ldr	r2, [pc, #44]	; (80169c8 <sys_timeouts_init+0x3c>)
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	4a08      	ldr	r2, [pc, #32]	; (80169c8 <sys_timeouts_init+0x3c>)
 80169a6:	4413      	add	r3, r2
 80169a8:	461a      	mov	r2, r3
 80169aa:	4908      	ldr	r1, [pc, #32]	; (80169cc <sys_timeouts_init+0x40>)
 80169ac:	f000 f810 	bl	80169d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	3301      	adds	r3, #1
 80169b4:	607b      	str	r3, [r7, #4]
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2b02      	cmp	r3, #2
 80169ba:	d9ed      	bls.n	8016998 <sys_timeouts_init+0xc>
  }
}
 80169bc:	bf00      	nop
 80169be:	bf00      	nop
 80169c0:	3708      	adds	r7, #8
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	0801d580 	.word	0x0801d580
 80169cc:	08016929 	.word	0x08016929

080169d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b086      	sub	sp, #24
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 80169dc:	f7ef f952 	bl	8005c84 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80169e6:	d306      	bcc.n	80169f6 <sys_timeout+0x26>
 80169e8:	4b0a      	ldr	r3, [pc, #40]	; (8016a14 <sys_timeout+0x44>)
 80169ea:	f240 1229 	movw	r2, #297	; 0x129
 80169ee:	490a      	ldr	r1, [pc, #40]	; (8016a18 <sys_timeout+0x48>)
 80169f0:	480a      	ldr	r0, [pc, #40]	; (8016a1c <sys_timeout+0x4c>)
 80169f2:	f000 ffe5 	bl	80179c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80169f6:	f7ee fec3 	bl	8005780 <sys_now>
 80169fa:	4602      	mov	r2, r0
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	4413      	add	r3, r2
 8016a00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	68b9      	ldr	r1, [r7, #8]
 8016a06:	6978      	ldr	r0, [r7, #20]
 8016a08:	f7ff ff20 	bl	801684c <sys_timeout_abs>
#endif
}
 8016a0c:	bf00      	nop
 8016a0e:	3718      	adds	r7, #24
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}
 8016a14:	0801cefc 	.word	0x0801cefc
 8016a18:	0801cff4 	.word	0x0801cff4
 8016a1c:	0801cfcc 	.word	0x0801cfcc

08016a20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8016a26:	f7ef f92d 	bl	8005c84 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016a2a:	f7ee fea9 	bl	8005780 <sys_now>
 8016a2e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016a30:	4b17      	ldr	r3, [pc, #92]	; (8016a90 <sys_check_timeouts+0x70>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d022      	beq.n	8016a82 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016a3c:	68bb      	ldr	r3, [r7, #8]
 8016a3e:	685b      	ldr	r3, [r3, #4]
 8016a40:	68fa      	ldr	r2, [r7, #12]
 8016a42:	1ad3      	subs	r3, r2, r3
 8016a44:	0fdb      	lsrs	r3, r3, #31
 8016a46:	f003 0301 	and.w	r3, r3, #1
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d11a      	bne.n	8016a86 <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	4a0e      	ldr	r2, [pc, #56]	; (8016a90 <sys_check_timeouts+0x70>)
 8016a56:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016a58:	68bb      	ldr	r3, [r7, #8]
 8016a5a:	689b      	ldr	r3, [r3, #8]
 8016a5c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	685b      	ldr	r3, [r3, #4]
 8016a68:	4a0a      	ldr	r2, [pc, #40]	; (8016a94 <sys_check_timeouts+0x74>)
 8016a6a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016a6c:	68b9      	ldr	r1, [r7, #8]
 8016a6e:	200a      	movs	r0, #10
 8016a70:	f7f8 f866 	bl	800eb40 <memp_free>
    if (handler != NULL) {
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d0da      	beq.n	8016a30 <sys_check_timeouts+0x10>
      handler(arg);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	6838      	ldr	r0, [r7, #0]
 8016a7e:	4798      	blx	r3
  do {
 8016a80:	e7d6      	b.n	8016a30 <sys_check_timeouts+0x10>
      return;
 8016a82:	bf00      	nop
 8016a84:	e000      	b.n	8016a88 <sys_check_timeouts+0x68>
      return;
 8016a86:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016a88:	3710      	adds	r7, #16
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	24010908 	.word	0x24010908
 8016a94:	2401090c 	.word	0x2401090c

08016a98 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8016a9e:	f7ef f8f1 	bl	8005c84 <sys_check_core_locking>

  if (next_timeout == NULL) {
 8016aa2:	4b16      	ldr	r3, [pc, #88]	; (8016afc <sys_timeouts_sleeptime+0x64>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d102      	bne.n	8016ab0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8016aae:	e020      	b.n	8016af2 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8016ab0:	f7ee fe66 	bl	8005780 <sys_now>
 8016ab4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016ab6:	4b11      	ldr	r3, [pc, #68]	; (8016afc <sys_timeouts_sleeptime+0x64>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	685a      	ldr	r2, [r3, #4]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	1ad3      	subs	r3, r2, r3
 8016ac0:	0fdb      	lsrs	r3, r3, #31
 8016ac2:	f003 0301 	and.w	r3, r3, #1
 8016ac6:	b2db      	uxtb	r3, r3
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d001      	beq.n	8016ad0 <sys_timeouts_sleeptime+0x38>
    return 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	e010      	b.n	8016af2 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016ad0:	4b0a      	ldr	r3, [pc, #40]	; (8016afc <sys_timeouts_sleeptime+0x64>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	685a      	ldr	r2, [r3, #4]
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	1ad3      	subs	r3, r2, r3
 8016ada:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	da06      	bge.n	8016af0 <sys_timeouts_sleeptime+0x58>
 8016ae2:	4b07      	ldr	r3, [pc, #28]	; (8016b00 <sys_timeouts_sleeptime+0x68>)
 8016ae4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016ae8:	4906      	ldr	r1, [pc, #24]	; (8016b04 <sys_timeouts_sleeptime+0x6c>)
 8016aea:	4807      	ldr	r0, [pc, #28]	; (8016b08 <sys_timeouts_sleeptime+0x70>)
 8016aec:	f000 ff68 	bl	80179c0 <iprintf>
    return ret;
 8016af0:	683b      	ldr	r3, [r7, #0]
  }
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3708      	adds	r7, #8
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	24010908 	.word	0x24010908
 8016b00:	0801cefc 	.word	0x0801cefc
 8016b04:	0801d02c 	.word	0x0801d02c
 8016b08:	0801cfcc 	.word	0x0801cfcc

08016b0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016b10:	f000 ff6e 	bl	80179f0 <rand>
 8016b14:	4603      	mov	r3, r0
 8016b16:	b29b      	uxth	r3, r3
 8016b18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016b1c:	b29b      	uxth	r3, r3
 8016b1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	4b01      	ldr	r3, [pc, #4]	; (8016b2c <udp_init+0x20>)
 8016b26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016b28:	bf00      	nop
 8016b2a:	bd80      	pop	{r7, pc}
 8016b2c:	24000044 	.word	0x24000044

08016b30 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016b30:	b480      	push	{r7}
 8016b32:	b083      	sub	sp, #12
 8016b34:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016b36:	2300      	movs	r3, #0
 8016b38:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016b3a:	4b17      	ldr	r3, [pc, #92]	; (8016b98 <udp_new_port+0x68>)
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	1c5a      	adds	r2, r3, #1
 8016b40:	b291      	uxth	r1, r2
 8016b42:	4a15      	ldr	r2, [pc, #84]	; (8016b98 <udp_new_port+0x68>)
 8016b44:	8011      	strh	r1, [r2, #0]
 8016b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	d103      	bne.n	8016b56 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016b4e:	4b12      	ldr	r3, [pc, #72]	; (8016b98 <udp_new_port+0x68>)
 8016b50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016b54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b56:	4b11      	ldr	r3, [pc, #68]	; (8016b9c <udp_new_port+0x6c>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	603b      	str	r3, [r7, #0]
 8016b5c:	e011      	b.n	8016b82 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	8a5a      	ldrh	r2, [r3, #18]
 8016b62:	4b0d      	ldr	r3, [pc, #52]	; (8016b98 <udp_new_port+0x68>)
 8016b64:	881b      	ldrh	r3, [r3, #0]
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d108      	bne.n	8016b7c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016b6a:	88fb      	ldrh	r3, [r7, #6]
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	80fb      	strh	r3, [r7, #6]
 8016b70:	88fb      	ldrh	r3, [r7, #6]
 8016b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016b76:	d3e0      	bcc.n	8016b3a <udp_new_port+0xa>
        return 0;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	e007      	b.n	8016b8c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	603b      	str	r3, [r7, #0]
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d1ea      	bne.n	8016b5e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016b88:	4b03      	ldr	r3, [pc, #12]	; (8016b98 <udp_new_port+0x68>)
 8016b8a:	881b      	ldrh	r3, [r3, #0]
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	370c      	adds	r7, #12
 8016b90:	46bd      	mov	sp, r7
 8016b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b96:	4770      	bx	lr
 8016b98:	24000044 	.word	0x24000044
 8016b9c:	24010914 	.word	0x24010914

08016ba0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b084      	sub	sp, #16
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	4613      	mov	r3, r2
 8016bac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d105      	bne.n	8016bc0 <udp_input_local_match+0x20>
 8016bb4:	4b27      	ldr	r3, [pc, #156]	; (8016c54 <udp_input_local_match+0xb4>)
 8016bb6:	2287      	movs	r2, #135	; 0x87
 8016bb8:	4927      	ldr	r1, [pc, #156]	; (8016c58 <udp_input_local_match+0xb8>)
 8016bba:	4828      	ldr	r0, [pc, #160]	; (8016c5c <udp_input_local_match+0xbc>)
 8016bbc:	f000 ff00 	bl	80179c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d105      	bne.n	8016bd2 <udp_input_local_match+0x32>
 8016bc6:	4b23      	ldr	r3, [pc, #140]	; (8016c54 <udp_input_local_match+0xb4>)
 8016bc8:	2288      	movs	r2, #136	; 0x88
 8016bca:	4925      	ldr	r1, [pc, #148]	; (8016c60 <udp_input_local_match+0xc0>)
 8016bcc:	4823      	ldr	r0, [pc, #140]	; (8016c5c <udp_input_local_match+0xbc>)
 8016bce:	f000 fef7 	bl	80179c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	7a1b      	ldrb	r3, [r3, #8]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d00b      	beq.n	8016bf2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	7a1a      	ldrb	r2, [r3, #8]
 8016bde:	4b21      	ldr	r3, [pc, #132]	; (8016c64 <udp_input_local_match+0xc4>)
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016be6:	3301      	adds	r3, #1
 8016be8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016bea:	429a      	cmp	r2, r3
 8016bec:	d001      	beq.n	8016bf2 <udp_input_local_match+0x52>
    return 0;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	e02b      	b.n	8016c4a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016bf2:	79fb      	ldrb	r3, [r7, #7]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d018      	beq.n	8016c2a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d013      	beq.n	8016c26 <udp_input_local_match+0x86>
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d00f      	beq.n	8016c26 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016c06:	4b17      	ldr	r3, [pc, #92]	; (8016c64 <udp_input_local_match+0xc4>)
 8016c08:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c0e:	d00a      	beq.n	8016c26 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	4b13      	ldr	r3, [pc, #76]	; (8016c64 <udp_input_local_match+0xc4>)
 8016c16:	695b      	ldr	r3, [r3, #20]
 8016c18:	405a      	eors	r2, r3
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	3308      	adds	r3, #8
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d110      	bne.n	8016c48 <udp_input_local_match+0xa8>
          return 1;
 8016c26:	2301      	movs	r3, #1
 8016c28:	e00f      	b.n	8016c4a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d009      	beq.n	8016c44 <udp_input_local_match+0xa4>
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d005      	beq.n	8016c44 <udp_input_local_match+0xa4>
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	4b09      	ldr	r3, [pc, #36]	; (8016c64 <udp_input_local_match+0xc4>)
 8016c3e:	695b      	ldr	r3, [r3, #20]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d101      	bne.n	8016c48 <udp_input_local_match+0xa8>
        return 1;
 8016c44:	2301      	movs	r3, #1
 8016c46:	e000      	b.n	8016c4a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016c48:	2300      	movs	r3, #0
}
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3710      	adds	r7, #16
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	0801d040 	.word	0x0801d040
 8016c58:	0801d0cc 	.word	0x0801d0cc
 8016c5c:	0801d0f0 	.word	0x0801d0f0
 8016c60:	0801d118 	.word	0x0801d118
 8016c64:	24009dd8 	.word	0x24009dd8

08016c68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016c68:	b590      	push	{r4, r7, lr}
 8016c6a:	b08d      	sub	sp, #52	; 0x34
 8016c6c:	af02      	add	r7, sp, #8
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016c72:	2300      	movs	r3, #0
 8016c74:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8016c76:	f7ef f805 	bl	8005c84 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d105      	bne.n	8016c8c <udp_input+0x24>
 8016c80:	4b7c      	ldr	r3, [pc, #496]	; (8016e74 <udp_input+0x20c>)
 8016c82:	22cf      	movs	r2, #207	; 0xcf
 8016c84:	497c      	ldr	r1, [pc, #496]	; (8016e78 <udp_input+0x210>)
 8016c86:	487d      	ldr	r0, [pc, #500]	; (8016e7c <udp_input+0x214>)
 8016c88:	f000 fe9a 	bl	80179c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d105      	bne.n	8016c9e <udp_input+0x36>
 8016c92:	4b78      	ldr	r3, [pc, #480]	; (8016e74 <udp_input+0x20c>)
 8016c94:	22d0      	movs	r2, #208	; 0xd0
 8016c96:	497a      	ldr	r1, [pc, #488]	; (8016e80 <udp_input+0x218>)
 8016c98:	4878      	ldr	r0, [pc, #480]	; (8016e7c <udp_input+0x214>)
 8016c9a:	f000 fe91 	bl	80179c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	895b      	ldrh	r3, [r3, #10]
 8016ca2:	2b07      	cmp	r3, #7
 8016ca4:	d803      	bhi.n	8016cae <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f7f8 fe18 	bl	800f8dc <pbuf_free>
    goto end;
 8016cac:	e0de      	b.n	8016e6c <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016cb4:	4b73      	ldr	r3, [pc, #460]	; (8016e84 <udp_input+0x21c>)
 8016cb6:	695b      	ldr	r3, [r3, #20]
 8016cb8:	4a72      	ldr	r2, [pc, #456]	; (8016e84 <udp_input+0x21c>)
 8016cba:	6812      	ldr	r2, [r2, #0]
 8016cbc:	4611      	mov	r1, r2
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7f6 fbcc 	bl	800d45c <ip4_addr_isbroadcast_u32>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	881b      	ldrh	r3, [r3, #0]
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7f4 fe4a 	bl	800b968 <lwip_htons>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	885b      	ldrh	r3, [r3, #2]
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7f4 fe42 	bl	800b968 <lwip_htons>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016cec:	2300      	movs	r3, #0
 8016cee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016cf4:	4b64      	ldr	r3, [pc, #400]	; (8016e88 <udp_input+0x220>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8016cfa:	e054      	b.n	8016da6 <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfe:	8a5b      	ldrh	r3, [r3, #18]
 8016d00:	89fa      	ldrh	r2, [r7, #14]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d14a      	bne.n	8016d9c <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016d06:	7cfb      	ldrb	r3, [r7, #19]
 8016d08:	461a      	mov	r2, r3
 8016d0a:	6839      	ldr	r1, [r7, #0]
 8016d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d0e:	f7ff ff47 	bl	8016ba0 <udp_input_local_match>
 8016d12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d041      	beq.n	8016d9c <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1a:	7c1b      	ldrb	r3, [r3, #16]
 8016d1c:	f003 0304 	and.w	r3, r3, #4
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d11d      	bne.n	8016d60 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8016d24:	69fb      	ldr	r3, [r7, #28]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d102      	bne.n	8016d30 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2c:	61fb      	str	r3, [r7, #28]
 8016d2e:	e017      	b.n	8016d60 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016d30:	7cfb      	ldrb	r3, [r7, #19]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d014      	beq.n	8016d60 <udp_input+0xf8>
 8016d36:	4b53      	ldr	r3, [pc, #332]	; (8016e84 <udp_input+0x21c>)
 8016d38:	695b      	ldr	r3, [r3, #20]
 8016d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d3e:	d10f      	bne.n	8016d60 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	681a      	ldr	r2, [r3, #0]
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	3304      	adds	r3, #4
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d008      	beq.n	8016d60 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d50:	681a      	ldr	r2, [r3, #0]
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	3304      	adds	r3, #4
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d101      	bne.n	8016d60 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8016d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d62:	8a9b      	ldrh	r3, [r3, #20]
 8016d64:	8a3a      	ldrh	r2, [r7, #16]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d118      	bne.n	8016d9c <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d005      	beq.n	8016d7e <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	685a      	ldr	r2, [r3, #4]
 8016d76:	4b43      	ldr	r3, [pc, #268]	; (8016e84 <udp_input+0x21c>)
 8016d78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d10e      	bne.n	8016d9c <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016d7e:	6a3b      	ldr	r3, [r7, #32]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d014      	beq.n	8016dae <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d86:	68da      	ldr	r2, [r3, #12]
 8016d88:	6a3b      	ldr	r3, [r7, #32]
 8016d8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016d8c:	4b3e      	ldr	r3, [pc, #248]	; (8016e88 <udp_input+0x220>)
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016d94:	4a3c      	ldr	r2, [pc, #240]	; (8016e88 <udp_input+0x220>)
 8016d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016d9a:	e008      	b.n	8016dae <udp_input+0x146>
      }
    }

    prev = pcb;
 8016d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da2:	68db      	ldr	r3, [r3, #12]
 8016da4:	627b      	str	r3, [r7, #36]	; 0x24
 8016da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d1a7      	bne.n	8016cfc <udp_input+0x94>
 8016dac:	e000      	b.n	8016db0 <udp_input+0x148>
        break;
 8016dae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d101      	bne.n	8016dba <udp_input+0x152>
    pcb = uncon_pcb;
 8016db6:	69fb      	ldr	r3, [r7, #28]
 8016db8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d002      	beq.n	8016dc6 <udp_input+0x15e>
    for_us = 1;
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	76fb      	strb	r3, [r7, #27]
 8016dc4:	e00a      	b.n	8016ddc <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016dc6:	683b      	ldr	r3, [r7, #0]
 8016dc8:	3304      	adds	r3, #4
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	4b2d      	ldr	r3, [pc, #180]	; (8016e84 <udp_input+0x21c>)
 8016dce:	695b      	ldr	r3, [r3, #20]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	bf0c      	ite	eq
 8016dd4:	2301      	moveq	r3, #1
 8016dd6:	2300      	movne	r3, #0
 8016dd8:	b2db      	uxtb	r3, r3
 8016dda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016ddc:	7efb      	ldrb	r3, [r7, #27]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d041      	beq.n	8016e66 <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016de2:	2108      	movs	r1, #8
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f7f8 fcf3 	bl	800f7d0 <pbuf_remove_header>
 8016dea:	4603      	mov	r3, r0
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d00a      	beq.n	8016e06 <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016df0:	4b20      	ldr	r3, [pc, #128]	; (8016e74 <udp_input+0x20c>)
 8016df2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016df6:	4925      	ldr	r1, [pc, #148]	; (8016e8c <udp_input+0x224>)
 8016df8:	4820      	ldr	r0, [pc, #128]	; (8016e7c <udp_input+0x214>)
 8016dfa:	f000 fde1 	bl	80179c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f7f8 fd6c 	bl	800f8dc <pbuf_free>
      goto end;
 8016e04:	e032      	b.n	8016e6c <udp_input+0x204>
    }

    if (pcb != NULL) {
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d012      	beq.n	8016e32 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0e:	699b      	ldr	r3, [r3, #24]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d00a      	beq.n	8016e2a <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e16:	699c      	ldr	r4, [r3, #24]
 8016e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1a:	69d8      	ldr	r0, [r3, #28]
 8016e1c:	8a3b      	ldrh	r3, [r7, #16]
 8016e1e:	9300      	str	r3, [sp, #0]
 8016e20:	4b1b      	ldr	r3, [pc, #108]	; (8016e90 <udp_input+0x228>)
 8016e22:	687a      	ldr	r2, [r7, #4]
 8016e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e26:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016e28:	e021      	b.n	8016e6e <udp_input+0x206>
        pbuf_free(p);
 8016e2a:	6878      	ldr	r0, [r7, #4]
 8016e2c:	f7f8 fd56 	bl	800f8dc <pbuf_free>
        goto end;
 8016e30:	e01c      	b.n	8016e6c <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016e32:	7cfb      	ldrb	r3, [r7, #19]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d112      	bne.n	8016e5e <udp_input+0x1f6>
 8016e38:	4b12      	ldr	r3, [pc, #72]	; (8016e84 <udp_input+0x21c>)
 8016e3a:	695b      	ldr	r3, [r3, #20]
 8016e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016e40:	2be0      	cmp	r3, #224	; 0xe0
 8016e42:	d00c      	beq.n	8016e5e <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016e44:	4b0f      	ldr	r3, [pc, #60]	; (8016e84 <udp_input+0x21c>)
 8016e46:	899b      	ldrh	r3, [r3, #12]
 8016e48:	3308      	adds	r3, #8
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	b21b      	sxth	r3, r3
 8016e4e:	4619      	mov	r1, r3
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f7f8 fd30 	bl	800f8b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016e56:	2103      	movs	r1, #3
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f7f5 fefd 	bl	800cc58 <icmp_dest_unreach>
      pbuf_free(p);
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f7f8 fd3c 	bl	800f8dc <pbuf_free>
  return;
 8016e64:	e003      	b.n	8016e6e <udp_input+0x206>
    pbuf_free(p);
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f7f8 fd38 	bl	800f8dc <pbuf_free>
  return;
 8016e6c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016e6e:	372c      	adds	r7, #44	; 0x2c
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd90      	pop	{r4, r7, pc}
 8016e74:	0801d040 	.word	0x0801d040
 8016e78:	0801d140 	.word	0x0801d140
 8016e7c:	0801d0f0 	.word	0x0801d0f0
 8016e80:	0801d158 	.word	0x0801d158
 8016e84:	24009dd8 	.word	0x24009dd8
 8016e88:	24010914 	.word	0x24010914
 8016e8c:	0801d174 	.word	0x0801d174
 8016e90:	24009de8 	.word	0x24009de8

08016e94 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d109      	bne.n	8016eb8 <udp_send+0x24>
 8016ea4:	4b11      	ldr	r3, [pc, #68]	; (8016eec <udp_send+0x58>)
 8016ea6:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016eaa:	4911      	ldr	r1, [pc, #68]	; (8016ef0 <udp_send+0x5c>)
 8016eac:	4811      	ldr	r0, [pc, #68]	; (8016ef4 <udp_send+0x60>)
 8016eae:	f000 fd87 	bl	80179c0 <iprintf>
 8016eb2:	f06f 030f 	mvn.w	r3, #15
 8016eb6:	e015      	b.n	8016ee4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d109      	bne.n	8016ed2 <udp_send+0x3e>
 8016ebe:	4b0b      	ldr	r3, [pc, #44]	; (8016eec <udp_send+0x58>)
 8016ec0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016ec4:	490c      	ldr	r1, [pc, #48]	; (8016ef8 <udp_send+0x64>)
 8016ec6:	480b      	ldr	r0, [pc, #44]	; (8016ef4 <udp_send+0x60>)
 8016ec8:	f000 fd7a 	bl	80179c0 <iprintf>
 8016ecc:	f06f 030f 	mvn.w	r3, #15
 8016ed0:	e008      	b.n	8016ee4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	1d1a      	adds	r2, r3, #4
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8a9b      	ldrh	r3, [r3, #20]
 8016eda:	6839      	ldr	r1, [r7, #0]
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f000 f80d 	bl	8016efc <udp_sendto>
 8016ee2:	4603      	mov	r3, r0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	0801d040 	.word	0x0801d040
 8016ef0:	0801d190 	.word	0x0801d190
 8016ef4:	0801d0f0 	.word	0x0801d0f0
 8016ef8:	0801d1a8 	.word	0x0801d1a8

08016efc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b088      	sub	sp, #32
 8016f00:	af02      	add	r7, sp, #8
 8016f02:	60f8      	str	r0, [r7, #12]
 8016f04:	60b9      	str	r1, [r7, #8]
 8016f06:	607a      	str	r2, [r7, #4]
 8016f08:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d109      	bne.n	8016f24 <udp_sendto+0x28>
 8016f10:	4b23      	ldr	r3, [pc, #140]	; (8016fa0 <udp_sendto+0xa4>)
 8016f12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016f16:	4923      	ldr	r1, [pc, #140]	; (8016fa4 <udp_sendto+0xa8>)
 8016f18:	4823      	ldr	r0, [pc, #140]	; (8016fa8 <udp_sendto+0xac>)
 8016f1a:	f000 fd51 	bl	80179c0 <iprintf>
 8016f1e:	f06f 030f 	mvn.w	r3, #15
 8016f22:	e038      	b.n	8016f96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d109      	bne.n	8016f3e <udp_sendto+0x42>
 8016f2a:	4b1d      	ldr	r3, [pc, #116]	; (8016fa0 <udp_sendto+0xa4>)
 8016f2c:	f240 2219 	movw	r2, #537	; 0x219
 8016f30:	491e      	ldr	r1, [pc, #120]	; (8016fac <udp_sendto+0xb0>)
 8016f32:	481d      	ldr	r0, [pc, #116]	; (8016fa8 <udp_sendto+0xac>)
 8016f34:	f000 fd44 	bl	80179c0 <iprintf>
 8016f38:	f06f 030f 	mvn.w	r3, #15
 8016f3c:	e02b      	b.n	8016f96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d109      	bne.n	8016f58 <udp_sendto+0x5c>
 8016f44:	4b16      	ldr	r3, [pc, #88]	; (8016fa0 <udp_sendto+0xa4>)
 8016f46:	f240 221a 	movw	r2, #538	; 0x21a
 8016f4a:	4919      	ldr	r1, [pc, #100]	; (8016fb0 <udp_sendto+0xb4>)
 8016f4c:	4816      	ldr	r0, [pc, #88]	; (8016fa8 <udp_sendto+0xac>)
 8016f4e:	f000 fd37 	bl	80179c0 <iprintf>
 8016f52:	f06f 030f 	mvn.w	r3, #15
 8016f56:	e01e      	b.n	8016f96 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	7a1b      	ldrb	r3, [r3, #8]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d006      	beq.n	8016f6e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	7a1b      	ldrb	r3, [r3, #8]
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7f8 f92b 	bl	800f1c0 <netif_get_by_index>
 8016f6a:	6178      	str	r0, [r7, #20]
 8016f6c:	e003      	b.n	8016f76 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f7f5 ffda 	bl	800cf28 <ip4_route>
 8016f74:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016f76:	697b      	ldr	r3, [r7, #20]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d102      	bne.n	8016f82 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016f7c:	f06f 0303 	mvn.w	r3, #3
 8016f80:	e009      	b.n	8016f96 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8016f82:	887a      	ldrh	r2, [r7, #2]
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	9300      	str	r3, [sp, #0]
 8016f88:	4613      	mov	r3, r2
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	68b9      	ldr	r1, [r7, #8]
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	f000 f810 	bl	8016fb4 <udp_sendto_if>
 8016f94:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3718      	adds	r7, #24
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	0801d040 	.word	0x0801d040
 8016fa4:	0801d1c0 	.word	0x0801d1c0
 8016fa8:	0801d0f0 	.word	0x0801d0f0
 8016fac:	0801d1d8 	.word	0x0801d1d8
 8016fb0:	0801d1f4 	.word	0x0801d1f4

08016fb4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b088      	sub	sp, #32
 8016fb8:	af02      	add	r7, sp, #8
 8016fba:	60f8      	str	r0, [r7, #12]
 8016fbc:	60b9      	str	r1, [r7, #8]
 8016fbe:	607a      	str	r2, [r7, #4]
 8016fc0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d109      	bne.n	8016fdc <udp_sendto_if+0x28>
 8016fc8:	4b2e      	ldr	r3, [pc, #184]	; (8017084 <udp_sendto_if+0xd0>)
 8016fca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fce:	492e      	ldr	r1, [pc, #184]	; (8017088 <udp_sendto_if+0xd4>)
 8016fd0:	482e      	ldr	r0, [pc, #184]	; (801708c <udp_sendto_if+0xd8>)
 8016fd2:	f000 fcf5 	bl	80179c0 <iprintf>
 8016fd6:	f06f 030f 	mvn.w	r3, #15
 8016fda:	e04f      	b.n	801707c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d109      	bne.n	8016ff6 <udp_sendto_if+0x42>
 8016fe2:	4b28      	ldr	r3, [pc, #160]	; (8017084 <udp_sendto_if+0xd0>)
 8016fe4:	f240 2281 	movw	r2, #641	; 0x281
 8016fe8:	4929      	ldr	r1, [pc, #164]	; (8017090 <udp_sendto_if+0xdc>)
 8016fea:	4828      	ldr	r0, [pc, #160]	; (801708c <udp_sendto_if+0xd8>)
 8016fec:	f000 fce8 	bl	80179c0 <iprintf>
 8016ff0:	f06f 030f 	mvn.w	r3, #15
 8016ff4:	e042      	b.n	801707c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d109      	bne.n	8017010 <udp_sendto_if+0x5c>
 8016ffc:	4b21      	ldr	r3, [pc, #132]	; (8017084 <udp_sendto_if+0xd0>)
 8016ffe:	f240 2282 	movw	r2, #642	; 0x282
 8017002:	4924      	ldr	r1, [pc, #144]	; (8017094 <udp_sendto_if+0xe0>)
 8017004:	4821      	ldr	r0, [pc, #132]	; (801708c <udp_sendto_if+0xd8>)
 8017006:	f000 fcdb 	bl	80179c0 <iprintf>
 801700a:	f06f 030f 	mvn.w	r3, #15
 801700e:	e035      	b.n	801707c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017010:	6a3b      	ldr	r3, [r7, #32]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d109      	bne.n	801702a <udp_sendto_if+0x76>
 8017016:	4b1b      	ldr	r3, [pc, #108]	; (8017084 <udp_sendto_if+0xd0>)
 8017018:	f240 2283 	movw	r2, #643	; 0x283
 801701c:	491e      	ldr	r1, [pc, #120]	; (8017098 <udp_sendto_if+0xe4>)
 801701e:	481b      	ldr	r0, [pc, #108]	; (801708c <udp_sendto_if+0xd8>)
 8017020:	f000 fcce 	bl	80179c0 <iprintf>
 8017024:	f06f 030f 	mvn.w	r3, #15
 8017028:	e028      	b.n	801707c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d009      	beq.n	8017044 <udp_sendto_if+0x90>
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d005      	beq.n	8017044 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017040:	2be0      	cmp	r3, #224	; 0xe0
 8017042:	d103      	bne.n	801704c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017044:	6a3b      	ldr	r3, [r7, #32]
 8017046:	3304      	adds	r3, #4
 8017048:	617b      	str	r3, [r7, #20]
 801704a:	e00b      	b.n	8017064 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	6a3b      	ldr	r3, [r7, #32]
 8017052:	3304      	adds	r3, #4
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	429a      	cmp	r2, r3
 8017058:	d002      	beq.n	8017060 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801705a:	f06f 0303 	mvn.w	r3, #3
 801705e:	e00d      	b.n	801707c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017064:	887a      	ldrh	r2, [r7, #2]
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	9301      	str	r3, [sp, #4]
 801706a:	6a3b      	ldr	r3, [r7, #32]
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	4613      	mov	r3, r2
 8017070:	687a      	ldr	r2, [r7, #4]
 8017072:	68b9      	ldr	r1, [r7, #8]
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f000 f811 	bl	801709c <udp_sendto_if_src>
 801707a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801707c:	4618      	mov	r0, r3
 801707e:	3718      	adds	r7, #24
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}
 8017084:	0801d040 	.word	0x0801d040
 8017088:	0801d210 	.word	0x0801d210
 801708c:	0801d0f0 	.word	0x0801d0f0
 8017090:	0801d22c 	.word	0x0801d22c
 8017094:	0801d248 	.word	0x0801d248
 8017098:	0801d268 	.word	0x0801d268

0801709c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08c      	sub	sp, #48	; 0x30
 80170a0:	af04      	add	r7, sp, #16
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	607a      	str	r2, [r7, #4]
 80170a8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 80170aa:	f7ee fdeb 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d109      	bne.n	80170c8 <udp_sendto_if_src+0x2c>
 80170b4:	4b65      	ldr	r3, [pc, #404]	; (801724c <udp_sendto_if_src+0x1b0>)
 80170b6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80170ba:	4965      	ldr	r1, [pc, #404]	; (8017250 <udp_sendto_if_src+0x1b4>)
 80170bc:	4865      	ldr	r0, [pc, #404]	; (8017254 <udp_sendto_if_src+0x1b8>)
 80170be:	f000 fc7f 	bl	80179c0 <iprintf>
 80170c2:	f06f 030f 	mvn.w	r3, #15
 80170c6:	e0bc      	b.n	8017242 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d109      	bne.n	80170e2 <udp_sendto_if_src+0x46>
 80170ce:	4b5f      	ldr	r3, [pc, #380]	; (801724c <udp_sendto_if_src+0x1b0>)
 80170d0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80170d4:	4960      	ldr	r1, [pc, #384]	; (8017258 <udp_sendto_if_src+0x1bc>)
 80170d6:	485f      	ldr	r0, [pc, #380]	; (8017254 <udp_sendto_if_src+0x1b8>)
 80170d8:	f000 fc72 	bl	80179c0 <iprintf>
 80170dc:	f06f 030f 	mvn.w	r3, #15
 80170e0:	e0af      	b.n	8017242 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d109      	bne.n	80170fc <udp_sendto_if_src+0x60>
 80170e8:	4b58      	ldr	r3, [pc, #352]	; (801724c <udp_sendto_if_src+0x1b0>)
 80170ea:	f240 22d3 	movw	r2, #723	; 0x2d3
 80170ee:	495b      	ldr	r1, [pc, #364]	; (801725c <udp_sendto_if_src+0x1c0>)
 80170f0:	4858      	ldr	r0, [pc, #352]	; (8017254 <udp_sendto_if_src+0x1b8>)
 80170f2:	f000 fc65 	bl	80179c0 <iprintf>
 80170f6:	f06f 030f 	mvn.w	r3, #15
 80170fa:	e0a2      	b.n	8017242 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80170fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d109      	bne.n	8017116 <udp_sendto_if_src+0x7a>
 8017102:	4b52      	ldr	r3, [pc, #328]	; (801724c <udp_sendto_if_src+0x1b0>)
 8017104:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017108:	4955      	ldr	r1, [pc, #340]	; (8017260 <udp_sendto_if_src+0x1c4>)
 801710a:	4852      	ldr	r0, [pc, #328]	; (8017254 <udp_sendto_if_src+0x1b8>)
 801710c:	f000 fc58 	bl	80179c0 <iprintf>
 8017110:	f06f 030f 	mvn.w	r3, #15
 8017114:	e095      	b.n	8017242 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017118:	2b00      	cmp	r3, #0
 801711a:	d109      	bne.n	8017130 <udp_sendto_if_src+0x94>
 801711c:	4b4b      	ldr	r3, [pc, #300]	; (801724c <udp_sendto_if_src+0x1b0>)
 801711e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8017122:	4950      	ldr	r1, [pc, #320]	; (8017264 <udp_sendto_if_src+0x1c8>)
 8017124:	484b      	ldr	r0, [pc, #300]	; (8017254 <udp_sendto_if_src+0x1b8>)
 8017126:	f000 fc4b 	bl	80179c0 <iprintf>
 801712a:	f06f 030f 	mvn.w	r3, #15
 801712e:	e088      	b.n	8017242 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	8a5b      	ldrh	r3, [r3, #18]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d10f      	bne.n	8017158 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017138:	68f9      	ldr	r1, [r7, #12]
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	8a5b      	ldrh	r3, [r3, #18]
 801713e:	461a      	mov	r2, r3
 8017140:	68f8      	ldr	r0, [r7, #12]
 8017142:	f000 f893 	bl	801726c <udp_bind>
 8017146:	4603      	mov	r3, r0
 8017148:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801714a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d002      	beq.n	8017158 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017152:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017156:	e074      	b.n	8017242 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	891b      	ldrh	r3, [r3, #8]
 801715c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017160:	4293      	cmp	r3, r2
 8017162:	d902      	bls.n	801716a <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8017164:	f04f 33ff 	mov.w	r3, #4294967295
 8017168:	e06b      	b.n	8017242 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801716a:	2108      	movs	r1, #8
 801716c:	68b8      	ldr	r0, [r7, #8]
 801716e:	f7f8 fb1f 	bl	800f7b0 <pbuf_add_header>
 8017172:	4603      	mov	r3, r0
 8017174:	2b00      	cmp	r3, #0
 8017176:	d015      	beq.n	80171a4 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017178:	f44f 7220 	mov.w	r2, #640	; 0x280
 801717c:	2108      	movs	r1, #8
 801717e:	2022      	movs	r0, #34	; 0x22
 8017180:	f7f8 f8c8 	bl	800f314 <pbuf_alloc>
 8017184:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017186:	69fb      	ldr	r3, [r7, #28]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d102      	bne.n	8017192 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801718c:	f04f 33ff 	mov.w	r3, #4294967295
 8017190:	e057      	b.n	8017242 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	891b      	ldrh	r3, [r3, #8]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d006      	beq.n	80171a8 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801719a:	68b9      	ldr	r1, [r7, #8]
 801719c:	69f8      	ldr	r0, [r7, #28]
 801719e:	f7f8 fcc1 	bl	800fb24 <pbuf_chain>
 80171a2:	e001      	b.n	80171a8 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80171a8:	69fb      	ldr	r3, [r7, #28]
 80171aa:	895b      	ldrh	r3, [r3, #10]
 80171ac:	2b07      	cmp	r3, #7
 80171ae:	d806      	bhi.n	80171be <udp_sendto_if_src+0x122>
 80171b0:	4b26      	ldr	r3, [pc, #152]	; (801724c <udp_sendto_if_src+0x1b0>)
 80171b2:	f240 320d 	movw	r2, #781	; 0x30d
 80171b6:	492c      	ldr	r1, [pc, #176]	; (8017268 <udp_sendto_if_src+0x1cc>)
 80171b8:	4826      	ldr	r0, [pc, #152]	; (8017254 <udp_sendto_if_src+0x1b8>)
 80171ba:	f000 fc01 	bl	80179c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80171be:	69fb      	ldr	r3, [r7, #28]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	8a5b      	ldrh	r3, [r3, #18]
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7f4 fbcd 	bl	800b968 <lwip_htons>
 80171ce:	4603      	mov	r3, r0
 80171d0:	461a      	mov	r2, r3
 80171d2:	697b      	ldr	r3, [r7, #20]
 80171d4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80171d6:	887b      	ldrh	r3, [r7, #2]
 80171d8:	4618      	mov	r0, r3
 80171da:	f7f4 fbc5 	bl	800b968 <lwip_htons>
 80171de:	4603      	mov	r3, r0
 80171e0:	461a      	mov	r2, r3
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	2200      	movs	r2, #0
 80171ea:	719a      	strb	r2, [r3, #6]
 80171ec:	2200      	movs	r2, #0
 80171ee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	891b      	ldrh	r3, [r3, #8]
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7f4 fbb7 	bl	800b968 <lwip_htons>
 80171fa:	4603      	mov	r3, r0
 80171fc:	461a      	mov	r2, r3
 80171fe:	697b      	ldr	r3, [r7, #20]
 8017200:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017202:	2311      	movs	r3, #17
 8017204:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	7adb      	ldrb	r3, [r3, #11]
 801720a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	7a9b      	ldrb	r3, [r3, #10]
 8017210:	7cb9      	ldrb	r1, [r7, #18]
 8017212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017214:	9202      	str	r2, [sp, #8]
 8017216:	7cfa      	ldrb	r2, [r7, #19]
 8017218:	9201      	str	r2, [sp, #4]
 801721a:	9300      	str	r3, [sp, #0]
 801721c:	460b      	mov	r3, r1
 801721e:	687a      	ldr	r2, [r7, #4]
 8017220:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017222:	69f8      	ldr	r0, [r7, #28]
 8017224:	f7f6 f86a 	bl	800d2fc <ip4_output_if_src>
 8017228:	4603      	mov	r3, r0
 801722a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801722c:	69fa      	ldr	r2, [r7, #28]
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	429a      	cmp	r2, r3
 8017232:	d004      	beq.n	801723e <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8017234:	69f8      	ldr	r0, [r7, #28]
 8017236:	f7f8 fb51 	bl	800f8dc <pbuf_free>
    q = NULL;
 801723a:	2300      	movs	r3, #0
 801723c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801723e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017242:	4618      	mov	r0, r3
 8017244:	3720      	adds	r7, #32
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	0801d040 	.word	0x0801d040
 8017250:	0801d288 	.word	0x0801d288
 8017254:	0801d0f0 	.word	0x0801d0f0
 8017258:	0801d2a8 	.word	0x0801d2a8
 801725c:	0801d2c8 	.word	0x0801d2c8
 8017260:	0801d2ec 	.word	0x0801d2ec
 8017264:	0801d310 	.word	0x0801d310
 8017268:	0801d334 	.word	0x0801d334

0801726c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b086      	sub	sp, #24
 8017270:	af00      	add	r7, sp, #0
 8017272:	60f8      	str	r0, [r7, #12]
 8017274:	60b9      	str	r1, [r7, #8]
 8017276:	4613      	mov	r3, r2
 8017278:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 801727a:	f7ee fd03 	bl	8005c84 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801727e:	68bb      	ldr	r3, [r7, #8]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d101      	bne.n	8017288 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017284:	4b39      	ldr	r3, [pc, #228]	; (801736c <udp_bind+0x100>)
 8017286:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d109      	bne.n	80172a2 <udp_bind+0x36>
 801728e:	4b38      	ldr	r3, [pc, #224]	; (8017370 <udp_bind+0x104>)
 8017290:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017294:	4937      	ldr	r1, [pc, #220]	; (8017374 <udp_bind+0x108>)
 8017296:	4838      	ldr	r0, [pc, #224]	; (8017378 <udp_bind+0x10c>)
 8017298:	f000 fb92 	bl	80179c0 <iprintf>
 801729c:	f06f 030f 	mvn.w	r3, #15
 80172a0:	e060      	b.n	8017364 <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80172a2:	2300      	movs	r3, #0
 80172a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80172a6:	4b35      	ldr	r3, [pc, #212]	; (801737c <udp_bind+0x110>)
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	617b      	str	r3, [r7, #20]
 80172ac:	e009      	b.n	80172c2 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80172ae:	68fa      	ldr	r2, [r7, #12]
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d102      	bne.n	80172bc <udp_bind+0x50>
      rebind = 1;
 80172b6:	2301      	movs	r3, #1
 80172b8:	74fb      	strb	r3, [r7, #19]
      break;
 80172ba:	e005      	b.n	80172c8 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	617b      	str	r3, [r7, #20]
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d1f2      	bne.n	80172ae <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80172c8:	88fb      	ldrh	r3, [r7, #6]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d109      	bne.n	80172e2 <udp_bind+0x76>
    port = udp_new_port();
 80172ce:	f7ff fc2f 	bl	8016b30 <udp_new_port>
 80172d2:	4603      	mov	r3, r0
 80172d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80172d6:	88fb      	ldrh	r3, [r7, #6]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d12c      	bne.n	8017336 <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80172dc:	f06f 0307 	mvn.w	r3, #7
 80172e0:	e040      	b.n	8017364 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80172e2:	4b26      	ldr	r3, [pc, #152]	; (801737c <udp_bind+0x110>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	617b      	str	r3, [r7, #20]
 80172e8:	e022      	b.n	8017330 <udp_bind+0xc4>
      if (pcb != ipcb) {
 80172ea:	68fa      	ldr	r2, [r7, #12]
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d01b      	beq.n	801732a <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	8a5b      	ldrh	r3, [r3, #18]
 80172f6:	88fa      	ldrh	r2, [r7, #6]
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d116      	bne.n	801732a <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017304:	429a      	cmp	r2, r3
 8017306:	d00d      	beq.n	8017324 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00a      	beq.n	8017324 <udp_bind+0xb8>
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d006      	beq.n	8017324 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 8017316:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017318:	2b00      	cmp	r3, #0
 801731a:	d003      	beq.n	8017324 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d102      	bne.n	801732a <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017324:	f06f 0307 	mvn.w	r3, #7
 8017328:	e01c      	b.n	8017364 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	68db      	ldr	r3, [r3, #12]
 801732e:	617b      	str	r3, [r7, #20]
 8017330:	697b      	ldr	r3, [r7, #20]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d1d9      	bne.n	80172ea <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d002      	beq.n	8017342 <udp_bind+0xd6>
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	e000      	b.n	8017344 <udp_bind+0xd8>
 8017342:	2300      	movs	r3, #0
 8017344:	68fa      	ldr	r2, [r7, #12]
 8017346:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	88fa      	ldrh	r2, [r7, #6]
 801734c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801734e:	7cfb      	ldrb	r3, [r7, #19]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d106      	bne.n	8017362 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017354:	4b09      	ldr	r3, [pc, #36]	; (801737c <udp_bind+0x110>)
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801735c:	4a07      	ldr	r2, [pc, #28]	; (801737c <udp_bind+0x110>)
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017362:	2300      	movs	r3, #0
}
 8017364:	4618      	mov	r0, r3
 8017366:	3718      	adds	r7, #24
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}
 801736c:	0801d484 	.word	0x0801d484
 8017370:	0801d040 	.word	0x0801d040
 8017374:	0801d364 	.word	0x0801d364
 8017378:	0801d0f0 	.word	0x0801d0f0
 801737c:	24010914 	.word	0x24010914

08017380 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b086      	sub	sp, #24
 8017384:	af00      	add	r7, sp, #0
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	4613      	mov	r3, r2
 801738c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 801738e:	f7ee fc79 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d109      	bne.n	80173ac <udp_connect+0x2c>
 8017398:	4b2c      	ldr	r3, [pc, #176]	; (801744c <udp_connect+0xcc>)
 801739a:	f240 4235 	movw	r2, #1077	; 0x435
 801739e:	492c      	ldr	r1, [pc, #176]	; (8017450 <udp_connect+0xd0>)
 80173a0:	482c      	ldr	r0, [pc, #176]	; (8017454 <udp_connect+0xd4>)
 80173a2:	f000 fb0d 	bl	80179c0 <iprintf>
 80173a6:	f06f 030f 	mvn.w	r3, #15
 80173aa:	e04b      	b.n	8017444 <udp_connect+0xc4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d109      	bne.n	80173c6 <udp_connect+0x46>
 80173b2:	4b26      	ldr	r3, [pc, #152]	; (801744c <udp_connect+0xcc>)
 80173b4:	f240 4236 	movw	r2, #1078	; 0x436
 80173b8:	4927      	ldr	r1, [pc, #156]	; (8017458 <udp_connect+0xd8>)
 80173ba:	4826      	ldr	r0, [pc, #152]	; (8017454 <udp_connect+0xd4>)
 80173bc:	f000 fb00 	bl	80179c0 <iprintf>
 80173c0:	f06f 030f 	mvn.w	r3, #15
 80173c4:	e03e      	b.n	8017444 <udp_connect+0xc4>

  if (pcb->local_port == 0) {
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	8a5b      	ldrh	r3, [r3, #18]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d10f      	bne.n	80173ee <udp_connect+0x6e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80173ce:	68f9      	ldr	r1, [r7, #12]
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	8a5b      	ldrh	r3, [r3, #18]
 80173d4:	461a      	mov	r2, r3
 80173d6:	68f8      	ldr	r0, [r7, #12]
 80173d8:	f7ff ff48 	bl	801726c <udp_bind>
 80173dc:	4603      	mov	r3, r0
 80173de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80173e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d002      	beq.n	80173ee <udp_connect+0x6e>
      return err;
 80173e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80173ec:	e02a      	b.n	8017444 <udp_connect+0xc4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d002      	beq.n	80173fa <udp_connect+0x7a>
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	e000      	b.n	80173fc <udp_connect+0x7c>
 80173fa:	2300      	movs	r3, #0
 80173fc:	68fa      	ldr	r2, [r7, #12]
 80173fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	88fa      	ldrh	r2, [r7, #6]
 8017404:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	7c1b      	ldrb	r3, [r3, #16]
 801740a:	f043 0304 	orr.w	r3, r3, #4
 801740e:	b2da      	uxtb	r2, r3
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017414:	4b11      	ldr	r3, [pc, #68]	; (801745c <udp_connect+0xdc>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	617b      	str	r3, [r7, #20]
 801741a:	e008      	b.n	801742e <udp_connect+0xae>
    if (pcb == ipcb) {
 801741c:	68fa      	ldr	r2, [r7, #12]
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	429a      	cmp	r2, r3
 8017422:	d101      	bne.n	8017428 <udp_connect+0xa8>
      /* already on the list, just return */
      return ERR_OK;
 8017424:	2300      	movs	r3, #0
 8017426:	e00d      	b.n	8017444 <udp_connect+0xc4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	68db      	ldr	r3, [r3, #12]
 801742c:	617b      	str	r3, [r7, #20]
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d1f3      	bne.n	801741c <udp_connect+0x9c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017434:	4b09      	ldr	r3, [pc, #36]	; (801745c <udp_connect+0xdc>)
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801743c:	4a07      	ldr	r2, [pc, #28]	; (801745c <udp_connect+0xdc>)
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017442:	2300      	movs	r3, #0
}
 8017444:	4618      	mov	r0, r3
 8017446:	3718      	adds	r7, #24
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	0801d040 	.word	0x0801d040
 8017450:	0801d37c 	.word	0x0801d37c
 8017454:	0801d0f0 	.word	0x0801d0f0
 8017458:	0801d398 	.word	0x0801d398
 801745c:	24010914 	.word	0x24010914

08017460 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b084      	sub	sp, #16
 8017464:	af00      	add	r7, sp, #0
 8017466:	60f8      	str	r0, [r7, #12]
 8017468:	60b9      	str	r1, [r7, #8]
 801746a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 801746c:	f7ee fc0a 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d107      	bne.n	8017486 <udp_recv+0x26>
 8017476:	4b08      	ldr	r3, [pc, #32]	; (8017498 <udp_recv+0x38>)
 8017478:	f240 428a 	movw	r2, #1162	; 0x48a
 801747c:	4907      	ldr	r1, [pc, #28]	; (801749c <udp_recv+0x3c>)
 801747e:	4808      	ldr	r0, [pc, #32]	; (80174a0 <udp_recv+0x40>)
 8017480:	f000 fa9e 	bl	80179c0 <iprintf>
 8017484:	e005      	b.n	8017492 <udp_recv+0x32>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	68ba      	ldr	r2, [r7, #8]
 801748a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	687a      	ldr	r2, [r7, #4]
 8017490:	61da      	str	r2, [r3, #28]
}
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	0801d040 	.word	0x0801d040
 801749c:	0801d3d0 	.word	0x0801d3d0
 80174a0:	0801d0f0 	.word	0x0801d0f0

080174a4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b084      	sub	sp, #16
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 80174ac:	f7ee fbea 	bl	8005c84 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d107      	bne.n	80174c6 <udp_remove+0x22>
 80174b6:	4b19      	ldr	r3, [pc, #100]	; (801751c <udp_remove+0x78>)
 80174b8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80174bc:	4918      	ldr	r1, [pc, #96]	; (8017520 <udp_remove+0x7c>)
 80174be:	4819      	ldr	r0, [pc, #100]	; (8017524 <udp_remove+0x80>)
 80174c0:	f000 fa7e 	bl	80179c0 <iprintf>
 80174c4:	e026      	b.n	8017514 <udp_remove+0x70>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80174c6:	4b18      	ldr	r3, [pc, #96]	; (8017528 <udp_remove+0x84>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	687a      	ldr	r2, [r7, #4]
 80174cc:	429a      	cmp	r2, r3
 80174ce:	d105      	bne.n	80174dc <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80174d0:	4b15      	ldr	r3, [pc, #84]	; (8017528 <udp_remove+0x84>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	68db      	ldr	r3, [r3, #12]
 80174d6:	4a14      	ldr	r2, [pc, #80]	; (8017528 <udp_remove+0x84>)
 80174d8:	6013      	str	r3, [r2, #0]
 80174da:	e017      	b.n	801750c <udp_remove+0x68>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80174dc:	4b12      	ldr	r3, [pc, #72]	; (8017528 <udp_remove+0x84>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	60fb      	str	r3, [r7, #12]
 80174e2:	e010      	b.n	8017506 <udp_remove+0x62>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	68db      	ldr	r3, [r3, #12]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d009      	beq.n	8017500 <udp_remove+0x5c>
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	68db      	ldr	r3, [r3, #12]
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d104      	bne.n	8017500 <udp_remove+0x5c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	68da      	ldr	r2, [r3, #12]
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	60da      	str	r2, [r3, #12]
        break;
 80174fe:	e005      	b.n	801750c <udp_remove+0x68>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	68db      	ldr	r3, [r3, #12]
 8017504:	60fb      	str	r3, [r7, #12]
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d1eb      	bne.n	80174e4 <udp_remove+0x40>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801750c:	6879      	ldr	r1, [r7, #4]
 801750e:	2000      	movs	r0, #0
 8017510:	f7f7 fb16 	bl	800eb40 <memp_free>
}
 8017514:	3710      	adds	r7, #16
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}
 801751a:	bf00      	nop
 801751c:	0801d040 	.word	0x0801d040
 8017520:	0801d3e8 	.word	0x0801d3e8
 8017524:	0801d0f0 	.word	0x0801d0f0
 8017528:	24010914 	.word	0x24010914

0801752c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8017532:	f7ee fba7 	bl	8005c84 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017536:	2000      	movs	r0, #0
 8017538:	f7f7 fa8c 	bl	800ea54 <memp_malloc>
 801753c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d007      	beq.n	8017554 <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017544:	2220      	movs	r2, #32
 8017546:	2100      	movs	r1, #0
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 f99c 	bl	8017886 <memset>
    pcb->ttl = UDP_TTL;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	22ff      	movs	r2, #255	; 0xff
 8017552:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017554:	687b      	ldr	r3, [r7, #4]
}
 8017556:	4618      	mov	r0, r3
 8017558:	3708      	adds	r7, #8
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}

0801755e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801755e:	b580      	push	{r7, lr}
 8017560:	b084      	sub	sp, #16
 8017562:	af00      	add	r7, sp, #0
 8017564:	4603      	mov	r3, r0
 8017566:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8017568:	f7ee fb8c 	bl	8005c84 <sys_check_core_locking>

  pcb = udp_new();
 801756c:	f7ff ffde 	bl	801752c <udp_new>
 8017570:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017572:	68fb      	ldr	r3, [r7, #12]
}
 8017574:	4618      	mov	r0, r3
 8017576:	3710      	adds	r7, #16
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801757c:	b480      	push	{r7}
 801757e:	b085      	sub	sp, #20
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
 8017584:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d01e      	beq.n	80175ca <udp_netif_ip_addr_changed+0x4e>
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d01a      	beq.n	80175ca <udp_netif_ip_addr_changed+0x4e>
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d017      	beq.n	80175ca <udp_netif_ip_addr_changed+0x4e>
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d013      	beq.n	80175ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80175a2:	4b0d      	ldr	r3, [pc, #52]	; (80175d8 <udp_netif_ip_addr_changed+0x5c>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	60fb      	str	r3, [r7, #12]
 80175a8:	e00c      	b.n	80175c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d103      	bne.n	80175be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	68db      	ldr	r3, [r3, #12]
 80175c2:	60fb      	str	r3, [r7, #12]
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d1ef      	bne.n	80175aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80175ca:	bf00      	nop
 80175cc:	3714      	adds	r7, #20
 80175ce:	46bd      	mov	sp, r7
 80175d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d4:	4770      	bx	lr
 80175d6:	bf00      	nop
 80175d8:	24010914 	.word	0x24010914

080175dc <std>:
 80175dc:	2300      	movs	r3, #0
 80175de:	b510      	push	{r4, lr}
 80175e0:	4604      	mov	r4, r0
 80175e2:	e9c0 3300 	strd	r3, r3, [r0]
 80175e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80175ea:	6083      	str	r3, [r0, #8]
 80175ec:	8181      	strh	r1, [r0, #12]
 80175ee:	6643      	str	r3, [r0, #100]	; 0x64
 80175f0:	81c2      	strh	r2, [r0, #14]
 80175f2:	6183      	str	r3, [r0, #24]
 80175f4:	4619      	mov	r1, r3
 80175f6:	2208      	movs	r2, #8
 80175f8:	305c      	adds	r0, #92	; 0x5c
 80175fa:	f000 f944 	bl	8017886 <memset>
 80175fe:	4b05      	ldr	r3, [pc, #20]	; (8017614 <std+0x38>)
 8017600:	6263      	str	r3, [r4, #36]	; 0x24
 8017602:	4b05      	ldr	r3, [pc, #20]	; (8017618 <std+0x3c>)
 8017604:	62a3      	str	r3, [r4, #40]	; 0x28
 8017606:	4b05      	ldr	r3, [pc, #20]	; (801761c <std+0x40>)
 8017608:	62e3      	str	r3, [r4, #44]	; 0x2c
 801760a:	4b05      	ldr	r3, [pc, #20]	; (8017620 <std+0x44>)
 801760c:	6224      	str	r4, [r4, #32]
 801760e:	6323      	str	r3, [r4, #48]	; 0x30
 8017610:	bd10      	pop	{r4, pc}
 8017612:	bf00      	nop
 8017614:	08017ba1 	.word	0x08017ba1
 8017618:	08017bc3 	.word	0x08017bc3
 801761c:	08017bfb 	.word	0x08017bfb
 8017620:	08017c1f 	.word	0x08017c1f

08017624 <_cleanup_r>:
 8017624:	4901      	ldr	r1, [pc, #4]	; (801762c <_cleanup_r+0x8>)
 8017626:	f000 b8af 	b.w	8017788 <_fwalk_reent>
 801762a:	bf00      	nop
 801762c:	08017dc5 	.word	0x08017dc5

08017630 <__sfmoreglue>:
 8017630:	b570      	push	{r4, r5, r6, lr}
 8017632:	2268      	movs	r2, #104	; 0x68
 8017634:	1e4d      	subs	r5, r1, #1
 8017636:	4355      	muls	r5, r2
 8017638:	460e      	mov	r6, r1
 801763a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801763e:	f000 f94b 	bl	80178d8 <_malloc_r>
 8017642:	4604      	mov	r4, r0
 8017644:	b140      	cbz	r0, 8017658 <__sfmoreglue+0x28>
 8017646:	2100      	movs	r1, #0
 8017648:	e9c0 1600 	strd	r1, r6, [r0]
 801764c:	300c      	adds	r0, #12
 801764e:	60a0      	str	r0, [r4, #8]
 8017650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017654:	f000 f917 	bl	8017886 <memset>
 8017658:	4620      	mov	r0, r4
 801765a:	bd70      	pop	{r4, r5, r6, pc}

0801765c <__sfp_lock_acquire>:
 801765c:	4801      	ldr	r0, [pc, #4]	; (8017664 <__sfp_lock_acquire+0x8>)
 801765e:	f000 b8d8 	b.w	8017812 <__retarget_lock_acquire_recursive>
 8017662:	bf00      	nop
 8017664:	24010919 	.word	0x24010919

08017668 <__sfp_lock_release>:
 8017668:	4801      	ldr	r0, [pc, #4]	; (8017670 <__sfp_lock_release+0x8>)
 801766a:	f000 b8d3 	b.w	8017814 <__retarget_lock_release_recursive>
 801766e:	bf00      	nop
 8017670:	24010919 	.word	0x24010919

08017674 <__sinit_lock_acquire>:
 8017674:	4801      	ldr	r0, [pc, #4]	; (801767c <__sinit_lock_acquire+0x8>)
 8017676:	f000 b8cc 	b.w	8017812 <__retarget_lock_acquire_recursive>
 801767a:	bf00      	nop
 801767c:	2401091a 	.word	0x2401091a

08017680 <__sinit_lock_release>:
 8017680:	4801      	ldr	r0, [pc, #4]	; (8017688 <__sinit_lock_release+0x8>)
 8017682:	f000 b8c7 	b.w	8017814 <__retarget_lock_release_recursive>
 8017686:	bf00      	nop
 8017688:	2401091a 	.word	0x2401091a

0801768c <__sinit>:
 801768c:	b510      	push	{r4, lr}
 801768e:	4604      	mov	r4, r0
 8017690:	f7ff fff0 	bl	8017674 <__sinit_lock_acquire>
 8017694:	69a3      	ldr	r3, [r4, #24]
 8017696:	b11b      	cbz	r3, 80176a0 <__sinit+0x14>
 8017698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801769c:	f7ff bff0 	b.w	8017680 <__sinit_lock_release>
 80176a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80176a4:	6523      	str	r3, [r4, #80]	; 0x50
 80176a6:	4b13      	ldr	r3, [pc, #76]	; (80176f4 <__sinit+0x68>)
 80176a8:	4a13      	ldr	r2, [pc, #76]	; (80176f8 <__sinit+0x6c>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80176ae:	42a3      	cmp	r3, r4
 80176b0:	bf04      	itt	eq
 80176b2:	2301      	moveq	r3, #1
 80176b4:	61a3      	streq	r3, [r4, #24]
 80176b6:	4620      	mov	r0, r4
 80176b8:	f000 f820 	bl	80176fc <__sfp>
 80176bc:	6060      	str	r0, [r4, #4]
 80176be:	4620      	mov	r0, r4
 80176c0:	f000 f81c 	bl	80176fc <__sfp>
 80176c4:	60a0      	str	r0, [r4, #8]
 80176c6:	4620      	mov	r0, r4
 80176c8:	f000 f818 	bl	80176fc <__sfp>
 80176cc:	2200      	movs	r2, #0
 80176ce:	60e0      	str	r0, [r4, #12]
 80176d0:	2104      	movs	r1, #4
 80176d2:	6860      	ldr	r0, [r4, #4]
 80176d4:	f7ff ff82 	bl	80175dc <std>
 80176d8:	68a0      	ldr	r0, [r4, #8]
 80176da:	2201      	movs	r2, #1
 80176dc:	2109      	movs	r1, #9
 80176de:	f7ff ff7d 	bl	80175dc <std>
 80176e2:	68e0      	ldr	r0, [r4, #12]
 80176e4:	2202      	movs	r2, #2
 80176e6:	2112      	movs	r1, #18
 80176e8:	f7ff ff78 	bl	80175dc <std>
 80176ec:	2301      	movs	r3, #1
 80176ee:	61a3      	str	r3, [r4, #24]
 80176f0:	e7d2      	b.n	8017698 <__sinit+0xc>
 80176f2:	bf00      	nop
 80176f4:	0801d5f8 	.word	0x0801d5f8
 80176f8:	08017625 	.word	0x08017625

080176fc <__sfp>:
 80176fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176fe:	4607      	mov	r7, r0
 8017700:	f7ff ffac 	bl	801765c <__sfp_lock_acquire>
 8017704:	4b1e      	ldr	r3, [pc, #120]	; (8017780 <__sfp+0x84>)
 8017706:	681e      	ldr	r6, [r3, #0]
 8017708:	69b3      	ldr	r3, [r6, #24]
 801770a:	b913      	cbnz	r3, 8017712 <__sfp+0x16>
 801770c:	4630      	mov	r0, r6
 801770e:	f7ff ffbd 	bl	801768c <__sinit>
 8017712:	3648      	adds	r6, #72	; 0x48
 8017714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017718:	3b01      	subs	r3, #1
 801771a:	d503      	bpl.n	8017724 <__sfp+0x28>
 801771c:	6833      	ldr	r3, [r6, #0]
 801771e:	b30b      	cbz	r3, 8017764 <__sfp+0x68>
 8017720:	6836      	ldr	r6, [r6, #0]
 8017722:	e7f7      	b.n	8017714 <__sfp+0x18>
 8017724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017728:	b9d5      	cbnz	r5, 8017760 <__sfp+0x64>
 801772a:	4b16      	ldr	r3, [pc, #88]	; (8017784 <__sfp+0x88>)
 801772c:	60e3      	str	r3, [r4, #12]
 801772e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017732:	6665      	str	r5, [r4, #100]	; 0x64
 8017734:	f000 f86c 	bl	8017810 <__retarget_lock_init_recursive>
 8017738:	f7ff ff96 	bl	8017668 <__sfp_lock_release>
 801773c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017744:	6025      	str	r5, [r4, #0]
 8017746:	61a5      	str	r5, [r4, #24]
 8017748:	2208      	movs	r2, #8
 801774a:	4629      	mov	r1, r5
 801774c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017750:	f000 f899 	bl	8017886 <memset>
 8017754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801775c:	4620      	mov	r0, r4
 801775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017760:	3468      	adds	r4, #104	; 0x68
 8017762:	e7d9      	b.n	8017718 <__sfp+0x1c>
 8017764:	2104      	movs	r1, #4
 8017766:	4638      	mov	r0, r7
 8017768:	f7ff ff62 	bl	8017630 <__sfmoreglue>
 801776c:	4604      	mov	r4, r0
 801776e:	6030      	str	r0, [r6, #0]
 8017770:	2800      	cmp	r0, #0
 8017772:	d1d5      	bne.n	8017720 <__sfp+0x24>
 8017774:	f7ff ff78 	bl	8017668 <__sfp_lock_release>
 8017778:	230c      	movs	r3, #12
 801777a:	603b      	str	r3, [r7, #0]
 801777c:	e7ee      	b.n	801775c <__sfp+0x60>
 801777e:	bf00      	nop
 8017780:	0801d5f8 	.word	0x0801d5f8
 8017784:	ffff0001 	.word	0xffff0001

08017788 <_fwalk_reent>:
 8017788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801778c:	4606      	mov	r6, r0
 801778e:	4688      	mov	r8, r1
 8017790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017794:	2700      	movs	r7, #0
 8017796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801779a:	f1b9 0901 	subs.w	r9, r9, #1
 801779e:	d505      	bpl.n	80177ac <_fwalk_reent+0x24>
 80177a0:	6824      	ldr	r4, [r4, #0]
 80177a2:	2c00      	cmp	r4, #0
 80177a4:	d1f7      	bne.n	8017796 <_fwalk_reent+0xe>
 80177a6:	4638      	mov	r0, r7
 80177a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177ac:	89ab      	ldrh	r3, [r5, #12]
 80177ae:	2b01      	cmp	r3, #1
 80177b0:	d907      	bls.n	80177c2 <_fwalk_reent+0x3a>
 80177b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80177b6:	3301      	adds	r3, #1
 80177b8:	d003      	beq.n	80177c2 <_fwalk_reent+0x3a>
 80177ba:	4629      	mov	r1, r5
 80177bc:	4630      	mov	r0, r6
 80177be:	47c0      	blx	r8
 80177c0:	4307      	orrs	r7, r0
 80177c2:	3568      	adds	r5, #104	; 0x68
 80177c4:	e7e9      	b.n	801779a <_fwalk_reent+0x12>
	...

080177c8 <__libc_init_array>:
 80177c8:	b570      	push	{r4, r5, r6, lr}
 80177ca:	4d0d      	ldr	r5, [pc, #52]	; (8017800 <__libc_init_array+0x38>)
 80177cc:	4c0d      	ldr	r4, [pc, #52]	; (8017804 <__libc_init_array+0x3c>)
 80177ce:	1b64      	subs	r4, r4, r5
 80177d0:	10a4      	asrs	r4, r4, #2
 80177d2:	2600      	movs	r6, #0
 80177d4:	42a6      	cmp	r6, r4
 80177d6:	d109      	bne.n	80177ec <__libc_init_array+0x24>
 80177d8:	4d0b      	ldr	r5, [pc, #44]	; (8017808 <__libc_init_array+0x40>)
 80177da:	4c0c      	ldr	r4, [pc, #48]	; (801780c <__libc_init_array+0x44>)
 80177dc:	f002 f816 	bl	801980c <_init>
 80177e0:	1b64      	subs	r4, r4, r5
 80177e2:	10a4      	asrs	r4, r4, #2
 80177e4:	2600      	movs	r6, #0
 80177e6:	42a6      	cmp	r6, r4
 80177e8:	d105      	bne.n	80177f6 <__libc_init_array+0x2e>
 80177ea:	bd70      	pop	{r4, r5, r6, pc}
 80177ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80177f0:	4798      	blx	r3
 80177f2:	3601      	adds	r6, #1
 80177f4:	e7ee      	b.n	80177d4 <__libc_init_array+0xc>
 80177f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80177fa:	4798      	blx	r3
 80177fc:	3601      	adds	r6, #1
 80177fe:	e7f2      	b.n	80177e6 <__libc_init_array+0x1e>
 8017800:	0801d8b8 	.word	0x0801d8b8
 8017804:	0801d8b8 	.word	0x0801d8b8
 8017808:	0801d8b8 	.word	0x0801d8b8
 801780c:	0801d8bc 	.word	0x0801d8bc

08017810 <__retarget_lock_init_recursive>:
 8017810:	4770      	bx	lr

08017812 <__retarget_lock_acquire_recursive>:
 8017812:	4770      	bx	lr

08017814 <__retarget_lock_release_recursive>:
 8017814:	4770      	bx	lr

08017816 <memcmp>:
 8017816:	b510      	push	{r4, lr}
 8017818:	3901      	subs	r1, #1
 801781a:	4402      	add	r2, r0
 801781c:	4290      	cmp	r0, r2
 801781e:	d101      	bne.n	8017824 <memcmp+0xe>
 8017820:	2000      	movs	r0, #0
 8017822:	e005      	b.n	8017830 <memcmp+0x1a>
 8017824:	7803      	ldrb	r3, [r0, #0]
 8017826:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801782a:	42a3      	cmp	r3, r4
 801782c:	d001      	beq.n	8017832 <memcmp+0x1c>
 801782e:	1b18      	subs	r0, r3, r4
 8017830:	bd10      	pop	{r4, pc}
 8017832:	3001      	adds	r0, #1
 8017834:	e7f2      	b.n	801781c <memcmp+0x6>

08017836 <memcpy>:
 8017836:	440a      	add	r2, r1
 8017838:	4291      	cmp	r1, r2
 801783a:	f100 33ff 	add.w	r3, r0, #4294967295
 801783e:	d100      	bne.n	8017842 <memcpy+0xc>
 8017840:	4770      	bx	lr
 8017842:	b510      	push	{r4, lr}
 8017844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017848:	f803 4f01 	strb.w	r4, [r3, #1]!
 801784c:	4291      	cmp	r1, r2
 801784e:	d1f9      	bne.n	8017844 <memcpy+0xe>
 8017850:	bd10      	pop	{r4, pc}

08017852 <memmove>:
 8017852:	4288      	cmp	r0, r1
 8017854:	b510      	push	{r4, lr}
 8017856:	eb01 0402 	add.w	r4, r1, r2
 801785a:	d902      	bls.n	8017862 <memmove+0x10>
 801785c:	4284      	cmp	r4, r0
 801785e:	4623      	mov	r3, r4
 8017860:	d807      	bhi.n	8017872 <memmove+0x20>
 8017862:	1e43      	subs	r3, r0, #1
 8017864:	42a1      	cmp	r1, r4
 8017866:	d008      	beq.n	801787a <memmove+0x28>
 8017868:	f811 2b01 	ldrb.w	r2, [r1], #1
 801786c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017870:	e7f8      	b.n	8017864 <memmove+0x12>
 8017872:	4402      	add	r2, r0
 8017874:	4601      	mov	r1, r0
 8017876:	428a      	cmp	r2, r1
 8017878:	d100      	bne.n	801787c <memmove+0x2a>
 801787a:	bd10      	pop	{r4, pc}
 801787c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017880:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017884:	e7f7      	b.n	8017876 <memmove+0x24>

08017886 <memset>:
 8017886:	4402      	add	r2, r0
 8017888:	4603      	mov	r3, r0
 801788a:	4293      	cmp	r3, r2
 801788c:	d100      	bne.n	8017890 <memset+0xa>
 801788e:	4770      	bx	lr
 8017890:	f803 1b01 	strb.w	r1, [r3], #1
 8017894:	e7f9      	b.n	801788a <memset+0x4>
	...

08017898 <sbrk_aligned>:
 8017898:	b570      	push	{r4, r5, r6, lr}
 801789a:	4e0e      	ldr	r6, [pc, #56]	; (80178d4 <sbrk_aligned+0x3c>)
 801789c:	460c      	mov	r4, r1
 801789e:	6831      	ldr	r1, [r6, #0]
 80178a0:	4605      	mov	r5, r0
 80178a2:	b911      	cbnz	r1, 80178aa <sbrk_aligned+0x12>
 80178a4:	f000 f94c 	bl	8017b40 <_sbrk_r>
 80178a8:	6030      	str	r0, [r6, #0]
 80178aa:	4621      	mov	r1, r4
 80178ac:	4628      	mov	r0, r5
 80178ae:	f000 f947 	bl	8017b40 <_sbrk_r>
 80178b2:	1c43      	adds	r3, r0, #1
 80178b4:	d00a      	beq.n	80178cc <sbrk_aligned+0x34>
 80178b6:	1cc4      	adds	r4, r0, #3
 80178b8:	f024 0403 	bic.w	r4, r4, #3
 80178bc:	42a0      	cmp	r0, r4
 80178be:	d007      	beq.n	80178d0 <sbrk_aligned+0x38>
 80178c0:	1a21      	subs	r1, r4, r0
 80178c2:	4628      	mov	r0, r5
 80178c4:	f000 f93c 	bl	8017b40 <_sbrk_r>
 80178c8:	3001      	adds	r0, #1
 80178ca:	d101      	bne.n	80178d0 <sbrk_aligned+0x38>
 80178cc:	f04f 34ff 	mov.w	r4, #4294967295
 80178d0:	4620      	mov	r0, r4
 80178d2:	bd70      	pop	{r4, r5, r6, pc}
 80178d4:	24010920 	.word	0x24010920

080178d8 <_malloc_r>:
 80178d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178dc:	1ccd      	adds	r5, r1, #3
 80178de:	f025 0503 	bic.w	r5, r5, #3
 80178e2:	3508      	adds	r5, #8
 80178e4:	2d0c      	cmp	r5, #12
 80178e6:	bf38      	it	cc
 80178e8:	250c      	movcc	r5, #12
 80178ea:	2d00      	cmp	r5, #0
 80178ec:	4607      	mov	r7, r0
 80178ee:	db01      	blt.n	80178f4 <_malloc_r+0x1c>
 80178f0:	42a9      	cmp	r1, r5
 80178f2:	d905      	bls.n	8017900 <_malloc_r+0x28>
 80178f4:	230c      	movs	r3, #12
 80178f6:	603b      	str	r3, [r7, #0]
 80178f8:	2600      	movs	r6, #0
 80178fa:	4630      	mov	r0, r6
 80178fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017900:	4e2e      	ldr	r6, [pc, #184]	; (80179bc <_malloc_r+0xe4>)
 8017902:	f000 fac7 	bl	8017e94 <__malloc_lock>
 8017906:	6833      	ldr	r3, [r6, #0]
 8017908:	461c      	mov	r4, r3
 801790a:	bb34      	cbnz	r4, 801795a <_malloc_r+0x82>
 801790c:	4629      	mov	r1, r5
 801790e:	4638      	mov	r0, r7
 8017910:	f7ff ffc2 	bl	8017898 <sbrk_aligned>
 8017914:	1c43      	adds	r3, r0, #1
 8017916:	4604      	mov	r4, r0
 8017918:	d14d      	bne.n	80179b6 <_malloc_r+0xde>
 801791a:	6834      	ldr	r4, [r6, #0]
 801791c:	4626      	mov	r6, r4
 801791e:	2e00      	cmp	r6, #0
 8017920:	d140      	bne.n	80179a4 <_malloc_r+0xcc>
 8017922:	6823      	ldr	r3, [r4, #0]
 8017924:	4631      	mov	r1, r6
 8017926:	4638      	mov	r0, r7
 8017928:	eb04 0803 	add.w	r8, r4, r3
 801792c:	f000 f908 	bl	8017b40 <_sbrk_r>
 8017930:	4580      	cmp	r8, r0
 8017932:	d13a      	bne.n	80179aa <_malloc_r+0xd2>
 8017934:	6821      	ldr	r1, [r4, #0]
 8017936:	3503      	adds	r5, #3
 8017938:	1a6d      	subs	r5, r5, r1
 801793a:	f025 0503 	bic.w	r5, r5, #3
 801793e:	3508      	adds	r5, #8
 8017940:	2d0c      	cmp	r5, #12
 8017942:	bf38      	it	cc
 8017944:	250c      	movcc	r5, #12
 8017946:	4629      	mov	r1, r5
 8017948:	4638      	mov	r0, r7
 801794a:	f7ff ffa5 	bl	8017898 <sbrk_aligned>
 801794e:	3001      	adds	r0, #1
 8017950:	d02b      	beq.n	80179aa <_malloc_r+0xd2>
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	442b      	add	r3, r5
 8017956:	6023      	str	r3, [r4, #0]
 8017958:	e00e      	b.n	8017978 <_malloc_r+0xa0>
 801795a:	6822      	ldr	r2, [r4, #0]
 801795c:	1b52      	subs	r2, r2, r5
 801795e:	d41e      	bmi.n	801799e <_malloc_r+0xc6>
 8017960:	2a0b      	cmp	r2, #11
 8017962:	d916      	bls.n	8017992 <_malloc_r+0xba>
 8017964:	1961      	adds	r1, r4, r5
 8017966:	42a3      	cmp	r3, r4
 8017968:	6025      	str	r5, [r4, #0]
 801796a:	bf18      	it	ne
 801796c:	6059      	strne	r1, [r3, #4]
 801796e:	6863      	ldr	r3, [r4, #4]
 8017970:	bf08      	it	eq
 8017972:	6031      	streq	r1, [r6, #0]
 8017974:	5162      	str	r2, [r4, r5]
 8017976:	604b      	str	r3, [r1, #4]
 8017978:	4638      	mov	r0, r7
 801797a:	f104 060b 	add.w	r6, r4, #11
 801797e:	f000 fa8f 	bl	8017ea0 <__malloc_unlock>
 8017982:	f026 0607 	bic.w	r6, r6, #7
 8017986:	1d23      	adds	r3, r4, #4
 8017988:	1af2      	subs	r2, r6, r3
 801798a:	d0b6      	beq.n	80178fa <_malloc_r+0x22>
 801798c:	1b9b      	subs	r3, r3, r6
 801798e:	50a3      	str	r3, [r4, r2]
 8017990:	e7b3      	b.n	80178fa <_malloc_r+0x22>
 8017992:	6862      	ldr	r2, [r4, #4]
 8017994:	42a3      	cmp	r3, r4
 8017996:	bf0c      	ite	eq
 8017998:	6032      	streq	r2, [r6, #0]
 801799a:	605a      	strne	r2, [r3, #4]
 801799c:	e7ec      	b.n	8017978 <_malloc_r+0xa0>
 801799e:	4623      	mov	r3, r4
 80179a0:	6864      	ldr	r4, [r4, #4]
 80179a2:	e7b2      	b.n	801790a <_malloc_r+0x32>
 80179a4:	4634      	mov	r4, r6
 80179a6:	6876      	ldr	r6, [r6, #4]
 80179a8:	e7b9      	b.n	801791e <_malloc_r+0x46>
 80179aa:	230c      	movs	r3, #12
 80179ac:	603b      	str	r3, [r7, #0]
 80179ae:	4638      	mov	r0, r7
 80179b0:	f000 fa76 	bl	8017ea0 <__malloc_unlock>
 80179b4:	e7a1      	b.n	80178fa <_malloc_r+0x22>
 80179b6:	6025      	str	r5, [r4, #0]
 80179b8:	e7de      	b.n	8017978 <_malloc_r+0xa0>
 80179ba:	bf00      	nop
 80179bc:	2401091c 	.word	0x2401091c

080179c0 <iprintf>:
 80179c0:	b40f      	push	{r0, r1, r2, r3}
 80179c2:	4b0a      	ldr	r3, [pc, #40]	; (80179ec <iprintf+0x2c>)
 80179c4:	b513      	push	{r0, r1, r4, lr}
 80179c6:	681c      	ldr	r4, [r3, #0]
 80179c8:	b124      	cbz	r4, 80179d4 <iprintf+0x14>
 80179ca:	69a3      	ldr	r3, [r4, #24]
 80179cc:	b913      	cbnz	r3, 80179d4 <iprintf+0x14>
 80179ce:	4620      	mov	r0, r4
 80179d0:	f7ff fe5c 	bl	801768c <__sinit>
 80179d4:	ab05      	add	r3, sp, #20
 80179d6:	9a04      	ldr	r2, [sp, #16]
 80179d8:	68a1      	ldr	r1, [r4, #8]
 80179da:	9301      	str	r3, [sp, #4]
 80179dc:	4620      	mov	r0, r4
 80179de:	f000 fc37 	bl	8018250 <_vfiprintf_r>
 80179e2:	b002      	add	sp, #8
 80179e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179e8:	b004      	add	sp, #16
 80179ea:	4770      	bx	lr
 80179ec:	24000048 	.word	0x24000048

080179f0 <rand>:
 80179f0:	4b16      	ldr	r3, [pc, #88]	; (8017a4c <rand+0x5c>)
 80179f2:	b510      	push	{r4, lr}
 80179f4:	681c      	ldr	r4, [r3, #0]
 80179f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80179f8:	b9b3      	cbnz	r3, 8017a28 <rand+0x38>
 80179fa:	2018      	movs	r0, #24
 80179fc:	f000 fa42 	bl	8017e84 <malloc>
 8017a00:	63a0      	str	r0, [r4, #56]	; 0x38
 8017a02:	b928      	cbnz	r0, 8017a10 <rand+0x20>
 8017a04:	4602      	mov	r2, r0
 8017a06:	4b12      	ldr	r3, [pc, #72]	; (8017a50 <rand+0x60>)
 8017a08:	4812      	ldr	r0, [pc, #72]	; (8017a54 <rand+0x64>)
 8017a0a:	214e      	movs	r1, #78	; 0x4e
 8017a0c:	f000 f926 	bl	8017c5c <__assert_func>
 8017a10:	4a11      	ldr	r2, [pc, #68]	; (8017a58 <rand+0x68>)
 8017a12:	4b12      	ldr	r3, [pc, #72]	; (8017a5c <rand+0x6c>)
 8017a14:	e9c0 2300 	strd	r2, r3, [r0]
 8017a18:	4b11      	ldr	r3, [pc, #68]	; (8017a60 <rand+0x70>)
 8017a1a:	6083      	str	r3, [r0, #8]
 8017a1c:	230b      	movs	r3, #11
 8017a1e:	8183      	strh	r3, [r0, #12]
 8017a20:	2201      	movs	r2, #1
 8017a22:	2300      	movs	r3, #0
 8017a24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017a28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017a2a:	4a0e      	ldr	r2, [pc, #56]	; (8017a64 <rand+0x74>)
 8017a2c:	6920      	ldr	r0, [r4, #16]
 8017a2e:	6963      	ldr	r3, [r4, #20]
 8017a30:	490d      	ldr	r1, [pc, #52]	; (8017a68 <rand+0x78>)
 8017a32:	4342      	muls	r2, r0
 8017a34:	fb01 2203 	mla	r2, r1, r3, r2
 8017a38:	fba0 0101 	umull	r0, r1, r0, r1
 8017a3c:	1c43      	adds	r3, r0, #1
 8017a3e:	eb42 0001 	adc.w	r0, r2, r1
 8017a42:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017a46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017a4a:	bd10      	pop	{r4, pc}
 8017a4c:	24000048 	.word	0x24000048
 8017a50:	0801d5fc 	.word	0x0801d5fc
 8017a54:	0801d613 	.word	0x0801d613
 8017a58:	abcd330e 	.word	0xabcd330e
 8017a5c:	e66d1234 	.word	0xe66d1234
 8017a60:	0005deec 	.word	0x0005deec
 8017a64:	5851f42d 	.word	0x5851f42d
 8017a68:	4c957f2d 	.word	0x4c957f2d

08017a6c <cleanup_glue>:
 8017a6c:	b538      	push	{r3, r4, r5, lr}
 8017a6e:	460c      	mov	r4, r1
 8017a70:	6809      	ldr	r1, [r1, #0]
 8017a72:	4605      	mov	r5, r0
 8017a74:	b109      	cbz	r1, 8017a7a <cleanup_glue+0xe>
 8017a76:	f7ff fff9 	bl	8017a6c <cleanup_glue>
 8017a7a:	4621      	mov	r1, r4
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a82:	f000 ba13 	b.w	8017eac <_free_r>
	...

08017a88 <_reclaim_reent>:
 8017a88:	4b2c      	ldr	r3, [pc, #176]	; (8017b3c <_reclaim_reent+0xb4>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	4283      	cmp	r3, r0
 8017a8e:	b570      	push	{r4, r5, r6, lr}
 8017a90:	4604      	mov	r4, r0
 8017a92:	d051      	beq.n	8017b38 <_reclaim_reent+0xb0>
 8017a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017a96:	b143      	cbz	r3, 8017aaa <_reclaim_reent+0x22>
 8017a98:	68db      	ldr	r3, [r3, #12]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d14a      	bne.n	8017b34 <_reclaim_reent+0xac>
 8017a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017aa0:	6819      	ldr	r1, [r3, #0]
 8017aa2:	b111      	cbz	r1, 8017aaa <_reclaim_reent+0x22>
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	f000 fa01 	bl	8017eac <_free_r>
 8017aaa:	6961      	ldr	r1, [r4, #20]
 8017aac:	b111      	cbz	r1, 8017ab4 <_reclaim_reent+0x2c>
 8017aae:	4620      	mov	r0, r4
 8017ab0:	f000 f9fc 	bl	8017eac <_free_r>
 8017ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017ab6:	b111      	cbz	r1, 8017abe <_reclaim_reent+0x36>
 8017ab8:	4620      	mov	r0, r4
 8017aba:	f000 f9f7 	bl	8017eac <_free_r>
 8017abe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017ac0:	b111      	cbz	r1, 8017ac8 <_reclaim_reent+0x40>
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f000 f9f2 	bl	8017eac <_free_r>
 8017ac8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017aca:	b111      	cbz	r1, 8017ad2 <_reclaim_reent+0x4a>
 8017acc:	4620      	mov	r0, r4
 8017ace:	f000 f9ed 	bl	8017eac <_free_r>
 8017ad2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017ad4:	b111      	cbz	r1, 8017adc <_reclaim_reent+0x54>
 8017ad6:	4620      	mov	r0, r4
 8017ad8:	f000 f9e8 	bl	8017eac <_free_r>
 8017adc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017ade:	b111      	cbz	r1, 8017ae6 <_reclaim_reent+0x5e>
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f000 f9e3 	bl	8017eac <_free_r>
 8017ae6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017ae8:	b111      	cbz	r1, 8017af0 <_reclaim_reent+0x68>
 8017aea:	4620      	mov	r0, r4
 8017aec:	f000 f9de 	bl	8017eac <_free_r>
 8017af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017af2:	b111      	cbz	r1, 8017afa <_reclaim_reent+0x72>
 8017af4:	4620      	mov	r0, r4
 8017af6:	f000 f9d9 	bl	8017eac <_free_r>
 8017afa:	69a3      	ldr	r3, [r4, #24]
 8017afc:	b1e3      	cbz	r3, 8017b38 <_reclaim_reent+0xb0>
 8017afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017b00:	4620      	mov	r0, r4
 8017b02:	4798      	blx	r3
 8017b04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017b06:	b1b9      	cbz	r1, 8017b38 <_reclaim_reent+0xb0>
 8017b08:	4620      	mov	r0, r4
 8017b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b0e:	f7ff bfad 	b.w	8017a6c <cleanup_glue>
 8017b12:	5949      	ldr	r1, [r1, r5]
 8017b14:	b941      	cbnz	r1, 8017b28 <_reclaim_reent+0xa0>
 8017b16:	3504      	adds	r5, #4
 8017b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b1a:	2d80      	cmp	r5, #128	; 0x80
 8017b1c:	68d9      	ldr	r1, [r3, #12]
 8017b1e:	d1f8      	bne.n	8017b12 <_reclaim_reent+0x8a>
 8017b20:	4620      	mov	r0, r4
 8017b22:	f000 f9c3 	bl	8017eac <_free_r>
 8017b26:	e7ba      	b.n	8017a9e <_reclaim_reent+0x16>
 8017b28:	680e      	ldr	r6, [r1, #0]
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 f9be 	bl	8017eac <_free_r>
 8017b30:	4631      	mov	r1, r6
 8017b32:	e7ef      	b.n	8017b14 <_reclaim_reent+0x8c>
 8017b34:	2500      	movs	r5, #0
 8017b36:	e7ef      	b.n	8017b18 <_reclaim_reent+0x90>
 8017b38:	bd70      	pop	{r4, r5, r6, pc}
 8017b3a:	bf00      	nop
 8017b3c:	24000048 	.word	0x24000048

08017b40 <_sbrk_r>:
 8017b40:	b538      	push	{r3, r4, r5, lr}
 8017b42:	4d06      	ldr	r5, [pc, #24]	; (8017b5c <_sbrk_r+0x1c>)
 8017b44:	2300      	movs	r3, #0
 8017b46:	4604      	mov	r4, r0
 8017b48:	4608      	mov	r0, r1
 8017b4a:	602b      	str	r3, [r5, #0]
 8017b4c:	f7e9 f9e8 	bl	8000f20 <_sbrk>
 8017b50:	1c43      	adds	r3, r0, #1
 8017b52:	d102      	bne.n	8017b5a <_sbrk_r+0x1a>
 8017b54:	682b      	ldr	r3, [r5, #0]
 8017b56:	b103      	cbz	r3, 8017b5a <_sbrk_r+0x1a>
 8017b58:	6023      	str	r3, [r4, #0]
 8017b5a:	bd38      	pop	{r3, r4, r5, pc}
 8017b5c:	24010924 	.word	0x24010924

08017b60 <siprintf>:
 8017b60:	b40e      	push	{r1, r2, r3}
 8017b62:	b500      	push	{lr}
 8017b64:	b09c      	sub	sp, #112	; 0x70
 8017b66:	ab1d      	add	r3, sp, #116	; 0x74
 8017b68:	9002      	str	r0, [sp, #8]
 8017b6a:	9006      	str	r0, [sp, #24]
 8017b6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017b70:	4809      	ldr	r0, [pc, #36]	; (8017b98 <siprintf+0x38>)
 8017b72:	9107      	str	r1, [sp, #28]
 8017b74:	9104      	str	r1, [sp, #16]
 8017b76:	4909      	ldr	r1, [pc, #36]	; (8017b9c <siprintf+0x3c>)
 8017b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b7c:	9105      	str	r1, [sp, #20]
 8017b7e:	6800      	ldr	r0, [r0, #0]
 8017b80:	9301      	str	r3, [sp, #4]
 8017b82:	a902      	add	r1, sp, #8
 8017b84:	f000 fa3a 	bl	8017ffc <_svfiprintf_r>
 8017b88:	9b02      	ldr	r3, [sp, #8]
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	701a      	strb	r2, [r3, #0]
 8017b8e:	b01c      	add	sp, #112	; 0x70
 8017b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b94:	b003      	add	sp, #12
 8017b96:	4770      	bx	lr
 8017b98:	24000048 	.word	0x24000048
 8017b9c:	ffff0208 	.word	0xffff0208

08017ba0 <__sread>:
 8017ba0:	b510      	push	{r4, lr}
 8017ba2:	460c      	mov	r4, r1
 8017ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ba8:	f000 fe16 	bl	80187d8 <_read_r>
 8017bac:	2800      	cmp	r0, #0
 8017bae:	bfab      	itete	ge
 8017bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8017bb4:	181b      	addge	r3, r3, r0
 8017bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017bba:	bfac      	ite	ge
 8017bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8017bbe:	81a3      	strhlt	r3, [r4, #12]
 8017bc0:	bd10      	pop	{r4, pc}

08017bc2 <__swrite>:
 8017bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bc6:	461f      	mov	r7, r3
 8017bc8:	898b      	ldrh	r3, [r1, #12]
 8017bca:	05db      	lsls	r3, r3, #23
 8017bcc:	4605      	mov	r5, r0
 8017bce:	460c      	mov	r4, r1
 8017bd0:	4616      	mov	r6, r2
 8017bd2:	d505      	bpl.n	8017be0 <__swrite+0x1e>
 8017bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bd8:	2302      	movs	r3, #2
 8017bda:	2200      	movs	r2, #0
 8017bdc:	f000 f940 	bl	8017e60 <_lseek_r>
 8017be0:	89a3      	ldrh	r3, [r4, #12]
 8017be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017bea:	81a3      	strh	r3, [r4, #12]
 8017bec:	4632      	mov	r2, r6
 8017bee:	463b      	mov	r3, r7
 8017bf0:	4628      	mov	r0, r5
 8017bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf6:	f000 b81f 	b.w	8017c38 <_write_r>

08017bfa <__sseek>:
 8017bfa:	b510      	push	{r4, lr}
 8017bfc:	460c      	mov	r4, r1
 8017bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c02:	f000 f92d 	bl	8017e60 <_lseek_r>
 8017c06:	1c43      	adds	r3, r0, #1
 8017c08:	89a3      	ldrh	r3, [r4, #12]
 8017c0a:	bf15      	itete	ne
 8017c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c16:	81a3      	strheq	r3, [r4, #12]
 8017c18:	bf18      	it	ne
 8017c1a:	81a3      	strhne	r3, [r4, #12]
 8017c1c:	bd10      	pop	{r4, pc}

08017c1e <__sclose>:
 8017c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c22:	f000 b839 	b.w	8017c98 <_close_r>

08017c26 <strcpy>:
 8017c26:	4603      	mov	r3, r0
 8017c28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c2c:	f803 2b01 	strb.w	r2, [r3], #1
 8017c30:	2a00      	cmp	r2, #0
 8017c32:	d1f9      	bne.n	8017c28 <strcpy+0x2>
 8017c34:	4770      	bx	lr
	...

08017c38 <_write_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4d07      	ldr	r5, [pc, #28]	; (8017c58 <_write_r+0x20>)
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	4608      	mov	r0, r1
 8017c40:	4611      	mov	r1, r2
 8017c42:	2200      	movs	r2, #0
 8017c44:	602a      	str	r2, [r5, #0]
 8017c46:	461a      	mov	r2, r3
 8017c48:	f7e9 f919 	bl	8000e7e <_write>
 8017c4c:	1c43      	adds	r3, r0, #1
 8017c4e:	d102      	bne.n	8017c56 <_write_r+0x1e>
 8017c50:	682b      	ldr	r3, [r5, #0]
 8017c52:	b103      	cbz	r3, 8017c56 <_write_r+0x1e>
 8017c54:	6023      	str	r3, [r4, #0]
 8017c56:	bd38      	pop	{r3, r4, r5, pc}
 8017c58:	24010924 	.word	0x24010924

08017c5c <__assert_func>:
 8017c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c5e:	4614      	mov	r4, r2
 8017c60:	461a      	mov	r2, r3
 8017c62:	4b09      	ldr	r3, [pc, #36]	; (8017c88 <__assert_func+0x2c>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4605      	mov	r5, r0
 8017c68:	68d8      	ldr	r0, [r3, #12]
 8017c6a:	b14c      	cbz	r4, 8017c80 <__assert_func+0x24>
 8017c6c:	4b07      	ldr	r3, [pc, #28]	; (8017c8c <__assert_func+0x30>)
 8017c6e:	9100      	str	r1, [sp, #0]
 8017c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c74:	4906      	ldr	r1, [pc, #24]	; (8017c90 <__assert_func+0x34>)
 8017c76:	462b      	mov	r3, r5
 8017c78:	f000 f8e0 	bl	8017e3c <fiprintf>
 8017c7c:	f000 fe7e 	bl	801897c <abort>
 8017c80:	4b04      	ldr	r3, [pc, #16]	; (8017c94 <__assert_func+0x38>)
 8017c82:	461c      	mov	r4, r3
 8017c84:	e7f3      	b.n	8017c6e <__assert_func+0x12>
 8017c86:	bf00      	nop
 8017c88:	24000048 	.word	0x24000048
 8017c8c:	0801d66e 	.word	0x0801d66e
 8017c90:	0801d67b 	.word	0x0801d67b
 8017c94:	0801d6a9 	.word	0x0801d6a9

08017c98 <_close_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	4d06      	ldr	r5, [pc, #24]	; (8017cb4 <_close_r+0x1c>)
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	4608      	mov	r0, r1
 8017ca2:	602b      	str	r3, [r5, #0]
 8017ca4:	f7e9 f907 	bl	8000eb6 <_close>
 8017ca8:	1c43      	adds	r3, r0, #1
 8017caa:	d102      	bne.n	8017cb2 <_close_r+0x1a>
 8017cac:	682b      	ldr	r3, [r5, #0]
 8017cae:	b103      	cbz	r3, 8017cb2 <_close_r+0x1a>
 8017cb0:	6023      	str	r3, [r4, #0]
 8017cb2:	bd38      	pop	{r3, r4, r5, pc}
 8017cb4:	24010924 	.word	0x24010924

08017cb8 <__sflush_r>:
 8017cb8:	898a      	ldrh	r2, [r1, #12]
 8017cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cbe:	4605      	mov	r5, r0
 8017cc0:	0710      	lsls	r0, r2, #28
 8017cc2:	460c      	mov	r4, r1
 8017cc4:	d458      	bmi.n	8017d78 <__sflush_r+0xc0>
 8017cc6:	684b      	ldr	r3, [r1, #4]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	dc05      	bgt.n	8017cd8 <__sflush_r+0x20>
 8017ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	dc02      	bgt.n	8017cd8 <__sflush_r+0x20>
 8017cd2:	2000      	movs	r0, #0
 8017cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017cda:	2e00      	cmp	r6, #0
 8017cdc:	d0f9      	beq.n	8017cd2 <__sflush_r+0x1a>
 8017cde:	2300      	movs	r3, #0
 8017ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ce4:	682f      	ldr	r7, [r5, #0]
 8017ce6:	602b      	str	r3, [r5, #0]
 8017ce8:	d032      	beq.n	8017d50 <__sflush_r+0x98>
 8017cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017cec:	89a3      	ldrh	r3, [r4, #12]
 8017cee:	075a      	lsls	r2, r3, #29
 8017cf0:	d505      	bpl.n	8017cfe <__sflush_r+0x46>
 8017cf2:	6863      	ldr	r3, [r4, #4]
 8017cf4:	1ac0      	subs	r0, r0, r3
 8017cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017cf8:	b10b      	cbz	r3, 8017cfe <__sflush_r+0x46>
 8017cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017cfc:	1ac0      	subs	r0, r0, r3
 8017cfe:	2300      	movs	r3, #0
 8017d00:	4602      	mov	r2, r0
 8017d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d04:	6a21      	ldr	r1, [r4, #32]
 8017d06:	4628      	mov	r0, r5
 8017d08:	47b0      	blx	r6
 8017d0a:	1c43      	adds	r3, r0, #1
 8017d0c:	89a3      	ldrh	r3, [r4, #12]
 8017d0e:	d106      	bne.n	8017d1e <__sflush_r+0x66>
 8017d10:	6829      	ldr	r1, [r5, #0]
 8017d12:	291d      	cmp	r1, #29
 8017d14:	d82c      	bhi.n	8017d70 <__sflush_r+0xb8>
 8017d16:	4a2a      	ldr	r2, [pc, #168]	; (8017dc0 <__sflush_r+0x108>)
 8017d18:	40ca      	lsrs	r2, r1
 8017d1a:	07d6      	lsls	r6, r2, #31
 8017d1c:	d528      	bpl.n	8017d70 <__sflush_r+0xb8>
 8017d1e:	2200      	movs	r2, #0
 8017d20:	6062      	str	r2, [r4, #4]
 8017d22:	04d9      	lsls	r1, r3, #19
 8017d24:	6922      	ldr	r2, [r4, #16]
 8017d26:	6022      	str	r2, [r4, #0]
 8017d28:	d504      	bpl.n	8017d34 <__sflush_r+0x7c>
 8017d2a:	1c42      	adds	r2, r0, #1
 8017d2c:	d101      	bne.n	8017d32 <__sflush_r+0x7a>
 8017d2e:	682b      	ldr	r3, [r5, #0]
 8017d30:	b903      	cbnz	r3, 8017d34 <__sflush_r+0x7c>
 8017d32:	6560      	str	r0, [r4, #84]	; 0x54
 8017d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d36:	602f      	str	r7, [r5, #0]
 8017d38:	2900      	cmp	r1, #0
 8017d3a:	d0ca      	beq.n	8017cd2 <__sflush_r+0x1a>
 8017d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d40:	4299      	cmp	r1, r3
 8017d42:	d002      	beq.n	8017d4a <__sflush_r+0x92>
 8017d44:	4628      	mov	r0, r5
 8017d46:	f000 f8b1 	bl	8017eac <_free_r>
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8017d4e:	e7c1      	b.n	8017cd4 <__sflush_r+0x1c>
 8017d50:	6a21      	ldr	r1, [r4, #32]
 8017d52:	2301      	movs	r3, #1
 8017d54:	4628      	mov	r0, r5
 8017d56:	47b0      	blx	r6
 8017d58:	1c41      	adds	r1, r0, #1
 8017d5a:	d1c7      	bne.n	8017cec <__sflush_r+0x34>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d0c4      	beq.n	8017cec <__sflush_r+0x34>
 8017d62:	2b1d      	cmp	r3, #29
 8017d64:	d001      	beq.n	8017d6a <__sflush_r+0xb2>
 8017d66:	2b16      	cmp	r3, #22
 8017d68:	d101      	bne.n	8017d6e <__sflush_r+0xb6>
 8017d6a:	602f      	str	r7, [r5, #0]
 8017d6c:	e7b1      	b.n	8017cd2 <__sflush_r+0x1a>
 8017d6e:	89a3      	ldrh	r3, [r4, #12]
 8017d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d74:	81a3      	strh	r3, [r4, #12]
 8017d76:	e7ad      	b.n	8017cd4 <__sflush_r+0x1c>
 8017d78:	690f      	ldr	r7, [r1, #16]
 8017d7a:	2f00      	cmp	r7, #0
 8017d7c:	d0a9      	beq.n	8017cd2 <__sflush_r+0x1a>
 8017d7e:	0793      	lsls	r3, r2, #30
 8017d80:	680e      	ldr	r6, [r1, #0]
 8017d82:	bf08      	it	eq
 8017d84:	694b      	ldreq	r3, [r1, #20]
 8017d86:	600f      	str	r7, [r1, #0]
 8017d88:	bf18      	it	ne
 8017d8a:	2300      	movne	r3, #0
 8017d8c:	eba6 0807 	sub.w	r8, r6, r7
 8017d90:	608b      	str	r3, [r1, #8]
 8017d92:	f1b8 0f00 	cmp.w	r8, #0
 8017d96:	dd9c      	ble.n	8017cd2 <__sflush_r+0x1a>
 8017d98:	6a21      	ldr	r1, [r4, #32]
 8017d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017d9c:	4643      	mov	r3, r8
 8017d9e:	463a      	mov	r2, r7
 8017da0:	4628      	mov	r0, r5
 8017da2:	47b0      	blx	r6
 8017da4:	2800      	cmp	r0, #0
 8017da6:	dc06      	bgt.n	8017db6 <__sflush_r+0xfe>
 8017da8:	89a3      	ldrh	r3, [r4, #12]
 8017daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dae:	81a3      	strh	r3, [r4, #12]
 8017db0:	f04f 30ff 	mov.w	r0, #4294967295
 8017db4:	e78e      	b.n	8017cd4 <__sflush_r+0x1c>
 8017db6:	4407      	add	r7, r0
 8017db8:	eba8 0800 	sub.w	r8, r8, r0
 8017dbc:	e7e9      	b.n	8017d92 <__sflush_r+0xda>
 8017dbe:	bf00      	nop
 8017dc0:	20400001 	.word	0x20400001

08017dc4 <_fflush_r>:
 8017dc4:	b538      	push	{r3, r4, r5, lr}
 8017dc6:	690b      	ldr	r3, [r1, #16]
 8017dc8:	4605      	mov	r5, r0
 8017dca:	460c      	mov	r4, r1
 8017dcc:	b913      	cbnz	r3, 8017dd4 <_fflush_r+0x10>
 8017dce:	2500      	movs	r5, #0
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	bd38      	pop	{r3, r4, r5, pc}
 8017dd4:	b118      	cbz	r0, 8017dde <_fflush_r+0x1a>
 8017dd6:	6983      	ldr	r3, [r0, #24]
 8017dd8:	b90b      	cbnz	r3, 8017dde <_fflush_r+0x1a>
 8017dda:	f7ff fc57 	bl	801768c <__sinit>
 8017dde:	4b14      	ldr	r3, [pc, #80]	; (8017e30 <_fflush_r+0x6c>)
 8017de0:	429c      	cmp	r4, r3
 8017de2:	d11b      	bne.n	8017e1c <_fflush_r+0x58>
 8017de4:	686c      	ldr	r4, [r5, #4]
 8017de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d0ef      	beq.n	8017dce <_fflush_r+0xa>
 8017dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017df0:	07d0      	lsls	r0, r2, #31
 8017df2:	d404      	bmi.n	8017dfe <_fflush_r+0x3a>
 8017df4:	0599      	lsls	r1, r3, #22
 8017df6:	d402      	bmi.n	8017dfe <_fflush_r+0x3a>
 8017df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017dfa:	f7ff fd0a 	bl	8017812 <__retarget_lock_acquire_recursive>
 8017dfe:	4628      	mov	r0, r5
 8017e00:	4621      	mov	r1, r4
 8017e02:	f7ff ff59 	bl	8017cb8 <__sflush_r>
 8017e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e08:	07da      	lsls	r2, r3, #31
 8017e0a:	4605      	mov	r5, r0
 8017e0c:	d4e0      	bmi.n	8017dd0 <_fflush_r+0xc>
 8017e0e:	89a3      	ldrh	r3, [r4, #12]
 8017e10:	059b      	lsls	r3, r3, #22
 8017e12:	d4dd      	bmi.n	8017dd0 <_fflush_r+0xc>
 8017e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e16:	f7ff fcfd 	bl	8017814 <__retarget_lock_release_recursive>
 8017e1a:	e7d9      	b.n	8017dd0 <_fflush_r+0xc>
 8017e1c:	4b05      	ldr	r3, [pc, #20]	; (8017e34 <_fflush_r+0x70>)
 8017e1e:	429c      	cmp	r4, r3
 8017e20:	d101      	bne.n	8017e26 <_fflush_r+0x62>
 8017e22:	68ac      	ldr	r4, [r5, #8]
 8017e24:	e7df      	b.n	8017de6 <_fflush_r+0x22>
 8017e26:	4b04      	ldr	r3, [pc, #16]	; (8017e38 <_fflush_r+0x74>)
 8017e28:	429c      	cmp	r4, r3
 8017e2a:	bf08      	it	eq
 8017e2c:	68ec      	ldreq	r4, [r5, #12]
 8017e2e:	e7da      	b.n	8017de6 <_fflush_r+0x22>
 8017e30:	0801d5b8 	.word	0x0801d5b8
 8017e34:	0801d5d8 	.word	0x0801d5d8
 8017e38:	0801d598 	.word	0x0801d598

08017e3c <fiprintf>:
 8017e3c:	b40e      	push	{r1, r2, r3}
 8017e3e:	b503      	push	{r0, r1, lr}
 8017e40:	4601      	mov	r1, r0
 8017e42:	ab03      	add	r3, sp, #12
 8017e44:	4805      	ldr	r0, [pc, #20]	; (8017e5c <fiprintf+0x20>)
 8017e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e4a:	6800      	ldr	r0, [r0, #0]
 8017e4c:	9301      	str	r3, [sp, #4]
 8017e4e:	f000 f9ff 	bl	8018250 <_vfiprintf_r>
 8017e52:	b002      	add	sp, #8
 8017e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e58:	b003      	add	sp, #12
 8017e5a:	4770      	bx	lr
 8017e5c:	24000048 	.word	0x24000048

08017e60 <_lseek_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4d07      	ldr	r5, [pc, #28]	; (8017e80 <_lseek_r+0x20>)
 8017e64:	4604      	mov	r4, r0
 8017e66:	4608      	mov	r0, r1
 8017e68:	4611      	mov	r1, r2
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	602a      	str	r2, [r5, #0]
 8017e6e:	461a      	mov	r2, r3
 8017e70:	f7e9 f848 	bl	8000f04 <_lseek>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_lseek_r+0x1e>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_lseek_r+0x1e>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	24010924 	.word	0x24010924

08017e84 <malloc>:
 8017e84:	4b02      	ldr	r3, [pc, #8]	; (8017e90 <malloc+0xc>)
 8017e86:	4601      	mov	r1, r0
 8017e88:	6818      	ldr	r0, [r3, #0]
 8017e8a:	f7ff bd25 	b.w	80178d8 <_malloc_r>
 8017e8e:	bf00      	nop
 8017e90:	24000048 	.word	0x24000048

08017e94 <__malloc_lock>:
 8017e94:	4801      	ldr	r0, [pc, #4]	; (8017e9c <__malloc_lock+0x8>)
 8017e96:	f7ff bcbc 	b.w	8017812 <__retarget_lock_acquire_recursive>
 8017e9a:	bf00      	nop
 8017e9c:	24010918 	.word	0x24010918

08017ea0 <__malloc_unlock>:
 8017ea0:	4801      	ldr	r0, [pc, #4]	; (8017ea8 <__malloc_unlock+0x8>)
 8017ea2:	f7ff bcb7 	b.w	8017814 <__retarget_lock_release_recursive>
 8017ea6:	bf00      	nop
 8017ea8:	24010918 	.word	0x24010918

08017eac <_free_r>:
 8017eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017eae:	2900      	cmp	r1, #0
 8017eb0:	d044      	beq.n	8017f3c <_free_r+0x90>
 8017eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017eb6:	9001      	str	r0, [sp, #4]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	f1a1 0404 	sub.w	r4, r1, #4
 8017ebe:	bfb8      	it	lt
 8017ec0:	18e4      	addlt	r4, r4, r3
 8017ec2:	f7ff ffe7 	bl	8017e94 <__malloc_lock>
 8017ec6:	4a1e      	ldr	r2, [pc, #120]	; (8017f40 <_free_r+0x94>)
 8017ec8:	9801      	ldr	r0, [sp, #4]
 8017eca:	6813      	ldr	r3, [r2, #0]
 8017ecc:	b933      	cbnz	r3, 8017edc <_free_r+0x30>
 8017ece:	6063      	str	r3, [r4, #4]
 8017ed0:	6014      	str	r4, [r2, #0]
 8017ed2:	b003      	add	sp, #12
 8017ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ed8:	f7ff bfe2 	b.w	8017ea0 <__malloc_unlock>
 8017edc:	42a3      	cmp	r3, r4
 8017ede:	d908      	bls.n	8017ef2 <_free_r+0x46>
 8017ee0:	6825      	ldr	r5, [r4, #0]
 8017ee2:	1961      	adds	r1, r4, r5
 8017ee4:	428b      	cmp	r3, r1
 8017ee6:	bf01      	itttt	eq
 8017ee8:	6819      	ldreq	r1, [r3, #0]
 8017eea:	685b      	ldreq	r3, [r3, #4]
 8017eec:	1949      	addeq	r1, r1, r5
 8017eee:	6021      	streq	r1, [r4, #0]
 8017ef0:	e7ed      	b.n	8017ece <_free_r+0x22>
 8017ef2:	461a      	mov	r2, r3
 8017ef4:	685b      	ldr	r3, [r3, #4]
 8017ef6:	b10b      	cbz	r3, 8017efc <_free_r+0x50>
 8017ef8:	42a3      	cmp	r3, r4
 8017efa:	d9fa      	bls.n	8017ef2 <_free_r+0x46>
 8017efc:	6811      	ldr	r1, [r2, #0]
 8017efe:	1855      	adds	r5, r2, r1
 8017f00:	42a5      	cmp	r5, r4
 8017f02:	d10b      	bne.n	8017f1c <_free_r+0x70>
 8017f04:	6824      	ldr	r4, [r4, #0]
 8017f06:	4421      	add	r1, r4
 8017f08:	1854      	adds	r4, r2, r1
 8017f0a:	42a3      	cmp	r3, r4
 8017f0c:	6011      	str	r1, [r2, #0]
 8017f0e:	d1e0      	bne.n	8017ed2 <_free_r+0x26>
 8017f10:	681c      	ldr	r4, [r3, #0]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	6053      	str	r3, [r2, #4]
 8017f16:	4421      	add	r1, r4
 8017f18:	6011      	str	r1, [r2, #0]
 8017f1a:	e7da      	b.n	8017ed2 <_free_r+0x26>
 8017f1c:	d902      	bls.n	8017f24 <_free_r+0x78>
 8017f1e:	230c      	movs	r3, #12
 8017f20:	6003      	str	r3, [r0, #0]
 8017f22:	e7d6      	b.n	8017ed2 <_free_r+0x26>
 8017f24:	6825      	ldr	r5, [r4, #0]
 8017f26:	1961      	adds	r1, r4, r5
 8017f28:	428b      	cmp	r3, r1
 8017f2a:	bf04      	itt	eq
 8017f2c:	6819      	ldreq	r1, [r3, #0]
 8017f2e:	685b      	ldreq	r3, [r3, #4]
 8017f30:	6063      	str	r3, [r4, #4]
 8017f32:	bf04      	itt	eq
 8017f34:	1949      	addeq	r1, r1, r5
 8017f36:	6021      	streq	r1, [r4, #0]
 8017f38:	6054      	str	r4, [r2, #4]
 8017f3a:	e7ca      	b.n	8017ed2 <_free_r+0x26>
 8017f3c:	b003      	add	sp, #12
 8017f3e:	bd30      	pop	{r4, r5, pc}
 8017f40:	2401091c 	.word	0x2401091c

08017f44 <__ssputs_r>:
 8017f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f48:	688e      	ldr	r6, [r1, #8]
 8017f4a:	429e      	cmp	r6, r3
 8017f4c:	4682      	mov	sl, r0
 8017f4e:	460c      	mov	r4, r1
 8017f50:	4690      	mov	r8, r2
 8017f52:	461f      	mov	r7, r3
 8017f54:	d838      	bhi.n	8017fc8 <__ssputs_r+0x84>
 8017f56:	898a      	ldrh	r2, [r1, #12]
 8017f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f5c:	d032      	beq.n	8017fc4 <__ssputs_r+0x80>
 8017f5e:	6825      	ldr	r5, [r4, #0]
 8017f60:	6909      	ldr	r1, [r1, #16]
 8017f62:	eba5 0901 	sub.w	r9, r5, r1
 8017f66:	6965      	ldr	r5, [r4, #20]
 8017f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017f70:	3301      	adds	r3, #1
 8017f72:	444b      	add	r3, r9
 8017f74:	106d      	asrs	r5, r5, #1
 8017f76:	429d      	cmp	r5, r3
 8017f78:	bf38      	it	cc
 8017f7a:	461d      	movcc	r5, r3
 8017f7c:	0553      	lsls	r3, r2, #21
 8017f7e:	d531      	bpl.n	8017fe4 <__ssputs_r+0xa0>
 8017f80:	4629      	mov	r1, r5
 8017f82:	f7ff fca9 	bl	80178d8 <_malloc_r>
 8017f86:	4606      	mov	r6, r0
 8017f88:	b950      	cbnz	r0, 8017fa0 <__ssputs_r+0x5c>
 8017f8a:	230c      	movs	r3, #12
 8017f8c:	f8ca 3000 	str.w	r3, [sl]
 8017f90:	89a3      	ldrh	r3, [r4, #12]
 8017f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f96:	81a3      	strh	r3, [r4, #12]
 8017f98:	f04f 30ff 	mov.w	r0, #4294967295
 8017f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fa0:	6921      	ldr	r1, [r4, #16]
 8017fa2:	464a      	mov	r2, r9
 8017fa4:	f7ff fc47 	bl	8017836 <memcpy>
 8017fa8:	89a3      	ldrh	r3, [r4, #12]
 8017faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fb2:	81a3      	strh	r3, [r4, #12]
 8017fb4:	6126      	str	r6, [r4, #16]
 8017fb6:	6165      	str	r5, [r4, #20]
 8017fb8:	444e      	add	r6, r9
 8017fba:	eba5 0509 	sub.w	r5, r5, r9
 8017fbe:	6026      	str	r6, [r4, #0]
 8017fc0:	60a5      	str	r5, [r4, #8]
 8017fc2:	463e      	mov	r6, r7
 8017fc4:	42be      	cmp	r6, r7
 8017fc6:	d900      	bls.n	8017fca <__ssputs_r+0x86>
 8017fc8:	463e      	mov	r6, r7
 8017fca:	6820      	ldr	r0, [r4, #0]
 8017fcc:	4632      	mov	r2, r6
 8017fce:	4641      	mov	r1, r8
 8017fd0:	f7ff fc3f 	bl	8017852 <memmove>
 8017fd4:	68a3      	ldr	r3, [r4, #8]
 8017fd6:	1b9b      	subs	r3, r3, r6
 8017fd8:	60a3      	str	r3, [r4, #8]
 8017fda:	6823      	ldr	r3, [r4, #0]
 8017fdc:	4433      	add	r3, r6
 8017fde:	6023      	str	r3, [r4, #0]
 8017fe0:	2000      	movs	r0, #0
 8017fe2:	e7db      	b.n	8017f9c <__ssputs_r+0x58>
 8017fe4:	462a      	mov	r2, r5
 8017fe6:	f000 fd35 	bl	8018a54 <_realloc_r>
 8017fea:	4606      	mov	r6, r0
 8017fec:	2800      	cmp	r0, #0
 8017fee:	d1e1      	bne.n	8017fb4 <__ssputs_r+0x70>
 8017ff0:	6921      	ldr	r1, [r4, #16]
 8017ff2:	4650      	mov	r0, sl
 8017ff4:	f7ff ff5a 	bl	8017eac <_free_r>
 8017ff8:	e7c7      	b.n	8017f8a <__ssputs_r+0x46>
	...

08017ffc <_svfiprintf_r>:
 8017ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018000:	4698      	mov	r8, r3
 8018002:	898b      	ldrh	r3, [r1, #12]
 8018004:	061b      	lsls	r3, r3, #24
 8018006:	b09d      	sub	sp, #116	; 0x74
 8018008:	4607      	mov	r7, r0
 801800a:	460d      	mov	r5, r1
 801800c:	4614      	mov	r4, r2
 801800e:	d50e      	bpl.n	801802e <_svfiprintf_r+0x32>
 8018010:	690b      	ldr	r3, [r1, #16]
 8018012:	b963      	cbnz	r3, 801802e <_svfiprintf_r+0x32>
 8018014:	2140      	movs	r1, #64	; 0x40
 8018016:	f7ff fc5f 	bl	80178d8 <_malloc_r>
 801801a:	6028      	str	r0, [r5, #0]
 801801c:	6128      	str	r0, [r5, #16]
 801801e:	b920      	cbnz	r0, 801802a <_svfiprintf_r+0x2e>
 8018020:	230c      	movs	r3, #12
 8018022:	603b      	str	r3, [r7, #0]
 8018024:	f04f 30ff 	mov.w	r0, #4294967295
 8018028:	e0d1      	b.n	80181ce <_svfiprintf_r+0x1d2>
 801802a:	2340      	movs	r3, #64	; 0x40
 801802c:	616b      	str	r3, [r5, #20]
 801802e:	2300      	movs	r3, #0
 8018030:	9309      	str	r3, [sp, #36]	; 0x24
 8018032:	2320      	movs	r3, #32
 8018034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018038:	f8cd 800c 	str.w	r8, [sp, #12]
 801803c:	2330      	movs	r3, #48	; 0x30
 801803e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80181e8 <_svfiprintf_r+0x1ec>
 8018042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018046:	f04f 0901 	mov.w	r9, #1
 801804a:	4623      	mov	r3, r4
 801804c:	469a      	mov	sl, r3
 801804e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018052:	b10a      	cbz	r2, 8018058 <_svfiprintf_r+0x5c>
 8018054:	2a25      	cmp	r2, #37	; 0x25
 8018056:	d1f9      	bne.n	801804c <_svfiprintf_r+0x50>
 8018058:	ebba 0b04 	subs.w	fp, sl, r4
 801805c:	d00b      	beq.n	8018076 <_svfiprintf_r+0x7a>
 801805e:	465b      	mov	r3, fp
 8018060:	4622      	mov	r2, r4
 8018062:	4629      	mov	r1, r5
 8018064:	4638      	mov	r0, r7
 8018066:	f7ff ff6d 	bl	8017f44 <__ssputs_r>
 801806a:	3001      	adds	r0, #1
 801806c:	f000 80aa 	beq.w	80181c4 <_svfiprintf_r+0x1c8>
 8018070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018072:	445a      	add	r2, fp
 8018074:	9209      	str	r2, [sp, #36]	; 0x24
 8018076:	f89a 3000 	ldrb.w	r3, [sl]
 801807a:	2b00      	cmp	r3, #0
 801807c:	f000 80a2 	beq.w	80181c4 <_svfiprintf_r+0x1c8>
 8018080:	2300      	movs	r3, #0
 8018082:	f04f 32ff 	mov.w	r2, #4294967295
 8018086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801808a:	f10a 0a01 	add.w	sl, sl, #1
 801808e:	9304      	str	r3, [sp, #16]
 8018090:	9307      	str	r3, [sp, #28]
 8018092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018096:	931a      	str	r3, [sp, #104]	; 0x68
 8018098:	4654      	mov	r4, sl
 801809a:	2205      	movs	r2, #5
 801809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180a0:	4851      	ldr	r0, [pc, #324]	; (80181e8 <_svfiprintf_r+0x1ec>)
 80180a2:	f7e8 f91d 	bl	80002e0 <memchr>
 80180a6:	9a04      	ldr	r2, [sp, #16]
 80180a8:	b9d8      	cbnz	r0, 80180e2 <_svfiprintf_r+0xe6>
 80180aa:	06d0      	lsls	r0, r2, #27
 80180ac:	bf44      	itt	mi
 80180ae:	2320      	movmi	r3, #32
 80180b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180b4:	0711      	lsls	r1, r2, #28
 80180b6:	bf44      	itt	mi
 80180b8:	232b      	movmi	r3, #43	; 0x2b
 80180ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180be:	f89a 3000 	ldrb.w	r3, [sl]
 80180c2:	2b2a      	cmp	r3, #42	; 0x2a
 80180c4:	d015      	beq.n	80180f2 <_svfiprintf_r+0xf6>
 80180c6:	9a07      	ldr	r2, [sp, #28]
 80180c8:	4654      	mov	r4, sl
 80180ca:	2000      	movs	r0, #0
 80180cc:	f04f 0c0a 	mov.w	ip, #10
 80180d0:	4621      	mov	r1, r4
 80180d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180d6:	3b30      	subs	r3, #48	; 0x30
 80180d8:	2b09      	cmp	r3, #9
 80180da:	d94e      	bls.n	801817a <_svfiprintf_r+0x17e>
 80180dc:	b1b0      	cbz	r0, 801810c <_svfiprintf_r+0x110>
 80180de:	9207      	str	r2, [sp, #28]
 80180e0:	e014      	b.n	801810c <_svfiprintf_r+0x110>
 80180e2:	eba0 0308 	sub.w	r3, r0, r8
 80180e6:	fa09 f303 	lsl.w	r3, r9, r3
 80180ea:	4313      	orrs	r3, r2
 80180ec:	9304      	str	r3, [sp, #16]
 80180ee:	46a2      	mov	sl, r4
 80180f0:	e7d2      	b.n	8018098 <_svfiprintf_r+0x9c>
 80180f2:	9b03      	ldr	r3, [sp, #12]
 80180f4:	1d19      	adds	r1, r3, #4
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	9103      	str	r1, [sp, #12]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	bfbb      	ittet	lt
 80180fe:	425b      	neglt	r3, r3
 8018100:	f042 0202 	orrlt.w	r2, r2, #2
 8018104:	9307      	strge	r3, [sp, #28]
 8018106:	9307      	strlt	r3, [sp, #28]
 8018108:	bfb8      	it	lt
 801810a:	9204      	strlt	r2, [sp, #16]
 801810c:	7823      	ldrb	r3, [r4, #0]
 801810e:	2b2e      	cmp	r3, #46	; 0x2e
 8018110:	d10c      	bne.n	801812c <_svfiprintf_r+0x130>
 8018112:	7863      	ldrb	r3, [r4, #1]
 8018114:	2b2a      	cmp	r3, #42	; 0x2a
 8018116:	d135      	bne.n	8018184 <_svfiprintf_r+0x188>
 8018118:	9b03      	ldr	r3, [sp, #12]
 801811a:	1d1a      	adds	r2, r3, #4
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	9203      	str	r2, [sp, #12]
 8018120:	2b00      	cmp	r3, #0
 8018122:	bfb8      	it	lt
 8018124:	f04f 33ff 	movlt.w	r3, #4294967295
 8018128:	3402      	adds	r4, #2
 801812a:	9305      	str	r3, [sp, #20]
 801812c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80181f8 <_svfiprintf_r+0x1fc>
 8018130:	7821      	ldrb	r1, [r4, #0]
 8018132:	2203      	movs	r2, #3
 8018134:	4650      	mov	r0, sl
 8018136:	f7e8 f8d3 	bl	80002e0 <memchr>
 801813a:	b140      	cbz	r0, 801814e <_svfiprintf_r+0x152>
 801813c:	2340      	movs	r3, #64	; 0x40
 801813e:	eba0 000a 	sub.w	r0, r0, sl
 8018142:	fa03 f000 	lsl.w	r0, r3, r0
 8018146:	9b04      	ldr	r3, [sp, #16]
 8018148:	4303      	orrs	r3, r0
 801814a:	3401      	adds	r4, #1
 801814c:	9304      	str	r3, [sp, #16]
 801814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018152:	4826      	ldr	r0, [pc, #152]	; (80181ec <_svfiprintf_r+0x1f0>)
 8018154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018158:	2206      	movs	r2, #6
 801815a:	f7e8 f8c1 	bl	80002e0 <memchr>
 801815e:	2800      	cmp	r0, #0
 8018160:	d038      	beq.n	80181d4 <_svfiprintf_r+0x1d8>
 8018162:	4b23      	ldr	r3, [pc, #140]	; (80181f0 <_svfiprintf_r+0x1f4>)
 8018164:	bb1b      	cbnz	r3, 80181ae <_svfiprintf_r+0x1b2>
 8018166:	9b03      	ldr	r3, [sp, #12]
 8018168:	3307      	adds	r3, #7
 801816a:	f023 0307 	bic.w	r3, r3, #7
 801816e:	3308      	adds	r3, #8
 8018170:	9303      	str	r3, [sp, #12]
 8018172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018174:	4433      	add	r3, r6
 8018176:	9309      	str	r3, [sp, #36]	; 0x24
 8018178:	e767      	b.n	801804a <_svfiprintf_r+0x4e>
 801817a:	fb0c 3202 	mla	r2, ip, r2, r3
 801817e:	460c      	mov	r4, r1
 8018180:	2001      	movs	r0, #1
 8018182:	e7a5      	b.n	80180d0 <_svfiprintf_r+0xd4>
 8018184:	2300      	movs	r3, #0
 8018186:	3401      	adds	r4, #1
 8018188:	9305      	str	r3, [sp, #20]
 801818a:	4619      	mov	r1, r3
 801818c:	f04f 0c0a 	mov.w	ip, #10
 8018190:	4620      	mov	r0, r4
 8018192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018196:	3a30      	subs	r2, #48	; 0x30
 8018198:	2a09      	cmp	r2, #9
 801819a:	d903      	bls.n	80181a4 <_svfiprintf_r+0x1a8>
 801819c:	2b00      	cmp	r3, #0
 801819e:	d0c5      	beq.n	801812c <_svfiprintf_r+0x130>
 80181a0:	9105      	str	r1, [sp, #20]
 80181a2:	e7c3      	b.n	801812c <_svfiprintf_r+0x130>
 80181a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80181a8:	4604      	mov	r4, r0
 80181aa:	2301      	movs	r3, #1
 80181ac:	e7f0      	b.n	8018190 <_svfiprintf_r+0x194>
 80181ae:	ab03      	add	r3, sp, #12
 80181b0:	9300      	str	r3, [sp, #0]
 80181b2:	462a      	mov	r2, r5
 80181b4:	4b0f      	ldr	r3, [pc, #60]	; (80181f4 <_svfiprintf_r+0x1f8>)
 80181b6:	a904      	add	r1, sp, #16
 80181b8:	4638      	mov	r0, r7
 80181ba:	f3af 8000 	nop.w
 80181be:	1c42      	adds	r2, r0, #1
 80181c0:	4606      	mov	r6, r0
 80181c2:	d1d6      	bne.n	8018172 <_svfiprintf_r+0x176>
 80181c4:	89ab      	ldrh	r3, [r5, #12]
 80181c6:	065b      	lsls	r3, r3, #25
 80181c8:	f53f af2c 	bmi.w	8018024 <_svfiprintf_r+0x28>
 80181cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181ce:	b01d      	add	sp, #116	; 0x74
 80181d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d4:	ab03      	add	r3, sp, #12
 80181d6:	9300      	str	r3, [sp, #0]
 80181d8:	462a      	mov	r2, r5
 80181da:	4b06      	ldr	r3, [pc, #24]	; (80181f4 <_svfiprintf_r+0x1f8>)
 80181dc:	a904      	add	r1, sp, #16
 80181de:	4638      	mov	r0, r7
 80181e0:	f000 f9d4 	bl	801858c <_printf_i>
 80181e4:	e7eb      	b.n	80181be <_svfiprintf_r+0x1c2>
 80181e6:	bf00      	nop
 80181e8:	0801d6aa 	.word	0x0801d6aa
 80181ec:	0801d6b4 	.word	0x0801d6b4
 80181f0:	00000000 	.word	0x00000000
 80181f4:	08017f45 	.word	0x08017f45
 80181f8:	0801d6b0 	.word	0x0801d6b0

080181fc <__sfputc_r>:
 80181fc:	6893      	ldr	r3, [r2, #8]
 80181fe:	3b01      	subs	r3, #1
 8018200:	2b00      	cmp	r3, #0
 8018202:	b410      	push	{r4}
 8018204:	6093      	str	r3, [r2, #8]
 8018206:	da08      	bge.n	801821a <__sfputc_r+0x1e>
 8018208:	6994      	ldr	r4, [r2, #24]
 801820a:	42a3      	cmp	r3, r4
 801820c:	db01      	blt.n	8018212 <__sfputc_r+0x16>
 801820e:	290a      	cmp	r1, #10
 8018210:	d103      	bne.n	801821a <__sfputc_r+0x1e>
 8018212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018216:	f000 baf1 	b.w	80187fc <__swbuf_r>
 801821a:	6813      	ldr	r3, [r2, #0]
 801821c:	1c58      	adds	r0, r3, #1
 801821e:	6010      	str	r0, [r2, #0]
 8018220:	7019      	strb	r1, [r3, #0]
 8018222:	4608      	mov	r0, r1
 8018224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018228:	4770      	bx	lr

0801822a <__sfputs_r>:
 801822a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801822c:	4606      	mov	r6, r0
 801822e:	460f      	mov	r7, r1
 8018230:	4614      	mov	r4, r2
 8018232:	18d5      	adds	r5, r2, r3
 8018234:	42ac      	cmp	r4, r5
 8018236:	d101      	bne.n	801823c <__sfputs_r+0x12>
 8018238:	2000      	movs	r0, #0
 801823a:	e007      	b.n	801824c <__sfputs_r+0x22>
 801823c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018240:	463a      	mov	r2, r7
 8018242:	4630      	mov	r0, r6
 8018244:	f7ff ffda 	bl	80181fc <__sfputc_r>
 8018248:	1c43      	adds	r3, r0, #1
 801824a:	d1f3      	bne.n	8018234 <__sfputs_r+0xa>
 801824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018250 <_vfiprintf_r>:
 8018250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018254:	460d      	mov	r5, r1
 8018256:	b09d      	sub	sp, #116	; 0x74
 8018258:	4614      	mov	r4, r2
 801825a:	4698      	mov	r8, r3
 801825c:	4606      	mov	r6, r0
 801825e:	b118      	cbz	r0, 8018268 <_vfiprintf_r+0x18>
 8018260:	6983      	ldr	r3, [r0, #24]
 8018262:	b90b      	cbnz	r3, 8018268 <_vfiprintf_r+0x18>
 8018264:	f7ff fa12 	bl	801768c <__sinit>
 8018268:	4b89      	ldr	r3, [pc, #548]	; (8018490 <_vfiprintf_r+0x240>)
 801826a:	429d      	cmp	r5, r3
 801826c:	d11b      	bne.n	80182a6 <_vfiprintf_r+0x56>
 801826e:	6875      	ldr	r5, [r6, #4]
 8018270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018272:	07d9      	lsls	r1, r3, #31
 8018274:	d405      	bmi.n	8018282 <_vfiprintf_r+0x32>
 8018276:	89ab      	ldrh	r3, [r5, #12]
 8018278:	059a      	lsls	r2, r3, #22
 801827a:	d402      	bmi.n	8018282 <_vfiprintf_r+0x32>
 801827c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801827e:	f7ff fac8 	bl	8017812 <__retarget_lock_acquire_recursive>
 8018282:	89ab      	ldrh	r3, [r5, #12]
 8018284:	071b      	lsls	r3, r3, #28
 8018286:	d501      	bpl.n	801828c <_vfiprintf_r+0x3c>
 8018288:	692b      	ldr	r3, [r5, #16]
 801828a:	b9eb      	cbnz	r3, 80182c8 <_vfiprintf_r+0x78>
 801828c:	4629      	mov	r1, r5
 801828e:	4630      	mov	r0, r6
 8018290:	f000 fb06 	bl	80188a0 <__swsetup_r>
 8018294:	b1c0      	cbz	r0, 80182c8 <_vfiprintf_r+0x78>
 8018296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018298:	07dc      	lsls	r4, r3, #31
 801829a:	d50e      	bpl.n	80182ba <_vfiprintf_r+0x6a>
 801829c:	f04f 30ff 	mov.w	r0, #4294967295
 80182a0:	b01d      	add	sp, #116	; 0x74
 80182a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a6:	4b7b      	ldr	r3, [pc, #492]	; (8018494 <_vfiprintf_r+0x244>)
 80182a8:	429d      	cmp	r5, r3
 80182aa:	d101      	bne.n	80182b0 <_vfiprintf_r+0x60>
 80182ac:	68b5      	ldr	r5, [r6, #8]
 80182ae:	e7df      	b.n	8018270 <_vfiprintf_r+0x20>
 80182b0:	4b79      	ldr	r3, [pc, #484]	; (8018498 <_vfiprintf_r+0x248>)
 80182b2:	429d      	cmp	r5, r3
 80182b4:	bf08      	it	eq
 80182b6:	68f5      	ldreq	r5, [r6, #12]
 80182b8:	e7da      	b.n	8018270 <_vfiprintf_r+0x20>
 80182ba:	89ab      	ldrh	r3, [r5, #12]
 80182bc:	0598      	lsls	r0, r3, #22
 80182be:	d4ed      	bmi.n	801829c <_vfiprintf_r+0x4c>
 80182c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182c2:	f7ff faa7 	bl	8017814 <__retarget_lock_release_recursive>
 80182c6:	e7e9      	b.n	801829c <_vfiprintf_r+0x4c>
 80182c8:	2300      	movs	r3, #0
 80182ca:	9309      	str	r3, [sp, #36]	; 0x24
 80182cc:	2320      	movs	r3, #32
 80182ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80182d6:	2330      	movs	r3, #48	; 0x30
 80182d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801849c <_vfiprintf_r+0x24c>
 80182dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182e0:	f04f 0901 	mov.w	r9, #1
 80182e4:	4623      	mov	r3, r4
 80182e6:	469a      	mov	sl, r3
 80182e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182ec:	b10a      	cbz	r2, 80182f2 <_vfiprintf_r+0xa2>
 80182ee:	2a25      	cmp	r2, #37	; 0x25
 80182f0:	d1f9      	bne.n	80182e6 <_vfiprintf_r+0x96>
 80182f2:	ebba 0b04 	subs.w	fp, sl, r4
 80182f6:	d00b      	beq.n	8018310 <_vfiprintf_r+0xc0>
 80182f8:	465b      	mov	r3, fp
 80182fa:	4622      	mov	r2, r4
 80182fc:	4629      	mov	r1, r5
 80182fe:	4630      	mov	r0, r6
 8018300:	f7ff ff93 	bl	801822a <__sfputs_r>
 8018304:	3001      	adds	r0, #1
 8018306:	f000 80aa 	beq.w	801845e <_vfiprintf_r+0x20e>
 801830a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801830c:	445a      	add	r2, fp
 801830e:	9209      	str	r2, [sp, #36]	; 0x24
 8018310:	f89a 3000 	ldrb.w	r3, [sl]
 8018314:	2b00      	cmp	r3, #0
 8018316:	f000 80a2 	beq.w	801845e <_vfiprintf_r+0x20e>
 801831a:	2300      	movs	r3, #0
 801831c:	f04f 32ff 	mov.w	r2, #4294967295
 8018320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018324:	f10a 0a01 	add.w	sl, sl, #1
 8018328:	9304      	str	r3, [sp, #16]
 801832a:	9307      	str	r3, [sp, #28]
 801832c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018330:	931a      	str	r3, [sp, #104]	; 0x68
 8018332:	4654      	mov	r4, sl
 8018334:	2205      	movs	r2, #5
 8018336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801833a:	4858      	ldr	r0, [pc, #352]	; (801849c <_vfiprintf_r+0x24c>)
 801833c:	f7e7 ffd0 	bl	80002e0 <memchr>
 8018340:	9a04      	ldr	r2, [sp, #16]
 8018342:	b9d8      	cbnz	r0, 801837c <_vfiprintf_r+0x12c>
 8018344:	06d1      	lsls	r1, r2, #27
 8018346:	bf44      	itt	mi
 8018348:	2320      	movmi	r3, #32
 801834a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801834e:	0713      	lsls	r3, r2, #28
 8018350:	bf44      	itt	mi
 8018352:	232b      	movmi	r3, #43	; 0x2b
 8018354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018358:	f89a 3000 	ldrb.w	r3, [sl]
 801835c:	2b2a      	cmp	r3, #42	; 0x2a
 801835e:	d015      	beq.n	801838c <_vfiprintf_r+0x13c>
 8018360:	9a07      	ldr	r2, [sp, #28]
 8018362:	4654      	mov	r4, sl
 8018364:	2000      	movs	r0, #0
 8018366:	f04f 0c0a 	mov.w	ip, #10
 801836a:	4621      	mov	r1, r4
 801836c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018370:	3b30      	subs	r3, #48	; 0x30
 8018372:	2b09      	cmp	r3, #9
 8018374:	d94e      	bls.n	8018414 <_vfiprintf_r+0x1c4>
 8018376:	b1b0      	cbz	r0, 80183a6 <_vfiprintf_r+0x156>
 8018378:	9207      	str	r2, [sp, #28]
 801837a:	e014      	b.n	80183a6 <_vfiprintf_r+0x156>
 801837c:	eba0 0308 	sub.w	r3, r0, r8
 8018380:	fa09 f303 	lsl.w	r3, r9, r3
 8018384:	4313      	orrs	r3, r2
 8018386:	9304      	str	r3, [sp, #16]
 8018388:	46a2      	mov	sl, r4
 801838a:	e7d2      	b.n	8018332 <_vfiprintf_r+0xe2>
 801838c:	9b03      	ldr	r3, [sp, #12]
 801838e:	1d19      	adds	r1, r3, #4
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	9103      	str	r1, [sp, #12]
 8018394:	2b00      	cmp	r3, #0
 8018396:	bfbb      	ittet	lt
 8018398:	425b      	neglt	r3, r3
 801839a:	f042 0202 	orrlt.w	r2, r2, #2
 801839e:	9307      	strge	r3, [sp, #28]
 80183a0:	9307      	strlt	r3, [sp, #28]
 80183a2:	bfb8      	it	lt
 80183a4:	9204      	strlt	r2, [sp, #16]
 80183a6:	7823      	ldrb	r3, [r4, #0]
 80183a8:	2b2e      	cmp	r3, #46	; 0x2e
 80183aa:	d10c      	bne.n	80183c6 <_vfiprintf_r+0x176>
 80183ac:	7863      	ldrb	r3, [r4, #1]
 80183ae:	2b2a      	cmp	r3, #42	; 0x2a
 80183b0:	d135      	bne.n	801841e <_vfiprintf_r+0x1ce>
 80183b2:	9b03      	ldr	r3, [sp, #12]
 80183b4:	1d1a      	adds	r2, r3, #4
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	9203      	str	r2, [sp, #12]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	bfb8      	it	lt
 80183be:	f04f 33ff 	movlt.w	r3, #4294967295
 80183c2:	3402      	adds	r4, #2
 80183c4:	9305      	str	r3, [sp, #20]
 80183c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80184ac <_vfiprintf_r+0x25c>
 80183ca:	7821      	ldrb	r1, [r4, #0]
 80183cc:	2203      	movs	r2, #3
 80183ce:	4650      	mov	r0, sl
 80183d0:	f7e7 ff86 	bl	80002e0 <memchr>
 80183d4:	b140      	cbz	r0, 80183e8 <_vfiprintf_r+0x198>
 80183d6:	2340      	movs	r3, #64	; 0x40
 80183d8:	eba0 000a 	sub.w	r0, r0, sl
 80183dc:	fa03 f000 	lsl.w	r0, r3, r0
 80183e0:	9b04      	ldr	r3, [sp, #16]
 80183e2:	4303      	orrs	r3, r0
 80183e4:	3401      	adds	r4, #1
 80183e6:	9304      	str	r3, [sp, #16]
 80183e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183ec:	482c      	ldr	r0, [pc, #176]	; (80184a0 <_vfiprintf_r+0x250>)
 80183ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80183f2:	2206      	movs	r2, #6
 80183f4:	f7e7 ff74 	bl	80002e0 <memchr>
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d03f      	beq.n	801847c <_vfiprintf_r+0x22c>
 80183fc:	4b29      	ldr	r3, [pc, #164]	; (80184a4 <_vfiprintf_r+0x254>)
 80183fe:	bb1b      	cbnz	r3, 8018448 <_vfiprintf_r+0x1f8>
 8018400:	9b03      	ldr	r3, [sp, #12]
 8018402:	3307      	adds	r3, #7
 8018404:	f023 0307 	bic.w	r3, r3, #7
 8018408:	3308      	adds	r3, #8
 801840a:	9303      	str	r3, [sp, #12]
 801840c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801840e:	443b      	add	r3, r7
 8018410:	9309      	str	r3, [sp, #36]	; 0x24
 8018412:	e767      	b.n	80182e4 <_vfiprintf_r+0x94>
 8018414:	fb0c 3202 	mla	r2, ip, r2, r3
 8018418:	460c      	mov	r4, r1
 801841a:	2001      	movs	r0, #1
 801841c:	e7a5      	b.n	801836a <_vfiprintf_r+0x11a>
 801841e:	2300      	movs	r3, #0
 8018420:	3401      	adds	r4, #1
 8018422:	9305      	str	r3, [sp, #20]
 8018424:	4619      	mov	r1, r3
 8018426:	f04f 0c0a 	mov.w	ip, #10
 801842a:	4620      	mov	r0, r4
 801842c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018430:	3a30      	subs	r2, #48	; 0x30
 8018432:	2a09      	cmp	r2, #9
 8018434:	d903      	bls.n	801843e <_vfiprintf_r+0x1ee>
 8018436:	2b00      	cmp	r3, #0
 8018438:	d0c5      	beq.n	80183c6 <_vfiprintf_r+0x176>
 801843a:	9105      	str	r1, [sp, #20]
 801843c:	e7c3      	b.n	80183c6 <_vfiprintf_r+0x176>
 801843e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018442:	4604      	mov	r4, r0
 8018444:	2301      	movs	r3, #1
 8018446:	e7f0      	b.n	801842a <_vfiprintf_r+0x1da>
 8018448:	ab03      	add	r3, sp, #12
 801844a:	9300      	str	r3, [sp, #0]
 801844c:	462a      	mov	r2, r5
 801844e:	4b16      	ldr	r3, [pc, #88]	; (80184a8 <_vfiprintf_r+0x258>)
 8018450:	a904      	add	r1, sp, #16
 8018452:	4630      	mov	r0, r6
 8018454:	f3af 8000 	nop.w
 8018458:	4607      	mov	r7, r0
 801845a:	1c78      	adds	r0, r7, #1
 801845c:	d1d6      	bne.n	801840c <_vfiprintf_r+0x1bc>
 801845e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018460:	07d9      	lsls	r1, r3, #31
 8018462:	d405      	bmi.n	8018470 <_vfiprintf_r+0x220>
 8018464:	89ab      	ldrh	r3, [r5, #12]
 8018466:	059a      	lsls	r2, r3, #22
 8018468:	d402      	bmi.n	8018470 <_vfiprintf_r+0x220>
 801846a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801846c:	f7ff f9d2 	bl	8017814 <__retarget_lock_release_recursive>
 8018470:	89ab      	ldrh	r3, [r5, #12]
 8018472:	065b      	lsls	r3, r3, #25
 8018474:	f53f af12 	bmi.w	801829c <_vfiprintf_r+0x4c>
 8018478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801847a:	e711      	b.n	80182a0 <_vfiprintf_r+0x50>
 801847c:	ab03      	add	r3, sp, #12
 801847e:	9300      	str	r3, [sp, #0]
 8018480:	462a      	mov	r2, r5
 8018482:	4b09      	ldr	r3, [pc, #36]	; (80184a8 <_vfiprintf_r+0x258>)
 8018484:	a904      	add	r1, sp, #16
 8018486:	4630      	mov	r0, r6
 8018488:	f000 f880 	bl	801858c <_printf_i>
 801848c:	e7e4      	b.n	8018458 <_vfiprintf_r+0x208>
 801848e:	bf00      	nop
 8018490:	0801d5b8 	.word	0x0801d5b8
 8018494:	0801d5d8 	.word	0x0801d5d8
 8018498:	0801d598 	.word	0x0801d598
 801849c:	0801d6aa 	.word	0x0801d6aa
 80184a0:	0801d6b4 	.word	0x0801d6b4
 80184a4:	00000000 	.word	0x00000000
 80184a8:	0801822b 	.word	0x0801822b
 80184ac:	0801d6b0 	.word	0x0801d6b0

080184b0 <_printf_common>:
 80184b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184b4:	4616      	mov	r6, r2
 80184b6:	4699      	mov	r9, r3
 80184b8:	688a      	ldr	r2, [r1, #8]
 80184ba:	690b      	ldr	r3, [r1, #16]
 80184bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80184c0:	4293      	cmp	r3, r2
 80184c2:	bfb8      	it	lt
 80184c4:	4613      	movlt	r3, r2
 80184c6:	6033      	str	r3, [r6, #0]
 80184c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80184cc:	4607      	mov	r7, r0
 80184ce:	460c      	mov	r4, r1
 80184d0:	b10a      	cbz	r2, 80184d6 <_printf_common+0x26>
 80184d2:	3301      	adds	r3, #1
 80184d4:	6033      	str	r3, [r6, #0]
 80184d6:	6823      	ldr	r3, [r4, #0]
 80184d8:	0699      	lsls	r1, r3, #26
 80184da:	bf42      	ittt	mi
 80184dc:	6833      	ldrmi	r3, [r6, #0]
 80184de:	3302      	addmi	r3, #2
 80184e0:	6033      	strmi	r3, [r6, #0]
 80184e2:	6825      	ldr	r5, [r4, #0]
 80184e4:	f015 0506 	ands.w	r5, r5, #6
 80184e8:	d106      	bne.n	80184f8 <_printf_common+0x48>
 80184ea:	f104 0a19 	add.w	sl, r4, #25
 80184ee:	68e3      	ldr	r3, [r4, #12]
 80184f0:	6832      	ldr	r2, [r6, #0]
 80184f2:	1a9b      	subs	r3, r3, r2
 80184f4:	42ab      	cmp	r3, r5
 80184f6:	dc26      	bgt.n	8018546 <_printf_common+0x96>
 80184f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80184fc:	1e13      	subs	r3, r2, #0
 80184fe:	6822      	ldr	r2, [r4, #0]
 8018500:	bf18      	it	ne
 8018502:	2301      	movne	r3, #1
 8018504:	0692      	lsls	r2, r2, #26
 8018506:	d42b      	bmi.n	8018560 <_printf_common+0xb0>
 8018508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801850c:	4649      	mov	r1, r9
 801850e:	4638      	mov	r0, r7
 8018510:	47c0      	blx	r8
 8018512:	3001      	adds	r0, #1
 8018514:	d01e      	beq.n	8018554 <_printf_common+0xa4>
 8018516:	6823      	ldr	r3, [r4, #0]
 8018518:	68e5      	ldr	r5, [r4, #12]
 801851a:	6832      	ldr	r2, [r6, #0]
 801851c:	f003 0306 	and.w	r3, r3, #6
 8018520:	2b04      	cmp	r3, #4
 8018522:	bf08      	it	eq
 8018524:	1aad      	subeq	r5, r5, r2
 8018526:	68a3      	ldr	r3, [r4, #8]
 8018528:	6922      	ldr	r2, [r4, #16]
 801852a:	bf0c      	ite	eq
 801852c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018530:	2500      	movne	r5, #0
 8018532:	4293      	cmp	r3, r2
 8018534:	bfc4      	itt	gt
 8018536:	1a9b      	subgt	r3, r3, r2
 8018538:	18ed      	addgt	r5, r5, r3
 801853a:	2600      	movs	r6, #0
 801853c:	341a      	adds	r4, #26
 801853e:	42b5      	cmp	r5, r6
 8018540:	d11a      	bne.n	8018578 <_printf_common+0xc8>
 8018542:	2000      	movs	r0, #0
 8018544:	e008      	b.n	8018558 <_printf_common+0xa8>
 8018546:	2301      	movs	r3, #1
 8018548:	4652      	mov	r2, sl
 801854a:	4649      	mov	r1, r9
 801854c:	4638      	mov	r0, r7
 801854e:	47c0      	blx	r8
 8018550:	3001      	adds	r0, #1
 8018552:	d103      	bne.n	801855c <_printf_common+0xac>
 8018554:	f04f 30ff 	mov.w	r0, #4294967295
 8018558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801855c:	3501      	adds	r5, #1
 801855e:	e7c6      	b.n	80184ee <_printf_common+0x3e>
 8018560:	18e1      	adds	r1, r4, r3
 8018562:	1c5a      	adds	r2, r3, #1
 8018564:	2030      	movs	r0, #48	; 0x30
 8018566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801856a:	4422      	add	r2, r4
 801856c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018574:	3302      	adds	r3, #2
 8018576:	e7c7      	b.n	8018508 <_printf_common+0x58>
 8018578:	2301      	movs	r3, #1
 801857a:	4622      	mov	r2, r4
 801857c:	4649      	mov	r1, r9
 801857e:	4638      	mov	r0, r7
 8018580:	47c0      	blx	r8
 8018582:	3001      	adds	r0, #1
 8018584:	d0e6      	beq.n	8018554 <_printf_common+0xa4>
 8018586:	3601      	adds	r6, #1
 8018588:	e7d9      	b.n	801853e <_printf_common+0x8e>
	...

0801858c <_printf_i>:
 801858c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018590:	7e0f      	ldrb	r7, [r1, #24]
 8018592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018594:	2f78      	cmp	r7, #120	; 0x78
 8018596:	4691      	mov	r9, r2
 8018598:	4680      	mov	r8, r0
 801859a:	460c      	mov	r4, r1
 801859c:	469a      	mov	sl, r3
 801859e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80185a2:	d807      	bhi.n	80185b4 <_printf_i+0x28>
 80185a4:	2f62      	cmp	r7, #98	; 0x62
 80185a6:	d80a      	bhi.n	80185be <_printf_i+0x32>
 80185a8:	2f00      	cmp	r7, #0
 80185aa:	f000 80d8 	beq.w	801875e <_printf_i+0x1d2>
 80185ae:	2f58      	cmp	r7, #88	; 0x58
 80185b0:	f000 80a3 	beq.w	80186fa <_printf_i+0x16e>
 80185b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80185b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80185bc:	e03a      	b.n	8018634 <_printf_i+0xa8>
 80185be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80185c2:	2b15      	cmp	r3, #21
 80185c4:	d8f6      	bhi.n	80185b4 <_printf_i+0x28>
 80185c6:	a101      	add	r1, pc, #4	; (adr r1, 80185cc <_printf_i+0x40>)
 80185c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80185cc:	08018625 	.word	0x08018625
 80185d0:	08018639 	.word	0x08018639
 80185d4:	080185b5 	.word	0x080185b5
 80185d8:	080185b5 	.word	0x080185b5
 80185dc:	080185b5 	.word	0x080185b5
 80185e0:	080185b5 	.word	0x080185b5
 80185e4:	08018639 	.word	0x08018639
 80185e8:	080185b5 	.word	0x080185b5
 80185ec:	080185b5 	.word	0x080185b5
 80185f0:	080185b5 	.word	0x080185b5
 80185f4:	080185b5 	.word	0x080185b5
 80185f8:	08018745 	.word	0x08018745
 80185fc:	08018669 	.word	0x08018669
 8018600:	08018727 	.word	0x08018727
 8018604:	080185b5 	.word	0x080185b5
 8018608:	080185b5 	.word	0x080185b5
 801860c:	08018767 	.word	0x08018767
 8018610:	080185b5 	.word	0x080185b5
 8018614:	08018669 	.word	0x08018669
 8018618:	080185b5 	.word	0x080185b5
 801861c:	080185b5 	.word	0x080185b5
 8018620:	0801872f 	.word	0x0801872f
 8018624:	682b      	ldr	r3, [r5, #0]
 8018626:	1d1a      	adds	r2, r3, #4
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	602a      	str	r2, [r5, #0]
 801862c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018634:	2301      	movs	r3, #1
 8018636:	e0a3      	b.n	8018780 <_printf_i+0x1f4>
 8018638:	6820      	ldr	r0, [r4, #0]
 801863a:	6829      	ldr	r1, [r5, #0]
 801863c:	0606      	lsls	r6, r0, #24
 801863e:	f101 0304 	add.w	r3, r1, #4
 8018642:	d50a      	bpl.n	801865a <_printf_i+0xce>
 8018644:	680e      	ldr	r6, [r1, #0]
 8018646:	602b      	str	r3, [r5, #0]
 8018648:	2e00      	cmp	r6, #0
 801864a:	da03      	bge.n	8018654 <_printf_i+0xc8>
 801864c:	232d      	movs	r3, #45	; 0x2d
 801864e:	4276      	negs	r6, r6
 8018650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018654:	485e      	ldr	r0, [pc, #376]	; (80187d0 <_printf_i+0x244>)
 8018656:	230a      	movs	r3, #10
 8018658:	e019      	b.n	801868e <_printf_i+0x102>
 801865a:	680e      	ldr	r6, [r1, #0]
 801865c:	602b      	str	r3, [r5, #0]
 801865e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018662:	bf18      	it	ne
 8018664:	b236      	sxthne	r6, r6
 8018666:	e7ef      	b.n	8018648 <_printf_i+0xbc>
 8018668:	682b      	ldr	r3, [r5, #0]
 801866a:	6820      	ldr	r0, [r4, #0]
 801866c:	1d19      	adds	r1, r3, #4
 801866e:	6029      	str	r1, [r5, #0]
 8018670:	0601      	lsls	r1, r0, #24
 8018672:	d501      	bpl.n	8018678 <_printf_i+0xec>
 8018674:	681e      	ldr	r6, [r3, #0]
 8018676:	e002      	b.n	801867e <_printf_i+0xf2>
 8018678:	0646      	lsls	r6, r0, #25
 801867a:	d5fb      	bpl.n	8018674 <_printf_i+0xe8>
 801867c:	881e      	ldrh	r6, [r3, #0]
 801867e:	4854      	ldr	r0, [pc, #336]	; (80187d0 <_printf_i+0x244>)
 8018680:	2f6f      	cmp	r7, #111	; 0x6f
 8018682:	bf0c      	ite	eq
 8018684:	2308      	moveq	r3, #8
 8018686:	230a      	movne	r3, #10
 8018688:	2100      	movs	r1, #0
 801868a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801868e:	6865      	ldr	r5, [r4, #4]
 8018690:	60a5      	str	r5, [r4, #8]
 8018692:	2d00      	cmp	r5, #0
 8018694:	bfa2      	ittt	ge
 8018696:	6821      	ldrge	r1, [r4, #0]
 8018698:	f021 0104 	bicge.w	r1, r1, #4
 801869c:	6021      	strge	r1, [r4, #0]
 801869e:	b90e      	cbnz	r6, 80186a4 <_printf_i+0x118>
 80186a0:	2d00      	cmp	r5, #0
 80186a2:	d04d      	beq.n	8018740 <_printf_i+0x1b4>
 80186a4:	4615      	mov	r5, r2
 80186a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80186aa:	fb03 6711 	mls	r7, r3, r1, r6
 80186ae:	5dc7      	ldrb	r7, [r0, r7]
 80186b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80186b4:	4637      	mov	r7, r6
 80186b6:	42bb      	cmp	r3, r7
 80186b8:	460e      	mov	r6, r1
 80186ba:	d9f4      	bls.n	80186a6 <_printf_i+0x11a>
 80186bc:	2b08      	cmp	r3, #8
 80186be:	d10b      	bne.n	80186d8 <_printf_i+0x14c>
 80186c0:	6823      	ldr	r3, [r4, #0]
 80186c2:	07de      	lsls	r6, r3, #31
 80186c4:	d508      	bpl.n	80186d8 <_printf_i+0x14c>
 80186c6:	6923      	ldr	r3, [r4, #16]
 80186c8:	6861      	ldr	r1, [r4, #4]
 80186ca:	4299      	cmp	r1, r3
 80186cc:	bfde      	ittt	le
 80186ce:	2330      	movle	r3, #48	; 0x30
 80186d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80186d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80186d8:	1b52      	subs	r2, r2, r5
 80186da:	6122      	str	r2, [r4, #16]
 80186dc:	f8cd a000 	str.w	sl, [sp]
 80186e0:	464b      	mov	r3, r9
 80186e2:	aa03      	add	r2, sp, #12
 80186e4:	4621      	mov	r1, r4
 80186e6:	4640      	mov	r0, r8
 80186e8:	f7ff fee2 	bl	80184b0 <_printf_common>
 80186ec:	3001      	adds	r0, #1
 80186ee:	d14c      	bne.n	801878a <_printf_i+0x1fe>
 80186f0:	f04f 30ff 	mov.w	r0, #4294967295
 80186f4:	b004      	add	sp, #16
 80186f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186fa:	4835      	ldr	r0, [pc, #212]	; (80187d0 <_printf_i+0x244>)
 80186fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018700:	6829      	ldr	r1, [r5, #0]
 8018702:	6823      	ldr	r3, [r4, #0]
 8018704:	f851 6b04 	ldr.w	r6, [r1], #4
 8018708:	6029      	str	r1, [r5, #0]
 801870a:	061d      	lsls	r5, r3, #24
 801870c:	d514      	bpl.n	8018738 <_printf_i+0x1ac>
 801870e:	07df      	lsls	r7, r3, #31
 8018710:	bf44      	itt	mi
 8018712:	f043 0320 	orrmi.w	r3, r3, #32
 8018716:	6023      	strmi	r3, [r4, #0]
 8018718:	b91e      	cbnz	r6, 8018722 <_printf_i+0x196>
 801871a:	6823      	ldr	r3, [r4, #0]
 801871c:	f023 0320 	bic.w	r3, r3, #32
 8018720:	6023      	str	r3, [r4, #0]
 8018722:	2310      	movs	r3, #16
 8018724:	e7b0      	b.n	8018688 <_printf_i+0xfc>
 8018726:	6823      	ldr	r3, [r4, #0]
 8018728:	f043 0320 	orr.w	r3, r3, #32
 801872c:	6023      	str	r3, [r4, #0]
 801872e:	2378      	movs	r3, #120	; 0x78
 8018730:	4828      	ldr	r0, [pc, #160]	; (80187d4 <_printf_i+0x248>)
 8018732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018736:	e7e3      	b.n	8018700 <_printf_i+0x174>
 8018738:	0659      	lsls	r1, r3, #25
 801873a:	bf48      	it	mi
 801873c:	b2b6      	uxthmi	r6, r6
 801873e:	e7e6      	b.n	801870e <_printf_i+0x182>
 8018740:	4615      	mov	r5, r2
 8018742:	e7bb      	b.n	80186bc <_printf_i+0x130>
 8018744:	682b      	ldr	r3, [r5, #0]
 8018746:	6826      	ldr	r6, [r4, #0]
 8018748:	6961      	ldr	r1, [r4, #20]
 801874a:	1d18      	adds	r0, r3, #4
 801874c:	6028      	str	r0, [r5, #0]
 801874e:	0635      	lsls	r5, r6, #24
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	d501      	bpl.n	8018758 <_printf_i+0x1cc>
 8018754:	6019      	str	r1, [r3, #0]
 8018756:	e002      	b.n	801875e <_printf_i+0x1d2>
 8018758:	0670      	lsls	r0, r6, #25
 801875a:	d5fb      	bpl.n	8018754 <_printf_i+0x1c8>
 801875c:	8019      	strh	r1, [r3, #0]
 801875e:	2300      	movs	r3, #0
 8018760:	6123      	str	r3, [r4, #16]
 8018762:	4615      	mov	r5, r2
 8018764:	e7ba      	b.n	80186dc <_printf_i+0x150>
 8018766:	682b      	ldr	r3, [r5, #0]
 8018768:	1d1a      	adds	r2, r3, #4
 801876a:	602a      	str	r2, [r5, #0]
 801876c:	681d      	ldr	r5, [r3, #0]
 801876e:	6862      	ldr	r2, [r4, #4]
 8018770:	2100      	movs	r1, #0
 8018772:	4628      	mov	r0, r5
 8018774:	f7e7 fdb4 	bl	80002e0 <memchr>
 8018778:	b108      	cbz	r0, 801877e <_printf_i+0x1f2>
 801877a:	1b40      	subs	r0, r0, r5
 801877c:	6060      	str	r0, [r4, #4]
 801877e:	6863      	ldr	r3, [r4, #4]
 8018780:	6123      	str	r3, [r4, #16]
 8018782:	2300      	movs	r3, #0
 8018784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018788:	e7a8      	b.n	80186dc <_printf_i+0x150>
 801878a:	6923      	ldr	r3, [r4, #16]
 801878c:	462a      	mov	r2, r5
 801878e:	4649      	mov	r1, r9
 8018790:	4640      	mov	r0, r8
 8018792:	47d0      	blx	sl
 8018794:	3001      	adds	r0, #1
 8018796:	d0ab      	beq.n	80186f0 <_printf_i+0x164>
 8018798:	6823      	ldr	r3, [r4, #0]
 801879a:	079b      	lsls	r3, r3, #30
 801879c:	d413      	bmi.n	80187c6 <_printf_i+0x23a>
 801879e:	68e0      	ldr	r0, [r4, #12]
 80187a0:	9b03      	ldr	r3, [sp, #12]
 80187a2:	4298      	cmp	r0, r3
 80187a4:	bfb8      	it	lt
 80187a6:	4618      	movlt	r0, r3
 80187a8:	e7a4      	b.n	80186f4 <_printf_i+0x168>
 80187aa:	2301      	movs	r3, #1
 80187ac:	4632      	mov	r2, r6
 80187ae:	4649      	mov	r1, r9
 80187b0:	4640      	mov	r0, r8
 80187b2:	47d0      	blx	sl
 80187b4:	3001      	adds	r0, #1
 80187b6:	d09b      	beq.n	80186f0 <_printf_i+0x164>
 80187b8:	3501      	adds	r5, #1
 80187ba:	68e3      	ldr	r3, [r4, #12]
 80187bc:	9903      	ldr	r1, [sp, #12]
 80187be:	1a5b      	subs	r3, r3, r1
 80187c0:	42ab      	cmp	r3, r5
 80187c2:	dcf2      	bgt.n	80187aa <_printf_i+0x21e>
 80187c4:	e7eb      	b.n	801879e <_printf_i+0x212>
 80187c6:	2500      	movs	r5, #0
 80187c8:	f104 0619 	add.w	r6, r4, #25
 80187cc:	e7f5      	b.n	80187ba <_printf_i+0x22e>
 80187ce:	bf00      	nop
 80187d0:	0801d6bb 	.word	0x0801d6bb
 80187d4:	0801d6cc 	.word	0x0801d6cc

080187d8 <_read_r>:
 80187d8:	b538      	push	{r3, r4, r5, lr}
 80187da:	4d07      	ldr	r5, [pc, #28]	; (80187f8 <_read_r+0x20>)
 80187dc:	4604      	mov	r4, r0
 80187de:	4608      	mov	r0, r1
 80187e0:	4611      	mov	r1, r2
 80187e2:	2200      	movs	r2, #0
 80187e4:	602a      	str	r2, [r5, #0]
 80187e6:	461a      	mov	r2, r3
 80187e8:	f7e8 fb2c 	bl	8000e44 <_read>
 80187ec:	1c43      	adds	r3, r0, #1
 80187ee:	d102      	bne.n	80187f6 <_read_r+0x1e>
 80187f0:	682b      	ldr	r3, [r5, #0]
 80187f2:	b103      	cbz	r3, 80187f6 <_read_r+0x1e>
 80187f4:	6023      	str	r3, [r4, #0]
 80187f6:	bd38      	pop	{r3, r4, r5, pc}
 80187f8:	24010924 	.word	0x24010924

080187fc <__swbuf_r>:
 80187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fe:	460e      	mov	r6, r1
 8018800:	4614      	mov	r4, r2
 8018802:	4605      	mov	r5, r0
 8018804:	b118      	cbz	r0, 801880e <__swbuf_r+0x12>
 8018806:	6983      	ldr	r3, [r0, #24]
 8018808:	b90b      	cbnz	r3, 801880e <__swbuf_r+0x12>
 801880a:	f7fe ff3f 	bl	801768c <__sinit>
 801880e:	4b21      	ldr	r3, [pc, #132]	; (8018894 <__swbuf_r+0x98>)
 8018810:	429c      	cmp	r4, r3
 8018812:	d12b      	bne.n	801886c <__swbuf_r+0x70>
 8018814:	686c      	ldr	r4, [r5, #4]
 8018816:	69a3      	ldr	r3, [r4, #24]
 8018818:	60a3      	str	r3, [r4, #8]
 801881a:	89a3      	ldrh	r3, [r4, #12]
 801881c:	071a      	lsls	r2, r3, #28
 801881e:	d52f      	bpl.n	8018880 <__swbuf_r+0x84>
 8018820:	6923      	ldr	r3, [r4, #16]
 8018822:	b36b      	cbz	r3, 8018880 <__swbuf_r+0x84>
 8018824:	6923      	ldr	r3, [r4, #16]
 8018826:	6820      	ldr	r0, [r4, #0]
 8018828:	1ac0      	subs	r0, r0, r3
 801882a:	6963      	ldr	r3, [r4, #20]
 801882c:	b2f6      	uxtb	r6, r6
 801882e:	4283      	cmp	r3, r0
 8018830:	4637      	mov	r7, r6
 8018832:	dc04      	bgt.n	801883e <__swbuf_r+0x42>
 8018834:	4621      	mov	r1, r4
 8018836:	4628      	mov	r0, r5
 8018838:	f7ff fac4 	bl	8017dc4 <_fflush_r>
 801883c:	bb30      	cbnz	r0, 801888c <__swbuf_r+0x90>
 801883e:	68a3      	ldr	r3, [r4, #8]
 8018840:	3b01      	subs	r3, #1
 8018842:	60a3      	str	r3, [r4, #8]
 8018844:	6823      	ldr	r3, [r4, #0]
 8018846:	1c5a      	adds	r2, r3, #1
 8018848:	6022      	str	r2, [r4, #0]
 801884a:	701e      	strb	r6, [r3, #0]
 801884c:	6963      	ldr	r3, [r4, #20]
 801884e:	3001      	adds	r0, #1
 8018850:	4283      	cmp	r3, r0
 8018852:	d004      	beq.n	801885e <__swbuf_r+0x62>
 8018854:	89a3      	ldrh	r3, [r4, #12]
 8018856:	07db      	lsls	r3, r3, #31
 8018858:	d506      	bpl.n	8018868 <__swbuf_r+0x6c>
 801885a:	2e0a      	cmp	r6, #10
 801885c:	d104      	bne.n	8018868 <__swbuf_r+0x6c>
 801885e:	4621      	mov	r1, r4
 8018860:	4628      	mov	r0, r5
 8018862:	f7ff faaf 	bl	8017dc4 <_fflush_r>
 8018866:	b988      	cbnz	r0, 801888c <__swbuf_r+0x90>
 8018868:	4638      	mov	r0, r7
 801886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801886c:	4b0a      	ldr	r3, [pc, #40]	; (8018898 <__swbuf_r+0x9c>)
 801886e:	429c      	cmp	r4, r3
 8018870:	d101      	bne.n	8018876 <__swbuf_r+0x7a>
 8018872:	68ac      	ldr	r4, [r5, #8]
 8018874:	e7cf      	b.n	8018816 <__swbuf_r+0x1a>
 8018876:	4b09      	ldr	r3, [pc, #36]	; (801889c <__swbuf_r+0xa0>)
 8018878:	429c      	cmp	r4, r3
 801887a:	bf08      	it	eq
 801887c:	68ec      	ldreq	r4, [r5, #12]
 801887e:	e7ca      	b.n	8018816 <__swbuf_r+0x1a>
 8018880:	4621      	mov	r1, r4
 8018882:	4628      	mov	r0, r5
 8018884:	f000 f80c 	bl	80188a0 <__swsetup_r>
 8018888:	2800      	cmp	r0, #0
 801888a:	d0cb      	beq.n	8018824 <__swbuf_r+0x28>
 801888c:	f04f 37ff 	mov.w	r7, #4294967295
 8018890:	e7ea      	b.n	8018868 <__swbuf_r+0x6c>
 8018892:	bf00      	nop
 8018894:	0801d5b8 	.word	0x0801d5b8
 8018898:	0801d5d8 	.word	0x0801d5d8
 801889c:	0801d598 	.word	0x0801d598

080188a0 <__swsetup_r>:
 80188a0:	4b32      	ldr	r3, [pc, #200]	; (801896c <__swsetup_r+0xcc>)
 80188a2:	b570      	push	{r4, r5, r6, lr}
 80188a4:	681d      	ldr	r5, [r3, #0]
 80188a6:	4606      	mov	r6, r0
 80188a8:	460c      	mov	r4, r1
 80188aa:	b125      	cbz	r5, 80188b6 <__swsetup_r+0x16>
 80188ac:	69ab      	ldr	r3, [r5, #24]
 80188ae:	b913      	cbnz	r3, 80188b6 <__swsetup_r+0x16>
 80188b0:	4628      	mov	r0, r5
 80188b2:	f7fe feeb 	bl	801768c <__sinit>
 80188b6:	4b2e      	ldr	r3, [pc, #184]	; (8018970 <__swsetup_r+0xd0>)
 80188b8:	429c      	cmp	r4, r3
 80188ba:	d10f      	bne.n	80188dc <__swsetup_r+0x3c>
 80188bc:	686c      	ldr	r4, [r5, #4]
 80188be:	89a3      	ldrh	r3, [r4, #12]
 80188c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80188c4:	0719      	lsls	r1, r3, #28
 80188c6:	d42c      	bmi.n	8018922 <__swsetup_r+0x82>
 80188c8:	06dd      	lsls	r5, r3, #27
 80188ca:	d411      	bmi.n	80188f0 <__swsetup_r+0x50>
 80188cc:	2309      	movs	r3, #9
 80188ce:	6033      	str	r3, [r6, #0]
 80188d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80188d4:	81a3      	strh	r3, [r4, #12]
 80188d6:	f04f 30ff 	mov.w	r0, #4294967295
 80188da:	e03e      	b.n	801895a <__swsetup_r+0xba>
 80188dc:	4b25      	ldr	r3, [pc, #148]	; (8018974 <__swsetup_r+0xd4>)
 80188de:	429c      	cmp	r4, r3
 80188e0:	d101      	bne.n	80188e6 <__swsetup_r+0x46>
 80188e2:	68ac      	ldr	r4, [r5, #8]
 80188e4:	e7eb      	b.n	80188be <__swsetup_r+0x1e>
 80188e6:	4b24      	ldr	r3, [pc, #144]	; (8018978 <__swsetup_r+0xd8>)
 80188e8:	429c      	cmp	r4, r3
 80188ea:	bf08      	it	eq
 80188ec:	68ec      	ldreq	r4, [r5, #12]
 80188ee:	e7e6      	b.n	80188be <__swsetup_r+0x1e>
 80188f0:	0758      	lsls	r0, r3, #29
 80188f2:	d512      	bpl.n	801891a <__swsetup_r+0x7a>
 80188f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80188f6:	b141      	cbz	r1, 801890a <__swsetup_r+0x6a>
 80188f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80188fc:	4299      	cmp	r1, r3
 80188fe:	d002      	beq.n	8018906 <__swsetup_r+0x66>
 8018900:	4630      	mov	r0, r6
 8018902:	f7ff fad3 	bl	8017eac <_free_r>
 8018906:	2300      	movs	r3, #0
 8018908:	6363      	str	r3, [r4, #52]	; 0x34
 801890a:	89a3      	ldrh	r3, [r4, #12]
 801890c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018910:	81a3      	strh	r3, [r4, #12]
 8018912:	2300      	movs	r3, #0
 8018914:	6063      	str	r3, [r4, #4]
 8018916:	6923      	ldr	r3, [r4, #16]
 8018918:	6023      	str	r3, [r4, #0]
 801891a:	89a3      	ldrh	r3, [r4, #12]
 801891c:	f043 0308 	orr.w	r3, r3, #8
 8018920:	81a3      	strh	r3, [r4, #12]
 8018922:	6923      	ldr	r3, [r4, #16]
 8018924:	b94b      	cbnz	r3, 801893a <__swsetup_r+0x9a>
 8018926:	89a3      	ldrh	r3, [r4, #12]
 8018928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801892c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018930:	d003      	beq.n	801893a <__swsetup_r+0x9a>
 8018932:	4621      	mov	r1, r4
 8018934:	4630      	mov	r0, r6
 8018936:	f000 f84d 	bl	80189d4 <__smakebuf_r>
 801893a:	89a0      	ldrh	r0, [r4, #12]
 801893c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018940:	f010 0301 	ands.w	r3, r0, #1
 8018944:	d00a      	beq.n	801895c <__swsetup_r+0xbc>
 8018946:	2300      	movs	r3, #0
 8018948:	60a3      	str	r3, [r4, #8]
 801894a:	6963      	ldr	r3, [r4, #20]
 801894c:	425b      	negs	r3, r3
 801894e:	61a3      	str	r3, [r4, #24]
 8018950:	6923      	ldr	r3, [r4, #16]
 8018952:	b943      	cbnz	r3, 8018966 <__swsetup_r+0xc6>
 8018954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018958:	d1ba      	bne.n	80188d0 <__swsetup_r+0x30>
 801895a:	bd70      	pop	{r4, r5, r6, pc}
 801895c:	0781      	lsls	r1, r0, #30
 801895e:	bf58      	it	pl
 8018960:	6963      	ldrpl	r3, [r4, #20]
 8018962:	60a3      	str	r3, [r4, #8]
 8018964:	e7f4      	b.n	8018950 <__swsetup_r+0xb0>
 8018966:	2000      	movs	r0, #0
 8018968:	e7f7      	b.n	801895a <__swsetup_r+0xba>
 801896a:	bf00      	nop
 801896c:	24000048 	.word	0x24000048
 8018970:	0801d5b8 	.word	0x0801d5b8
 8018974:	0801d5d8 	.word	0x0801d5d8
 8018978:	0801d598 	.word	0x0801d598

0801897c <abort>:
 801897c:	b508      	push	{r3, lr}
 801897e:	2006      	movs	r0, #6
 8018980:	f000 f8c0 	bl	8018b04 <raise>
 8018984:	2001      	movs	r0, #1
 8018986:	f7e8 fa53 	bl	8000e30 <_exit>

0801898a <__swhatbuf_r>:
 801898a:	b570      	push	{r4, r5, r6, lr}
 801898c:	460e      	mov	r6, r1
 801898e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018992:	2900      	cmp	r1, #0
 8018994:	b096      	sub	sp, #88	; 0x58
 8018996:	4614      	mov	r4, r2
 8018998:	461d      	mov	r5, r3
 801899a:	da08      	bge.n	80189ae <__swhatbuf_r+0x24>
 801899c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80189a0:	2200      	movs	r2, #0
 80189a2:	602a      	str	r2, [r5, #0]
 80189a4:	061a      	lsls	r2, r3, #24
 80189a6:	d410      	bmi.n	80189ca <__swhatbuf_r+0x40>
 80189a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80189ac:	e00e      	b.n	80189cc <__swhatbuf_r+0x42>
 80189ae:	466a      	mov	r2, sp
 80189b0:	f000 f8c4 	bl	8018b3c <_fstat_r>
 80189b4:	2800      	cmp	r0, #0
 80189b6:	dbf1      	blt.n	801899c <__swhatbuf_r+0x12>
 80189b8:	9a01      	ldr	r2, [sp, #4]
 80189ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80189be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80189c2:	425a      	negs	r2, r3
 80189c4:	415a      	adcs	r2, r3
 80189c6:	602a      	str	r2, [r5, #0]
 80189c8:	e7ee      	b.n	80189a8 <__swhatbuf_r+0x1e>
 80189ca:	2340      	movs	r3, #64	; 0x40
 80189cc:	2000      	movs	r0, #0
 80189ce:	6023      	str	r3, [r4, #0]
 80189d0:	b016      	add	sp, #88	; 0x58
 80189d2:	bd70      	pop	{r4, r5, r6, pc}

080189d4 <__smakebuf_r>:
 80189d4:	898b      	ldrh	r3, [r1, #12]
 80189d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80189d8:	079d      	lsls	r5, r3, #30
 80189da:	4606      	mov	r6, r0
 80189dc:	460c      	mov	r4, r1
 80189de:	d507      	bpl.n	80189f0 <__smakebuf_r+0x1c>
 80189e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80189e4:	6023      	str	r3, [r4, #0]
 80189e6:	6123      	str	r3, [r4, #16]
 80189e8:	2301      	movs	r3, #1
 80189ea:	6163      	str	r3, [r4, #20]
 80189ec:	b002      	add	sp, #8
 80189ee:	bd70      	pop	{r4, r5, r6, pc}
 80189f0:	ab01      	add	r3, sp, #4
 80189f2:	466a      	mov	r2, sp
 80189f4:	f7ff ffc9 	bl	801898a <__swhatbuf_r>
 80189f8:	9900      	ldr	r1, [sp, #0]
 80189fa:	4605      	mov	r5, r0
 80189fc:	4630      	mov	r0, r6
 80189fe:	f7fe ff6b 	bl	80178d8 <_malloc_r>
 8018a02:	b948      	cbnz	r0, 8018a18 <__smakebuf_r+0x44>
 8018a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a08:	059a      	lsls	r2, r3, #22
 8018a0a:	d4ef      	bmi.n	80189ec <__smakebuf_r+0x18>
 8018a0c:	f023 0303 	bic.w	r3, r3, #3
 8018a10:	f043 0302 	orr.w	r3, r3, #2
 8018a14:	81a3      	strh	r3, [r4, #12]
 8018a16:	e7e3      	b.n	80189e0 <__smakebuf_r+0xc>
 8018a18:	4b0d      	ldr	r3, [pc, #52]	; (8018a50 <__smakebuf_r+0x7c>)
 8018a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018a1c:	89a3      	ldrh	r3, [r4, #12]
 8018a1e:	6020      	str	r0, [r4, #0]
 8018a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a24:	81a3      	strh	r3, [r4, #12]
 8018a26:	9b00      	ldr	r3, [sp, #0]
 8018a28:	6163      	str	r3, [r4, #20]
 8018a2a:	9b01      	ldr	r3, [sp, #4]
 8018a2c:	6120      	str	r0, [r4, #16]
 8018a2e:	b15b      	cbz	r3, 8018a48 <__smakebuf_r+0x74>
 8018a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a34:	4630      	mov	r0, r6
 8018a36:	f000 f893 	bl	8018b60 <_isatty_r>
 8018a3a:	b128      	cbz	r0, 8018a48 <__smakebuf_r+0x74>
 8018a3c:	89a3      	ldrh	r3, [r4, #12]
 8018a3e:	f023 0303 	bic.w	r3, r3, #3
 8018a42:	f043 0301 	orr.w	r3, r3, #1
 8018a46:	81a3      	strh	r3, [r4, #12]
 8018a48:	89a0      	ldrh	r0, [r4, #12]
 8018a4a:	4305      	orrs	r5, r0
 8018a4c:	81a5      	strh	r5, [r4, #12]
 8018a4e:	e7cd      	b.n	80189ec <__smakebuf_r+0x18>
 8018a50:	08017625 	.word	0x08017625

08018a54 <_realloc_r>:
 8018a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a58:	4680      	mov	r8, r0
 8018a5a:	4614      	mov	r4, r2
 8018a5c:	460e      	mov	r6, r1
 8018a5e:	b921      	cbnz	r1, 8018a6a <_realloc_r+0x16>
 8018a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a64:	4611      	mov	r1, r2
 8018a66:	f7fe bf37 	b.w	80178d8 <_malloc_r>
 8018a6a:	b92a      	cbnz	r2, 8018a78 <_realloc_r+0x24>
 8018a6c:	f7ff fa1e 	bl	8017eac <_free_r>
 8018a70:	4625      	mov	r5, r4
 8018a72:	4628      	mov	r0, r5
 8018a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a78:	f000 f882 	bl	8018b80 <_malloc_usable_size_r>
 8018a7c:	4284      	cmp	r4, r0
 8018a7e:	4607      	mov	r7, r0
 8018a80:	d802      	bhi.n	8018a88 <_realloc_r+0x34>
 8018a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a86:	d812      	bhi.n	8018aae <_realloc_r+0x5a>
 8018a88:	4621      	mov	r1, r4
 8018a8a:	4640      	mov	r0, r8
 8018a8c:	f7fe ff24 	bl	80178d8 <_malloc_r>
 8018a90:	4605      	mov	r5, r0
 8018a92:	2800      	cmp	r0, #0
 8018a94:	d0ed      	beq.n	8018a72 <_realloc_r+0x1e>
 8018a96:	42bc      	cmp	r4, r7
 8018a98:	4622      	mov	r2, r4
 8018a9a:	4631      	mov	r1, r6
 8018a9c:	bf28      	it	cs
 8018a9e:	463a      	movcs	r2, r7
 8018aa0:	f7fe fec9 	bl	8017836 <memcpy>
 8018aa4:	4631      	mov	r1, r6
 8018aa6:	4640      	mov	r0, r8
 8018aa8:	f7ff fa00 	bl	8017eac <_free_r>
 8018aac:	e7e1      	b.n	8018a72 <_realloc_r+0x1e>
 8018aae:	4635      	mov	r5, r6
 8018ab0:	e7df      	b.n	8018a72 <_realloc_r+0x1e>

08018ab2 <_raise_r>:
 8018ab2:	291f      	cmp	r1, #31
 8018ab4:	b538      	push	{r3, r4, r5, lr}
 8018ab6:	4604      	mov	r4, r0
 8018ab8:	460d      	mov	r5, r1
 8018aba:	d904      	bls.n	8018ac6 <_raise_r+0x14>
 8018abc:	2316      	movs	r3, #22
 8018abe:	6003      	str	r3, [r0, #0]
 8018ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ac4:	bd38      	pop	{r3, r4, r5, pc}
 8018ac6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018ac8:	b112      	cbz	r2, 8018ad0 <_raise_r+0x1e>
 8018aca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ace:	b94b      	cbnz	r3, 8018ae4 <_raise_r+0x32>
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	f000 f831 	bl	8018b38 <_getpid_r>
 8018ad6:	462a      	mov	r2, r5
 8018ad8:	4601      	mov	r1, r0
 8018ada:	4620      	mov	r0, r4
 8018adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ae0:	f000 b818 	b.w	8018b14 <_kill_r>
 8018ae4:	2b01      	cmp	r3, #1
 8018ae6:	d00a      	beq.n	8018afe <_raise_r+0x4c>
 8018ae8:	1c59      	adds	r1, r3, #1
 8018aea:	d103      	bne.n	8018af4 <_raise_r+0x42>
 8018aec:	2316      	movs	r3, #22
 8018aee:	6003      	str	r3, [r0, #0]
 8018af0:	2001      	movs	r0, #1
 8018af2:	e7e7      	b.n	8018ac4 <_raise_r+0x12>
 8018af4:	2400      	movs	r4, #0
 8018af6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018afa:	4628      	mov	r0, r5
 8018afc:	4798      	blx	r3
 8018afe:	2000      	movs	r0, #0
 8018b00:	e7e0      	b.n	8018ac4 <_raise_r+0x12>
	...

08018b04 <raise>:
 8018b04:	4b02      	ldr	r3, [pc, #8]	; (8018b10 <raise+0xc>)
 8018b06:	4601      	mov	r1, r0
 8018b08:	6818      	ldr	r0, [r3, #0]
 8018b0a:	f7ff bfd2 	b.w	8018ab2 <_raise_r>
 8018b0e:	bf00      	nop
 8018b10:	24000048 	.word	0x24000048

08018b14 <_kill_r>:
 8018b14:	b538      	push	{r3, r4, r5, lr}
 8018b16:	4d07      	ldr	r5, [pc, #28]	; (8018b34 <_kill_r+0x20>)
 8018b18:	2300      	movs	r3, #0
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	4608      	mov	r0, r1
 8018b1e:	4611      	mov	r1, r2
 8018b20:	602b      	str	r3, [r5, #0]
 8018b22:	f7e8 f973 	bl	8000e0c <_kill>
 8018b26:	1c43      	adds	r3, r0, #1
 8018b28:	d102      	bne.n	8018b30 <_kill_r+0x1c>
 8018b2a:	682b      	ldr	r3, [r5, #0]
 8018b2c:	b103      	cbz	r3, 8018b30 <_kill_r+0x1c>
 8018b2e:	6023      	str	r3, [r4, #0]
 8018b30:	bd38      	pop	{r3, r4, r5, pc}
 8018b32:	bf00      	nop
 8018b34:	24010924 	.word	0x24010924

08018b38 <_getpid_r>:
 8018b38:	f7e8 b95f 	b.w	8000dfa <_getpid>

08018b3c <_fstat_r>:
 8018b3c:	b538      	push	{r3, r4, r5, lr}
 8018b3e:	4d07      	ldr	r5, [pc, #28]	; (8018b5c <_fstat_r+0x20>)
 8018b40:	2300      	movs	r3, #0
 8018b42:	4604      	mov	r4, r0
 8018b44:	4608      	mov	r0, r1
 8018b46:	4611      	mov	r1, r2
 8018b48:	602b      	str	r3, [r5, #0]
 8018b4a:	f7e8 f9c0 	bl	8000ece <_fstat>
 8018b4e:	1c43      	adds	r3, r0, #1
 8018b50:	d102      	bne.n	8018b58 <_fstat_r+0x1c>
 8018b52:	682b      	ldr	r3, [r5, #0]
 8018b54:	b103      	cbz	r3, 8018b58 <_fstat_r+0x1c>
 8018b56:	6023      	str	r3, [r4, #0]
 8018b58:	bd38      	pop	{r3, r4, r5, pc}
 8018b5a:	bf00      	nop
 8018b5c:	24010924 	.word	0x24010924

08018b60 <_isatty_r>:
 8018b60:	b538      	push	{r3, r4, r5, lr}
 8018b62:	4d06      	ldr	r5, [pc, #24]	; (8018b7c <_isatty_r+0x1c>)
 8018b64:	2300      	movs	r3, #0
 8018b66:	4604      	mov	r4, r0
 8018b68:	4608      	mov	r0, r1
 8018b6a:	602b      	str	r3, [r5, #0]
 8018b6c:	f7e8 f9bf 	bl	8000eee <_isatty>
 8018b70:	1c43      	adds	r3, r0, #1
 8018b72:	d102      	bne.n	8018b7a <_isatty_r+0x1a>
 8018b74:	682b      	ldr	r3, [r5, #0]
 8018b76:	b103      	cbz	r3, 8018b7a <_isatty_r+0x1a>
 8018b78:	6023      	str	r3, [r4, #0]
 8018b7a:	bd38      	pop	{r3, r4, r5, pc}
 8018b7c:	24010924 	.word	0x24010924

08018b80 <_malloc_usable_size_r>:
 8018b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b84:	1f18      	subs	r0, r3, #4
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	bfbc      	itt	lt
 8018b8a:	580b      	ldrlt	r3, [r1, r0]
 8018b8c:	18c0      	addlt	r0, r0, r3
 8018b8e:	4770      	bx	lr

08018b90 <round>:
 8018b90:	ee10 1a90 	vmov	r1, s1
 8018b94:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8018b98:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8018b9c:	2a13      	cmp	r2, #19
 8018b9e:	b510      	push	{r4, lr}
 8018ba0:	ee10 3a10 	vmov	r3, s0
 8018ba4:	dc19      	bgt.n	8018bda <round+0x4a>
 8018ba6:	2a00      	cmp	r2, #0
 8018ba8:	da09      	bge.n	8018bbe <round+0x2e>
 8018baa:	3201      	adds	r2, #1
 8018bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018bb0:	d103      	bne.n	8018bba <round+0x2a>
 8018bb2:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018bb6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018bba:	2000      	movs	r0, #0
 8018bbc:	e026      	b.n	8018c0c <round+0x7c>
 8018bbe:	4816      	ldr	r0, [pc, #88]	; (8018c18 <round+0x88>)
 8018bc0:	4110      	asrs	r0, r2
 8018bc2:	ea01 0400 	and.w	r4, r1, r0
 8018bc6:	4323      	orrs	r3, r4
 8018bc8:	d00e      	beq.n	8018be8 <round+0x58>
 8018bca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018bce:	fa43 f202 	asr.w	r2, r3, r2
 8018bd2:	4411      	add	r1, r2
 8018bd4:	ea21 0100 	bic.w	r1, r1, r0
 8018bd8:	e7ef      	b.n	8018bba <round+0x2a>
 8018bda:	2a33      	cmp	r2, #51	; 0x33
 8018bdc:	dd05      	ble.n	8018bea <round+0x5a>
 8018bde:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8018be2:	d101      	bne.n	8018be8 <round+0x58>
 8018be4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018be8:	bd10      	pop	{r4, pc}
 8018bea:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8018bee:	f04f 30ff 	mov.w	r0, #4294967295
 8018bf2:	40e0      	lsrs	r0, r4
 8018bf4:	4203      	tst	r3, r0
 8018bf6:	d0f7      	beq.n	8018be8 <round+0x58>
 8018bf8:	2401      	movs	r4, #1
 8018bfa:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8018bfe:	fa04 f202 	lsl.w	r2, r4, r2
 8018c02:	189b      	adds	r3, r3, r2
 8018c04:	bf28      	it	cs
 8018c06:	1909      	addcs	r1, r1, r4
 8018c08:	ea23 0000 	bic.w	r0, r3, r0
 8018c0c:	460b      	mov	r3, r1
 8018c0e:	4602      	mov	r2, r0
 8018c10:	ec43 2b10 	vmov	d0, r2, r3
 8018c14:	e7e8      	b.n	8018be8 <round+0x58>
 8018c16:	bf00      	nop
 8018c18:	000fffff 	.word	0x000fffff
 8018c1c:	00000000 	.word	0x00000000

08018c20 <sin>:
 8018c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c22:	eeb0 7b40 	vmov.f64	d7, d0
 8018c26:	ee17 3a90 	vmov	r3, s15
 8018c2a:	4a21      	ldr	r2, [pc, #132]	; (8018cb0 <sin+0x90>)
 8018c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018c30:	4293      	cmp	r3, r2
 8018c32:	dc07      	bgt.n	8018c44 <sin+0x24>
 8018c34:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8018ca8 <sin+0x88>
 8018c38:	2000      	movs	r0, #0
 8018c3a:	b005      	add	sp, #20
 8018c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c40:	f000 bc82 	b.w	8019548 <__kernel_sin>
 8018c44:	4a1b      	ldr	r2, [pc, #108]	; (8018cb4 <sin+0x94>)
 8018c46:	4293      	cmp	r3, r2
 8018c48:	dd04      	ble.n	8018c54 <sin+0x34>
 8018c4a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8018c4e:	b005      	add	sp, #20
 8018c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c54:	4668      	mov	r0, sp
 8018c56:	f000 f82f 	bl	8018cb8 <__ieee754_rem_pio2>
 8018c5a:	f000 0003 	and.w	r0, r0, #3
 8018c5e:	2801      	cmp	r0, #1
 8018c60:	d00a      	beq.n	8018c78 <sin+0x58>
 8018c62:	2802      	cmp	r0, #2
 8018c64:	d00f      	beq.n	8018c86 <sin+0x66>
 8018c66:	b9c0      	cbnz	r0, 8018c9a <sin+0x7a>
 8018c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c6c:	ed9d 0b00 	vldr	d0, [sp]
 8018c70:	2001      	movs	r0, #1
 8018c72:	f000 fc69 	bl	8019548 <__kernel_sin>
 8018c76:	e7ea      	b.n	8018c4e <sin+0x2e>
 8018c78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c7c:	ed9d 0b00 	vldr	d0, [sp]
 8018c80:	f000 f95e 	bl	8018f40 <__kernel_cos>
 8018c84:	e7e3      	b.n	8018c4e <sin+0x2e>
 8018c86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c8a:	ed9d 0b00 	vldr	d0, [sp]
 8018c8e:	2001      	movs	r0, #1
 8018c90:	f000 fc5a 	bl	8019548 <__kernel_sin>
 8018c94:	eeb1 0b40 	vneg.f64	d0, d0
 8018c98:	e7d9      	b.n	8018c4e <sin+0x2e>
 8018c9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c9e:	ed9d 0b00 	vldr	d0, [sp]
 8018ca2:	f000 f94d 	bl	8018f40 <__kernel_cos>
 8018ca6:	e7f5      	b.n	8018c94 <sin+0x74>
	...
 8018cb0:	3fe921fb 	.word	0x3fe921fb
 8018cb4:	7fefffff 	.word	0x7fefffff

08018cb8 <__ieee754_rem_pio2>:
 8018cb8:	b570      	push	{r4, r5, r6, lr}
 8018cba:	eeb0 7b40 	vmov.f64	d7, d0
 8018cbe:	ee17 5a90 	vmov	r5, s15
 8018cc2:	4b99      	ldr	r3, [pc, #612]	; (8018f28 <__ieee754_rem_pio2+0x270>)
 8018cc4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018cc8:	429e      	cmp	r6, r3
 8018cca:	b088      	sub	sp, #32
 8018ccc:	4604      	mov	r4, r0
 8018cce:	dc07      	bgt.n	8018ce0 <__ieee754_rem_pio2+0x28>
 8018cd0:	2200      	movs	r2, #0
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	ed84 0b00 	vstr	d0, [r4]
 8018cd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018cdc:	2000      	movs	r0, #0
 8018cde:	e01b      	b.n	8018d18 <__ieee754_rem_pio2+0x60>
 8018ce0:	4b92      	ldr	r3, [pc, #584]	; (8018f2c <__ieee754_rem_pio2+0x274>)
 8018ce2:	429e      	cmp	r6, r3
 8018ce4:	dc3b      	bgt.n	8018d5e <__ieee754_rem_pio2+0xa6>
 8018ce6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8018cea:	2d00      	cmp	r5, #0
 8018cec:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8018ee8 <__ieee754_rem_pio2+0x230>
 8018cf0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8018cf4:	dd19      	ble.n	8018d2a <__ieee754_rem_pio2+0x72>
 8018cf6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018cfa:	429e      	cmp	r6, r3
 8018cfc:	d00e      	beq.n	8018d1c <__ieee754_rem_pio2+0x64>
 8018cfe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8018ef0 <__ieee754_rem_pio2+0x238>
 8018d02:	ee37 5b46 	vsub.f64	d5, d7, d6
 8018d06:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018d0a:	ed84 5b00 	vstr	d5, [r4]
 8018d0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018d12:	ed84 7b02 	vstr	d7, [r4, #8]
 8018d16:	2001      	movs	r0, #1
 8018d18:	b008      	add	sp, #32
 8018d1a:	bd70      	pop	{r4, r5, r6, pc}
 8018d1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8018ef8 <__ieee754_rem_pio2+0x240>
 8018d20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018d24:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8018f00 <__ieee754_rem_pio2+0x248>
 8018d28:	e7eb      	b.n	8018d02 <__ieee754_rem_pio2+0x4a>
 8018d2a:	429e      	cmp	r6, r3
 8018d2c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8018d30:	d00e      	beq.n	8018d50 <__ieee754_rem_pio2+0x98>
 8018d32:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8018ef0 <__ieee754_rem_pio2+0x238>
 8018d36:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018d3a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018d3e:	ed84 5b00 	vstr	d5, [r4]
 8018d42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018d46:	f04f 30ff 	mov.w	r0, #4294967295
 8018d4a:	ed84 7b02 	vstr	d7, [r4, #8]
 8018d4e:	e7e3      	b.n	8018d18 <__ieee754_rem_pio2+0x60>
 8018d50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018ef8 <__ieee754_rem_pio2+0x240>
 8018d54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018d58:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018f00 <__ieee754_rem_pio2+0x248>
 8018d5c:	e7eb      	b.n	8018d36 <__ieee754_rem_pio2+0x7e>
 8018d5e:	4b74      	ldr	r3, [pc, #464]	; (8018f30 <__ieee754_rem_pio2+0x278>)
 8018d60:	429e      	cmp	r6, r3
 8018d62:	dc70      	bgt.n	8018e46 <__ieee754_rem_pio2+0x18e>
 8018d64:	f000 fc48 	bl	80195f8 <fabs>
 8018d68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018d6c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018f08 <__ieee754_rem_pio2+0x250>
 8018d70:	eea0 7b06 	vfma.f64	d7, d0, d6
 8018d74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018d78:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018d7c:	ee17 0a90 	vmov	r0, s15
 8018d80:	eeb1 4b45 	vneg.f64	d4, d5
 8018d84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8018ee8 <__ieee754_rem_pio2+0x230>
 8018d88:	eea5 0b47 	vfms.f64	d0, d5, d7
 8018d8c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8018ef0 <__ieee754_rem_pio2+0x238>
 8018d90:	281f      	cmp	r0, #31
 8018d92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8018d96:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018d9a:	dc08      	bgt.n	8018dae <__ieee754_rem_pio2+0xf6>
 8018d9c:	4b65      	ldr	r3, [pc, #404]	; (8018f34 <__ieee754_rem_pio2+0x27c>)
 8018d9e:	1e42      	subs	r2, r0, #1
 8018da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018da4:	42b3      	cmp	r3, r6
 8018da6:	d002      	beq.n	8018dae <__ieee754_rem_pio2+0xf6>
 8018da8:	ed84 6b00 	vstr	d6, [r4]
 8018dac:	e026      	b.n	8018dfc <__ieee754_rem_pio2+0x144>
 8018dae:	ee16 3a90 	vmov	r3, s13
 8018db2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018db6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8018dba:	2b10      	cmp	r3, #16
 8018dbc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8018dc0:	ddf2      	ble.n	8018da8 <__ieee754_rem_pio2+0xf0>
 8018dc2:	eeb0 6b40 	vmov.f64	d6, d0
 8018dc6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8018ef8 <__ieee754_rem_pio2+0x240>
 8018dca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8018f00 <__ieee754_rem_pio2+0x248>
 8018dce:	eea4 6b07 	vfma.f64	d6, d4, d7
 8018dd2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018dd6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018dda:	eeb0 7b40 	vmov.f64	d7, d0
 8018dde:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8018de2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8018de6:	ee13 3a90 	vmov	r3, s7
 8018dea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018dee:	1ad3      	subs	r3, r2, r3
 8018df0:	2b31      	cmp	r3, #49	; 0x31
 8018df2:	dc17      	bgt.n	8018e24 <__ieee754_rem_pio2+0x16c>
 8018df4:	eeb0 0b46 	vmov.f64	d0, d6
 8018df8:	ed84 3b00 	vstr	d3, [r4]
 8018dfc:	ed94 6b00 	vldr	d6, [r4]
 8018e00:	2d00      	cmp	r5, #0
 8018e02:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018e06:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018e0a:	ed84 0b02 	vstr	d0, [r4, #8]
 8018e0e:	da83      	bge.n	8018d18 <__ieee754_rem_pio2+0x60>
 8018e10:	eeb1 6b46 	vneg.f64	d6, d6
 8018e14:	eeb1 0b40 	vneg.f64	d0, d0
 8018e18:	ed84 6b00 	vstr	d6, [r4]
 8018e1c:	ed84 0b02 	vstr	d0, [r4, #8]
 8018e20:	4240      	negs	r0, r0
 8018e22:	e779      	b.n	8018d18 <__ieee754_rem_pio2+0x60>
 8018e24:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8018f10 <__ieee754_rem_pio2+0x258>
 8018e28:	eeb0 0b46 	vmov.f64	d0, d6
 8018e2c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8018e30:	ee36 7b40 	vsub.f64	d7, d6, d0
 8018e34:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8018f18 <__ieee754_rem_pio2+0x260>
 8018e38:	eea4 7b03 	vfma.f64	d7, d4, d3
 8018e3c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018e40:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018e44:	e7b0      	b.n	8018da8 <__ieee754_rem_pio2+0xf0>
 8018e46:	4b3c      	ldr	r3, [pc, #240]	; (8018f38 <__ieee754_rem_pio2+0x280>)
 8018e48:	429e      	cmp	r6, r3
 8018e4a:	dd06      	ble.n	8018e5a <__ieee754_rem_pio2+0x1a2>
 8018e4c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8018e50:	ed80 7b02 	vstr	d7, [r0, #8]
 8018e54:	ed80 7b00 	vstr	d7, [r0]
 8018e58:	e740      	b.n	8018cdc <__ieee754_rem_pio2+0x24>
 8018e5a:	1532      	asrs	r2, r6, #20
 8018e5c:	ee10 0a10 	vmov	r0, s0
 8018e60:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8018e64:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8018e68:	ec41 0b17 	vmov	d7, r0, r1
 8018e6c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018e70:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8018f20 <__ieee754_rem_pio2+0x268>
 8018e74:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018e7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018e80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018e84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018e88:	a902      	add	r1, sp, #8
 8018e8a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018e92:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018e96:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018e9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018e9e:	2603      	movs	r6, #3
 8018ea0:	4608      	mov	r0, r1
 8018ea2:	ed91 7b04 	vldr	d7, [r1, #16]
 8018ea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eae:	4633      	mov	r3, r6
 8018eb0:	f1a1 0108 	sub.w	r1, r1, #8
 8018eb4:	f106 36ff 	add.w	r6, r6, #4294967295
 8018eb8:	d0f3      	beq.n	8018ea2 <__ieee754_rem_pio2+0x1ea>
 8018eba:	4920      	ldr	r1, [pc, #128]	; (8018f3c <__ieee754_rem_pio2+0x284>)
 8018ebc:	9101      	str	r1, [sp, #4]
 8018ebe:	2102      	movs	r1, #2
 8018ec0:	9100      	str	r1, [sp, #0]
 8018ec2:	4621      	mov	r1, r4
 8018ec4:	f000 f8a8 	bl	8019018 <__kernel_rem_pio2>
 8018ec8:	2d00      	cmp	r5, #0
 8018eca:	f6bf af25 	bge.w	8018d18 <__ieee754_rem_pio2+0x60>
 8018ece:	ed94 7b00 	vldr	d7, [r4]
 8018ed2:	eeb1 7b47 	vneg.f64	d7, d7
 8018ed6:	ed84 7b00 	vstr	d7, [r4]
 8018eda:	ed94 7b02 	vldr	d7, [r4, #8]
 8018ede:	eeb1 7b47 	vneg.f64	d7, d7
 8018ee2:	ed84 7b02 	vstr	d7, [r4, #8]
 8018ee6:	e79b      	b.n	8018e20 <__ieee754_rem_pio2+0x168>
 8018ee8:	54400000 	.word	0x54400000
 8018eec:	3ff921fb 	.word	0x3ff921fb
 8018ef0:	1a626331 	.word	0x1a626331
 8018ef4:	3dd0b461 	.word	0x3dd0b461
 8018ef8:	1a600000 	.word	0x1a600000
 8018efc:	3dd0b461 	.word	0x3dd0b461
 8018f00:	2e037073 	.word	0x2e037073
 8018f04:	3ba3198a 	.word	0x3ba3198a
 8018f08:	6dc9c883 	.word	0x6dc9c883
 8018f0c:	3fe45f30 	.word	0x3fe45f30
 8018f10:	2e000000 	.word	0x2e000000
 8018f14:	3ba3198a 	.word	0x3ba3198a
 8018f18:	252049c1 	.word	0x252049c1
 8018f1c:	397b839a 	.word	0x397b839a
 8018f20:	00000000 	.word	0x00000000
 8018f24:	41700000 	.word	0x41700000
 8018f28:	3fe921fb 	.word	0x3fe921fb
 8018f2c:	4002d97b 	.word	0x4002d97b
 8018f30:	413921fb 	.word	0x413921fb
 8018f34:	0801d6e0 	.word	0x0801d6e0
 8018f38:	7fefffff 	.word	0x7fefffff
 8018f3c:	0801d760 	.word	0x0801d760

08018f40 <__kernel_cos>:
 8018f40:	ee10 1a90 	vmov	r1, s1
 8018f44:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018f48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018f4c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8018f50:	da05      	bge.n	8018f5e <__kernel_cos+0x1e>
 8018f52:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018f56:	ee17 3a90 	vmov	r3, s15
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d03d      	beq.n	8018fda <__kernel_cos+0x9a>
 8018f5e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8018f62:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8018fe0 <__kernel_cos+0xa0>
 8018f66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018fe8 <__kernel_cos+0xa8>
 8018f6a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8018f6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018ff0 <__kernel_cos+0xb0>
 8018f72:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018f76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018ff8 <__kernel_cos+0xb8>
 8018f7a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8018f7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8019000 <__kernel_cos+0xc0>
 8018f82:	4b23      	ldr	r3, [pc, #140]	; (8019010 <__kernel_cos+0xd0>)
 8018f84:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018f88:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8019008 <__kernel_cos+0xc8>
 8018f8c:	4299      	cmp	r1, r3
 8018f8e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8018f92:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018f96:	ee26 5b03 	vmul.f64	d5, d6, d3
 8018f9a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8018f9e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8018fa2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018fa6:	dc04      	bgt.n	8018fb2 <__kernel_cos+0x72>
 8018fa8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8018fac:	ee34 0b46 	vsub.f64	d0, d4, d6
 8018fb0:	4770      	bx	lr
 8018fb2:	4b18      	ldr	r3, [pc, #96]	; (8019014 <__kernel_cos+0xd4>)
 8018fb4:	4299      	cmp	r1, r3
 8018fb6:	dc0d      	bgt.n	8018fd4 <__kernel_cos+0x94>
 8018fb8:	2200      	movs	r2, #0
 8018fba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8018fbe:	ec43 2b15 	vmov	d5, r2, r3
 8018fc2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8018fc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018fca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018fce:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018fd2:	4770      	bx	lr
 8018fd4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8018fd8:	e7f3      	b.n	8018fc2 <__kernel_cos+0x82>
 8018fda:	eeb0 0b44 	vmov.f64	d0, d4
 8018fde:	4770      	bx	lr
 8018fe0:	be8838d4 	.word	0xbe8838d4
 8018fe4:	bda8fae9 	.word	0xbda8fae9
 8018fe8:	bdb4b1c4 	.word	0xbdb4b1c4
 8018fec:	3e21ee9e 	.word	0x3e21ee9e
 8018ff0:	809c52ad 	.word	0x809c52ad
 8018ff4:	be927e4f 	.word	0xbe927e4f
 8018ff8:	19cb1590 	.word	0x19cb1590
 8018ffc:	3efa01a0 	.word	0x3efa01a0
 8019000:	16c15177 	.word	0x16c15177
 8019004:	bf56c16c 	.word	0xbf56c16c
 8019008:	5555554c 	.word	0x5555554c
 801900c:	3fa55555 	.word	0x3fa55555
 8019010:	3fd33332 	.word	0x3fd33332
 8019014:	3fe90000 	.word	0x3fe90000

08019018 <__kernel_rem_pio2>:
 8019018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801901c:	ed2d 8b06 	vpush	{d8-d10}
 8019020:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8019024:	460f      	mov	r7, r1
 8019026:	9002      	str	r0, [sp, #8]
 8019028:	49c5      	ldr	r1, [pc, #788]	; (8019340 <__kernel_rem_pio2+0x328>)
 801902a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801902c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8019030:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8019034:	9301      	str	r3, [sp, #4]
 8019036:	f112 0f14 	cmn.w	r2, #20
 801903a:	bfa8      	it	ge
 801903c:	2018      	movge	r0, #24
 801903e:	f103 31ff 	add.w	r1, r3, #4294967295
 8019042:	bfb8      	it	lt
 8019044:	2000      	movlt	r0, #0
 8019046:	f06f 0417 	mvn.w	r4, #23
 801904a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8019328 <__kernel_rem_pio2+0x310>
 801904e:	bfa4      	itt	ge
 8019050:	f1a2 0a03 	subge.w	sl, r2, #3
 8019054:	fb9a f0f0 	sdivge	r0, sl, r0
 8019058:	fb00 4404 	mla	r4, r0, r4, r4
 801905c:	1a46      	subs	r6, r0, r1
 801905e:	4414      	add	r4, r2
 8019060:	eb09 0c01 	add.w	ip, r9, r1
 8019064:	ad1a      	add	r5, sp, #104	; 0x68
 8019066:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801906a:	2200      	movs	r2, #0
 801906c:	4562      	cmp	r2, ip
 801906e:	dd10      	ble.n	8019092 <__kernel_rem_pio2+0x7a>
 8019070:	9a01      	ldr	r2, [sp, #4]
 8019072:	ab1a      	add	r3, sp, #104	; 0x68
 8019074:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019078:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801907c:	f04f 0c00 	mov.w	ip, #0
 8019080:	45cc      	cmp	ip, r9
 8019082:	dc26      	bgt.n	80190d2 <__kernel_rem_pio2+0xba>
 8019084:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8019328 <__kernel_rem_pio2+0x310>
 8019088:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801908c:	4616      	mov	r6, r2
 801908e:	2500      	movs	r5, #0
 8019090:	e015      	b.n	80190be <__kernel_rem_pio2+0xa6>
 8019092:	42d6      	cmn	r6, r2
 8019094:	d409      	bmi.n	80190aa <__kernel_rem_pio2+0x92>
 8019096:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801909a:	ee07 3a90 	vmov	s15, r3
 801909e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80190a2:	eca5 7b02 	vstmia	r5!, {d7}
 80190a6:	3201      	adds	r2, #1
 80190a8:	e7e0      	b.n	801906c <__kernel_rem_pio2+0x54>
 80190aa:	eeb0 7b46 	vmov.f64	d7, d6
 80190ae:	e7f8      	b.n	80190a2 <__kernel_rem_pio2+0x8a>
 80190b0:	ecb8 5b02 	vldmia	r8!, {d5}
 80190b4:	ed96 6b00 	vldr	d6, [r6]
 80190b8:	3501      	adds	r5, #1
 80190ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80190be:	428d      	cmp	r5, r1
 80190c0:	f1a6 0608 	sub.w	r6, r6, #8
 80190c4:	ddf4      	ble.n	80190b0 <__kernel_rem_pio2+0x98>
 80190c6:	ecaa 7b02 	vstmia	sl!, {d7}
 80190ca:	f10c 0c01 	add.w	ip, ip, #1
 80190ce:	3208      	adds	r2, #8
 80190d0:	e7d6      	b.n	8019080 <__kernel_rem_pio2+0x68>
 80190d2:	ab06      	add	r3, sp, #24
 80190d4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8019330 <__kernel_rem_pio2+0x318>
 80190d8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8019338 <__kernel_rem_pio2+0x320>
 80190dc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80190e0:	9303      	str	r3, [sp, #12]
 80190e2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80190e6:	464d      	mov	r5, r9
 80190e8:	00eb      	lsls	r3, r5, #3
 80190ea:	9304      	str	r3, [sp, #16]
 80190ec:	ab92      	add	r3, sp, #584	; 0x248
 80190ee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80190f2:	f10d 0b18 	add.w	fp, sp, #24
 80190f6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80190f8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80190fc:	465e      	mov	r6, fp
 80190fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019102:	4628      	mov	r0, r5
 8019104:	2800      	cmp	r0, #0
 8019106:	f1a2 0208 	sub.w	r2, r2, #8
 801910a:	dc4c      	bgt.n	80191a6 <__kernel_rem_pio2+0x18e>
 801910c:	4620      	mov	r0, r4
 801910e:	9105      	str	r1, [sp, #20]
 8019110:	f000 faf2 	bl	80196f8 <scalbn>
 8019114:	eeb0 8b40 	vmov.f64	d8, d0
 8019118:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801911c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8019120:	f000 fa76 	bl	8019610 <floor>
 8019124:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8019128:	eea0 8b47 	vfms.f64	d8, d0, d7
 801912c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8019130:	2c00      	cmp	r4, #0
 8019132:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8019136:	ee17 8a90 	vmov	r8, s15
 801913a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801913e:	9905      	ldr	r1, [sp, #20]
 8019140:	dd43      	ble.n	80191ca <__kernel_rem_pio2+0x1b2>
 8019142:	1e68      	subs	r0, r5, #1
 8019144:	ab06      	add	r3, sp, #24
 8019146:	f1c4 0c18 	rsb	ip, r4, #24
 801914a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801914e:	fa46 f20c 	asr.w	r2, r6, ip
 8019152:	4490      	add	r8, r2
 8019154:	fa02 f20c 	lsl.w	r2, r2, ip
 8019158:	1ab6      	subs	r6, r6, r2
 801915a:	f1c4 0217 	rsb	r2, r4, #23
 801915e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8019162:	4116      	asrs	r6, r2
 8019164:	2e00      	cmp	r6, #0
 8019166:	dd3f      	ble.n	80191e8 <__kernel_rem_pio2+0x1d0>
 8019168:	f04f 0c00 	mov.w	ip, #0
 801916c:	f108 0801 	add.w	r8, r8, #1
 8019170:	4660      	mov	r0, ip
 8019172:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8019176:	4565      	cmp	r5, ip
 8019178:	dc6e      	bgt.n	8019258 <__kernel_rem_pio2+0x240>
 801917a:	2c00      	cmp	r4, #0
 801917c:	dd04      	ble.n	8019188 <__kernel_rem_pio2+0x170>
 801917e:	2c01      	cmp	r4, #1
 8019180:	d07f      	beq.n	8019282 <__kernel_rem_pio2+0x26a>
 8019182:	2c02      	cmp	r4, #2
 8019184:	f000 8087 	beq.w	8019296 <__kernel_rem_pio2+0x27e>
 8019188:	2e02      	cmp	r6, #2
 801918a:	d12d      	bne.n	80191e8 <__kernel_rem_pio2+0x1d0>
 801918c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019190:	ee30 8b48 	vsub.f64	d8, d0, d8
 8019194:	b340      	cbz	r0, 80191e8 <__kernel_rem_pio2+0x1d0>
 8019196:	4620      	mov	r0, r4
 8019198:	9105      	str	r1, [sp, #20]
 801919a:	f000 faad 	bl	80196f8 <scalbn>
 801919e:	9905      	ldr	r1, [sp, #20]
 80191a0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80191a4:	e020      	b.n	80191e8 <__kernel_rem_pio2+0x1d0>
 80191a6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80191aa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80191ae:	3801      	subs	r0, #1
 80191b0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80191b4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80191b8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80191bc:	eca6 0a01 	vstmia	r6!, {s0}
 80191c0:	ed92 0b00 	vldr	d0, [r2]
 80191c4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80191c8:	e79c      	b.n	8019104 <__kernel_rem_pio2+0xec>
 80191ca:	d105      	bne.n	80191d8 <__kernel_rem_pio2+0x1c0>
 80191cc:	1e6a      	subs	r2, r5, #1
 80191ce:	ab06      	add	r3, sp, #24
 80191d0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80191d4:	15f6      	asrs	r6, r6, #23
 80191d6:	e7c5      	b.n	8019164 <__kernel_rem_pio2+0x14c>
 80191d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80191dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80191e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e4:	da36      	bge.n	8019254 <__kernel_rem_pio2+0x23c>
 80191e6:	2600      	movs	r6, #0
 80191e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80191ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f0:	f040 80aa 	bne.w	8019348 <__kernel_rem_pio2+0x330>
 80191f4:	f105 3bff 	add.w	fp, r5, #4294967295
 80191f8:	4658      	mov	r0, fp
 80191fa:	2200      	movs	r2, #0
 80191fc:	4548      	cmp	r0, r9
 80191fe:	da52      	bge.n	80192a6 <__kernel_rem_pio2+0x28e>
 8019200:	2a00      	cmp	r2, #0
 8019202:	f000 8081 	beq.w	8019308 <__kernel_rem_pio2+0x2f0>
 8019206:	ab06      	add	r3, sp, #24
 8019208:	3c18      	subs	r4, #24
 801920a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801920e:	2b00      	cmp	r3, #0
 8019210:	f000 8087 	beq.w	8019322 <__kernel_rem_pio2+0x30a>
 8019214:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019218:	4620      	mov	r0, r4
 801921a:	f000 fa6d 	bl	80196f8 <scalbn>
 801921e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019222:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8019330 <__kernel_rem_pio2+0x318>
 8019226:	a96a      	add	r1, sp, #424	; 0x1a8
 8019228:	f103 0208 	add.w	r2, r3, #8
 801922c:	1888      	adds	r0, r1, r2
 801922e:	4659      	mov	r1, fp
 8019230:	2900      	cmp	r1, #0
 8019232:	f280 80b7 	bge.w	80193a4 <__kernel_rem_pio2+0x38c>
 8019236:	4659      	mov	r1, fp
 8019238:	2900      	cmp	r1, #0
 801923a:	f2c0 80d5 	blt.w	80193e8 <__kernel_rem_pio2+0x3d0>
 801923e:	a86a      	add	r0, sp, #424	; 0x1a8
 8019240:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8019244:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8019328 <__kernel_rem_pio2+0x310>
 8019248:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8019344 <__kernel_rem_pio2+0x32c>
 801924c:	2400      	movs	r4, #0
 801924e:	ebab 0001 	sub.w	r0, fp, r1
 8019252:	e0be      	b.n	80193d2 <__kernel_rem_pio2+0x3ba>
 8019254:	2602      	movs	r6, #2
 8019256:	e787      	b.n	8019168 <__kernel_rem_pio2+0x150>
 8019258:	f8db 2000 	ldr.w	r2, [fp]
 801925c:	b958      	cbnz	r0, 8019276 <__kernel_rem_pio2+0x25e>
 801925e:	b122      	cbz	r2, 801926a <__kernel_rem_pio2+0x252>
 8019260:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8019264:	f8cb 2000 	str.w	r2, [fp]
 8019268:	2201      	movs	r2, #1
 801926a:	f10c 0c01 	add.w	ip, ip, #1
 801926e:	f10b 0b04 	add.w	fp, fp, #4
 8019272:	4610      	mov	r0, r2
 8019274:	e77f      	b.n	8019176 <__kernel_rem_pio2+0x15e>
 8019276:	ebae 0202 	sub.w	r2, lr, r2
 801927a:	f8cb 2000 	str.w	r2, [fp]
 801927e:	4602      	mov	r2, r0
 8019280:	e7f3      	b.n	801926a <__kernel_rem_pio2+0x252>
 8019282:	f105 3cff 	add.w	ip, r5, #4294967295
 8019286:	ab06      	add	r3, sp, #24
 8019288:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801928c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019290:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8019294:	e778      	b.n	8019188 <__kernel_rem_pio2+0x170>
 8019296:	f105 3cff 	add.w	ip, r5, #4294967295
 801929a:	ab06      	add	r3, sp, #24
 801929c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80192a0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80192a4:	e7f4      	b.n	8019290 <__kernel_rem_pio2+0x278>
 80192a6:	ab06      	add	r3, sp, #24
 80192a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80192ac:	3801      	subs	r0, #1
 80192ae:	431a      	orrs	r2, r3
 80192b0:	e7a4      	b.n	80191fc <__kernel_rem_pio2+0x1e4>
 80192b2:	f10c 0c01 	add.w	ip, ip, #1
 80192b6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80192ba:	2800      	cmp	r0, #0
 80192bc:	d0f9      	beq.n	80192b2 <__kernel_rem_pio2+0x29a>
 80192be:	9b04      	ldr	r3, [sp, #16]
 80192c0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80192c4:	eb0d 0203 	add.w	r2, sp, r3
 80192c8:	9b01      	ldr	r3, [sp, #4]
 80192ca:	18e8      	adds	r0, r5, r3
 80192cc:	ab1a      	add	r3, sp, #104	; 0x68
 80192ce:	1c6e      	adds	r6, r5, #1
 80192d0:	3a98      	subs	r2, #152	; 0x98
 80192d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80192d6:	4465      	add	r5, ip
 80192d8:	42b5      	cmp	r5, r6
 80192da:	f6ff af05 	blt.w	80190e8 <__kernel_rem_pio2+0xd0>
 80192de:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80192e2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80192e6:	ee07 3a90 	vmov	s15, r3
 80192ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80192ee:	f04f 0c00 	mov.w	ip, #0
 80192f2:	eca0 7b02 	vstmia	r0!, {d7}
 80192f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8019328 <__kernel_rem_pio2+0x310>
 80192fa:	4680      	mov	r8, r0
 80192fc:	458c      	cmp	ip, r1
 80192fe:	dd07      	ble.n	8019310 <__kernel_rem_pio2+0x2f8>
 8019300:	eca2 7b02 	vstmia	r2!, {d7}
 8019304:	3601      	adds	r6, #1
 8019306:	e7e7      	b.n	80192d8 <__kernel_rem_pio2+0x2c0>
 8019308:	9a03      	ldr	r2, [sp, #12]
 801930a:	f04f 0c01 	mov.w	ip, #1
 801930e:	e7d2      	b.n	80192b6 <__kernel_rem_pio2+0x29e>
 8019310:	ecbe 5b02 	vldmia	lr!, {d5}
 8019314:	ed38 6b02 	vldmdb	r8!, {d6}
 8019318:	f10c 0c01 	add.w	ip, ip, #1
 801931c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019320:	e7ec      	b.n	80192fc <__kernel_rem_pio2+0x2e4>
 8019322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019326:	e76e      	b.n	8019206 <__kernel_rem_pio2+0x1ee>
	...
 8019334:	3e700000 	.word	0x3e700000
 8019338:	00000000 	.word	0x00000000
 801933c:	41700000 	.word	0x41700000
 8019340:	0801d8a8 	.word	0x0801d8a8
 8019344:	0801d868 	.word	0x0801d868
 8019348:	4260      	negs	r0, r4
 801934a:	eeb0 0b48 	vmov.f64	d0, d8
 801934e:	f000 f9d3 	bl	80196f8 <scalbn>
 8019352:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8019530 <__kernel_rem_pio2+0x518>
 8019356:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801935a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801935e:	db18      	blt.n	8019392 <__kernel_rem_pio2+0x37a>
 8019360:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8019538 <__kernel_rem_pio2+0x520>
 8019364:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019368:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801936c:	aa06      	add	r2, sp, #24
 801936e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8019372:	eea5 0b46 	vfms.f64	d0, d5, d6
 8019376:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801937a:	f105 0b01 	add.w	fp, r5, #1
 801937e:	ee10 3a10 	vmov	r3, s0
 8019382:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8019386:	ee17 3a10 	vmov	r3, s14
 801938a:	3418      	adds	r4, #24
 801938c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8019390:	e740      	b.n	8019214 <__kernel_rem_pio2+0x1fc>
 8019392:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8019396:	aa06      	add	r2, sp, #24
 8019398:	ee10 3a10 	vmov	r3, s0
 801939c:	46ab      	mov	fp, r5
 801939e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80193a2:	e737      	b.n	8019214 <__kernel_rem_pio2+0x1fc>
 80193a4:	ac06      	add	r4, sp, #24
 80193a6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80193aa:	9401      	str	r4, [sp, #4]
 80193ac:	ee07 4a90 	vmov	s15, r4
 80193b0:	3901      	subs	r1, #1
 80193b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80193b6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80193ba:	ee20 0b06 	vmul.f64	d0, d0, d6
 80193be:	ed20 7b02 	vstmdb	r0!, {d7}
 80193c2:	e735      	b.n	8019230 <__kernel_rem_pio2+0x218>
 80193c4:	ecbc 5b02 	vldmia	ip!, {d5}
 80193c8:	ecb5 6b02 	vldmia	r5!, {d6}
 80193cc:	3401      	adds	r4, #1
 80193ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80193d2:	454c      	cmp	r4, r9
 80193d4:	dc01      	bgt.n	80193da <__kernel_rem_pio2+0x3c2>
 80193d6:	4284      	cmp	r4, r0
 80193d8:	ddf4      	ble.n	80193c4 <__kernel_rem_pio2+0x3ac>
 80193da:	ac42      	add	r4, sp, #264	; 0x108
 80193dc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80193e0:	ed80 7b00 	vstr	d7, [r0]
 80193e4:	3901      	subs	r1, #1
 80193e6:	e727      	b.n	8019238 <__kernel_rem_pio2+0x220>
 80193e8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80193ea:	2902      	cmp	r1, #2
 80193ec:	dc0a      	bgt.n	8019404 <__kernel_rem_pio2+0x3ec>
 80193ee:	2900      	cmp	r1, #0
 80193f0:	dc2c      	bgt.n	801944c <__kernel_rem_pio2+0x434>
 80193f2:	d045      	beq.n	8019480 <__kernel_rem_pio2+0x468>
 80193f4:	f008 0007 	and.w	r0, r8, #7
 80193f8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80193fc:	ecbd 8b06 	vpop	{d8-d10}
 8019400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019404:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8019406:	2a03      	cmp	r2, #3
 8019408:	d1f4      	bne.n	80193f4 <__kernel_rem_pio2+0x3dc>
 801940a:	aa42      	add	r2, sp, #264	; 0x108
 801940c:	4413      	add	r3, r2
 801940e:	461a      	mov	r2, r3
 8019410:	4619      	mov	r1, r3
 8019412:	4658      	mov	r0, fp
 8019414:	2800      	cmp	r0, #0
 8019416:	f1a1 0108 	sub.w	r1, r1, #8
 801941a:	dc54      	bgt.n	80194c6 <__kernel_rem_pio2+0x4ae>
 801941c:	4659      	mov	r1, fp
 801941e:	2901      	cmp	r1, #1
 8019420:	f1a2 0208 	sub.w	r2, r2, #8
 8019424:	dc5f      	bgt.n	80194e6 <__kernel_rem_pio2+0x4ce>
 8019426:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8019540 <__kernel_rem_pio2+0x528>
 801942a:	3308      	adds	r3, #8
 801942c:	f1bb 0f01 	cmp.w	fp, #1
 8019430:	dc69      	bgt.n	8019506 <__kernel_rem_pio2+0x4ee>
 8019432:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8019436:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801943a:	2e00      	cmp	r6, #0
 801943c:	d16a      	bne.n	8019514 <__kernel_rem_pio2+0x4fc>
 801943e:	ed87 5b00 	vstr	d5, [r7]
 8019442:	ed87 6b02 	vstr	d6, [r7, #8]
 8019446:	ed87 7b04 	vstr	d7, [r7, #16]
 801944a:	e7d3      	b.n	80193f4 <__kernel_rem_pio2+0x3dc>
 801944c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8019540 <__kernel_rem_pio2+0x528>
 8019450:	ab42      	add	r3, sp, #264	; 0x108
 8019452:	441a      	add	r2, r3
 8019454:	465b      	mov	r3, fp
 8019456:	2b00      	cmp	r3, #0
 8019458:	da26      	bge.n	80194a8 <__kernel_rem_pio2+0x490>
 801945a:	b35e      	cbz	r6, 80194b4 <__kernel_rem_pio2+0x49c>
 801945c:	eeb1 7b46 	vneg.f64	d7, d6
 8019460:	ed87 7b00 	vstr	d7, [r7]
 8019464:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8019468:	aa44      	add	r2, sp, #272	; 0x110
 801946a:	2301      	movs	r3, #1
 801946c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019470:	459b      	cmp	fp, r3
 8019472:	da22      	bge.n	80194ba <__kernel_rem_pio2+0x4a2>
 8019474:	b10e      	cbz	r6, 801947a <__kernel_rem_pio2+0x462>
 8019476:	eeb1 7b47 	vneg.f64	d7, d7
 801947a:	ed87 7b02 	vstr	d7, [r7, #8]
 801947e:	e7b9      	b.n	80193f4 <__kernel_rem_pio2+0x3dc>
 8019480:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019540 <__kernel_rem_pio2+0x528>
 8019484:	ab42      	add	r3, sp, #264	; 0x108
 8019486:	441a      	add	r2, r3
 8019488:	f1bb 0f00 	cmp.w	fp, #0
 801948c:	da05      	bge.n	801949a <__kernel_rem_pio2+0x482>
 801948e:	b10e      	cbz	r6, 8019494 <__kernel_rem_pio2+0x47c>
 8019490:	eeb1 7b47 	vneg.f64	d7, d7
 8019494:	ed87 7b00 	vstr	d7, [r7]
 8019498:	e7ac      	b.n	80193f4 <__kernel_rem_pio2+0x3dc>
 801949a:	ed32 6b02 	vldmdb	r2!, {d6}
 801949e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80194a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80194a6:	e7ef      	b.n	8019488 <__kernel_rem_pio2+0x470>
 80194a8:	ed32 7b02 	vldmdb	r2!, {d7}
 80194ac:	3b01      	subs	r3, #1
 80194ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80194b2:	e7d0      	b.n	8019456 <__kernel_rem_pio2+0x43e>
 80194b4:	eeb0 7b46 	vmov.f64	d7, d6
 80194b8:	e7d2      	b.n	8019460 <__kernel_rem_pio2+0x448>
 80194ba:	ecb2 6b02 	vldmia	r2!, {d6}
 80194be:	3301      	adds	r3, #1
 80194c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80194c4:	e7d4      	b.n	8019470 <__kernel_rem_pio2+0x458>
 80194c6:	ed91 7b00 	vldr	d7, [r1]
 80194ca:	ed91 5b02 	vldr	d5, [r1, #8]
 80194ce:	3801      	subs	r0, #1
 80194d0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80194d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80194d8:	ed81 6b00 	vstr	d6, [r1]
 80194dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80194e0:	ed81 7b02 	vstr	d7, [r1, #8]
 80194e4:	e796      	b.n	8019414 <__kernel_rem_pio2+0x3fc>
 80194e6:	ed92 7b00 	vldr	d7, [r2]
 80194ea:	ed92 5b02 	vldr	d5, [r2, #8]
 80194ee:	3901      	subs	r1, #1
 80194f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80194f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80194f8:	ed82 6b00 	vstr	d6, [r2]
 80194fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019500:	ed82 7b02 	vstr	d7, [r2, #8]
 8019504:	e78b      	b.n	801941e <__kernel_rem_pio2+0x406>
 8019506:	ed33 6b02 	vldmdb	r3!, {d6}
 801950a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801950e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019512:	e78b      	b.n	801942c <__kernel_rem_pio2+0x414>
 8019514:	eeb1 5b45 	vneg.f64	d5, d5
 8019518:	eeb1 6b46 	vneg.f64	d6, d6
 801951c:	ed87 5b00 	vstr	d5, [r7]
 8019520:	eeb1 7b47 	vneg.f64	d7, d7
 8019524:	ed87 6b02 	vstr	d6, [r7, #8]
 8019528:	e78d      	b.n	8019446 <__kernel_rem_pio2+0x42e>
 801952a:	bf00      	nop
 801952c:	f3af 8000 	nop.w
 8019530:	00000000 	.word	0x00000000
 8019534:	41700000 	.word	0x41700000
 8019538:	00000000 	.word	0x00000000
 801953c:	3e700000 	.word	0x3e700000
	...

08019548 <__kernel_sin>:
 8019548:	ee10 3a90 	vmov	r3, s1
 801954c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019550:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019554:	da04      	bge.n	8019560 <__kernel_sin+0x18>
 8019556:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801955a:	ee17 3a90 	vmov	r3, s15
 801955e:	b35b      	cbz	r3, 80195b8 <__kernel_sin+0x70>
 8019560:	ee20 6b00 	vmul.f64	d6, d0, d0
 8019564:	ee20 5b06 	vmul.f64	d5, d0, d6
 8019568:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80195c0 <__kernel_sin+0x78>
 801956c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80195c8 <__kernel_sin+0x80>
 8019570:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019574:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80195d0 <__kernel_sin+0x88>
 8019578:	eea4 7b06 	vfma.f64	d7, d4, d6
 801957c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80195d8 <__kernel_sin+0x90>
 8019580:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019584:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80195e0 <__kernel_sin+0x98>
 8019588:	eea4 7b06 	vfma.f64	d7, d4, d6
 801958c:	b930      	cbnz	r0, 801959c <__kernel_sin+0x54>
 801958e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80195e8 <__kernel_sin+0xa0>
 8019592:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019596:	eea4 0b05 	vfma.f64	d0, d4, d5
 801959a:	4770      	bx	lr
 801959c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80195a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80195a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80195a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80195ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80195f0 <__kernel_sin+0xa8>
 80195b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80195b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80195b8:	4770      	bx	lr
 80195ba:	bf00      	nop
 80195bc:	f3af 8000 	nop.w
 80195c0:	5acfd57c 	.word	0x5acfd57c
 80195c4:	3de5d93a 	.word	0x3de5d93a
 80195c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80195cc:	be5ae5e6 	.word	0xbe5ae5e6
 80195d0:	57b1fe7d 	.word	0x57b1fe7d
 80195d4:	3ec71de3 	.word	0x3ec71de3
 80195d8:	19c161d5 	.word	0x19c161d5
 80195dc:	bf2a01a0 	.word	0xbf2a01a0
 80195e0:	1110f8a6 	.word	0x1110f8a6
 80195e4:	3f811111 	.word	0x3f811111
 80195e8:	55555549 	.word	0x55555549
 80195ec:	bfc55555 	.word	0xbfc55555
 80195f0:	55555549 	.word	0x55555549
 80195f4:	3fc55555 	.word	0x3fc55555

080195f8 <fabs>:
 80195f8:	ec51 0b10 	vmov	r0, r1, d0
 80195fc:	ee10 2a10 	vmov	r2, s0
 8019600:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019604:	ec43 2b10 	vmov	d0, r2, r3
 8019608:	4770      	bx	lr
 801960a:	0000      	movs	r0, r0
 801960c:	0000      	movs	r0, r0
	...

08019610 <floor>:
 8019610:	ee10 1a90 	vmov	r1, s1
 8019614:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019618:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801961c:	2b13      	cmp	r3, #19
 801961e:	b530      	push	{r4, r5, lr}
 8019620:	ee10 0a10 	vmov	r0, s0
 8019624:	ee10 5a10 	vmov	r5, s0
 8019628:	dc31      	bgt.n	801968e <floor+0x7e>
 801962a:	2b00      	cmp	r3, #0
 801962c:	da15      	bge.n	801965a <floor+0x4a>
 801962e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80196e8 <floor+0xd8>
 8019632:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019636:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963e:	dd07      	ble.n	8019650 <floor+0x40>
 8019640:	2900      	cmp	r1, #0
 8019642:	da4e      	bge.n	80196e2 <floor+0xd2>
 8019644:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019648:	4318      	orrs	r0, r3
 801964a:	d001      	beq.n	8019650 <floor+0x40>
 801964c:	4928      	ldr	r1, [pc, #160]	; (80196f0 <floor+0xe0>)
 801964e:	2000      	movs	r0, #0
 8019650:	460b      	mov	r3, r1
 8019652:	4602      	mov	r2, r0
 8019654:	ec43 2b10 	vmov	d0, r2, r3
 8019658:	e020      	b.n	801969c <floor+0x8c>
 801965a:	4a26      	ldr	r2, [pc, #152]	; (80196f4 <floor+0xe4>)
 801965c:	411a      	asrs	r2, r3
 801965e:	ea01 0402 	and.w	r4, r1, r2
 8019662:	4304      	orrs	r4, r0
 8019664:	d01a      	beq.n	801969c <floor+0x8c>
 8019666:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80196e8 <floor+0xd8>
 801966a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801966e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019676:	ddeb      	ble.n	8019650 <floor+0x40>
 8019678:	2900      	cmp	r1, #0
 801967a:	bfbe      	ittt	lt
 801967c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8019680:	fa40 f303 	asrlt.w	r3, r0, r3
 8019684:	18c9      	addlt	r1, r1, r3
 8019686:	ea21 0102 	bic.w	r1, r1, r2
 801968a:	2000      	movs	r0, #0
 801968c:	e7e0      	b.n	8019650 <floor+0x40>
 801968e:	2b33      	cmp	r3, #51	; 0x33
 8019690:	dd05      	ble.n	801969e <floor+0x8e>
 8019692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019696:	d101      	bne.n	801969c <floor+0x8c>
 8019698:	ee30 0b00 	vadd.f64	d0, d0, d0
 801969c:	bd30      	pop	{r4, r5, pc}
 801969e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80196a2:	f04f 32ff 	mov.w	r2, #4294967295
 80196a6:	40e2      	lsrs	r2, r4
 80196a8:	4202      	tst	r2, r0
 80196aa:	d0f7      	beq.n	801969c <floor+0x8c>
 80196ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80196e8 <floor+0xd8>
 80196b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80196b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80196b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196bc:	ddc8      	ble.n	8019650 <floor+0x40>
 80196be:	2900      	cmp	r1, #0
 80196c0:	da02      	bge.n	80196c8 <floor+0xb8>
 80196c2:	2b14      	cmp	r3, #20
 80196c4:	d103      	bne.n	80196ce <floor+0xbe>
 80196c6:	3101      	adds	r1, #1
 80196c8:	ea20 0002 	bic.w	r0, r0, r2
 80196cc:	e7c0      	b.n	8019650 <floor+0x40>
 80196ce:	2401      	movs	r4, #1
 80196d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80196d4:	fa04 f303 	lsl.w	r3, r4, r3
 80196d8:	4418      	add	r0, r3
 80196da:	42a8      	cmp	r0, r5
 80196dc:	bf38      	it	cc
 80196de:	1909      	addcc	r1, r1, r4
 80196e0:	e7f2      	b.n	80196c8 <floor+0xb8>
 80196e2:	2000      	movs	r0, #0
 80196e4:	4601      	mov	r1, r0
 80196e6:	e7b3      	b.n	8019650 <floor+0x40>
 80196e8:	8800759c 	.word	0x8800759c
 80196ec:	7e37e43c 	.word	0x7e37e43c
 80196f0:	bff00000 	.word	0xbff00000
 80196f4:	000fffff 	.word	0x000fffff

080196f8 <scalbn>:
 80196f8:	ee10 1a90 	vmov	r1, s1
 80196fc:	b510      	push	{r4, lr}
 80196fe:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8019702:	b98c      	cbnz	r4, 8019728 <scalbn+0x30>
 8019704:	ee10 3a10 	vmov	r3, s0
 8019708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801970c:	430b      	orrs	r3, r1
 801970e:	d011      	beq.n	8019734 <scalbn+0x3c>
 8019710:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80197d8 <scalbn+0xe0>
 8019714:	4b3c      	ldr	r3, [pc, #240]	; (8019808 <scalbn+0x110>)
 8019716:	ee20 0b07 	vmul.f64	d0, d0, d7
 801971a:	4298      	cmp	r0, r3
 801971c:	da0b      	bge.n	8019736 <scalbn+0x3e>
 801971e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80197e0 <scalbn+0xe8>
 8019722:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019726:	e005      	b.n	8019734 <scalbn+0x3c>
 8019728:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801972c:	429c      	cmp	r4, r3
 801972e:	d107      	bne.n	8019740 <scalbn+0x48>
 8019730:	ee30 0b00 	vadd.f64	d0, d0, d0
 8019734:	bd10      	pop	{r4, pc}
 8019736:	ee10 1a90 	vmov	r1, s1
 801973a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801973e:	3c36      	subs	r4, #54	; 0x36
 8019740:	4404      	add	r4, r0
 8019742:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8019746:	429c      	cmp	r4, r3
 8019748:	dd0d      	ble.n	8019766 <scalbn+0x6e>
 801974a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80197e8 <scalbn+0xf0>
 801974e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80197f0 <scalbn+0xf8>
 8019752:	eeb0 6b47 	vmov.f64	d6, d7
 8019756:	ee10 3a90 	vmov	r3, s1
 801975a:	2b00      	cmp	r3, #0
 801975c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8019760:	ee27 0b06 	vmul.f64	d0, d7, d6
 8019764:	e7e6      	b.n	8019734 <scalbn+0x3c>
 8019766:	2c00      	cmp	r4, #0
 8019768:	dd0a      	ble.n	8019780 <scalbn+0x88>
 801976a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801976e:	ec53 2b10 	vmov	r2, r3, d0
 8019772:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8019776:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801977a:	ec43 2b10 	vmov	d0, r2, r3
 801977e:	e7d9      	b.n	8019734 <scalbn+0x3c>
 8019780:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8019784:	da19      	bge.n	80197ba <scalbn+0xc2>
 8019786:	f24c 3350 	movw	r3, #50000	; 0xc350
 801978a:	4298      	cmp	r0, r3
 801978c:	ee10 3a90 	vmov	r3, s1
 8019790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019794:	dd09      	ble.n	80197aa <scalbn+0xb2>
 8019796:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80197e8 <scalbn+0xf0>
 801979a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80197f0 <scalbn+0xf8>
 801979e:	eeb0 7b40 	vmov.f64	d7, d0
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80197a8:	e7bb      	b.n	8019722 <scalbn+0x2a>
 80197aa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80197e0 <scalbn+0xe8>
 80197ae:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80197f8 <scalbn+0x100>
 80197b2:	eeb0 7b40 	vmov.f64	d7, d0
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	e7f4      	b.n	80197a4 <scalbn+0xac>
 80197ba:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80197be:	ec53 2b10 	vmov	r2, r3, d0
 80197c2:	3436      	adds	r4, #54	; 0x36
 80197c4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80197c8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80197cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8019800 <scalbn+0x108>
 80197d0:	ec43 2b10 	vmov	d0, r2, r3
 80197d4:	e7a5      	b.n	8019722 <scalbn+0x2a>
 80197d6:	bf00      	nop
 80197d8:	00000000 	.word	0x00000000
 80197dc:	43500000 	.word	0x43500000
 80197e0:	c2f8f359 	.word	0xc2f8f359
 80197e4:	01a56e1f 	.word	0x01a56e1f
 80197e8:	8800759c 	.word	0x8800759c
 80197ec:	7e37e43c 	.word	0x7e37e43c
 80197f0:	8800759c 	.word	0x8800759c
 80197f4:	fe37e43c 	.word	0xfe37e43c
 80197f8:	c2f8f359 	.word	0xc2f8f359
 80197fc:	81a56e1f 	.word	0x81a56e1f
 8019800:	00000000 	.word	0x00000000
 8019804:	3c900000 	.word	0x3c900000
 8019808:	ffff3cb0 	.word	0xffff3cb0

0801980c <_init>:
 801980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801980e:	bf00      	nop
 8019810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019812:	bc08      	pop	{r3}
 8019814:	469e      	mov	lr, r3
 8019816:	4770      	bx	lr

08019818 <_fini>:
 8019818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801981a:	bf00      	nop
 801981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801981e:	bc08      	pop	{r3}
 8019820:	469e      	mov	lr, r3
 8019822:	4770      	bx	lr
