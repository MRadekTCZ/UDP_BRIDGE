
STM32H745_Nucleo_M7_ETH_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019734  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f98  080199d8  080199d8  000299d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d970  0801d970  000300a4  2**0
                  CONTENTS
  4 .ARM          00000000  0801d970  0801d970  000300a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d970  0801d970  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d970  0801d970  0002d970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d974  0801d974  0002d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  24000000  0801d978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010924  240000a4  0801da1c  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240109c8  0801da1c  000309c8  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a649  00000000  00000000  000300d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000084d2  00000000  00000000  0006a71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002738  00000000  00000000  00072bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002570  00000000  00000000  00075328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049e3e  00000000  00000000  00077898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d5ae  00000000  00000000  000c16d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a56e1  00000000  00000000  000fec84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002a4365  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ac70  00000000  00000000  002a43b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a4 	.word	0x240000a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080199bc 	.word	0x080199bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a8 	.word	0x240000a8
 80002dc:	080199bc 	.word	0x080199bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <updateCurrentTime>:
#include "Modbus.h"
void updateCurrentTime(struct Time *currentTime, unsigned int milliseconds)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b08b      	sub	sp, #44	; 0x2c
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
    currentTime->miliSeconds += milliseconds;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	441a      	add	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	60da      	str	r2, [r3, #12]

    if (currentTime->miliSeconds >= 1000)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ca:	f0c0 809f 	bcc.w	800060c <updateCurrentTime+0x160>
    {
        currentTime->miliSeconds -= 1000;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	60da      	str	r2, [r3, #12]
        currentTime->seconds++;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]

        if (currentTime->seconds >= 60)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	2b3b      	cmp	r3, #59	; 0x3b
 80004ea:	f240 808f 	bls.w	800060c <updateCurrentTime+0x160>
        {
            currentTime->seconds = 0;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
            currentTime->minutes++;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	605a      	str	r2, [r3, #4]

            if (currentTime->minutes >= 60)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	2b3b      	cmp	r3, #59	; 0x3b
 8000504:	f240 8082 	bls.w	800060c <updateCurrentTime+0x160>
            {
                currentTime->minutes = 0;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
                currentTime->hours++;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	601a      	str	r2, [r3, #0]

                if (currentTime->hours >= 24)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b17      	cmp	r3, #23
 800051e:	d975      	bls.n	800060c <updateCurrentTime+0x160>
                {
                    // Obliczamy, ile dni minęło od 1 sierpnia 2020 roku
                    unsigned int daysSinceStart = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
                    for (int year = 2020; year < 2023; year++)
 8000524:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8000528:	623b      	str	r3, [r7, #32]
 800052a:	e00f      	b.n	800054c <updateCurrentTime+0xa0>
                    {
                        daysSinceStart += (year % 4 == 0) ? 366 : 365;
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	f003 0303 	and.w	r3, r3, #3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <updateCurrentTime+0x90>
 8000536:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800053a:	e001      	b.n	8000540 <updateCurrentTime+0x94>
 800053c:	f240 136d 	movw	r3, #365	; 0x16d
 8000540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000542:	4413      	add	r3, r2
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
                    for (int year = 2020; year < 2023; year++)
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	3301      	adds	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	f240 72e6 	movw	r2, #2022	; 0x7e6
 8000552:	4293      	cmp	r3, r2
 8000554:	ddea      	ble.n	800052c <updateCurrentTime+0x80>
                    }
                    // Dodajemy dni od początku roku do obecnego dnia
                    daysSinceStart += 213; // 1 sierpnia to dzień 213 w roku 2020
 8000556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000558:	33d5      	adds	r3, #213	; 0xd5
 800055a:	627b      	str	r3, [r7, #36]	; 0x24

                    // Obliczamy ile dni minęło
                    unsigned int totalDays = daysSinceStart + (currentTime->hours / 24);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2d      	ldr	r2, [pc, #180]	; (8000618 <updateCurrentTime+0x16c>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	091b      	lsrs	r3, r3, #4
 8000568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800056a:	4413      	add	r3, r2
 800056c:	61fb      	str	r3, [r7, #28]
                    currentTime->hours %= 24;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6819      	ldr	r1, [r3, #0]
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <updateCurrentTime+0x16c>)
 8000574:	fba3 2301 	umull	r2, r3, r3, r1
 8000578:	091a      	lsrs	r2, r3, #4
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	1aca      	subs	r2, r1, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]

                    // Obliczamy rok, miesiąc i dzień na podstawie liczby dni
                    int year = 2020;
 8000588:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800058c:	61bb      	str	r3, [r7, #24]
                    while (1)
                    {
                        int daysInYear = (year % 4 == 0) ? 366 : 365;
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d102      	bne.n	800059e <updateCurrentTime+0xf2>
 8000598:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800059c:	e001      	b.n	80005a2 <updateCurrentTime+0xf6>
 800059e:	f240 136d 	movw	r3, #365	; 0x16d
 80005a2:	60fb      	str	r3, [r7, #12]
                        if (totalDays < daysInYear)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d307      	bcc.n	80005bc <updateCurrentTime+0x110>
                            break;
                        totalDays -= daysInYear;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	61fb      	str	r3, [r7, #28]
                        year++;
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	3301      	adds	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
                    {
 80005ba:	e7e8      	b.n	800058e <updateCurrentTime+0xe2>
                            break;
 80005bc:	bf00      	nop
                    }

                    // Obliczamy miesiąc i dzień na podstawie liczby dni
                    int month, day;
                    int daysInMonth;
                    for (month = 1; month <= 12; month++)
 80005be:	2301      	movs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e01b      	b.n	80005fc <updateCurrentTime+0x150>
                    {
                        if (month == 2 && (year % 4 == 0))
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d107      	bne.n	80005da <updateCurrentTime+0x12e>
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <updateCurrentTime+0x12e>
                            daysInMonth = 29;
 80005d4:	231d      	movs	r3, #29
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	e005      	b.n	80005e6 <updateCurrentTime+0x13a>
                        else
                        {
                            static const int daysInMonthArray[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                            daysInMonth = daysInMonthArray[month - 1];
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <updateCurrentTime+0x170>)
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	613b      	str	r3, [r7, #16]
                        }
                        if (totalDays < daysInMonth)
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d30a      	bcc.n	8000604 <updateCurrentTime+0x158>
                            break;
                        totalDays -= daysInMonth;
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	61fb      	str	r3, [r7, #28]
                    for (month = 1; month <= 12; month++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	2b0c      	cmp	r3, #12
 8000600:	dde0      	ble.n	80005c4 <updateCurrentTime+0x118>
 8000602:	e000      	b.n	8000606 <updateCurrentTime+0x15a>
                            break;
 8000604:	bf00      	nop
                    }
                    day = totalDays + 1; // +1, ponieważ dni zaczynają się od 1
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3301      	adds	r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
                    //day - dzień (1 - 31)
                }
            }
        }
    }
};
 800060c:	bf00      	nop
 800060e:	372c      	adds	r7, #44	; 0x2c
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	aaaaaaab 	.word	0xaaaaaaab
 800061c:	0801d4c4 	.word	0x0801d4c4

08000620 <vApplicationStackOverflowHook>:

/* USER CODE BEGIN 4 */
//void TimeTask(void *argument);
//void SinTask(void *argument);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 800062a:	be00      	bkpt	0x0000
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <MX_FREERTOS_Init+0x18>)
 800063e:	2100      	movs	r1, #0
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_FREERTOS_Init+0x1c>)
 8000642:	f005 fce0 	bl	8006006 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <MX_FREERTOS_Init+0x20>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0801d4f4 	.word	0x0801d4f4
 8000654:	0800065d 	.word	0x0800065d
 8000658:	240000c0 	.word	0x240000c0

0800065c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000664:	f004 fd7a 	bl	800515c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  udpserver_init();
 8000668:	f000 ff60 	bl	800152c <udpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f005 fd68 	bl	8006142 <osDelay>
 8000672:	e7fb      	b.n	800066c <StartDefaultTask+0x10>

08000674 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <MX_GPIO_Init+0x144>)
 800068c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000690:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069a:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <MX_GPIO_Init+0x144>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a8:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	4a42      	ldr	r2, [pc, #264]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	4a33      	ldr	r2, [pc, #204]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <MX_GPIO_Init+0x144>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <MX_GPIO_Init+0x144>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	f003 0308 	and.w	r3, r3, #8
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_GPIO_Init+0x144>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800073e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000744:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4819      	ldr	r0, [pc, #100]	; (80007bc <MX_GPIO_Init+0x148>)
 8000756:	f002 ffe9 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800075a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800076c:	2307      	movs	r3, #7
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_GPIO_Init+0x14c>)
 8000778:	f002 ffd8 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800077c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800078e:	230a      	movs	r3, #10
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <MX_GPIO_Init+0x150>)
 800079a:	f002 ffc7 	bl	800372c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2107      	movs	r1, #7
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f001 f994 	bl	8001ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a8:	2028      	movs	r0, #40	; 0x28
 80007aa:	f001 f9ab 	bl	8001b04 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58020800 	.word	0x58020800
 80007c0:	58020c00 	.word	0x58020c00
 80007c4:	58020000 	.word	0x58020000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
for (int i = 0; i< 10 ; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e02a      	b.n	800082a <main+0x62>
{
	reg_mdb[i] = 1+i*11+i*i*7+i*i*3;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	0092      	lsls	r2, r2, #2
 80007dc:	441a      	add	r2, r3
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	b299      	uxth	r1, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	fb11 f303 	smulbb	r3, r1, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	00c9      	lsls	r1, r1, #3
 80007f6:	1acb      	subs	r3, r1, r3
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	b299      	uxth	r1, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	b29b      	uxth	r3, r3
 8000806:	fb11 f303 	smulbb	r3, r1, r3
 800080a:	b29b      	uxth	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	440b      	add	r3, r1
 8000812:	b29b      	uxth	r3, r3
 8000814:	4413      	add	r3, r2
 8000816:	b29b      	uxth	r3, r3
 8000818:	3301      	adds	r3, #1
 800081a:	b299      	uxth	r1, r3
 800081c:	4a55      	ldr	r2, [pc, #340]	; (8000974 <main+0x1ac>)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (int i = 0; i< 10 ; i++)
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b09      	cmp	r3, #9
 800082e:	ddd1      	ble.n	80007d4 <main+0xc>
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000830:	f000 f946 	bl	8000ac0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000834:	4b50      	ldr	r3, [pc, #320]	; (8000978 <main+0x1b0>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11b      	bne.n	8000878 <main+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000840:	f3bf 8f4f 	dsb	sy
}
 8000844:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000846:	f3bf 8f6f 	isb	sy
}
 800084a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800084c:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <main+0x1b0>)
 800084e:	2200      	movs	r2, #0
 8000850:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000854:	f3bf 8f4f 	dsb	sy
}
 8000858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085a:	f3bf 8f6f 	isb	sy
}
 800085e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000860:	4b45      	ldr	r3, [pc, #276]	; (8000978 <main+0x1b0>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a44      	ldr	r2, [pc, #272]	; (8000978 <main+0x1b0>)
 8000866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000872:	f3bf 8f6f 	isb	sy
}
 8000876:	e000      	b.n	800087a <main+0xb2>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000878:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <main+0x1b0>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d138      	bne.n	80008f8 <main+0x130>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000886:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <main+0x1b0>)
 8000888:	2200      	movs	r2, #0
 800088a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800088e:	f3bf 8f4f 	dsb	sy
}
 8000892:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000894:	4b38      	ldr	r3, [pc, #224]	; (8000978 <main+0x1b0>)
 8000896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800089a:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	0b5b      	lsrs	r3, r3, #13
 80008a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008a4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	015a      	lsls	r2, r3, #5
 80008b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008b8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008be:	492e      	ldr	r1, [pc, #184]	; (8000978 <main+0x1b0>)
 80008c0:	4313      	orrs	r3, r2
 80008c2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	60ba      	str	r2, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ef      	bne.n	80008b0 <main+0xe8>
    } while(sets-- != 0U);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	60fa      	str	r2, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1e5      	bne.n	80008a6 <main+0xde>
  __ASM volatile ("dsb 0xF":::"memory");
 80008da:	f3bf 8f4f 	dsb	sy
}
 80008de:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <main+0x1b0>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4a24      	ldr	r2, [pc, #144]	; (8000978 <main+0x1b0>)
 80008e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ec:	f3bf 8f4f 	dsb	sy
}
 80008f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
}
 80008f6:	e000      	b.n	80008fa <main+0x132>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008f8:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 ffb5 	bl	8001868 <HAL_Init>

  /* USER CODE BEGIN Init */
  Modbus_reg1.setvoltage = 400;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <main+0x1b4>)
 8000900:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000904:	601a      	str	r2, [r3, #0]
  Modbus_reg1.currentTime_modbus.hours = 12;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <main+0x1b4>)
 8000908:	220c      	movs	r2, #12
 800090a:	60da      	str	r2, [r3, #12]
  Modbus_reg1.currentTime_modbus.minutes = 30;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <main+0x1b4>)
 800090e:	221e      	movs	r2, #30
 8000910:	611a      	str	r2, [r3, #16]
  Modbus_reg1.currentTime_modbus.seconds = 10;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <main+0x1b4>)
 8000914:	220a      	movs	r2, #10
 8000916:	615a      	str	r2, [r3, #20]
  Modbus_reg1.currentTime_modbus.miliSeconds = 1;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <main+0x1b4>)
 800091a:	2201      	movs	r2, #1
 800091c:	619a      	str	r2, [r3, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f835 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f7ff fea7 	bl	8000674 <MX_GPIO_Init>
  MX_TIM13_Init();
 8000926:	f000 fb6f 	bl	8001008 <MX_TIM13_Init>
  MX_TIM14_Init();
 800092a:	f000 fb91 	bl	8001050 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim13);
 800092e:	4814      	ldr	r0, [pc, #80]	; (8000980 <main+0x1b8>)
 8000930:	f004 f98c 	bl	8004c4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <main+0x1bc>)
 8000936:	f004 f989 	bl	8004c4c <HAL_TIM_Base_Start_IT>
   * Release M4 core after GPIO and peripherals init
   * to avoid conflict.
   */


  __HAL_RCC_HSEM_CLK_ENABLE();
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <main+0x1c0>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <main+0x1c0>)
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <main+0x1c0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
  HAL_HSEM_FastTake(HSEM_ID_0);
 8000958:	2000      	movs	r0, #0
 800095a:	f003 f8b1 	bl	8003ac0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800095e:	2100      	movs	r1, #0
 8000960:	2000      	movs	r0, #0
 8000962:	f003 f8c7 	bl	8003af4 <HAL_HSEM_Release>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000966:	f005 faef 	bl	8005f48 <osKernelInitialize>
  MX_FREERTOS_Init();
 800096a:	f7ff fe65 	bl	8000638 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800096e:	f005 fb0f 	bl	8005f90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000972:	e7fe      	b.n	8000972 <main+0x1aa>
 8000974:	24000318 	.word	0x24000318
 8000978:	e000ed00 	.word	0xe000ed00
 800097c:	240000d4 	.word	0x240000d4
 8000980:	24000144 	.word	0x24000144
 8000984:	24000190 	.word	0x24000190
 8000988:	58024400 	.word	0x58024400

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	; 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	224c      	movs	r2, #76	; 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f017 f84b 	bl	8017a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f017 f845 	bl	8017a36 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009ac:	2004      	movs	r0, #4
 80009ae:	f003 f8b5 	bl	8003b1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <SystemClock_Config+0xf0>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	4a30      	ldr	r2, [pc, #192]	; (8000a7c <SystemClock_Config+0xf0>)
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <SystemClock_Config+0xf0>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <SystemClock_Config+0xf4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <SystemClock_Config+0xf4>)
 80009d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <SystemClock_Config+0xf4>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e4:	bf00      	nop
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <SystemClock_Config+0xf4>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009f2:	d1f8      	bne.n	80009e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f4:	2302      	movs	r3, #2
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2302      	movs	r3, #2
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a04:	2300      	movs	r3, #0
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000a0c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 f8ce 	bl	8003bd0 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a3a:	f000 f935 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	233f      	movs	r3, #63	; 0x3f
 8000a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2303      	movs	r3, #3
 8000a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a4e:	2340      	movs	r3, #64	; 0x40
 8000a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2102      	movs	r1, #2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fce1 	bl	800442c <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a70:	f000 f91a 	bl	8000ca8 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3770      	adds	r7, #112	; 0x70
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58000400 	.word	0x58000400
 8000a80:	58024800 	.word	0x58024800

08000a84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) // Przycisk niebieski to pin 13
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a94:	d109      	bne.n	8000aaa <HAL_GPIO_EXTI_Callback+0x26>
    {
        // Tutaj umieść kod obsługi przerwania
        // Możesz np. zmienić stan diody LED lub wykonać inne czynności
    	Modbus_reg1.counter_bt1 ++;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a9e:	6093      	str	r3, [r2, #8]
    	reg_mdb[14] = (Modbus_reg1.counter_bt1);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_GPIO_EXTI_Callback+0x38>)
 8000aa8:	839a      	strh	r2, [r3, #28]
    }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	240000d4 	.word	0x240000d4
 8000abc:	24000318 	.word	0x24000318

08000ac0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ad2:	f001 f825 	bl	8001b20 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ae2:	231f      	movs	r3, #31
 8000ae4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ae6:	2387      	movs	r3, #135	; 0x87
 8000ae8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aee:	2300      	movs	r3, #0
 8000af0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b02:	463b      	mov	r3, r7
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 f843 	bl	8001b90 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU_Config+0x9c>)
 8000b10:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000b12:	2310      	movs	r3, #16
 8000b14:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b26:	463b      	mov	r3, r7
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 f831 	bl	8001b90 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MPU_Config+0xa0>)
 8000b34:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000b36:	2308      	movs	r3, #8
 8000b38:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f821 	bl	8001b90 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f000 fffe 	bl	8001b50 <HAL_MPU_Enable>

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	30020000 	.word	0x30020000
 8000b60:	30040000 	.word	0x30040000
 8000b64:	00000000 	.word	0x00000000

08000b68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a42      	ldr	r2, [pc, #264]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7a:	f000 feb1 	bl	80018e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM13) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d11b      	bne.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x58>
	  updateCurrentTime(&currentTime, 1);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	483f      	ldr	r0, [pc, #252]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000b8c:	f7ff fc8e 	bl	80004ac <updateCurrentTime>
	  updateCurrentTime(&Modbus_reg1.currentTime_modbus, 1);
 8000b90:	2101      	movs	r1, #1
 8000b92:	483e      	ldr	r0, [pc, #248]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b94:	f7ff fc8a 	bl	80004ac <updateCurrentTime>
	  reg_mdb[10] = Modbus_reg1.currentTime_modbus.miliSeconds;
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ba0:	829a      	strh	r2, [r3, #20]
	  reg_mdb[11] = Modbus_reg1.currentTime_modbus.seconds;
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000baa:	82da      	strh	r2, [r3, #22]
	  reg_mdb[12] = Modbus_reg1.currentTime_modbus.minutes;
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bb4:	831a      	strh	r2, [r3, #24]
	  reg_mdb[13] = Modbus_reg1.currentTime_modbus.hours;
 8000bb6:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000bbe:	835a      	strh	r2, [r3, #26]

;


  }
  if (htim->Instance == TIM14) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a34      	ldr	r2, [pc, #208]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d146      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0xf0>

	  sin_current = (unsigned int)round(20000*sin(elapsedTime*0.1*50*3.14)+20000);
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bd6:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000c60 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bde:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000c68 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000be2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000be6:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000c70 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bee:	eeb0 0b47 	vmov.f64	d0, d7
 8000bf2:	f018 f8ed 	bl	8018dd0 <sin>
 8000bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8000bfa:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000c78 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000bfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c02:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000c78 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000c06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c0a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c0e:	f018 f897 	bl	8018d40 <round>
 8000c12:	eeb0 7b40 	vmov.f64	d7, d0
 8000c16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1a:	ee17 3a90 	vmov	r3, s15
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c22:	801a      	strh	r2, [r3, #0]
	  Modbus_reg1.sin_current = sin_current;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c2c:	605a      	str	r2, [r3, #4]
	  reg_mdb[15] = Modbus_reg1.sin_current;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c36:	83da      	strh	r2, [r3, #30]

	  elapsedTime++;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c42:	801a      	strh	r2, [r3, #0]

	  Modbus_reg1.setvoltage = setter[0];
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c4c:	601a      	str	r2, [r3, #0]
	  reg_mdb[16] = Modbus_reg1.setvoltage;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c56:	841a      	strh	r2, [r3, #32]


  }
  /* USER CODE END Callback 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	9999999a 	.word	0x9999999a
 8000c64:	3fb99999 	.word	0x3fb99999
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	40490000 	.word	0x40490000
 8000c70:	51eb851f 	.word	0x51eb851f
 8000c74:	40091eb8 	.word	0x40091eb8
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	40d38800 	.word	0x40d38800
 8000c80:	40001000 	.word	0x40001000
 8000c84:	40001c00 	.word	0x40001c00
 8000c88:	240000c4 	.word	0x240000c4
 8000c8c:	240000e0 	.word	0x240000e0
 8000c90:	240000d4 	.word	0x240000d4
 8000c94:	24000318 	.word	0x24000318
 8000c98:	40002000 	.word	0x40002000
 8000c9c:	240000f2 	.word	0x240000f2
 8000ca0:	240000f0 	.word	0x240000f0
 8000ca4:	24000008 	.word	0x24000008

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x48>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_MspInit+0x48>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_MspInit+0x48>)
 8000ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f06f 0001 	mvn.w	r0, #1
 8000ce0:	f000 fef6 	bl	8001ad0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 5, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	2094      	movs	r0, #148	; 0x94
 8000cea:	f000 fef1 	bl	8001ad0 <HAL_NVIC_SetPriority>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8000cee:	2094      	movs	r0, #148	; 0x94
 8000cf0:	f000 ff08 	bl	8001b04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	; 0x40
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d827      	bhi.n	8000d5e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	2036      	movs	r0, #54	; 0x36
 8000d14:	f000 fedc 	bl	8001ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d18:	2036      	movs	r0, #54	; 0x36
 8000d1a:	f000 fef3 	bl	8001b04 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_InitTick+0xc4>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d2a:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d42:	f107 0210 	add.w	r2, r7, #16
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fee3 	bl	8004b18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d106      	bne.n	8000d6a <HAL_InitTick+0x6a>
 8000d5c:	e001      	b.n	8000d62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e02b      	b.n	8000dba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d62:	f003 fec3 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8000d66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000d68:	e004      	b.n	8000d74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6a:	f003 febf 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_InitTick+0xcc>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9b      	lsrs	r3, r3, #18
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000da2:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000da4:	f003 fefa 	bl	8004b9c <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d104      	bne.n	8000db8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000db0:	f003 ff4c 	bl	8004c4c <HAL_TIM_Base_Start_IT>
 8000db4:	4603      	mov	r3, r0
 8000db6:	e000      	b.n	8000dba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3740      	adds	r7, #64	; 0x40
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000014 	.word	0x24000014
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	240000f4 	.word	0x240000f4
 8000dd4:	40001000 	.word	0x40001000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e0c:	f002 fe3e 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000e1a:	f003 ff8f 	bl	8004d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000144 	.word	0x24000144

08000e28 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000e2e:	f003 ff85 	bl	8004d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000190 	.word	0x24000190

08000e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM6_DAC_IRQHandler+0x10>)
 8000e42:	f003 ff7b 	bl	8004d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	240000f4 	.word	0x240000f4

08000e50 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <ETH_IRQHandler+0x10>)
 8000e56:	f001 fab7 	bl	80023c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	24000464 	.word	0x24000464

08000e64 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
	return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_kill>:

int _kill(int pid, int sig)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <_kill+0x20>)
 8000e90:	2216      	movs	r2, #22
 8000e92:	601a      	str	r2, [r3, #0]
	return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	240109c4 	.word	0x240109c4

08000ea8 <_exit>:

void _exit (int status)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffe5 	bl	8000e84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eba:	e7fe      	b.n	8000eba <_exit+0x12>

08000ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
	}

return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x12>
	}
	return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
	return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d205      	bcs.n	8000fd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <_sbrk+0x6c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	24080000 	.word	0x24080000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	24000140 	.word	0x24000140
 8001000:	240109c8 	.word	0x240109c8
 8001004:	240109c4 	.word	0x240109c4

08001008 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_TIM13_Init+0x40>)
 800100e:	4a0f      	ldr	r2, [pc, #60]	; (800104c <MX_TIM13_Init+0x44>)
 8001010:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 3999;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_TIM13_Init+0x40>)
 8001014:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001018:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_TIM13_Init+0x40>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 99;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_TIM13_Init+0x40>)
 8001022:	2263      	movs	r2, #99	; 0x63
 8001024:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_TIM13_Init+0x40>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_TIM13_Init+0x40>)
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_TIM13_Init+0x40>)
 8001034:	f003 fdb2 	bl	8004b9c <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800103e:	f7ff fe33 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24000144 	.word	0x24000144
 800104c:	40001c00 	.word	0x40001c00

08001050 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_TIM14_Init+0x40>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <MX_TIM14_Init+0x44>)
 8001058:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3999;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_TIM14_Init+0x40>)
 800105c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001060:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_TIM14_Init+0x40>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_TIM14_Init+0x40>)
 800106a:	f242 720f 	movw	r2, #9999	; 0x270f
 800106e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_TIM14_Init+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_TIM14_Init+0x40>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_TIM14_Init+0x40>)
 800107e:	f003 fd8d 	bl	8004b9c <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001088:	f7ff fe0e 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	24000190 	.word	0x24000190
 8001094:	40002000 	.word	0x40002000

08001098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_TIM_Base_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d117      	bne.n	80010da <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_TIM_Base_MspInit+0x88>)
 80010ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <HAL_TIM_Base_MspInit+0x88>)
 80010b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_TIM_Base_MspInit+0x88>)
 80010bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 8, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2108      	movs	r1, #8
 80010cc:	202c      	movs	r0, #44	; 0x2c
 80010ce:	f000 fcff 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80010d2:	202c      	movs	r0, #44	; 0x2c
 80010d4:	f000 fd16 	bl	8001b04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80010d8:	e01b      	b.n	8001112 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM14)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_TIM_Base_MspInit+0x8c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d116      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_TIM_Base_MspInit+0x88>)
 80010e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_TIM_Base_MspInit+0x88>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_TIM_Base_MspInit+0x88>)
 80010f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 6, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2106      	movs	r1, #6
 8001106:	202d      	movs	r0, #45	; 0x2d
 8001108:	f000 fce2 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800110c:	202d      	movs	r0, #45	; 0x2d
 800110e:	f000 fcf9 	bl	8001b04 <HAL_NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40001c00 	.word	0x40001c00
 8001120:	58024400 	.word	0x58024400
 8001124:	40002000 	.word	0x40002000

08001128 <udp_thread>:

/*-----------------------------------------------------------------------------------*/
/**** Send RESPONSE every time the client sends some data ******/
static void udp_thread(void *arg)
//static void udp_thread(struct Modbus_reg *Modbus_register)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800112e:	af00      	add	r7, sp, #0
 8001130:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001134:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001138:	6018      	str	r0, [r3, #0]
	err_t err, recv_err;
	struct pbuf *txBuf;

	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2020      	movs	r0, #32
 8001140:	f008 fdc6 	bl	8009cd0 <netconn_new_with_proto_and_callback>
 8001144:	4603      	mov	r3, r0
 8001146:	4ab3      	ldr	r2, [pc, #716]	; (8001414 <udp_thread+0x2ec>)
 8001148:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 800114a:	4bb2      	ldr	r3, [pc, #712]	; (8001414 <udp_thread+0x2ec>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 81d4 	beq.w	80014fc <udp_thread+0x3d4>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8001154:	4baf      	ldr	r3, [pc, #700]	; (8001414 <udp_thread+0x2ec>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2207      	movs	r2, #7
 800115a:	49af      	ldr	r1, [pc, #700]	; (8001418 <udp_thread+0x2f0>)
 800115c:	4618      	mov	r0, r3
 800115e:	f008 fe71 	bl	8009e44 <netconn_bind>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b

		if (err == ERR_OK)
 8001168:	f997 321b 	ldrsb.w	r3, [r7, #539]	; 0x21b
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 81c0 	bne.w	80014f2 <udp_thread+0x3ca>
		{
			/* The while loop will run everytime this Task is executed */
			while (1)
			{
				/* Receive the data from the connection */
				recv_err = netconn_recv(conn, &buf);
 8001172:	4ba8      	ldr	r3, [pc, #672]	; (8001414 <udp_thread+0x2ec>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	49a9      	ldr	r1, [pc, #676]	; (800141c <udp_thread+0x2f4>)
 8001178:	4618      	mov	r0, r3
 800117a:	f009 f84f 	bl	800a21c <netconn_recv>
 800117e:	4603      	mov	r3, r0
 8001180:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
				for(int reg = 0; reg<50;reg++)
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800118a:	e00e      	b.n	80011aa <udp_thread+0x82>
				{
					reg_mdb_word[reg].data_u = reg_mdb[reg];
 800118c:	4aa4      	ldr	r2, [pc, #656]	; (8001420 <udp_thread+0x2f8>)
 800118e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001192:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001196:	4aa3      	ldr	r2, [pc, #652]	; (8001424 <udp_thread+0x2fc>)
 8001198:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800119c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int reg = 0; reg<50;reg++)
 80011a0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80011a4:	3301      	adds	r3, #1
 80011a6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80011aa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80011ae:	2b31      	cmp	r3, #49	; 0x31
 80011b0:	ddec      	ble.n	800118c <udp_thread+0x64>
				}


				if (recv_err == ERR_OK) // if the data is received
 80011b2:	f997 321a 	ldrsb.w	r3, [r7, #538]	; 0x21a
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1db      	bne.n	8001172 <udp_thread+0x4a>
				{

					//Rembember - there cannot be null bytes in send message (from client)
					addr = netbuf_fromaddr(buf);  // get the address of the client
 80011ba:	4b98      	ldr	r3, [pc, #608]	; (800141c <udp_thread+0x2f4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3308      	adds	r3, #8
 80011c0:	4a99      	ldr	r2, [pc, #612]	; (8001428 <udp_thread+0x300>)
 80011c2:	6013      	str	r3, [r2, #0]
					port = netbuf_fromport(buf);  // get the Port of the client
 80011c4:	4b95      	ldr	r3, [pc, #596]	; (800141c <udp_thread+0x2f4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	899a      	ldrh	r2, [r3, #12]
 80011ca:	4b98      	ldr	r3, [pc, #608]	; (800142c <udp_thread+0x304>)
 80011cc:	801a      	strh	r2, [r3, #0]
					strcpy (msg, buf->p->payload);
 80011ce:	4b93      	ldr	r3, [pc, #588]	; (800141c <udp_thread+0x2f4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4895      	ldr	r0, [pc, #596]	; (8001430 <udp_thread+0x308>)
 80011da:	f016 fdfc 	bl	8017dd6 <strcpy>
					int len;  // get the message from the client
					struct Modbus_ask Ask1;
					struct Modbus_answer Response1;
					//Writing exact bytes to modbus struct
					Ask1.address = msg[0];
 80011de:	4b94      	ldr	r3, [pc, #592]	; (8001430 <udp_thread+0x308>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
					Ask1.function = msg[1];
 80011e6:	4b92      	ldr	r3, [pc, #584]	; (8001430 <udp_thread+0x308>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
					Ask1.offset.data_t[0] = msg[2];
 80011ee:	4b90      	ldr	r3, [pc, #576]	; (8001430 <udp_thread+0x308>)
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
					Ask1.offset.data_t[1] = msg[3];
 80011f6:	4b8e      	ldr	r3, [pc, #568]	; (8001430 <udp_thread+0x308>)
 80011f8:	78db      	ldrb	r3, [r3, #3]
 80011fa:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
					//Ask1.offset.data_u = msg[3];
					Ask1.reg_count.data_t[0] = msg[4];  // Is optional - possible removal
 80011fe:	4b8c      	ldr	r3, [pc, #560]	; (8001430 <udp_thread+0x308>)
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
					Ask1.reg_count.data_t[1] = msg[5];
 8001206:	4b8a      	ldr	r3, [pc, #552]	; (8001430 <udp_thread+0x308>)
 8001208:	795b      	ldrb	r3, [r3, #5]
 800120a:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
					Ask1.crc.data_t[0] = msg[6];
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <udp_thread+0x308>)
 8001210:	799b      	ldrb	r3, [r3, #6]
 8001212:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
					Ask1.crc.data_t[1] = msg[7];
 8001216:	4b86      	ldr	r3, [pc, #536]	; (8001430 <udp_thread+0x308>)
 8001218:	79db      	ldrb	r3, [r3, #7]
 800121a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
					Response1.address = msg[0];
 800121e:	4b84      	ldr	r3, [pc, #528]	; (8001430 <udp_thread+0x308>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001226:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800122a:	701a      	strb	r2, [r3, #0]
					Response1.function = msg[1];
 800122c:	4b80      	ldr	r3, [pc, #512]	; (8001430 <udp_thread+0x308>)
 800122e:	785a      	ldrb	r2, [r3, #1]
 8001230:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001234:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001238:	705a      	strb	r2, [r3, #1]
					Response1.data_count = msg[5];
 800123a:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <udp_thread+0x308>)
 800123c:	795a      	ldrb	r2, [r3, #5]
 800123e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001242:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001246:	711a      	strb	r2, [r3, #4]
					int data_inkrement = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					if (Ask1.address == 0x01 && Ask1.function == 0x03)
 800124e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8001252:	2b01      	cmp	r3, #1
 8001254:	f040 8087 	bne.w	8001366 <udp_thread+0x23e>
 8001258:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800125c:	2b03      	cmp	r3, #3
 800125e:	f040 8082 	bne.w	8001366 <udp_thread+0x23e>
					{

						for (data_inkrement = 0; data_inkrement < Response1.data_count; data_inkrement++)
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001268:	e049      	b.n	80012fe <udp_thread+0x1d6>
							{
								Response1.data[data_inkrement].data_t[1] = reg_mdb_word[Ask1.offset.data_u+data_inkrement].data_t[1];
 800126a:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800126e:	461a      	mov	r2, r3
 8001270:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001274:	4413      	add	r3, r2
 8001276:	4a6b      	ldr	r2, [pc, #428]	; (8001424 <udp_thread+0x2fc>)
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	7859      	ldrb	r1, [r3, #1]
 800127e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001282:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8001286:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	460a      	mov	r2, r1
 8001290:	71da      	strb	r2, [r3, #7]
								Response1.data[data_inkrement].data_t[0] = reg_mdb_word[Ask1.offset.data_u+data_inkrement].data_t[0];
 8001292:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001296:	461a      	mov	r2, r3
 8001298:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800129c:	4413      	add	r3, r2
 800129e:	4a61      	ldr	r2, [pc, #388]	; (8001424 <udp_thread+0x2fc>)
 80012a0:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80012a4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80012a8:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80012ac:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	460a      	mov	r2, r1
 80012b6:	719a      	strb	r2, [r3, #6]
								smsg[3+data_inkrement*2] = Response1.data[data_inkrement].data_t[1];
 80012b8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	1cda      	adds	r2, r3, #3
 80012c0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80012c4:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 80012c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	440b      	add	r3, r1
 80012d0:	79d9      	ldrb	r1, [r3, #7]
 80012d2:	4b58      	ldr	r3, [pc, #352]	; (8001434 <udp_thread+0x30c>)
 80012d4:	5499      	strb	r1, [r3, r2]
								smsg[4+data_inkrement*2] = Response1.data[data_inkrement].data_t[0];
 80012d6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012da:	3302      	adds	r3, #2
 80012dc:	005a      	lsls	r2, r3, #1
 80012de:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80012e2:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 80012e6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	440b      	add	r3, r1
 80012ee:	7999      	ldrb	r1, [r3, #6]
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <udp_thread+0x30c>)
 80012f2:	5499      	strb	r1, [r3, r2]
						for (data_inkrement = 0; data_inkrement < Response1.data_count; data_inkrement++)
 80012f4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80012fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001302:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	461a      	mov	r2, r3
 800130a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800130e:	4293      	cmp	r3, r2
 8001310:	dbab      	blt.n	800126a <udp_thread+0x142>
								//smsg[3+data_inkrement*2] = 0x12;
								//smsg[4+data_inkrement*2] = 0xA0;
							}
						smsg[0] = Response1.address;
 8001312:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001316:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <udp_thread+0x30c>)
 800131e:	701a      	strb	r2, [r3, #0]
						smsg[1] = Response1.function;
 8001320:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001324:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001328:	785a      	ldrb	r2, [r3, #1]
 800132a:	4b42      	ldr	r3, [pc, #264]	; (8001434 <udp_thread+0x30c>)
 800132c:	705a      	strb	r2, [r3, #1]
						smsg[2] = Response1.data_count;
 800132e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001332:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001336:	791a      	ldrb	r2, [r3, #4]
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <udp_thread+0x30c>)
 800133a:	709a      	strb	r2, [r3, #2]
						smsg[5+(data_inkrement*2)-2] = 0xBA; //CRC1
 800133c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	3303      	adds	r3, #3
 8001344:	4a3b      	ldr	r2, [pc, #236]	; (8001434 <udp_thread+0x30c>)
 8001346:	21ba      	movs	r1, #186	; 0xba
 8001348:	54d1      	strb	r1, [r2, r3]
						smsg[6+(data_inkrement*2)-2] = 0xAB; //CRC2
 800134a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800134e:	3302      	adds	r3, #2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <udp_thread+0x30c>)
 8001354:	21ab      	movs	r1, #171	; 0xab
 8001356:	54d1      	strb	r1, [r2, r3]
						len = 5+(data_inkrement*2);
 8001358:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	3305      	adds	r3, #5
 8001360:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8001364:	e08d      	b.n	8001482 <udp_thread+0x35a>
						case 6:
							len = sprintf (smsg, "\"%i\" Odpowiedz klienta - rejestr 6\n", reg_mdb[6]);
							break;
						}*/
					}
						else if (msg[0] == 0x0E)
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <udp_thread+0x308>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b0e      	cmp	r3, #14
 800136c:	f040 8082 	bne.w	8001474 <udp_thread+0x34c>
						{
							switch(msg[1]){
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <udp_thread+0x308>)
 8001372:	785b      	ldrb	r3, [r3, #1]
 8001374:	2b06      	cmp	r3, #6
 8001376:	f200 8084 	bhi.w	8001482 <udp_thread+0x35a>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <udp_thread+0x258>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	0800139d 	.word	0x0800139d
 8001384:	080013bb 	.word	0x080013bb
 8001388:	080013d9 	.word	0x080013d9
 800138c:	080013f7 	.word	0x080013f7
 8001390:	08001483 	.word	0x08001483
 8001394:	08001483 	.word	0x08001483
 8001398:	08001449 	.word	0x08001449
							case 0:
								reg_mdb[0] = msg[2];
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <udp_thread+0x308>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <udp_thread+0x2f8>)
 80013a4:	801a      	strh	r2, [r3, #0]
								len = sprintf (smsg, " Ustawiono milisekundy na \"%i\" \n", reg_mdb[0]);
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <udp_thread+0x2f8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4922      	ldr	r1, [pc, #136]	; (8001438 <udp_thread+0x310>)
 80013ae:	4821      	ldr	r0, [pc, #132]	; (8001434 <udp_thread+0x30c>)
 80013b0:	f016 fcae 	bl	8017d10 <siprintf>
 80013b4:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
								break;
 80013b8:	e063      	b.n	8001482 <udp_thread+0x35a>
							case 1:
								reg_mdb[1] = msg[2];
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <udp_thread+0x308>)
 80013bc:	789b      	ldrb	r3, [r3, #2]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <udp_thread+0x2f8>)
 80013c2:	805a      	strh	r2, [r3, #2]
								len = sprintf (smsg, " Ustawiono sekundy na \"%i\" \n", reg_mdb[1]);
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <udp_thread+0x2f8>)
 80013c6:	885b      	ldrh	r3, [r3, #2]
 80013c8:	461a      	mov	r2, r3
 80013ca:	491c      	ldr	r1, [pc, #112]	; (800143c <udp_thread+0x314>)
 80013cc:	4819      	ldr	r0, [pc, #100]	; (8001434 <udp_thread+0x30c>)
 80013ce:	f016 fc9f 	bl	8017d10 <siprintf>
 80013d2:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
								break;
 80013d6:	e054      	b.n	8001482 <udp_thread+0x35a>
							case 2:
								reg_mdb[2] = msg[2];
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <udp_thread+0x308>)
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <udp_thread+0x2f8>)
 80013e0:	809a      	strh	r2, [r3, #4]
								len = sprintf (smsg, " Ustawiono minuty na \"%i\" \n", reg_mdb[2]);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <udp_thread+0x2f8>)
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4915      	ldr	r1, [pc, #84]	; (8001440 <udp_thread+0x318>)
 80013ea:	4812      	ldr	r0, [pc, #72]	; (8001434 <udp_thread+0x30c>)
 80013ec:	f016 fc90 	bl	8017d10 <siprintf>
 80013f0:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
								break;
 80013f4:	e045      	b.n	8001482 <udp_thread+0x35a>
							case 3:
								reg_mdb[3] = msg[2];
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <udp_thread+0x308>)
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <udp_thread+0x2f8>)
 80013fe:	80da      	strh	r2, [r3, #6]
								len = sprintf (smsg, " Ustawiono godziny na \"%i\" \n", reg_mdb[3]);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <udp_thread+0x2f8>)
 8001402:	88db      	ldrh	r3, [r3, #6]
 8001404:	461a      	mov	r2, r3
 8001406:	490f      	ldr	r1, [pc, #60]	; (8001444 <udp_thread+0x31c>)
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <udp_thread+0x30c>)
 800140a:	f016 fc81 	bl	8017d10 <siprintf>
 800140e:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
								break;
 8001412:	e036      	b.n	8001482 <udp_thread+0x35a>
 8001414:	240001dc 	.word	0x240001dc
 8001418:	0801d538 	.word	0x0801d538
 800141c:	240001e0 	.word	0x240001e0
 8001420:	24000318 	.word	0x24000318
 8001424:	2400037c 	.word	0x2400037c
 8001428:	240001e4 	.word	0x240001e4
 800142c:	240001e8 	.word	0x240001e8
 8001430:	240001ec 	.word	0x240001ec
 8001434:	24000250 	.word	0x24000250
 8001438:	080199e4 	.word	0x080199e4
 800143c:	08019a08 	.word	0x08019a08
 8001440:	08019a28 	.word	0x08019a28
 8001444:	08019a44 	.word	0x08019a44

							case 6:
								setter[0] = msg[2]*256 + msg[3];
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <udp_thread+0x3e0>)
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	b29b      	uxth	r3, r3
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b29a      	uxth	r2, r3
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <udp_thread+0x3e0>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <udp_thread+0x3e4>)
 800145e:	801a      	strh	r2, [r3, #0]
								len = sprintf (smsg, " Ustawiono napiecie na \"%i\" \n", setter[0]);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <udp_thread+0x3e4>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	492a      	ldr	r1, [pc, #168]	; (8001510 <udp_thread+0x3e8>)
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <udp_thread+0x3ec>)
 800146a:	f016 fc51 	bl	8017d10 <siprintf>
 800146e:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
								break;
 8001472:	e006      	b.n	8001482 <udp_thread+0x35a>
							}
						}

					else
						{len = sprintf (smsg, "\"%s\" bledne zapytanie \n", msg);}
 8001474:	4a24      	ldr	r2, [pc, #144]	; (8001508 <udp_thread+0x3e0>)
 8001476:	4928      	ldr	r1, [pc, #160]	; (8001518 <udp_thread+0x3f0>)
 8001478:	4826      	ldr	r0, [pc, #152]	; (8001514 <udp_thread+0x3ec>)
 800147a:	f016 fc49 	bl	8017d10 <siprintf>
 800147e:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
					// Or modify the message received, so that we can send it back to the client
					//int len = sprintf (smsg, "\"%s\" was sent by the Client\n", (char *) buf->p->payload);


					/* allocate pbuf from RAM*/
					txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8001482:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001486:	b29b      	uxth	r3, r3
 8001488:	f44f 7220 	mov.w	r2, #640	; 0x280
 800148c:	4619      	mov	r1, r3
 800148e:	2036      	movs	r0, #54	; 0x36
 8001490:	f00e f818 	bl	800f4c4 <pbuf_alloc>
 8001494:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214

					/* copy the data into the buffer  */
					pbuf_take(txBuf, smsg, len);
 8001498:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800149c:	b29b      	uxth	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	491c      	ldr	r1, [pc, #112]	; (8001514 <udp_thread+0x3ec>)
 80014a2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80014a6:	f00e fd69 	bl	800ff7c <pbuf_take>

					// refer the nebuf->pbuf to our pbuf
					buf->p = txBuf;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <udp_thread+0x3f4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80014b2:	601a      	str	r2, [r3, #0]

					netconn_connect(conn, addr, port);  // connect to the destination address and port
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <udp_thread+0x3f8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <udp_thread+0x3fc>)
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <udp_thread+0x400>)
 80014be:	8812      	ldrh	r2, [r2, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 fcf7 	bl	8009eb4 <netconn_connect>

					netconn_send(conn,buf);  // send the netbuf to the client
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <udp_thread+0x3f8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <udp_thread+0x3f4>)
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f008 ff1d 	bl	800a310 <netconn_send>

					buf->addr.addr = 0;  // clear the address
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <udp_thread+0x3f4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
					pbuf_free(txBuf);   // clear the pbuf
 80014de:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80014e2:	f00e fad3 	bl	800fa8c <pbuf_free>
					netbuf_delete(buf);  // delete the netbuf
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <udp_thread+0x3f4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00d fc2a 	bl	800ed44 <netbuf_delete>
				recv_err = netconn_recv(conn, &buf);
 80014f0:	e63f      	b.n	8001172 <udp_thread+0x4a>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <udp_thread+0x3f8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 fc88 	bl	8009e0c <netconn_delete>
		}
	}
}
 80014fc:	bf00      	nop
 80014fe:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240001ec 	.word	0x240001ec
 800150c:	24000008 	.word	0x24000008
 8001510:	08019a64 	.word	0x08019a64
 8001514:	24000250 	.word	0x24000250
 8001518:	08019a84 	.word	0x08019a84
 800151c:	240001e0 	.word	0x240001e0
 8001520:	240001dc 	.word	0x240001dc
 8001524:	240001e4 	.word	0x240001e4
 8001528:	240001e8 	.word	0x240001e8

0800152c <udpserver_init>:


void udpserver_init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af02      	add	r7, sp, #8
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001532:	2318      	movs	r3, #24
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800153a:	2200      	movs	r2, #0
 800153c:	4903      	ldr	r1, [pc, #12]	; (800154c <udpserver_init+0x20>)
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <udpserver_init+0x24>)
 8001540:	f00e ff58 	bl	80103f4 <sys_thread_new>
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	08001129 	.word	0x08001129
 8001550:	08019a9c 	.word	0x08019a9c

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001558:	f7fe ff12 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	; (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f016 f9f9 	bl	8017978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff f91f 	bl	80007c8 <main>
  bx  lr
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001590:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001594:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 8001598:	0801d978 	.word	0x0801d978
  ldr r2, =_sbss
 800159c:	240000a4 	.word	0x240000a4
  ldr r4, =_ebss
 80015a0:	240109c8 	.word	0x240109c8

080015a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC3_IRQHandler>

080015a6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <LAN8742_RegisterBusIO+0x28>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <LAN8742_RegisterBusIO+0x28>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <LAN8742_RegisterBusIO+0x28>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e014      	b.n	80015fe <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d17c      	bne.n	8001724 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e01c      	b.n	800167e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	f107 0208 	add.w	r2, r7, #8
 800164c:	2112      	movs	r1, #18
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	4798      	blx	r3
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	da03      	bge.n	8001660 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001658:	f06f 0304 	mvn.w	r3, #4
 800165c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800165e:	e00b      	b.n	8001678 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	d105      	bne.n	8001678 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
         break;
 8001676:	e005      	b.n	8001684 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b1f      	cmp	r3, #31
 8001682:	d9df      	bls.n	8001644 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b1f      	cmp	r3, #31
 800168a:	d902      	bls.n	8001692 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800168c:	f06f 0302 	mvn.w	r3, #2
 8001690:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d145      	bne.n	8001724 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6810      	ldr	r0, [r2, #0]
 80016a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a4:	2100      	movs	r1, #0
 80016a6:	4798      	blx	r3
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db37      	blt.n	800171e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6810      	ldr	r0, [r2, #0]
 80016b6:	f107 0208 	add.w	r2, r7, #8
 80016ba:	2100      	movs	r1, #0
 80016bc:	4798      	blx	r3
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db28      	blt.n	8001716 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4798      	blx	r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016ce:	e01c      	b.n	800170a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4798      	blx	r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e2:	d80e      	bhi.n	8001702 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6810      	ldr	r0, [r2, #0]
 80016ec:	f107 0208 	add.w	r2, r7, #8
 80016f0:	2100      	movs	r1, #0
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da07      	bge.n	800170a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80016fa:	f06f 0304 	mvn.w	r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
                 break;
 8001700:	e010      	b.n	8001724 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001702:	f06f 0301 	mvn.w	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
               break;
 8001708:	e00c      	b.n	8001724 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1dd      	bne.n	80016d0 <LAN8742_Init+0xc6>
 8001714:	e006      	b.n	8001724 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001716:	f06f 0304 	mvn.w	r3, #4
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	e002      	b.n	8001724 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800171e:	f06f 0303 	mvn.w	r3, #3
 8001722:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d112      	bne.n	8001750 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4798      	blx	r3
 8001730:	4603      	mov	r3, r0
 8001732:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001734:	bf00      	nop
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4798      	blx	r3
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001748:	d9f5      	bls.n	8001736 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001750:	693b      	ldr	r3, [r7, #16]
 }
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6810      	ldr	r0, [r2, #0]
 800176e:	f107 020c 	add.w	r2, r7, #12
 8001772:	2101      	movs	r1, #1
 8001774:	4798      	blx	r3
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	da02      	bge.n	8001782 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800177c:	f06f 0304 	mvn.w	r3, #4
 8001780:	e06e      	b.n	8001860 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6810      	ldr	r0, [r2, #0]
 800178a:	f107 020c 	add.w	r2, r7, #12
 800178e:	2101      	movs	r1, #1
 8001790:	4798      	blx	r3
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	da02      	bge.n	800179e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001798:	f06f 0304 	mvn.w	r3, #4
 800179c:	e060      	b.n	8001860 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80017a8:	2301      	movs	r3, #1
 80017aa:	e059      	b.n	8001860 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6810      	ldr	r0, [r2, #0]
 80017b4:	f107 020c 	add.w	r2, r7, #12
 80017b8:	2100      	movs	r1, #0
 80017ba:	4798      	blx	r3
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da02      	bge.n	80017c8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017c2:	f06f 0304 	mvn.w	r3, #4
 80017c6:	e04b      	b.n	8001860 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11b      	bne.n	800180a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <LAN8742_GetLinkState+0x90>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e03a      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e033      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001802:	2304      	movs	r3, #4
 8001804:	e02c      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001806:	2305      	movs	r3, #5
 8001808:	e02a      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6810      	ldr	r0, [r2, #0]
 8001812:	f107 020c 	add.w	r2, r7, #12
 8001816:	211f      	movs	r1, #31
 8001818:	4798      	blx	r3
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	da02      	bge.n	8001826 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001820:	f06f 0304 	mvn.w	r3, #4
 8001824:	e01c      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001830:	2306      	movs	r3, #6
 8001832:	e015      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 031c 	and.w	r3, r3, #28
 800183a:	2b18      	cmp	r3, #24
 800183c:	d101      	bne.n	8001842 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800183e:	2302      	movs	r3, #2
 8001840:	e00e      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f003 031c 	and.w	r3, r3, #28
 8001848:	2b08      	cmp	r3, #8
 800184a:	d101      	bne.n	8001850 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800184c:	2303      	movs	r3, #3
 800184e:	e007      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 031c 	and.w	r3, r3, #28
 8001856:	2b14      	cmp	r3, #20
 8001858:	d101      	bne.n	800185e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800185a:	2304      	movs	r3, #4
 800185c:	e000      	b.n	8001860 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800185e:	2305      	movs	r3, #5
    }				
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f923 	bl	8001aba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001874:	f002 ff90 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_Init+0x68>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <HAL_Init+0x6c>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_Init+0x68>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_Init+0x6c>)
 800189c:	5cd3      	ldrb	r3, [r2, r3]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <HAL_Init+0x70>)
 80018aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_Init+0x74>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	200f      	movs	r0, #15
 80018b4:	f7ff fa24 	bl	8000d00 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e002      	b.n	80018c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018c2:	f7ff f9f7 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	58024400 	.word	0x58024400
 80018d4:	0801d4b4 	.word	0x0801d4b4
 80018d8:	24000004 	.word	0x24000004
 80018dc:	24000000 	.word	0x24000000

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	24000018 	.word	0x24000018
 8001904:	240003e0 	.word	0x240003e0

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	240003e0 	.word	0x240003e0

08001920 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetREVID+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0c1b      	lsrs	r3, r3, #16
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	5c001000 	.word	0x5c001000

08001938 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001948:	4904      	ldr	r1, [pc, #16]	; (800195c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	58000400 	.word	0x58000400

08001960 <__NVIC_SetPriorityGrouping>:
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	4313      	orrs	r3, r2
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	05fa0000 	.word	0x05fa0000

080019a8 <__NVIC_GetPriorityGrouping>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff4c 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ade:	f7ff ff63 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001ae2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7ff ffb3 	bl	8001a54 <NVIC_EncodePriority>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff82 	bl	8001a00 <__NVIC_SetPriority>
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff56 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b24:	f3bf 8f5f 	dmb	sy
}
 8001b28:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_MPU_Disable+0x28>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_MPU_Disable+0x28>)
 8001b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b34:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_MPU_Disable+0x2c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	e000ed90 	.word	0xe000ed90

08001b50 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_MPU_Enable+0x38>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_MPU_Enable+0x3c>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_MPU_Enable+0x3c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b6e:	f3bf 8f4f 	dsb	sy
}
 8001b72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b74:	f3bf 8f6f 	isb	sy
}
 8001b78:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed90 	.word	0xe000ed90
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	785a      	ldrb	r2, [r3, #1]
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_MPU_ConfigRegion+0x84>)
 8001b9e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d029      	beq.n	8001bfc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_MPU_ConfigRegion+0x84>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7adb      	ldrb	r3, [r3, #11]
 8001bba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7a9b      	ldrb	r3, [r3, #10]
 8001bc2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7b5b      	ldrb	r3, [r3, #13]
 8001bca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7b9b      	ldrb	r3, [r3, #14]
 8001bd2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7bdb      	ldrb	r3, [r3, #15]
 8001bda:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a5b      	ldrb	r3, [r3, #9]
 8001be2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001be4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7a1b      	ldrb	r3, [r3, #8]
 8001bea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bf6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bf8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001bfa:	e005      	b.n	8001c08 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_MPU_ConfigRegion+0x84>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <HAL_MPU_ConfigRegion+0x84>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed90 	.word	0xe000ed90

08001c18 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_GetCurrentCPUID+0x24>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d101      	bne.n	8001c2e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e000      	b.n	8001c30 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001c2e:	2301      	movs	r3, #1
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0cf      	b.n	8001df2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2223      	movs	r2, #35	; 0x23
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f003 fe69 	bl	800593c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_ETH_Init+0x1bc>)
 8001c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c70:	4a62      	ldr	r2, [pc, #392]	; (8001dfc <HAL_ETH_Init+0x1bc>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c7a:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_ETH_Init+0x1bc>)
 8001c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7a1b      	ldrb	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fe51 	bl	8001938 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c96:	e003      	b.n	8001ca0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c98:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c9c:	f7ff fe4c 	bl	8001938 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_ETH_Init+0x1c0>)
 8001ca2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cbc:	f7ff fe24 	bl	8001908 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cc2:	e011      	b.n	8001ce8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cc4:	f7ff fe20 	bl	8001908 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cd2:	d909      	bls.n	8001ce8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	22e0      	movs	r2, #224	; 0xe0
 8001ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e084      	b.n	8001df2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e4      	bne.n	8001cc4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 ff3c 	bl	8002b78 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001d00:	f002 fec4 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a3f      	ldr	r2, [pc, #252]	; (8001e04 <HAL_ETH_Init+0x1c4>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9a      	lsrs	r2, r3, #18
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3a01      	subs	r2, #1
 8001d14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f001 f935 	bl	8002f88 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d2a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d3a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	22e0      	movs	r2, #224	; 0xe0
 8001d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e049      	b.n	8001df2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_ETH_Init+0x1c8>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6952      	ldr	r2, [r2, #20]
 8001d72:	0051      	lsls	r1, r2, #1
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d7e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f001 f99d 	bl	80030c2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f001 f9e3 	bl	8003154 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	3305      	adds	r3, #5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	021a      	lsls	r2, r3, #8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	3303      	adds	r3, #3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	061a      	lsls	r2, r3, #24
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	3302      	adds	r3, #2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dcc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dda:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ddc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2210      	movs	r2, #16
 8001dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58000400 	.word	0x58000400
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	ffff8001 	.word	0xffff8001

08001e0c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d179      	bne.n	8001f12 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2223      	movs	r2, #35	; 0x23
 8001e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <HAL_ETH_Start_IT+0x110>)
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_ETH_Start_IT+0x114>)
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2204      	movs	r2, #4
 8001e58:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f9eb 	bl	8002236 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0202 	orr.w	r2, r2, #2
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eac:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ec8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001ee0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ee4:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001efc:	430b      	orrs	r3, r1
 8001efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f02:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2223      	movs	r2, #35	; 0x23
 8001f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	0c020060 	.word	0x0c020060
 8001f20:	0c20c000 	.word	0x0c20c000

08001f24 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f32:	2b23      	cmp	r3, #35	; 0x23
 8001f34:	d165      	bne.n	8002002 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2223      	movs	r2, #35	; 0x23
 8001f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f46:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_ETH_Stop_IT+0xec>)
 8001f50:	400b      	ands	r3, r1
 8001f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f56:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f72:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f8e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0202 	bic.w	r2, r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e00e      	b.n	8001fea <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	3212      	adds	r2, #18
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d9ed      	bls.n	8001fcc <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	ffff2f3e 	.word	0xffff2f3e

08002014 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e03a      	b.n	80020ae <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800203e:	2b23      	cmp	r3, #35	; 0x23
 8002040:	d134      	bne.n	80020ac <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800204a:	2201      	movs	r2, #1
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f001 f8de 	bl	8003210 <ETH_Prepare_Tx_Descriptors>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e01f      	b.n	80020ae <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800206e:	f3bf 8f4f 	dsb	sy
}
 8002072:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	2b03      	cmp	r3, #3
 8002084:	d904      	bls.n	8002090 <HAL_ETH_Transmit_IT+0x7c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	1f1a      	subs	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3106      	adds	r1, #6
 800209c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b088      	sub	sp, #32
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0a5      	b.n	800222e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e8:	2b23      	cmp	r3, #35	; 0x23
 80020ea:	d001      	beq.n	80020f0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e09e      	b.n	800222e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	3212      	adds	r2, #18
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002106:	f1c3 0304 	rsb	r3, r3, #4
 800210a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800210c:	e067      	b.n	80021de <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_ETH_ReadData+0x88>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03d      	beq.n	80021ba <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00d      	beq.n	8002184 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002194:	461a      	mov	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f003 fdb7 	bl	8005d0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d902      	bls.n	80021cc <HAL_ETH_ReadData+0x116>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b04      	subs	r3, #4
 80021ca:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	3212      	adds	r2, #18
 80021d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db06      	blt.n	80021f4 <HAL_ETH_ReadData+0x13e>
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d202      	bcs.n	80021f4 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d08c      	beq.n	800210e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	441a      	add	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f814 	bl	8002236 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b088      	sub	sp, #32
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002242:	2301      	movs	r3, #1
 8002244:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800224a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	3212      	adds	r2, #18
 8002252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002256:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800225e:	e03b      	b.n	80022d8 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d112      	bne.n	800228e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fd1d 	bl	8005cac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	74fb      	strb	r3, [r7, #19]
 800227c:	e007      	b.n	800228e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	461a      	mov	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	461a      	mov	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d021      	beq.n	80022d8 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002294:	f3bf 8f5f 	dmb	sy
}
 8002298:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	e003      	b.n	80022b4 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d902      	bls.n	80022c6 <ETH_UpdateDescriptor+0x90>
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3b04      	subs	r3, #4
 80022c4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	3212      	adds	r2, #18
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	617b      	str	r3, [r7, #20]
      desccount--;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <ETH_UpdateDescriptor+0xae>
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1bd      	bne.n	8002260 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d00d      	beq.n	800230a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	461a      	mov	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3318      	adds	r3, #24
 800231e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002330:	e03f      	b.n	80023b2 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002332:	2301      	movs	r3, #1
 8002334:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3b01      	subs	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	3304      	adds	r3, #4
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	3301      	adds	r3, #1
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d028      	beq.n	80023b2 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db1b      	blt.n	80023ae <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	3304      	adds	r3, #4
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fd2a 	bl	8005ddc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	3304      	adds	r3, #4
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	3301      	adds	r3, #1
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80023ac:	e001      	b.n	80023b2 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_ETH_ReleaseTxPacket+0xac>
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1b9      	bne.n	8002332 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d115      	bne.n	8002410 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d10b      	bne.n	8002410 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	461a      	mov	r2, r3
 8002402:	f248 0340 	movw	r3, #32832	; 0x8040
 8002406:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f003 f800 	bl	8005410 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002418:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d115      	bne.n	8002450 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10b      	bne.n	8002450 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	461a      	mov	r2, r3
 8002442:	f248 0301 	movw	r3, #32769	; 0x8001
 8002446:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f002 fff0 	bl	8005430 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800245c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002464:	d153      	bne.n	800250e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247a:	d148      	bne.n	800250e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f043 0208 	orr.w	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002494:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d11e      	bne.n	80024e0 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80024ae:	f241 1302 	movw	r3, #4354	; 0x1102
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024d2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	22e0      	movs	r2, #224	; 0xe0
 80024da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80024de:	e013      	b.n	8002508 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80024ec:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fe:	461a      	mov	r2, r3
 8002500:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8002504:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f002 ffa1 	bl	8005450 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002516:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002528:	2b00      	cmp	r3, #0
 800252a:	d019      	beq.n	8002560 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	22e0      	movs	r2, #224	; 0xe0
 800254e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f002 ff7c 	bl	8005450 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b10      	cmp	r3, #16
 800256e:	d10f      	bne.n	8002590 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002578:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f844 	bl	8002610 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b20      	cmp	r3, #32
 800259e:	d10f      	bne.n	80025c0 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f836 	bl	8002624 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80025c0:	f7ff fb2a 	bl	8001c18 <HAL_GetCurrentCPUID>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d10d      	bne.n	80025e6 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_ETH_IRQHandler+0x240>)
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d014      	beq.n	8002600 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_ETH_IRQHandler+0x240>)
 80025d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f82a 	bl	8002638 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80025e4:	e00c      	b.n	8002600 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_ETH_IRQHandler+0x244>)
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_ETH_IRQHandler+0x244>)
 80025f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f81c 	bl	8002638 <HAL_ETH_WakeUpCallback>
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58000080 	.word	0x58000080
 800260c:	580000c0 	.word	0x580000c0

08002610 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e03e      	b.n	80026ec <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002676:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	055b      	lsls	r3, r3, #21
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f043 030c 	orr.w	r3, r3, #12
 800269a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80026ae:	f7ff f92b 	bl	8001908 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80026b4:	e009      	b.n	80026ca <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80026b6:	f7ff f927 	bl	8001908 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c4:	d901      	bls.n	80026ca <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e010      	b.n	80026ec <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ed      	bne.n	80026b6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e03c      	b.n	8002790 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800271e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	055b      	lsls	r3, r3, #21
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 030c 	bic.w	r3, r3, #12
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_ETH_WritePHYRegister+0xa4>)
 8002756:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800275a:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_ETH_WritePHYRegister+0xa4>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002762:	f7ff f8d1 	bl	8001908 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002768:	e009      	b.n	800277e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800276a:	f7ff f8cd 	bl	8001908 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002778:	d901      	bls.n	800277e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e008      	b.n	8002790 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ed      	bne.n	800276a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40028000 	.word	0x40028000

0800279c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e1c3      	b.n	8002b38 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800283e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800292a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80029c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0e5b      	lsrs	r3, r3, #25
 80029fa:	f003 021f 	and.w	r2, r3, #31
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 020f 	and.w	r2, r3, #15
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ac4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ad4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e00b      	b.n	8002b70 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d105      	bne.n	8002b6e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f86d 	bl	8002c44 <ETH_SetMACConfig>

    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b92:	f001 ff7b 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8002b96:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d908      	bls.n	8002bb2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d804      	bhi.n	8002bb2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e027      	b.n	8002c02 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d908      	bls.n	8002bcc <HAL_ETH_SetMDIOClockRange+0x54>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d204      	bcs.n	8002bcc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e01a      	b.n	8002c02 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d303      	bcc.n	8002bdc <HAL_ETH_SetMDIOClockRange+0x64>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d911      	bls.n	8002c00 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d908      	bls.n	8002bf6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d804      	bhi.n	8002bf6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e005      	b.n	8002c02 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e000      	b.n	8002c02 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c00:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	01312cff 	.word	0x01312cff
 8002c18:	02160ebf 	.word	0x02160ebf
 8002c1c:	03938700 	.word	0x03938700
 8002c20:	05f5e0ff 	.word	0x05f5e0ff
 8002c24:	08f0d17f 	.word	0x08f0d17f

08002c28 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002c5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	7b1b      	ldrb	r3, [r3, #12]
 8002c64:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	7b5b      	ldrb	r3, [r3, #13]
 8002c6c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	7b9b      	ldrb	r3, [r3, #14]
 8002c74:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7bdb      	ldrb	r3, [r3, #15]
 8002c7c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	7c12      	ldrb	r2, [r2, #16]
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d102      	bne.n	8002c8e <ETH_SetMACConfig+0x4a>
 8002c88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c8c:	e000      	b.n	8002c90 <ETH_SetMACConfig+0x4c>
 8002c8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	7c52      	ldrb	r2, [r2, #17]
 8002c96:	2a00      	cmp	r2, #0
 8002c98:	d102      	bne.n	8002ca0 <ETH_SetMACConfig+0x5c>
 8002c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c9e:	e000      	b.n	8002ca2 <ETH_SetMACConfig+0x5e>
 8002ca0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ca2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	7c9b      	ldrb	r3, [r3, #18]
 8002ca8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002caa:	431a      	orrs	r2, r3
               macconf->Speed |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002cb0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002cb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7f1b      	ldrb	r3, [r3, #28]
 8002cbc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7f5b      	ldrb	r3, [r3, #29]
 8002cc4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002cc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	7f92      	ldrb	r2, [r2, #30]
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d102      	bne.n	8002cd6 <ETH_SetMACConfig+0x92>
 8002cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd4:	e000      	b.n	8002cd8 <ETH_SetMACConfig+0x94>
 8002cd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002cd8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	7fdb      	ldrb	r3, [r3, #31]
 8002cde:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ce0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d102      	bne.n	8002cf2 <ETH_SetMACConfig+0xae>
 8002cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf0:	e000      	b.n	8002cf4 <ETH_SetMACConfig+0xb0>
 8002cf2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002cf4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d02:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d04:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <ETH_SetMACConfig+0x22c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d2e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d38:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d42:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d102      	bne.n	8002d56 <ETH_SetMACConfig+0x112>
 8002d50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d54:	e000      	b.n	8002d58 <ETH_SetMACConfig+0x114>
 8002d56:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d58:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <ETH_SetMACConfig+0x230>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <ETH_SetMACConfig+0x234>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002da0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002da6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	d101      	bne.n	8002db6 <ETH_SetMACConfig+0x172>
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	e000      	b.n	8002db8 <ETH_SetMACConfig+0x174>
 8002db6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002db8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002dce:	4013      	ands	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002de0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002de8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f023 0103 	bic.w	r1, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e0e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	d101      	bne.n	8002e32 <ETH_SetMACConfig+0x1ee>
 8002e2e:	2240      	movs	r2, #64	; 0x40
 8002e30:	e000      	b.n	8002e34 <ETH_SetMACConfig+0x1f0>
 8002e32:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002e34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002e3c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e46:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e54:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	00048083 	.word	0x00048083
 8002e74:	c0f88000 	.word	0xc0f88000
 8002e78:	fffffef0 	.word	0xfffffef0

08002e7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <ETH_SetDMAConfig+0xf8>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	6811      	ldr	r1, [r2, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	791b      	ldrb	r3, [r3, #4]
 8002ea8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7b1b      	ldrb	r3, [r3, #12]
 8002eb4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <ETH_SetDMAConfig+0xfc>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ed4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7b5b      	ldrb	r3, [r3, #13]
 8002eda:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <ETH_SetDMAConfig+0x100>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	68f9      	ldr	r1, [r7, #12]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f00:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7d1b      	ldrb	r3, [r3, #20]
 8002f0c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7f5b      	ldrb	r3, [r3, #29]
 8002f14:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f22:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <ETH_SetDMAConfig+0x104>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	68f9      	ldr	r1, [r7, #12]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f36:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	7f1b      	ldrb	r3, [r3, #28]
 8002f3e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f50:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <ETH_SetDMAConfig+0x108>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f64:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	ffff87fd 	.word	0xffff87fd
 8002f78:	ffff2ffe 	.word	0xffff2ffe
 8002f7c:	fffec000 	.word	0xfffec000
 8002f80:	ffc0efef 	.word	0xffc0efef
 8002f84:	7fc0ffff 	.word	0x7fc0ffff

08002f88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b0a4      	sub	sp, #144	; 0x90
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f96:	2300      	movs	r3, #0
 8002f98:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002fe0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003002:	2300      	movs	r3, #0
 8003004:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003006:	2300      	movs	r3, #0
 8003008:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800300a:	2300      	movs	r3, #0
 800300c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003020:	2320      	movs	r3, #32
 8003022:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003032:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800303c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003062:	2300      	movs	r3, #0
 8003064:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800306c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fde6 	bl	8002c44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003078:	2301      	movs	r3, #1
 800307a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003092:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003096:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800309c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80030a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fee1 	bl	8002e7c <ETH_SetDMAConfig>
}
 80030ba:	bf00      	nop
 80030bc:	3790      	adds	r7, #144	; 0x90
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e01d      	b.n	800310c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68d9      	ldr	r1, [r3, #12]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2200      	movs	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	3206      	adds	r2, #6
 8003102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3301      	adds	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d9de      	bls.n	80030d0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003120:	461a      	mov	r2, r3
 8003122:	2303      	movs	r3, #3
 8003124:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003134:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003144:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e023      	b.n	80031aa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	3212      	adds	r2, #18
 80031a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d9d8      	bls.n	8003162 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d6:	461a      	mov	r2, r3
 80031d8:	2303      	movs	r3, #3
 80031da:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003210:	b480      	push	{r7}
 8003212:	b08d      	sub	sp, #52	; 0x34
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3318      	adds	r3, #24
 8003220:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003252:	d007      	beq.n	8003264 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	3304      	adds	r3, #4
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e259      	b.n	800371c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d044      	beq.n	80032fe <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	4b75      	ldr	r3, [pc, #468]	; (8003450 <ETH_Prepare_Tx_Descriptors+0x240>)
 800327a:	4013      	ands	r3, r2
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003280:	431a      	orrs	r2, r3
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d027      	beq.n	80032fe <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	431a      	orrs	r2, r3
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032ec:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003310:	4013      	ands	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	6992      	ldr	r2, [r2, #24]
 8003316:	431a      	orrs	r2, r3
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d036      	beq.n	80033ae <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800334c:	f3bf 8f5f 	dmb	sy
}
 8003350:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	3301      	adds	r3, #1
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	2b03      	cmp	r3, #3
 8003368:	d902      	bls.n	8003370 <ETH_Prepare_Tx_Descriptors+0x160>
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	3b04      	subs	r3, #4
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	3301      	adds	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800338c:	d10f      	bne.n	80033ae <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003396:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003398:	f3bf 8f5f 	dmb	sy
}
 800339c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	e1b6      	b.n	800371c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	3301      	adds	r3, #1
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <ETH_Prepare_Tx_Descriptors+0x244>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	6852      	ldr	r2, [r2, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <ETH_Prepare_Tx_Descriptors+0x248>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	6852      	ldr	r2, [r2, #4]
 80033f4:	0412      	lsls	r2, r2, #16
 80033f6:	431a      	orrs	r2, r3
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	e008      	b.n	8003410 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2200      	movs	r2, #0
 8003402:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <ETH_Prepare_Tx_Descriptors+0x248>)
 800340a:	4013      	ands	r3, r2
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d021      	beq.n	8003460 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	04db      	lsls	r3, r3, #19
 800342a:	431a      	orrs	r2, r3
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	69d2      	ldr	r2, [r2, #28]
 800343c:	431a      	orrs	r2, r3
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e02e      	b.n	80034ae <ETH_Prepare_Tx_Descriptors+0x29e>
 8003450:	ffff0000 	.word	0xffff0000
 8003454:	ffffc000 	.word	0xffffc000
 8003458:	c000ffff 	.word	0xc000ffff
 800345c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b7b      	ldr	r3, [pc, #492]	; (8003654 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	6852      	ldr	r2, [r2, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	431a      	orrs	r2, r3
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80034e4:	f3bf 8f5f 	dmb	sy
}
 80034e8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80da 	beq.w	80036b8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	431a      	orrs	r2, r3
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003516:	e0cf      	b.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	3301      	adds	r3, #1
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b03      	cmp	r3, #3
 800352e:	d902      	bls.n	8003536 <ETH_Prepare_Tx_Descriptors+0x326>
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	3b04      	subs	r3, #4
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003558:	d007      	beq.n	800356a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	3304      	adds	r3, #4
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d029      	beq.n	80035be <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003576:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003578:	2300      	movs	r3, #0
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
 800357c:	e019      	b.n	80035b2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800357e:	f3bf 8f5f 	dmb	sy
}
 8003582:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	3301      	adds	r3, #1
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b03      	cmp	r3, #3
 800359a:	d902      	bls.n	80035a2 <ETH_Prepare_Tx_Descriptors+0x392>
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	3b04      	subs	r3, #4
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035aa:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	3301      	adds	r3, #1
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d3e1      	bcc.n	800357e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0ae      	b.n	800371c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	3301      	adds	r3, #1
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <ETH_Prepare_Tx_Descriptors+0x448>)
 80035da:	4013      	ands	r3, r2
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	6852      	ldr	r2, [r2, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003604:	4013      	ands	r3, r2
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	6852      	ldr	r2, [r2, #4]
 800360a:	0412      	lsls	r2, r2, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	e008      	b.n	8003626 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003620:	4013      	ands	r3, r2
 8003622:	6a3a      	ldr	r2, [r7, #32]
 8003624:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d018      	beq.n	8003664 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003638:	4013      	ands	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	69d2      	ldr	r2, [r2, #28]
 800363e:	431a      	orrs	r2, r3
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	e020      	b.n	8003694 <ETH_Prepare_Tx_Descriptors+0x484>
 8003652:	bf00      	nop
 8003654:	ffff8000 	.word	0xffff8000
 8003658:	ffffc000 	.word	0xffffc000
 800365c:	c000ffff 	.word	0xc000ffff
 8003660:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <ETH_Prepare_Tx_Descriptors+0x518>)
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	6852      	ldr	r2, [r2, #4]
 8003670:	431a      	orrs	r2, r3
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3301      	adds	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800369a:	f3bf 8f5f 	dmb	sy
}
 800369e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f47f af2b 	bne.w	8003518 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	e005      	b.n	80036e2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	3304      	adds	r3, #4
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003702:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003704:	b672      	cpsid	i
}
 8003706:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003716:	b662      	cpsie	i
}
 8003718:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3734      	adds	r7, #52	; 0x34
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	ffff8000 	.word	0xffff8000

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800373a:	4b89      	ldr	r3, [pc, #548]	; (8003960 <HAL_GPIO_Init+0x234>)
 800373c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800373e:	e194      	b.n	8003a6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8186 	beq.w	8003a64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d005      	beq.n	8003770 <HAL_GPIO_Init+0x44>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d130      	bne.n	80037d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037a6:	2201      	movs	r2, #1
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0201 	and.w	r2, r3, #1
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d017      	beq.n	800380e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d123      	bne.n	8003862 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	220f      	movs	r2, #15
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0203 	and.w	r2, r3, #3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80e0 	beq.w	8003a64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a4:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_GPIO_Init+0x238>)
 80038a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038aa:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_GPIO_Init+0x238>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_GPIO_Init+0x238>)
 80038b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038c2:	4a29      	ldr	r2, [pc, #164]	; (8003968 <HAL_GPIO_Init+0x23c>)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a20      	ldr	r2, [pc, #128]	; (800396c <HAL_GPIO_Init+0x240>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d052      	beq.n	8003994 <HAL_GPIO_Init+0x268>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_GPIO_Init+0x244>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_GPIO_Init+0x22e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_GPIO_Init+0x248>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02b      	beq.n	8003956 <HAL_GPIO_Init+0x22a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_GPIO_Init+0x24c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d025      	beq.n	8003952 <HAL_GPIO_Init+0x226>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <HAL_GPIO_Init+0x250>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <HAL_GPIO_Init+0x222>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <HAL_GPIO_Init+0x254>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d019      	beq.n	800394a <HAL_GPIO_Init+0x21e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <HAL_GPIO_Init+0x258>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_GPIO_Init+0x21a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_GPIO_Init+0x25c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00d      	beq.n	8003942 <HAL_GPIO_Init+0x216>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_GPIO_Init+0x260>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <HAL_GPIO_Init+0x212>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_GPIO_Init+0x264>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_GPIO_Init+0x20e>
 8003936:	2309      	movs	r3, #9
 8003938:	e02d      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 800393a:	230a      	movs	r3, #10
 800393c:	e02b      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 800393e:	2308      	movs	r3, #8
 8003940:	e029      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 8003942:	2307      	movs	r3, #7
 8003944:	e027      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 8003946:	2306      	movs	r3, #6
 8003948:	e025      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 800394a:	2305      	movs	r3, #5
 800394c:	e023      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 800394e:	2304      	movs	r3, #4
 8003950:	e021      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 8003952:	2303      	movs	r3, #3
 8003954:	e01f      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 8003956:	2302      	movs	r3, #2
 8003958:	e01d      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 800395a:	2301      	movs	r3, #1
 800395c:	e01b      	b.n	8003996 <HAL_GPIO_Init+0x26a>
 800395e:	bf00      	nop
 8003960:	58000080 	.word	0x58000080
 8003964:	58024400 	.word	0x58024400
 8003968:	58000400 	.word	0x58000400
 800396c:	58020000 	.word	0x58020000
 8003970:	58020400 	.word	0x58020400
 8003974:	58020800 	.word	0x58020800
 8003978:	58020c00 	.word	0x58020c00
 800397c:	58021000 	.word	0x58021000
 8003980:	58021400 	.word	0x58021400
 8003984:	58021800 	.word	0x58021800
 8003988:	58021c00 	.word	0x58021c00
 800398c:	58022000 	.word	0x58022000
 8003990:	58022400 	.word	0x58022400
 8003994:	2300      	movs	r3, #0
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	f002 0203 	and.w	r2, r2, #3
 800399c:	0092      	lsls	r2, r2, #2
 800399e:	4093      	lsls	r3, r2
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039a6:	4938      	ldr	r1, [pc, #224]	; (8003a88 <HAL_GPIO_Init+0x35c>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	3301      	adds	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f ae63 	bne.w	8003740 <HAL_GPIO_Init+0x14>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	3724      	adds	r7, #36	; 0x24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	58000400 	.word	0x58000400

08003a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fc ffe6 	bl	8000a84 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <HAL_HSEM_FastTake+0x2c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3320      	adds	r3, #32
 8003ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <HAL_HSEM_FastTake+0x30>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	58026400 	.word	0x58026400
 8003af0:	80000300 	.word	0x80000300

08003af4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003afe:	4906      	ldr	r1, [pc, #24]	; (8003b18 <HAL_HSEM_Release+0x24>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	58026400 	.word	0x58026400

08003b1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d00a      	beq.n	8003b46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b30:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d001      	beq.n	8003b42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e040      	b.n	8003bc4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e03e      	b.n	8003bc4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b4e:	491f      	ldr	r1, [pc, #124]	; (8003bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b56:	f7fd fed7 	bl	8001908 <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b5c:	e009      	b.n	8003b72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b5e:	f7fd fed3 	bl	8001908 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b6c:	d901      	bls.n	8003b72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e028      	b.n	8003bc4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7e:	d1ee      	bne.n	8003b5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b1e      	cmp	r3, #30
 8003b84:	d008      	beq.n	8003b98 <HAL_PWREx_ConfigSupply+0x7c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b2e      	cmp	r3, #46	; 0x2e
 8003b8a:	d005      	beq.n	8003b98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b1d      	cmp	r3, #29
 8003b90:	d002      	beq.n	8003b98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b2d      	cmp	r3, #45	; 0x2d
 8003b96:	d114      	bne.n	8003bc2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b98:	f7fd feb6 	bl	8001908 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b9e:	e009      	b.n	8003bb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ba0:	f7fd feb2 	bl	8001908 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bae:	d901      	bls.n	8003bb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_PWREx_ConfigSupply+0xb0>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	58024800 	.word	0x58024800

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f000 bc1d 	b.w	800441e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8087 	beq.w	8003d00 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf2:	4b99      	ldr	r3, [pc, #612]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bfc:	4b96      	ldr	r3, [pc, #600]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d007      	beq.n	8003c18 <HAL_RCC_OscConfig+0x48>
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b18      	cmp	r3, #24
 8003c0c:	d110      	bne.n	8003c30 <HAL_RCC_OscConfig+0x60>
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4b8f      	ldr	r3, [pc, #572]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d06c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x12e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d168      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e3f6      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x78>
 8003c3a:	4b87      	ldr	r3, [pc, #540]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a86      	ldr	r2, [pc, #536]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e02e      	b.n	8003ca6 <HAL_RCC_OscConfig+0xd6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCC_OscConfig+0x9a>
 8003c50:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7d      	ldr	r2, [pc, #500]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e01d      	b.n	8003ca6 <HAL_RCC_OscConfig+0xd6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c72:	d10c      	bne.n	8003c8e <HAL_RCC_OscConfig+0xbe>
 8003c74:	4b78      	ldr	r3, [pc, #480]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a77      	ldr	r2, [pc, #476]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a74      	ldr	r2, [pc, #464]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0xd6>
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a71      	ldr	r2, [pc, #452]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6e      	ldr	r2, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d013      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd fe2b 	bl	8001908 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb6:	f7fd fe27 	bl	8001908 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b64      	cmp	r3, #100	; 0x64
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e3aa      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cc8:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0xe6>
 8003cd4:	e014      	b.n	8003d00 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd fe17 	bl	8001908 <HAL_GetTick>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cde:	f7fd fe13 	bl	8001908 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	; 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e396      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x10e>
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80cb 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b52      	ldr	r3, [pc, #328]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d16:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d18:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_RCC_OscConfig+0x164>
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2b18      	cmp	r3, #24
 8003d28:	d156      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x208>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d151      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_OscConfig+0x17c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e368      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 0219 	bic.w	r2, r3, #25
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	493f      	ldr	r1, [pc, #252]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d5e:	f7fd fdd3 	bl	8001908 <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d66:	f7fd fdcf 	bl	8001908 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e352      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d78:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	f7fd fdcc 	bl	8001920 <HAL_GetREVID>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d817      	bhi.n	8003dc2 <HAL_RCC_OscConfig+0x1f2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d108      	bne.n	8003dac <HAL_RCC_OscConfig+0x1dc>
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003da2:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003daa:	e07b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	4927      	ldr	r1, [pc, #156]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc0:	e070      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	4921      	ldr	r1, [pc, #132]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd6:	e065      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d048      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 0219 	bic.w	r2, r3, #25
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	491a      	ldr	r1, [pc, #104]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd fd89 	bl	8001908 <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fd fd85 	bl	8001908 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e308      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	f7fd fd82 	bl	8001920 <HAL_GetREVID>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d81a      	bhi.n	8003e5c <HAL_RCC_OscConfig+0x28c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d108      	bne.n	8003e40 <HAL_RCC_OscConfig+0x270>
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e36:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	6053      	str	r3, [r2, #4]
 8003e3e:	e031      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	4902      	ldr	r1, [pc, #8]	; (8003e58 <HAL_RCC_OscConfig+0x288>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	e026      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	4b9a      	ldr	r3, [pc, #616]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	4997      	ldr	r1, [pc, #604]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b95      	ldr	r3, [pc, #596]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a94      	ldr	r2, [pc, #592]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fd43 	bl	8001908 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fd3f 	bl	8001908 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e2c2      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e98:	4b8b      	ldr	r3, [pc, #556]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a9 	beq.w	8004004 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ebc:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x308>
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b18      	cmp	r3, #24
 8003ecc:	d13a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x374>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d135      	bne.n	8003f44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ed8:	4b7b      	ldr	r3, [pc, #492]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x320>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e296      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ef0:	f7fd fd16 	bl	8001920 <HAL_GetREVID>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d817      	bhi.n	8003f2e <HAL_RCC_OscConfig+0x35e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d108      	bne.n	8003f18 <HAL_RCC_OscConfig+0x348>
 8003f06:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f0e:	4a6e      	ldr	r2, [pc, #440]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f16:	e075      	b.n	8004004 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f18:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	069b      	lsls	r3, r3, #26
 8003f26:	4968      	ldr	r1, [pc, #416]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f2c:	e06a      	b.n	8004004 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f2e:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	4962      	ldr	r1, [pc, #392]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f42:	e05f      	b.n	8004004 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d042      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fcd6 	bl	8001908 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f60:	f7fd fcd2 	bl	8001908 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e255      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f72:	4b55      	ldr	r3, [pc, #340]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f7e:	f7fd fccf 	bl	8001920 <HAL_GetREVID>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d817      	bhi.n	8003fbc <HAL_RCC_OscConfig+0x3ec>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d108      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3d6>
 8003f94:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fa2:	6053      	str	r3, [r2, #4]
 8003fa4:	e02e      	b.n	8004004 <HAL_RCC_OscConfig+0x434>
 8003fa6:	4b48      	ldr	r3, [pc, #288]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	069b      	lsls	r3, r3, #26
 8003fb4:	4944      	ldr	r1, [pc, #272]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
 8003fba:	e023      	b.n	8004004 <HAL_RCC_OscConfig+0x434>
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	493f      	ldr	r1, [pc, #252]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60cb      	str	r3, [r1, #12]
 8003fd0:	e018      	b.n	8004004 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fd2:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fc93 	bl	8001908 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fe6:	f7fd fc8f 	bl	8001908 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e212      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d036      	beq.n	800407e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 800401a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401c:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fd fc70 	bl	8001908 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402c:	f7fd fc6c 	bl	8001908 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1ef      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x45c>
 800404a:	e018      	b.n	800407e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fc56 	bl	8001908 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd fc52 	bl	8001908 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1d5      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d039      	beq.n	80040fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01c      	beq.n	80040cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004092:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800409c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800409e:	f7fd fc33 	bl	8001908 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040a6:	f7fd fc2f 	bl	8001908 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1b2      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_OscConfig+0x4f8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x4d6>
 80040c4:	e01b      	b.n	80040fe <HAL_RCC_OscConfig+0x52e>
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040cc:	4b9b      	ldr	r3, [pc, #620]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a9a      	ldr	r2, [pc, #616]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80040d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040d8:	f7fd fc16 	bl	8001908 <HAL_GetTick>
 80040dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040e0:	f7fd fc12 	bl	8001908 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e195      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040f2:	4b92      	ldr	r3, [pc, #584]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8081 	beq.w	800420e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800410c:	4b8c      	ldr	r3, [pc, #560]	; (8004340 <HAL_RCC_OscConfig+0x770>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a8b      	ldr	r2, [pc, #556]	; (8004340 <HAL_RCC_OscConfig+0x770>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004118:	f7fd fbf6 	bl	8001908 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd fbf2 	bl	8001908 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e175      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004132:	4b83      	ldr	r3, [pc, #524]	; (8004340 <HAL_RCC_OscConfig+0x770>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <HAL_RCC_OscConfig+0x584>
 8004146:	4b7d      	ldr	r3, [pc, #500]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a7c      	ldr	r2, [pc, #496]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
 8004152:	e02d      	b.n	80041b0 <HAL_RCC_OscConfig+0x5e0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10c      	bne.n	8004176 <HAL_RCC_OscConfig+0x5a6>
 800415c:	4b77      	ldr	r3, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a76      	ldr	r2, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	4b74      	ldr	r3, [pc, #464]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a73      	ldr	r2, [pc, #460]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	e01c      	b.n	80041b0 <HAL_RCC_OscConfig+0x5e0>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b05      	cmp	r3, #5
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c8>
 800417e:	4b6f      	ldr	r3, [pc, #444]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a6e      	ldr	r2, [pc, #440]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	4b6c      	ldr	r3, [pc, #432]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a6b      	ldr	r2, [pc, #428]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0x5e0>
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a67      	ldr	r2, [pc, #412]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
 80041a4:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a64      	ldr	r2, [pc, #400]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd fba6 	bl	8001908 <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fd fba2 	bl	8001908 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e123      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d6:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ee      	beq.n	80041c0 <HAL_RCC_OscConfig+0x5f0>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fb90 	bl	8001908 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fb8c 	bl	8001908 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e10d      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004202:	4b4e      	ldr	r3, [pc, #312]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ee      	bne.n	80041ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8102 	beq.w	800441c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004218:	4b48      	ldr	r3, [pc, #288]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004220:	2b18      	cmp	r3, #24
 8004222:	f000 80bd 	beq.w	80043a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 809e 	bne.w	800436c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	4b42      	ldr	r3, [pc, #264]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a41      	ldr	r2, [pc, #260]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fb64 	bl	8001908 <HAL_GetTick>
 8004240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fb60 	bl	8001908 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0e3      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004256:	4b39      	ldr	r3, [pc, #228]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004262:	4b36      	ldr	r3, [pc, #216]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <HAL_RCC_OscConfig+0x774>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	430a      	orrs	r2, r1
 8004276:	4931      	ldr	r1, [pc, #196]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	628b      	str	r3, [r1, #40]	; 0x28
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	3b01      	subs	r3, #1
 8004282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	3b01      	subs	r3, #1
 800428c:	025b      	lsls	r3, r3, #9
 800428e:	b29b      	uxth	r3, r3
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	3b01      	subs	r3, #1
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	3b01      	subs	r3, #1
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042ac:	4923      	ldr	r1, [pc, #140]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	4a21      	ldr	r2, [pc, #132]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042be:	4b1f      	ldr	r3, [pc, #124]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c2:	4b21      	ldr	r3, [pc, #132]	; (8004348 <HAL_RCC_OscConfig+0x778>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042ca:	00d2      	lsls	r2, r2, #3
 80042cc:	491b      	ldr	r1, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	f023 020c 	bic.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	4917      	ldr	r1, [pc, #92]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f023 0202 	bic.w	r2, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	4912      	ldr	r1, [pc, #72]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_RCC_OscConfig+0x76c>)
 800432c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd fae9 	bl	8001908 <HAL_GetTick>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004338:	e011      	b.n	800435e <HAL_RCC_OscConfig+0x78e>
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400
 8004340:	58024800 	.word	0x58024800
 8004344:	fffffc0c 	.word	0xfffffc0c
 8004348:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd fadc 	bl	8001908 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e05f      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x858>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x77c>
 800436a:	e057      	b.n	800441c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436c:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_RCC_OscConfig+0x858>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x858>)
 8004372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fac6 	bl	8001908 <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fd fac2 	bl	8001908 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e045      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004392:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_RCC_OscConfig+0x858>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x7b0>
 800439e:	e03d      	b.n	800441c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x858>)
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_RCC_OscConfig+0x858>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d031      	beq.n	8004418 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0203 	and.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d12a      	bne.n	8004418 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d122      	bne.n	8004418 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d11a      	bne.n	8004418 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d111      	bne.n	8004418 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d108      	bne.n	8004418 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	0e1b      	lsrs	r3, r3, #24
 800440a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400

0800442c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e19c      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b8a      	ldr	r3, [pc, #552]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b87      	ldr	r3, [pc, #540]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4985      	ldr	r1, [pc, #532]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b83      	ldr	r3, [pc, #524]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e184      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	4b7b      	ldr	r3, [pc, #492]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004488:	429a      	cmp	r2, r3
 800448a:	d908      	bls.n	800449e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800448c:	4b78      	ldr	r3, [pc, #480]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	4975      	ldr	r1, [pc, #468]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800449a:	4313      	orrs	r3, r2
 800449c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	4b70      	ldr	r3, [pc, #448]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d908      	bls.n	80044cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044ba:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	496a      	ldr	r1, [pc, #424]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	4b64      	ldr	r3, [pc, #400]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d908      	bls.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e8:	4b61      	ldr	r3, [pc, #388]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	495e      	ldr	r1, [pc, #376]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d010      	beq.n	8004528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004512:	429a      	cmp	r2, r3
 8004514:	d908      	bls.n	8004528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004516:	4b56      	ldr	r3, [pc, #344]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	4953      	ldr	r1, [pc, #332]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004524:	4313      	orrs	r3, r2
 8004526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f023 020f 	bic.w	r2, r3, #15
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4947      	ldr	r1, [pc, #284]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d055      	beq.n	800460e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004562:	4b43      	ldr	r3, [pc, #268]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4940      	ldr	r1, [pc, #256]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004570:	4313      	orrs	r3, r2
 8004572:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d107      	bne.n	800458c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800457c:	4b3c      	ldr	r3, [pc, #240]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d121      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0f6      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d115      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0ea      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0de      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045bc:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0d6      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f023 0207 	bic.w	r2, r3, #7
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4925      	ldr	r1, [pc, #148]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd f993 	bl	8001908 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e6:	f7fd f98f 	bl	8001908 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0be      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	429a      	cmp	r2, r3
 800460c:	d1eb      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	4b14      	ldr	r3, [pc, #80]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	429a      	cmp	r2, r3
 8004628:	d208      	bcs.n	800463c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f023 020f 	bic.w	r2, r3, #15
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004638:	4313      	orrs	r3, r2
 800463a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d214      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4906      	ldr	r1, [pc, #24]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b04      	ldr	r3, [pc, #16]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e086      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
 800466c:	52002000 	.word	0x52002000
 8004670:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800468c:	429a      	cmp	r2, r3
 800468e:	d208      	bcs.n	80046a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004690:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4939      	ldr	r1, [pc, #228]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d208      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	492e      	ldr	r1, [pc, #184]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d208      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4922      	ldr	r1, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d208      	bcs.n	800472c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4917      	ldr	r1, [pc, #92]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004728:	4313      	orrs	r3, r2
 800472a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800472c:	f000 f834 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	4912      	ldr	r1, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x35c>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <HAL_RCC_ClockConfig+0x35c>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	4a0a      	ldr	r2, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x360>)
 8004762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RCC_ClockConfig+0x364>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x368>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fac6 	bl	8000d00 <HAL_InitTick>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	58024400 	.word	0x58024400
 8004788:	0801d4b4 	.word	0x0801d4b4
 800478c:	24000004 	.word	0x24000004
 8004790:	24000000 	.word	0x24000000
 8004794:	24000014 	.word	0x24000014

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800479e:	4bb3      	ldr	r3, [pc, #716]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a6:	2b18      	cmp	r3, #24
 80047a8:	f200 8155 	bhi.w	8004a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	08004819 	.word	0x08004819
 80047b8:	08004a57 	.word	0x08004a57
 80047bc:	08004a57 	.word	0x08004a57
 80047c0:	08004a57 	.word	0x08004a57
 80047c4:	08004a57 	.word	0x08004a57
 80047c8:	08004a57 	.word	0x08004a57
 80047cc:	08004a57 	.word	0x08004a57
 80047d0:	08004a57 	.word	0x08004a57
 80047d4:	0800483f 	.word	0x0800483f
 80047d8:	08004a57 	.word	0x08004a57
 80047dc:	08004a57 	.word	0x08004a57
 80047e0:	08004a57 	.word	0x08004a57
 80047e4:	08004a57 	.word	0x08004a57
 80047e8:	08004a57 	.word	0x08004a57
 80047ec:	08004a57 	.word	0x08004a57
 80047f0:	08004a57 	.word	0x08004a57
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004a57 	.word	0x08004a57
 80047fc:	08004a57 	.word	0x08004a57
 8004800:	08004a57 	.word	0x08004a57
 8004804:	08004a57 	.word	0x08004a57
 8004808:	08004a57 	.word	0x08004a57
 800480c:	08004a57 	.word	0x08004a57
 8004810:	08004a57 	.word	0x08004a57
 8004814:	0800484b 	.word	0x0800484b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004818:	4b94      	ldr	r3, [pc, #592]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004824:	4b91      	ldr	r3, [pc, #580]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	4a90      	ldr	r2, [pc, #576]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004836:	e111      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004838:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800483a:	61bb      	str	r3, [r7, #24]
    break;
 800483c:	e10e      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800483e:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004840:	61bb      	str	r3, [r7, #24]
    break;
 8004842:	e10b      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004844:	4b8c      	ldr	r3, [pc, #560]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004846:	61bb      	str	r3, [r7, #24]
    break;
 8004848:	e108      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800484a:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004854:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004860:	4b82      	ldr	r3, [pc, #520]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800486a:	4b80      	ldr	r3, [pc, #512]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	08db      	lsrs	r3, r3, #3
 8004870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80e1 	beq.w	8004a50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f000 8083 	beq.w	800499c <HAL_RCC_GetSysClockFreq+0x204>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f200 80a1 	bhi.w	80049e0 <HAL_RCC_GetSysClockFreq+0x248>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x114>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d056      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80048aa:	e099      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ac:	4b6f      	ldr	r3, [pc, #444]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048b8:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	4a6b      	ldr	r2, [pc, #428]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b62      	ldr	r3, [pc, #392]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004912:	e087      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b51      	ldr	r3, [pc, #324]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a02 	vldr	s12, [r7, #8]
 800493a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004956:	e065      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497a:	ed97 6a02 	vldr	s12, [r7, #8]
 800497e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499a:	e043      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049de:	e021      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	0a5b      	lsrs	r3, r3, #9
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	3301      	adds	r3, #1
 8004a30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 3a90 	vmov	r3, s15
 8004a4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
    break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a58:	61bb      	str	r3, [r7, #24]
    break;
 8004a5a:	bf00      	nop
  }

  return sysclockfreq;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	; 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	03d09000 	.word	0x03d09000
 8004a74:	003d0900 	.word	0x003d0900
 8004a78:	017d7840 	.word	0x017d7840
 8004a7c:	46000000 	.word	0x46000000
 8004a80:	4c742400 	.word	0x4c742400
 8004a84:	4a742400 	.word	0x4a742400
 8004a88:	4bbebc20 	.word	0x4bbebc20

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a92:	f7ff fe81 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCC_GetHCLKFreq+0x50>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490f      	ldr	r1, [pc, #60]	; (8004ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_RCC_GetHCLKFreq+0x50>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004aba:	5cd3      	ldrb	r3, [r2, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	0801d4b4 	.word	0x0801d4b4
 8004ae4:	24000004 	.word	0x24000004
 8004ae8:	24000000 	.word	0x24000000

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004af0:	f7ff ffcc 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4904      	ldr	r1, [pc, #16]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	58024400 	.word	0x58024400
 8004b14:	0801d4b4 	.word	0x0801d4b4

08004b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	223f      	movs	r2, #63	; 0x3f
 8004b26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0207 	and.w	r2, r3, #7
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004b34:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_RCC_GetClockConfig+0x7c>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_GetClockConfig+0x80>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 020f 	and.w	r2, r3, #15
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	601a      	str	r2, [r3, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	58024400 	.word	0x58024400
 8004b98:	52002000 	.word	0x52002000

08004b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e049      	b.n	8004c42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fa68 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f000 f9f6 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e054      	b.n	8004d0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d01d      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_TIM_Base_Start_IT+0xe0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <HAL_TIM_Base_Start_IT+0xec>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d015      	beq.n	8004d0a <HAL_TIM_Base_Start_IT+0xbe>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d011      	beq.n	8004d0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e008      	b.n	8004d0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40001800 	.word	0x40001800
 8004d34:	40014000 	.word	0x40014000
 8004d38:	00010007 	.word	0x00010007

08004d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d122      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0202 	mvn.w	r2, #2
 8004d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f905 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f8f7 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f908 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d122      	bne.n	8004dec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d11b      	bne.n	8004dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0204 	mvn.w	r2, #4
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8db 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8cd 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8de 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0208 	mvn.w	r2, #8
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8b1 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8a3 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8b4 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0210 	mvn.w	r2, #16
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2208      	movs	r2, #8
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f887 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f879 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f88a 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0201 	mvn.w	r2, #1
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fb fe54 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f914 	bl	8005114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d10e      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b80      	cmp	r3, #128	; 0x80
 8004f08:	d107      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f907 	bl	8005128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d10e      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d107      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f838 	bl	8004fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d10e      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f06f 0220 	mvn.w	r2, #32
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f8c7 	bl	8005100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d00f      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3d      	ldr	r2, [pc, #244]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3c      	ldr	r2, [pc, #240]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3b      	ldr	r2, [pc, #236]	; (80050ec <TIM_Base_SetConfig+0x120>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3a      	ldr	r2, [pc, #232]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d108      	bne.n	800501e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01f      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d01b      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d017      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <TIM_Base_SetConfig+0x120>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <TIM_Base_SetConfig+0x128>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <TIM_Base_SetConfig+0x12c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a26      	ldr	r2, [pc, #152]	; (80050fc <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d108      	bne.n	8005078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <TIM_Base_SetConfig+0x128>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <TIM_Base_SetConfig+0x12c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <TIM_Base_SetConfig+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40014400 	.word	0x40014400
 80050fc:	40014800 	.word	0x40014800

08005100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f011 fbc7 	bl	80168dc <tcpip_init>
	LOCK_TCPIP_CORE();
 800514e:	f000 fe51 	bl	8005df4 <sys_lock_tcpip_core>
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005162:	4b99      	ldr	r3, [pc, #612]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005164:	22c0      	movs	r2, #192	; 0xc0
 8005166:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005168:	4b97      	ldr	r3, [pc, #604]	; (80053c8 <MX_LWIP_Init+0x26c>)
 800516a:	22a8      	movs	r2, #168	; 0xa8
 800516c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800516e:	4b96      	ldr	r3, [pc, #600]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005170:	2264      	movs	r2, #100	; 0x64
 8005172:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8005174:	4b94      	ldr	r3, [pc, #592]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005176:	22c9      	movs	r2, #201	; 0xc9
 8005178:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800517a:	4b94      	ldr	r3, [pc, #592]	; (80053cc <MX_LWIP_Init+0x270>)
 800517c:	22ff      	movs	r2, #255	; 0xff
 800517e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005180:	4b92      	ldr	r3, [pc, #584]	; (80053cc <MX_LWIP_Init+0x270>)
 8005182:	22ff      	movs	r2, #255	; 0xff
 8005184:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005186:	4b91      	ldr	r3, [pc, #580]	; (80053cc <MX_LWIP_Init+0x270>)
 8005188:	22ff      	movs	r2, #255	; 0xff
 800518a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800518c:	4b8f      	ldr	r3, [pc, #572]	; (80053cc <MX_LWIP_Init+0x270>)
 800518e:	2200      	movs	r2, #0
 8005190:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005192:	4b8f      	ldr	r3, [pc, #572]	; (80053d0 <MX_LWIP_Init+0x274>)
 8005194:	22c0      	movs	r2, #192	; 0xc0
 8005196:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005198:	4b8d      	ldr	r3, [pc, #564]	; (80053d0 <MX_LWIP_Init+0x274>)
 800519a:	22a8      	movs	r2, #168	; 0xa8
 800519c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800519e:	4b8c      	ldr	r3, [pc, #560]	; (80053d0 <MX_LWIP_Init+0x274>)
 80051a0:	2264      	movs	r2, #100	; 0x64
 80051a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80051a4:	4b8a      	ldr	r3, [pc, #552]	; (80053d0 <MX_LWIP_Init+0x274>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80051aa:	2100      	movs	r1, #0
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7ff ffc5 	bl	800513c <tcpip_init_wrap>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80051b2:	4b85      	ldr	r3, [pc, #532]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	061a      	lsls	r2, r3, #24
 80051b8:	4b83      	ldr	r3, [pc, #524]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	431a      	orrs	r2, r3
 80051c0:	4b81      	ldr	r3, [pc, #516]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051c2:	789b      	ldrb	r3, [r3, #2]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4313      	orrs	r3, r2
 80051c8:	4a7f      	ldr	r2, [pc, #508]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051ca:	78d2      	ldrb	r2, [r2, #3]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	061a      	lsls	r2, r3, #24
 80051d0:	4b7d      	ldr	r3, [pc, #500]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	0619      	lsls	r1, r3, #24
 80051d6:	4b7c      	ldr	r3, [pc, #496]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	4319      	orrs	r1, r3
 80051de:	4b7a      	ldr	r3, [pc, #488]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051e0:	789b      	ldrb	r3, [r3, #2]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	430b      	orrs	r3, r1
 80051e6:	4978      	ldr	r1, [pc, #480]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051e8:	78c9      	ldrb	r1, [r1, #3]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f2:	431a      	orrs	r2, r3
 80051f4:	4b74      	ldr	r3, [pc, #464]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	0619      	lsls	r1, r3, #24
 80051fa:	4b73      	ldr	r3, [pc, #460]	; (80053c8 <MX_LWIP_Init+0x26c>)
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	4319      	orrs	r1, r3
 8005202:	4b71      	ldr	r3, [pc, #452]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005204:	789b      	ldrb	r3, [r3, #2]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	430b      	orrs	r3, r1
 800520a:	496f      	ldr	r1, [pc, #444]	; (80053c8 <MX_LWIP_Init+0x26c>)
 800520c:	78c9      	ldrb	r1, [r1, #3]
 800520e:	430b      	orrs	r3, r1
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005216:	431a      	orrs	r2, r3
 8005218:	4b6b      	ldr	r3, [pc, #428]	; (80053c8 <MX_LWIP_Init+0x26c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	0619      	lsls	r1, r3, #24
 800521e:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	4319      	orrs	r1, r3
 8005226:	4b68      	ldr	r3, [pc, #416]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005228:	789b      	ldrb	r3, [r3, #2]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	430b      	orrs	r3, r1
 800522e:	4966      	ldr	r1, [pc, #408]	; (80053c8 <MX_LWIP_Init+0x26c>)
 8005230:	78c9      	ldrb	r1, [r1, #3]
 8005232:	430b      	orrs	r3, r1
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	4313      	orrs	r3, r2
 8005238:	4a66      	ldr	r2, [pc, #408]	; (80053d4 <MX_LWIP_Init+0x278>)
 800523a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800523c:	4b63      	ldr	r3, [pc, #396]	; (80053cc <MX_LWIP_Init+0x270>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	061a      	lsls	r2, r3, #24
 8005242:	4b62      	ldr	r3, [pc, #392]	; (80053cc <MX_LWIP_Init+0x270>)
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
 800524a:	4b60      	ldr	r3, [pc, #384]	; (80053cc <MX_LWIP_Init+0x270>)
 800524c:	789b      	ldrb	r3, [r3, #2]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	4313      	orrs	r3, r2
 8005252:	4a5e      	ldr	r2, [pc, #376]	; (80053cc <MX_LWIP_Init+0x270>)
 8005254:	78d2      	ldrb	r2, [r2, #3]
 8005256:	4313      	orrs	r3, r2
 8005258:	061a      	lsls	r2, r3, #24
 800525a:	4b5c      	ldr	r3, [pc, #368]	; (80053cc <MX_LWIP_Init+0x270>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	0619      	lsls	r1, r3, #24
 8005260:	4b5a      	ldr	r3, [pc, #360]	; (80053cc <MX_LWIP_Init+0x270>)
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	4319      	orrs	r1, r3
 8005268:	4b58      	ldr	r3, [pc, #352]	; (80053cc <MX_LWIP_Init+0x270>)
 800526a:	789b      	ldrb	r3, [r3, #2]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	430b      	orrs	r3, r1
 8005270:	4956      	ldr	r1, [pc, #344]	; (80053cc <MX_LWIP_Init+0x270>)
 8005272:	78c9      	ldrb	r1, [r1, #3]
 8005274:	430b      	orrs	r3, r1
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800527c:	431a      	orrs	r2, r3
 800527e:	4b53      	ldr	r3, [pc, #332]	; (80053cc <MX_LWIP_Init+0x270>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	0619      	lsls	r1, r3, #24
 8005284:	4b51      	ldr	r3, [pc, #324]	; (80053cc <MX_LWIP_Init+0x270>)
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	4319      	orrs	r1, r3
 800528c:	4b4f      	ldr	r3, [pc, #316]	; (80053cc <MX_LWIP_Init+0x270>)
 800528e:	789b      	ldrb	r3, [r3, #2]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	430b      	orrs	r3, r1
 8005294:	494d      	ldr	r1, [pc, #308]	; (80053cc <MX_LWIP_Init+0x270>)
 8005296:	78c9      	ldrb	r1, [r1, #3]
 8005298:	430b      	orrs	r3, r1
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052a0:	431a      	orrs	r2, r3
 80052a2:	4b4a      	ldr	r3, [pc, #296]	; (80053cc <MX_LWIP_Init+0x270>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	0619      	lsls	r1, r3, #24
 80052a8:	4b48      	ldr	r3, [pc, #288]	; (80053cc <MX_LWIP_Init+0x270>)
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	4319      	orrs	r1, r3
 80052b0:	4b46      	ldr	r3, [pc, #280]	; (80053cc <MX_LWIP_Init+0x270>)
 80052b2:	789b      	ldrb	r3, [r3, #2]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	430b      	orrs	r3, r1
 80052b8:	4944      	ldr	r1, [pc, #272]	; (80053cc <MX_LWIP_Init+0x270>)
 80052ba:	78c9      	ldrb	r1, [r1, #3]
 80052bc:	430b      	orrs	r3, r1
 80052be:	0e1b      	lsrs	r3, r3, #24
 80052c0:	4313      	orrs	r3, r2
 80052c2:	4a45      	ldr	r2, [pc, #276]	; (80053d8 <MX_LWIP_Init+0x27c>)
 80052c4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80052c6:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	061a      	lsls	r2, r3, #24
 80052cc:	4b40      	ldr	r3, [pc, #256]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	431a      	orrs	r2, r3
 80052d4:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052d6:	789b      	ldrb	r3, [r3, #2]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	4313      	orrs	r3, r2
 80052dc:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052de:	78d2      	ldrb	r2, [r2, #3]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	061a      	lsls	r2, r3, #24
 80052e4:	4b3a      	ldr	r3, [pc, #232]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	0619      	lsls	r1, r3, #24
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	4319      	orrs	r1, r3
 80052f2:	4b37      	ldr	r3, [pc, #220]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052f4:	789b      	ldrb	r3, [r3, #2]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	430b      	orrs	r3, r1
 80052fa:	4935      	ldr	r1, [pc, #212]	; (80053d0 <MX_LWIP_Init+0x274>)
 80052fc:	78c9      	ldrb	r1, [r1, #3]
 80052fe:	430b      	orrs	r3, r1
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005306:	431a      	orrs	r2, r3
 8005308:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <MX_LWIP_Init+0x274>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	0619      	lsls	r1, r3, #24
 800530e:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <MX_LWIP_Init+0x274>)
 8005310:	785b      	ldrb	r3, [r3, #1]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	4319      	orrs	r1, r3
 8005316:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <MX_LWIP_Init+0x274>)
 8005318:	789b      	ldrb	r3, [r3, #2]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	430b      	orrs	r3, r1
 800531e:	492c      	ldr	r1, [pc, #176]	; (80053d0 <MX_LWIP_Init+0x274>)
 8005320:	78c9      	ldrb	r1, [r1, #3]
 8005322:	430b      	orrs	r3, r1
 8005324:	0a1b      	lsrs	r3, r3, #8
 8005326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800532a:	431a      	orrs	r2, r3
 800532c:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <MX_LWIP_Init+0x274>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	0619      	lsls	r1, r3, #24
 8005332:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <MX_LWIP_Init+0x274>)
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	4319      	orrs	r1, r3
 800533a:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <MX_LWIP_Init+0x274>)
 800533c:	789b      	ldrb	r3, [r3, #2]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	430b      	orrs	r3, r1
 8005342:	4923      	ldr	r1, [pc, #140]	; (80053d0 <MX_LWIP_Init+0x274>)
 8005344:	78c9      	ldrb	r1, [r1, #3]
 8005346:	430b      	orrs	r3, r1
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	4313      	orrs	r3, r2
 800534c:	4a23      	ldr	r2, [pc, #140]	; (80053dc <MX_LWIP_Init+0x280>)
 800534e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005350:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <MX_LWIP_Init+0x284>)
 8005352:	9302      	str	r3, [sp, #8]
 8005354:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <MX_LWIP_Init+0x288>)
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	2300      	movs	r3, #0
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <MX_LWIP_Init+0x280>)
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <MX_LWIP_Init+0x27c>)
 8005360:	491c      	ldr	r1, [pc, #112]	; (80053d4 <MX_LWIP_Init+0x278>)
 8005362:	4821      	ldr	r0, [pc, #132]	; (80053e8 <MX_LWIP_Init+0x28c>)
 8005364:	f009 fd14 	bl	800ed90 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005368:	481f      	ldr	r0, [pc, #124]	; (80053e8 <MX_LWIP_Init+0x28c>)
 800536a:	f009 fec7 	bl	800f0fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800536e:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <MX_LWIP_Init+0x28c>)
 8005370:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005380:	4819      	ldr	r0, [pc, #100]	; (80053e8 <MX_LWIP_Init+0x28c>)
 8005382:	f009 fecb 	bl	800f11c <netif_set_up>
 8005386:	e002      	b.n	800538e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005388:	4817      	ldr	r0, [pc, #92]	; (80053e8 <MX_LWIP_Init+0x28c>)
 800538a:	f009 ff35 	bl	800f1f8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800538e:	4917      	ldr	r1, [pc, #92]	; (80053ec <MX_LWIP_Init+0x290>)
 8005390:	4815      	ldr	r0, [pc, #84]	; (80053e8 <MX_LWIP_Init+0x28c>)
 8005392:	f009 ffcd 	bl	800f330 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	2100      	movs	r1, #0
 800539a:	4815      	ldr	r0, [pc, #84]	; (80053f0 <MX_LWIP_Init+0x294>)
 800539c:	f012 fb4b 	bl	8017a36 <memset>
  attributes.name = "EthLink";
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <MX_LWIP_Init+0x294>)
 80053a2:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <MX_LWIP_Init+0x298>)
 80053a4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <MX_LWIP_Init+0x294>)
 80053a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ac:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <MX_LWIP_Init+0x294>)
 80053b0:	2210      	movs	r2, #16
 80053b2:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80053b4:	4a0e      	ldr	r2, [pc, #56]	; (80053f0 <MX_LWIP_Init+0x294>)
 80053b6:	490c      	ldr	r1, [pc, #48]	; (80053e8 <MX_LWIP_Init+0x28c>)
 80053b8:	480f      	ldr	r0, [pc, #60]	; (80053f8 <MX_LWIP_Init+0x29c>)
 80053ba:	f000 fe24 	bl	8006006 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 80053be:	f000 fd29 	bl	8005e14 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 80053c2:	bf00      	nop
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	24000424 	.word	0x24000424
 80053cc:	24000428 	.word	0x24000428
 80053d0:	2400042c 	.word	0x2400042c
 80053d4:	24000418 	.word	0x24000418
 80053d8:	2400041c 	.word	0x2400041c
 80053dc:	24000420 	.word	0x24000420
 80053e0:	080167f5 	.word	0x080167f5
 80053e4:	08005891 	.word	0x08005891
 80053e8:	240003e4 	.word	0x240003e4
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	24000430 	.word	0x24000430
 80053f4:	08019aa8 	.word	0x08019aa8
 80053f8:	08005b85 	.word	0x08005b85

080053fc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_ETH_RxCpltCallback+0x1c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f001 f895 	bl	800654c <osSemaphoreRelease>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2400045c 	.word	0x2400045c

08005430 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <HAL_ETH_TxCpltCallback+0x1c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f001 f885 	bl	800654c <osSemaphoreRelease>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	24000460 	.word	0x24000460

08005450 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fd fbe5 	bl	8002c28 <HAL_ETH_GetDMAError>
 800545e:	4603      	mov	r3, r0
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d104      	bne.n	8005472 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <HAL_ETH_ErrorCallback+0x2c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f001 f86d 	bl	800654c <osSemaphoreRelease>
  }
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2400045c 	.word	0x2400045c

08005480 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0aa      	sub	sp, #168	; 0xa8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800549a:	f107 0310 	add.w	r3, r7, #16
 800549e:	2264      	movs	r2, #100	; 0x64
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f012 fac7 	bl	8017a36 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80054a8:	4b85      	ldr	r3, [pc, #532]	; (80056c0 <low_level_init+0x240>)
 80054aa:	4a86      	ldr	r2, [pc, #536]	; (80056c4 <low_level_init+0x244>)
 80054ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80054ae:	2300      	movs	r3, #0
 80054b0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80054b6:	23e1      	movs	r3, #225	; 0xe1
 80054b8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80054ba:	2300      	movs	r3, #0
 80054bc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80054be:	2300      	movs	r3, #0
 80054c0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80054c2:	2300      	movs	r3, #0
 80054c4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80054c6:	4a7e      	ldr	r2, [pc, #504]	; (80056c0 <low_level_init+0x240>)
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80054ce:	4b7c      	ldr	r3, [pc, #496]	; (80056c0 <low_level_init+0x240>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80054d4:	4b7a      	ldr	r3, [pc, #488]	; (80056c0 <low_level_init+0x240>)
 80054d6:	4a7c      	ldr	r2, [pc, #496]	; (80056c8 <low_level_init+0x248>)
 80054d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80054da:	4b79      	ldr	r3, [pc, #484]	; (80056c0 <low_level_init+0x240>)
 80054dc:	4a7b      	ldr	r2, [pc, #492]	; (80056cc <low_level_init+0x24c>)
 80054de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80054e0:	4b77      	ldr	r3, [pc, #476]	; (80056c0 <low_level_init+0x240>)
 80054e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80054e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80054e8:	4875      	ldr	r0, [pc, #468]	; (80056c0 <low_level_init+0x240>)
 80054ea:	f7fc fba9 	bl	8001c40 <HAL_ETH_Init>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80054f4:	2238      	movs	r2, #56	; 0x38
 80054f6:	2100      	movs	r1, #0
 80054f8:	4875      	ldr	r0, [pc, #468]	; (80056d0 <low_level_init+0x250>)
 80054fa:	f012 fa9c 	bl	8017a36 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80054fe:	4b74      	ldr	r3, [pc, #464]	; (80056d0 <low_level_init+0x250>)
 8005500:	2221      	movs	r2, #33	; 0x21
 8005502:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005504:	4b72      	ldr	r3, [pc, #456]	; (80056d0 <low_level_init+0x250>)
 8005506:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800550a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800550c:	4b70      	ldr	r3, [pc, #448]	; (80056d0 <low_level_init+0x250>)
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005512:	4870      	ldr	r0, [pc, #448]	; (80056d4 <low_level_init+0x254>)
 8005514:	f009 fad8 	bl	800eac8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2206      	movs	r2, #6
 800551c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005520:	4b67      	ldr	r3, [pc, #412]	; (80056c0 <low_level_init+0x240>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800552c:	4b64      	ldr	r3, [pc, #400]	; (80056c0 <low_level_init+0x240>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	785a      	ldrb	r2, [r3, #1]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005538:	4b61      	ldr	r3, [pc, #388]	; (80056c0 <low_level_init+0x240>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	789a      	ldrb	r2, [r3, #2]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005544:	4b5e      	ldr	r3, [pc, #376]	; (80056c0 <low_level_init+0x240>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	78da      	ldrb	r2, [r3, #3]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005550:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <low_level_init+0x240>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	791a      	ldrb	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800555c:	4b58      	ldr	r3, [pc, #352]	; (80056c0 <low_level_init+0x240>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	795a      	ldrb	r2, [r3, #5]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800556e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005576:	f043 030a 	orr.w	r3, r3, #10
 800557a:	b2da      	uxtb	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005582:	2200      	movs	r2, #0
 8005584:	2101      	movs	r1, #1
 8005586:	2001      	movs	r0, #1
 8005588:	f000 ff04 	bl	8006394 <osSemaphoreNew>
 800558c:	4603      	mov	r3, r0
 800558e:	4a52      	ldr	r2, [pc, #328]	; (80056d8 <low_level_init+0x258>)
 8005590:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005592:	2200      	movs	r2, #0
 8005594:	2101      	movs	r1, #1
 8005596:	2001      	movs	r0, #1
 8005598:	f000 fefc 	bl	8006394 <osSemaphoreNew>
 800559c:	4603      	mov	r3, r0
 800559e:	4a4f      	ldr	r2, [pc, #316]	; (80056dc <low_level_init+0x25c>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80055a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055a6:	2224      	movs	r2, #36	; 0x24
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f012 fa43 	bl	8017a36 <memset>
  attributes.name = "EthIf";
 80055b0:	4b4b      	ldr	r3, [pc, #300]	; (80056e0 <low_level_init+0x260>)
 80055b2:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80055b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80055bc:	2330      	movs	r3, #48	; 0x30
 80055be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80055c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055c6:	461a      	mov	r2, r3
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4846      	ldr	r0, [pc, #280]	; (80056e4 <low_level_init+0x264>)
 80055cc:	f000 fd1b 	bl	8006006 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80055d0:	4945      	ldr	r1, [pc, #276]	; (80056e8 <low_level_init+0x268>)
 80055d2:	4846      	ldr	r0, [pc, #280]	; (80056ec <low_level_init+0x26c>)
 80055d4:	f7fb ffe7 	bl	80015a6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80055d8:	4844      	ldr	r0, [pc, #272]	; (80056ec <low_level_init+0x26c>)
 80055da:	f7fc f816 	bl	800160a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80055de:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d165      	bne.n	80056b2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80055e6:	4841      	ldr	r0, [pc, #260]	; (80056ec <low_level_init+0x26c>)
 80055e8:	f7fc f8b7 	bl	800175a <LAN8742_GetLinkState>
 80055ec:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80055f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	dc06      	bgt.n	8005606 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f009 fe67 	bl	800f2cc <netif_set_link_down>
      netif_set_down(netif);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f009 fdfa 	bl	800f1f8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005604:	e057      	b.n	80056b6 <low_level_init+0x236>
      switch (PHYLinkState)
 8005606:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800560a:	3b02      	subs	r3, #2
 800560c:	2b03      	cmp	r3, #3
 800560e:	d82b      	bhi.n	8005668 <low_level_init+0x1e8>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <low_level_init+0x198>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005629 	.word	0x08005629
 800561c:	0800563b 	.word	0x0800563b
 8005620:	0800564b 	.word	0x0800564b
 8005624:	0800565b 	.word	0x0800565b
        duplex = ETH_FULLDUPLEX_MODE;
 8005628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800562c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005638:	e01f      	b.n	800567a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005644:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005648:	e017      	b.n	800567a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800564a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005652:	2300      	movs	r3, #0
 8005654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005658:	e00f      	b.n	800567a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800565a:	2300      	movs	r3, #0
 800565c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005666:	e008      	b.n	800567a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800566c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005678:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800567a:	f107 0310 	add.w	r3, r7, #16
 800567e:	4619      	mov	r1, r3
 8005680:	480f      	ldr	r0, [pc, #60]	; (80056c0 <low_level_init+0x240>)
 8005682:	f7fd f88b 	bl	800279c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800568c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005692:	f107 0310 	add.w	r3, r7, #16
 8005696:	4619      	mov	r1, r3
 8005698:	4809      	ldr	r0, [pc, #36]	; (80056c0 <low_level_init+0x240>)
 800569a:	f7fd fa53 	bl	8002b44 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800569e:	4808      	ldr	r0, [pc, #32]	; (80056c0 <low_level_init+0x240>)
 80056a0:	f7fc fbb4 	bl	8001e0c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f009 fd39 	bl	800f11c <netif_set_up>
    netif_set_link_up(netif);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f009 fdd8 	bl	800f260 <netif_set_link_up>
}
 80056b0:	e001      	b.n	80056b6 <low_level_init+0x236>
    Error_Handler();
 80056b2:	f7fb faf9 	bl	8000ca8 <Error_Handler>
}
 80056b6:	bf00      	nop
 80056b8:	37a8      	adds	r7, #168	; 0xa8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	24000464 	.word	0x24000464
 80056c4:	40028000 	.word	0x40028000
 80056c8:	30040060 	.word	0x30040060
 80056cc:	30040000 	.word	0x30040000
 80056d0:	24000514 	.word	0x24000514
 80056d4:	0801d518 	.word	0x0801d518
 80056d8:	2400045c 	.word	0x2400045c
 80056dc:	24000460 	.word	0x24000460
 80056e0:	08019ab0 	.word	0x08019ab0
 80056e4:	0800583d 	.word	0x0800583d
 80056e8:	2400001c 	.word	0x2400001c
 80056ec:	2400054c 	.word	0x2400054c

080056f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b092      	sub	sp, #72	; 0x48
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	2230      	movs	r2, #48	; 0x30
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f012 f990 	bl	8017a36 <memset>

  for(q = p; q != NULL; q = q->next)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	643b      	str	r3, [r7, #64]	; 0x40
 800571a:	e045      	b.n	80057a8 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 800571c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571e:	2b03      	cmp	r3, #3
 8005720:	d902      	bls.n	8005728 <low_level_output+0x38>
      return ERR_IF;
 8005722:	f06f 030b 	mvn.w	r3, #11
 8005726:	e065      	b.n	80057f4 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572a:	6859      	ldr	r1, [r3, #4]
 800572c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800572e:	4613      	mov	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	3348      	adds	r3, #72	; 0x48
 8005738:	443b      	add	r3, r7
 800573a:	3b3c      	subs	r3, #60	; 0x3c
 800573c:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800573e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005740:	895b      	ldrh	r3, [r3, #10]
 8005742:	4619      	mov	r1, r3
 8005744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	3348      	adds	r3, #72	; 0x48
 8005750:	443b      	add	r3, r7
 8005752:	3b38      	subs	r3, #56	; 0x38
 8005754:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005758:	2b00      	cmp	r3, #0
 800575a:	d011      	beq.n	8005780 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800575c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	f107 000c 	add.w	r0, r7, #12
 8005764:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005766:	460b      	mov	r3, r1
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	440b      	add	r3, r1
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	18c1      	adds	r1, r0, r3
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	3348      	adds	r3, #72	; 0x48
 800577a:	443b      	add	r3, r7
 800577c:	3b34      	subs	r3, #52	; 0x34
 800577e:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	3348      	adds	r3, #72	; 0x48
 8005794:	443b      	add	r3, r7
 8005796:	3b34      	subs	r3, #52	; 0x34
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	3301      	adds	r3, #1
 80057a0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80057a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	643b      	str	r3, [r7, #64]	; 0x40
 80057a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1b6      	bne.n	800571c <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	891b      	ldrh	r3, [r3, #8]
 80057b2:	461a      	mov	r2, r3
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <low_level_output+0x10c>)
 80057b6:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80057b8:	4a10      	ldr	r2, [pc, #64]	; (80057fc <low_level_output+0x10c>)
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80057c0:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <low_level_output+0x10c>)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80057c6:	6838      	ldr	r0, [r7, #0]
 80057c8:	f00a fa06 	bl	800fbd8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80057cc:	490b      	ldr	r1, [pc, #44]	; (80057fc <low_level_output+0x10c>)
 80057ce:	480c      	ldr	r0, [pc, #48]	; (8005800 <low_level_output+0x110>)
 80057d0:	f7fc fc20 	bl	8002014 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80057d4:	bf00      	nop
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <low_level_output+0x114>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f04f 31ff 	mov.w	r1, #4294967295
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fe62 	bl	80064a8 <osSemaphoreAcquire>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f5      	bne.n	80057d6 <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80057ea:	4805      	ldr	r0, [pc, #20]	; (8005800 <low_level_output+0x110>)
 80057ec:	f7fc fd91 	bl	8002312 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80057f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3748      	adds	r7, #72	; 0x48
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	24000514 	.word	0x24000514
 8005800:	24000464 	.word	0x24000464
 8005804:	24000460 	.word	0x24000460

08005808 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <low_level_input+0x2c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d105      	bne.n	8005828 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	4619      	mov	r1, r3
 8005822:	4805      	ldr	r0, [pc, #20]	; (8005838 <low_level_input+0x30>)
 8005824:	f7fc fc47 	bl	80020b6 <HAL_ETH_ReadData>
  }

  return p;
 8005828:	68fb      	ldr	r3, [r7, #12]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	24000458 	.word	0x24000458
 8005838:	24000464 	.word	0x24000464

0800583c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <ethernetif_input+0x50>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f04f 31ff 	mov.w	r1, #4294967295
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fe27 	bl	80064a8 <osSemaphoreAcquire>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f5      	bne.n	800584c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f7ff ffd1 	bl	8005808 <low_level_input>
 8005866:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	4798      	blx	r3
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f00a f904 	bl	800fa8c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1ea      	bne.n	8005860 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800588a:	e7df      	b.n	800584c <ethernetif_input+0x10>
 800588c:	2400045c 	.word	0x2400045c

08005890 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <ethernetif_init+0x1c>
 800589e:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <ethernetif_init+0x48>)
 80058a0:	f240 2217 	movw	r2, #535	; 0x217
 80058a4:	490d      	ldr	r1, [pc, #52]	; (80058dc <ethernetif_init+0x4c>)
 80058a6:	480e      	ldr	r0, [pc, #56]	; (80058e0 <ethernetif_init+0x50>)
 80058a8:	f012 f962 	bl	8017b70 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2273      	movs	r2, #115	; 0x73
 80058b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2274      	movs	r2, #116	; 0x74
 80058b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <ethernetif_init+0x54>)
 80058c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <ethernetif_init+0x58>)
 80058c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fdd9 	bl	8005480 <low_level_init>

  return ERR_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08019ab8 	.word	0x08019ab8
 80058dc:	08019ad4 	.word	0x08019ad4
 80058e0:	08019ae4 	.word	0x08019ae4
 80058e4:	0800c411 	.word	0x0800c411
 80058e8:	080056f1 	.word	0x080056f1

080058ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	4809      	ldr	r0, [pc, #36]	; (8005920 <pbuf_free_custom+0x34>)
 80058fc:	f009 f9d4 	bl	800eca8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005900:	4b08      	ldr	r3, [pc, #32]	; (8005924 <pbuf_free_custom+0x38>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <pbuf_free_custom+0x38>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <pbuf_free_custom+0x3c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fe1a 	bl	800654c <osSemaphoreRelease>
  }
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	0801d518 	.word	0x0801d518
 8005924:	24000458 	.word	0x24000458
 8005928:	2400045c 	.word	0x2400045c

0800592c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005930:	f7fb ffea 	bl	8001908 <HAL_GetTick>
 8005934:	4603      	mov	r3, r0
}
 8005936:	4618      	mov	r0, r3
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	; 0x38
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	605a      	str	r2, [r3, #4]
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a5d      	ldr	r2, [pc, #372]	; (8005ad0 <HAL_ETH_MspInit+0x194>)
 800595a:	4293      	cmp	r3, r2
 800595c:	f040 80b3 	bne.w	8005ac6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005960:	4b5c      	ldr	r3, [pc, #368]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005966:	4a5b      	ldr	r2, [pc, #364]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005970:	4b58      	ldr	r3, [pc, #352]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800597e:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005984:	4a53      	ldr	r2, [pc, #332]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800598e:	4b51      	ldr	r3, [pc, #324]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800599c:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 800599e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059a2:	4a4c      	ldr	r2, [pc, #304]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80059ac:	4b49      	ldr	r3, [pc, #292]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059ba:	4b46      	ldr	r3, [pc, #280]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059c0:	4a44      	ldr	r2, [pc, #272]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ca:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d8:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059de:	4a3d      	ldr	r2, [pc, #244]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059e8:	4b3a      	ldr	r3, [pc, #232]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059f6:	4b37      	ldr	r3, [pc, #220]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059fc:	4a35      	ldr	r2, [pc, #212]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 80059fe:	f043 0302 	orr.w	r3, r3, #2
 8005a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a06:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a14:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a1a:	4a2e      	ldr	r2, [pc, #184]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <HAL_ETH_MspInit+0x198>)
 8005a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005a32:	2332      	movs	r3, #50	; 0x32
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a36:	2302      	movs	r3, #2
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a42:	230b      	movs	r3, #11
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4822      	ldr	r0, [pc, #136]	; (8005ad8 <HAL_ETH_MspInit+0x19c>)
 8005a4e:	f7fd fe6d 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005a52:	2386      	movs	r3, #134	; 0x86
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a56:	2302      	movs	r3, #2
 8005a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a62:	230b      	movs	r3, #11
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	481b      	ldr	r0, [pc, #108]	; (8005adc <HAL_ETH_MspInit+0x1a0>)
 8005a6e:	f7fd fe5d 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a80:	2303      	movs	r3, #3
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a84:	230b      	movs	r3, #11
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4814      	ldr	r0, [pc, #80]	; (8005ae0 <HAL_ETH_MspInit+0x1a4>)
 8005a90:	f7fd fe4c 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005a94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005aa6:	230b      	movs	r3, #11
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aae:	4619      	mov	r1, r3
 8005ab0:	480c      	ldr	r0, [pc, #48]	; (8005ae4 <HAL_ETH_MspInit+0x1a8>)
 8005ab2:	f7fd fe3b 	bl	800372c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2105      	movs	r1, #5
 8005aba:	203d      	movs	r0, #61	; 0x3d
 8005abc:	f7fc f808 	bl	8001ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005ac0:	203d      	movs	r0, #61	; 0x3d
 8005ac2:	f7fc f81f 	bl	8001b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	3738      	adds	r7, #56	; 0x38
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40028000 	.word	0x40028000
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	58020800 	.word	0x58020800
 8005adc:	58020000 	.word	0x58020000
 8005ae0:	58020400 	.word	0x58020400
 8005ae4:	58021800 	.word	0x58021800

08005ae8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <ETH_PHY_IO_Init+0x10>)
 8005aee:	f7fd f843 	bl	8002b78 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	24000464 	.word	0x24000464

08005afc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  return 0;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	68f9      	ldr	r1, [r7, #12]
 8005b1e:	4807      	ldr	r0, [pc, #28]	; (8005b3c <ETH_PHY_IO_ReadReg+0x30>)
 8005b20:	f7fc fd94 	bl	800264c <HAL_ETH_ReadPHYRegister>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2e:	e000      	b.n	8005b32 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	24000464 	.word	0x24000464

08005b40 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	4807      	ldr	r0, [pc, #28]	; (8005b70 <ETH_PHY_IO_WriteReg+0x30>)
 8005b54:	f7fc fdce 	bl	80026f4 <HAL_ETH_WritePHYRegister>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b62:	e000      	b.n	8005b66 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	24000464 	.word	0x24000464

08005b74 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005b78:	f7fb fec6 	bl	8001908 <HAL_GetTick>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b0a0      	sub	sp, #128	; 0x80
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	2264      	movs	r2, #100	; 0x64
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f011 ff4e 	bl	8017a36 <memset>
  int32_t PHYLinkState = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	66fb      	str	r3, [r7, #108]	; 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 8005bae:	f000 f921 	bl	8005df4 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005bb2:	483c      	ldr	r0, [pc, #240]	; (8005ca4 <ethernet_link_thread+0x120>)
 8005bb4:	f7fb fdd1 	bl	800175a <LAN8742_GetLinkState>
 8005bb8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bc0:	089b      	lsrs	r3, r3, #2
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00c      	beq.n	8005be6 <ethernet_link_thread+0x62>
 8005bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	dc09      	bgt.n	8005be6 <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 8005bd2:	4835      	ldr	r0, [pc, #212]	; (8005ca8 <ethernet_link_thread+0x124>)
 8005bd4:	f7fc f9a6 	bl	8001f24 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005bd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005bda:	f009 fb0d 	bl	800f1f8 <netif_set_down>
    netif_set_link_down(netif);
 8005bde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005be0:	f009 fb74 	bl	800f2cc <netif_set_link_down>
 8005be4:	e055      	b.n	8005c92 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d14e      	bne.n	8005c92 <ethernet_link_thread+0x10e>
 8005bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	dd4b      	ble.n	8005c92 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 8005bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfc:	3b02      	subs	r3, #2
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d82a      	bhi.n	8005c58 <ethernet_link_thread+0xd4>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <ethernet_link_thread+0x84>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c2b 	.word	0x08005c2b
 8005c10:	08005c3b 	.word	0x08005c3b
 8005c14:	08005c4b 	.word	0x08005c4b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c1c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005c1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c22:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c24:	2301      	movs	r3, #1
 8005c26:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c28:	e017      	b.n	8005c5a <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c32:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c34:	2301      	movs	r3, #1
 8005c36:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c38:	e00f      	b.n	8005c5a <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c3e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005c40:	2300      	movs	r3, #0
 8005c42:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c44:	2301      	movs	r3, #1
 8005c46:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c48:	e007      	b.n	8005c5a <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c56:	e000      	b.n	8005c5a <ethernet_link_thread+0xd6>
    default:
      break;
 8005c58:	bf00      	nop
    }

    if(linkchanged)
 8005c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d018      	beq.n	8005c92 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	4619      	mov	r1, r3
 8005c66:	4810      	ldr	r0, [pc, #64]	; (8005ca8 <ethernet_link_thread+0x124>)
 8005c68:	f7fc fd98 	bl	800279c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c6e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c72:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005c74:	f107 0308 	add.w	r3, r7, #8
 8005c78:	4619      	mov	r1, r3
 8005c7a:	480b      	ldr	r0, [pc, #44]	; (8005ca8 <ethernet_link_thread+0x124>)
 8005c7c:	f7fc ff62 	bl	8002b44 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <ethernet_link_thread+0x124>)
 8005c82:	f7fc f8c3 	bl	8001e0c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005c86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c88:	f009 fa48 	bl	800f11c <netif_set_up>
      netif_set_link_up(netif);
 8005c8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c8e:	f009 fae7 	bl	800f260 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 8005c92:	f000 f8bf 	bl	8005e14 <sys_unlock_tcpip_core>
  osDelay(100);
 8005c96:	2064      	movs	r0, #100	; 0x64
 8005c98:	f000 fa53 	bl	8006142 <osDelay>
  LOCK_TCPIP_CORE();
 8005c9c:	f000 f8aa 	bl	8005df4 <sys_lock_tcpip_core>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005ca0:	e787      	b.n	8005bb2 <ethernet_link_thread+0x2e>
 8005ca2:	bf00      	nop
 8005ca4:	2400054c 	.word	0x2400054c
 8005ca8:	24000464 	.word	0x24000464

08005cac <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005cb4:	4812      	ldr	r0, [pc, #72]	; (8005d00 <HAL_ETH_RxAllocateCallback+0x54>)
 8005cb6:	f008 ff83 	bl	800ebc0 <memp_malloc_pool>
 8005cba:	60f8      	str	r0, [r7, #12]
  if (p)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d014      	beq.n	8005cec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f103 0220 	add.w	r2, r3, #32
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <HAL_ETH_RxAllocateCallback+0x58>)
 8005cd0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005cda:	9201      	str	r2, [sp, #4]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2241      	movs	r2, #65	; 0x41
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f009 fd19 	bl	800f71c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005cea:	e005      	b.n	8005cf8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	0801d518 	.word	0x0801d518
 8005d04:	080058ed 	.word	0x080058ed
 8005d08:	24000458 	.word	0x24000458

08005d0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b08d      	sub	sp, #52	; 0x34
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3b20      	subs	r3, #32
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	2200      	movs	r2, #0
 8005d36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	887a      	ldrh	r2, [r7, #2]
 8005d3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e003      	b.n	8005d56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d62:	e009      	b.n	8005d78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	891a      	ldrh	r2, [r3, #8]
 8005d68:	887b      	ldrh	r3, [r7, #2]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f2      	bne.n	8005d64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005d7e:	887b      	ldrh	r3, [r7, #2]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	623a      	str	r2, [r7, #32]
 8005d84:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dd1d      	ble.n	8005dc8 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	f003 021f 	and.w	r2, r3, #31
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d9c:	f3bf 8f4f 	dsb	sy
}
 8005da0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005da2:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <HAL_ETH_RxLinkCallback+0xcc>)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	3320      	adds	r3, #32
 8005dae:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	3b20      	subs	r3, #32
 8005db4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dcf2      	bgt.n	8005da2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005dbc:	f3bf 8f4f 	dsb	sy
}
 8005dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005dc2:	f3bf 8f6f 	isb	sy
}
 8005dc6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005dc8:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005dca:	bf00      	nop
 8005dcc:	3734      	adds	r7, #52	; 0x34
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f009 fe51 	bl	800fa8c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 8005df8:	4804      	ldr	r0, [pc, #16]	; (8005e0c <sys_lock_tcpip_core+0x18>)
 8005dfa:	f00a fadf 	bl	80103bc <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8005dfe:	f000 f995 	bl	800612c <osThreadGetId>
 8005e02:	4603      	mov	r3, r0
 8005e04:	4a02      	ldr	r2, [pc, #8]	; (8005e10 <sys_lock_tcpip_core+0x1c>)
 8005e06:	6013      	str	r3, [r2, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	240109a4 	.word	0x240109a4
 8005e10:	2400056c 	.word	0x2400056c

08005e14 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <sys_unlock_tcpip_core+0x14>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8005e1e:	4803      	ldr	r0, [pc, #12]	; (8005e2c <sys_unlock_tcpip_core+0x18>)
 8005e20:	f00a fadb 	bl	80103da <sys_mutex_unlock>
}
 8005e24:	bf00      	nop
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	2400056c 	.word	0x2400056c
 8005e2c:	240109a4 	.word	0x240109a4

08005e30 <sys_check_core_locking>:

void sys_check_core_locking(void){
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <sys_check_core_locking+0x5c>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d006      	beq.n	8005e50 <sys_check_core_locking+0x20>
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <sys_check_core_locking+0x60>)
 8005e44:	f240 32cb 	movw	r2, #971	; 0x3cb
 8005e48:	4912      	ldr	r1, [pc, #72]	; (8005e94 <sys_check_core_locking+0x64>)
 8005e4a:	4813      	ldr	r0, [pc, #76]	; (8005e98 <sys_check_core_locking+0x68>)
 8005e4c:	f011 fe90 	bl	8017b70 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <sys_check_core_locking+0x6c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d014      	beq.n	8005e82 <sys_check_core_locking+0x52>
	  osThreadId_t current_thread_id = osThreadGetId();
 8005e58:	f000 f968 	bl	800612c <osThreadGetId>
 8005e5c:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8005e5e:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <sys_check_core_locking+0x70>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d006      	beq.n	8005e76 <sys_check_core_locking+0x46>
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <sys_check_core_locking+0x60>)
 8005e6a:	f240 32d1 	movw	r2, #977	; 0x3d1
 8005e6e:	490d      	ldr	r1, [pc, #52]	; (8005ea4 <sys_check_core_locking+0x74>)
 8005e70:	4809      	ldr	r0, [pc, #36]	; (8005e98 <sys_check_core_locking+0x68>)
 8005e72:	f011 fe7d 	bl	8017b70 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <sys_check_core_locking+0x70>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d000      	beq.n	8005e82 <sys_check_core_locking+0x52>
 8005e80:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	e000ed00 	.word	0xe000ed00
 8005e90:	08019ab8 	.word	0x08019ab8
 8005e94:	08019b0c 	.word	0x08019b0c
 8005e98:	08019ae4 	.word	0x08019ae4
 8005e9c:	24000570 	.word	0x24000570
 8005ea0:	2400056c 	.word	0x2400056c
 8005ea4:	08019b34 	.word	0x08019b34

08005ea8 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 8005eac:	f000 f93e 	bl	800612c <osThreadGetId>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	4a02      	ldr	r2, [pc, #8]	; (8005ebc <sys_mark_tcpip_thread+0x14>)
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	24000570 	.word	0x24000570

08005ec0 <__NVIC_SetPriority>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	db0a      	blt.n	8005eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	490c      	ldr	r1, [pc, #48]	; (8005f0c <__NVIC_SetPriority+0x4c>)
 8005eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ede:	0112      	lsls	r2, r2, #4
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ee8:	e00a      	b.n	8005f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4908      	ldr	r1, [pc, #32]	; (8005f10 <__NVIC_SetPriority+0x50>)
 8005ef0:	88fb      	ldrh	r3, [r7, #6]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	3b04      	subs	r3, #4
 8005ef8:	0112      	lsls	r2, r2, #4
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	440b      	add	r3, r1
 8005efe:	761a      	strb	r2, [r3, #24]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	e000e100 	.word	0xe000e100
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <SysTick_Handler+0x1c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f1c:	f003 f98e 	bl	800923c <xTaskGetSchedulerState>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005f26:	f001 f97f 	bl	8007228 <xPortSysTickHandler>
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e000e010 	.word	0xe000e010

08005f34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f06f 0004 	mvn.w	r0, #4
 8005f3e:	f7ff ffbf 	bl	8005ec0 <__NVIC_SetPriority>
#endif
}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f4e:	f3ef 8305 	mrs	r3, IPSR
 8005f52:	603b      	str	r3, [r7, #0]
  return(result);
 8005f54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f5a:	f06f 0305 	mvn.w	r3, #5
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	e00c      	b.n	8005f7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <osKernelInitialize+0x44>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f6a:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <osKernelInitialize+0x44>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e002      	b.n	8005f7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f7c:	687b      	ldr	r3, [r7, #4]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	24000574 	.word	0x24000574

08005f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f96:	f3ef 8305 	mrs	r3, IPSR
 8005f9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005fa2:	f06f 0305 	mvn.w	r3, #5
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	e010      	b.n	8005fcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <osKernelStart+0x48>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d109      	bne.n	8005fc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fb2:	f7ff ffbf 	bl	8005f34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <osKernelStart+0x48>)
 8005fb8:	2202      	movs	r2, #2
 8005fba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fbc:	f002 fcb0 	bl	8008920 <vTaskStartScheduler>
      stat = osOK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	e002      	b.n	8005fcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005fcc:	687b      	ldr	r3, [r7, #4]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	24000574 	.word	0x24000574

08005fdc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe2:	f3ef 8305 	mrs	r3, IPSR
 8005fe6:	603b      	str	r3, [r7, #0]
  return(result);
 8005fe8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005fee:	f002 fdc3 	bl	8008b78 <xTaskGetTickCountFromISR>
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	e002      	b.n	8005ffc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005ff6:	f002 fdaf 	bl	8008b58 <xTaskGetTickCount>
 8005ffa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005ffc:	687b      	ldr	r3, [r7, #4]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006006:	b580      	push	{r7, lr}
 8006008:	b08e      	sub	sp, #56	; 0x38
 800600a:	af04      	add	r7, sp, #16
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006016:	f3ef 8305 	mrs	r3, IPSR
 800601a:	617b      	str	r3, [r7, #20]
  return(result);
 800601c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800601e:	2b00      	cmp	r3, #0
 8006020:	d17f      	bne.n	8006122 <osThreadNew+0x11c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d07c      	beq.n	8006122 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800602e:	2318      	movs	r3, #24
 8006030:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d045      	beq.n	80060ce <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osThreadNew+0x4a>
        name = attr->name;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <osThreadNew+0x70>
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	2b38      	cmp	r3, #56	; 0x38
 8006068:	d805      	bhi.n	8006076 <osThreadNew+0x70>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <osThreadNew+0x74>
        return (NULL);
 8006076:	2300      	movs	r3, #0
 8006078:	e054      	b.n	8006124 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <osThreadNew+0xaa>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2bbb      	cmp	r3, #187	; 0xbb
 8006098:	d90a      	bls.n	80060b0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d006      	beq.n	80060b0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <osThreadNew+0xaa>
        mem = 1;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e010      	b.n	80060d2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10c      	bne.n	80060d2 <osThreadNew+0xcc>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d108      	bne.n	80060d2 <osThreadNew+0xcc>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <osThreadNew+0xcc>
          mem = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e001      	b.n	80060d2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d110      	bne.n	80060fa <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060e0:	9202      	str	r2, [sp, #8]
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f002 fa2a 	bl	8008548 <xTaskCreateStatic>
 80060f4:	4603      	mov	r3, r0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e013      	b.n	8006122 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d110      	bne.n	8006122 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	b29a      	uxth	r2, r3
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f002 fa75 	bl	8008602 <xTaskCreate>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <osThreadNew+0x11c>
            hTask = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006122:	693b      	ldr	r3, [r7, #16]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3728      	adds	r7, #40	; 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8006132:	f003 f873 	bl	800921c <xTaskGetCurrentTaskHandle>
 8006136:	6078      	str	r0, [r7, #4]

  return (id);
 8006138:	687b      	ldr	r3, [r7, #4]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800614a:	f3ef 8305 	mrs	r3, IPSR
 800614e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006150:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <osDelay+0x1c>
    stat = osErrorISR;
 8006156:	f06f 0305 	mvn.w	r3, #5
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e007      	b.n	800616e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f002 fba5 	bl	80088b8 <vTaskDelay>
    }
  }

  return (stat);
 800616e:	68fb      	ldr	r3, [r7, #12]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006184:	f3ef 8305 	mrs	r3, IPSR
 8006188:	60bb      	str	r3, [r7, #8]
  return(result);
 800618a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800618c:	2b00      	cmp	r3, #0
 800618e:	d174      	bne.n	800627a <osMutexNew+0x102>
    if (attr != NULL) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <osMutexNew+0x26>
      type = attr->attr_bits;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e001      	b.n	80061a2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <osMutexNew+0x3a>
      rmtx = 1U;
 80061ac:	2301      	movs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e001      	b.n	80061b6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d15c      	bne.n	800627a <osMutexNew+0x102>
      mem = -1;
 80061c0:	f04f 33ff 	mov.w	r3, #4294967295
 80061c4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <osMutexNew+0x6a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b4f      	cmp	r3, #79	; 0x4f
 80061da:	d902      	bls.n	80061e2 <osMutexNew+0x6a>
          mem = 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	e00c      	b.n	80061fc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <osMutexNew+0x84>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <osMutexNew+0x84>
            mem = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	e001      	b.n	80061fc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d112      	bne.n	8006228 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4619      	mov	r1, r3
 800620e:	2004      	movs	r0, #4
 8006210:	f001 fa09 	bl	8007626 <xQueueCreateMutexStatic>
 8006214:	61f8      	str	r0, [r7, #28]
 8006216:	e016      	b.n	8006246 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4619      	mov	r1, r3
 800621e:	2001      	movs	r0, #1
 8006220:	f001 fa01 	bl	8007626 <xQueueCreateMutexStatic>
 8006224:	61f8      	str	r0, [r7, #28]
 8006226:	e00e      	b.n	8006246 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006234:	2004      	movs	r0, #4
 8006236:	f001 f9de 	bl	80075f6 <xQueueCreateMutex>
 800623a:	61f8      	str	r0, [r7, #28]
 800623c:	e003      	b.n	8006246 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800623e:	2001      	movs	r0, #1
 8006240:	f001 f9d9 	bl	80075f6 <xQueueCreateMutex>
 8006244:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <osMutexNew+0xee>
        if (attr != NULL) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <osMutexNew+0xe2>
          name = attr->name;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e001      	b.n	800625e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	69f8      	ldr	r0, [r7, #28]
 8006262:	f002 f8e9 	bl	8008438 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <osMutexNew+0x102>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800627a:	69fb      	ldr	r3, [r7, #28]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a2:	f3ef 8305 	mrs	r3, IPSR
 80062a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80062a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80062ae:	f06f 0305 	mvn.w	r3, #5
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e02c      	b.n	8006310 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80062bc:	f06f 0303 	mvn.w	r3, #3
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e025      	b.n	8006310 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6938      	ldr	r0, [r7, #16]
 80062ce:	f001 f9f9 	bl	80076c4 <xQueueTakeMutexRecursive>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d01b      	beq.n	8006310 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80062de:	f06f 0301 	mvn.w	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e014      	b.n	8006310 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80062e6:	f06f 0302 	mvn.w	r3, #2
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e010      	b.n	8006310 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6938      	ldr	r0, [r7, #16]
 80062f2:	f001 fd8d 	bl	8007e10 <xQueueSemaphoreTake>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d009      	beq.n	8006310 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006302:	f06f 0301 	mvn.w	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e002      	b.n	8006310 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800630a:	f06f 0302 	mvn.w	r3, #2
 800630e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006310:	697b      	ldr	r3, [r7, #20]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006336:	f3ef 8305 	mrs	r3, IPSR
 800633a:	60bb      	str	r3, [r7, #8]
  return(result);
 800633c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <osMutexRelease+0x30>
    stat = osErrorISR;
 8006342:	f06f 0305 	mvn.w	r3, #5
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	e01f      	b.n	800638a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006350:	f06f 0303 	mvn.w	r3, #3
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e018      	b.n	800638a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800635e:	6938      	ldr	r0, [r7, #16]
 8006360:	f001 f97c 	bl	800765c <xQueueGiveMutexRecursive>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d00f      	beq.n	800638a <osMutexRelease+0x70>
        stat = osErrorResource;
 800636a:	f06f 0302 	mvn.w	r3, #2
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e00b      	b.n	800638a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006372:	2300      	movs	r3, #0
 8006374:	2200      	movs	r2, #0
 8006376:	2100      	movs	r1, #0
 8006378:	6938      	ldr	r0, [r7, #16]
 800637a:	f001 fa43 	bl	8007804 <xQueueGenericSend>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d002      	beq.n	800638a <osMutexRelease+0x70>
        stat = osErrorResource;
 8006384:	f06f 0302 	mvn.w	r3, #2
 8006388:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800638a:	697b      	ldr	r3, [r7, #20]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a4:	f3ef 8305 	mrs	r3, IPSR
 80063a8:	613b      	str	r3, [r7, #16]
  return(result);
 80063aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d175      	bne.n	800649c <osSemaphoreNew+0x108>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d072      	beq.n	800649c <osSemaphoreNew+0x108>
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d86e      	bhi.n	800649c <osSemaphoreNew+0x108>
    mem = -1;
 80063be:	f04f 33ff 	mov.w	r3, #4294967295
 80063c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d015      	beq.n	80063f6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <osSemaphoreNew+0x4c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b4f      	cmp	r3, #79	; 0x4f
 80063d8:	d902      	bls.n	80063e0 <osSemaphoreNew+0x4c>
        mem = 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e00c      	b.n	80063fa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d108      	bne.n	80063fa <osSemaphoreNew+0x66>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <osSemaphoreNew+0x66>
          mem = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e001      	b.n	80063fa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d04c      	beq.n	800649c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d128      	bne.n	800645a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d10a      	bne.n	8006424 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2203      	movs	r2, #3
 8006414:	9200      	str	r2, [sp, #0]
 8006416:	2200      	movs	r2, #0
 8006418:	2100      	movs	r1, #0
 800641a:	2001      	movs	r0, #1
 800641c:	f000 fffc 	bl	8007418 <xQueueGenericCreateStatic>
 8006420:	61f8      	str	r0, [r7, #28]
 8006422:	e005      	b.n	8006430 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006424:	2203      	movs	r2, #3
 8006426:	2100      	movs	r1, #0
 8006428:	2001      	movs	r0, #1
 800642a:	f001 f86d 	bl	8007508 <xQueueGenericCreate>
 800642e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d022      	beq.n	800647c <osSemaphoreNew+0xe8>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01f      	beq.n	800647c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800643c:	2300      	movs	r3, #0
 800643e:	2200      	movs	r2, #0
 8006440:	2100      	movs	r1, #0
 8006442:	69f8      	ldr	r0, [r7, #28]
 8006444:	f001 f9de 	bl	8007804 <xQueueGenericSend>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d016      	beq.n	800647c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800644e:	69f8      	ldr	r0, [r7, #28]
 8006450:	f001 fea6 	bl	80081a0 <vQueueDelete>
            hSemaphore = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	e010      	b.n	800647c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d108      	bne.n	8006472 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	461a      	mov	r2, r3
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f001 f961 	bl	8007730 <xQueueCreateCountingSemaphoreStatic>
 800646e:	61f8      	str	r0, [r7, #28]
 8006470:	e004      	b.n	800647c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f001 f992 	bl	800779e <xQueueCreateCountingSemaphore>
 800647a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e001      	b.n	8006494 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006494:	6979      	ldr	r1, [r7, #20]
 8006496:	69f8      	ldr	r0, [r7, #28]
 8006498:	f001 ffce 	bl	8008438 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800649c:	69fb      	ldr	r3, [r7, #28]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80064c0:	f06f 0303 	mvn.w	r3, #3
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e039      	b.n	800653c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c8:	f3ef 8305 	mrs	r3, IPSR
 80064cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80064ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d022      	beq.n	800651a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80064da:	f06f 0303 	mvn.w	r3, #3
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e02c      	b.n	800653c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	461a      	mov	r2, r3
 80064ec:	2100      	movs	r1, #0
 80064ee:	6938      	ldr	r0, [r7, #16]
 80064f0:	f001 fd9a 	bl	8008028 <xQueueReceiveFromISR>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d003      	beq.n	8006502 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80064fa:	f06f 0302 	mvn.w	r3, #2
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e01c      	b.n	800653c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d019      	beq.n	800653c <osSemaphoreAcquire+0x94>
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <osSemaphoreAcquire+0xa0>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	e010      	b.n	800653c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f001 fc77 	bl	8007e10 <xQueueSemaphoreTake>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d009      	beq.n	800653c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800652e:	f06f 0301 	mvn.w	r3, #1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e002      	b.n	800653c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006536:	f06f 0302 	mvn.w	r3, #2
 800653a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006562:	f06f 0303 	mvn.w	r3, #3
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e02c      	b.n	80065c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656a:	f3ef 8305 	mrs	r3, IPSR
 800656e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006570:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01a      	beq.n	80065ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800657a:	f107 0308 	add.w	r3, r7, #8
 800657e:	4619      	mov	r1, r3
 8006580:	6938      	ldr	r0, [r7, #16]
 8006582:	f001 fad8 	bl	8007b36 <xQueueGiveFromISR>
 8006586:	4603      	mov	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d003      	beq.n	8006594 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800658c:	f06f 0302 	mvn.w	r3, #2
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	e017      	b.n	80065c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <osSemaphoreRelease+0x78>
 800659a:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <osSemaphoreRelease+0x84>)
 800659c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	e00b      	b.n	80065c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065ac:	2300      	movs	r3, #0
 80065ae:	2200      	movs	r2, #0
 80065b0:	2100      	movs	r1, #0
 80065b2:	6938      	ldr	r0, [r7, #16]
 80065b4:	f001 f926 	bl	8007804 <xQueueGenericSend>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d002      	beq.n	80065c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80065be:	f06f 0302 	mvn.w	r3, #2
 80065c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80065c4:	697b      	ldr	r3, [r7, #20]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e0:	f3ef 8305 	mrs	r3, IPSR
 80065e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80065ec:	f06f 0305 	mvn.w	r3, #5
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e00e      	b.n	8006612 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80065fa:	f06f 0303 	mvn.w	r3, #3
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e007      	b.n	8006612 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f001 ff42 	bl	800848c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800660c:	6938      	ldr	r0, [r7, #16]
 800660e:	f001 fdc7 	bl	80081a0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006612:	697b      	ldr	r3, [r7, #20]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	; 0x28
 8006620:	af02      	add	r7, sp, #8
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800662c:	f3ef 8305 	mrs	r3, IPSR
 8006630:	613b      	str	r3, [r7, #16]
  return(result);
 8006632:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006634:	2b00      	cmp	r3, #0
 8006636:	d15f      	bne.n	80066f8 <osMessageQueueNew+0xdc>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d05c      	beq.n	80066f8 <osMessageQueueNew+0xdc>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d059      	beq.n	80066f8 <osMessageQueueNew+0xdc>
    mem = -1;
 8006644:	f04f 33ff 	mov.w	r3, #4294967295
 8006648:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d029      	beq.n	80066a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d012      	beq.n	800667e <osMessageQueueNew+0x62>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b4f      	cmp	r3, #79	; 0x4f
 800665e:	d90e      	bls.n	800667e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00a      	beq.n	800667e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <osMessageQueueNew+0x62>
        mem = 1;
 8006678:	2301      	movs	r3, #1
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e014      	b.n	80066a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d110      	bne.n	80066a8 <osMessageQueueNew+0x8c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006692:	2b00      	cmp	r3, #0
 8006694:	d108      	bne.n	80066a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	e001      	b.n	80066a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10b      	bne.n	80066c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2100      	movs	r1, #0
 80066b8:	9100      	str	r1, [sp, #0]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 feab 	bl	8007418 <xQueueGenericCreateStatic>
 80066c2:	61f8      	str	r0, [r7, #28]
 80066c4:	e008      	b.n	80066d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80066cc:	2200      	movs	r2, #0
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 ff19 	bl	8007508 <xQueueGenericCreate>
 80066d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <osMessageQueueNew+0xd0>
        name = attr->name;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e001      	b.n	80066f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80066f0:	6979      	ldr	r1, [r7, #20]
 80066f2:	69f8      	ldr	r0, [r7, #28]
 80066f4:	f001 fea0 	bl	8008438 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80066f8:	69fb      	ldr	r3, [r7, #28]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006718:	2300      	movs	r3, #0
 800671a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800671c:	f3ef 8305 	mrs	r3, IPSR
 8006720:	617b      	str	r3, [r7, #20]
  return(result);
 8006722:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006724:	2b00      	cmp	r3, #0
 8006726:	d028      	beq.n	800677a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <osMessageQueuePut+0x36>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <osMessageQueuePut+0x36>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800673a:	f06f 0303 	mvn.w	r3, #3
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	e038      	b.n	80067b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006746:	f107 0210 	add.w	r2, r7, #16
 800674a:	2300      	movs	r3, #0
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	69b8      	ldr	r0, [r7, #24]
 8006750:	f001 f956 	bl	8007a00 <xQueueGenericSendFromISR>
 8006754:	4603      	mov	r3, r0
 8006756:	2b01      	cmp	r3, #1
 8006758:	d003      	beq.n	8006762 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800675a:	f06f 0302 	mvn.w	r3, #2
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e028      	b.n	80067b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d025      	beq.n	80067b4 <osMessageQueuePut+0xb0>
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <osMessageQueuePut+0xbc>)
 800676a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	e01c      	b.n	80067b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <osMessageQueuePut+0x82>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006786:	f06f 0303 	mvn.w	r3, #3
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e012      	b.n	80067b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800678e:	2300      	movs	r3, #0
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	69b8      	ldr	r0, [r7, #24]
 8006796:	f001 f835 	bl	8007804 <xQueueGenericSend>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d009      	beq.n	80067b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80067a6:	f06f 0301 	mvn.w	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e002      	b.n	80067b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80067ae:	f06f 0302 	mvn.w	r3, #2
 80067b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80067b4:	69fb      	ldr	r3, [r7, #28]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067da:	f3ef 8305 	mrs	r3, IPSR
 80067de:	617b      	str	r3, [r7, #20]
  return(result);
 80067e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d028      	beq.n	8006838 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <osMessageQueueGet+0x34>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <osMessageQueueGet+0x34>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80067f8:	f06f 0303 	mvn.w	r3, #3
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e037      	b.n	8006870 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	461a      	mov	r2, r3
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	69b8      	ldr	r0, [r7, #24]
 800680e:	f001 fc0b 	bl	8008028 <xQueueReceiveFromISR>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d003      	beq.n	8006820 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006818:	f06f 0302 	mvn.w	r3, #2
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	e027      	b.n	8006870 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d024      	beq.n	8006870 <osMessageQueueGet+0xac>
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <osMessageQueueGet+0xb8>)
 8006828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	e01b      	b.n	8006870 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <osMessageQueueGet+0x80>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d103      	bne.n	800684c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006844:	f06f 0303 	mvn.w	r3, #3
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e011      	b.n	8006870 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	69b8      	ldr	r0, [r7, #24]
 8006852:	f001 f9fd 	bl	8007c50 <xQueueReceive>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d009      	beq.n	8006870 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006862:	f06f 0301 	mvn.w	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	e002      	b.n	8006870 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800686a:	f06f 0302 	mvn.w	r3, #2
 800686e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006870:	69fb      	ldr	r3, [r7, #28]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	e00e      	b.n	80068b6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006898:	f3ef 8305 	mrs	r3, IPSR
 800689c:	60fb      	str	r3, [r7, #12]
  return(result);
 800689e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80068a4:	6938      	ldr	r0, [r7, #16]
 80068a6:	f001 fc5d 	bl	8008164 <uxQueueMessagesWaitingFromISR>
 80068aa:	6178      	str	r0, [r7, #20]
 80068ac:	e003      	b.n	80068b6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80068ae:	6938      	ldr	r0, [r7, #16]
 80068b0:	f001 fc3a 	bl	8008128 <uxQueueMessagesWaiting>
 80068b4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80068b6:	697b      	ldr	r3, [r7, #20]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068cc:	f3ef 8305 	mrs	r3, IPSR
 80068d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80068d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80068d8:	f06f 0305 	mvn.w	r3, #5
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e00e      	b.n	80068fe <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80068e6:	f06f 0303 	mvn.w	r3, #3
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e007      	b.n	80068fe <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80068ee:	6938      	ldr	r0, [r7, #16]
 80068f0:	f001 fdcc 	bl	800848c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 80068f8:	6938      	ldr	r0, [r7, #16]
 80068fa:	f001 fc51 	bl	80081a0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80068fe:	697b      	ldr	r3, [r7, #20]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a07      	ldr	r2, [pc, #28]	; (8006934 <vApplicationGetIdleTaskMemory+0x2c>)
 8006918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4a06      	ldr	r2, [pc, #24]	; (8006938 <vApplicationGetIdleTaskMemory+0x30>)
 800691e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006926:	601a      	str	r2, [r3, #0]
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	24000578 	.word	0x24000578
 8006938:	24000634 	.word	0x24000634

0800693c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4a07      	ldr	r2, [pc, #28]	; (8006968 <vApplicationGetTimerTaskMemory+0x2c>)
 800694c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a06      	ldr	r2, [pc, #24]	; (800696c <vApplicationGetTimerTaskMemory+0x30>)
 8006952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]
}
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	24000e34 	.word	0x24000e34
 800696c:	24000ef0 	.word	0x24000ef0

08006970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800697c:	f002 f840 	bl	8008a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006980:	4b5b      	ldr	r3, [pc, #364]	; (8006af0 <pvPortMalloc+0x180>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006988:	f000 f920 	bl	8006bcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800698c:	4b59      	ldr	r3, [pc, #356]	; (8006af4 <pvPortMalloc+0x184>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4013      	ands	r3, r2
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 8093 	bne.w	8006ac0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01d      	beq.n	80069dc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069a0:	2208      	movs	r2, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d014      	beq.n	80069dc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f023 0307 	bic.w	r3, r3, #7
 80069b8:	3308      	adds	r3, #8
 80069ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d06e      	beq.n	8006ac0 <pvPortMalloc+0x150>
 80069e2:	4b45      	ldr	r3, [pc, #276]	; (8006af8 <pvPortMalloc+0x188>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d869      	bhi.n	8006ac0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069ec:	4b43      	ldr	r3, [pc, #268]	; (8006afc <pvPortMalloc+0x18c>)
 80069ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069f0:	4b42      	ldr	r3, [pc, #264]	; (8006afc <pvPortMalloc+0x18c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f6:	e004      	b.n	8006a02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d903      	bls.n	8006a14 <pvPortMalloc+0xa4>
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f1      	bne.n	80069f8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a14:	4b36      	ldr	r3, [pc, #216]	; (8006af0 <pvPortMalloc+0x180>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d050      	beq.n	8006ac0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2208      	movs	r2, #8
 8006a24:	4413      	add	r3, r2
 8006a26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	2308      	movs	r3, #8
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d91f      	bls.n	8006a80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <pvPortMalloc+0xf8>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	613b      	str	r3, [r7, #16]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a7a:	69b8      	ldr	r0, [r7, #24]
 8006a7c:	f000 f908 	bl	8006c90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a80:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <pvPortMalloc+0x188>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <pvPortMalloc+0x188>)
 8006a8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <pvPortMalloc+0x188>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <pvPortMalloc+0x190>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d203      	bcs.n	8006aa2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a9a:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <pvPortMalloc+0x188>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <pvPortMalloc+0x190>)
 8006aa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <pvPortMalloc+0x184>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ab6:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <pvPortMalloc+0x194>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <pvPortMalloc+0x194>)
 8006abe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ac0:	f001 ffac 	bl	8008a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <pvPortMalloc+0x174>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <pvPortMalloc+0x172>
	return pvReturn;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3728      	adds	r7, #40	; 0x28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	240096f8 	.word	0x240096f8
 8006af4:	2400970c 	.word	0x2400970c
 8006af8:	240096fc 	.word	0x240096fc
 8006afc:	240096f0 	.word	0x240096f0
 8006b00:	24009700 	.word	0x24009700
 8006b04:	24009704 	.word	0x24009704

08006b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d04d      	beq.n	8006bb6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	425b      	negs	r3, r3
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <vPortFree+0xb8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <vPortFree+0x44>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60fb      	str	r3, [r7, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <vPortFree+0x62>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	60bb      	str	r3, [r7, #8]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	4b14      	ldr	r3, [pc, #80]	; (8006bc0 <vPortFree+0xb8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01e      	beq.n	8006bb6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d11a      	bne.n	8006bb6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <vPortFree+0xb8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b90:	f001 ff36 	bl	8008a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <vPortFree+0xbc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <vPortFree+0xbc>)
 8006ba0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ba2:	6938      	ldr	r0, [r7, #16]
 8006ba4:	f000 f874 	bl	8006c90 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <vPortFree+0xc0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	4a06      	ldr	r2, [pc, #24]	; (8006bc8 <vPortFree+0xc0>)
 8006bb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bb2:	f001 ff33 	bl	8008a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	2400970c 	.word	0x2400970c
 8006bc4:	240096fc 	.word	0x240096fc
 8006bc8:	24009708 	.word	0x24009708

08006bcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bd2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8006bd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bd8:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <prvHeapInit+0xac>)
 8006bda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00c      	beq.n	8006c00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3307      	adds	r3, #7
 8006bea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0307 	bic.w	r3, r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <prvHeapInit+0xac>)
 8006bfc:	4413      	add	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c04:	4a1d      	ldr	r2, [pc, #116]	; (8006c7c <prvHeapInit+0xb0>)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <prvHeapInit+0xb0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4413      	add	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c18:	2208      	movs	r2, #8
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0307 	bic.w	r3, r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a15      	ldr	r2, [pc, #84]	; (8006c80 <prvHeapInit+0xb4>)
 8006c2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c2e:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <prvHeapInit+0xb4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2200      	movs	r2, #0
 8006c34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <prvHeapInit+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <prvHeapInit+0xb4>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <prvHeapInit+0xb8>)
 8006c5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a09      	ldr	r2, [pc, #36]	; (8006c88 <prvHeapInit+0xbc>)
 8006c62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c64:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <prvHeapInit+0xc0>)
 8006c66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c6a:	601a      	str	r2, [r3, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	24001ef0 	.word	0x24001ef0
 8006c7c:	240096f0 	.word	0x240096f0
 8006c80:	240096f8 	.word	0x240096f8
 8006c84:	24009700 	.word	0x24009700
 8006c88:	240096fc 	.word	0x240096fc
 8006c8c:	2400970c 	.word	0x2400970c

08006c90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c98:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <prvInsertBlockIntoFreeList+0xac>)
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e002      	b.n	8006ca4 <prvInsertBlockIntoFreeList+0x14>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d8f7      	bhi.n	8006c9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d108      	bne.n	8006cd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	441a      	add	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d118      	bne.n	8006d18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <prvInsertBlockIntoFreeList+0xb0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d00d      	beq.n	8006d0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	e008      	b.n	8006d20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <prvInsertBlockIntoFreeList+0xb0>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e003      	b.n	8006d20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d002      	beq.n	8006d2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	240096f0 	.word	0x240096f0
 8006d40:	240096f8 	.word	0x240096f8

08006d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f103 0208 	add.w	r2, r3, #8
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f103 0208 	add.w	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f103 0208 	add.w	r2, r3, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	601a      	str	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d103      	bne.n	8006e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e00c      	b.n	8006e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e002      	b.n	8006e14 <vListInsert+0x2e>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d2f6      	bcs.n	8006e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6892      	ldr	r2, [r2, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6852      	ldr	r2, [r2, #4]
 8006e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d103      	bne.n	8006e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	1e5a      	subs	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3b04      	subs	r3, #4
 8006ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b04      	subs	r3, #4
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f023 0201 	bic.w	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006edc:	4a0c      	ldr	r2, [pc, #48]	; (8006f10 <pxPortInitialiseStack+0x64>)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3b14      	subs	r3, #20
 8006ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3b04      	subs	r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f06f 0202 	mvn.w	r2, #2
 8006efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3b20      	subs	r3, #32
 8006f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	08006f15 	.word	0x08006f15

08006f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <prvTaskExitError+0x54>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d00a      	beq.n	8006f3e <prvTaskExitError+0x2a>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <prvTaskExitError+0x28>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60bb      	str	r3, [r7, #8]
}
 8006f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f52:	bf00      	nop
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0fc      	beq.n	8006f54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	24000030 	.word	0x24000030
 8006f6c:	00000000 	.word	0x00000000

08006f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f70:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <pxCurrentTCBConst2>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6808      	ldr	r0, [r1, #0]
 8006f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	f380 8809 	msr	PSP, r0
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8811 	msr	BASEPRI, r0
 8006f8a:	4770      	bx	lr
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst2>:
 8006f90:	24009758 	.word	0x24009758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f98:	4808      	ldr	r0, [pc, #32]	; (8006fbc <prvPortStartFirstTask+0x24>)
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f380 8808 	msr	MSP, r0
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8814 	msr	CONTROL, r0
 8006faa:	b662      	cpsie	i
 8006fac:	b661      	cpsie	f
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	df00      	svc	0
 8006fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fba:	bf00      	nop
 8006fbc:	e000ed08 	.word	0xe000ed08

08006fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fc6:	4b46      	ldr	r3, [pc, #280]	; (80070e0 <xPortStartScheduler+0x120>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a46      	ldr	r2, [pc, #280]	; (80070e4 <xPortStartScheduler+0x124>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10a      	bne.n	8006fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fe6:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <xPortStartScheduler+0x120>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <xPortStartScheduler+0x128>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10a      	bne.n	8007006 <xPortStartScheduler+0x46>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007006:	4b39      	ldr	r3, [pc, #228]	; (80070ec <xPortStartScheduler+0x12c>)
 8007008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007028:	b2da      	uxtb	r2, r3
 800702a:	4b31      	ldr	r3, [pc, #196]	; (80070f0 <xPortStartScheduler+0x130>)
 800702c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800702e:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <xPortStartScheduler+0x134>)
 8007030:	2207      	movs	r2, #7
 8007032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007034:	e009      	b.n	800704a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <xPortStartScheduler+0x134>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3b01      	subs	r3, #1
 800703c:	4a2d      	ldr	r2, [pc, #180]	; (80070f4 <xPortStartScheduler+0x134>)
 800703e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d0ef      	beq.n	8007036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <xPortStartScheduler+0x134>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1c3 0307 	rsb	r3, r3, #7
 800705e:	2b04      	cmp	r3, #4
 8007060:	d00a      	beq.n	8007078 <xPortStartScheduler+0xb8>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60bb      	str	r3, [r7, #8]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <xPortStartScheduler+0x134>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <xPortStartScheduler+0x134>)
 8007080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007082:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <xPortStartScheduler+0x134>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800708a:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <xPortStartScheduler+0x134>)
 800708c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <xPortStartScheduler+0x138>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <xPortStartScheduler+0x138>)
 800709c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <xPortStartScheduler+0x138>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a14      	ldr	r2, [pc, #80]	; (80070f8 <xPortStartScheduler+0x138>)
 80070a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ae:	f000 f8dd 	bl	800726c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <xPortStartScheduler+0x13c>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070b8:	f000 f8fc 	bl	80072b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070bc:	4b10      	ldr	r3, [pc, #64]	; (8007100 <xPortStartScheduler+0x140>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0f      	ldr	r2, [pc, #60]	; (8007100 <xPortStartScheduler+0x140>)
 80070c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070c8:	f7ff ff66 	bl	8006f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070cc:	f001 fe20 	bl	8008d10 <vTaskSwitchContext>
	prvTaskExitError();
 80070d0:	f7ff ff20 	bl	8006f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000ed00 	.word	0xe000ed00
 80070e4:	410fc271 	.word	0x410fc271
 80070e8:	410fc270 	.word	0x410fc270
 80070ec:	e000e400 	.word	0xe000e400
 80070f0:	24009710 	.word	0x24009710
 80070f4:	24009714 	.word	0x24009714
 80070f8:	e000ed20 	.word	0xe000ed20
 80070fc:	24000030 	.word	0x24000030
 8007100:	e000ef34 	.word	0xe000ef34

08007104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	607b      	str	r3, [r7, #4]
}
 800711c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <vPortEnterCritical+0x58>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3301      	adds	r3, #1
 8007124:	4a0d      	ldr	r2, [pc, #52]	; (800715c <vPortEnterCritical+0x58>)
 8007126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <vPortEnterCritical+0x58>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d10f      	bne.n	8007150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <vPortEnterCritical+0x5c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <vPortEnterCritical+0x4c>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <vPortEnterCritical+0x4a>
	}
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	24000030 	.word	0x24000030
 8007160:	e000ed04 	.word	0xe000ed04

08007164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <vPortExitCritical+0x50>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <vPortExitCritical+0x24>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	607b      	str	r3, [r7, #4]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <vPortExitCritical+0x50>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <vPortExitCritical+0x50>)
 8007190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007192:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <vPortExitCritical+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <vPortExitCritical+0x42>
 800719a:	2300      	movs	r3, #0
 800719c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	24000030 	.word	0x24000030
	...

080071c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071c0:	f3ef 8009 	mrs	r0, PSP
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	4b15      	ldr	r3, [pc, #84]	; (8007220 <pxCurrentTCBConst>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f01e 0f10 	tst.w	lr, #16
 80071d0:	bf08      	it	eq
 80071d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	6010      	str	r0, [r2, #0]
 80071dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071e4:	f380 8811 	msr	BASEPRI, r0
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f001 fd8e 	bl	8008d10 <vTaskSwitchContext>
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f380 8811 	msr	BASEPRI, r0
 80071fc:	bc09      	pop	{r0, r3}
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007206:	f01e 0f10 	tst.w	lr, #16
 800720a:	bf08      	it	eq
 800720c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007210:	f380 8809 	msr	PSP, r0
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst>:
 8007220:	24009758 	.word	0x24009758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007242:	f001 fcab 	bl	8008b9c <xTaskIncrementTick>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <xPortSysTickHandler+0x40>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f383 8811 	msr	BASEPRI, r3
}
 800725e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <vPortSetupTimerInterrupt+0x38>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <vPortSetupTimerInterrupt+0x3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <vPortSetupTimerInterrupt+0x40>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <vPortSetupTimerInterrupt+0x44>)
 800728a:	3b01      	subs	r3, #1
 800728c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800728e:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007290:	2207      	movs	r2, #7
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	e000e010 	.word	0xe000e010
 80072a4:	e000e018 	.word	0xe000e018
 80072a8:	24000000 	.word	0x24000000
 80072ac:	10624dd3 	.word	0x10624dd3
 80072b0:	e000e014 	.word	0xe000e014

080072b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072c4 <vPortEnableVFP+0x10>
 80072b8:	6801      	ldr	r1, [r0, #0]
 80072ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072be:	6001      	str	r1, [r0, #0]
 80072c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072c2:	bf00      	nop
 80072c4:	e000ed88 	.word	0xe000ed88

080072c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ce:	f3ef 8305 	mrs	r3, IPSR
 80072d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d914      	bls.n	8007304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <vPortValidateInterruptPriority+0x70>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072e4:	4b15      	ldr	r3, [pc, #84]	; (800733c <vPortValidateInterruptPriority+0x74>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	7afa      	ldrb	r2, [r7, #11]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d20a      	bcs.n	8007304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007304:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <vPortValidateInterruptPriority+0x78>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800730c:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <vPortValidateInterruptPriority+0x7c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d90a      	bls.n	800732a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	603b      	str	r3, [r7, #0]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <vPortValidateInterruptPriority+0x60>
	}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	e000e3f0 	.word	0xe000e3f0
 800733c:	24009710 	.word	0x24009710
 8007340:	e000ed0c 	.word	0xe000ed0c
 8007344:	24009714 	.word	0x24009714

08007348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueGenericReset+0x2a>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	60bb      	str	r3, [r7, #8]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007372:	f7ff fec7 	bl	8007104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	441a      	add	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a2:	3b01      	subs	r3, #1
 80073a4:	68f9      	ldr	r1, [r7, #12]
 80073a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	441a      	add	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	22ff      	movs	r2, #255	; 0xff
 80073b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d114      	bne.n	80073f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01a      	beq.n	8007406 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3310      	adds	r3, #16
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fd5f 	bl	8008e98 <xTaskRemoveFromEventList>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073e0:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <xQueueGenericReset+0xcc>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	e009      	b.n	8007406 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3310      	adds	r3, #16
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fca4 	bl	8006d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3324      	adds	r3, #36	; 0x24
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fc9f 	bl	8006d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007406:	f7ff fead 	bl	8007164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800740a:	2301      	movs	r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08e      	sub	sp, #56	; 0x38
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <xQueueGenericCreateStatic+0x52>
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <xQueueGenericCreateStatic+0x56>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <xQueueGenericCreateStatic+0x58>
 800746e:	2300      	movs	r3, #0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	623b      	str	r3, [r7, #32]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <xQueueGenericCreateStatic+0x7e>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueGenericCreateStatic+0x82>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueGenericCreateStatic+0x84>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61fb      	str	r3, [r7, #28]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074b6:	2350      	movs	r3, #80	; 0x50
 80074b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b50      	cmp	r3, #80	; 0x50
 80074be:	d00a      	beq.n	80074d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	61bb      	str	r3, [r7, #24]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	4613      	mov	r3, r2
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f83f 	bl	800757c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007500:	4618      	mov	r0, r3
 8007502:	3730      	adds	r7, #48	; 0x30
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10a      	bne.n	8007532 <xQueueGenericCreate+0x2a>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	613b      	str	r3, [r7, #16]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3350      	adds	r3, #80	; 0x50
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff fa15 	bl	8006970 <pvPortMalloc>
 8007546:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d011      	beq.n	8007572 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	3350      	adds	r3, #80	; 0x50
 8007556:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007560:	79fa      	ldrb	r2, [r7, #7]
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 f805 	bl	800757c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007572:	69bb      	ldr	r3, [r7, #24]
	}
 8007574:	4618      	mov	r0, r3
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d103      	bne.n	8007598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e002      	b.n	800759e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075aa:	2101      	movs	r1, #1
 80075ac:	69b8      	ldr	r0, [r7, #24]
 80075ae:	f7ff fecb 	bl	8007348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f90b 	bl	8007804 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b086      	sub	sp, #24
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	4603      	mov	r3, r0
 80075fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	461a      	mov	r2, r3
 800760c:	6939      	ldr	r1, [r7, #16]
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f7ff ff7a 	bl	8007508 <xQueueGenericCreate>
 8007614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff ffd3 	bl	80075c2 <prvInitialiseMutex>

		return xNewQueue;
 800761c:	68fb      	ldr	r3, [r7, #12]
	}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007626:	b580      	push	{r7, lr}
 8007628:	b088      	sub	sp, #32
 800762a:	af02      	add	r7, sp, #8
 800762c:	4603      	mov	r3, r0
 800762e:	6039      	str	r1, [r7, #0]
 8007630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007632:	2301      	movs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2200      	movs	r2, #0
 8007642:	6939      	ldr	r1, [r7, #16]
 8007644:	6978      	ldr	r0, [r7, #20]
 8007646:	f7ff fee7 	bl	8007418 <xQueueGenericCreateStatic>
 800764a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff ffb8 	bl	80075c2 <prvInitialiseMutex>

		return xNewQueue;
 8007652:	68fb      	ldr	r3, [r7, #12]
	}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800765c:	b590      	push	{r4, r7, lr}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60fb      	str	r3, [r7, #12]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	689c      	ldr	r4, [r3, #8]
 8007688:	f001 fdc8 	bl	800921c <xTaskGetCurrentTaskHandle>
 800768c:	4603      	mov	r3, r0
 800768e:	429c      	cmp	r4, r3
 8007690:	d111      	bne.n	80076b6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	1e5a      	subs	r2, r3, #1
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80076a4:	2300      	movs	r3, #0
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	6938      	ldr	r0, [r7, #16]
 80076ac:	f000 f8aa 	bl	8007804 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80076b0:	2301      	movs	r3, #1
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	e001      	b.n	80076ba <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80076ba:	697b      	ldr	r3, [r7, #20]
	}
 80076bc:	4618      	mov	r0, r3
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd90      	pop	{r4, r7, pc}

080076c4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10a      	bne.n	80076ee <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	e7fe      	b.n	80076ec <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	689c      	ldr	r4, [r3, #8]
 80076f2:	f001 fd93 	bl	800921c <xTaskGetCurrentTaskHandle>
 80076f6:	4603      	mov	r3, r0
 80076f8:	429c      	cmp	r4, r3
 80076fa:	d107      	bne.n	800770c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007706:	2301      	movs	r3, #1
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	e00c      	b.n	8007726 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6938      	ldr	r0, [r7, #16]
 8007710:	f000 fb7e 	bl	8007e10 <xQueueSemaphoreTake>
 8007714:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d004      	beq.n	8007726 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007726:	697b      	ldr	r3, [r7, #20]
	}
 8007728:	4618      	mov	r0, r3
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	bd90      	pop	{r4, r7, pc}

08007730 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	; 0x28
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	61bb      	str	r3, [r7, #24]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	429a      	cmp	r2, r3
 800775e:	d90a      	bls.n	8007776 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	617b      	str	r3, [r7, #20]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007776:	2302      	movs	r3, #2
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fe49 	bl	8007418 <xQueueGenericCreateStatic>
 8007786:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007794:	69fb      	ldr	r3, [r7, #28]
	}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	613b      	str	r3, [r7, #16]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d90a      	bls.n	80077e2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077e2:	2202      	movs	r2, #2
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff fe8e 	bl	8007508 <xQueueGenericCreate>
 80077ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077fa:	697b      	ldr	r3, [r7, #20]
	}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08e      	sub	sp, #56	; 0x38
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <xQueueGenericSend+0x32>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d103      	bne.n	8007844 <xQueueGenericSend+0x40>
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <xQueueGenericSend+0x44>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <xQueueGenericSend+0x46>
 8007848:	2300      	movs	r3, #0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <xQueueGenericSend+0x60>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d103      	bne.n	8007872 <xQueueGenericSend+0x6e>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <xQueueGenericSend+0x72>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <xQueueGenericSend+0x74>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <xQueueGenericSend+0x8e>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	623b      	str	r3, [r7, #32]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007892:	f001 fcd3 	bl	800923c <xTaskGetSchedulerState>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <xQueueGenericSend+0x9e>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <xQueueGenericSend+0xa2>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <xQueueGenericSend+0xa4>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	61fb      	str	r3, [r7, #28]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078c2:	f7ff fc1f 	bl	8007104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <xQueueGenericSend+0xd4>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d129      	bne.n	800792c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078de:	f000 fc9a 	bl	8008216 <prvCopyDataToQueue>
 80078e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d010      	beq.n	800790e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	3324      	adds	r3, #36	; 0x24
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 fad1 	bl	8008e98 <xTaskRemoveFromEventList>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d013      	beq.n	8007924 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078fc:	4b3f      	ldr	r3, [pc, #252]	; (80079fc <xQueueGenericSend+0x1f8>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	e00a      	b.n	8007924 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007914:	4b39      	ldr	r3, [pc, #228]	; (80079fc <xQueueGenericSend+0x1f8>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007924:	f7ff fc1e 	bl	8007164 <vPortExitCritical>
				return pdPASS;
 8007928:	2301      	movs	r3, #1
 800792a:	e063      	b.n	80079f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007932:	f7ff fc17 	bl	8007164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007936:	2300      	movs	r3, #0
 8007938:	e05c      	b.n	80079f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800793a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007940:	f107 0314 	add.w	r3, r7, #20
 8007944:	4618      	mov	r0, r3
 8007946:	f001 fb0b 	bl	8008f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800794a:	2301      	movs	r3, #1
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800794e:	f7ff fc09 	bl	8007164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007952:	f001 f855 	bl	8008a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007956:	f7ff fbd5 	bl	8007104 <vPortEnterCritical>
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007960:	b25b      	sxtb	r3, r3
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d103      	bne.n	8007970 <xQueueGenericSend+0x16c>
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007976:	b25b      	sxtb	r3, r3
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d103      	bne.n	8007986 <xQueueGenericSend+0x182>
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007986:	f7ff fbed 	bl	8007164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800798a:	1d3a      	adds	r2, r7, #4
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f001 fafa 	bl	8008f8c <xTaskCheckForTimeOut>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d124      	bne.n	80079e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800799e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a0:	f000 fd31 	bl	8008406 <prvIsQueueFull>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d018      	beq.n	80079dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	3310      	adds	r3, #16
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fa20 	bl	8008df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ba:	f000 fcbc 	bl	8008336 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079be:	f001 f82d 	bl	8008a1c <xTaskResumeAll>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f47f af7c 	bne.w	80078c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <xQueueGenericSend+0x1f8>)
 80079cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	e772      	b.n	80078c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079de:	f000 fcaa 	bl	8008336 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079e2:	f001 f81b 	bl	8008a1c <xTaskResumeAll>
 80079e6:	e76c      	b.n	80078c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ea:	f000 fca4 	bl	8008336 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ee:	f001 f815 	bl	8008a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3738      	adds	r7, #56	; 0x38
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b090      	sub	sp, #64	; 0x40
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <xQueueGenericSendFromISR+0x3c>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <xQueueGenericSendFromISR+0x40>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <xQueueGenericSendFromISR+0x42>
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d103      	bne.n	8007a6a <xQueueGenericSendFromISR+0x6a>
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <xQueueGenericSendFromISR+0x6e>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueGenericSendFromISR+0x70>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	623b      	str	r3, [r7, #32]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a8a:	f7ff fc1d 	bl	80072c8 <vPortValidateInterruptPriority>
	__asm volatile
 8007a8e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	61fa      	str	r2, [r7, #28]
 8007aa4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d302      	bcc.n	8007abc <xQueueGenericSendFromISR+0xbc>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d12f      	bne.n	8007b1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ad2:	f000 fba0 	bl	8008216 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ad6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d112      	bne.n	8007b06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d016      	beq.n	8007b16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	3324      	adds	r3, #36	; 0x24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f9d3 	bl	8008e98 <xTaskRemoveFromEventList>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e007      	b.n	8007b16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	b25a      	sxtb	r2, r3
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b16:	2301      	movs	r3, #1
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b1a:	e001      	b.n	8007b20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f383 8811 	msr	BASEPRI, r3
}
 8007b2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3740      	adds	r7, #64	; 0x40
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b08e      	sub	sp, #56	; 0x38
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	623b      	str	r3, [r7, #32]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61fb      	str	r3, [r7, #28]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <xQueueGiveFromISR+0x58>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <xQueueGiveFromISR+0x5c>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xQueueGiveFromISR+0x5e>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	61bb      	str	r3, [r7, #24]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bae:	f7ff fb8b 	bl	80072c8 <vPortValidateInterruptPriority>
	__asm volatile
 8007bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	617a      	str	r2, [r7, #20]
 8007bc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d22b      	bcs.n	8007c36 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d112      	bne.n	8007c20 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	3324      	adds	r3, #36	; 0x24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f946 	bl	8008e98 <xTaskRemoveFromEventList>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c24:	3301      	adds	r3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	b25a      	sxtb	r2, r3
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	637b      	str	r3, [r7, #52]	; 0x34
 8007c34:	e001      	b.n	8007c3a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f383 8811 	msr	BASEPRI, r3
}
 8007c44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3738      	adds	r7, #56	; 0x38
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08c      	sub	sp, #48	; 0x30
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <xQueueReceive+0x30>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	623b      	str	r3, [r7, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <xQueueReceive+0x3e>
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <xQueueReceive+0x42>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <xQueueReceive+0x44>
 8007c92:	2300      	movs	r3, #0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <xQueueReceive+0x5e>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	61fb      	str	r3, [r7, #28]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cae:	f001 fac5 	bl	800923c <xTaskGetSchedulerState>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <xQueueReceive+0x6e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <xQueueReceive+0x72>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <xQueueReceive+0x74>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <xQueueReceive+0x8e>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	61bb      	str	r3, [r7, #24]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cde:	f7ff fa11 	bl	8007104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01f      	beq.n	8007d2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf2:	f000 fafa 	bl	80082ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	1e5a      	subs	r2, r3, #1
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00f      	beq.n	8007d26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	3310      	adds	r3, #16
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 f8c4 	bl	8008e98 <xTaskRemoveFromEventList>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d16:	4b3d      	ldr	r3, [pc, #244]	; (8007e0c <xQueueReceive+0x1bc>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d26:	f7ff fa1d 	bl	8007164 <vPortExitCritical>
				return pdPASS;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e069      	b.n	8007e02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d34:	f7ff fa16 	bl	8007164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e062      	b.n	8007e02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d106      	bne.n	8007d50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d42:	f107 0310 	add.w	r3, r7, #16
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 f90a 	bl	8008f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d50:	f7ff fa08 	bl	8007164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d54:	f000 fe54 	bl	8008a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d58:	f7ff f9d4 	bl	8007104 <vPortEnterCritical>
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d62:	b25b      	sxtb	r3, r3
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d103      	bne.n	8007d72 <xQueueReceive+0x122>
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d78:	b25b      	sxtb	r3, r3
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d103      	bne.n	8007d88 <xQueueReceive+0x138>
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d88:	f7ff f9ec 	bl	8007164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d8c:	1d3a      	adds	r2, r7, #4
 8007d8e:	f107 0310 	add.w	r3, r7, #16
 8007d92:	4611      	mov	r1, r2
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 f8f9 	bl	8008f8c <xTaskCheckForTimeOut>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d123      	bne.n	8007de8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da2:	f000 fb1a 	bl	80083da <prvIsQueueEmpty>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d017      	beq.n	8007ddc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	3324      	adds	r3, #36	; 0x24
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f81f 	bl	8008df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dbc:	f000 fabb 	bl	8008336 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dc0:	f000 fe2c 	bl	8008a1c <xTaskResumeAll>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d189      	bne.n	8007cde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <xQueueReceive+0x1bc>)
 8007dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	e780      	b.n	8007cde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dde:	f000 faaa 	bl	8008336 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de2:	f000 fe1b 	bl	8008a1c <xTaskResumeAll>
 8007de6:	e77a      	b.n	8007cde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dea:	f000 faa4 	bl	8008336 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dee:	f000 fe15 	bl	8008a1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df4:	f000 faf1 	bl	80083da <prvIsQueueEmpty>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f43f af6f 	beq.w	8007cde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3730      	adds	r7, #48	; 0x30
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08e      	sub	sp, #56	; 0x38
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	623b      	str	r3, [r7, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	61fb      	str	r3, [r7, #28]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e60:	f001 f9ec 	bl	800923c <xTaskGetSchedulerState>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <xQueueSemaphoreTake+0x60>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <xQueueSemaphoreTake+0x64>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <xQueueSemaphoreTake+0x66>
 8007e74:	2300      	movs	r3, #0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	61bb      	str	r3, [r7, #24]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e90:	f7ff f938 	bl	8007104 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d024      	beq.n	8007eea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	1e5a      	subs	r2, r3, #1
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007eb0:	f001 fb3a 	bl	8009528 <pvTaskIncrementMutexHeldCount>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00f      	beq.n	8007ee2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	3310      	adds	r3, #16
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 ffe6 	bl	8008e98 <xTaskRemoveFromEventList>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d007      	beq.n	8007ee2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ed2:	4b54      	ldr	r3, [pc, #336]	; (8008024 <xQueueSemaphoreTake+0x214>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ee2:	f7ff f93f 	bl	8007164 <vPortExitCritical>
				return pdPASS;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e097      	b.n	800801a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d111      	bne.n	8007f14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	617b      	str	r3, [r7, #20]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f0c:	f7ff f92a 	bl	8007164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f10:	2300      	movs	r3, #0
 8007f12:	e082      	b.n	800801a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f81e 	bl	8008f60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f28:	f7ff f91c 	bl	8007164 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f2c:	f000 fd68 	bl	8008a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f30:	f7ff f8e8 	bl	8007104 <vPortEnterCritical>
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f3a:	b25b      	sxtb	r3, r3
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d103      	bne.n	8007f4a <xQueueSemaphoreTake+0x13a>
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f50:	b25b      	sxtb	r3, r3
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d103      	bne.n	8007f60 <xQueueSemaphoreTake+0x150>
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f60:	f7ff f900 	bl	8007164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f64:	463a      	mov	r2, r7
 8007f66:	f107 030c 	add.w	r3, r7, #12
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f80d 	bl	8008f8c <xTaskCheckForTimeOut>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d132      	bne.n	8007fde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f7a:	f000 fa2e 	bl	80083da <prvIsQueueEmpty>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d026      	beq.n	8007fd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d109      	bne.n	8007fa0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f8c:	f7ff f8ba 	bl	8007104 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 f96f 	bl	8009278 <xTaskPriorityInherit>
 8007f9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f9c:	f7ff f8e2 	bl	8007164 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	3324      	adds	r3, #36	; 0x24
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 ff25 	bl	8008df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fb0:	f000 f9c1 	bl	8008336 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fb4:	f000 fd32 	bl	8008a1c <xTaskResumeAll>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f47f af68 	bne.w	8007e90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fc0:	4b18      	ldr	r3, [pc, #96]	; (8008024 <xQueueSemaphoreTake+0x214>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	e75e      	b.n	8007e90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fd4:	f000 f9af 	bl	8008336 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fd8:	f000 fd20 	bl	8008a1c <xTaskResumeAll>
 8007fdc:	e758      	b.n	8007e90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe0:	f000 f9a9 	bl	8008336 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fe4:	f000 fd1a 	bl	8008a1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fea:	f000 f9f6 	bl	80083da <prvIsQueueEmpty>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f43f af4d 	beq.w	8007e90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00d      	beq.n	8008018 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007ffc:	f7ff f882 	bl	8007104 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008002:	f000 f8f0 	bl	80081e6 <prvGetDisinheritPriorityAfterTimeout>
 8008006:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800800e:	4618      	mov	r0, r3
 8008010:	f001 fa08 	bl	8009424 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008014:	f7ff f8a6 	bl	8007164 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800801a:	4618      	mov	r0, r3
 800801c:	3738      	adds	r7, #56	; 0x38
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	; 0x38
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	623b      	str	r3, [r7, #32]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d103      	bne.n	8008062 <xQueueReceiveFromISR+0x3a>
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <xQueueReceiveFromISR+0x3e>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <xQueueReceiveFromISR+0x40>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	61fb      	str	r3, [r7, #28]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008082:	f7ff f921 	bl	80072c8 <vPortValidateInterruptPriority>
	__asm volatile
 8008086:	f3ef 8211 	mrs	r2, BASEPRI
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	61ba      	str	r2, [r7, #24]
 800809c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800809e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d02f      	beq.n	800810e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080bc:	f000 f915 	bl	80082ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80080c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d112      	bne.n	80080f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d016      	beq.n	8008108 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	3310      	adds	r3, #16
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 feda 	bl	8008e98 <xTaskRemoveFromEventList>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00e      	beq.n	8008108 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e007      	b.n	8008108 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080fc:	3301      	adds	r3, #1
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	b25a      	sxtb	r2, r3
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008108:	2301      	movs	r3, #1
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
 800810c:	e001      	b.n	8008112 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f383 8811 	msr	BASEPRI, r3
}
 800811c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008120:	4618      	mov	r0, r3
 8008122:	3738      	adds	r7, #56	; 0x38
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800814c:	f7fe ffda 	bl	8007104 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008156:	f7ff f805 	bl	8007164 <vPortExitCritical>

	return uxReturn;
 800815a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008192:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10a      	bne.n	80081c8 <vQueueDelete+0x28>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	60bb      	str	r3, [r7, #8]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f95f 	bl	800848c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7fe fc95 	bl	8006b08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d006      	beq.n	8008204 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e001      	b.n	8008208 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008208:	68fb      	ldr	r3, [r7, #12]
	}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b086      	sub	sp, #24
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10d      	bne.n	8008250 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d14d      	bne.n	80082d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	4618      	mov	r0, r3
 8008242:	f001 f881 	bl	8009348 <xTaskPriorityDisinherit>
 8008246:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	609a      	str	r2, [r3, #8]
 800824e:	e043      	b.n	80082d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d119      	bne.n	800828a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6858      	ldr	r0, [r3, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	461a      	mov	r2, r3
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	f00f fbc0 	bl	80179e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	441a      	add	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	429a      	cmp	r2, r3
 800827e:	d32b      	bcc.n	80082d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	605a      	str	r2, [r3, #4]
 8008288:	e026      	b.n	80082d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	68d8      	ldr	r0, [r3, #12]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	461a      	mov	r2, r3
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	f00f fba6 	bl	80179e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	425b      	negs	r3, r3
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d207      	bcs.n	80082c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	425b      	negs	r3, r3
 80082c0:	441a      	add	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d105      	bne.n	80082d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082e0:	697b      	ldr	r3, [r7, #20]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d018      	beq.n	800832e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	441a      	add	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	429a      	cmp	r2, r3
 8008314:	d303      	bcc.n	800831e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68d9      	ldr	r1, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	461a      	mov	r2, r3
 8008328:	6838      	ldr	r0, [r7, #0]
 800832a:	f00f fb5c 	bl	80179e6 <memcpy>
	}
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800833e:	f7fe fee1 	bl	8007104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008348:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800834a:	e011      	b.n	8008370 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	d012      	beq.n	800837a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3324      	adds	r3, #36	; 0x24
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fd9d 	bl	8008e98 <xTaskRemoveFromEventList>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008364:	f000 fe74 	bl	8009050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	3b01      	subs	r3, #1
 800836c:	b2db      	uxtb	r3, r3
 800836e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008374:	2b00      	cmp	r3, #0
 8008376:	dce9      	bgt.n	800834c <prvUnlockQueue+0x16>
 8008378:	e000      	b.n	800837c <prvUnlockQueue+0x46>
					break;
 800837a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	22ff      	movs	r2, #255	; 0xff
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008384:	f7fe feee 	bl	8007164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008388:	f7fe febc 	bl	8007104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008392:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008394:	e011      	b.n	80083ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d012      	beq.n	80083c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3310      	adds	r3, #16
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fd78 	bl	8008e98 <xTaskRemoveFromEventList>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083ae:	f000 fe4f 	bl	8009050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dce9      	bgt.n	8008396 <prvUnlockQueue+0x60>
 80083c2:	e000      	b.n	80083c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	22ff      	movs	r2, #255	; 0xff
 80083ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083ce:	f7fe fec9 	bl	8007164 <vPortExitCritical>
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083e2:	f7fe fe8f 	bl	8007104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	e001      	b.n	80083f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083f8:	f7fe feb4 	bl	8007164 <vPortExitCritical>

	return xReturn;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800840e:	f7fe fe79 	bl	8007104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	429a      	cmp	r2, r3
 800841c:	d102      	bne.n	8008424 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e001      	b.n	8008428 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008428:	f7fe fe9c 	bl	8007164 <vPortExitCritical>

	return xReturn;
 800842c:	68fb      	ldr	r3, [r7, #12]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e014      	b.n	8008472 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008448:	4a0f      	ldr	r2, [pc, #60]	; (8008488 <vQueueAddToRegistry+0x50>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008454:	490c      	ldr	r1, [pc, #48]	; (8008488 <vQueueAddToRegistry+0x50>)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800845e:	4a0a      	ldr	r2, [pc, #40]	; (8008488 <vQueueAddToRegistry+0x50>)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4413      	add	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800846a:	e006      	b.n	800847a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b07      	cmp	r3, #7
 8008476:	d9e7      	bls.n	8008448 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	24009718 	.word	0x24009718

0800848c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e016      	b.n	80084c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800849a:	4a10      	ldr	r2, [pc, #64]	; (80084dc <vQueueUnregisterQueue+0x50>)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d10b      	bne.n	80084c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <vQueueUnregisterQueue+0x50>)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2100      	movs	r1, #0
 80084b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80084b4:	4a09      	ldr	r2, [pc, #36]	; (80084dc <vQueueUnregisterQueue+0x50>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4413      	add	r3, r2
 80084bc:	2200      	movs	r2, #0
 80084be:	605a      	str	r2, [r3, #4]
				break;
 80084c0:	e006      	b.n	80084d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b07      	cmp	r3, #7
 80084cc:	d9e5      	bls.n	800849a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	24009718 	.word	0x24009718

080084e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084f0:	f7fe fe08 	bl	8007104 <vPortEnterCritical>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084fa:	b25b      	sxtb	r3, r3
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d103      	bne.n	800850a <vQueueWaitForMessageRestricted+0x2a>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008510:	b25b      	sxtb	r3, r3
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d103      	bne.n	8008520 <vQueueWaitForMessageRestricted+0x40>
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008520:	f7fe fe20 	bl	8007164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	3324      	adds	r3, #36	; 0x24
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fc83 	bl	8008e40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800853a:	6978      	ldr	r0, [r7, #20]
 800853c:	f7ff fefb 	bl	8008336 <prvUnlockQueue>
	}
 8008540:	bf00      	nop
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08e      	sub	sp, #56	; 0x38
 800854c:	af04      	add	r7, sp, #16
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xTaskCreateStatic+0x2a>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	623b      	str	r3, [r7, #32]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <xTaskCreateStatic+0x46>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	61fb      	str	r3, [r7, #28]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800858e:	23bc      	movs	r3, #188	; 0xbc
 8008590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2bbc      	cmp	r3, #188	; 0xbc
 8008596:	d00a      	beq.n	80085ae <xTaskCreateStatic+0x66>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	61bb      	str	r3, [r7, #24]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01e      	beq.n	80085f4 <xTaskCreateStatic+0xac>
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01b      	beq.n	80085f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085ce:	2300      	movs	r3, #0
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	f107 0314 	add.w	r3, r7, #20
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f850 	bl	800868c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085ee:	f000 f8f3 	bl	80087d8 <prvAddNewTaskToReadyList>
 80085f2:	e001      	b.n	80085f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085f8:	697b      	ldr	r3, [r7, #20]
	}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3728      	adds	r7, #40	; 0x28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008602:	b580      	push	{r7, lr}
 8008604:	b08c      	sub	sp, #48	; 0x30
 8008606:	af04      	add	r7, sp, #16
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4613      	mov	r3, r2
 8008610:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe f9aa 	bl	8006970 <pvPortMalloc>
 800861c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008624:	20bc      	movs	r0, #188	; 0xbc
 8008626:	f7fe f9a3 	bl	8006970 <pvPortMalloc>
 800862a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	631a      	str	r2, [r3, #48]	; 0x30
 8008638:	e005      	b.n	8008646 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f7fe fa64 	bl	8006b08 <vPortFree>
 8008640:	e001      	b.n	8008646 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d017      	beq.n	800867c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008654:	88fa      	ldrh	r2, [r7, #6]
 8008656:	2300      	movs	r3, #0
 8008658:	9303      	str	r3, [sp, #12]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f80e 	bl	800868c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008670:	69f8      	ldr	r0, [r7, #28]
 8008672:	f000 f8b1 	bl	80087d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008676:	2301      	movs	r3, #1
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	e002      	b.n	8008682 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008682:	69bb      	ldr	r3, [r7, #24]
	}
 8008684:	4618      	mov	r0, r3
 8008686:	3720      	adds	r7, #32
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	461a      	mov	r2, r3
 80086a4:	21a5      	movs	r1, #165	; 0xa5
 80086a6:	f00f f9c6 	bl	8017a36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80086b4:	440b      	add	r3, r1
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	617b      	str	r3, [r7, #20]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01f      	beq.n	800872a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
 80086ee:	e012      	b.n	8008716 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	4413      	add	r3, r2
 80086f6:	7819      	ldrb	r1, [r3, #0]
 80086f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	4413      	add	r3, r2
 80086fe:	3334      	adds	r3, #52	; 0x34
 8008700:	460a      	mov	r2, r1
 8008702:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	3301      	adds	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	2b0f      	cmp	r3, #15
 800871a:	d9e9      	bls.n	80086f0 <prvInitialiseNewTask+0x64>
 800871c:	e000      	b.n	8008720 <prvInitialiseNewTask+0x94>
			{
				break;
 800871e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008728:	e003      	b.n	8008732 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	2b37      	cmp	r3, #55	; 0x37
 8008736:	d901      	bls.n	800873c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008738:	2337      	movs	r3, #55	; 0x37
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008740:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008746:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	2200      	movs	r2, #0
 800874c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	3304      	adds	r3, #4
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fb16 	bl	8006d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	3318      	adds	r3, #24
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe fb11 	bl	8006d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008766:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008776:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	3354      	adds	r3, #84	; 0x54
 800878c:	2260      	movs	r2, #96	; 0x60
 800878e:	2100      	movs	r1, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f00f f950 	bl	8017a36 <memset>
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <prvInitialiseNewTask+0x140>)
 800879a:	659a      	str	r2, [r3, #88]	; 0x58
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	4a0c      	ldr	r2, [pc, #48]	; (80087d0 <prvInitialiseNewTask+0x144>)
 80087a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	4a0b      	ldr	r2, [pc, #44]	; (80087d4 <prvInitialiseNewTask+0x148>)
 80087a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	69b8      	ldr	r0, [r7, #24]
 80087ae:	f7fe fb7d 	bl	8006eac <pxPortInitialiseStack>
 80087b2:	4602      	mov	r2, r0
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087c4:	bf00      	nop
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	0801d66c 	.word	0x0801d66c
 80087d0:	0801d68c 	.word	0x0801d68c
 80087d4:	0801d64c 	.word	0x0801d64c

080087d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087e0:	f7fe fc90 	bl	8007104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087e4:	4b2d      	ldr	r3, [pc, #180]	; (800889c <prvAddNewTaskToReadyList+0xc4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a2c      	ldr	r2, [pc, #176]	; (800889c <prvAddNewTaskToReadyList+0xc4>)
 80087ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087ee:	4b2c      	ldr	r3, [pc, #176]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087f6:	4a2a      	ldr	r2, [pc, #168]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087fc:	4b27      	ldr	r3, [pc, #156]	; (800889c <prvAddNewTaskToReadyList+0xc4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d110      	bne.n	8008826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008804:	f000 fc48 	bl	8009098 <prvInitialiseTaskLists>
 8008808:	e00d      	b.n	8008826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800880a:	4b26      	ldr	r3, [pc, #152]	; (80088a4 <prvAddNewTaskToReadyList+0xcc>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d109      	bne.n	8008826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008812:	4b23      	ldr	r3, [pc, #140]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	429a      	cmp	r2, r3
 800881e:	d802      	bhi.n	8008826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008820:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008826:	4b20      	ldr	r3, [pc, #128]	; (80088a8 <prvAddNewTaskToReadyList+0xd0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3301      	adds	r3, #1
 800882c:	4a1e      	ldr	r2, [pc, #120]	; (80088a8 <prvAddNewTaskToReadyList+0xd0>)
 800882e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008830:	4b1d      	ldr	r3, [pc, #116]	; (80088a8 <prvAddNewTaskToReadyList+0xd0>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <prvAddNewTaskToReadyList+0xd4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d903      	bls.n	800884c <prvAddNewTaskToReadyList+0x74>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	4a18      	ldr	r2, [pc, #96]	; (80088ac <prvAddNewTaskToReadyList+0xd4>)
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <prvAddNewTaskToReadyList+0xd8>)
 800885a:	441a      	add	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7fe fa9b 	bl	8006d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008868:	f7fe fc7c 	bl	8007164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800886c:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <prvAddNewTaskToReadyList+0xcc>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00e      	beq.n	8008892 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvAddNewTaskToReadyList+0xc8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	429a      	cmp	r2, r3
 8008880:	d207      	bcs.n	8008892 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008882:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <prvAddNewTaskToReadyList+0xdc>)
 8008884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	24009c2c 	.word	0x24009c2c
 80088a0:	24009758 	.word	0x24009758
 80088a4:	24009c38 	.word	0x24009c38
 80088a8:	24009c48 	.word	0x24009c48
 80088ac:	24009c34 	.word	0x24009c34
 80088b0:	2400975c 	.word	0x2400975c
 80088b4:	e000ed04 	.word	0xe000ed04

080088b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d017      	beq.n	80088fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088ca:	4b13      	ldr	r3, [pc, #76]	; (8008918 <vTaskDelay+0x60>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <vTaskDelay+0x30>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60bb      	str	r3, [r7, #8]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088e8:	f000 f88a 	bl	8008a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088ec:	2100      	movs	r1, #0
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fe2e 	bl	8009550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088f4:	f000 f892 	bl	8008a1c <xTaskResumeAll>
 80088f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d107      	bne.n	8008910 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <vTaskDelay+0x64>)
 8008902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	24009c54 	.word	0x24009c54
 800891c:	e000ed04 	.word	0xe000ed04

08008920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	; 0x28
 8008924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800892e:	463a      	mov	r2, r7
 8008930:	1d39      	adds	r1, r7, #4
 8008932:	f107 0308 	add.w	r3, r7, #8
 8008936:	4618      	mov	r0, r3
 8008938:	f7fd ffe6 	bl	8006908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	9202      	str	r2, [sp, #8]
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	2300      	movs	r3, #0
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	460a      	mov	r2, r1
 800894e:	4924      	ldr	r1, [pc, #144]	; (80089e0 <vTaskStartScheduler+0xc0>)
 8008950:	4824      	ldr	r0, [pc, #144]	; (80089e4 <vTaskStartScheduler+0xc4>)
 8008952:	f7ff fdf9 	bl	8008548 <xTaskCreateStatic>
 8008956:	4603      	mov	r3, r0
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <vTaskStartScheduler+0xc8>)
 800895a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800895c:	4b22      	ldr	r3, [pc, #136]	; (80089e8 <vTaskStartScheduler+0xc8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008964:	2301      	movs	r3, #1
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e001      	b.n	800896e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800896a:	2300      	movs	r3, #0
 800896c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d102      	bne.n	800897a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008974:	f000 fe40 	bl	80095f8 <xTimerCreateTimerTask>
 8008978:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d11b      	bne.n	80089b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	613b      	str	r3, [r7, #16]
}
 8008992:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008994:	4b15      	ldr	r3, [pc, #84]	; (80089ec <vTaskStartScheduler+0xcc>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3354      	adds	r3, #84	; 0x54
 800899a:	4a15      	ldr	r2, [pc, #84]	; (80089f0 <vTaskStartScheduler+0xd0>)
 800899c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800899e:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <vTaskStartScheduler+0xd4>)
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <vTaskStartScheduler+0xd8>)
 80089a8:	2201      	movs	r2, #1
 80089aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089ac:	4b13      	ldr	r3, [pc, #76]	; (80089fc <vTaskStartScheduler+0xdc>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089b2:	f7fe fb05 	bl	8006fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089b6:	e00e      	b.n	80089d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d10a      	bne.n	80089d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <vTaskStartScheduler+0xb4>
}
 80089d6:	bf00      	nop
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	08019b58 	.word	0x08019b58
 80089e4:	08009069 	.word	0x08009069
 80089e8:	24009c50 	.word	0x24009c50
 80089ec:	24009758 	.word	0x24009758
 80089f0:	24000040 	.word	0x24000040
 80089f4:	24009c4c 	.word	0x24009c4c
 80089f8:	24009c38 	.word	0x24009c38
 80089fc:	24009c30 	.word	0x24009c30

08008a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <vTaskSuspendAll+0x18>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	4a03      	ldr	r2, [pc, #12]	; (8008a18 <vTaskSuspendAll+0x18>)
 8008a0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a0e:	bf00      	nop
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	24009c54 	.word	0x24009c54

08008a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a2a:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <xTaskResumeAll+0x118>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	603b      	str	r3, [r7, #0]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a48:	f7fe fb5c 	bl	8007104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a4c:	4b39      	ldr	r3, [pc, #228]	; (8008b34 <xTaskResumeAll+0x118>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	4a38      	ldr	r2, [pc, #224]	; (8008b34 <xTaskResumeAll+0x118>)
 8008a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a56:	4b37      	ldr	r3, [pc, #220]	; (8008b34 <xTaskResumeAll+0x118>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d162      	bne.n	8008b24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a5e:	4b36      	ldr	r3, [pc, #216]	; (8008b38 <xTaskResumeAll+0x11c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d05e      	beq.n	8008b24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a66:	e02f      	b.n	8008ac8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a68:	4b34      	ldr	r3, [pc, #208]	; (8008b3c <xTaskResumeAll+0x120>)
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3318      	adds	r3, #24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe f9ef 	bl	8006e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe f9ea 	bl	8006e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4b2d      	ldr	r3, [pc, #180]	; (8008b40 <xTaskResumeAll+0x124>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d903      	bls.n	8008a98 <xTaskResumeAll+0x7c>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	4a2a      	ldr	r2, [pc, #168]	; (8008b40 <xTaskResumeAll+0x124>)
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4a27      	ldr	r2, [pc, #156]	; (8008b44 <xTaskResumeAll+0x128>)
 8008aa6:	441a      	add	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f7fe f975 	bl	8006d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4b23      	ldr	r3, [pc, #140]	; (8008b48 <xTaskResumeAll+0x12c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d302      	bcc.n	8008ac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <xTaskResumeAll+0x130>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ac8:	4b1c      	ldr	r3, [pc, #112]	; (8008b3c <xTaskResumeAll+0x120>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1cb      	bne.n	8008a68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ad6:	f000 fb81 	bl	80091dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ada:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <xTaskResumeAll+0x134>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d010      	beq.n	8008b08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ae6:	f000 f859 	bl	8008b9c <xTaskIncrementTick>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008af0:	4b16      	ldr	r3, [pc, #88]	; (8008b4c <xTaskResumeAll+0x130>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f1      	bne.n	8008ae6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b02:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <xTaskResumeAll+0x134>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b08:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <xTaskResumeAll+0x130>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b10:	2301      	movs	r3, #1
 8008b12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <xTaskResumeAll+0x138>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b24:	f7fe fb1e 	bl	8007164 <vPortExitCritical>

	return xAlreadyYielded;
 8008b28:	68bb      	ldr	r3, [r7, #8]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	24009c54 	.word	0x24009c54
 8008b38:	24009c2c 	.word	0x24009c2c
 8008b3c:	24009bec 	.word	0x24009bec
 8008b40:	24009c34 	.word	0x24009c34
 8008b44:	2400975c 	.word	0x2400975c
 8008b48:	24009758 	.word	0x24009758
 8008b4c:	24009c40 	.word	0x24009c40
 8008b50:	24009c3c 	.word	0x24009c3c
 8008b54:	e000ed04 	.word	0xe000ed04

08008b58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <xTaskGetTickCount+0x1c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b64:	687b      	ldr	r3, [r7, #4]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	24009c30 	.word	0x24009c30

08008b78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b7e:	f7fe fba3 	bl	80072c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008b82:	2300      	movs	r3, #0
 8008b84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008b86:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <xTaskGetTickCountFromISR+0x20>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b8c:	683b      	ldr	r3, [r7, #0]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	24009c30 	.word	0x24009c30

08008b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba6:	4b4f      	ldr	r3, [pc, #316]	; (8008ce4 <xTaskIncrementTick+0x148>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 808f 	bne.w	8008cce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bb0:	4b4d      	ldr	r3, [pc, #308]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bb8:	4a4b      	ldr	r2, [pc, #300]	; (8008ce8 <xTaskIncrementTick+0x14c>)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d120      	bne.n	8008c06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bc4:	4b49      	ldr	r3, [pc, #292]	; (8008cec <xTaskIncrementTick+0x150>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	603b      	str	r3, [r7, #0]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <xTaskIncrementTick+0x46>
 8008be4:	4b41      	ldr	r3, [pc, #260]	; (8008cec <xTaskIncrementTick+0x150>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	4b41      	ldr	r3, [pc, #260]	; (8008cf0 <xTaskIncrementTick+0x154>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a3f      	ldr	r2, [pc, #252]	; (8008cec <xTaskIncrementTick+0x150>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	4a3f      	ldr	r2, [pc, #252]	; (8008cf0 <xTaskIncrementTick+0x154>)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4b3e      	ldr	r3, [pc, #248]	; (8008cf4 <xTaskIncrementTick+0x158>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	4a3d      	ldr	r2, [pc, #244]	; (8008cf4 <xTaskIncrementTick+0x158>)
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	f000 faeb 	bl	80091dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c06:	4b3c      	ldr	r3, [pc, #240]	; (8008cf8 <xTaskIncrementTick+0x15c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d349      	bcc.n	8008ca4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c10:	4b36      	ldr	r3, [pc, #216]	; (8008cec <xTaskIncrementTick+0x150>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1a:	4b37      	ldr	r3, [pc, #220]	; (8008cf8 <xTaskIncrementTick+0x15c>)
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	601a      	str	r2, [r3, #0]
					break;
 8008c22:	e03f      	b.n	8008ca4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c24:	4b31      	ldr	r3, [pc, #196]	; (8008cec <xTaskIncrementTick+0x150>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d203      	bcs.n	8008c44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c3c:	4a2e      	ldr	r2, [pc, #184]	; (8008cf8 <xTaskIncrementTick+0x15c>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c42:	e02f      	b.n	8008ca4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe f905 	bl	8006e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	3318      	adds	r3, #24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe f8fc 	bl	8006e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <xTaskIncrementTick+0x160>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d903      	bls.n	8008c74 <xTaskIncrementTick+0xd8>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	4a22      	ldr	r2, [pc, #136]	; (8008cfc <xTaskIncrementTick+0x160>)
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c78:	4613      	mov	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <xTaskIncrementTick+0x164>)
 8008c82:	441a      	add	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f7fe f887 	bl	8006d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c94:	4b1b      	ldr	r3, [pc, #108]	; (8008d04 <xTaskIncrementTick+0x168>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d3b8      	bcc.n	8008c10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca2:	e7b5      	b.n	8008c10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ca4:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <xTaskIncrementTick+0x168>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	4915      	ldr	r1, [pc, #84]	; (8008d00 <xTaskIncrementTick+0x164>)
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d901      	bls.n	8008cc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cc0:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <xTaskIncrementTick+0x16c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d007      	beq.n	8008cd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e004      	b.n	8008cd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <xTaskIncrementTick+0x170>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	4a0d      	ldr	r2, [pc, #52]	; (8008d0c <xTaskIncrementTick+0x170>)
 8008cd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cd8:	697b      	ldr	r3, [r7, #20]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	24009c54 	.word	0x24009c54
 8008ce8:	24009c30 	.word	0x24009c30
 8008cec:	24009be4 	.word	0x24009be4
 8008cf0:	24009be8 	.word	0x24009be8
 8008cf4:	24009c44 	.word	0x24009c44
 8008cf8:	24009c4c 	.word	0x24009c4c
 8008cfc:	24009c34 	.word	0x24009c34
 8008d00:	2400975c 	.word	0x2400975c
 8008d04:	24009758 	.word	0x24009758
 8008d08:	24009c40 	.word	0x24009c40
 8008d0c:	24009c3c 	.word	0x24009c3c

08008d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d16:	4b32      	ldr	r3, [pc, #200]	; (8008de0 <vTaskSwitchContext+0xd0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d1e:	4b31      	ldr	r3, [pc, #196]	; (8008de4 <vTaskSwitchContext+0xd4>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d24:	e057      	b.n	8008dd6 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8008d26:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <vTaskSwitchContext+0xd4>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008d2c:	4b2e      	ldr	r3, [pc, #184]	; (8008de8 <vTaskSwitchContext+0xd8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b2d      	ldr	r3, [pc, #180]	; (8008de8 <vTaskSwitchContext+0xd8>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d808      	bhi.n	8008d4e <vTaskSwitchContext+0x3e>
 8008d3c:	4b2a      	ldr	r3, [pc, #168]	; (8008de8 <vTaskSwitchContext+0xd8>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	4b29      	ldr	r3, [pc, #164]	; (8008de8 <vTaskSwitchContext+0xd8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3334      	adds	r3, #52	; 0x34
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f7f7 fc69 	bl	8000620 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b27      	ldr	r3, [pc, #156]	; (8008dec <vTaskSwitchContext+0xdc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	e010      	b.n	8008d78 <vTaskSwitchContext+0x68>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <vTaskSwitchContext+0x62>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	607b      	str	r3, [r7, #4]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <vTaskSwitchContext+0x60>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	491d      	ldr	r1, [pc, #116]	; (8008df0 <vTaskSwitchContext+0xe0>)
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0e4      	beq.n	8008d56 <vTaskSwitchContext+0x46>
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <vTaskSwitchContext+0xe0>)
 8008d98:	4413      	add	r3, r2
 8008d9a:	60bb      	str	r3, [r7, #8]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3308      	adds	r3, #8
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d104      	bne.n	8008dbc <vTaskSwitchContext+0xac>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	605a      	str	r2, [r3, #4]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	4a09      	ldr	r2, [pc, #36]	; (8008de8 <vTaskSwitchContext+0xd8>)
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <vTaskSwitchContext+0xdc>)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <vTaskSwitchContext+0xd8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3354      	adds	r3, #84	; 0x54
 8008dd2:	4a08      	ldr	r2, [pc, #32]	; (8008df4 <vTaskSwitchContext+0xe4>)
 8008dd4:	6013      	str	r3, [r2, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	24009c54 	.word	0x24009c54
 8008de4:	24009c40 	.word	0x24009c40
 8008de8:	24009758 	.word	0x24009758
 8008dec:	24009c34 	.word	0x24009c34
 8008df0:	2400975c 	.word	0x2400975c
 8008df4:	24000040 	.word	0x24000040

08008df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <vTaskPlaceOnEventList+0x44>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3318      	adds	r3, #24
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fd ffdd 	bl	8006de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	6838      	ldr	r0, [r7, #0]
 8008e30:	f000 fb8e 	bl	8009550 <prvAddCurrentTaskToDelayedList>
}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	24009758 	.word	0x24009758

08008e40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	617b      	str	r3, [r7, #20]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3318      	adds	r3, #24
 8008e6e:	4619      	mov	r1, r3
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f7fd ff94 	bl	8006d9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	68b8      	ldr	r0, [r7, #8]
 8008e86:	f000 fb63 	bl	8009550 <prvAddCurrentTaskToDelayedList>
	}
 8008e8a:	bf00      	nop
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	24009758 	.word	0x24009758

08008e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10a      	bne.n	8008ec4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	60fb      	str	r3, [r7, #12]
}
 8008ec0:	bf00      	nop
 8008ec2:	e7fe      	b.n	8008ec2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	3318      	adds	r3, #24
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fd ffc5 	bl	8006e58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ece:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <xTaskRemoveFromEventList+0xb0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d11d      	bne.n	8008f12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd ffbc 	bl	8006e58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4b19      	ldr	r3, [pc, #100]	; (8008f4c <xTaskRemoveFromEventList+0xb4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d903      	bls.n	8008ef4 <xTaskRemoveFromEventList+0x5c>
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4a16      	ldr	r2, [pc, #88]	; (8008f4c <xTaskRemoveFromEventList+0xb4>)
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	4613      	mov	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4a13      	ldr	r2, [pc, #76]	; (8008f50 <xTaskRemoveFromEventList+0xb8>)
 8008f02:	441a      	add	r2, r3
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fd ff47 	bl	8006d9e <vListInsertEnd>
 8008f10:	e005      	b.n	8008f1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	3318      	adds	r3, #24
 8008f16:	4619      	mov	r1, r3
 8008f18:	480e      	ldr	r0, [pc, #56]	; (8008f54 <xTaskRemoveFromEventList+0xbc>)
 8008f1a:	f7fd ff40 	bl	8006d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f22:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <xTaskRemoveFromEventList+0xc0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d905      	bls.n	8008f38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <xTaskRemoveFromEventList+0xc4>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e001      	b.n	8008f3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f3c:	697b      	ldr	r3, [r7, #20]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	24009c54 	.word	0x24009c54
 8008f4c:	24009c34 	.word	0x24009c34
 8008f50:	2400975c 	.word	0x2400975c
 8008f54:	24009bec 	.word	0x24009bec
 8008f58:	24009758 	.word	0x24009758
 8008f5c:	24009c40 	.word	0x24009c40

08008f60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f68:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <vTaskInternalSetTimeOutState+0x24>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f70:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <vTaskInternalSetTimeOutState+0x28>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	605a      	str	r2, [r3, #4]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	24009c44 	.word	0x24009c44
 8008f88:	24009c30 	.word	0x24009c30

08008f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	613b      	str	r3, [r7, #16]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	60fb      	str	r3, [r7, #12]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fce:	f7fe f899 	bl	8007104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <xTaskCheckForTimeOut+0xbc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fea:	d102      	bne.n	8008ff2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	e023      	b.n	800903a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <xTaskCheckForTimeOut+0xc0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d007      	beq.n	800900e <xTaskCheckForTimeOut+0x82>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	429a      	cmp	r2, r3
 8009006:	d302      	bcc.n	800900e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e015      	b.n	800903a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	429a      	cmp	r2, r3
 8009016:	d20b      	bcs.n	8009030 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff ff9b 	bl	8008f60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800902a:	2300      	movs	r3, #0
 800902c:	61fb      	str	r3, [r7, #28]
 800902e:	e004      	b.n	800903a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009036:	2301      	movs	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800903a:	f7fe f893 	bl	8007164 <vPortExitCritical>

	return xReturn;
 800903e:	69fb      	ldr	r3, [r7, #28]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3720      	adds	r7, #32
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	24009c30 	.word	0x24009c30
 800904c:	24009c44 	.word	0x24009c44

08009050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <vTaskMissedYield+0x14>)
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]
}
 800905a:	bf00      	nop
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	24009c40 	.word	0x24009c40

08009068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009070:	f000 f852 	bl	8009118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <prvIdleTask+0x28>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d9f9      	bls.n	8009070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <prvIdleTask+0x2c>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800908c:	e7f0      	b.n	8009070 <prvIdleTask+0x8>
 800908e:	bf00      	nop
 8009090:	2400975c 	.word	0x2400975c
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800909e:	2300      	movs	r3, #0
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	e00c      	b.n	80090be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <prvInitialiseTaskLists+0x60>)
 80090b0:	4413      	add	r3, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd fe46 	bl	8006d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3301      	adds	r3, #1
 80090bc:	607b      	str	r3, [r7, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b37      	cmp	r3, #55	; 0x37
 80090c2:	d9ef      	bls.n	80090a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090c4:	480d      	ldr	r0, [pc, #52]	; (80090fc <prvInitialiseTaskLists+0x64>)
 80090c6:	f7fd fe3d 	bl	8006d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090ca:	480d      	ldr	r0, [pc, #52]	; (8009100 <prvInitialiseTaskLists+0x68>)
 80090cc:	f7fd fe3a 	bl	8006d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090d0:	480c      	ldr	r0, [pc, #48]	; (8009104 <prvInitialiseTaskLists+0x6c>)
 80090d2:	f7fd fe37 	bl	8006d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090d6:	480c      	ldr	r0, [pc, #48]	; (8009108 <prvInitialiseTaskLists+0x70>)
 80090d8:	f7fd fe34 	bl	8006d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090dc:	480b      	ldr	r0, [pc, #44]	; (800910c <prvInitialiseTaskLists+0x74>)
 80090de:	f7fd fe31 	bl	8006d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090e2:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <prvInitialiseTaskLists+0x78>)
 80090e4:	4a05      	ldr	r2, [pc, #20]	; (80090fc <prvInitialiseTaskLists+0x64>)
 80090e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090e8:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <prvInitialiseTaskLists+0x7c>)
 80090ea:	4a05      	ldr	r2, [pc, #20]	; (8009100 <prvInitialiseTaskLists+0x68>)
 80090ec:	601a      	str	r2, [r3, #0]
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	2400975c 	.word	0x2400975c
 80090fc:	24009bbc 	.word	0x24009bbc
 8009100:	24009bd0 	.word	0x24009bd0
 8009104:	24009bec 	.word	0x24009bec
 8009108:	24009c00 	.word	0x24009c00
 800910c:	24009c18 	.word	0x24009c18
 8009110:	24009be4 	.word	0x24009be4
 8009114:	24009be8 	.word	0x24009be8

08009118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800911e:	e019      	b.n	8009154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009120:	f7fd fff0 	bl	8007104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009124:	4b10      	ldr	r3, [pc, #64]	; (8009168 <prvCheckTasksWaitingTermination+0x50>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3304      	adds	r3, #4
 8009130:	4618      	mov	r0, r3
 8009132:	f7fd fe91 	bl	8006e58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <prvCheckTasksWaitingTermination+0x54>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3b01      	subs	r3, #1
 800913c:	4a0b      	ldr	r2, [pc, #44]	; (800916c <prvCheckTasksWaitingTermination+0x54>)
 800913e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <prvCheckTasksWaitingTermination+0x58>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3b01      	subs	r3, #1
 8009146:	4a0a      	ldr	r2, [pc, #40]	; (8009170 <prvCheckTasksWaitingTermination+0x58>)
 8009148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800914a:	f7fe f80b 	bl	8007164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f810 	bl	8009174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009154:	4b06      	ldr	r3, [pc, #24]	; (8009170 <prvCheckTasksWaitingTermination+0x58>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e1      	bne.n	8009120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	24009c00 	.word	0x24009c00
 800916c:	24009c2c 	.word	0x24009c2c
 8009170:	24009c14 	.word	0x24009c14

08009174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3354      	adds	r3, #84	; 0x54
 8009180:	4618      	mov	r0, r3
 8009182:	f00e fd59 	bl	8017c38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800918c:	2b00      	cmp	r3, #0
 800918e:	d108      	bne.n	80091a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	4618      	mov	r0, r3
 8009196:	f7fd fcb7 	bl	8006b08 <vPortFree>
				vPortFree( pxTCB );
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7fd fcb4 	bl	8006b08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091a0:	e018      	b.n	80091d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d103      	bne.n	80091b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7fd fcab 	bl	8006b08 <vPortFree>
	}
 80091b2:	e00f      	b.n	80091d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d00a      	beq.n	80091d4 <prvDeleteTCB+0x60>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60fb      	str	r3, [r7, #12]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <prvDeleteTCB+0x5e>
	}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e2:	4b0c      	ldr	r3, [pc, #48]	; (8009214 <prvResetNextTaskUnblockTime+0x38>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d104      	bne.n	80091f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <prvResetNextTaskUnblockTime+0x3c>)
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091f4:	e008      	b.n	8009208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f6:	4b07      	ldr	r3, [pc, #28]	; (8009214 <prvResetNextTaskUnblockTime+0x38>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4a04      	ldr	r2, [pc, #16]	; (8009218 <prvResetNextTaskUnblockTime+0x3c>)
 8009206:	6013      	str	r3, [r2, #0]
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	24009be4 	.word	0x24009be4
 8009218:	24009c4c 	.word	0x24009c4c

0800921c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <xTaskGetCurrentTaskHandle+0x1c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009228:	687b      	ldr	r3, [r7, #4]
	}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	24009758 	.word	0x24009758

0800923c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009242:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <xTaskGetSchedulerState+0x34>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d102      	bne.n	8009250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800924a:	2301      	movs	r3, #1
 800924c:	607b      	str	r3, [r7, #4]
 800924e:	e008      	b.n	8009262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <xTaskGetSchedulerState+0x38>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009258:	2302      	movs	r3, #2
 800925a:	607b      	str	r3, [r7, #4]
 800925c:	e001      	b.n	8009262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800925e:	2300      	movs	r3, #0
 8009260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009262:	687b      	ldr	r3, [r7, #4]
	}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	24009c38 	.word	0x24009c38
 8009274:	24009c54 	.word	0x24009c54

08009278 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d051      	beq.n	8009332 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	4b2a      	ldr	r3, [pc, #168]	; (800933c <xTaskPriorityInherit+0xc4>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	429a      	cmp	r2, r3
 800929a:	d241      	bcs.n	8009320 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	db06      	blt.n	80092b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a4:	4b25      	ldr	r3, [pc, #148]	; (800933c <xTaskPriorityInherit+0xc4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6959      	ldr	r1, [r3, #20]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4a1f      	ldr	r2, [pc, #124]	; (8009340 <xTaskPriorityInherit+0xc8>)
 80092c4:	4413      	add	r3, r2
 80092c6:	4299      	cmp	r1, r3
 80092c8:	d122      	bne.n	8009310 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fd fdc2 	bl	8006e58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092d4:	4b19      	ldr	r3, [pc, #100]	; (800933c <xTaskPriorityInherit+0xc4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	4b18      	ldr	r3, [pc, #96]	; (8009344 <xTaskPriorityInherit+0xcc>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d903      	bls.n	80092f2 <xTaskPriorityInherit+0x7a>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	4a15      	ldr	r2, [pc, #84]	; (8009344 <xTaskPriorityInherit+0xcc>)
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4a10      	ldr	r2, [pc, #64]	; (8009340 <xTaskPriorityInherit+0xc8>)
 8009300:	441a      	add	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	3304      	adds	r3, #4
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7fd fd48 	bl	8006d9e <vListInsertEnd>
 800930e:	e004      	b.n	800931a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <xTaskPriorityInherit+0xc4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800931a:	2301      	movs	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
 800931e:	e008      	b.n	8009332 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009324:	4b05      	ldr	r3, [pc, #20]	; (800933c <xTaskPriorityInherit+0xc4>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	429a      	cmp	r2, r3
 800932c:	d201      	bcs.n	8009332 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800932e:	2301      	movs	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009332:	68fb      	ldr	r3, [r7, #12]
	}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	24009758 	.word	0x24009758
 8009340:	2400975c 	.word	0x2400975c
 8009344:	24009c34 	.word	0x24009c34

08009348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d056      	beq.n	800940c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800935e:	4b2e      	ldr	r3, [pc, #184]	; (8009418 <xTaskPriorityDisinherit+0xd0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d00a      	beq.n	800937e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	60fb      	str	r3, [r7, #12]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	1e5a      	subs	r2, r3, #1
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d02c      	beq.n	800940c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d128      	bne.n	800940c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	3304      	adds	r3, #4
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd fd4a 	bl	8006e58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4b0f      	ldr	r3, [pc, #60]	; (800941c <xTaskPriorityDisinherit+0xd4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <xTaskPriorityDisinherit+0xa4>
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	4a0c      	ldr	r2, [pc, #48]	; (800941c <xTaskPriorityDisinherit+0xd4>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4a09      	ldr	r2, [pc, #36]	; (8009420 <xTaskPriorityDisinherit+0xd8>)
 80093fa:	441a      	add	r2, r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fd fccb 	bl	8006d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800940c:	697b      	ldr	r3, [r7, #20]
	}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	24009758 	.word	0x24009758
 800941c:	24009c34 	.word	0x24009c34
 8009420:	2400975c 	.word	0x2400975c

08009424 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009432:	2301      	movs	r3, #1
 8009434:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d06a      	beq.n	8009512 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	60fb      	str	r3, [r7, #12]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d902      	bls.n	800946a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e002      	b.n	8009470 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	429a      	cmp	r2, r3
 8009478:	d04b      	beq.n	8009512 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	429a      	cmp	r2, r3
 8009482:	d146      	bne.n	8009512 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009484:	4b25      	ldr	r3, [pc, #148]	; (800951c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	429a      	cmp	r2, r3
 800948c:	d10a      	bne.n	80094a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	60bb      	str	r3, [r7, #8]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	db04      	blt.n	80094c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	6959      	ldr	r1, [r3, #20]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4a13      	ldr	r2, [pc, #76]	; (8009520 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80094d2:	4413      	add	r3, r2
 80094d4:	4299      	cmp	r1, r3
 80094d6:	d11c      	bne.n	8009512 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	3304      	adds	r3, #4
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fd fcbb 	bl	8006e58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d903      	bls.n	80094f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	4a0c      	ldr	r2, [pc, #48]	; (8009524 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4a07      	ldr	r2, [pc, #28]	; (8009520 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009504:	441a      	add	r2, r3
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f7fd fc46 	bl	8006d9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009512:	bf00      	nop
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	24009758 	.word	0x24009758
 8009520:	2400975c 	.word	0x2400975c
 8009524:	24009c34 	.word	0x24009c34

08009528 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009528:	b480      	push	{r7}
 800952a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800952c:	4b07      	ldr	r3, [pc, #28]	; (800954c <pvTaskIncrementMutexHeldCount+0x24>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009534:	4b05      	ldr	r3, [pc, #20]	; (800954c <pvTaskIncrementMutexHeldCount+0x24>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800953a:	3201      	adds	r2, #1
 800953c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <pvTaskIncrementMutexHeldCount+0x24>)
 8009540:	681b      	ldr	r3, [r3, #0]
	}
 8009542:	4618      	mov	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	24009758 	.word	0x24009758

08009550 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800955a:	4b21      	ldr	r3, [pc, #132]	; (80095e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009560:	4b20      	ldr	r3, [pc, #128]	; (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3304      	adds	r3, #4
 8009566:	4618      	mov	r0, r3
 8009568:	f7fd fc76 	bl	8006e58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d10a      	bne.n	800958a <prvAddCurrentTaskToDelayedList+0x3a>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800957a:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4819      	ldr	r0, [pc, #100]	; (80095e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009584:	f7fd fc0b 	bl	8006d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009588:	e026      	b.n	80095d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4413      	add	r3, r2
 8009590:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009592:	4b14      	ldr	r3, [pc, #80]	; (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d209      	bcs.n	80095b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b0f      	ldr	r3, [pc, #60]	; (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fd fc19 	bl	8006de6 <vListInsert>
}
 80095b4:	e010      	b.n	80095d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095b6:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3304      	adds	r3, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f7fd fc0f 	bl	8006de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095c8:	4b0a      	ldr	r3, [pc, #40]	; (80095f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d202      	bcs.n	80095d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095d2:	4a08      	ldr	r2, [pc, #32]	; (80095f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	6013      	str	r3, [r2, #0]
}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	24009c30 	.word	0x24009c30
 80095e4:	24009758 	.word	0x24009758
 80095e8:	24009c18 	.word	0x24009c18
 80095ec:	24009be8 	.word	0x24009be8
 80095f0:	24009be4 	.word	0x24009be4
 80095f4:	24009c4c 	.word	0x24009c4c

080095f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	; 0x28
 80095fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009602:	f000 fb07 	bl	8009c14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009606:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <xTimerCreateTimerTask+0x80>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d021      	beq.n	8009652 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009616:	1d3a      	adds	r2, r7, #4
 8009618:	f107 0108 	add.w	r1, r7, #8
 800961c:	f107 030c 	add.w	r3, r7, #12
 8009620:	4618      	mov	r0, r3
 8009622:	f7fd f98b 	bl	800693c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	9202      	str	r2, [sp, #8]
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	2302      	movs	r3, #2
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	460a      	mov	r2, r1
 8009638:	4910      	ldr	r1, [pc, #64]	; (800967c <xTimerCreateTimerTask+0x84>)
 800963a:	4811      	ldr	r0, [pc, #68]	; (8009680 <xTimerCreateTimerTask+0x88>)
 800963c:	f7fe ff84 	bl	8008548 <xTaskCreateStatic>
 8009640:	4603      	mov	r3, r0
 8009642:	4a10      	ldr	r2, [pc, #64]	; (8009684 <xTimerCreateTimerTask+0x8c>)
 8009644:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009646:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <xTimerCreateTimerTask+0x8c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800964e:	2301      	movs	r3, #1
 8009650:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	613b      	str	r3, [r7, #16]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800966e:	697b      	ldr	r3, [r7, #20]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	24009c88 	.word	0x24009c88
 800967c:	08019b60 	.word	0x08019b60
 8009680:	080097bd 	.word	0x080097bd
 8009684:	24009c8c 	.word	0x24009c8c

08009688 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009696:	2300      	movs	r3, #0
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	623b      	str	r3, [r7, #32]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096b6:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <xTimerGenericCommand+0x98>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d02a      	beq.n	8009714 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2b05      	cmp	r3, #5
 80096ce:	dc18      	bgt.n	8009702 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096d0:	f7ff fdb4 	bl	800923c <xTaskGetSchedulerState>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d109      	bne.n	80096ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <xTimerGenericCommand+0x98>)
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	f107 0110 	add.w	r1, r7, #16
 80096e2:	2300      	movs	r3, #0
 80096e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e6:	f7fe f88d 	bl	8007804 <xQueueGenericSend>
 80096ea:	6278      	str	r0, [r7, #36]	; 0x24
 80096ec:	e012      	b.n	8009714 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <xTimerGenericCommand+0x98>)
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f107 0110 	add.w	r1, r7, #16
 80096f6:	2300      	movs	r3, #0
 80096f8:	2200      	movs	r2, #0
 80096fa:	f7fe f883 	bl	8007804 <xQueueGenericSend>
 80096fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009700:	e008      	b.n	8009714 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <xTimerGenericCommand+0x98>)
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f107 0110 	add.w	r1, r7, #16
 800970a:	2300      	movs	r3, #0
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	f7fe f977 	bl	8007a00 <xQueueGenericSendFromISR>
 8009712:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009716:	4618      	mov	r0, r3
 8009718:	3728      	adds	r7, #40	; 0x28
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	24009c88 	.word	0x24009c88

08009724 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af02      	add	r7, sp, #8
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800972e:	4b22      	ldr	r3, [pc, #136]	; (80097b8 <prvProcessExpiredTimer+0x94>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	3304      	adds	r3, #4
 800973c:	4618      	mov	r0, r3
 800973e:	f7fd fb8b 	bl	8006e58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d022      	beq.n	8009796 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	699a      	ldr	r2, [r3, #24]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	18d1      	adds	r1, r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	6978      	ldr	r0, [r7, #20]
 800975e:	f000 f8d1 	bl	8009904 <prvInsertTimerInActiveList>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01f      	beq.n	80097a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009768:	2300      	movs	r3, #0
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	2300      	movs	r3, #0
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	2100      	movs	r1, #0
 8009772:	6978      	ldr	r0, [r7, #20]
 8009774:	f7ff ff88 	bl	8009688 <xTimerGenericCommand>
 8009778:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d113      	bne.n	80097a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	6978      	ldr	r0, [r7, #20]
 80097ae:	4798      	blx	r3
}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	24009c80 	.word	0x24009c80

080097bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097c4:	f107 0308 	add.w	r3, r7, #8
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 f857 	bl	800987c <prvGetNextExpireTime>
 80097ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4619      	mov	r1, r3
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f803 	bl	80097e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097da:	f000 f8d5 	bl	8009988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097de:	e7f1      	b.n	80097c4 <prvTimerTask+0x8>

080097e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097ea:	f7ff f909 	bl	8008a00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097ee:	f107 0308 	add.w	r3, r7, #8
 80097f2:	4618      	mov	r0, r3
 80097f4:	f000 f866 	bl	80098c4 <prvSampleTimeNow>
 80097f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d130      	bne.n	8009862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10a      	bne.n	800981c <prvProcessTimerOrBlockTask+0x3c>
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	429a      	cmp	r2, r3
 800980c:	d806      	bhi.n	800981c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800980e:	f7ff f905 	bl	8008a1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff ff85 	bl	8009724 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800981a:	e024      	b.n	8009866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d008      	beq.n	8009834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009822:	4b13      	ldr	r3, [pc, #76]	; (8009870 <prvProcessTimerOrBlockTask+0x90>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <prvProcessTimerOrBlockTask+0x50>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <prvProcessTimerOrBlockTask+0x52>
 8009830:	2300      	movs	r3, #0
 8009832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <prvProcessTimerOrBlockTask+0x94>)
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	4619      	mov	r1, r3
 8009842:	f7fe fe4d 	bl	80084e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009846:	f7ff f8e9 	bl	8008a1c <xTaskResumeAll>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009850:	4b09      	ldr	r3, [pc, #36]	; (8009878 <prvProcessTimerOrBlockTask+0x98>)
 8009852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	f3bf 8f6f 	isb	sy
}
 8009860:	e001      	b.n	8009866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009862:	f7ff f8db 	bl	8008a1c <xTaskResumeAll>
}
 8009866:	bf00      	nop
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	24009c84 	.word	0x24009c84
 8009874:	24009c88 	.word	0x24009c88
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009884:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <prvGetNextExpireTime+0x44>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <prvGetNextExpireTime+0x16>
 800988e:	2201      	movs	r2, #1
 8009890:	e000      	b.n	8009894 <prvGetNextExpireTime+0x18>
 8009892:	2200      	movs	r2, #0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d105      	bne.n	80098ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <prvGetNextExpireTime+0x44>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]
 80098aa:	e001      	b.n	80098b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098b0:	68fb      	ldr	r3, [r7, #12]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	24009c80 	.word	0x24009c80

080098c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098cc:	f7ff f944 	bl	8008b58 <xTaskGetTickCount>
 80098d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <prvSampleTimeNow+0x3c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d205      	bcs.n	80098e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098dc:	f000 f936 	bl	8009b4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e002      	b.n	80098ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098ee:	4a04      	ldr	r2, [pc, #16]	; (8009900 <prvSampleTimeNow+0x3c>)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098f4:	68fb      	ldr	r3, [r7, #12]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	24009c90 	.word	0x24009c90

08009904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	429a      	cmp	r2, r3
 8009928:	d812      	bhi.n	8009950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	1ad2      	subs	r2, r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	429a      	cmp	r2, r3
 8009936:	d302      	bcc.n	800993e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e01b      	b.n	8009976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800993e:	4b10      	ldr	r3, [pc, #64]	; (8009980 <prvInsertTimerInActiveList+0x7c>)
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3304      	adds	r3, #4
 8009946:	4619      	mov	r1, r3
 8009948:	4610      	mov	r0, r2
 800994a:	f7fd fa4c 	bl	8006de6 <vListInsert>
 800994e:	e012      	b.n	8009976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d206      	bcs.n	8009966 <prvInsertTimerInActiveList+0x62>
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	429a      	cmp	r2, r3
 800995e:	d302      	bcc.n	8009966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009960:	2301      	movs	r3, #1
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e007      	b.n	8009976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009966:	4b07      	ldr	r3, [pc, #28]	; (8009984 <prvInsertTimerInActiveList+0x80>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3304      	adds	r3, #4
 800996e:	4619      	mov	r1, r3
 8009970:	4610      	mov	r0, r2
 8009972:	f7fd fa38 	bl	8006de6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009976:	697b      	ldr	r3, [r7, #20]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	24009c84 	.word	0x24009c84
 8009984:	24009c80 	.word	0x24009c80

08009988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08e      	sub	sp, #56	; 0x38
 800998c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800998e:	e0ca      	b.n	8009b26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	da18      	bge.n	80099c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009996:	1d3b      	adds	r3, r7, #4
 8009998:	3304      	adds	r3, #4
 800999a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	61fb      	str	r3, [r7, #28]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099be:	6850      	ldr	r0, [r2, #4]
 80099c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099c2:	6892      	ldr	r2, [r2, #8]
 80099c4:	4611      	mov	r1, r2
 80099c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f2c0 80aa 	blt.w	8009b24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d004      	beq.n	80099e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	3304      	adds	r3, #4
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fd fa39 	bl	8006e58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099e6:	463b      	mov	r3, r7
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ff6b 	bl	80098c4 <prvSampleTimeNow>
 80099ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b09      	cmp	r3, #9
 80099f4:	f200 8097 	bhi.w	8009b26 <prvProcessReceivedCommands+0x19e>
 80099f8:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <prvProcessReceivedCommands+0x78>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a29 	.word	0x08009a29
 8009a0c:	08009a9d 	.word	0x08009a9d
 8009a10:	08009ab1 	.word	0x08009ab1
 8009a14:	08009afb 	.word	0x08009afb
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a29 	.word	0x08009a29
 8009a20:	08009a9d 	.word	0x08009a9d
 8009a24:	08009ab1 	.word	0x08009ab1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	18d1      	adds	r1, r2, r3
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	f7ff ff5c 	bl	8009904 <prvInsertTimerInActiveList>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d069      	beq.n	8009b26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d05e      	beq.n	8009b26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	441a      	add	r2, r3
 8009a70:	2300      	movs	r3, #0
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	2300      	movs	r3, #0
 8009a76:	2100      	movs	r1, #0
 8009a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a7a:	f7ff fe05 	bl	8009688 <xTimerGenericCommand>
 8009a7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d14f      	bne.n	8009b26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	61bb      	str	r3, [r7, #24]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009aae:	e03a      	b.n	8009b26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab6:	f043 0301 	orr.w	r3, r3, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	617b      	str	r3, [r7, #20]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	699a      	ldr	r2, [r3, #24]
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	18d1      	adds	r1, r2, r3
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af4:	f7ff ff06 	bl	8009904 <prvInsertTimerInActiveList>
					break;
 8009af8:	e015      	b.n	8009b26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d103      	bne.n	8009b10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b0a:	f7fc fffd 	bl	8006b08 <vPortFree>
 8009b0e:	e00a      	b.n	8009b26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b16:	f023 0301 	bic.w	r3, r3, #1
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b22:	e000      	b.n	8009b26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b26:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <prvProcessReceivedCommands+0x1c0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	1d39      	adds	r1, r7, #4
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe f88e 	bl	8007c50 <xQueueReceive>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f47f af2a 	bne.w	8009990 <prvProcessReceivedCommands+0x8>
	}
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	3730      	adds	r7, #48	; 0x30
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	24009c88 	.word	0x24009c88

08009b4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b52:	e048      	b.n	8009be6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b54:	4b2d      	ldr	r3, [pc, #180]	; (8009c0c <prvSwitchTimerLists+0xc0>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5e:	4b2b      	ldr	r3, [pc, #172]	; (8009c0c <prvSwitchTimerLists+0xc0>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fd f973 	bl	8006e58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d02e      	beq.n	8009be6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d90e      	bls.n	8009bb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ba6:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <prvSwitchTimerLists+0xc0>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	f7fd f918 	bl	8006de6 <vListInsert>
 8009bb6:	e016      	b.n	8009be6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff fd60 	bl	8009688 <xTimerGenericCommand>
 8009bc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10a      	bne.n	8009be6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	603b      	str	r3, [r7, #0]
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <prvSwitchTimerLists+0xc0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1b1      	bne.n	8009b54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <prvSwitchTimerLists+0xc0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <prvSwitchTimerLists+0xc4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a04      	ldr	r2, [pc, #16]	; (8009c0c <prvSwitchTimerLists+0xc0>)
 8009bfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bfe:	4a04      	ldr	r2, [pc, #16]	; (8009c10 <prvSwitchTimerLists+0xc4>)
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6013      	str	r3, [r2, #0]
}
 8009c04:	bf00      	nop
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	24009c80 	.word	0x24009c80
 8009c10:	24009c84 	.word	0x24009c84

08009c14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c1a:	f7fd fa73 	bl	8007104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c1e:	4b15      	ldr	r3, [pc, #84]	; (8009c74 <prvCheckForValidListAndQueue+0x60>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d120      	bne.n	8009c68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c26:	4814      	ldr	r0, [pc, #80]	; (8009c78 <prvCheckForValidListAndQueue+0x64>)
 8009c28:	f7fd f88c 	bl	8006d44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c2c:	4813      	ldr	r0, [pc, #76]	; (8009c7c <prvCheckForValidListAndQueue+0x68>)
 8009c2e:	f7fd f889 	bl	8006d44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c32:	4b13      	ldr	r3, [pc, #76]	; (8009c80 <prvCheckForValidListAndQueue+0x6c>)
 8009c34:	4a10      	ldr	r2, [pc, #64]	; (8009c78 <prvCheckForValidListAndQueue+0x64>)
 8009c36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c38:	4b12      	ldr	r3, [pc, #72]	; (8009c84 <prvCheckForValidListAndQueue+0x70>)
 8009c3a:	4a10      	ldr	r2, [pc, #64]	; (8009c7c <prvCheckForValidListAndQueue+0x68>)
 8009c3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <prvCheckForValidListAndQueue+0x74>)
 8009c44:	4a11      	ldr	r2, [pc, #68]	; (8009c8c <prvCheckForValidListAndQueue+0x78>)
 8009c46:	2110      	movs	r1, #16
 8009c48:	200a      	movs	r0, #10
 8009c4a:	f7fd fbe5 	bl	8007418 <xQueueGenericCreateStatic>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	4a08      	ldr	r2, [pc, #32]	; (8009c74 <prvCheckForValidListAndQueue+0x60>)
 8009c52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c54:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <prvCheckForValidListAndQueue+0x60>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c5c:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <prvCheckForValidListAndQueue+0x60>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	490b      	ldr	r1, [pc, #44]	; (8009c90 <prvCheckForValidListAndQueue+0x7c>)
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fbe8 	bl	8008438 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c68:	f7fd fa7c 	bl	8007164 <vPortExitCritical>
}
 8009c6c:	bf00      	nop
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	24009c88 	.word	0x24009c88
 8009c78:	24009c58 	.word	0x24009c58
 8009c7c:	24009c6c 	.word	0x24009c6c
 8009c80:	24009c80 	.word	0x24009c80
 8009c84:	24009c84 	.word	0x24009c84
 8009c88:	24009d34 	.word	0x24009d34
 8009c8c:	24009c94 	.word	0x24009c94
 8009c90:	08019b68 	.word	0x08019b68

08009c94 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	330c      	adds	r3, #12
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f00c fe05 	bl	80168b8 <tcpip_send_msg_wait_sem>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <netconn_apimsg+0x2e>
    return apimsg->err;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009cc0:	e001      	b.n	8009cc6 <netconn_apimsg+0x32>
  }
  return err;
 8009cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08c      	sub	sp, #48	; 0x30
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	603a      	str	r2, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 ff3b 	bl	800ab60 <netconn_alloc>
 8009cea:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d054      	beq.n	8009d9c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009cf2:	79bb      	ldrb	r3, [r7, #6]
 8009cf4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009cfa:	f107 0308 	add.w	r3, r7, #8
 8009cfe:	4619      	mov	r1, r3
 8009d00:	4829      	ldr	r0, [pc, #164]	; (8009da8 <netconn_new_with_proto_and_callback+0xd8>)
 8009d02:	f7ff ffc7 	bl	8009c94 <netconn_apimsg>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009d0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d043      	beq.n	8009d9c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <netconn_new_with_proto_and_callback+0x58>
 8009d1c:	4b23      	ldr	r3, [pc, #140]	; (8009dac <netconn_new_with_proto_and_callback+0xdc>)
 8009d1e:	22a3      	movs	r2, #163	; 0xa3
 8009d20:	4923      	ldr	r1, [pc, #140]	; (8009db0 <netconn_new_with_proto_and_callback+0xe0>)
 8009d22:	4824      	ldr	r0, [pc, #144]	; (8009db4 <netconn_new_with_proto_and_callback+0xe4>)
 8009d24:	f00d ff24 	bl	8017b70 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	3310      	adds	r3, #16
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f006 fa77 	bl	8010220 <sys_mbox_valid>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d105      	bne.n	8009d44 <netconn_new_with_proto_and_callback+0x74>
 8009d38:	4b1c      	ldr	r3, [pc, #112]	; (8009dac <netconn_new_with_proto_and_callback+0xdc>)
 8009d3a:	22a4      	movs	r2, #164	; 0xa4
 8009d3c:	491e      	ldr	r1, [pc, #120]	; (8009db8 <netconn_new_with_proto_and_callback+0xe8>)
 8009d3e:	481d      	ldr	r0, [pc, #116]	; (8009db4 <netconn_new_with_proto_and_callback+0xe4>)
 8009d40:	f00d ff16 	bl	8017b70 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	3314      	adds	r3, #20
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f006 fa69 	bl	8010220 <sys_mbox_valid>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <netconn_new_with_proto_and_callback+0x90>
 8009d54:	4b15      	ldr	r3, [pc, #84]	; (8009dac <netconn_new_with_proto_and_callback+0xdc>)
 8009d56:	22a6      	movs	r2, #166	; 0xa6
 8009d58:	4918      	ldr	r1, [pc, #96]	; (8009dbc <netconn_new_with_proto_and_callback+0xec>)
 8009d5a:	4816      	ldr	r0, [pc, #88]	; (8009db4 <netconn_new_with_proto_and_callback+0xe4>)
 8009d5c:	f00d ff08 	bl	8017b70 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	330c      	adds	r3, #12
 8009d64:	4618      	mov	r0, r3
 8009d66:	f006 fae9 	bl	801033c <sys_sem_valid>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d105      	bne.n	8009d7c <netconn_new_with_proto_and_callback+0xac>
 8009d70:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <netconn_new_with_proto_and_callback+0xdc>)
 8009d72:	22a9      	movs	r2, #169	; 0xa9
 8009d74:	4912      	ldr	r1, [pc, #72]	; (8009dc0 <netconn_new_with_proto_and_callback+0xf0>)
 8009d76:	480f      	ldr	r0, [pc, #60]	; (8009db4 <netconn_new_with_proto_and_callback+0xe4>)
 8009d78:	f00d fefa 	bl	8017b70 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	330c      	adds	r3, #12
 8009d80:	4618      	mov	r0, r3
 8009d82:	f006 face 	bl	8010322 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	3310      	adds	r3, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f006 f9d4 	bl	8010138 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d92:	2007      	movs	r0, #7
 8009d94:	f004 ffac 	bl	800ecf0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e000      	b.n	8009d9e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3730      	adds	r7, #48	; 0x30
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0800ab35 	.word	0x0800ab35
 8009dac:	08019b70 	.word	0x08019b70
 8009db0:	08019c00 	.word	0x08019c00
 8009db4:	08019c24 	.word	0x08019c24
 8009db8:	08019c4c 	.word	0x08019c4c
 8009dbc:	08019c64 	.word	0x08019c64
 8009dc0:	08019c88 	.word	0x08019c88

08009dc4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08c      	sub	sp, #48	; 0x30
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e014      	b.n	8009e00 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009dda:	2329      	movs	r3, #41	; 0x29
 8009ddc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009dde:	f107 030c 	add.w	r3, r7, #12
 8009de2:	4619      	mov	r1, r3
 8009de4:	4808      	ldr	r0, [pc, #32]	; (8009e08 <netconn_prepare_delete+0x44>)
 8009de6:	f7ff ff55 	bl	8009c94 <netconn_apimsg>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009df0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <netconn_prepare_delete+0x3a>
    return err;
 8009df8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009dfc:	e000      	b.n	8009e00 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3730      	adds	r7, #48	; 0x30
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	0800b0a1 	.word	0x0800b0a1

08009e0c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <netconn_delete+0x12>
    return ERR_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e00d      	b.n	8009e3a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff ffd0 	bl	8009dc4 <netconn_prepare_delete>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <netconn_delete+0x2a>
    netconn_free(conn);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 ff03 	bl	800ac3c <netconn_free>
  }
  return err;
 8009e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08e      	sub	sp, #56	; 0x38
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d109      	bne.n	8009e6c <netconn_bind+0x28>
 8009e58:	4b11      	ldr	r3, [pc, #68]	; (8009ea0 <netconn_bind+0x5c>)
 8009e5a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009e5e:	4911      	ldr	r1, [pc, #68]	; (8009ea4 <netconn_bind+0x60>)
 8009e60:	4811      	ldr	r0, [pc, #68]	; (8009ea8 <netconn_bind+0x64>)
 8009e62:	f00d fe85 	bl	8017b70 <iprintf>
 8009e66:	f06f 030f 	mvn.w	r3, #15
 8009e6a:	e015      	b.n	8009e98 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009e72:	4b0e      	ldr	r3, [pc, #56]	; (8009eac <netconn_bind+0x68>)
 8009e74:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009e82:	f107 0314 	add.w	r3, r7, #20
 8009e86:	4619      	mov	r1, r3
 8009e88:	4809      	ldr	r0, [pc, #36]	; (8009eb0 <netconn_bind+0x6c>)
 8009e8a:	f7ff ff03 	bl	8009c94 <netconn_apimsg>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009e94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3738      	adds	r7, #56	; 0x38
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	08019b70 	.word	0x08019b70
 8009ea4:	08019d04 	.word	0x08019d04
 8009ea8:	08019c24 	.word	0x08019c24
 8009eac:	0801d538 	.word	0x0801d538
 8009eb0:	0800b261 	.word	0x0800b261

08009eb4 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08e      	sub	sp, #56	; 0x38
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d109      	bne.n	8009edc <netconn_connect+0x28>
 8009ec8:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <netconn_connect+0x5c>)
 8009eca:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009ece:	4911      	ldr	r1, [pc, #68]	; (8009f14 <netconn_connect+0x60>)
 8009ed0:	4811      	ldr	r0, [pc, #68]	; (8009f18 <netconn_connect+0x64>)
 8009ed2:	f00d fe4d 	bl	8017b70 <iprintf>
 8009ed6:	f06f 030f 	mvn.w	r3, #15
 8009eda:	e015      	b.n	8009f08 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8009ee2:	4b0e      	ldr	r3, [pc, #56]	; (8009f1c <netconn_connect+0x68>)
 8009ee4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009eee:	88fb      	ldrh	r3, [r7, #6]
 8009ef0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8009ef2:	f107 0314 	add.w	r3, r7, #20
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4809      	ldr	r0, [pc, #36]	; (8009f20 <netconn_connect+0x6c>)
 8009efa:	f7ff fecb 	bl	8009c94 <netconn_apimsg>
 8009efe:	4603      	mov	r3, r0
 8009f00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009f04:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3738      	adds	r7, #56	; 0x38
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	08019b70 	.word	0x08019b70
 8009f14:	08019d40 	.word	0x08019d40
 8009f18:	08019c24 	.word	0x08019c24
 8009f1c:	0801d538 	.word	0x0801d538
 8009f20:	0800b3f5 	.word	0x0800b3f5

08009f24 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <netconn_recv_data+0x2c>
 8009f3c:	4b58      	ldr	r3, [pc, #352]	; (800a0a0 <netconn_recv_data+0x17c>)
 8009f3e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009f42:	4958      	ldr	r1, [pc, #352]	; (800a0a4 <netconn_recv_data+0x180>)
 8009f44:	4858      	ldr	r0, [pc, #352]	; (800a0a8 <netconn_recv_data+0x184>)
 8009f46:	f00d fe13 	bl	8017b70 <iprintf>
 8009f4a:	f06f 030f 	mvn.w	r3, #15
 8009f4e:	e0a2      	b.n	800a096 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <netconn_recv_data+0x4c>
 8009f5c:	4b50      	ldr	r3, [pc, #320]	; (800a0a0 <netconn_recv_data+0x17c>)
 8009f5e:	f240 224a 	movw	r2, #586	; 0x24a
 8009f62:	4952      	ldr	r1, [pc, #328]	; (800a0ac <netconn_recv_data+0x188>)
 8009f64:	4850      	ldr	r0, [pc, #320]	; (800a0a8 <netconn_recv_data+0x184>)
 8009f66:	f00d fe03 	bl	8017b70 <iprintf>
 8009f6a:	f06f 030f 	mvn.w	r3, #15
 8009f6e:	e092      	b.n	800a096 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3310      	adds	r3, #16
 8009f74:	4618      	mov	r0, r3
 8009f76:	f006 f953 	bl	8010220 <sys_mbox_valid>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10e      	bne.n	8009f9e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 fa23 	bl	800a3cc <netconn_err>
 8009f86:	4603      	mov	r3, r0
 8009f88:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009f8a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009f92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009f96:	e07e      	b.n	800a096 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009f98:	f06f 030a 	mvn.w	r3, #10
 8009f9c:	e07b      	b.n	800a096 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	7f1b      	ldrb	r3, [r3, #28]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10f      	bne.n	8009fca <netconn_recv_data+0xa6>
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7f1b      	ldrb	r3, [r3, #28]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d104      	bne.n	8009fca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d023      	beq.n	800a012 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3310      	adds	r3, #16
 8009fce:	f107 0218 	add.w	r2, r7, #24
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f006 f90c 	bl	80101f2 <sys_arch_mbox_tryfetch>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d11f      	bne.n	800a022 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 f9f2 	bl	800a3cc <netconn_err>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009fec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009ff4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009ff8:	e04d      	b.n	800a096 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	7f1b      	ldrb	r3, [r3, #28]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a006:	f06f 030a 	mvn.w	r3, #10
 800a00a:	e044      	b.n	800a096 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a00c:	f06f 0306 	mvn.w	r3, #6
 800a010:	e041      	b.n	800a096 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3310      	adds	r3, #16
 800a016:	f107 0118 	add.w	r1, r7, #24
 800a01a:	2200      	movs	r2, #0
 800a01c:	4618      	mov	r0, r3
 800a01e:	f006 f8b7 	bl	8010190 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a02a:	2b10      	cmp	r3, #16
 800a02c:	d117      	bne.n	800a05e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f107 0217 	add.w	r2, r7, #23
 800a034:	4611      	mov	r1, r2
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fa1a 	bl	800a470 <lwip_netconn_is_err_msg>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d009      	beq.n	800a056 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a046:	f113 0f0f 	cmn.w	r3, #15
 800a04a:	d101      	bne.n	800a050 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e022      	b.n	800a096 <netconn_recv_data+0x172>
      }
      return err;
 800a050:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a054:	e01f      	b.n	800a096 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	891b      	ldrh	r3, [r3, #8]
 800a05a:	83fb      	strh	r3, [r7, #30]
 800a05c:	e00d      	b.n	800a07a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d106      	bne.n	800a072 <netconn_recv_data+0x14e>
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <netconn_recv_data+0x17c>)
 800a066:	f240 2291 	movw	r2, #657	; 0x291
 800a06a:	4911      	ldr	r1, [pc, #68]	; (800a0b0 <netconn_recv_data+0x18c>)
 800a06c:	480e      	ldr	r0, [pc, #56]	; (800a0a8 <netconn_recv_data+0x184>)
 800a06e:	f00d fd7f 	bl	8017b70 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	891b      	ldrh	r3, [r3, #8]
 800a078:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d005      	beq.n	800a08e <netconn_recv_data+0x16a>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	8bfa      	ldrh	r2, [r7, #30]
 800a088:	2101      	movs	r1, #1
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	08019b70 	.word	0x08019b70
 800a0a4:	08019de4 	.word	0x08019de4
 800a0a8:	08019c24 	.word	0x08019c24
 800a0ac:	08019e04 	.word	0x08019e04
 800a0b0:	08019e20 	.word	0x08019e20

0800a0b4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d005      	beq.n	800a0d2 <netconn_tcp_recvd_msg+0x1e>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0ce:	2b10      	cmp	r3, #16
 800a0d0:	d009      	beq.n	800a0e6 <netconn_tcp_recvd_msg+0x32>
 800a0d2:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <netconn_tcp_recvd_msg+0x50>)
 800a0d4:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a0d8:	490b      	ldr	r1, [pc, #44]	; (800a108 <netconn_tcp_recvd_msg+0x54>)
 800a0da:	480c      	ldr	r0, [pc, #48]	; (800a10c <netconn_tcp_recvd_msg+0x58>)
 800a0dc:	f00d fd48 	bl	8017b70 <iprintf>
 800a0e0:	f06f 030f 	mvn.w	r3, #15
 800a0e4:	e00a      	b.n	800a0fc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	4806      	ldr	r0, [pc, #24]	; (800a110 <netconn_tcp_recvd_msg+0x5c>)
 800a0f6:	f7ff fdcd 	bl	8009c94 <netconn_apimsg>
 800a0fa:	4603      	mov	r3, r0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	08019b70 	.word	0x08019b70
 800a108:	08019e2c 	.word	0x08019e2c
 800a10c:	08019c24 	.word	0x08019c24
 800a110:	0800b603 	.word	0x0800b603

0800a114 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b090      	sub	sp, #64	; 0x40
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3310      	adds	r3, #16
 800a126:	4618      	mov	r0, r3
 800a128:	f006 f87a 	bl	8010220 <sys_mbox_valid>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d102      	bne.n	800a138 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a132:	f06f 030a 	mvn.w	r3, #10
 800a136:	e06d      	b.n	800a214 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	7f1b      	ldrb	r3, [r3, #28]
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da07      	bge.n	800a152 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	7f1b      	ldrb	r3, [r3, #28]
 800a146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a150:	e039      	b.n	800a1c6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	461a      	mov	r2, r3
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff fee3 	bl	8009f24 <netconn_recv_data>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a164:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a16c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a170:	e050      	b.n	800a214 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10e      	bne.n	800a1a0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <netconn_recv_data_tcp+0x7a>
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	891b      	ldrh	r3, [r3, #8]
 800a18c:	e000      	b.n	800a190 <netconn_recv_data_tcp+0x7c>
 800a18e:	2301      	movs	r3, #1
 800a190:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a192:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a194:	f107 0214 	add.w	r2, r7, #20
 800a198:	4619      	mov	r1, r3
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff ff8a 	bl	800a0b4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d134      	bne.n	800a210 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	f003 0310 	and.w	r3, r3, #16
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d009      	beq.n	800a1c4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	7f1b      	ldrb	r3, [r3, #28]
 800a1b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a1be:	f06f 0306 	mvn.w	r3, #6
 800a1c2:	e027      	b.n	800a214 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a1c4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <netconn_recv_data_tcp+0xc6>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10f      	bne.n	800a202 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 f8f2 	bl	800a3cc <netconn_err>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a1ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <netconn_recv_data_tcp+0xe8>
          return err;
 800a1f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1fa:	e00b      	b.n	800a214 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a1fc:	f06f 030d 	mvn.w	r3, #13
 800a200:	e008      	b.n	800a214 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a202:	2101      	movs	r1, #1
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f8b1 	bl	800a36c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a20a:	f06f 030e 	mvn.w	r3, #14
 800a20e:	e001      	b.n	800a214 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a210:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a214:	4618      	mov	r0, r3
 800a216:	3740      	adds	r7, #64	; 0x40
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d109      	bne.n	800a244 <netconn_recv+0x28>
 800a230:	4b32      	ldr	r3, [pc, #200]	; (800a2fc <netconn_recv+0xe0>)
 800a232:	f240 3263 	movw	r2, #867	; 0x363
 800a236:	4932      	ldr	r1, [pc, #200]	; (800a300 <netconn_recv+0xe4>)
 800a238:	4832      	ldr	r0, [pc, #200]	; (800a304 <netconn_recv+0xe8>)
 800a23a:	f00d fc99 	bl	8017b70 <iprintf>
 800a23e:	f06f 030f 	mvn.w	r3, #15
 800a242:	e056      	b.n	800a2f2 <netconn_recv+0xd6>
  *new_buf = NULL;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d109      	bne.n	800a264 <netconn_recv+0x48>
 800a250:	4b2a      	ldr	r3, [pc, #168]	; (800a2fc <netconn_recv+0xe0>)
 800a252:	f240 3265 	movw	r2, #869	; 0x365
 800a256:	492c      	ldr	r1, [pc, #176]	; (800a308 <netconn_recv+0xec>)
 800a258:	482a      	ldr	r0, [pc, #168]	; (800a304 <netconn_recv+0xe8>)
 800a25a:	f00d fc89 	bl	8017b70 <iprintf>
 800a25e:	f06f 030f 	mvn.w	r3, #15
 800a262:	e046      	b.n	800a2f2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d13a      	bne.n	800a2e6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a274:	2006      	movs	r0, #6
 800a276:	f004 fcc5 	bl	800ec04 <memp_malloc>
 800a27a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <netconn_recv+0x6c>
      return ERR_MEM;
 800a282:	f04f 33ff 	mov.w	r3, #4294967295
 800a286:	e034      	b.n	800a2f2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a288:	f107 030c 	add.w	r3, r7, #12
 800a28c:	2200      	movs	r2, #0
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ff3f 	bl	800a114 <netconn_recv_data_tcp>
 800a296:	4603      	mov	r3, r0
 800a298:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a29a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a2a2:	6979      	ldr	r1, [r7, #20]
 800a2a4:	2006      	movs	r0, #6
 800a2a6:	f004 fd23 	bl	800ecf0 <memp_free>
      return err;
 800a2aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2ae:	e020      	b.n	800a2f2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d106      	bne.n	800a2c4 <netconn_recv+0xa8>
 800a2b6:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <netconn_recv+0xe0>)
 800a2b8:	f240 3279 	movw	r2, #889	; 0x379
 800a2bc:	4913      	ldr	r1, [pc, #76]	; (800a30c <netconn_recv+0xf0>)
 800a2be:	4811      	ldr	r0, [pc, #68]	; (800a304 <netconn_recv+0xe8>)
 800a2c0:	f00d fc56 	bl	8017b70 <iprintf>

    buf->p = p;
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e005      	b.n	800a2f2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fe1a 	bl	8009f24 <netconn_recv_data>
 800a2f0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	08019b70 	.word	0x08019b70
 800a300:	08019de4 	.word	0x08019de4
 800a304:	08019c24 	.word	0x08019c24
 800a308:	08019e04 	.word	0x08019e04
 800a30c:	08019e7c 	.word	0x08019e7c

0800a310 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08c      	sub	sp, #48	; 0x30
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <netconn_send+0x24>
 800a320:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <netconn_send+0x4c>)
 800a322:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a326:	490e      	ldr	r1, [pc, #56]	; (800a360 <netconn_send+0x50>)
 800a328:	480e      	ldr	r0, [pc, #56]	; (800a364 <netconn_send+0x54>)
 800a32a:	f00d fc21 	bl	8017b70 <iprintf>
 800a32e:	f06f 030f 	mvn.w	r3, #15
 800a332:	e00e      	b.n	800a352 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	4619      	mov	r1, r3
 800a342:	4809      	ldr	r0, [pc, #36]	; (800a368 <netconn_send+0x58>)
 800a344:	f7ff fca6 	bl	8009c94 <netconn_apimsg>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a34e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a352:	4618      	mov	r0, r3
 800a354:	3730      	adds	r7, #48	; 0x30
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	08019b70 	.word	0x08019b70
 800a360:	08019e88 	.word	0x08019e88
 800a364:	08019c24 	.word	0x08019c24
 800a368:	0800b569 	.word	0x0800b569

0800a36c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08c      	sub	sp, #48	; 0x30
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d109      	bne.n	800a392 <netconn_close_shutdown+0x26>
 800a37e:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <netconn_close_shutdown+0x50>)
 800a380:	f240 4247 	movw	r2, #1095	; 0x447
 800a384:	490e      	ldr	r1, [pc, #56]	; (800a3c0 <netconn_close_shutdown+0x54>)
 800a386:	480f      	ldr	r0, [pc, #60]	; (800a3c4 <netconn_close_shutdown+0x58>)
 800a388:	f00d fbf2 	bl	8017b70 <iprintf>
 800a38c:	f06f 030f 	mvn.w	r3, #15
 800a390:	e010      	b.n	800a3b4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a396:	78fb      	ldrb	r3, [r7, #3]
 800a398:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a39a:	2329      	movs	r3, #41	; 0x29
 800a39c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a39e:	f107 030c 	add.w	r3, r7, #12
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4808      	ldr	r0, [pc, #32]	; (800a3c8 <netconn_close_shutdown+0x5c>)
 800a3a6:	f7ff fc75 	bl	8009c94 <netconn_apimsg>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a3b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3730      	adds	r7, #48	; 0x30
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	08019b70 	.word	0x08019b70
 800a3c0:	08019f08 	.word	0x08019f08
 800a3c4:	08019c24 	.word	0x08019c24
 800a3c8:	0800ba09 	.word	0x0800ba09

0800a3cc <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <netconn_err+0x12>
    return ERR_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e00d      	b.n	800a3fa <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a3de:	f006 f829 	bl	8010434 <sys_arch_protect>
 800a3e2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7a1b      	ldrb	r3, [r3, #8]
 800a3e8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f006 f82d 	bl	8010450 <sys_arch_unprotect>
  return err;
 800a3f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a412:	f113 0f0d 	cmn.w	r3, #13
 800a416:	d009      	beq.n	800a42c <lwip_netconn_err_to_msg+0x28>
 800a418:	f113 0f0d 	cmn.w	r3, #13
 800a41c:	dc0c      	bgt.n	800a438 <lwip_netconn_err_to_msg+0x34>
 800a41e:	f113 0f0f 	cmn.w	r3, #15
 800a422:	d007      	beq.n	800a434 <lwip_netconn_err_to_msg+0x30>
 800a424:	f113 0f0e 	cmn.w	r3, #14
 800a428:	d002      	beq.n	800a430 <lwip_netconn_err_to_msg+0x2c>
 800a42a:	e005      	b.n	800a438 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a42c:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <lwip_netconn_err_to_msg+0x54>)
 800a42e:	e00e      	b.n	800a44e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <lwip_netconn_err_to_msg+0x58>)
 800a432:	e00c      	b.n	800a44e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a434:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <lwip_netconn_err_to_msg+0x5c>)
 800a436:	e00a      	b.n	800a44e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <lwip_netconn_err_to_msg+0x48>
 800a440:	4b08      	ldr	r3, [pc, #32]	; (800a464 <lwip_netconn_err_to_msg+0x60>)
 800a442:	227d      	movs	r2, #125	; 0x7d
 800a444:	4908      	ldr	r1, [pc, #32]	; (800a468 <lwip_netconn_err_to_msg+0x64>)
 800a446:	4809      	ldr	r0, [pc, #36]	; (800a46c <lwip_netconn_err_to_msg+0x68>)
 800a448:	f00d fb92 	bl	8017b70 <iprintf>
      return NULL;
 800a44c:	2300      	movs	r3, #0
  }
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	0801d524 	.word	0x0801d524
 800a45c:	0801d525 	.word	0x0801d525
 800a460:	0801d526 	.word	0x0801d526
 800a464:	08019f24 	.word	0x08019f24
 800a468:	08019fb4 	.word	0x08019fb4
 800a46c:	08019fc4 	.word	0x08019fc4

0800a470 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d105      	bne.n	800a48c <lwip_netconn_is_err_msg+0x1c>
 800a480:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <lwip_netconn_is_err_msg+0x5c>)
 800a482:	2285      	movs	r2, #133	; 0x85
 800a484:	4912      	ldr	r1, [pc, #72]	; (800a4d0 <lwip_netconn_is_err_msg+0x60>)
 800a486:	4813      	ldr	r0, [pc, #76]	; (800a4d4 <lwip_netconn_is_err_msg+0x64>)
 800a488:	f00d fb72 	bl	8017b70 <iprintf>

  if (msg == &netconn_aborted) {
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a12      	ldr	r2, [pc, #72]	; (800a4d8 <lwip_netconn_is_err_msg+0x68>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d104      	bne.n	800a49e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	22f3      	movs	r2, #243	; 0xf3
 800a498:	701a      	strb	r2, [r3, #0]
    return 1;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e012      	b.n	800a4c4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a0e      	ldr	r2, [pc, #56]	; (800a4dc <lwip_netconn_is_err_msg+0x6c>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d104      	bne.n	800a4b0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	22f2      	movs	r2, #242	; 0xf2
 800a4aa:	701a      	strb	r2, [r3, #0]
    return 1;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e009      	b.n	800a4c4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a0b      	ldr	r2, [pc, #44]	; (800a4e0 <lwip_netconn_is_err_msg+0x70>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d104      	bne.n	800a4c2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	22f1      	movs	r2, #241	; 0xf1
 800a4bc:	701a      	strb	r2, [r3, #0]
    return 1;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	08019f24 	.word	0x08019f24
 800a4d0:	08019fec 	.word	0x08019fec
 800a4d4:	08019fc4 	.word	0x08019fc4
 800a4d8:	0801d524 	.word	0x0801d524
 800a4dc:	0801d525 	.word	0x0801d525
 800a4e0:	0801d526 	.word	0x0801d526

0800a4e4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <recv_udp+0x20>
 800a4f8:	4b34      	ldr	r3, [pc, #208]	; (800a5cc <recv_udp+0xe8>)
 800a4fa:	22e5      	movs	r2, #229	; 0xe5
 800a4fc:	4934      	ldr	r1, [pc, #208]	; (800a5d0 <recv_udp+0xec>)
 800a4fe:	4835      	ldr	r0, [pc, #212]	; (800a5d4 <recv_udp+0xf0>)
 800a500:	f00d fb36 	bl	8017b70 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d105      	bne.n	800a516 <recv_udp+0x32>
 800a50a:	4b30      	ldr	r3, [pc, #192]	; (800a5cc <recv_udp+0xe8>)
 800a50c:	22e6      	movs	r2, #230	; 0xe6
 800a50e:	4932      	ldr	r1, [pc, #200]	; (800a5d8 <recv_udp+0xf4>)
 800a510:	4830      	ldr	r0, [pc, #192]	; (800a5d4 <recv_udp+0xf0>)
 800a512:	f00d fb2d 	bl	8017b70 <iprintf>
  conn = (struct netconn *)arg;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <recv_udp+0x44>
    pbuf_free(p);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f005 fab3 	bl	800fa8c <pbuf_free>
    return;
 800a526:	e04d      	b.n	800a5c4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d005      	beq.n	800a53e <recv_udp+0x5a>
 800a532:	4b26      	ldr	r3, [pc, #152]	; (800a5cc <recv_udp+0xe8>)
 800a534:	22ee      	movs	r2, #238	; 0xee
 800a536:	4929      	ldr	r1, [pc, #164]	; (800a5dc <recv_udp+0xf8>)
 800a538:	4826      	ldr	r0, [pc, #152]	; (800a5d4 <recv_udp+0xf0>)
 800a53a:	f00d fb19 	bl	8017b70 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	3310      	adds	r3, #16
 800a542:	4618      	mov	r0, r3
 800a544:	f005 fe6c 	bl	8010220 <sys_mbox_valid>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f005 fa9c 	bl	800fa8c <pbuf_free>
    return;
 800a554:	e036      	b.n	800a5c4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a556:	2006      	movs	r0, #6
 800a558:	f004 fb54 	bl	800ec04 <memp_malloc>
 800a55c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d103      	bne.n	800a56c <recv_udp+0x88>
    pbuf_free(p);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f005 fa91 	bl	800fa8c <pbuf_free>
    return;
 800a56a:	e02b      	b.n	800a5c4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <recv_udp+0xa0>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	e000      	b.n	800a586 <recv_udp+0xa2>
 800a584:	2300      	movs	r3, #0
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a58e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	891b      	ldrh	r3, [r3, #8]
 800a594:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	3310      	adds	r3, #16
 800a59a:	69b9      	ldr	r1, [r7, #24]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f005 fddd 	bl	801015c <sys_mbox_trypost>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a5a8:	69b8      	ldr	r0, [r7, #24]
 800a5aa:	f004 fbcb 	bl	800ed44 <netbuf_delete>
    return;
 800a5ae:	e009      	b.n	800a5c4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <recv_udp+0xe0>
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	8afa      	ldrh	r2, [r7, #22]
 800a5be:	2100      	movs	r1, #0
 800a5c0:	69f8      	ldr	r0, [r7, #28]
 800a5c2:	4798      	blx	r3
  }
}
 800a5c4:	3720      	adds	r7, #32
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	08019f24 	.word	0x08019f24
 800a5d0:	08019ff8 	.word	0x08019ff8
 800a5d4:	08019fc4 	.word	0x08019fc4
 800a5d8:	0801a01c 	.word	0x0801a01c
 800a5dc:	0801a03c 	.word	0x0801a03c

0800a5e0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d106      	bne.n	800a602 <recv_tcp+0x22>
 800a5f4:	4b36      	ldr	r3, [pc, #216]	; (800a6d0 <recv_tcp+0xf0>)
 800a5f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a5fa:	4936      	ldr	r1, [pc, #216]	; (800a6d4 <recv_tcp+0xf4>)
 800a5fc:	4836      	ldr	r0, [pc, #216]	; (800a6d8 <recv_tcp+0xf8>)
 800a5fe:	f00d fab7 	bl	8017b70 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <recv_tcp+0x36>
 800a608:	4b31      	ldr	r3, [pc, #196]	; (800a6d0 <recv_tcp+0xf0>)
 800a60a:	f240 122d 	movw	r2, #301	; 0x12d
 800a60e:	4933      	ldr	r1, [pc, #204]	; (800a6dc <recv_tcp+0xfc>)
 800a610:	4831      	ldr	r0, [pc, #196]	; (800a6d8 <recv_tcp+0xf8>)
 800a612:	f00d faad 	bl	8017b70 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d006      	beq.n	800a62c <recv_tcp+0x4c>
 800a61e:	4b2c      	ldr	r3, [pc, #176]	; (800a6d0 <recv_tcp+0xf0>)
 800a620:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a624:	492e      	ldr	r1, [pc, #184]	; (800a6e0 <recv_tcp+0x100>)
 800a626:	482c      	ldr	r0, [pc, #176]	; (800a6d8 <recv_tcp+0xf8>)
 800a628:	f00d faa2 	bl	8017b70 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <recv_tcp+0x5c>
    return ERR_VAL;
 800a636:	f06f 0305 	mvn.w	r3, #5
 800a63a:	e045      	b.n	800a6c8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	429a      	cmp	r2, r3
 800a644:	d006      	beq.n	800a654 <recv_tcp+0x74>
 800a646:	4b22      	ldr	r3, [pc, #136]	; (800a6d0 <recv_tcp+0xf0>)
 800a648:	f240 1235 	movw	r2, #309	; 0x135
 800a64c:	4925      	ldr	r1, [pc, #148]	; (800a6e4 <recv_tcp+0x104>)
 800a64e:	4822      	ldr	r0, [pc, #136]	; (800a6d8 <recv_tcp+0xf8>)
 800a650:	f00d fa8e 	bl	8017b70 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	3310      	adds	r3, #16
 800a658:	4618      	mov	r0, r3
 800a65a:	f005 fde1 	bl	8010220 <sys_mbox_valid>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10d      	bne.n	800a680 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d008      	beq.n	800a67c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	891b      	ldrh	r3, [r3, #8]
 800a66e:	4619      	mov	r1, r3
 800a670:	68b8      	ldr	r0, [r7, #8]
 800a672:	f006 fb59 	bl	8010d28 <tcp_recved>
      pbuf_free(p);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f005 fa08 	bl	800fa8c <pbuf_free>
    }
    return ERR_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e023      	b.n	800a6c8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <recv_tcp+0xb2>
    msg = p;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	891b      	ldrh	r3, [r3, #8]
 800a68e:	83fb      	strh	r3, [r7, #30]
 800a690:	e003      	b.n	800a69a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a692:	4b15      	ldr	r3, [pc, #84]	; (800a6e8 <recv_tcp+0x108>)
 800a694:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	3310      	adds	r3, #16
 800a69e:	69b9      	ldr	r1, [r7, #24]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f005 fd5b 	bl	801015c <sys_mbox_trypost>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	e00a      	b.n	800a6c8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d005      	beq.n	800a6c6 <recv_tcp+0xe6>
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	8bfa      	ldrh	r2, [r7, #30]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	4798      	blx	r3
  }

  return ERR_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3720      	adds	r7, #32
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	08019f24 	.word	0x08019f24
 800a6d4:	0801a05c 	.word	0x0801a05c
 800a6d8:	08019fc4 	.word	0x08019fc4
 800a6dc:	0801a080 	.word	0x0801a080
 800a6e0:	0801a0a0 	.word	0x0801a0a0
 800a6e4:	0801a0b8 	.word	0x0801a0b8
 800a6e8:	0801d526 	.word	0x0801d526

0800a6ec <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <poll_tcp+0x22>
 800a700:	4b2a      	ldr	r3, [pc, #168]	; (800a7ac <poll_tcp+0xc0>)
 800a702:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a706:	492a      	ldr	r1, [pc, #168]	; (800a7b0 <poll_tcp+0xc4>)
 800a708:	482a      	ldr	r0, [pc, #168]	; (800a7b4 <poll_tcp+0xc8>)
 800a70a:	f00d fa31 	bl	8017b70 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d104      	bne.n	800a720 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a716:	2101      	movs	r1, #1
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 ffa7 	bl	800b66c <lwip_netconn_do_writemore>
 800a71e:	e016      	b.n	800a74e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	2b04      	cmp	r3, #4
 800a726:	d112      	bne.n	800a74e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00a      	beq.n	800a746 <poll_tcp+0x5a>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6a1b      	ldr	r3, [r3, #32]
 800a734:	7a5b      	ldrb	r3, [r3, #9]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d005      	beq.n	800a746 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	7a5a      	ldrb	r2, [r3, #9]
 800a740:	3a01      	subs	r2, #1
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a746:	2101      	movs	r1, #1
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fb3f 	bl	800adcc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	7f1b      	ldrb	r3, [r3, #28]
 800a752:	f003 0310 	and.w	r3, r3, #16
 800a756:	2b00      	cmp	r3, #0
 800a758:	d022      	beq.n	800a7a0 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01e      	beq.n	800a7a0 <poll_tcp+0xb4>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a76a:	f640 3269 	movw	r2, #2921	; 0xb69
 800a76e:	4293      	cmp	r3, r2
 800a770:	d916      	bls.n	800a7a0 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a77a:	2b07      	cmp	r3, #7
 800a77c:	d810      	bhi.n	800a7a0 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	7f1b      	ldrb	r3, [r3, #28]
 800a782:	f023 0310 	bic.w	r3, r3, #16
 800a786:	b2da      	uxtb	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <poll_tcp+0xb4>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	2200      	movs	r2, #0
 800a79a:	2102      	movs	r1, #2
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	08019f24 	.word	0x08019f24
 800a7b0:	0801a0d8 	.word	0x0801a0d8
 800a7b4:	08019fc4 	.word	0x08019fc4

0800a7b8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d106      	bne.n	800a7de <sent_tcp+0x26>
 800a7d0:	4b21      	ldr	r3, [pc, #132]	; (800a858 <sent_tcp+0xa0>)
 800a7d2:	f240 1293 	movw	r2, #403	; 0x193
 800a7d6:	4921      	ldr	r1, [pc, #132]	; (800a85c <sent_tcp+0xa4>)
 800a7d8:	4821      	ldr	r0, [pc, #132]	; (800a860 <sent_tcp+0xa8>)
 800a7da:	f00d f9c9 	bl	8017b70 <iprintf>

  if (conn) {
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d033      	beq.n	800a84c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	785b      	ldrb	r3, [r3, #1]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d104      	bne.n	800a7f6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	6978      	ldr	r0, [r7, #20]
 800a7f0:	f000 ff3c 	bl	800b66c <lwip_netconn_do_writemore>
 800a7f4:	e007      	b.n	800a806 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d103      	bne.n	800a806 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a7fe:	2101      	movs	r1, #1
 800a800:	6978      	ldr	r0, [r7, #20]
 800a802:	f000 fae3 	bl	800adcc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d01e      	beq.n	800a84c <sent_tcp+0x94>
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a816:	f640 3269 	movw	r2, #2921	; 0xb69
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d916      	bls.n	800a84c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a826:	2b07      	cmp	r3, #7
 800a828:	d810      	bhi.n	800a84c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	7f1b      	ldrb	r3, [r3, #28]
 800a82e:	f023 0310 	bic.w	r3, r3, #16
 800a832:	b2da      	uxtb	r2, r3
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d005      	beq.n	800a84c <sent_tcp+0x94>
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	2102      	movs	r1, #2
 800a848:	6978      	ldr	r0, [r7, #20]
 800a84a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	08019f24 	.word	0x08019f24
 800a85c:	0801a0d8 	.word	0x0801a0d8
 800a860:	08019fc4 	.word	0x08019fc4

0800a864 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d106      	bne.n	800a888 <err_tcp+0x24>
 800a87a:	4b5f      	ldr	r3, [pc, #380]	; (800a9f8 <err_tcp+0x194>)
 800a87c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a880:	495e      	ldr	r1, [pc, #376]	; (800a9fc <err_tcp+0x198>)
 800a882:	485f      	ldr	r0, [pc, #380]	; (800aa00 <err_tcp+0x19c>)
 800a884:	f00d f974 	bl	8017b70 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a888:	f005 fdd4 	bl	8010434 <sys_arch_protect>
 800a88c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	2200      	movs	r2, #0
 800a892:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	78fa      	ldrb	r2, [r7, #3]
 800a898:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	7f1b      	ldrb	r3, [r3, #28]
 800a89e:	f043 0301 	orr.w	r3, r3, #1
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	785b      	ldrb	r3, [r3, #1]
 800a8ac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a8b4:	69b8      	ldr	r0, [r7, #24]
 800a8b6:	f005 fdcb 	bl	8010450 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d005      	beq.n	800a8ce <err_tcp+0x6a>
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2104      	movs	r1, #4
 800a8ca:	69f8      	ldr	r0, [r7, #28]
 800a8cc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <err_tcp+0x7e>
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2100      	movs	r1, #0
 800a8de:	69f8      	ldr	r0, [r7, #28]
 800a8e0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d005      	beq.n	800a8f6 <err_tcp+0x92>
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	69f8      	ldr	r0, [r7, #28]
 800a8f4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a8f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fd82 	bl	800a404 <lwip_netconn_err_to_msg>
 800a900:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	3310      	adds	r3, #16
 800a906:	4618      	mov	r0, r3
 800a908:	f005 fc8a 	bl	8010220 <sys_mbox_valid>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3310      	adds	r3, #16
 800a916:	6939      	ldr	r1, [r7, #16]
 800a918:	4618      	mov	r0, r3
 800a91a:	f005 fc1f 	bl	801015c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	3314      	adds	r3, #20
 800a922:	4618      	mov	r0, r3
 800a924:	f005 fc7c 	bl	8010220 <sys_mbox_valid>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d005      	beq.n	800a93a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	3314      	adds	r3, #20
 800a932:	6939      	ldr	r1, [r7, #16]
 800a934:	4618      	mov	r0, r3
 800a936:	f005 fc11 	bl	801015c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d005      	beq.n	800a94c <err_tcp+0xe8>
 800a940:	7dfb      	ldrb	r3, [r7, #23]
 800a942:	2b04      	cmp	r3, #4
 800a944:	d002      	beq.n	800a94c <err_tcp+0xe8>
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d143      	bne.n	800a9d4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	7f1b      	ldrb	r3, [r3, #28]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	bf14      	ite	ne
 800a958:	2301      	movne	r3, #1
 800a95a:	2300      	moveq	r3, #0
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	7f1b      	ldrb	r3, [r3, #28]
 800a964:	f023 0304 	bic.w	r3, r3, #4
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d13b      	bne.n	800a9ec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <err_tcp+0x126>
 800a97c:	4b1e      	ldr	r3, [pc, #120]	; (800a9f8 <err_tcp+0x194>)
 800a97e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a982:	4920      	ldr	r1, [pc, #128]	; (800aa04 <err_tcp+0x1a0>)
 800a984:	481e      	ldr	r0, [pc, #120]	; (800aa00 <err_tcp+0x19c>)
 800a986:	f00d f8f3 	bl	8017b70 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d104      	bne.n	800a99a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	2200      	movs	r2, #0
 800a996:	711a      	strb	r2, [r3, #4]
 800a998:	e003      	b.n	800a9a2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a9ac:	68b8      	ldr	r0, [r7, #8]
 800a9ae:	f005 fcc5 	bl	801033c <sys_sem_valid>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <err_tcp+0x162>
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	; (800a9f8 <err_tcp+0x194>)
 800a9ba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a9be:	4912      	ldr	r1, [pc, #72]	; (800aa08 <err_tcp+0x1a4>)
 800a9c0:	480f      	ldr	r0, [pc, #60]	; (800aa00 <err_tcp+0x19c>)
 800a9c2:	f00d f8d5 	bl	8017b70 <iprintf>
      conn->current_msg = NULL;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a9cc:	68b8      	ldr	r0, [r7, #8]
 800a9ce:	f005 fc9b 	bl	8010308 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a9d2:	e00b      	b.n	800a9ec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d008      	beq.n	800a9ee <err_tcp+0x18a>
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <err_tcp+0x194>)
 800a9de:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a9e2:	490a      	ldr	r1, [pc, #40]	; (800aa0c <err_tcp+0x1a8>)
 800a9e4:	4806      	ldr	r0, [pc, #24]	; (800aa00 <err_tcp+0x19c>)
 800a9e6:	f00d f8c3 	bl	8017b70 <iprintf>
  }
}
 800a9ea:	e000      	b.n	800a9ee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a9ec:	bf00      	nop
}
 800a9ee:	bf00      	nop
 800a9f0:	3720      	adds	r7, #32
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	08019f24 	.word	0x08019f24
 800a9fc:	0801a0d8 	.word	0x0801a0d8
 800aa00:	08019fc4 	.word	0x08019fc4
 800aa04:	0801a0e8 	.word	0x0801a0e8
 800aa08:	0801a104 	.word	0x0801a104
 800aa0c:	0801a120 	.word	0x0801a120

0800aa10 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f007 f969 	bl	8011cf8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800aa26:	490a      	ldr	r1, [pc, #40]	; (800aa50 <setup_tcp+0x40>)
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f007 f977 	bl	8011d1c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800aa2e:	4909      	ldr	r1, [pc, #36]	; (800aa54 <setup_tcp+0x44>)
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f007 f997 	bl	8011d64 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800aa36:	2202      	movs	r2, #2
 800aa38:	4907      	ldr	r1, [pc, #28]	; (800aa58 <setup_tcp+0x48>)
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f007 f9f2 	bl	8011e24 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800aa40:	4906      	ldr	r1, [pc, #24]	; (800aa5c <setup_tcp+0x4c>)
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f007 f9b2 	bl	8011dac <tcp_err>
}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	0800a5e1 	.word	0x0800a5e1
 800aa54:	0800a7b9 	.word	0x0800a7b9
 800aa58:	0800a6ed 	.word	0x0800a6ed
 800aa5c:	0800a865 	.word	0x0800a865

0800aa60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d006      	beq.n	800aa84 <pcb_new+0x24>
 800aa76:	4b2b      	ldr	r3, [pc, #172]	; (800ab24 <pcb_new+0xc4>)
 800aa78:	f240 2265 	movw	r2, #613	; 0x265
 800aa7c:	492a      	ldr	r1, [pc, #168]	; (800ab28 <pcb_new+0xc8>)
 800aa7e:	482b      	ldr	r0, [pc, #172]	; (800ab2c <pcb_new+0xcc>)
 800aa80:	f00d f876 	bl	8017b70 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa8e:	2b10      	cmp	r3, #16
 800aa90:	d022      	beq.n	800aad8 <pcb_new+0x78>
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	d133      	bne.n	800aafe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681c      	ldr	r4, [r3, #0]
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f00c fe36 	bl	801770e <udp_new_ip_type>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d02a      	beq.n	800ab06 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b22      	cmp	r3, #34	; 0x22
 800aab8:	d104      	bne.n	800aac4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6858      	ldr	r0, [r3, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	4917      	ldr	r1, [pc, #92]	; (800ab30 <pcb_new+0xd0>)
 800aad2:	f00c fd9d 	bl	8017610 <udp_recv>
      }
      break;
 800aad6:	e016      	b.n	800ab06 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681c      	ldr	r4, [r3, #0]
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	4618      	mov	r0, r3
 800aae0:	f007 f8fc 	bl	8011cdc <tcp_new_ip_type>
 800aae4:	4603      	mov	r3, r0
 800aae6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00b      	beq.n	800ab0a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff ff8a 	bl	800aa10 <setup_tcp>
      }
      break;
 800aafc:	e005      	b.n	800ab0a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	22fa      	movs	r2, #250	; 0xfa
 800ab02:	711a      	strb	r2, [r3, #4]
      return;
 800ab04:	e00a      	b.n	800ab1c <pcb_new+0xbc>
      break;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <pcb_new+0xac>
      break;
 800ab0a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d102      	bne.n	800ab1c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	22ff      	movs	r2, #255	; 0xff
 800ab1a:	711a      	strb	r2, [r3, #4]
  }
}
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd90      	pop	{r4, r7, pc}
 800ab22:	bf00      	nop
 800ab24:	08019f24 	.word	0x08019f24
 800ab28:	0801a164 	.word	0x0801a164
 800ab2c:	08019fc4 	.word	0x08019fc4
 800ab30:	0800a4e5 	.word	0x0800a4e5

0800ab34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff ff85 	bl	800aa60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	6039      	str	r1, [r7, #0]
 800ab6a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ab70:	2007      	movs	r0, #7
 800ab72:	f004 f847 	bl	800ec04 <memp_malloc>
 800ab76:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <netconn_alloc+0x22>
    return NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e052      	b.n	800ac28 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	79fa      	ldrb	r2, [r7, #7]
 800ab8c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab9a:	2b10      	cmp	r3, #16
 800ab9c:	d004      	beq.n	800aba8 <netconn_alloc+0x48>
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d105      	bne.n	800abae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800aba2:	2306      	movs	r3, #6
 800aba4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800aba6:	e00a      	b.n	800abbe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800aba8:	2306      	movs	r3, #6
 800abaa:	617b      	str	r3, [r7, #20]
      break;
 800abac:	e007      	b.n	800abbe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800abae:	4b20      	ldr	r3, [pc, #128]	; (800ac30 <netconn_alloc+0xd0>)
 800abb0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800abb4:	491f      	ldr	r1, [pc, #124]	; (800ac34 <netconn_alloc+0xd4>)
 800abb6:	4820      	ldr	r0, [pc, #128]	; (800ac38 <netconn_alloc+0xd8>)
 800abb8:	f00c ffda 	bl	8017b70 <iprintf>
      goto free_and_return;
 800abbc:	e02f      	b.n	800ac1e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3310      	adds	r3, #16
 800abc2:	6979      	ldr	r1, [r7, #20]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f005 fa9d 	bl	8010104 <sys_mbox_new>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d125      	bne.n	800ac1c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	330c      	adds	r3, #12
 800abd4:	2100      	movs	r1, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f005 fb40 	bl	801025c <sys_sem_new>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d005      	beq.n	800abee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3310      	adds	r3, #16
 800abe6:	4618      	mov	r0, r3
 800abe8:	f005 faa6 	bl	8010138 <sys_mbox_free>
    goto free_and_return;
 800abec:	e017      	b.n	800ac1e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3314      	adds	r3, #20
 800abf2:	4618      	mov	r0, r3
 800abf4:	f005 fb25 	bl	8010242 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	7cfa      	ldrb	r2, [r7, #19]
 800ac16:	771a      	strb	r2, [r3, #28]
  return conn;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	e005      	b.n	800ac28 <netconn_alloc+0xc8>
    goto free_and_return;
 800ac1c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ac1e:	68f9      	ldr	r1, [r7, #12]
 800ac20:	2007      	movs	r0, #7
 800ac22:	f004 f865 	bl	800ecf0 <memp_free>
  return NULL;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	08019f24 	.word	0x08019f24
 800ac34:	0801a184 	.word	0x0801a184
 800ac38:	08019fc4 	.word	0x08019fc4

0800ac3c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <netconn_free+0x1e>
 800ac4c:	4b1b      	ldr	r3, [pc, #108]	; (800acbc <netconn_free+0x80>)
 800ac4e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ac52:	491b      	ldr	r1, [pc, #108]	; (800acc0 <netconn_free+0x84>)
 800ac54:	481b      	ldr	r0, [pc, #108]	; (800acc4 <netconn_free+0x88>)
 800ac56:	f00c ff8b 	bl	8017b70 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3310      	adds	r3, #16
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f005 fade 	bl	8010220 <sys_mbox_valid>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d006      	beq.n	800ac78 <netconn_free+0x3c>
 800ac6a:	4b14      	ldr	r3, [pc, #80]	; (800acbc <netconn_free+0x80>)
 800ac6c:	f240 3223 	movw	r2, #803	; 0x323
 800ac70:	4915      	ldr	r1, [pc, #84]	; (800acc8 <netconn_free+0x8c>)
 800ac72:	4814      	ldr	r0, [pc, #80]	; (800acc4 <netconn_free+0x88>)
 800ac74:	f00c ff7c 	bl	8017b70 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3314      	adds	r3, #20
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f005 facf 	bl	8010220 <sys_mbox_valid>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d006      	beq.n	800ac96 <netconn_free+0x5a>
 800ac88:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <netconn_free+0x80>)
 800ac8a:	f240 3226 	movw	r2, #806	; 0x326
 800ac8e:	490f      	ldr	r1, [pc, #60]	; (800accc <netconn_free+0x90>)
 800ac90:	480c      	ldr	r0, [pc, #48]	; (800acc4 <netconn_free+0x88>)
 800ac92:	f00c ff6d 	bl	8017b70 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	330c      	adds	r3, #12
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f005 fb41 	bl	8010322 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	330c      	adds	r3, #12
 800aca4:	4618      	mov	r0, r3
 800aca6:	f005 fb5a 	bl	801035e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	2007      	movs	r0, #7
 800acae:	f004 f81f 	bl	800ecf0 <memp_free>
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	08019f24 	.word	0x08019f24
 800acc0:	0801a1ac 	.word	0x0801a1ac
 800acc4:	08019fc4 	.word	0x08019fc4
 800acc8:	0801a1dc 	.word	0x0801a1dc
 800accc:	0801a218 	.word	0x0801a218

0800acd0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3310      	adds	r3, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	f005 fa9f 	bl	8010220 <sys_mbox_valid>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d02f      	beq.n	800ad48 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ace8:	e018      	b.n	800ad1c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acf2:	2b10      	cmp	r3, #16
 800acf4:	d10e      	bne.n	800ad14 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f107 020f 	add.w	r2, r7, #15
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fbb6 	bl	800a470 <lwip_netconn_is_err_msg>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d108      	bne.n	800ad1c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f004 febd 	bl	800fa8c <pbuf_free>
 800ad12:	e003      	b.n	800ad1c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f004 f814 	bl	800ed44 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3310      	adds	r3, #16
 800ad20:	f107 0210 	add.w	r2, r7, #16
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f005 fa63 	bl	80101f2 <sys_arch_mbox_tryfetch>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d1da      	bne.n	800acea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3310      	adds	r3, #16
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f005 f9fd 	bl	8010138 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3310      	adds	r3, #16
 800ad42:	4618      	mov	r0, r3
 800ad44:	f005 fa7d 	bl	8010242 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3314      	adds	r3, #20
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f005 fa67 	bl	8010220 <sys_mbox_valid>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d034      	beq.n	800adc2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ad58:	e01d      	b.n	800ad96 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f107 020e 	add.w	r2, r7, #14
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fb84 	bl	800a470 <lwip_netconn_is_err_msg>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d113      	bne.n	800ad96 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ad72:	6978      	ldr	r0, [r7, #20]
 800ad74:	f7ff ffac 	bl	800acd0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d007      	beq.n	800ad90 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f005 fecf 	bl	8010b28 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ad90:	6978      	ldr	r0, [r7, #20]
 800ad92:	f7ff ff53 	bl	800ac3c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3314      	adds	r3, #20
 800ad9a:	f107 0210 	add.w	r2, r7, #16
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f005 fa26 	bl	80101f2 <sys_arch_mbox_tryfetch>
 800ada6:	4603      	mov	r3, r0
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adac:	d1d5      	bne.n	800ad5a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3314      	adds	r3, #20
 800adb2:	4618      	mov	r0, r3
 800adb4:	f005 f9c0 	bl	8010138 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3314      	adds	r3, #20
 800adbc:	4618      	mov	r0, r3
 800adbe:	f005 fa40 	bl	8010242 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800adc2:	bf00      	nop
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <lwip_netconn_do_close_internal+0x24>
 800ade2:	4b87      	ldr	r3, [pc, #540]	; (800b000 <lwip_netconn_do_close_internal+0x234>)
 800ade4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800ade8:	4986      	ldr	r1, [pc, #536]	; (800b004 <lwip_netconn_do_close_internal+0x238>)
 800adea:	4887      	ldr	r0, [pc, #540]	; (800b008 <lwip_netconn_do_close_internal+0x23c>)
 800adec:	f00c fec0 	bl	8017b70 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adf8:	2b10      	cmp	r3, #16
 800adfa:	d006      	beq.n	800ae0a <lwip_netconn_do_close_internal+0x3e>
 800adfc:	4b80      	ldr	r3, [pc, #512]	; (800b000 <lwip_netconn_do_close_internal+0x234>)
 800adfe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ae02:	4982      	ldr	r1, [pc, #520]	; (800b00c <lwip_netconn_do_close_internal+0x240>)
 800ae04:	4880      	ldr	r0, [pc, #512]	; (800b008 <lwip_netconn_do_close_internal+0x23c>)
 800ae06:	f00c feb3 	bl	8017b70 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d006      	beq.n	800ae20 <lwip_netconn_do_close_internal+0x54>
 800ae12:	4b7b      	ldr	r3, [pc, #492]	; (800b000 <lwip_netconn_do_close_internal+0x234>)
 800ae14:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ae18:	497d      	ldr	r1, [pc, #500]	; (800b010 <lwip_netconn_do_close_internal+0x244>)
 800ae1a:	487b      	ldr	r0, [pc, #492]	; (800b008 <lwip_netconn_do_close_internal+0x23c>)
 800ae1c:	f00c fea8 	bl	8017b70 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <lwip_netconn_do_close_internal+0x6a>
 800ae28:	4b75      	ldr	r3, [pc, #468]	; (800b000 <lwip_netconn_do_close_internal+0x234>)
 800ae2a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ae2e:	4979      	ldr	r1, [pc, #484]	; (800b014 <lwip_netconn_do_close_internal+0x248>)
 800ae30:	4875      	ldr	r0, [pc, #468]	; (800b008 <lwip_netconn_do_close_internal+0x23c>)
 800ae32:	f00c fe9d 	bl	8017b70 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <lwip_netconn_do_close_internal+0x80>
 800ae3e:	4b70      	ldr	r3, [pc, #448]	; (800b000 <lwip_netconn_do_close_internal+0x234>)
 800ae40:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ae44:	4974      	ldr	r1, [pc, #464]	; (800b018 <lwip_netconn_do_close_internal+0x24c>)
 800ae46:	4870      	ldr	r0, [pc, #448]	; (800b008 <lwip_netconn_do_close_internal+0x23c>)
 800ae48:	f00c fe92 	bl	8017b70 <iprintf>

  tpcb = conn->pcb.tcp;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	7a1b      	ldrb	r3, [r3, #8]
 800ae58:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d102      	bne.n	800ae76 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ae70:	2301      	movs	r3, #1
 800ae72:	75bb      	strb	r3, [r7, #22]
 800ae74:	e01f      	b.n	800aeb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00e      	beq.n	800ae9a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ae80:	2b05      	cmp	r3, #5
 800ae82:	d007      	beq.n	800ae94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ae88:	2b06      	cmp	r3, #6
 800ae8a:	d003      	beq.n	800ae94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d102      	bne.n	800ae9a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ae94:	2301      	movs	r3, #1
 800ae96:	75bb      	strb	r3, [r7, #22]
 800ae98:	e00d      	b.n	800aeb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ae9a:	7b7b      	ldrb	r3, [r7, #13]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d008      	beq.n	800aeb2 <lwip_netconn_do_close_internal+0xe6>
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	8b5b      	ldrh	r3, [r3, #26]
 800aea4:	f003 0310 	and.w	r3, r3, #16
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800aeac:	2301      	movs	r3, #1
 800aeae:	75bb      	strb	r3, [r7, #22]
 800aeb0:	e001      	b.n	800aeb6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800aeb6:	7dbb      	ldrb	r3, [r7, #22]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800aebc:	2100      	movs	r1, #0
 800aebe:	6938      	ldr	r0, [r7, #16]
 800aec0:	f006 ff1a 	bl	8011cf8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	7d1b      	ldrb	r3, [r3, #20]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d104      	bne.n	800aed6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800aecc:	2100      	movs	r1, #0
 800aece:	6938      	ldr	r0, [r7, #16]
 800aed0:	f006 ff90 	bl	8011df4 <tcp_accept>
 800aed4:	e01d      	b.n	800af12 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800aedc:	2100      	movs	r1, #0
 800aede:	6938      	ldr	r0, [r7, #16]
 800aee0:	f006 ff1c 	bl	8011d1c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800aee4:	2100      	movs	r1, #0
 800aee6:	6938      	ldr	r0, [r7, #16]
 800aee8:	f006 ff84 	bl	8011df4 <tcp_accept>
    }
    if (shut_tx) {
 800aeec:	7b7b      	ldrb	r3, [r7, #13]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800aef2:	2100      	movs	r1, #0
 800aef4:	6938      	ldr	r0, [r7, #16]
 800aef6:	f006 ff35 	bl	8011d64 <tcp_sent>
    }
    if (shut_close) {
 800aefa:	7dbb      	ldrb	r3, [r7, #22]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d008      	beq.n	800af12 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800af00:	2200      	movs	r2, #0
 800af02:	2100      	movs	r1, #0
 800af04:	6938      	ldr	r0, [r7, #16]
 800af06:	f006 ff8d 	bl	8011e24 <tcp_poll>
      tcp_err(tpcb, NULL);
 800af0a:	2100      	movs	r1, #0
 800af0c:	6938      	ldr	r0, [r7, #16]
 800af0e:	f006 ff4d 	bl	8011dac <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800af12:	7dbb      	ldrb	r3, [r7, #22]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800af18:	6938      	ldr	r0, [r7, #16]
 800af1a:	f005 fcb9 	bl	8010890 <tcp_close>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]
 800af22:	e007      	b.n	800af34 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	7b7a      	ldrb	r2, [r7, #13]
 800af28:	4619      	mov	r1, r3
 800af2a:	6938      	ldr	r0, [r7, #16]
 800af2c:	f005 fcde 	bl	80108ec <tcp_shutdown>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800af34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800af3c:	2301      	movs	r3, #1
 800af3e:	757b      	strb	r3, [r7, #21]
 800af40:	e016      	b.n	800af70 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800af42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d10f      	bne.n	800af6c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	7a5b      	ldrb	r3, [r3, #9]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10c      	bne.n	800af70 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800af56:	2301      	movs	r3, #1
 800af58:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800af5a:	7dbb      	ldrb	r3, [r7, #22]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d007      	beq.n	800af70 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800af60:	6938      	ldr	r0, [r7, #16]
 800af62:	f005 fde1 	bl	8010b28 <tcp_abort>
          err = ERR_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	75fb      	strb	r3, [r7, #23]
 800af6a:	e001      	b.n	800af70 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800af6c:	2301      	movs	r3, #1
 800af6e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800af70:	7d7b      	ldrb	r3, [r7, #21]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d052      	beq.n	800b01c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	330c      	adds	r3, #12
 800af7e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	7dfa      	ldrb	r2, [r7, #23]
 800af86:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800af94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d129      	bne.n	800aff0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800af9c:	7dbb      	ldrb	r3, [r7, #22]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00c      	beq.n	800afbc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b00      	cmp	r3, #0
 800afae:	d005      	beq.n	800afbc <lwip_netconn_do_close_internal+0x1f0>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2200      	movs	r2, #0
 800afb6:	2104      	movs	r1, #4
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
      }
      if (shut_rx) {
 800afbc:	7bbb      	ldrb	r3, [r7, #14]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d005      	beq.n	800afd6 <lwip_netconn_do_close_internal+0x20a>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	2200      	movs	r2, #0
 800afd0:	2100      	movs	r1, #0
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
      }
      if (shut_tx) {
 800afd6:	7b7b      	ldrb	r3, [r7, #13]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d009      	beq.n	800aff0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d005      	beq.n	800aff0 <lwip_netconn_do_close_internal+0x224>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	2200      	movs	r2, #0
 800afea:	2102      	movs	r1, #2
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aff0:	78fb      	ldrb	r3, [r7, #3]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f005 f986 	bl	8010308 <sys_sem_signal>
    }
    return ERR_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	e03c      	b.n	800b07a <lwip_netconn_do_close_internal+0x2ae>
 800b000:	08019f24 	.word	0x08019f24
 800b004:	0801a254 	.word	0x0801a254
 800b008:	08019fc4 	.word	0x08019fc4
 800b00c:	0801a264 	.word	0x0801a264
 800b010:	0801a284 	.word	0x0801a284
 800b014:	0801a2a8 	.word	0x0801a2a8
 800b018:	0801a0e8 	.word	0x0801a0e8
  }
  if (!close_finished) {
 800b01c:	7d7b      	ldrb	r3, [r7, #21]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d11e      	bne.n	800b060 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	7d1b      	ldrb	r3, [r3, #20]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d106      	bne.n	800b038 <lwip_netconn_do_close_internal+0x26c>
 800b02a:	4b16      	ldr	r3, [pc, #88]	; (800b084 <lwip_netconn_do_close_internal+0x2b8>)
 800b02c:	f240 4241 	movw	r2, #1089	; 0x441
 800b030:	4915      	ldr	r1, [pc, #84]	; (800b088 <lwip_netconn_do_close_internal+0x2bc>)
 800b032:	4816      	ldr	r0, [pc, #88]	; (800b08c <lwip_netconn_do_close_internal+0x2c0>)
 800b034:	f00c fd9c 	bl	8017b70 <iprintf>
    if (shut_tx) {
 800b038:	7b7b      	ldrb	r3, [r7, #13]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b03e:	4914      	ldr	r1, [pc, #80]	; (800b090 <lwip_netconn_do_close_internal+0x2c4>)
 800b040:	6938      	ldr	r0, [r7, #16]
 800b042:	f006 fe8f 	bl	8011d64 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b046:	2201      	movs	r2, #1
 800b048:	4912      	ldr	r1, [pc, #72]	; (800b094 <lwip_netconn_do_close_internal+0x2c8>)
 800b04a:	6938      	ldr	r0, [r7, #16]
 800b04c:	f006 feea 	bl	8011e24 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b050:	4911      	ldr	r1, [pc, #68]	; (800b098 <lwip_netconn_do_close_internal+0x2cc>)
 800b052:	6938      	ldr	r0, [r7, #16]
 800b054:	f006 feaa 	bl	8011dac <tcp_err>
    tcp_arg(tpcb, conn);
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	6938      	ldr	r0, [r7, #16]
 800b05c:	f006 fe4c 	bl	8011cf8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b060:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <lwip_netconn_do_close_internal+0x2aa>
 800b068:	4b06      	ldr	r3, [pc, #24]	; (800b084 <lwip_netconn_do_close_internal+0x2b8>)
 800b06a:	f240 424d 	movw	r2, #1101	; 0x44d
 800b06e:	490b      	ldr	r1, [pc, #44]	; (800b09c <lwip_netconn_do_close_internal+0x2d0>)
 800b070:	4806      	ldr	r0, [pc, #24]	; (800b08c <lwip_netconn_do_close_internal+0x2c0>)
 800b072:	f00c fd7d 	bl	8017b70 <iprintf>
  return err;
 800b076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	08019f24 	.word	0x08019f24
 800b088:	0801a2bc 	.word	0x0801a2bc
 800b08c:	08019fc4 	.word	0x08019fc4
 800b090:	0800a7b9 	.word	0x0800a7b9
 800b094:	0800a6ed 	.word	0x0800a6ed
 800b098:	0800a865 	.word	0x0800a865
 800b09c:	0801a2e0 	.word	0x0801a2e0

0800b0a0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	785b      	ldrb	r3, [r3, #1]
 800b0b2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b0b4:	7afb      	ldrb	r3, [r7, #11]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00d      	beq.n	800b0d6 <lwip_netconn_do_delconn+0x36>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0c4:	2b10      	cmp	r3, #16
 800b0c6:	d006      	beq.n	800b0d6 <lwip_netconn_do_delconn+0x36>
 800b0c8:	4b5f      	ldr	r3, [pc, #380]	; (800b248 <lwip_netconn_do_delconn+0x1a8>)
 800b0ca:	f240 425e 	movw	r2, #1118	; 0x45e
 800b0ce:	495f      	ldr	r1, [pc, #380]	; (800b24c <lwip_netconn_do_delconn+0x1ac>)
 800b0d0:	485f      	ldr	r0, [pc, #380]	; (800b250 <lwip_netconn_do_delconn+0x1b0>)
 800b0d2:	f00c fd4d 	bl	8017b70 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b0d6:	7afb      	ldrb	r3, [r7, #11]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d005      	beq.n	800b0e8 <lwip_netconn_do_delconn+0x48>
 800b0dc:	7afb      	ldrb	r3, [r7, #11]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d002      	beq.n	800b0e8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d109      	bne.n	800b0fc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	d10a      	bne.n	800b104 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	7f1b      	ldrb	r3, [r3, #28]
 800b0f4:	f003 0304 	and.w	r3, r3, #4
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	22fb      	movs	r2, #251	; 0xfb
 800b100:	711a      	strb	r2, [r3, #4]
 800b102:	e095      	b.n	800b230 <lwip_netconn_do_delconn+0x190>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b104:	7afb      	ldrb	r3, [r7, #11]
 800b106:	2b03      	cmp	r3, #3
 800b108:	d10d      	bne.n	800b126 <lwip_netconn_do_delconn+0x86>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	7f1b      	ldrb	r3, [r3, #28]
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <lwip_netconn_do_delconn+0x86>
 800b118:	4b4b      	ldr	r3, [pc, #300]	; (800b248 <lwip_netconn_do_delconn+0x1a8>)
 800b11a:	f240 427a 	movw	r2, #1146	; 0x47a
 800b11e:	494d      	ldr	r1, [pc, #308]	; (800b254 <lwip_netconn_do_delconn+0x1b4>)
 800b120:	484b      	ldr	r0, [pc, #300]	; (800b250 <lwip_netconn_do_delconn+0x1b0>)
 800b122:	f00c fd25 	bl	8017b70 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fdcd 	bl	800acd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d05d      	beq.n	800b1fc <lwip_netconn_do_delconn+0x15c>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b14a:	2b10      	cmp	r3, #16
 800b14c:	d00d      	beq.n	800b16a <lwip_netconn_do_delconn+0xca>
 800b14e:	2b20      	cmp	r3, #32
 800b150:	d14f      	bne.n	800b1f2 <lwip_netconn_do_delconn+0x152>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	4618      	mov	r0, r3
 800b164:	f00c fa76 	bl	8017654 <udp_remove>
          break;
 800b168:	e044      	b.n	800b1f4 <lwip_netconn_do_delconn+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d006      	beq.n	800b182 <lwip_netconn_do_delconn+0xe2>
 800b174:	4b34      	ldr	r3, [pc, #208]	; (800b248 <lwip_netconn_do_delconn+0x1a8>)
 800b176:	f240 4294 	movw	r2, #1172	; 0x494
 800b17a:	4937      	ldr	r1, [pc, #220]	; (800b258 <lwip_netconn_do_delconn+0x1b8>)
 800b17c:	4834      	ldr	r0, [pc, #208]	; (800b250 <lwip_netconn_do_delconn+0x1b0>)
 800b17e:	f00c fcf7 	bl	8017b70 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2204      	movs	r2, #4
 800b188:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2203      	movs	r2, #3
 800b18e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fe14 	bl	800adcc <lwip_netconn_do_close_internal>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d049      	beq.n	800b23e <lwip_netconn_do_delconn+0x19e>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	785b      	ldrb	r3, [r3, #1]
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d006      	beq.n	800b1c2 <lwip_netconn_do_delconn+0x122>
 800b1b4:	4b24      	ldr	r3, [pc, #144]	; (800b248 <lwip_netconn_do_delconn+0x1a8>)
 800b1b6:	f240 429a 	movw	r2, #1178	; 0x49a
 800b1ba:	4928      	ldr	r1, [pc, #160]	; (800b25c <lwip_netconn_do_delconn+0x1bc>)
 800b1bc:	4824      	ldr	r0, [pc, #144]	; (800b250 <lwip_netconn_do_delconn+0x1b0>)
 800b1be:	f00c fcd7 	bl	8017b70 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b1c2:	f7fa fe27 	bl	8005e14 <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	330c      	adds	r3, #12
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f005 f869 	bl	80102a6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b1d4:	f7fa fe0e 	bl	8005df4 <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	785b      	ldrb	r3, [r3, #1]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d02d      	beq.n	800b23e <lwip_netconn_do_delconn+0x19e>
 800b1e2:	4b19      	ldr	r3, [pc, #100]	; (800b248 <lwip_netconn_do_delconn+0x1a8>)
 800b1e4:	f240 429e 	movw	r2, #1182	; 0x49e
 800b1e8:	491c      	ldr	r1, [pc, #112]	; (800b25c <lwip_netconn_do_delconn+0x1bc>)
 800b1ea:	4819      	ldr	r0, [pc, #100]	; (800b250 <lwip_netconn_do_delconn+0x1b0>)
 800b1ec:	f00c fcc0 	bl	8017b70 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b1f0:	e025      	b.n	800b23e <lwip_netconn_do_delconn+0x19e>
#endif /* LWIP_TCP */
        default:
          break;
 800b1f2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <lwip_netconn_do_delconn+0x176>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	6810      	ldr	r0, [r2, #0]
 800b210:	2200      	movs	r2, #0
 800b212:	2100      	movs	r1, #0
 800b214:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <lwip_netconn_do_delconn+0x190>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	6810      	ldr	r0, [r2, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	2102      	movs	r1, #2
 800b22e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	330c      	adds	r3, #12
 800b236:	4618      	mov	r0, r3
 800b238:	f005 f880 	bl	801033c <sys_sem_valid>
 800b23c:	e000      	b.n	800b240 <lwip_netconn_do_delconn+0x1a0>
          return;
 800b23e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	08019f24 	.word	0x08019f24
 800b24c:	0801a2f0 	.word	0x0801a2f0
 800b250:	08019fc4 	.word	0x08019fc4
 800b254:	0801a304 	.word	0x0801a304
 800b258:	0801a324 	.word	0x0801a324
 800b25c:	0801a340 	.word	0x0801a340

0800b260 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d025      	beq.n	800b2c2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b280:	2b10      	cmp	r3, #16
 800b282:	d00e      	beq.n	800b2a2 <lwip_netconn_do_bind+0x42>
 800b284:	2b20      	cmp	r3, #32
 800b286:	d119      	bne.n	800b2bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6858      	ldr	r0, [r3, #4]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6899      	ldr	r1, [r3, #8]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	899b      	ldrh	r3, [r3, #12]
 800b296:	461a      	mov	r2, r3
 800b298:	f00c f8c0 	bl	801741c <udp_bind>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
        break;
 800b2a0:	e011      	b.n	800b2c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6858      	ldr	r0, [r3, #4]
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	6899      	ldr	r1, [r3, #8]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	899b      	ldrh	r3, [r3, #12]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	f005 fc45 	bl	8010b40 <tcp_bind>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73fb      	strb	r3, [r7, #15]
        break;
 800b2ba:	e004      	b.n	800b2c6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b2bc:	23fa      	movs	r3, #250	; 0xfa
 800b2be:	73fb      	strb	r3, [r7, #15]
        break;
 800b2c0:	e001      	b.n	800b2c6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b2c2:	23fa      	movs	r3, #250	; 0xfa
 800b2c4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	7bfa      	ldrb	r2, [r7, #15]
 800b2ca:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b2cc:	bf00      	nop
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800b2f0:	f06f 0305 	mvn.w	r3, #5
 800b2f4:	e070      	b.n	800b3d8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d006      	beq.n	800b30c <lwip_netconn_do_connected+0x38>
 800b2fe:	4b38      	ldr	r3, [pc, #224]	; (800b3e0 <lwip_netconn_do_connected+0x10c>)
 800b300:	f240 5223 	movw	r2, #1315	; 0x523
 800b304:	4937      	ldr	r1, [pc, #220]	; (800b3e4 <lwip_netconn_do_connected+0x110>)
 800b306:	4838      	ldr	r0, [pc, #224]	; (800b3e8 <lwip_netconn_do_connected+0x114>)
 800b308:	f00c fc32 	bl	8017b70 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10c      	bne.n	800b32e <lwip_netconn_do_connected+0x5a>
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	7f1b      	ldrb	r3, [r3, #28]
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d106      	bne.n	800b32e <lwip_netconn_do_connected+0x5a>
 800b320:	4b2f      	ldr	r3, [pc, #188]	; (800b3e0 <lwip_netconn_do_connected+0x10c>)
 800b322:	f240 5224 	movw	r2, #1316	; 0x524
 800b326:	4931      	ldr	r1, [pc, #196]	; (800b3ec <lwip_netconn_do_connected+0x118>)
 800b328:	482f      	ldr	r0, [pc, #188]	; (800b3e8 <lwip_netconn_do_connected+0x114>)
 800b32a:	f00c fc21 	bl	8017b70 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d008      	beq.n	800b348 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	79fa      	ldrb	r2, [r7, #7]
 800b33c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	330c      	adds	r3, #12
 800b346:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b350:	2b10      	cmp	r3, #16
 800b352:	d106      	bne.n	800b362 <lwip_netconn_do_connected+0x8e>
 800b354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d102      	bne.n	800b362 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800b35c:	69b8      	ldr	r0, [r7, #24]
 800b35e:	f7ff fb57 	bl	800aa10 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	7f1b      	ldrb	r3, [r3, #28]
 800b366:	f003 0304 	and.w	r3, r3, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bf0c      	ite	eq
 800b36e:	2301      	moveq	r3, #1
 800b370:	2300      	movne	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	7f1b      	ldrb	r3, [r3, #28]
 800b37a:	f023 0304 	bic.w	r3, r3, #4
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <lwip_netconn_do_connected+0xbc>
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10c      	bne.n	800b3aa <lwip_netconn_do_connected+0xd6>
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d102      	bne.n	800b39c <lwip_netconn_do_connected+0xc8>
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <lwip_netconn_do_connected+0xd6>
 800b39c:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <lwip_netconn_do_connected+0x10c>)
 800b39e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800b3a2:	4913      	ldr	r1, [pc, #76]	; (800b3f0 <lwip_netconn_do_connected+0x11c>)
 800b3a4:	4810      	ldr	r0, [pc, #64]	; (800b3e8 <lwip_netconn_do_connected+0x114>)
 800b3a6:	f00c fbe3 	bl	8017b70 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <lwip_netconn_do_connected+0xf6>
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2102      	movs	r1, #2
 800b3c6:	69b8      	ldr	r0, [r7, #24]
 800b3c8:	4798      	blx	r3

  if (was_blocking) {
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800b3d0:	69f8      	ldr	r0, [r7, #28]
 800b3d2:	f004 ff99 	bl	8010308 <sys_sem_signal>
  }
  return ERR_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3720      	adds	r7, #32
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08019f24 	.word	0x08019f24
 800b3e4:	0801a348 	.word	0x0801a348
 800b3e8:	08019fc4 	.word	0x08019fc4
 800b3ec:	0801a368 	.word	0x0801a368
 800b3f0:	0801a3a8 	.word	0x0801a3a8

0800b3f4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800b40a:	23f1      	movs	r3, #241	; 0xf1
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e099      	b.n	800b544 <lwip_netconn_do_connect+0x150>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b41a:	2b10      	cmp	r3, #16
 800b41c:	d00f      	beq.n	800b43e <lwip_netconn_do_connect+0x4a>
 800b41e:	2b20      	cmp	r3, #32
 800b420:	f040 8085 	bne.w	800b52e <lwip_netconn_do_connect+0x13a>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6858      	ldr	r0, [r3, #4]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	6899      	ldr	r1, [r3, #8]
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	899b      	ldrh	r3, [r3, #12]
 800b432:	461a      	mov	r2, r3
 800b434:	f00c f87c 	bl	8017530 <udp_connect>
 800b438:	4603      	mov	r3, r0
 800b43a:	75fb      	strb	r3, [r7, #23]
        break;
 800b43c:	e082      	b.n	800b544 <lwip_netconn_do_connect+0x150>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	785b      	ldrb	r3, [r3, #1]
 800b444:	2b03      	cmp	r3, #3
 800b446:	d102      	bne.n	800b44e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800b448:	23f7      	movs	r3, #247	; 0xf7
 800b44a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800b44c:	e079      	b.n	800b542 <lwip_netconn_do_connect+0x14e>
        } else if (msg->conn->state != NETCONN_NONE) {
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800b458:	23f6      	movs	r3, #246	; 0xf6
 800b45a:	75fb      	strb	r3, [r7, #23]
        break;
 800b45c:	e071      	b.n	800b542 <lwip_netconn_do_connect+0x14e>
          setup_tcp(msg->conn);
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fad4 	bl	800aa10 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6858      	ldr	r0, [r3, #4]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	6899      	ldr	r1, [r3, #8]
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	899a      	ldrh	r2, [r3, #12]
 800b476:	4b37      	ldr	r3, [pc, #220]	; (800b554 <lwip_netconn_do_connect+0x160>)
 800b478:	f005 fcf0 	bl	8010e5c <tcp_connect>
 800b47c:	4603      	mov	r3, r0
 800b47e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800b480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d15c      	bne.n	800b542 <lwip_netconn_do_connect+0x14e>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	7f1b      	ldrb	r3, [r3, #28]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	bf14      	ite	ne
 800b496:	2301      	movne	r3, #1
 800b498:	2300      	moveq	r3, #0
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2203      	movs	r2, #3
 800b4a4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d009      	beq.n	800b4c0 <lwip_netconn_do_connect+0xcc>
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	7f1a      	ldrb	r2, [r3, #28]
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 0204 	orr.w	r2, r2, #4
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	771a      	strb	r2, [r3, #28]
 800b4be:	e008      	b.n	800b4d2 <lwip_netconn_do_connect+0xde>
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	7f1a      	ldrb	r2, [r3, #28]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0204 	bic.w	r2, r2, #4
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800b4d8:	23fb      	movs	r3, #251	; 0xfb
 800b4da:	75fb      	strb	r3, [r7, #23]
        break;
 800b4dc:	e031      	b.n	800b542 <lwip_netconn_do_connect+0x14e>
              msg->conn->current_msg = msg;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	785b      	ldrb	r3, [r3, #1]
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d006      	beq.n	800b4fe <lwip_netconn_do_connect+0x10a>
 800b4f0:	4b19      	ldr	r3, [pc, #100]	; (800b558 <lwip_netconn_do_connect+0x164>)
 800b4f2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b4f6:	4919      	ldr	r1, [pc, #100]	; (800b55c <lwip_netconn_do_connect+0x168>)
 800b4f8:	4819      	ldr	r0, [pc, #100]	; (800b560 <lwip_netconn_do_connect+0x16c>)
 800b4fa:	f00c fb39 	bl	8017b70 <iprintf>
              UNLOCK_TCPIP_CORE();
 800b4fe:	f7fa fc89 	bl	8005e14 <sys_unlock_tcpip_core>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	330c      	adds	r3, #12
 800b508:	2100      	movs	r1, #0
 800b50a:	4618      	mov	r0, r3
 800b50c:	f004 fecb 	bl	80102a6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b510:	f7fa fc70 	bl	8005df4 <sys_lock_tcpip_core>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	785b      	ldrb	r3, [r3, #1]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d116      	bne.n	800b54c <lwip_netconn_do_connect+0x158>
 800b51e:	4b0e      	ldr	r3, [pc, #56]	; (800b558 <lwip_netconn_do_connect+0x164>)
 800b520:	f240 5274 	movw	r2, #1396	; 0x574
 800b524:	490d      	ldr	r1, [pc, #52]	; (800b55c <lwip_netconn_do_connect+0x168>)
 800b526:	480e      	ldr	r0, [pc, #56]	; (800b560 <lwip_netconn_do_connect+0x16c>)
 800b528:	f00c fb22 	bl	8017b70 <iprintf>
              return;
 800b52c:	e00e      	b.n	800b54c <lwip_netconn_do_connect+0x158>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b52e:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <lwip_netconn_do_connect+0x164>)
 800b530:	f240 527d 	movw	r2, #1405	; 0x57d
 800b534:	490b      	ldr	r1, [pc, #44]	; (800b564 <lwip_netconn_do_connect+0x170>)
 800b536:	480a      	ldr	r0, [pc, #40]	; (800b560 <lwip_netconn_do_connect+0x16c>)
 800b538:	f00c fb1a 	bl	8017b70 <iprintf>
 800b53c:	23fa      	movs	r3, #250	; 0xfa
 800b53e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b540:	e000      	b.n	800b544 <lwip_netconn_do_connect+0x150>
        break;
 800b542:	bf00      	nop
    }
  }
  msg->err = err;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	7dfa      	ldrb	r2, [r7, #23]
 800b548:	711a      	strb	r2, [r3, #4]
 800b54a:	e000      	b.n	800b54e <lwip_netconn_do_connect+0x15a>
              return;
 800b54c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	0800b2d5 	.word	0x0800b2d5
 800b558:	08019f24 	.word	0x08019f24
 800b55c:	0801a340 	.word	0x0801a340
 800b560:	08019fc4 	.word	0x08019fc4
 800b564:	0801a3c8 	.word	0x0801a3c8

0800b568 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe ff27 	bl	800a3cc <netconn_err>
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d134      	bne.n	800b5f4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d02d      	beq.n	800b5f0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d123      	bne.n	800b5ea <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10c      	bne.n	800b5c6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f00b fd42 	bl	8017044 <udp_send>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b5c4:	e016      	b.n	800b5f4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6858      	ldr	r0, [r3, #4]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	6819      	ldr	r1, [r3, #0]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f103 0208 	add.w	r2, r3, #8
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	899b      	ldrh	r3, [r3, #12]
 800b5e0:	f00b fd64 	bl	80170ac <udp_sendto>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
          break;
 800b5e8:	e004      	b.n	800b5f4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b5ea:	23f5      	movs	r3, #245	; 0xf5
 800b5ec:	73fb      	strb	r3, [r7, #15]
          break;
 800b5ee:	e001      	b.n	800b5f4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b5f0:	23f5      	movs	r3, #245	; 0xf5
 800b5f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	7bfa      	ldrb	r2, [r7, #15]
 800b5f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b086      	sub	sp, #24
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	2200      	movs	r2, #0
 800b612:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d022      	beq.n	800b664 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b628:	2b10      	cmp	r3, #16
 800b62a:	d11b      	bne.n	800b664 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b638:	d202      	bcs.n	800b640 <lwip_netconn_do_recv+0x3e>
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	e001      	b.n	800b644 <lwip_netconn_do_recv+0x42>
 800b640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b644:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	89fa      	ldrh	r2, [r7, #14]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f005 fb69 	bl	8010d28 <tcp_recved>
        remaining -= recved;
 800b656:	89fb      	ldrh	r3, [r7, #14]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e6      	bne.n	800b632 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b664:	bf00      	nop
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b088      	sub	sp, #32
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d106      	bne.n	800b690 <lwip_netconn_do_writemore+0x24>
 800b682:	4b96      	ldr	r3, [pc, #600]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b684:	f240 6273 	movw	r2, #1651	; 0x673
 800b688:	4995      	ldr	r1, [pc, #596]	; (800b8e0 <lwip_netconn_do_writemore+0x274>)
 800b68a:	4896      	ldr	r0, [pc, #600]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b68c:	f00c fa70 	bl	8017b70 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d006      	beq.n	800b6a6 <lwip_netconn_do_writemore+0x3a>
 800b698:	4b90      	ldr	r3, [pc, #576]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b69a:	f240 6274 	movw	r2, #1652	; 0x674
 800b69e:	4992      	ldr	r1, [pc, #584]	; (800b8e8 <lwip_netconn_do_writemore+0x27c>)
 800b6a0:	4890      	ldr	r0, [pc, #576]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b6a2:	f00c fa65 	bl	8017b70 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <lwip_netconn_do_writemore+0x50>
 800b6ae:	4b8b      	ldr	r3, [pc, #556]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b6b0:	f240 6275 	movw	r2, #1653	; 0x675
 800b6b4:	498d      	ldr	r1, [pc, #564]	; (800b8ec <lwip_netconn_do_writemore+0x280>)
 800b6b6:	488b      	ldr	r0, [pc, #556]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b6b8:	f00c fa5a 	bl	8017b70 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <lwip_netconn_do_writemore+0x66>
 800b6c4:	4b85      	ldr	r3, [pc, #532]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b6c6:	f240 6276 	movw	r2, #1654	; 0x676
 800b6ca:	4989      	ldr	r1, [pc, #548]	; (800b8f0 <lwip_netconn_do_writemore+0x284>)
 800b6cc:	4885      	ldr	r0, [pc, #532]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b6ce:	f00c fa4f 	bl	8017b70 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	699a      	ldr	r2, [r3, #24]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d306      	bcc.n	800b6f0 <lwip_netconn_do_writemore+0x84>
 800b6e2:	4b7e      	ldr	r3, [pc, #504]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b6e4:	f240 6277 	movw	r2, #1655	; 0x677
 800b6e8:	4982      	ldr	r1, [pc, #520]	; (800b8f4 <lwip_netconn_do_writemore+0x288>)
 800b6ea:	487e      	ldr	r0, [pc, #504]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b6ec:	f00c fa40 	bl	8017b70 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	899b      	ldrh	r3, [r3, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <lwip_netconn_do_writemore+0x9c>
 800b6fa:	4b78      	ldr	r3, [pc, #480]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b6fc:	f240 6279 	movw	r2, #1657	; 0x679
 800b700:	497d      	ldr	r1, [pc, #500]	; (800b8f8 <lwip_netconn_do_writemore+0x28c>)
 800b702:	4878      	ldr	r0, [pc, #480]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b704:	f00c fa34 	bl	8017b70 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
 800b70c:	7f1b      	ldrb	r3, [r3, #28]
 800b70e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7f1b      	ldrb	r3, [r3, #28]
 800b714:	f003 0302 	and.w	r3, r3, #2
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d104      	bne.n	800b726 <lwip_netconn_do_writemore+0xba>
 800b71c:	7ebb      	ldrb	r3, [r7, #26]
 800b71e:	f003 0304 	and.w	r3, r3, #4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <lwip_netconn_do_writemore+0xbe>
 800b726:	2301      	movs	r3, #1
 800b728:	e000      	b.n	800b72c <lwip_netconn_do_writemore+0xc0>
 800b72a:	2300      	movs	r3, #0
 800b72c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	4413      	add	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b758:	d307      	bcc.n	800b76a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b75a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b75e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b760:	7ebb      	ldrb	r3, [r7, #26]
 800b762:	f043 0302 	orr.w	r3, r3, #2
 800b766:	76bb      	strb	r3, [r7, #26]
 800b768:	e001      	b.n	800b76e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b776:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b778:	89fa      	ldrh	r2, [r7, #14]
 800b77a:	8bbb      	ldrh	r3, [r7, #28]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d216      	bcs.n	800b7ae <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b780:	89fb      	ldrh	r3, [r7, #14]
 800b782:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b784:	7e3b      	ldrb	r3, [r7, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00d      	beq.n	800b7a6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b78a:	8bbb      	ldrh	r3, [r7, #28]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10e      	bne.n	800b7ae <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a1b      	ldr	r3, [r3, #32]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <lwip_netconn_do_writemore+0x134>
 800b79a:	f06f 0306 	mvn.w	r3, #6
 800b79e:	e000      	b.n	800b7a2 <lwip_netconn_do_writemore+0x136>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b7a4:	e07d      	b.n	800b8a2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b7a6:	7ebb      	ldrb	r3, [r7, #26]
 800b7a8:	f043 0302 	orr.w	r3, r3, #2
 800b7ac:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	691a      	ldr	r2, [r3, #16]
 800b7b4:	8bbb      	ldrh	r3, [r7, #28]
 800b7b6:	441a      	add	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d906      	bls.n	800b7d2 <lwip_netconn_do_writemore+0x166>
 800b7c4:	4b45      	ldr	r3, [pc, #276]	; (800b8dc <lwip_netconn_do_writemore+0x270>)
 800b7c6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b7ca:	494c      	ldr	r1, [pc, #304]	; (800b8fc <lwip_netconn_do_writemore+0x290>)
 800b7cc:	4845      	ldr	r0, [pc, #276]	; (800b8e4 <lwip_netconn_do_writemore+0x278>)
 800b7ce:	f00c f9cf 	bl	8017b70 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b7d2:	8bbb      	ldrh	r3, [r7, #28]
 800b7d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d103      	bne.n	800b7e4 <lwip_netconn_do_writemore+0x178>
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e2:	d209      	bcs.n	800b7f8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b7e8:	8bba      	ldrh	r2, [r7, #28]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d10b      	bne.n	800b806 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	899b      	ldrh	r3, [r3, #12]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d906      	bls.n	800b806 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b7fc:	7ebb      	ldrb	r3, [r7, #26]
 800b7fe:	f043 0302 	orr.w	r3, r3, #2
 800b802:	76bb      	strb	r3, [r7, #26]
 800b804:	e001      	b.n	800b80a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6858      	ldr	r0, [r3, #4]
 800b80e:	7ebb      	ldrb	r3, [r7, #26]
 800b810:	8bba      	ldrh	r2, [r7, #28]
 800b812:	6979      	ldr	r1, [r7, #20]
 800b814:	f009 f9bc 	bl	8014b90 <tcp_write>
 800b818:	4603      	mov	r3, r0
 800b81a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b81c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d12c      	bne.n	800b87e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	6999      	ldr	r1, [r3, #24]
 800b82a:	8bba      	ldrh	r2, [r7, #28]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	440a      	add	r2, r1
 800b832:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	6919      	ldr	r1, [r3, #16]
 800b83a:	8bba      	ldrh	r2, [r7, #28]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	440a      	add	r2, r1
 800b842:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	429a      	cmp	r2, r3
 800b854:	d113      	bne.n	800b87e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	899a      	ldrh	r2, [r3, #12]
 800b85c:	3a01      	subs	r2, #1
 800b85e:	b292      	uxth	r2, r2
 800b860:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	899b      	ldrh	r3, [r3, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d008      	beq.n	800b87e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	689a      	ldr	r2, [r3, #8]
 800b872:	3208      	adds	r2, #8
 800b874:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	2200      	movs	r2, #0
 800b87c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b87e:	7e7b      	ldrb	r3, [r7, #25]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <lwip_netconn_do_writemore+0x222>
 800b884:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f43f af50 	beq.w	800b72e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b88e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <lwip_netconn_do_writemore+0x234>
 800b896:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d147      	bne.n	800b930 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800b8a0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b8a2:	7e3b      	ldrb	r3, [r7, #24]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d02b      	beq.n	800b900 <lwip_netconn_do_writemore+0x294>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d223      	bcs.n	800b900 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d005      	beq.n	800b8cc <lwip_netconn_do_writemore+0x260>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2103      	movs	r1, #3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7f1b      	ldrb	r3, [r3, #28]
 800b8d0:	f043 0310 	orr.w	r3, r3, #16
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	771a      	strb	r2, [r3, #28]
 800b8da:	e029      	b.n	800b930 <lwip_netconn_do_writemore+0x2c4>
 800b8dc:	08019f24 	.word	0x08019f24
 800b8e0:	0801a0d8 	.word	0x0801a0d8
 800b8e4:	08019fc4 	.word	0x08019fc4
 800b8e8:	0801a3e0 	.word	0x0801a3e0
 800b8ec:	0801a0e8 	.word	0x0801a0e8
 800b8f0:	0801a400 	.word	0x0801a400
 800b8f4:	0801a418 	.word	0x0801a418
 800b8f8:	0801a458 	.word	0x0801a458
 800b8fc:	0801a480 	.word	0x0801a480
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b908:	f640 3269 	movw	r2, #2921	; 0xb69
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d905      	bls.n	800b91c <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b918:	2b07      	cmp	r3, #7
 800b91a:	d909      	bls.n	800b930 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <lwip_netconn_do_writemore+0x2c4>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b928:	2200      	movs	r2, #0
 800b92a:	2103      	movs	r1, #3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b930:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d11d      	bne.n	800b974 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	699a      	ldr	r2, [r3, #24]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	429a      	cmp	r2, r3
 800b946:	d002      	beq.n	800b94e <lwip_netconn_do_writemore+0x2e2>
 800b948:	7e3b      	ldrb	r3, [r7, #24]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b94e:	2301      	movs	r3, #1
 800b950:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	4618      	mov	r0, r3
 800b958:	f009 ff06 	bl	8015768 <tcp_output>
 800b95c:	4603      	mov	r3, r0
 800b95e:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b960:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b964:	f113 0f04 	cmn.w	r3, #4
 800b968:	d12c      	bne.n	800b9c4 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b96a:	7b3b      	ldrb	r3, [r7, #12]
 800b96c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b96e:	2301      	movs	r3, #1
 800b970:	76fb      	strb	r3, [r7, #27]
 800b972:	e027      	b.n	800b9c4 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800b974:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97c:	d120      	bne.n	800b9c0 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	4618      	mov	r0, r3
 800b984:	f009 fef0 	bl	8015768 <tcp_output>
 800b988:	4603      	mov	r3, r0
 800b98a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b98c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b990:	f113 0f04 	cmn.w	r3, #4
 800b994:	d104      	bne.n	800b9a0 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b996:	7b7b      	ldrb	r3, [r7, #13]
 800b998:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	76fb      	strb	r3, [r7, #27]
 800b99e:	e011      	b.n	800b9c4 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800b9a0:	7e3b      	ldrb	r3, [r7, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00e      	beq.n	800b9c4 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a1b      	ldr	r3, [r3, #32]
 800b9aa:	699b      	ldr	r3, [r3, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <lwip_netconn_do_writemore+0x34a>
 800b9b0:	f06f 0306 	mvn.w	r3, #6
 800b9b4:	e000      	b.n	800b9b8 <lwip_netconn_do_writemore+0x34c>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	76fb      	strb	r3, [r7, #27]
 800b9be:	e001      	b.n	800b9c4 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b9c4:	7efb      	ldrb	r3, [r7, #27]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d015      	beq.n	800b9f6 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	330c      	adds	r3, #12
 800b9d2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a1b      	ldr	r3, [r3, #32]
 800b9d8:	7ffa      	ldrb	r2, [r7, #31]
 800b9da:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d006      	beq.n	800b9fc <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b9ee:	68b8      	ldr	r0, [r7, #8]
 800b9f0:	f004 fc8a 	bl	8010308 <sys_sem_signal>
 800b9f4:	e002      	b.n	800b9fc <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fa:	e000      	b.n	800b9fe <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3720      	adds	r7, #32
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop

0800ba08 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d067      	beq.n	800baf6 <lwip_netconn_do_close+0xee>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ba30:	2b10      	cmp	r3, #16
 800ba32:	d160      	bne.n	800baf6 <lwip_netconn_do_close+0xee>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d002      	beq.n	800ba42 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ba3c:	7afb      	ldrb	r3, [r7, #11]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d059      	beq.n	800baf6 <lwip_netconn_do_close+0xee>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d103      	bne.n	800ba50 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	22f5      	movs	r2, #245	; 0xf5
 800ba4c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ba4e:	e057      	b.n	800bb00 <lwip_netconn_do_close+0xf8>
    } else if (state == NETCONN_WRITE) {
 800ba50:	7afb      	ldrb	r3, [r7, #11]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d103      	bne.n	800ba5e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	22fb      	movs	r2, #251	; 0xfb
 800ba5a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ba5c:	e050      	b.n	800bb00 <lwip_netconn_do_close+0xf8>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	7a1b      	ldrb	r3, [r3, #8]
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff f92e 	bl	800acd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d006      	beq.n	800ba8c <lwip_netconn_do_close+0x84>
 800ba7e:	4b22      	ldr	r3, [pc, #136]	; (800bb08 <lwip_netconn_do_close+0x100>)
 800ba80:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ba84:	4921      	ldr	r1, [pc, #132]	; (800bb0c <lwip_netconn_do_close+0x104>)
 800ba86:	4822      	ldr	r0, [pc, #136]	; (800bb10 <lwip_netconn_do_close+0x108>)
 800ba88:	f00c f872 	bl	8017b70 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2204      	movs	r2, #4
 800ba92:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2100      	movs	r1, #0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff f992 	bl	800adcc <lwip_netconn_do_close_internal>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d027      	beq.n	800bafe <lwip_netconn_do_close+0xf6>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	785b      	ldrb	r3, [r3, #1]
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d006      	beq.n	800bac6 <lwip_netconn_do_close+0xbe>
 800bab8:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <lwip_netconn_do_close+0x100>)
 800baba:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800babe:	4915      	ldr	r1, [pc, #84]	; (800bb14 <lwip_netconn_do_close+0x10c>)
 800bac0:	4813      	ldr	r0, [pc, #76]	; (800bb10 <lwip_netconn_do_close+0x108>)
 800bac2:	f00c f855 	bl	8017b70 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bac6:	f7fa f9a5 	bl	8005e14 <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	330c      	adds	r3, #12
 800bad0:	2100      	movs	r1, #0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f004 fbe7 	bl	80102a6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bad8:	f7fa f98c 	bl	8005df4 <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	785b      	ldrb	r3, [r3, #1]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00b      	beq.n	800bafe <lwip_netconn_do_close+0xf6>
 800bae6:	4b08      	ldr	r3, [pc, #32]	; (800bb08 <lwip_netconn_do_close+0x100>)
 800bae8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800baec:	4909      	ldr	r1, [pc, #36]	; (800bb14 <lwip_netconn_do_close+0x10c>)
 800baee:	4808      	ldr	r0, [pc, #32]	; (800bb10 <lwip_netconn_do_close+0x108>)
 800baf0:	f00c f83e 	bl	8017b70 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800baf4:	e003      	b.n	800bafe <lwip_netconn_do_close+0xf6>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	22f5      	movs	r2, #245	; 0xf5
 800bafa:	711a      	strb	r2, [r3, #4]
 800bafc:	e000      	b.n	800bb00 <lwip_netconn_do_close+0xf8>
      return;
 800bafe:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08019f24 	.word	0x08019f24
 800bb0c:	0801a324 	.word	0x0801a324
 800bb10:	08019fc4 	.word	0x08019fc4
 800bb14:	0801a340 	.word	0x0801a340

0800bb18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bb22:	88fb      	ldrh	r3, [r7, #6]
 800bb24:	021b      	lsls	r3, r3, #8
 800bb26:	b21a      	sxth	r2, r3
 800bb28:	88fb      	ldrh	r3, [r7, #6]
 800bb2a:	0a1b      	lsrs	r3, r3, #8
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	b21b      	sxth	r3, r3
 800bb30:	4313      	orrs	r3, r2
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	b29b      	uxth	r3, r3
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	061a      	lsls	r2, r3, #24
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	021b      	lsls	r3, r3, #8
 800bb52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb56:	431a      	orrs	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	0e1b      	lsrs	r3, r3, #24
 800bb66:	4313      	orrs	r3, r2
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bb7c:	4915      	ldr	r1, [pc, #84]	; (800bbd4 <etharp_free_entry+0x60>)
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4613      	mov	r3, r2
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	4413      	add	r3, r2
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	440b      	add	r3, r1
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d013      	beq.n	800bbb8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bb90:	4910      	ldr	r1, [pc, #64]	; (800bbd4 <etharp_free_entry+0x60>)
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	4413      	add	r3, r2
 800bb9a:	00db      	lsls	r3, r3, #3
 800bb9c:	440b      	add	r3, r1
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f003 ff73 	bl	800fa8c <pbuf_free>
    arp_table[i].q = NULL;
 800bba6:	490b      	ldr	r1, [pc, #44]	; (800bbd4 <etharp_free_entry+0x60>)
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	4413      	add	r3, r2
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	440b      	add	r3, r1
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bbb8:	4906      	ldr	r1, [pc, #24]	; (800bbd4 <etharp_free_entry+0x60>)
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	440b      	add	r3, r1
 800bbc6:	3314      	adds	r3, #20
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	24009d84 	.word	0x24009d84

0800bbd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
 800bbe2:	e096      	b.n	800bd12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bbe4:	494f      	ldr	r1, [pc, #316]	; (800bd24 <etharp_tmr+0x14c>)
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	4413      	add	r3, r2
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	440b      	add	r3, r1
 800bbf2:	3314      	adds	r3, #20
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bbf8:	78fb      	ldrb	r3, [r7, #3]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 8086 	beq.w	800bd0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bc00:	4948      	ldr	r1, [pc, #288]	; (800bd24 <etharp_tmr+0x14c>)
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	4613      	mov	r3, r2
 800bc06:	005b      	lsls	r3, r3, #1
 800bc08:	4413      	add	r3, r2
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	440b      	add	r3, r1
 800bc0e:	3312      	adds	r3, #18
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	b298      	uxth	r0, r3
 800bc16:	4943      	ldr	r1, [pc, #268]	; (800bd24 <etharp_tmr+0x14c>)
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	4413      	add	r3, r2
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	440b      	add	r3, r1
 800bc24:	3312      	adds	r3, #18
 800bc26:	4602      	mov	r2, r0
 800bc28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bc2a:	493e      	ldr	r1, [pc, #248]	; (800bd24 <etharp_tmr+0x14c>)
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	4413      	add	r3, r2
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	440b      	add	r3, r1
 800bc38:	3312      	adds	r3, #18
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bc40:	d215      	bcs.n	800bc6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bc42:	4938      	ldr	r1, [pc, #224]	; (800bd24 <etharp_tmr+0x14c>)
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	4613      	mov	r3, r2
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4413      	add	r3, r2
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	440b      	add	r3, r1
 800bc50:	3314      	adds	r3, #20
 800bc52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d10e      	bne.n	800bc76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bc58:	4932      	ldr	r1, [pc, #200]	; (800bd24 <etharp_tmr+0x14c>)
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	4413      	add	r3, r2
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	440b      	add	r3, r1
 800bc66:	3312      	adds	r3, #18
 800bc68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d903      	bls.n	800bc76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7ff ff80 	bl	800bb74 <etharp_free_entry>
 800bc74:	e04a      	b.n	800bd0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bc76:	492b      	ldr	r1, [pc, #172]	; (800bd24 <etharp_tmr+0x14c>)
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4413      	add	r3, r2
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	440b      	add	r3, r1
 800bc84:	3314      	adds	r3, #20
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d10a      	bne.n	800bca2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bc8c:	4925      	ldr	r1, [pc, #148]	; (800bd24 <etharp_tmr+0x14c>)
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	4613      	mov	r3, r2
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	4413      	add	r3, r2
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	440b      	add	r3, r1
 800bc9a:	3314      	adds	r3, #20
 800bc9c:	2204      	movs	r2, #4
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	e034      	b.n	800bd0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bca2:	4920      	ldr	r1, [pc, #128]	; (800bd24 <etharp_tmr+0x14c>)
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	4613      	mov	r3, r2
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	4413      	add	r3, r2
 800bcac:	00db      	lsls	r3, r3, #3
 800bcae:	440b      	add	r3, r1
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d10a      	bne.n	800bcce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bcb8:	491a      	ldr	r1, [pc, #104]	; (800bd24 <etharp_tmr+0x14c>)
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	4413      	add	r3, r2
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	440b      	add	r3, r1
 800bcc6:	3314      	adds	r3, #20
 800bcc8:	2202      	movs	r2, #2
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	e01e      	b.n	800bd0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bcce:	4915      	ldr	r1, [pc, #84]	; (800bd24 <etharp_tmr+0x14c>)
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	4413      	add	r3, r2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	440b      	add	r3, r1
 800bcdc:	3314      	adds	r3, #20
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d113      	bne.n	800bd0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bce4:	490f      	ldr	r1, [pc, #60]	; (800bd24 <etharp_tmr+0x14c>)
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4613      	mov	r3, r2
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	4413      	add	r3, r2
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	440b      	add	r3, r1
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	6818      	ldr	r0, [r3, #0]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	4413      	add	r3, r2
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	4a08      	ldr	r2, [pc, #32]	; (800bd24 <etharp_tmr+0x14c>)
 800bd02:	4413      	add	r3, r2
 800bd04:	3304      	adds	r3, #4
 800bd06:	4619      	mov	r1, r3
 800bd08:	f000 fe72 	bl	800c9f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	f77f af65 	ble.w	800bbe4 <etharp_tmr+0xc>
      }
    }
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	bf00      	nop
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	24009d84 	.word	0x24009d84

0800bd28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	460b      	mov	r3, r1
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bd36:	230a      	movs	r3, #10
 800bd38:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bd3a:	230a      	movs	r3, #10
 800bd3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bd3e:	230a      	movs	r3, #10
 800bd40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bd46:	230a      	movs	r3, #10
 800bd48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	83bb      	strh	r3, [r7, #28]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	837b      	strh	r3, [r7, #26]
 800bd52:	2300      	movs	r3, #0
 800bd54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd56:	2300      	movs	r3, #0
 800bd58:	843b      	strh	r3, [r7, #32]
 800bd5a:	e0ae      	b.n	800beba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bd5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd60:	49a6      	ldr	r1, [pc, #664]	; (800bffc <etharp_find_entry+0x2d4>)
 800bd62:	4613      	mov	r3, r2
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	4413      	add	r3, r2
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	440b      	add	r3, r1
 800bd6c:	3314      	adds	r3, #20
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bd72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bd76:	2b0a      	cmp	r3, #10
 800bd78:	d105      	bne.n	800bd86 <etharp_find_entry+0x5e>
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bd80:	8c3b      	ldrh	r3, [r7, #32]
 800bd82:	847b      	strh	r3, [r7, #34]	; 0x22
 800bd84:	e095      	b.n	800beb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 8092 	beq.w	800beb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d009      	beq.n	800bda8 <etharp_find_entry+0x80>
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d806      	bhi.n	800bda8 <etharp_find_entry+0x80>
 800bd9a:	4b99      	ldr	r3, [pc, #612]	; (800c000 <etharp_find_entry+0x2d8>)
 800bd9c:	f240 1223 	movw	r2, #291	; 0x123
 800bda0:	4998      	ldr	r1, [pc, #608]	; (800c004 <etharp_find_entry+0x2dc>)
 800bda2:	4899      	ldr	r0, [pc, #612]	; (800c008 <etharp_find_entry+0x2e0>)
 800bda4:	f00b fee4 	bl	8017b70 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d020      	beq.n	800bdf0 <etharp_find_entry+0xc8>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6819      	ldr	r1, [r3, #0]
 800bdb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdb6:	4891      	ldr	r0, [pc, #580]	; (800bffc <etharp_find_entry+0x2d4>)
 800bdb8:	4613      	mov	r3, r2
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	4413      	add	r3, r2
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	4403      	add	r3, r0
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4299      	cmp	r1, r3
 800bdc8:	d112      	bne.n	800bdf0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00c      	beq.n	800bdea <etharp_find_entry+0xc2>
 800bdd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdd4:	4989      	ldr	r1, [pc, #548]	; (800bffc <etharp_find_entry+0x2d4>)
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	4413      	add	r3, r2
 800bddc:	00db      	lsls	r3, r3, #3
 800bdde:	440b      	add	r3, r1
 800bde0:	3308      	adds	r3, #8
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d102      	bne.n	800bdf0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bdea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdee:	e100      	b.n	800bff2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d140      	bne.n	800be78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bdf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdfa:	4980      	ldr	r1, [pc, #512]	; (800bffc <etharp_find_entry+0x2d4>)
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	4413      	add	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	440b      	add	r3, r1
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d01a      	beq.n	800be42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800be0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be10:	497a      	ldr	r1, [pc, #488]	; (800bffc <etharp_find_entry+0x2d4>)
 800be12:	4613      	mov	r3, r2
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	4413      	add	r3, r2
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	440b      	add	r3, r1
 800be1c:	3312      	adds	r3, #18
 800be1e:	881b      	ldrh	r3, [r3, #0]
 800be20:	8bba      	ldrh	r2, [r7, #28]
 800be22:	429a      	cmp	r2, r3
 800be24:	d845      	bhi.n	800beb2 <etharp_find_entry+0x18a>
            old_queue = i;
 800be26:	8c3b      	ldrh	r3, [r7, #32]
 800be28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800be2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be2e:	4973      	ldr	r1, [pc, #460]	; (800bffc <etharp_find_entry+0x2d4>)
 800be30:	4613      	mov	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	440b      	add	r3, r1
 800be3a:	3312      	adds	r3, #18
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	83bb      	strh	r3, [r7, #28]
 800be40:	e037      	b.n	800beb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800be42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be46:	496d      	ldr	r1, [pc, #436]	; (800bffc <etharp_find_entry+0x2d4>)
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	3312      	adds	r3, #18
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	8b7a      	ldrh	r2, [r7, #26]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d82a      	bhi.n	800beb2 <etharp_find_entry+0x18a>
            old_pending = i;
 800be5c:	8c3b      	ldrh	r3, [r7, #32]
 800be5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800be60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be64:	4965      	ldr	r1, [pc, #404]	; (800bffc <etharp_find_entry+0x2d4>)
 800be66:	4613      	mov	r3, r2
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4413      	add	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	440b      	add	r3, r1
 800be70:	3312      	adds	r3, #18
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	837b      	strh	r3, [r7, #26]
 800be76:	e01c      	b.n	800beb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d919      	bls.n	800beb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800be7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be82:	495e      	ldr	r1, [pc, #376]	; (800bffc <etharp_find_entry+0x2d4>)
 800be84:	4613      	mov	r3, r2
 800be86:	005b      	lsls	r3, r3, #1
 800be88:	4413      	add	r3, r2
 800be8a:	00db      	lsls	r3, r3, #3
 800be8c:	440b      	add	r3, r1
 800be8e:	3312      	adds	r3, #18
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	8b3a      	ldrh	r2, [r7, #24]
 800be94:	429a      	cmp	r2, r3
 800be96:	d80c      	bhi.n	800beb2 <etharp_find_entry+0x18a>
            old_stable = i;
 800be98:	8c3b      	ldrh	r3, [r7, #32]
 800be9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800be9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bea0:	4956      	ldr	r1, [pc, #344]	; (800bffc <etharp_find_entry+0x2d4>)
 800bea2:	4613      	mov	r3, r2
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4413      	add	r3, r2
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	440b      	add	r3, r1
 800beac:	3312      	adds	r3, #18
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800beb2:	8c3b      	ldrh	r3, [r7, #32]
 800beb4:	3301      	adds	r3, #1
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	843b      	strh	r3, [r7, #32]
 800beba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	f77f af4c 	ble.w	800bd5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bec4:	7afb      	ldrb	r3, [r7, #11]
 800bec6:	f003 0302 	and.w	r3, r3, #2
 800beca:	2b00      	cmp	r3, #0
 800becc:	d108      	bne.n	800bee0 <etharp_find_entry+0x1b8>
 800bece:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bed2:	2b0a      	cmp	r3, #10
 800bed4:	d107      	bne.n	800bee6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bed6:	7afb      	ldrb	r3, [r7, #11]
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bee0:	f04f 33ff 	mov.w	r3, #4294967295
 800bee4:	e085      	b.n	800bff2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800beea:	2b09      	cmp	r3, #9
 800beec:	dc02      	bgt.n	800bef4 <etharp_find_entry+0x1cc>
    i = empty;
 800beee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bef0:	843b      	strh	r3, [r7, #32]
 800bef2:	e039      	b.n	800bf68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bef4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bef8:	2b09      	cmp	r3, #9
 800befa:	dc14      	bgt.n	800bf26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800befc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bf00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf04:	493d      	ldr	r1, [pc, #244]	; (800bffc <etharp_find_entry+0x2d4>)
 800bf06:	4613      	mov	r3, r2
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4413      	add	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	440b      	add	r3, r1
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d018      	beq.n	800bf48 <etharp_find_entry+0x220>
 800bf16:	4b3a      	ldr	r3, [pc, #232]	; (800c000 <etharp_find_entry+0x2d8>)
 800bf18:	f240 126d 	movw	r2, #365	; 0x16d
 800bf1c:	493b      	ldr	r1, [pc, #236]	; (800c00c <etharp_find_entry+0x2e4>)
 800bf1e:	483a      	ldr	r0, [pc, #232]	; (800c008 <etharp_find_entry+0x2e0>)
 800bf20:	f00b fe26 	bl	8017b70 <iprintf>
 800bf24:	e010      	b.n	800bf48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bf26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf2a:	2b09      	cmp	r3, #9
 800bf2c:	dc02      	bgt.n	800bf34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bf2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf30:	843b      	strh	r3, [r7, #32]
 800bf32:	e009      	b.n	800bf48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bf34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bf38:	2b09      	cmp	r3, #9
 800bf3a:	dc02      	bgt.n	800bf42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bf3c:	8bfb      	ldrh	r3, [r7, #30]
 800bf3e:	843b      	strh	r3, [r7, #32]
 800bf40:	e002      	b.n	800bf48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bf42:	f04f 33ff 	mov.w	r3, #4294967295
 800bf46:	e054      	b.n	800bff2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bf48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf4c:	2b09      	cmp	r3, #9
 800bf4e:	dd06      	ble.n	800bf5e <etharp_find_entry+0x236>
 800bf50:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <etharp_find_entry+0x2d8>)
 800bf52:	f240 127f 	movw	r2, #383	; 0x17f
 800bf56:	492e      	ldr	r1, [pc, #184]	; (800c010 <etharp_find_entry+0x2e8>)
 800bf58:	482b      	ldr	r0, [pc, #172]	; (800c008 <etharp_find_entry+0x2e0>)
 800bf5a:	f00b fe09 	bl	8017b70 <iprintf>
    etharp_free_entry(i);
 800bf5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff fe06 	bl	800bb74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bf68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf6c:	2b09      	cmp	r3, #9
 800bf6e:	dd06      	ble.n	800bf7e <etharp_find_entry+0x256>
 800bf70:	4b23      	ldr	r3, [pc, #140]	; (800c000 <etharp_find_entry+0x2d8>)
 800bf72:	f240 1283 	movw	r2, #387	; 0x183
 800bf76:	4926      	ldr	r1, [pc, #152]	; (800c010 <etharp_find_entry+0x2e8>)
 800bf78:	4823      	ldr	r0, [pc, #140]	; (800c008 <etharp_find_entry+0x2e0>)
 800bf7a:	f00b fdf9 	bl	8017b70 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bf7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf82:	491e      	ldr	r1, [pc, #120]	; (800bffc <etharp_find_entry+0x2d4>)
 800bf84:	4613      	mov	r3, r2
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	440b      	add	r3, r1
 800bf8e:	3314      	adds	r3, #20
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d006      	beq.n	800bfa4 <etharp_find_entry+0x27c>
 800bf96:	4b1a      	ldr	r3, [pc, #104]	; (800c000 <etharp_find_entry+0x2d8>)
 800bf98:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bf9c:	491d      	ldr	r1, [pc, #116]	; (800c014 <etharp_find_entry+0x2ec>)
 800bf9e:	481a      	ldr	r0, [pc, #104]	; (800c008 <etharp_find_entry+0x2e0>)
 800bfa0:	f00b fde6 	bl	8017b70 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00b      	beq.n	800bfc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bfaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	6819      	ldr	r1, [r3, #0]
 800bfb2:	4812      	ldr	r0, [pc, #72]	; (800bffc <etharp_find_entry+0x2d4>)
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	005b      	lsls	r3, r3, #1
 800bfb8:	4413      	add	r3, r2
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	4403      	add	r3, r0
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bfc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfc6:	490d      	ldr	r1, [pc, #52]	; (800bffc <etharp_find_entry+0x2d4>)
 800bfc8:	4613      	mov	r3, r2
 800bfca:	005b      	lsls	r3, r3, #1
 800bfcc:	4413      	add	r3, r2
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	440b      	add	r3, r1
 800bfd2:	3312      	adds	r3, #18
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bfd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfdc:	4907      	ldr	r1, [pc, #28]	; (800bffc <etharp_find_entry+0x2d4>)
 800bfde:	4613      	mov	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3308      	adds	r3, #8
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bfee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3728      	adds	r7, #40	; 0x28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	24009d84 	.word	0x24009d84
 800c000:	0801a4d8 	.word	0x0801a4d8
 800c004:	0801a56c 	.word	0x0801a56c
 800c008:	0801a5ac 	.word	0x0801a5ac
 800c00c:	0801a5d4 	.word	0x0801a5d4
 800c010:	0801a5ec 	.word	0x0801a5ec
 800c014:	0801a600 	.word	0x0801a600

0800c018 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c02c:	2b06      	cmp	r3, #6
 800c02e:	d006      	beq.n	800c03e <etharp_update_arp_entry+0x26>
 800c030:	4b48      	ldr	r3, [pc, #288]	; (800c154 <etharp_update_arp_entry+0x13c>)
 800c032:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c036:	4948      	ldr	r1, [pc, #288]	; (800c158 <etharp_update_arp_entry+0x140>)
 800c038:	4848      	ldr	r0, [pc, #288]	; (800c15c <etharp_update_arp_entry+0x144>)
 800c03a:	f00b fd99 	bl	8017b70 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d012      	beq.n	800c06a <etharp_update_arp_entry+0x52>
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00e      	beq.n	800c06a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68f9      	ldr	r1, [r7, #12]
 800c052:	4618      	mov	r0, r3
 800c054:	f001 fada 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800c058:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d105      	bne.n	800c06a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c066:	2be0      	cmp	r3, #224	; 0xe0
 800c068:	d102      	bne.n	800c070 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c06a:	f06f 030f 	mvn.w	r3, #15
 800c06e:	e06c      	b.n	800c14a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	4619      	mov	r1, r3
 800c076:	68b8      	ldr	r0, [r7, #8]
 800c078:	f7ff fe56 	bl	800bd28 <etharp_find_entry>
 800c07c:	4603      	mov	r3, r0
 800c07e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c080:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c084:	2b00      	cmp	r3, #0
 800c086:	da02      	bge.n	800c08e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c088:	8afb      	ldrh	r3, [r7, #22]
 800c08a:	b25b      	sxtb	r3, r3
 800c08c:	e05d      	b.n	800c14a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c08e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c092:	4933      	ldr	r1, [pc, #204]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	440b      	add	r3, r1
 800c09e:	3314      	adds	r3, #20
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c0a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0a8:	492d      	ldr	r1, [pc, #180]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	4413      	add	r3, r2
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	440b      	add	r3, r1
 800c0b4:	3308      	adds	r3, #8
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c0ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	4413      	add	r3, r2
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	4a25      	ldr	r2, [pc, #148]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	2206      	movs	r2, #6
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f00b fc87 	bl	80179e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c0d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0dc:	4920      	ldr	r1, [pc, #128]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c0de:	4613      	mov	r3, r2
 800c0e0:	005b      	lsls	r3, r3, #1
 800c0e2:	4413      	add	r3, r2
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3312      	adds	r3, #18
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c0ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0f2:	491b      	ldr	r1, [pc, #108]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4413      	add	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	440b      	add	r3, r1
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d021      	beq.n	800c148 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c108:	4915      	ldr	r1, [pc, #84]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c10a:	4613      	mov	r3, r2
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	4413      	add	r3, r2
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	440b      	add	r3, r1
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c118:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c11c:	4910      	ldr	r1, [pc, #64]	; (800c160 <etharp_update_arp_entry+0x148>)
 800c11e:	4613      	mov	r3, r2
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	440b      	add	r3, r1
 800c128:	2200      	movs	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6939      	ldr	r1, [r7, #16]
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 fcf9 	bl	800cb34 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c142:	6938      	ldr	r0, [r7, #16]
 800c144:	f003 fca2 	bl	800fa8c <pbuf_free>
  }
  return ERR_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	0801a4d8 	.word	0x0801a4d8
 800c158:	0801a62c 	.word	0x0801a62c
 800c15c:	0801a5ac 	.word	0x0801a5ac
 800c160:	24009d84 	.word	0x24009d84

0800c164 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c16c:	2300      	movs	r3, #0
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e01e      	b.n	800c1b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c172:	4913      	ldr	r1, [pc, #76]	; (800c1c0 <etharp_cleanup_netif+0x5c>)
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4613      	mov	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	4413      	add	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	440b      	add	r3, r1
 800c180:	3314      	adds	r3, #20
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c186:	7afb      	ldrb	r3, [r7, #11]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00e      	beq.n	800c1aa <etharp_cleanup_netif+0x46>
 800c18c:	490c      	ldr	r1, [pc, #48]	; (800c1c0 <etharp_cleanup_netif+0x5c>)
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	4613      	mov	r3, r2
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	4413      	add	r3, r2
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	440b      	add	r3, r1
 800c19a:	3308      	adds	r3, #8
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d102      	bne.n	800c1aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f7ff fce5 	bl	800bb74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b09      	cmp	r3, #9
 800c1b4:	dddd      	ble.n	800c172 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	24009d84 	.word	0x24009d84

0800c1c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c1c4:	b5b0      	push	{r4, r5, r7, lr}
 800c1c6:	b08a      	sub	sp, #40	; 0x28
 800c1c8:	af04      	add	r7, sp, #16
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 800c1ce:	f7f9 fe2f 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d107      	bne.n	800c1e8 <etharp_input+0x24>
 800c1d8:	4b3d      	ldr	r3, [pc, #244]	; (800c2d0 <etharp_input+0x10c>)
 800c1da:	f240 228a 	movw	r2, #650	; 0x28a
 800c1de:	493d      	ldr	r1, [pc, #244]	; (800c2d4 <etharp_input+0x110>)
 800c1e0:	483d      	ldr	r0, [pc, #244]	; (800c2d8 <etharp_input+0x114>)
 800c1e2:	f00b fcc5 	bl	8017b70 <iprintf>
 800c1e6:	e06f      	b.n	800c2c8 <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f8:	d10c      	bne.n	800c214 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c1fe:	2b06      	cmp	r3, #6
 800c200:	d108      	bne.n	800c214 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c206:	2b04      	cmp	r3, #4
 800c208:	d104      	bne.n	800c214 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c210:	2b08      	cmp	r3, #8
 800c212:	d003      	beq.n	800c21c <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f003 fc39 	bl	800fa8c <pbuf_free>
    return;
 800c21a:	e055      	b.n	800c2c8 <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	330e      	adds	r3, #14
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	3318      	adds	r3, #24
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	3304      	adds	r3, #4
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d102      	bne.n	800c23c <etharp_input+0x78>
    for_us = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	75fb      	strb	r3, [r7, #23]
 800c23a:	e009      	b.n	800c250 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	3304      	adds	r3, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	bf0c      	ite	eq
 800c248:	2301      	moveq	r3, #1
 800c24a:	2300      	movne	r3, #0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f103 0208 	add.w	r2, r3, #8
 800c256:	7dfb      	ldrb	r3, [r7, #23]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <etharp_input+0x9c>
 800c25c:	2301      	movs	r3, #1
 800c25e:	e000      	b.n	800c262 <etharp_input+0x9e>
 800c260:	2302      	movs	r3, #2
 800c262:	f107 010c 	add.w	r1, r7, #12
 800c266:	6838      	ldr	r0, [r7, #0]
 800c268:	f7ff fed6 	bl	800c018 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	88db      	ldrh	r3, [r3, #6]
 800c270:	b29b      	uxth	r3, r3
 800c272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c276:	d003      	beq.n	800c280 <etharp_input+0xbc>
 800c278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c27c:	d01e      	beq.n	800c2bc <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c27e:	e020      	b.n	800c2c2 <etharp_input+0xfe>
      if (for_us) {
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d01c      	beq.n	800c2c0 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c2a0:	2102      	movs	r1, #2
 800c2a2:	9103      	str	r1, [sp, #12]
 800c2a4:	f107 010c 	add.w	r1, r7, #12
 800c2a8:	9102      	str	r1, [sp, #8]
 800c2aa:	9201      	str	r2, [sp, #4]
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	4622      	mov	r2, r4
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	6838      	ldr	r0, [r7, #0]
 800c2b6:	f000 faed 	bl	800c894 <etharp_raw>
      break;
 800c2ba:	e001      	b.n	800c2c0 <etharp_input+0xfc>
      break;
 800c2bc:	bf00      	nop
 800c2be:	e000      	b.n	800c2c2 <etharp_input+0xfe>
      break;
 800c2c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f003 fbe2 	bl	800fa8c <pbuf_free>
}
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0801a4d8 	.word	0x0801a4d8
 800c2d4:	0801a684 	.word	0x0801a684
 800c2d8:	0801a5ac 	.word	0x0801a5ac

0800c2dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c2ea:	79fa      	ldrb	r2, [r7, #7]
 800c2ec:	4944      	ldr	r1, [pc, #272]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	4413      	add	r3, r2
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	440b      	add	r3, r1
 800c2f8:	3314      	adds	r3, #20
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d806      	bhi.n	800c30e <etharp_output_to_arp_index+0x32>
 800c300:	4b40      	ldr	r3, [pc, #256]	; (800c404 <etharp_output_to_arp_index+0x128>)
 800c302:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c306:	4940      	ldr	r1, [pc, #256]	; (800c408 <etharp_output_to_arp_index+0x12c>)
 800c308:	4840      	ldr	r0, [pc, #256]	; (800c40c <etharp_output_to_arp_index+0x130>)
 800c30a:	f00b fc31 	bl	8017b70 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c30e:	79fa      	ldrb	r2, [r7, #7]
 800c310:	493b      	ldr	r1, [pc, #236]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c312:	4613      	mov	r3, r2
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	4413      	add	r3, r2
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	440b      	add	r3, r1
 800c31c:	3314      	adds	r3, #20
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d153      	bne.n	800c3cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c324:	79fa      	ldrb	r2, [r7, #7]
 800c326:	4936      	ldr	r1, [pc, #216]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c328:	4613      	mov	r3, r2
 800c32a:	005b      	lsls	r3, r3, #1
 800c32c:	4413      	add	r3, r2
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	440b      	add	r3, r1
 800c332:	3312      	adds	r3, #18
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c33a:	d919      	bls.n	800c370 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c33c:	79fa      	ldrb	r2, [r7, #7]
 800c33e:	4613      	mov	r3, r2
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	4a2e      	ldr	r2, [pc, #184]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c348:	4413      	add	r3, r2
 800c34a:	3304      	adds	r3, #4
 800c34c:	4619      	mov	r1, r3
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fb4e 	bl	800c9f0 <etharp_request>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d138      	bne.n	800c3cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c35a:	79fa      	ldrb	r2, [r7, #7]
 800c35c:	4928      	ldr	r1, [pc, #160]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c35e:	4613      	mov	r3, r2
 800c360:	005b      	lsls	r3, r3, #1
 800c362:	4413      	add	r3, r2
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	440b      	add	r3, r1
 800c368:	3314      	adds	r3, #20
 800c36a:	2203      	movs	r2, #3
 800c36c:	701a      	strb	r2, [r3, #0]
 800c36e:	e02d      	b.n	800c3cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c370:	79fa      	ldrb	r2, [r7, #7]
 800c372:	4923      	ldr	r1, [pc, #140]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c374:	4613      	mov	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	440b      	add	r3, r1
 800c37e:	3312      	adds	r3, #18
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c386:	d321      	bcc.n	800c3cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c388:	79fa      	ldrb	r2, [r7, #7]
 800c38a:	4613      	mov	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4413      	add	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	4a1b      	ldr	r2, [pc, #108]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c394:	4413      	add	r3, r2
 800c396:	1d19      	adds	r1, r3, #4
 800c398:	79fa      	ldrb	r2, [r7, #7]
 800c39a:	4613      	mov	r3, r2
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	4413      	add	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	4a16      	ldr	r2, [pc, #88]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 fafd 	bl	800c9ac <etharp_request_dst>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d109      	bne.n	800c3cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	4911      	ldr	r1, [pc, #68]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	440b      	add	r3, r1
 800c3c6:	3314      	adds	r3, #20
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c3d2:	79fa      	ldrb	r2, [r7, #7]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	4413      	add	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	3308      	adds	r3, #8
 800c3de:	4a08      	ldr	r2, [pc, #32]	; (800c400 <etharp_output_to_arp_index+0x124>)
 800c3e0:	4413      	add	r3, r2
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3e8:	9200      	str	r2, [sp, #0]
 800c3ea:	460a      	mov	r2, r1
 800c3ec:	68b9      	ldr	r1, [r7, #8]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 fba0 	bl	800cb34 <ethernet_output>
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	24009d84 	.word	0x24009d84
 800c404:	0801a4d8 	.word	0x0801a4d8
 800c408:	0801a6a4 	.word	0x0801a6a4
 800c40c:	0801a5ac 	.word	0x0801a5ac

0800c410 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08a      	sub	sp, #40	; 0x28
 800c414:	af02      	add	r7, sp, #8
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 800c420:	f7f9 fd06 	bl	8005e30 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <etharp_output+0x28>
 800c42a:	4b73      	ldr	r3, [pc, #460]	; (800c5f8 <etharp_output+0x1e8>)
 800c42c:	f240 321e 	movw	r2, #798	; 0x31e
 800c430:	4972      	ldr	r1, [pc, #456]	; (800c5fc <etharp_output+0x1ec>)
 800c432:	4873      	ldr	r0, [pc, #460]	; (800c600 <etharp_output+0x1f0>)
 800c434:	f00b fb9c 	bl	8017b70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <etharp_output+0x3c>
 800c43e:	4b6e      	ldr	r3, [pc, #440]	; (800c5f8 <etharp_output+0x1e8>)
 800c440:	f240 321f 	movw	r2, #799	; 0x31f
 800c444:	496f      	ldr	r1, [pc, #444]	; (800c604 <etharp_output+0x1f4>)
 800c446:	486e      	ldr	r0, [pc, #440]	; (800c600 <etharp_output+0x1f0>)
 800c448:	f00b fb92 	bl	8017b70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <etharp_output+0x50>
 800c452:	4b69      	ldr	r3, [pc, #420]	; (800c5f8 <etharp_output+0x1e8>)
 800c454:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c458:	496b      	ldr	r1, [pc, #428]	; (800c608 <etharp_output+0x1f8>)
 800c45a:	4869      	ldr	r0, [pc, #420]	; (800c600 <etharp_output+0x1f0>)
 800c45c:	f00b fb88 	bl	8017b70 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68f9      	ldr	r1, [r7, #12]
 800c466:	4618      	mov	r0, r3
 800c468:	f001 f8d0 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c472:	4b66      	ldr	r3, [pc, #408]	; (800c60c <etharp_output+0x1fc>)
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	e0af      	b.n	800c5d8 <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c480:	2be0      	cmp	r3, #224	; 0xe0
 800c482:	d118      	bne.n	800c4b6 <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c484:	2301      	movs	r3, #1
 800c486:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c488:	2300      	movs	r3, #0
 800c48a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c48c:	235e      	movs	r3, #94	; 0x5e
 800c48e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3301      	adds	r3, #1
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3302      	adds	r3, #2
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3303      	adds	r3, #3
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c4ae:	f107 0310 	add.w	r3, r7, #16
 800c4b2:	61fb      	str	r3, [r7, #28]
 800c4b4:	e090      	b.n	800c5d8 <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	405a      	eors	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d012      	beq.n	800c4f4 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c4d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d00b      	beq.n	800c4f4 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	330c      	adds	r3, #12
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	e002      	b.n	800c4f4 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c4ee:	f06f 0303 	mvn.w	r3, #3
 800c4f2:	e07d      	b.n	800c5f0 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c4f4:	4b46      	ldr	r3, [pc, #280]	; (800c610 <etharp_output+0x200>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4a46      	ldr	r2, [pc, #280]	; (800c614 <etharp_output+0x204>)
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	440b      	add	r3, r1
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4413      	add	r3, r2
 800c506:	3314      	adds	r3, #20
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d925      	bls.n	800c55a <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c50e:	4b40      	ldr	r3, [pc, #256]	; (800c610 <etharp_output+0x200>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	4619      	mov	r1, r3
 800c514:	4a3f      	ldr	r2, [pc, #252]	; (800c614 <etharp_output+0x204>)
 800c516:	460b      	mov	r3, r1
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	440b      	add	r3, r1
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	4413      	add	r3, r2
 800c520:	3308      	adds	r3, #8
 800c522:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	429a      	cmp	r2, r3
 800c528:	d117      	bne.n	800c55a <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	4b38      	ldr	r3, [pc, #224]	; (800c610 <etharp_output+0x200>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	4618      	mov	r0, r3
 800c534:	4937      	ldr	r1, [pc, #220]	; (800c614 <etharp_output+0x204>)
 800c536:	4603      	mov	r3, r0
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4403      	add	r3, r0
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	440b      	add	r3, r1
 800c540:	3304      	adds	r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c544:	429a      	cmp	r2, r3
 800c546:	d108      	bne.n	800c55a <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c548:	4b31      	ldr	r3, [pc, #196]	; (800c610 <etharp_output+0x200>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f7ff fec3 	bl	800c2dc <etharp_output_to_arp_index>
 800c556:	4603      	mov	r3, r0
 800c558:	e04a      	b.n	800c5f0 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c55a:	2300      	movs	r3, #0
 800c55c:	75fb      	strb	r3, [r7, #23]
 800c55e:	e031      	b.n	800c5c4 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c560:	7dfa      	ldrb	r2, [r7, #23]
 800c562:	492c      	ldr	r1, [pc, #176]	; (800c614 <etharp_output+0x204>)
 800c564:	4613      	mov	r3, r2
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	4413      	add	r3, r2
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	440b      	add	r3, r1
 800c56e:	3314      	adds	r3, #20
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d923      	bls.n	800c5be <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c576:	7dfa      	ldrb	r2, [r7, #23]
 800c578:	4926      	ldr	r1, [pc, #152]	; (800c614 <etharp_output+0x204>)
 800c57a:	4613      	mov	r3, r2
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	4413      	add	r3, r2
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	440b      	add	r3, r1
 800c584:	3308      	adds	r3, #8
 800c586:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d117      	bne.n	800c5be <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	6819      	ldr	r1, [r3, #0]
 800c592:	7dfa      	ldrb	r2, [r7, #23]
 800c594:	481f      	ldr	r0, [pc, #124]	; (800c614 <etharp_output+0x204>)
 800c596:	4613      	mov	r3, r2
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	4413      	add	r3, r2
 800c59c:	00db      	lsls	r3, r3, #3
 800c59e:	4403      	add	r3, r0
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c5a4:	4299      	cmp	r1, r3
 800c5a6:	d10a      	bne.n	800c5be <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c5a8:	4a19      	ldr	r2, [pc, #100]	; (800c610 <etharp_output+0x200>)
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c5ae:	7dfb      	ldrb	r3, [r7, #23]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7ff fe91 	bl	800c2dc <etharp_output_to_arp_index>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	e018      	b.n	800c5f0 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	75fb      	strb	r3, [r7, #23]
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	2b09      	cmp	r3, #9
 800c5c8:	d9ca      	bls.n	800c560 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	69b9      	ldr	r1, [r7, #24]
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f000 f822 	bl	800c618 <etharp_query>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	e00b      	b.n	800c5f0 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c5de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	68b9      	ldr	r1, [r7, #8]
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 faa3 	bl	800cb34 <ethernet_output>
 800c5ee:	4603      	mov	r3, r0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3720      	adds	r7, #32
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	0801a4d8 	.word	0x0801a4d8
 800c5fc:	0801a684 	.word	0x0801a684
 800c600:	0801a5ac 	.word	0x0801a5ac
 800c604:	0801a6d4 	.word	0x0801a6d4
 800c608:	0801a674 	.word	0x0801a674
 800c60c:	0801d528 	.word	0x0801d528
 800c610:	24009e74 	.word	0x24009e74
 800c614:	24009d84 	.word	0x24009d84

0800c618 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08c      	sub	sp, #48	; 0x30
 800c61c:	af02      	add	r7, sp, #8
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3326      	adds	r3, #38	; 0x26
 800c628:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c62a:	23ff      	movs	r3, #255	; 0xff
 800c62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68f9      	ldr	r1, [r7, #12]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 ffe6 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10c      	bne.n	800c660 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c64e:	2be0      	cmp	r3, #224	; 0xe0
 800c650:	d006      	beq.n	800c660 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d102      	bne.n	800c666 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c660:	f06f 030f 	mvn.w	r3, #15
 800c664:	e101      	b.n	800c86a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	2101      	movs	r1, #1
 800c66a:	68b8      	ldr	r0, [r7, #8]
 800c66c:	f7ff fb5c 	bl	800bd28 <etharp_find_entry>
 800c670:	4603      	mov	r3, r0
 800c672:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	da02      	bge.n	800c682 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c67c:	8a7b      	ldrh	r3, [r7, #18]
 800c67e:	b25b      	sxtb	r3, r3
 800c680:	e0f3      	b.n	800c86a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c682:	8a7b      	ldrh	r3, [r7, #18]
 800c684:	2b7e      	cmp	r3, #126	; 0x7e
 800c686:	d906      	bls.n	800c696 <etharp_query+0x7e>
 800c688:	4b7a      	ldr	r3, [pc, #488]	; (800c874 <etharp_query+0x25c>)
 800c68a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c68e:	497a      	ldr	r1, [pc, #488]	; (800c878 <etharp_query+0x260>)
 800c690:	487a      	ldr	r0, [pc, #488]	; (800c87c <etharp_query+0x264>)
 800c692:	f00b fa6d 	bl	8017b70 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c696:	8a7b      	ldrh	r3, [r7, #18]
 800c698:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c69a:	7c7a      	ldrb	r2, [r7, #17]
 800c69c:	4978      	ldr	r1, [pc, #480]	; (800c880 <etharp_query+0x268>)
 800c69e:	4613      	mov	r3, r2
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	4413      	add	r3, r2
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	440b      	add	r3, r1
 800c6a8:	3314      	adds	r3, #20
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d115      	bne.n	800c6dc <etharp_query+0xc4>
    is_new_entry = 1;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c6b4:	7c7a      	ldrb	r2, [r7, #17]
 800c6b6:	4972      	ldr	r1, [pc, #456]	; (800c880 <etharp_query+0x268>)
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	005b      	lsls	r3, r3, #1
 800c6bc:	4413      	add	r3, r2
 800c6be:	00db      	lsls	r3, r3, #3
 800c6c0:	440b      	add	r3, r1
 800c6c2:	3314      	adds	r3, #20
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c6c8:	7c7a      	ldrb	r2, [r7, #17]
 800c6ca:	496d      	ldr	r1, [pc, #436]	; (800c880 <etharp_query+0x268>)
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	4413      	add	r3, r2
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	440b      	add	r3, r1
 800c6d6:	3308      	adds	r3, #8
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c6dc:	7c7a      	ldrb	r2, [r7, #17]
 800c6de:	4968      	ldr	r1, [pc, #416]	; (800c880 <etharp_query+0x268>)
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	440b      	add	r3, r1
 800c6ea:	3314      	adds	r3, #20
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d011      	beq.n	800c716 <etharp_query+0xfe>
 800c6f2:	7c7a      	ldrb	r2, [r7, #17]
 800c6f4:	4962      	ldr	r1, [pc, #392]	; (800c880 <etharp_query+0x268>)
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	005b      	lsls	r3, r3, #1
 800c6fa:	4413      	add	r3, r2
 800c6fc:	00db      	lsls	r3, r3, #3
 800c6fe:	440b      	add	r3, r1
 800c700:	3314      	adds	r3, #20
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d806      	bhi.n	800c716 <etharp_query+0xfe>
 800c708:	4b5a      	ldr	r3, [pc, #360]	; (800c874 <etharp_query+0x25c>)
 800c70a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c70e:	495d      	ldr	r1, [pc, #372]	; (800c884 <etharp_query+0x26c>)
 800c710:	485a      	ldr	r0, [pc, #360]	; (800c87c <etharp_query+0x264>)
 800c712:	f00b fa2d 	bl	8017b70 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <etharp_query+0x10a>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10c      	bne.n	800c73c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f000 f963 	bl	800c9f0 <etharp_request>
 800c72a:	4603      	mov	r3, r0
 800c72c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d102      	bne.n	800c73c <etharp_query+0x124>
      return result;
 800c736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c73a:	e096      	b.n	800c86a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <etharp_query+0x138>
 800c742:	4b4c      	ldr	r3, [pc, #304]	; (800c874 <etharp_query+0x25c>)
 800c744:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c748:	494f      	ldr	r1, [pc, #316]	; (800c888 <etharp_query+0x270>)
 800c74a:	484c      	ldr	r0, [pc, #304]	; (800c87c <etharp_query+0x264>)
 800c74c:	f00b fa10 	bl	8017b70 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c750:	7c7a      	ldrb	r2, [r7, #17]
 800c752:	494b      	ldr	r1, [pc, #300]	; (800c880 <etharp_query+0x268>)
 800c754:	4613      	mov	r3, r2
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	4413      	add	r3, r2
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	440b      	add	r3, r1
 800c75e:	3314      	adds	r3, #20
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d917      	bls.n	800c796 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c766:	4a49      	ldr	r2, [pc, #292]	; (800c88c <etharp_query+0x274>)
 800c768:	7c7b      	ldrb	r3, [r7, #17]
 800c76a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c76c:	7c7a      	ldrb	r2, [r7, #17]
 800c76e:	4613      	mov	r3, r2
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	4413      	add	r3, r2
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	3308      	adds	r3, #8
 800c778:	4a41      	ldr	r2, [pc, #260]	; (800c880 <etharp_query+0x268>)
 800c77a:	4413      	add	r3, r2
 800c77c:	3304      	adds	r3, #4
 800c77e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c782:	9200      	str	r2, [sp, #0]
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f9d3 	bl	800cb34 <ethernet_output>
 800c78e:	4603      	mov	r3, r0
 800c790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c794:	e067      	b.n	800c866 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c796:	7c7a      	ldrb	r2, [r7, #17]
 800c798:	4939      	ldr	r1, [pc, #228]	; (800c880 <etharp_query+0x268>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3314      	adds	r3, #20
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d15c      	bne.n	800c866 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c7b4:	e01c      	b.n	800c7f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	895a      	ldrh	r2, [r3, #10]
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	891b      	ldrh	r3, [r3, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d10a      	bne.n	800c7d8 <etharp_query+0x1c0>
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d006      	beq.n	800c7d8 <etharp_query+0x1c0>
 800c7ca:	4b2a      	ldr	r3, [pc, #168]	; (800c874 <etharp_query+0x25c>)
 800c7cc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c7d0:	492f      	ldr	r1, [pc, #188]	; (800c890 <etharp_query+0x278>)
 800c7d2:	482a      	ldr	r0, [pc, #168]	; (800c87c <etharp_query+0x264>)
 800c7d4:	f00b f9cc 	bl	8017b70 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	7b1b      	ldrb	r3, [r3, #12]
 800c7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d002      	beq.n	800c7ea <etharp_query+0x1d2>
        copy_needed = 1;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	61bb      	str	r3, [r7, #24]
        break;
 800c7e8:	e005      	b.n	800c7f6 <etharp_query+0x1de>
      }
      p = p->next;
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1df      	bne.n	800c7b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c802:	200e      	movs	r0, #14
 800c804:	f003 fc4c 	bl	80100a0 <pbuf_clone>
 800c808:	61f8      	str	r0, [r7, #28]
 800c80a:	e004      	b.n	800c816 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c810:	69f8      	ldr	r0, [r7, #28]
 800c812:	f003 f9e1 	bl	800fbd8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d021      	beq.n	800c860 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c81c:	7c7a      	ldrb	r2, [r7, #17]
 800c81e:	4918      	ldr	r1, [pc, #96]	; (800c880 <etharp_query+0x268>)
 800c820:	4613      	mov	r3, r2
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	4413      	add	r3, r2
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	440b      	add	r3, r1
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c830:	7c7a      	ldrb	r2, [r7, #17]
 800c832:	4913      	ldr	r1, [pc, #76]	; (800c880 <etharp_query+0x268>)
 800c834:	4613      	mov	r3, r2
 800c836:	005b      	lsls	r3, r3, #1
 800c838:	4413      	add	r3, r2
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	440b      	add	r3, r1
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4618      	mov	r0, r3
 800c842:	f003 f923 	bl	800fa8c <pbuf_free>
      }
      arp_table[i].q = p;
 800c846:	7c7a      	ldrb	r2, [r7, #17]
 800c848:	490d      	ldr	r1, [pc, #52]	; (800c880 <etharp_query+0x268>)
 800c84a:	4613      	mov	r3, r2
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	4413      	add	r3, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	440b      	add	r3, r1
 800c854:	69fa      	ldr	r2, [r7, #28]
 800c856:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c85e:	e002      	b.n	800c866 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c860:	23ff      	movs	r3, #255	; 0xff
 800c862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c866:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3728      	adds	r7, #40	; 0x28
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	0801a4d8 	.word	0x0801a4d8
 800c878:	0801a6e0 	.word	0x0801a6e0
 800c87c:	0801a5ac 	.word	0x0801a5ac
 800c880:	24009d84 	.word	0x24009d84
 800c884:	0801a6f0 	.word	0x0801a6f0
 800c888:	0801a6d4 	.word	0x0801a6d4
 800c88c:	24009e74 	.word	0x24009e74
 800c890:	0801a718 	.word	0x0801a718

0800c894 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08a      	sub	sp, #40	; 0x28
 800c898:	af02      	add	r7, sp, #8
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <etharp_raw+0x26>
 800c8ac:	4b3a      	ldr	r3, [pc, #232]	; (800c998 <etharp_raw+0x104>)
 800c8ae:	f240 4257 	movw	r2, #1111	; 0x457
 800c8b2:	493a      	ldr	r1, [pc, #232]	; (800c99c <etharp_raw+0x108>)
 800c8b4:	483a      	ldr	r0, [pc, #232]	; (800c9a0 <etharp_raw+0x10c>)
 800c8b6:	f00b f95b 	bl	8017b70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c8ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8be:	211c      	movs	r1, #28
 800c8c0:	200e      	movs	r0, #14
 800c8c2:	f002 fdff 	bl	800f4c4 <pbuf_alloc>
 800c8c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d2:	e05d      	b.n	800c990 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	895b      	ldrh	r3, [r3, #10]
 800c8d8:	2b1b      	cmp	r3, #27
 800c8da:	d806      	bhi.n	800c8ea <etharp_raw+0x56>
 800c8dc:	4b2e      	ldr	r3, [pc, #184]	; (800c998 <etharp_raw+0x104>)
 800c8de:	f240 4262 	movw	r2, #1122	; 0x462
 800c8e2:	4930      	ldr	r1, [pc, #192]	; (800c9a4 <etharp_raw+0x110>)
 800c8e4:	482e      	ldr	r0, [pc, #184]	; (800c9a0 <etharp_raw+0x10c>)
 800c8e6:	f00b f943 	bl	8017b70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c8f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff f910 	bl	800bb18 <lwip_htons>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c906:	2b06      	cmp	r3, #6
 800c908:	d006      	beq.n	800c918 <etharp_raw+0x84>
 800c90a:	4b23      	ldr	r3, [pc, #140]	; (800c998 <etharp_raw+0x104>)
 800c90c:	f240 4269 	movw	r2, #1129	; 0x469
 800c910:	4925      	ldr	r1, [pc, #148]	; (800c9a8 <etharp_raw+0x114>)
 800c912:	4823      	ldr	r0, [pc, #140]	; (800c9a0 <etharp_raw+0x10c>)
 800c914:	f00b f92c 	bl	8017b70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	3308      	adds	r3, #8
 800c91c:	2206      	movs	r2, #6
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	4618      	mov	r0, r3
 800c922:	f00b f860 	bl	80179e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	3312      	adds	r3, #18
 800c92a:	2206      	movs	r2, #6
 800c92c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c92e:	4618      	mov	r0, r3
 800c930:	f00b f859 	bl	80179e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	330e      	adds	r3, #14
 800c938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c93a:	6812      	ldr	r2, [r2, #0]
 800c93c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	3318      	adds	r3, #24
 800c942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c944:	6812      	ldr	r2, [r2, #0]
 800c946:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2200      	movs	r2, #0
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	f042 0201 	orr.w	r2, r2, #1
 800c954:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2200      	movs	r2, #0
 800c95a:	f042 0208 	orr.w	r2, r2, #8
 800c95e:	709a      	strb	r2, [r3, #2]
 800c960:	2200      	movs	r2, #0
 800c962:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	2206      	movs	r2, #6
 800c968:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2204      	movs	r2, #4
 800c96e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c970:	f640 0306 	movw	r3, #2054	; 0x806
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	69b9      	ldr	r1, [r7, #24]
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 f8d9 	bl	800cb34 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c982:	69b8      	ldr	r0, [r7, #24]
 800c984:	f003 f882 	bl	800fa8c <pbuf_free>
  p = NULL;
 800c988:	2300      	movs	r3, #0
 800c98a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c98c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	0801a4d8 	.word	0x0801a4d8
 800c99c:	0801a684 	.word	0x0801a684
 800c9a0:	0801a5ac 	.word	0x0801a5ac
 800c9a4:	0801a734 	.word	0x0801a734
 800c9a8:	0801a768 	.word	0x0801a768

0800c9ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af04      	add	r7, sp, #16
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	9203      	str	r2, [sp, #12]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	9202      	str	r2, [sp, #8]
 800c9d0:	4a06      	ldr	r2, [pc, #24]	; (800c9ec <etharp_request_dst+0x40>)
 800c9d2:	9201      	str	r2, [sp, #4]
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7ff ff5a 	bl	800c894 <etharp_raw>
 800c9e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	0801d530 	.word	0x0801d530

0800c9f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c9fa:	4a05      	ldr	r2, [pc, #20]	; (800ca10 <etharp_request+0x20>)
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff ffd4 	bl	800c9ac <etharp_request_dst>
 800ca04:	4603      	mov	r3, r0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	0801d528 	.word	0x0801d528

0800ca14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ca1e:	230e      	movs	r3, #14
 800ca20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800ca22:	f7f9 fa05 	bl	8005e30 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	2b0e      	cmp	r3, #14
 800ca2c:	d96e      	bls.n	800cb0c <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7bdb      	ldrb	r3, [r3, #15]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	7b1a      	ldrb	r2, [r3, #12]
 800ca4e:	7b5b      	ldrb	r3, [r3, #13]
 800ca50:	021b      	lsls	r3, r3, #8
 800ca52:	4313      	orrs	r3, r2
 800ca54:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d023      	beq.n	800caaa <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d10f      	bne.n	800ca8a <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	785b      	ldrb	r3, [r3, #1]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d11b      	bne.n	800caaa <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ca76:	2b5e      	cmp	r3, #94	; 0x5e
 800ca78:	d117      	bne.n	800caaa <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	7b5b      	ldrb	r3, [r3, #13]
 800ca7e:	f043 0310 	orr.w	r3, r3, #16
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	735a      	strb	r2, [r3, #13]
 800ca88:	e00f      	b.n	800caaa <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	4928      	ldr	r1, [pc, #160]	; (800cb30 <ethernet_input+0x11c>)
 800ca90:	4618      	mov	r0, r3
 800ca92:	f00a ff98 	bl	80179c6 <memcmp>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	7b5b      	ldrb	r3, [r3, #13]
 800caa0:	f043 0308 	orr.w	r3, r3, #8
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800caaa:	89fb      	ldrh	r3, [r7, #14]
 800caac:	2b08      	cmp	r3, #8
 800caae:	d003      	beq.n	800cab8 <ethernet_input+0xa4>
 800cab0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cab4:	d014      	beq.n	800cae0 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cab6:	e032      	b.n	800cb1e <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cabe:	f003 0308 	and.w	r3, r3, #8
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d024      	beq.n	800cb10 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cac6:	8afb      	ldrh	r3, [r7, #22]
 800cac8:	4619      	mov	r1, r3
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f002 ff58 	bl	800f980 <pbuf_remove_header>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d11e      	bne.n	800cb14 <ethernet_input+0x100>
        ip4_input(p, netif);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fb97 	bl	800d20c <ip4_input>
      break;
 800cade:	e013      	b.n	800cb08 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cae6:	f003 0308 	and.w	r3, r3, #8
 800caea:	2b00      	cmp	r3, #0
 800caec:	d014      	beq.n	800cb18 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800caee:	8afb      	ldrh	r3, [r7, #22]
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f002 ff44 	bl	800f980 <pbuf_remove_header>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10e      	bne.n	800cb1c <ethernet_input+0x108>
        etharp_input(p, netif);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff fb5f 	bl	800c1c4 <etharp_input>
      break;
 800cb06:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e00c      	b.n	800cb26 <ethernet_input+0x112>
    goto free_and_return;
 800cb0c:	bf00      	nop
 800cb0e:	e006      	b.n	800cb1e <ethernet_input+0x10a>
        goto free_and_return;
 800cb10:	bf00      	nop
 800cb12:	e004      	b.n	800cb1e <ethernet_input+0x10a>
        goto free_and_return;
 800cb14:	bf00      	nop
 800cb16:	e002      	b.n	800cb1e <ethernet_input+0x10a>
        goto free_and_return;
 800cb18:	bf00      	nop
 800cb1a:	e000      	b.n	800cb1e <ethernet_input+0x10a>
        goto free_and_return;
 800cb1c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f002 ffb4 	bl	800fa8c <pbuf_free>
  return ERR_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	0801d528 	.word	0x0801d528

0800cb34 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cb42:	8c3b      	ldrh	r3, [r7, #32]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe ffe7 	bl	800bb18 <lwip_htons>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800cb4e:	210e      	movs	r1, #14
 800cb50:	68b8      	ldr	r0, [r7, #8]
 800cb52:	f002 ff05 	bl	800f960 <pbuf_add_header>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d127      	bne.n	800cbac <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800cb5c:	f7f9 f968 	bl	8005e30 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	8afa      	ldrh	r2, [r7, #22]
 800cb6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2206      	movs	r2, #6
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f00a ff37 	bl	80179e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	3306      	adds	r3, #6
 800cb7c:	2206      	movs	r2, #6
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f00a ff30 	bl	80179e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb8c:	2b06      	cmp	r3, #6
 800cb8e:	d006      	beq.n	800cb9e <ethernet_output+0x6a>
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <ethernet_output+0x88>)
 800cb92:	f44f 7299 	mov.w	r2, #306	; 0x132
 800cb96:	490a      	ldr	r1, [pc, #40]	; (800cbc0 <ethernet_output+0x8c>)
 800cb98:	480a      	ldr	r0, [pc, #40]	; (800cbc4 <ethernet_output+0x90>)
 800cb9a:	f00a ffe9 	bl	8017b70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	699b      	ldr	r3, [r3, #24]
 800cba2:	68b9      	ldr	r1, [r7, #8]
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	4798      	blx	r3
 800cba8:	4603      	mov	r3, r0
 800cbaa:	e002      	b.n	800cbb2 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 800cbac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800cbae:	f06f 0301 	mvn.w	r3, #1
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	0801a7ac 	.word	0x0801a7ac
 800cbc0:	0801a83c 	.word	0x0801a83c
 800cbc4:	0801a870 	.word	0x0801a870

0800cbc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08e      	sub	sp, #56	; 0x38
 800cbcc:	af04      	add	r7, sp, #16
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cbd2:	4b87      	ldr	r3, [pc, #540]	; (800cdf0 <icmp_input+0x228>)
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	f003 030f 	and.w	r3, r3, #15
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cbe8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbea:	2b13      	cmp	r3, #19
 800cbec:	f240 80e8 	bls.w	800cdc0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	895b      	ldrh	r3, [r3, #10]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	f240 80e5 	bls.w	800cdc4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cc04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 80d2 	beq.w	800cdb2 <icmp_input+0x1ea>
 800cc0e:	2b08      	cmp	r3, #8
 800cc10:	f040 80d2 	bne.w	800cdb8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cc14:	4b77      	ldr	r3, [pc, #476]	; (800cdf4 <icmp_input+0x22c>)
 800cc16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cc18:	4b75      	ldr	r3, [pc, #468]	; (800cdf0 <icmp_input+0x228>)
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc20:	2be0      	cmp	r3, #224	; 0xe0
 800cc22:	f000 80d6 	beq.w	800cdd2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cc26:	4b72      	ldr	r3, [pc, #456]	; (800cdf0 <icmp_input+0x228>)
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	4a71      	ldr	r2, [pc, #452]	; (800cdf0 <icmp_input+0x228>)
 800cc2c:	6812      	ldr	r2, [r2, #0]
 800cc2e:	4611      	mov	r1, r2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 fceb 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f040 80cc 	bne.w	800cdd6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	891b      	ldrh	r3, [r3, #8]
 800cc42:	2b07      	cmp	r3, #7
 800cc44:	f240 80c0 	bls.w	800cdc8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f9e0 	bl	800d00e <inet_chksum_pbuf>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d003      	beq.n	800cc5c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f002 ff19 	bl	800fa8c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800cc5a:	e0c5      	b.n	800cde8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cc5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc5e:	330e      	adds	r3, #14
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f002 fe7c 	bl	800f960 <pbuf_add_header>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d04b      	beq.n	800cd06 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	891a      	ldrh	r2, [r3, #8]
 800cc72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc74:	4413      	add	r3, r2
 800cc76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	891b      	ldrh	r3, [r3, #8]
 800cc7c:	8b7a      	ldrh	r2, [r7, #26]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	f0c0 80ab 	bcc.w	800cdda <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cc84:	8b7b      	ldrh	r3, [r7, #26]
 800cc86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	200e      	movs	r0, #14
 800cc8e:	f002 fc19 	bl	800f4c4 <pbuf_alloc>
 800cc92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 80a1 	beq.w	800cdde <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	895b      	ldrh	r3, [r3, #10]
 800cca0:	461a      	mov	r2, r3
 800cca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cca4:	3308      	adds	r3, #8
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d203      	bcs.n	800ccb2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ccaa:	6978      	ldr	r0, [r7, #20]
 800ccac:	f002 feee 	bl	800fa8c <pbuf_free>
          goto icmperr;
 800ccb0:	e096      	b.n	800cde0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ccb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f00a fe93 	bl	80179e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ccc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	6978      	ldr	r0, [r7, #20]
 800ccc6:	f002 fe5b 	bl	800f980 <pbuf_remove_header>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d009      	beq.n	800cce4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ccd0:	4b49      	ldr	r3, [pc, #292]	; (800cdf8 <icmp_input+0x230>)
 800ccd2:	22b6      	movs	r2, #182	; 0xb6
 800ccd4:	4949      	ldr	r1, [pc, #292]	; (800cdfc <icmp_input+0x234>)
 800ccd6:	484a      	ldr	r0, [pc, #296]	; (800ce00 <icmp_input+0x238>)
 800ccd8:	f00a ff4a 	bl	8017b70 <iprintf>
          pbuf_free(r);
 800ccdc:	6978      	ldr	r0, [r7, #20]
 800ccde:	f002 fed5 	bl	800fa8c <pbuf_free>
          goto icmperr;
 800cce2:	e07d      	b.n	800cde0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	6978      	ldr	r0, [r7, #20]
 800cce8:	f003 f804 	bl	800fcf4 <pbuf_copy>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ccf2:	6978      	ldr	r0, [r7, #20]
 800ccf4:	f002 feca 	bl	800fa8c <pbuf_free>
          goto icmperr;
 800ccf8:	e072      	b.n	800cde0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f002 fec6 	bl	800fa8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	e00f      	b.n	800cd26 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd08:	330e      	adds	r3, #14
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f002 fe37 	bl	800f980 <pbuf_remove_header>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d006      	beq.n	800cd26 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cd18:	4b37      	ldr	r3, [pc, #220]	; (800cdf8 <icmp_input+0x230>)
 800cd1a:	22c7      	movs	r2, #199	; 0xc7
 800cd1c:	4939      	ldr	r1, [pc, #228]	; (800ce04 <icmp_input+0x23c>)
 800cd1e:	4838      	ldr	r0, [pc, #224]	; (800ce00 <icmp_input+0x238>)
 800cd20:	f00a ff26 	bl	8017b70 <iprintf>
          goto icmperr;
 800cd24:	e05c      	b.n	800cde0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cd2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd2e:	4619      	mov	r1, r3
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f002 fe15 	bl	800f960 <pbuf_add_header>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d13c      	bne.n	800cdb6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cd4a:	4b29      	ldr	r3, [pc, #164]	; (800cdf0 <icmp_input+0x228>)
 800cd4c:	691a      	ldr	r2, [r3, #16]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2200      	movs	r2, #0
 800cd56:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	885b      	ldrh	r3, [r3, #2]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d907      	bls.n	800cd76 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	885b      	ldrh	r3, [r3, #2]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	3309      	adds	r3, #9
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	805a      	strh	r2, [r3, #2]
 800cd74:	e006      	b.n	800cd84 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	885b      	ldrh	r3, [r3, #2]
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	22ff      	movs	r2, #255	; 0xff
 800cd88:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	729a      	strb	r2, [r3, #10]
 800cd90:	2200      	movs	r2, #0
 800cd92:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	9302      	str	r3, [sp, #8]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	23ff      	movs	r3, #255	; 0xff
 800cda2:	2200      	movs	r2, #0
 800cda4:	69f9      	ldr	r1, [r7, #28]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fb56 	bl	800d458 <ip4_output_if>
 800cdac:	4603      	mov	r3, r0
 800cdae:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cdb0:	e001      	b.n	800cdb6 <icmp_input+0x1ee>
      break;
 800cdb2:	bf00      	nop
 800cdb4:	e000      	b.n	800cdb8 <icmp_input+0x1f0>
      break;
 800cdb6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f002 fe67 	bl	800fa8c <pbuf_free>
  return;
 800cdbe:	e013      	b.n	800cde8 <icmp_input+0x220>
    goto lenerr;
 800cdc0:	bf00      	nop
 800cdc2:	e002      	b.n	800cdca <icmp_input+0x202>
    goto lenerr;
 800cdc4:	bf00      	nop
 800cdc6:	e000      	b.n	800cdca <icmp_input+0x202>
        goto lenerr;
 800cdc8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f002 fe5e 	bl	800fa8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cdd0:	e00a      	b.n	800cde8 <icmp_input+0x220>
        goto icmperr;
 800cdd2:	bf00      	nop
 800cdd4:	e004      	b.n	800cde0 <icmp_input+0x218>
        goto icmperr;
 800cdd6:	bf00      	nop
 800cdd8:	e002      	b.n	800cde0 <icmp_input+0x218>
          goto icmperr;
 800cdda:	bf00      	nop
 800cddc:	e000      	b.n	800cde0 <icmp_input+0x218>
          goto icmperr;
 800cdde:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f002 fe53 	bl	800fa8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cde6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cde8:	3728      	adds	r7, #40	; 0x28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	24009e78 	.word	0x24009e78
 800cdf4:	24009e8c 	.word	0x24009e8c
 800cdf8:	0801a898 	.word	0x0801a898
 800cdfc:	0801a928 	.word	0x0801a928
 800ce00:	0801a960 	.word	0x0801a960
 800ce04:	0801a988 	.word	0x0801a988

0800ce08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	460b      	mov	r3, r1
 800ce12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	461a      	mov	r2, r3
 800ce18:	2103      	movs	r1, #3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f814 	bl	800ce48 <icmp_send_response>
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	461a      	mov	r2, r3
 800ce38:	210b      	movs	r1, #11
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f804 	bl	800ce48 <icmp_send_response>
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08c      	sub	sp, #48	; 0x30
 800ce4c:	af04      	add	r7, sp, #16
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
 800ce54:	4613      	mov	r3, r2
 800ce56:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ce58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce5c:	2124      	movs	r1, #36	; 0x24
 800ce5e:	2022      	movs	r0, #34	; 0x22
 800ce60:	f002 fb30 	bl	800f4c4 <pbuf_alloc>
 800ce64:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d056      	beq.n	800cf1a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	895b      	ldrh	r3, [r3, #10]
 800ce70:	2b23      	cmp	r3, #35	; 0x23
 800ce72:	d806      	bhi.n	800ce82 <icmp_send_response+0x3a>
 800ce74:	4b2b      	ldr	r3, [pc, #172]	; (800cf24 <icmp_send_response+0xdc>)
 800ce76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce7a:	492b      	ldr	r1, [pc, #172]	; (800cf28 <icmp_send_response+0xe0>)
 800ce7c:	482b      	ldr	r0, [pc, #172]	; (800cf2c <icmp_send_response+0xe4>)
 800ce7e:	f00a fe77 	bl	8017b70 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	78fa      	ldrb	r2, [r7, #3]
 800ce92:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	78ba      	ldrb	r2, [r7, #2]
 800ce98:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	711a      	strb	r2, [r3, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2200      	movs	r2, #0
 800cea8:	719a      	strb	r2, [r3, #6]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	f103 0008 	add.w	r0, r3, #8
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	221c      	movs	r2, #28
 800cebc:	4619      	mov	r1, r3
 800cebe:	f00a fd92 	bl	80179e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cec8:	f107 030c 	add.w	r3, r7, #12
 800cecc:	4618      	mov	r0, r3
 800cece:	f000 f903 	bl	800d0d8 <ip4_route>
 800ced2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d01b      	beq.n	800cf12 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2200      	movs	r2, #0
 800cede:	709a      	strb	r2, [r3, #2]
 800cee0:	2200      	movs	r2, #0
 800cee2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	895b      	ldrh	r3, [r3, #10]
 800cee8:	4619      	mov	r1, r3
 800ceea:	6978      	ldr	r0, [r7, #20]
 800ceec:	f000 f87d 	bl	800cfea <inet_chksum>
 800cef0:	4603      	mov	r3, r0
 800cef2:	461a      	mov	r2, r3
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cef8:	f107 020c 	add.w	r2, r7, #12
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	9302      	str	r3, [sp, #8]
 800cf00:	2301      	movs	r3, #1
 800cf02:	9301      	str	r3, [sp, #4]
 800cf04:	2300      	movs	r3, #0
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	23ff      	movs	r3, #255	; 0xff
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	69f8      	ldr	r0, [r7, #28]
 800cf0e:	f000 faa3 	bl	800d458 <ip4_output_if>
  }
  pbuf_free(q);
 800cf12:	69f8      	ldr	r0, [r7, #28]
 800cf14:	f002 fdba 	bl	800fa8c <pbuf_free>
 800cf18:	e000      	b.n	800cf1c <icmp_send_response+0xd4>
    return;
 800cf1a:	bf00      	nop
}
 800cf1c:	3720      	adds	r7, #32
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	0801a898 	.word	0x0801a898
 800cf28:	0801a9bc 	.word	0x0801a9bc
 800cf2c:	0801a960 	.word	0x0801a960

0800cf30 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b089      	sub	sp, #36	; 0x24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00d      	beq.n	800cf70 <lwip_standard_chksum+0x40>
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dd0a      	ble.n	800cf70 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cf5a:	69fa      	ldr	r2, [r7, #28]
 800cf5c:	1c53      	adds	r3, r2, #1
 800cf5e:	61fb      	str	r3, [r7, #28]
 800cf60:	f107 030e 	add.w	r3, r7, #14
 800cf64:	3301      	adds	r3, #1
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	701a      	strb	r2, [r3, #0]
    len--;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cf74:	e00a      	b.n	800cf8c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	1c9a      	adds	r2, r3, #2
 800cf7a:	61ba      	str	r2, [r7, #24]
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	4413      	add	r3, r2
 800cf84:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	3b02      	subs	r3, #2
 800cf8a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	dcf1      	bgt.n	800cf76 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	dd04      	ble.n	800cfa2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cf98:	f107 030e 	add.w	r3, r7, #14
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800cfa2:	89fb      	ldrh	r3, [r7, #14]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	0c1a      	lsrs	r2, r3, #16
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4413      	add	r3, r2
 800cfb6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	0c1a      	lsrs	r2, r3, #16
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	4413      	add	r3, r2
 800cfc2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d007      	beq.n	800cfda <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	021b      	lsls	r3, r3, #8
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	0a1b      	lsrs	r3, r3, #8
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	b29b      	uxth	r3, r3
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3724      	adds	r7, #36	; 0x24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b082      	sub	sp, #8
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	460b      	mov	r3, r1
 800cff4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800cff6:	887b      	ldrh	r3, [r7, #2]
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7ff ff98 	bl	800cf30 <lwip_standard_chksum>
 800d000:	4603      	mov	r3, r0
 800d002:	43db      	mvns	r3, r3
 800d004:	b29b      	uxth	r3, r3
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b086      	sub	sp, #24
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	613b      	str	r3, [r7, #16]
 800d022:	e02b      	b.n	800d07c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	895b      	ldrh	r3, [r3, #10]
 800d02c:	4619      	mov	r1, r3
 800d02e:	4610      	mov	r0, r2
 800d030:	f7ff ff7e 	bl	800cf30 <lwip_standard_chksum>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	4413      	add	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	0c1a      	lsrs	r2, r3, #16
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	b29b      	uxth	r3, r3
 800d046:	4413      	add	r3, r2
 800d048:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	895b      	ldrh	r3, [r3, #10]
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	b29b      	uxth	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00e      	beq.n	800d076 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bf0c      	ite	eq
 800d05e:	2301      	moveq	r3, #1
 800d060:	2300      	movne	r3, #0
 800d062:	b2db      	uxtb	r3, r3
 800d064:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	021b      	lsls	r3, r3, #8
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	0a1b      	lsrs	r3, r3, #8
 800d070:	b2db      	uxtb	r3, r3
 800d072:	4313      	orrs	r3, r2
 800d074:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	613b      	str	r3, [r7, #16]
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1d0      	bne.n	800d024 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d007      	beq.n	800d098 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	021b      	lsls	r3, r3, #8
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	0a1b      	lsrs	r3, r3, #8
 800d092:	b2db      	uxtb	r3, r3
 800d094:	4313      	orrs	r3, r2
 800d096:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	43db      	mvns	r3, r3
 800d09e:	b29b      	uxth	r3, r3
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3718      	adds	r7, #24
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d0b2:	f003 f961 	bl	8010378 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d0b6:	f001 f9ed 	bl	800e494 <mem_init>
  memp_init();
 800d0ba:	f001 fd35 	bl	800eb28 <memp_init>
  pbuf_init();
  netif_init();
 800d0be:	f001 fe60 	bl	800ed82 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d0c2:	f009 fdfb 	bl	8016cbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d0c6:	f003 f9d3 	bl	8010470 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d0ca:	f009 fd37 	bl	8016b3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800d0e0:	f7f8 fea6 	bl	8005e30 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d0e4:	4b32      	ldr	r3, [pc, #200]	; (800d1b0 <ip4_route+0xd8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60fb      	str	r3, [r7, #12]
 800d0ea:	e036      	b.n	800d15a <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d02b      	beq.n	800d154 <ip4_route+0x7c>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d102:	089b      	lsrs	r3, r3, #2
 800d104:	f003 0301 	and.w	r3, r3, #1
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d022      	beq.n	800d154 <ip4_route+0x7c>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3304      	adds	r3, #4
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d01d      	beq.n	800d154 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3304      	adds	r3, #4
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	405a      	eors	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3308      	adds	r3, #8
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4013      	ands	r3, r2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	e038      	b.n	800d1a6 <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d108      	bne.n	800d154 <ip4_route+0x7c>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	330c      	adds	r3, #12
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d101      	bne.n	800d154 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	e028      	b.n	800d1a6 <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1c5      	bne.n	800d0ec <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d160:	4b14      	ldr	r3, [pc, #80]	; (800d1b4 <ip4_route+0xdc>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d01a      	beq.n	800d19e <ip4_route+0xc6>
 800d168:	4b12      	ldr	r3, [pc, #72]	; (800d1b4 <ip4_route+0xdc>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d012      	beq.n	800d19e <ip4_route+0xc6>
 800d178:	4b0e      	ldr	r3, [pc, #56]	; (800d1b4 <ip4_route+0xdc>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d180:	f003 0304 	and.w	r3, r3, #4
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00a      	beq.n	800d19e <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <ip4_route+0xdc>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	3304      	adds	r3, #4
 800d18e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d190:	2b00      	cmp	r3, #0
 800d192:	d004      	beq.n	800d19e <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b7f      	cmp	r3, #127	; 0x7f
 800d19c:	d101      	bne.n	800d1a2 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e001      	b.n	800d1a6 <ip4_route+0xce>
  }

  return netif_default;
 800d1a2:	4b04      	ldr	r3, [pc, #16]	; (800d1b4 <ip4_route+0xdc>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	24010938 	.word	0x24010938
 800d1b4:	2401093c 	.word	0x2401093c

0800d1b8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d016      	beq.n	800d1fe <ip4_input_accept+0x46>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d011      	beq.n	800d1fe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d1da:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <ip4_input_accept+0x50>)
 800d1dc:	695a      	ldr	r2, [r3, #20]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d008      	beq.n	800d1fa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d1e8:	4b07      	ldr	r3, [pc, #28]	; (800d208 <ip4_input_accept+0x50>)
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 fa0c 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800d1f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	24009e78 	.word	0x24009e78

0800d20c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800d216:	f7f8 fe0b 	bl	8005e30 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	091b      	lsrs	r3, r3, #4
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b04      	cmp	r3, #4
 800d22a:	d004      	beq.n	800d236 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f002 fc2d 	bl	800fa8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	e107      	b.n	800d446 <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	f003 030f 	and.w	r3, r3, #15
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	b2db      	uxtb	r3, r3
 800d244:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	885b      	ldrh	r3, [r3, #2]
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fe fc63 	bl	800bb18 <lwip_htons>
 800d252:	4603      	mov	r3, r0
 800d254:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	891b      	ldrh	r3, [r3, #8]
 800d25a:	89ba      	ldrh	r2, [r7, #12]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d204      	bcs.n	800d26a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800d260:	89bb      	ldrh	r3, [r7, #12]
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f002 fa8d 	bl	800f784 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	895b      	ldrh	r3, [r3, #10]
 800d26e:	89fa      	ldrh	r2, [r7, #14]
 800d270:	429a      	cmp	r2, r3
 800d272:	d807      	bhi.n	800d284 <ip4_input+0x78>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	891b      	ldrh	r3, [r3, #8]
 800d278:	89ba      	ldrh	r2, [r7, #12]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d802      	bhi.n	800d284 <ip4_input+0x78>
 800d27e:	89fb      	ldrh	r3, [r7, #14]
 800d280:	2b13      	cmp	r3, #19
 800d282:	d804      	bhi.n	800d28e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f002 fc01 	bl	800fa8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d28a:	2300      	movs	r3, #0
 800d28c:	e0db      	b.n	800d446 <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	4a6f      	ldr	r2, [pc, #444]	; (800d450 <ip4_input+0x244>)
 800d294:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	4a6d      	ldr	r2, [pc, #436]	; (800d450 <ip4_input+0x244>)
 800d29c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d29e:	4b6c      	ldr	r3, [pc, #432]	; (800d450 <ip4_input+0x244>)
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2a6:	2be0      	cmp	r3, #224	; 0xe0
 800d2a8:	d112      	bne.n	800d2d0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d007      	beq.n	800d2ca <ip4_input+0xbe>
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <ip4_input+0xbe>
      netif = inp;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	613b      	str	r3, [r7, #16]
 800d2c8:	e02a      	b.n	800d320 <ip4_input+0x114>
    } else {
      netif = NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	613b      	str	r3, [r7, #16]
 800d2ce:	e027      	b.n	800d320 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d2d0:	6838      	ldr	r0, [r7, #0]
 800d2d2:	f7ff ff71 	bl	800d1b8 <ip4_input_accept>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <ip4_input+0xd6>
      netif = inp;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	613b      	str	r3, [r7, #16]
 800d2e0:	e01e      	b.n	800d320 <ip4_input+0x114>
    } else {
      netif = NULL;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d2e6:	4b5a      	ldr	r3, [pc, #360]	; (800d450 <ip4_input+0x244>)
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b7f      	cmp	r3, #127	; 0x7f
 800d2ee:	d017      	beq.n	800d320 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d2f0:	4b58      	ldr	r3, [pc, #352]	; (800d454 <ip4_input+0x248>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	613b      	str	r3, [r7, #16]
 800d2f6:	e00e      	b.n	800d316 <ip4_input+0x10a>
          if (netif == inp) {
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d006      	beq.n	800d30e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d300:	6938      	ldr	r0, [r7, #16]
 800d302:	f7ff ff59 	bl	800d1b8 <ip4_input_accept>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d108      	bne.n	800d31e <ip4_input+0x112>
 800d30c:	e000      	b.n	800d310 <ip4_input+0x104>
            continue;
 800d30e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	613b      	str	r3, [r7, #16]
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1ed      	bne.n	800d2f8 <ip4_input+0xec>
 800d31c:	e000      	b.n	800d320 <ip4_input+0x114>
            break;
 800d31e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d320:	4b4b      	ldr	r3, [pc, #300]	; (800d450 <ip4_input+0x244>)
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 f970 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d105      	bne.n	800d33e <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d332:	4b47      	ldr	r3, [pc, #284]	; (800d450 <ip4_input+0x244>)
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d33a:	2be0      	cmp	r3, #224	; 0xe0
 800d33c:	d104      	bne.n	800d348 <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f002 fba4 	bl	800fa8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	e07e      	b.n	800d446 <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d104      	bne.n	800d358 <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f002 fb9c 	bl	800fa8c <pbuf_free>
    return ERR_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	e076      	b.n	800d446 <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	88db      	ldrh	r3, [r3, #6]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	461a      	mov	r2, r3
 800d360:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d364:	4013      	ands	r3, r2
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00b      	beq.n	800d382 <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fc94 	bl	800dc98 <ip4_reass>
 800d370:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <ip4_input+0x170>
      return ERR_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	e064      	b.n	800d446 <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d382:	4a33      	ldr	r2, [pc, #204]	; (800d450 <ip4_input+0x244>)
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d388:	4a31      	ldr	r2, [pc, #196]	; (800d450 <ip4_input+0x244>)
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d38e:	4a30      	ldr	r2, [pc, #192]	; (800d450 <ip4_input+0x244>)
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 030f 	and.w	r3, r3, #15
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	4b2a      	ldr	r3, [pc, #168]	; (800d450 <ip4_input+0x244>)
 800d3a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d3a8:	89fb      	ldrh	r3, [r7, #14]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f002 fae7 	bl	800f980 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	7a5b      	ldrb	r3, [r3, #9]
 800d3b6:	2b11      	cmp	r3, #17
 800d3b8:	d006      	beq.n	800d3c8 <ip4_input+0x1bc>
 800d3ba:	2b11      	cmp	r3, #17
 800d3bc:	dc13      	bgt.n	800d3e6 <ip4_input+0x1da>
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d00c      	beq.n	800d3dc <ip4_input+0x1d0>
 800d3c2:	2b06      	cmp	r3, #6
 800d3c4:	d005      	beq.n	800d3d2 <ip4_input+0x1c6>
 800d3c6:	e00e      	b.n	800d3e6 <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f009 fd24 	bl	8016e18 <udp_input>
        break;
 800d3d0:	e026      	b.n	800d420 <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d3d2:	6839      	ldr	r1, [r7, #0]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f004 ff1f 	bl	8012218 <tcp_input>
        break;
 800d3da:	e021      	b.n	800d420 <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d3dc:	6839      	ldr	r1, [r7, #0]
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7ff fbf2 	bl	800cbc8 <icmp_input>
        break;
 800d3e4:	e01c      	b.n	800d420 <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d3e6:	4b1a      	ldr	r3, [pc, #104]	; (800d450 <ip4_input+0x244>)
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	6939      	ldr	r1, [r7, #16]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 f90d 	bl	800d60c <ip4_addr_isbroadcast_u32>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10f      	bne.n	800d418 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d3f8:	4b15      	ldr	r3, [pc, #84]	; (800d450 <ip4_input+0x244>)
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d400:	2be0      	cmp	r3, #224	; 0xe0
 800d402:	d009      	beq.n	800d418 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d408:	4619      	mov	r1, r3
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f002 fb2b 	bl	800fa66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d410:	2102      	movs	r1, #2
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7ff fcf8 	bl	800ce08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f002 fb37 	bl	800fa8c <pbuf_free>
        break;
 800d41e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d420:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <ip4_input+0x244>)
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d426:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <ip4_input+0x244>)
 800d428:	2200      	movs	r2, #0
 800d42a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d42c:	4b08      	ldr	r3, [pc, #32]	; (800d450 <ip4_input+0x244>)
 800d42e:	2200      	movs	r2, #0
 800d430:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d432:	4b07      	ldr	r3, [pc, #28]	; (800d450 <ip4_input+0x244>)
 800d434:	2200      	movs	r2, #0
 800d436:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d438:	4b05      	ldr	r3, [pc, #20]	; (800d450 <ip4_input+0x244>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d43e:	4b04      	ldr	r3, [pc, #16]	; (800d450 <ip4_input+0x244>)
 800d440:	2200      	movs	r2, #0
 800d442:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	24009e78 	.word	0x24009e78
 800d454:	24010938 	.word	0x24010938

0800d458 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	; 0x28
 800d45c:	af04      	add	r7, sp, #16
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d003      	beq.n	800d47e <ip4_output_if+0x26>
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	3304      	adds	r3, #4
 800d482:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d484:	78fa      	ldrb	r2, [r7, #3]
 800d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d488:	9302      	str	r3, [sp, #8]
 800d48a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d48e:	9301      	str	r3, [sp, #4]
 800d490:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	4613      	mov	r3, r2
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	6979      	ldr	r1, [r7, #20]
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 f805 	bl	800d4ac <ip4_output_if_src>
 800d4a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b088      	sub	sp, #32
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
 800d4b8:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800d4ba:	f7f8 fcb9 	bl	8005e30 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	7b9b      	ldrb	r3, [r3, #14]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d006      	beq.n	800d4d4 <ip4_output_if_src+0x28>
 800d4c6:	4b4b      	ldr	r3, [pc, #300]	; (800d5f4 <ip4_output_if_src+0x148>)
 800d4c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d4cc:	494a      	ldr	r1, [pc, #296]	; (800d5f8 <ip4_output_if_src+0x14c>)
 800d4ce:	484b      	ldr	r0, [pc, #300]	; (800d5fc <ip4_output_if_src+0x150>)
 800d4d0:	f00a fb4e 	bl	8017b70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d060      	beq.n	800d59c <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 800d4da:	2314      	movs	r3, #20
 800d4dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d4de:	2114      	movs	r1, #20
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f002 fa3d 	bl	800f960 <pbuf_add_header>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d4ec:	f06f 0301 	mvn.w	r3, #1
 800d4f0:	e07c      	b.n	800d5ec <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	895b      	ldrh	r3, [r3, #10]
 800d4fc:	2b13      	cmp	r3, #19
 800d4fe:	d806      	bhi.n	800d50e <ip4_output_if_src+0x62>
 800d500:	4b3c      	ldr	r3, [pc, #240]	; (800d5f4 <ip4_output_if_src+0x148>)
 800d502:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d506:	493e      	ldr	r1, [pc, #248]	; (800d600 <ip4_output_if_src+0x154>)
 800d508:	483c      	ldr	r0, [pc, #240]	; (800d5fc <ip4_output_if_src+0x150>)
 800d50a:	f00a fb31 	bl	8017b70 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	78fa      	ldrb	r2, [r7, #3]
 800d512:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d51a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d524:	8b7b      	ldrh	r3, [r7, #26]
 800d526:	089b      	lsrs	r3, r3, #2
 800d528:	b29b      	uxth	r3, r3
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d530:	b2da      	uxtb	r2, r3
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d53c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	891b      	ldrh	r3, [r3, #8]
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe fae8 	bl	800bb18 <lwip_htons>
 800d548:	4603      	mov	r3, r0
 800d54a:	461a      	mov	r2, r3
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	2200      	movs	r2, #0
 800d554:	719a      	strb	r2, [r3, #6]
 800d556:	2200      	movs	r2, #0
 800d558:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d55a:	4b2a      	ldr	r3, [pc, #168]	; (800d604 <ip4_output_if_src+0x158>)
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fada 	bl	800bb18 <lwip_htons>
 800d564:	4603      	mov	r3, r0
 800d566:	461a      	mov	r2, r3
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d56c:	4b25      	ldr	r3, [pc, #148]	; (800d604 <ip4_output_if_src+0x158>)
 800d56e:	881b      	ldrh	r3, [r3, #0]
 800d570:	3301      	adds	r3, #1
 800d572:	b29a      	uxth	r2, r3
 800d574:	4b23      	ldr	r3, [pc, #140]	; (800d604 <ip4_output_if_src+0x158>)
 800d576:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d104      	bne.n	800d588 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d57e:	4b22      	ldr	r3, [pc, #136]	; (800d608 <ip4_output_if_src+0x15c>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	60da      	str	r2, [r3, #12]
 800d586:	e003      	b.n	800d590 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	2200      	movs	r2, #0
 800d594:	729a      	strb	r2, [r3, #10]
 800d596:	2200      	movs	r2, #0
 800d598:	72da      	strb	r2, [r3, #11]
 800d59a:	e00f      	b.n	800d5bc <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	895b      	ldrh	r3, [r3, #10]
 800d5a0:	2b13      	cmp	r3, #19
 800d5a2:	d802      	bhi.n	800d5aa <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d5a4:	f06f 0301 	mvn.w	r3, #1
 800d5a8:	e020      	b.n	800d5ec <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d5b6:	f107 0314 	add.w	r3, r7, #20
 800d5ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00c      	beq.n	800d5de <ip4_output_if_src+0x132>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	891a      	ldrh	r2, [r3, #8]
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d906      	bls.n	800d5de <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f000 fd53 	bl	800e080 <ip4_frag>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	e006      	b.n	800d5ec <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	68f9      	ldr	r1, [r7, #12]
 800d5e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5e8:	4798      	blx	r3
 800d5ea:	4603      	mov	r3, r0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3720      	adds	r7, #32
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	0801a9e8 	.word	0x0801a9e8
 800d5f8:	0801aa78 	.word	0x0801aa78
 800d5fc:	0801aa84 	.word	0x0801aa84
 800d600:	0801aaac 	.word	0x0801aaac
 800d604:	24009e90 	.word	0x24009e90
 800d608:	0801d538 	.word	0x0801d538

0800d60c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d620:	d002      	beq.n	800d628 <ip4_addr_isbroadcast_u32+0x1c>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d101      	bne.n	800d62c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d628:	2301      	movs	r3, #1
 800d62a:	e02a      	b.n	800d682 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d632:	f003 0302 	and.w	r3, r3, #2
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	e021      	b.n	800d682 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	3304      	adds	r3, #4
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	429a      	cmp	r2, r3
 800d648:	d101      	bne.n	800d64e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d64a:	2300      	movs	r3, #0
 800d64c:	e019      	b.n	800d682 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	3304      	adds	r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	405a      	eors	r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4013      	ands	r3, r2
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10d      	bne.n	800d680 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	3308      	adds	r3, #8
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	43da      	mvns	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	3308      	adds	r3, #8
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d678:	429a      	cmp	r2, r3
 800d67a:	d101      	bne.n	800d680 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d67c:	2301      	movs	r3, #1
 800d67e:	e000      	b.n	800d682 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d680:	2300      	movs	r3, #0
  }
}
 800d682:	4618      	mov	r0, r3
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
	...

0800d690 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d696:	2300      	movs	r3, #0
 800d698:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d69a:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <ip_reass_tmr+0x54>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d6a0:	e018      	b.n	800d6d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	7fdb      	ldrb	r3, [r3, #31]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00b      	beq.n	800d6c2 <ip_reass_tmr+0x32>
      r->timer--;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	7fdb      	ldrb	r3, [r3, #31]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	e008      	b.n	800d6d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f80a 	bl	800d6e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1e3      	bne.n	800d6a2 <ip_reass_tmr+0x12>
    }
  }
}
 800d6da:	bf00      	nop
 800d6dc:	bf00      	nop
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	24009e94 	.word	0x24009e94

0800d6e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d105      	bne.n	800d70a <ip_reass_free_complete_datagram+0x22>
 800d6fe:	4b45      	ldr	r3, [pc, #276]	; (800d814 <ip_reass_free_complete_datagram+0x12c>)
 800d700:	22ab      	movs	r2, #171	; 0xab
 800d702:	4945      	ldr	r1, [pc, #276]	; (800d818 <ip_reass_free_complete_datagram+0x130>)
 800d704:	4845      	ldr	r0, [pc, #276]	; (800d81c <ip_reass_free_complete_datagram+0x134>)
 800d706:	f00a fa33 	bl	8017b70 <iprintf>
  if (prev != NULL) {
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00a      	beq.n	800d726 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d005      	beq.n	800d726 <ip_reass_free_complete_datagram+0x3e>
 800d71a:	4b3e      	ldr	r3, [pc, #248]	; (800d814 <ip_reass_free_complete_datagram+0x12c>)
 800d71c:	22ad      	movs	r2, #173	; 0xad
 800d71e:	4940      	ldr	r1, [pc, #256]	; (800d820 <ip_reass_free_complete_datagram+0x138>)
 800d720:	483e      	ldr	r0, [pc, #248]	; (800d81c <ip_reass_free_complete_datagram+0x134>)
 800d722:	f00a fa25 	bl	8017b70 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	889b      	ldrh	r3, [r3, #4]
 800d732:	b29b      	uxth	r3, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	d12a      	bne.n	800d78e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	6858      	ldr	r0, [r3, #4]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3308      	adds	r3, #8
 800d74e:	2214      	movs	r2, #20
 800d750:	4619      	mov	r1, r3
 800d752:	f00a f948 	bl	80179e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d756:	2101      	movs	r1, #1
 800d758:	69b8      	ldr	r0, [r7, #24]
 800d75a:	f7ff fb65 	bl	800ce28 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d75e:	69b8      	ldr	r0, [r7, #24]
 800d760:	f002 fa22 	bl	800fba8 <pbuf_clen>
 800d764:	4603      	mov	r3, r0
 800d766:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d768:	8bfa      	ldrh	r2, [r7, #30]
 800d76a:	8a7b      	ldrh	r3, [r7, #18]
 800d76c:	4413      	add	r3, r2
 800d76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d772:	db05      	blt.n	800d780 <ip_reass_free_complete_datagram+0x98>
 800d774:	4b27      	ldr	r3, [pc, #156]	; (800d814 <ip_reass_free_complete_datagram+0x12c>)
 800d776:	22bc      	movs	r2, #188	; 0xbc
 800d778:	492a      	ldr	r1, [pc, #168]	; (800d824 <ip_reass_free_complete_datagram+0x13c>)
 800d77a:	4828      	ldr	r0, [pc, #160]	; (800d81c <ip_reass_free_complete_datagram+0x134>)
 800d77c:	f00a f9f8 	bl	8017b70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d780:	8bfa      	ldrh	r2, [r7, #30]
 800d782:	8a7b      	ldrh	r3, [r7, #18]
 800d784:	4413      	add	r3, r2
 800d786:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d788:	69b8      	ldr	r0, [r7, #24]
 800d78a:	f002 f97f 	bl	800fa8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d794:	e01f      	b.n	800d7d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f002 f9fe 	bl	800fba8 <pbuf_clen>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d7b0:	8bfa      	ldrh	r2, [r7, #30]
 800d7b2:	8a7b      	ldrh	r3, [r7, #18]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7ba:	db05      	blt.n	800d7c8 <ip_reass_free_complete_datagram+0xe0>
 800d7bc:	4b15      	ldr	r3, [pc, #84]	; (800d814 <ip_reass_free_complete_datagram+0x12c>)
 800d7be:	22cc      	movs	r2, #204	; 0xcc
 800d7c0:	4918      	ldr	r1, [pc, #96]	; (800d824 <ip_reass_free_complete_datagram+0x13c>)
 800d7c2:	4816      	ldr	r0, [pc, #88]	; (800d81c <ip_reass_free_complete_datagram+0x134>)
 800d7c4:	f00a f9d4 	bl	8017b70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d7c8:	8bfa      	ldrh	r2, [r7, #30]
 800d7ca:	8a7b      	ldrh	r3, [r7, #18]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f002 f95b 	bl	800fa8c <pbuf_free>
  while (p != NULL) {
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1dc      	bne.n	800d796 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f8c2 	bl	800d968 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d7e4:	4b10      	ldr	r3, [pc, #64]	; (800d828 <ip_reass_free_complete_datagram+0x140>)
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	8bfa      	ldrh	r2, [r7, #30]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d905      	bls.n	800d7fa <ip_reass_free_complete_datagram+0x112>
 800d7ee:	4b09      	ldr	r3, [pc, #36]	; (800d814 <ip_reass_free_complete_datagram+0x12c>)
 800d7f0:	22d2      	movs	r2, #210	; 0xd2
 800d7f2:	490e      	ldr	r1, [pc, #56]	; (800d82c <ip_reass_free_complete_datagram+0x144>)
 800d7f4:	4809      	ldr	r0, [pc, #36]	; (800d81c <ip_reass_free_complete_datagram+0x134>)
 800d7f6:	f00a f9bb 	bl	8017b70 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <ip_reass_free_complete_datagram+0x140>)
 800d7fc:	881a      	ldrh	r2, [r3, #0]
 800d7fe:	8bfb      	ldrh	r3, [r7, #30]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	b29a      	uxth	r2, r3
 800d804:	4b08      	ldr	r3, [pc, #32]	; (800d828 <ip_reass_free_complete_datagram+0x140>)
 800d806:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d808:	8bfb      	ldrh	r3, [r7, #30]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	0801aadc 	.word	0x0801aadc
 800d818:	0801ab70 	.word	0x0801ab70
 800d81c:	0801ab7c 	.word	0x0801ab7c
 800d820:	0801aba4 	.word	0x0801aba4
 800d824:	0801abb8 	.word	0x0801abb8
 800d828:	24009e98 	.word	0x24009e98
 800d82c:	0801abd8 	.word	0x0801abd8

0800d830 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08a      	sub	sp, #40	; 0x28
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d842:	2300      	movs	r3, #0
 800d844:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d846:	2300      	movs	r3, #0
 800d848:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d84e:	4b28      	ldr	r3, [pc, #160]	; (800d8f0 <ip_reass_remove_oldest_datagram+0xc0>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d854:	e030      	b.n	800d8b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	695a      	ldr	r2, [r3, #20]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d10c      	bne.n	800d87c <ip_reass_remove_oldest_datagram+0x4c>
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	699a      	ldr	r2, [r3, #24]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d106      	bne.n	800d87c <ip_reass_remove_oldest_datagram+0x4c>
 800d86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d870:	899a      	ldrh	r2, [r3, #12]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	889b      	ldrh	r3, [r3, #4]
 800d876:	b29b      	uxth	r3, r3
 800d878:	429a      	cmp	r2, r3
 800d87a:	d014      	beq.n	800d8a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	3301      	adds	r3, #1
 800d880:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d882:	6a3b      	ldr	r3, [r7, #32]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d104      	bne.n	800d892 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	61bb      	str	r3, [r7, #24]
 800d890:	e009      	b.n	800d8a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	7fda      	ldrb	r2, [r3, #31]
 800d896:	6a3b      	ldr	r3, [r7, #32]
 800d898:	7fdb      	ldrb	r3, [r3, #31]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d803      	bhi.n	800d8a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d001      	beq.n	800d8b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1cb      	bne.n	800d856 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d008      	beq.n	800d8d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d8c4:	69b9      	ldr	r1, [r7, #24]
 800d8c6:	6a38      	ldr	r0, [r7, #32]
 800d8c8:	f7ff ff0e 	bl	800d6e8 <ip_reass_free_complete_datagram>
 800d8cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	da02      	bge.n	800d8e4 <ip_reass_remove_oldest_datagram+0xb4>
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	dcac      	bgt.n	800d83e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d8e4:	697b      	ldr	r3, [r7, #20]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3728      	adds	r7, #40	; 0x28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	24009e94 	.word	0x24009e94

0800d8f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d8fe:	2004      	movs	r0, #4
 800d900:	f001 f980 	bl	800ec04 <memp_malloc>
 800d904:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d110      	bne.n	800d92e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7ff ff8e 	bl	800d830 <ip_reass_remove_oldest_datagram>
 800d914:	4602      	mov	r2, r0
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	4293      	cmp	r3, r2
 800d91a:	dc03      	bgt.n	800d924 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d91c:	2004      	movs	r0, #4
 800d91e:	f001 f971 	bl	800ec04 <memp_malloc>
 800d922:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d92a:	2300      	movs	r3, #0
 800d92c:	e016      	b.n	800d95c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d92e:	2220      	movs	r2, #32
 800d930:	2100      	movs	r1, #0
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f00a f87f 	bl	8017a36 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	220f      	movs	r2, #15
 800d93c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <ip_reass_enqueue_new_datagram+0x70>)
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d946:	4a07      	ldr	r2, [pc, #28]	; (800d964 <ip_reass_enqueue_new_datagram+0x70>)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	3308      	adds	r3, #8
 800d950:	2214      	movs	r2, #20
 800d952:	6879      	ldr	r1, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f00a f846 	bl	80179e6 <memcpy>
  return ipr;
 800d95a:	68fb      	ldr	r3, [r7, #12]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	24009e94 	.word	0x24009e94

0800d968 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d972:	4b10      	ldr	r3, [pc, #64]	; (800d9b4 <ip_reass_dequeue_datagram+0x4c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d104      	bne.n	800d986 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a0c      	ldr	r2, [pc, #48]	; (800d9b4 <ip_reass_dequeue_datagram+0x4c>)
 800d982:	6013      	str	r3, [r2, #0]
 800d984:	e00d      	b.n	800d9a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <ip_reass_dequeue_datagram+0x32>
 800d98c:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <ip_reass_dequeue_datagram+0x50>)
 800d98e:	f240 1245 	movw	r2, #325	; 0x145
 800d992:	490a      	ldr	r1, [pc, #40]	; (800d9bc <ip_reass_dequeue_datagram+0x54>)
 800d994:	480a      	ldr	r0, [pc, #40]	; (800d9c0 <ip_reass_dequeue_datagram+0x58>)
 800d996:	f00a f8eb 	bl	8017b70 <iprintf>
    prev->next = ipr->next;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	2004      	movs	r0, #4
 800d9a6:	f001 f9a3 	bl	800ecf0 <memp_free>
}
 800d9aa:	bf00      	nop
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	24009e94 	.word	0x24009e94
 800d9b8:	0801aadc 	.word	0x0801aadc
 800d9bc:	0801abfc 	.word	0x0801abfc
 800d9c0:	0801ab7c 	.word	0x0801ab7c

0800d9c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08c      	sub	sp, #48	; 0x30
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	885b      	ldrh	r3, [r3, #2]
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7fe f897 	bl	800bb18 <lwip_htons>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	f003 030f 	and.w	r3, r3, #15
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d9fc:	7e7b      	ldrb	r3, [r7, #25]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	8b7a      	ldrh	r2, [r7, #26]
 800da02:	429a      	cmp	r2, r3
 800da04:	d202      	bcs.n	800da0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	e135      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800da0c:	7e7b      	ldrb	r3, [r7, #25]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	8b7a      	ldrh	r2, [r7, #26]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	88db      	ldrh	r3, [r3, #6]
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe f87b 	bl	800bb18 <lwip_htons>
 800da22:	4603      	mov	r3, r0
 800da24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da28:	b29b      	uxth	r3, r3
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	2200      	movs	r2, #0
 800da38:	701a      	strb	r2, [r3, #0]
 800da3a:	2200      	movs	r2, #0
 800da3c:	705a      	strb	r2, [r3, #1]
 800da3e:	2200      	movs	r2, #0
 800da40:	709a      	strb	r2, [r3, #2]
 800da42:	2200      	movs	r2, #0
 800da44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	8afa      	ldrh	r2, [r7, #22]
 800da4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800da4c:	8afa      	ldrh	r2, [r7, #22]
 800da4e:	8b7b      	ldrh	r3, [r7, #26]
 800da50:	4413      	add	r3, r2
 800da52:	b29a      	uxth	r2, r3
 800da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	88db      	ldrh	r3, [r3, #6]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	8afa      	ldrh	r2, [r7, #22]
 800da60:	429a      	cmp	r2, r3
 800da62:	d902      	bls.n	800da6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da64:	f04f 33ff 	mov.w	r3, #4294967295
 800da68:	e106      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
 800da70:	e068      	b.n	800db44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	889b      	ldrh	r3, [r3, #4]
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	889b      	ldrh	r3, [r3, #4]
 800da82:	b29b      	uxth	r3, r3
 800da84:	429a      	cmp	r2, r3
 800da86:	d235      	bcs.n	800daf4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800da88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	2b00      	cmp	r3, #0
 800da92:	d020      	beq.n	800dad6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	889b      	ldrh	r3, [r3, #4]
 800da98:	b29a      	uxth	r2, r3
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	88db      	ldrh	r3, [r3, #6]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d307      	bcc.n	800dab4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	88db      	ldrh	r3, [r3, #6]
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	889b      	ldrh	r3, [r3, #4]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d902      	bls.n	800daba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dab4:	f04f 33ff 	mov.w	r3, #4294967295
 800dab8:	e0de      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	88db      	ldrh	r3, [r3, #6]
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac8:	889b      	ldrh	r3, [r3, #4]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	429a      	cmp	r2, r3
 800dace:	d03d      	beq.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dad4:	e03a      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad8:	88db      	ldrh	r3, [r3, #6]
 800dada:	b29a      	uxth	r2, r3
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	889b      	ldrh	r3, [r3, #4]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d902      	bls.n	800daec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dae6:	f04f 33ff 	mov.w	r3, #4294967295
 800daea:	e0c5      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	605a      	str	r2, [r3, #4]
      break;
 800daf2:	e02b      	b.n	800db4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	889b      	ldrh	r3, [r3, #4]
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	889b      	ldrh	r3, [r3, #4]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	429a      	cmp	r2, r3
 800db02:	d102      	bne.n	800db0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db04:	f04f 33ff 	mov.w	r3, #4294967295
 800db08:	e0b6      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	889b      	ldrh	r3, [r3, #4]
 800db0e:	b29a      	uxth	r2, r3
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	88db      	ldrh	r3, [r3, #6]
 800db14:	b29b      	uxth	r3, r3
 800db16:	429a      	cmp	r2, r3
 800db18:	d202      	bcs.n	800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db1a:	f04f 33ff 	mov.w	r3, #4294967295
 800db1e:	e0ab      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	2b00      	cmp	r3, #0
 800db24:	d009      	beq.n	800db3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	88db      	ldrh	r3, [r3, #6]
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	889b      	ldrh	r3, [r3, #4]
 800db30:	b29b      	uxth	r3, r3
 800db32:	429a      	cmp	r2, r3
 800db34:	d001      	beq.n	800db3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	2b00      	cmp	r3, #0
 800db48:	d193      	bne.n	800da72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800db4a:	e000      	b.n	800db4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800db4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db50:	2b00      	cmp	r3, #0
 800db52:	d12d      	bne.n	800dbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800db54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db56:	2b00      	cmp	r3, #0
 800db58:	d01c      	beq.n	800db94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800db5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5c:	88db      	ldrh	r3, [r3, #6]
 800db5e:	b29a      	uxth	r2, r3
 800db60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db62:	889b      	ldrh	r3, [r3, #4]
 800db64:	b29b      	uxth	r3, r3
 800db66:	429a      	cmp	r2, r3
 800db68:	d906      	bls.n	800db78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800db6a:	4b45      	ldr	r3, [pc, #276]	; (800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800db70:	4944      	ldr	r1, [pc, #272]	; (800dc84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800db72:	4845      	ldr	r0, [pc, #276]	; (800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db74:	f009 fffc 	bl	8017b70 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800db7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db80:	88db      	ldrh	r3, [r3, #6]
 800db82:	b29a      	uxth	r2, r3
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	889b      	ldrh	r3, [r3, #4]
 800db88:	b29b      	uxth	r3, r3
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d010      	beq.n	800dbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	623b      	str	r3, [r7, #32]
 800db92:	e00d      	b.n	800dbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d006      	beq.n	800dbaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800db9c:	4b38      	ldr	r3, [pc, #224]	; (800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dba2:	493a      	ldr	r1, [pc, #232]	; (800dc8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dba4:	4838      	ldr	r0, [pc, #224]	; (800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dba6:	f009 ffe3 	bl	8017b70 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	7f9b      	ldrb	r3, [r3, #30]
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d059      	beq.n	800dc76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dbc2:	6a3b      	ldr	r3, [r7, #32]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d04f      	beq.n	800dc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d006      	beq.n	800dbde <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	889b      	ldrh	r3, [r3, #4]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d002      	beq.n	800dbe4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	623b      	str	r3, [r7, #32]
 800dbe2:	e041      	b.n	800dc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dbee:	e012      	b.n	800dc16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	88db      	ldrh	r3, [r3, #6]
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	889b      	ldrh	r3, [r3, #4]
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d002      	beq.n	800dc0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	623b      	str	r3, [r7, #32]
            break;
 800dc0a:	e007      	b.n	800dc1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e9      	bne.n	800dbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d022      	beq.n	800dc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d106      	bne.n	800dc38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dc2a:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc2c:	f240 12df 	movw	r2, #479	; 0x1df
 800dc30:	4917      	ldr	r1, [pc, #92]	; (800dc90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dc32:	4815      	ldr	r0, [pc, #84]	; (800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc34:	f009 ff9c 	bl	8017b70 <iprintf>
          LWIP_ASSERT("sanity check",
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d106      	bne.n	800dc52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dc44:	4b0e      	ldr	r3, [pc, #56]	; (800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dc4a:	4911      	ldr	r1, [pc, #68]	; (800dc90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dc4c:	480e      	ldr	r0, [pc, #56]	; (800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc4e:	f009 ff8f 	bl	8017b70 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d006      	beq.n	800dc68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dc5a:	4b09      	ldr	r3, [pc, #36]	; (800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc5c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dc60:	490c      	ldr	r1, [pc, #48]	; (800dc94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dc62:	4809      	ldr	r0, [pc, #36]	; (800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc64:	f009 ff84 	bl	8017b70 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	bf14      	ite	ne
 800dc6e:	2301      	movne	r3, #1
 800dc70:	2300      	moveq	r3, #0
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	e000      	b.n	800dc78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3730      	adds	r7, #48	; 0x30
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0801aadc 	.word	0x0801aadc
 800dc84:	0801ac18 	.word	0x0801ac18
 800dc88:	0801ab7c 	.word	0x0801ab7c
 800dc8c:	0801ac38 	.word	0x0801ac38
 800dc90:	0801ac70 	.word	0x0801ac70
 800dc94:	0801ac80 	.word	0x0801ac80

0800dc98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08e      	sub	sp, #56	; 0x38
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	f003 030f 	and.w	r3, r3, #15
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b14      	cmp	r3, #20
 800dcb6:	f040 8171 	bne.w	800df9c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	88db      	ldrh	r3, [r3, #6]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fd ff29 	bl	800bb18 <lwip_htons>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	885b      	ldrh	r3, [r3, #2]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fd ff1d 	bl	800bb18 <lwip_htons>
 800dcde:	4603      	mov	r3, r0
 800dce0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 030f 	and.w	r3, r3, #15
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dcf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	f0c0 8150 	bcc.w	800dfa0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dd00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f001 ff4b 	bl	800fba8 <pbuf_clen>
 800dd12:	4603      	mov	r3, r0
 800dd14:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dd16:	4b8c      	ldr	r3, [pc, #560]	; (800df48 <ip4_reass+0x2b0>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	8c3b      	ldrh	r3, [r7, #32]
 800dd1e:	4413      	add	r3, r2
 800dd20:	2b0a      	cmp	r3, #10
 800dd22:	dd10      	ble.n	800dd46 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dd24:	8c3b      	ldrh	r3, [r7, #32]
 800dd26:	4619      	mov	r1, r3
 800dd28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd2a:	f7ff fd81 	bl	800d830 <ip_reass_remove_oldest_datagram>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f000 8137 	beq.w	800dfa4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dd36:	4b84      	ldr	r3, [pc, #528]	; (800df48 <ip4_reass+0x2b0>)
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	8c3b      	ldrh	r3, [r7, #32]
 800dd3e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dd40:	2b0a      	cmp	r3, #10
 800dd42:	f300 812f 	bgt.w	800dfa4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dd46:	4b81      	ldr	r3, [pc, #516]	; (800df4c <ip4_reass+0x2b4>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	633b      	str	r3, [r7, #48]	; 0x30
 800dd4c:	e015      	b.n	800dd7a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	695a      	ldr	r2, [r3, #20]
 800dd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d10c      	bne.n	800dd74 <ip4_reass+0xdc>
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	699a      	ldr	r2, [r3, #24]
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d106      	bne.n	800dd74 <ip4_reass+0xdc>
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	899a      	ldrh	r2, [r3, #12]
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	889b      	ldrh	r3, [r3, #4]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d006      	beq.n	800dd82 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	633b      	str	r3, [r7, #48]	; 0x30
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e6      	bne.n	800dd4e <ip4_reass+0xb6>
 800dd80:	e000      	b.n	800dd84 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dd82:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d109      	bne.n	800dd9e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dd8a:	8c3b      	ldrh	r3, [r7, #32]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd90:	f7ff fdb0 	bl	800d8f4 <ip_reass_enqueue_new_datagram>
 800dd94:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d11c      	bne.n	800ddd6 <ip4_reass+0x13e>
      goto nullreturn;
 800dd9c:	e105      	b.n	800dfaa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda0:	88db      	ldrh	r3, [r3, #6]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fd feb7 	bl	800bb18 <lwip_htons>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d110      	bne.n	800ddd6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb6:	89db      	ldrh	r3, [r3, #14]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fd fead 	bl	800bb18 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d006      	beq.n	800ddd6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	3308      	adds	r3, #8
 800ddcc:	2214      	movs	r2, #20
 800ddce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f009 fe08 	bl	80179e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd8:	88db      	ldrh	r3, [r3, #6]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	f003 0320 	and.w	r3, r3, #32
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bf0c      	ite	eq
 800dde4:	2301      	moveq	r3, #1
 800dde6:	2300      	movne	r3, #0
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00e      	beq.n	800de10 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ddf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ddf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddf6:	4413      	add	r3, r2
 800ddf8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ddfa:	8b7a      	ldrh	r2, [r7, #26]
 800ddfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ddfe:	429a      	cmp	r2, r3
 800de00:	f0c0 80a0 	bcc.w	800df44 <ip4_reass+0x2ac>
 800de04:	8b7b      	ldrh	r3, [r7, #26]
 800de06:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800de0a:	4293      	cmp	r3, r2
 800de0c:	f200 809a 	bhi.w	800df44 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800de10:	69fa      	ldr	r2, [r7, #28]
 800de12:	6879      	ldr	r1, [r7, #4]
 800de14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de16:	f7ff fdd5 	bl	800d9c4 <ip_reass_chain_frag_into_datagram_and_validate>
 800de1a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de22:	f000 809b 	beq.w	800df5c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800de26:	4b48      	ldr	r3, [pc, #288]	; (800df48 <ip4_reass+0x2b0>)
 800de28:	881a      	ldrh	r2, [r3, #0]
 800de2a:	8c3b      	ldrh	r3, [r7, #32]
 800de2c:	4413      	add	r3, r2
 800de2e:	b29a      	uxth	r2, r3
 800de30:	4b45      	ldr	r3, [pc, #276]	; (800df48 <ip4_reass+0x2b0>)
 800de32:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00d      	beq.n	800de56 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800de3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de3e:	4413      	add	r3, r2
 800de40:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de44:	8a7a      	ldrh	r2, [r7, #18]
 800de46:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	7f9b      	ldrb	r3, [r3, #30]
 800de4c:	f043 0301 	orr.w	r3, r3, #1
 800de50:	b2da      	uxtb	r2, r3
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d171      	bne.n	800df40 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	8b9b      	ldrh	r3, [r3, #28]
 800de60:	3314      	adds	r3, #20
 800de62:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	3308      	adds	r3, #8
 800de7a:	2214      	movs	r2, #20
 800de7c:	4619      	mov	r1, r3
 800de7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de80:	f009 fdb1 	bl	80179e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800de84:	8a3b      	ldrh	r3, [r7, #16]
 800de86:	4618      	mov	r0, r3
 800de88:	f7fd fe46 	bl	800bb18 <lwip_htons>
 800de8c:	4603      	mov	r3, r0
 800de8e:	461a      	mov	r2, r3
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	2200      	movs	r2, #0
 800de98:	719a      	strb	r2, [r3, #6]
 800de9a:	2200      	movs	r2, #0
 800de9c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	2200      	movs	r2, #0
 800dea2:	729a      	strb	r2, [r3, #10]
 800dea4:	2200      	movs	r2, #0
 800dea6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800deae:	e00d      	b.n	800decc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800deb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800deb6:	2114      	movs	r1, #20
 800deb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800deba:	f001 fd61 	bl	800f980 <pbuf_remove_header>
      pbuf_cat(p, r);
 800debe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f001 feb1 	bl	800fc28 <pbuf_cat>
      r = iprh->next_pbuf;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800decc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1ee      	bne.n	800deb0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ded2:	4b1e      	ldr	r3, [pc, #120]	; (800df4c <ip4_reass+0x2b4>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded8:	429a      	cmp	r2, r3
 800deda:	d102      	bne.n	800dee2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dedc:	2300      	movs	r3, #0
 800dede:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dee0:	e010      	b.n	800df04 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dee2:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <ip4_reass+0x2b4>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dee8:	e007      	b.n	800defa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def0:	429a      	cmp	r2, r3
 800def2:	d006      	beq.n	800df02 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1f4      	bne.n	800deea <ip4_reass+0x252>
 800df00:	e000      	b.n	800df04 <ip4_reass+0x26c>
          break;
 800df02:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800df04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df08:	f7ff fd2e 	bl	800d968 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f001 fe4b 	bl	800fba8 <pbuf_clen>
 800df12:	4603      	mov	r3, r0
 800df14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800df16:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <ip4_reass+0x2b0>)
 800df18:	881b      	ldrh	r3, [r3, #0]
 800df1a:	8c3a      	ldrh	r2, [r7, #32]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d906      	bls.n	800df2e <ip4_reass+0x296>
 800df20:	4b0b      	ldr	r3, [pc, #44]	; (800df50 <ip4_reass+0x2b8>)
 800df22:	f240 229b 	movw	r2, #667	; 0x29b
 800df26:	490b      	ldr	r1, [pc, #44]	; (800df54 <ip4_reass+0x2bc>)
 800df28:	480b      	ldr	r0, [pc, #44]	; (800df58 <ip4_reass+0x2c0>)
 800df2a:	f009 fe21 	bl	8017b70 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800df2e:	4b06      	ldr	r3, [pc, #24]	; (800df48 <ip4_reass+0x2b0>)
 800df30:	881a      	ldrh	r2, [r3, #0]
 800df32:	8c3b      	ldrh	r3, [r7, #32]
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	b29a      	uxth	r2, r3
 800df38:	4b03      	ldr	r3, [pc, #12]	; (800df48 <ip4_reass+0x2b0>)
 800df3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	e038      	b.n	800dfb2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800df40:	2300      	movs	r3, #0
 800df42:	e036      	b.n	800dfb2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800df44:	bf00      	nop
 800df46:	e00a      	b.n	800df5e <ip4_reass+0x2c6>
 800df48:	24009e98 	.word	0x24009e98
 800df4c:	24009e94 	.word	0x24009e94
 800df50:	0801aadc 	.word	0x0801aadc
 800df54:	0801aca4 	.word	0x0801aca4
 800df58:	0801ab7c 	.word	0x0801ab7c
    goto nullreturn_ipr;
 800df5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	2b00      	cmp	r3, #0
 800df62:	d106      	bne.n	800df72 <ip4_reass+0x2da>
 800df64:	4b15      	ldr	r3, [pc, #84]	; (800dfbc <ip4_reass+0x324>)
 800df66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800df6a:	4915      	ldr	r1, [pc, #84]	; (800dfc0 <ip4_reass+0x328>)
 800df6c:	4815      	ldr	r0, [pc, #84]	; (800dfc4 <ip4_reass+0x32c>)
 800df6e:	f009 fdff 	bl	8017b70 <iprintf>
  if (ipr->p == NULL) {
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d116      	bne.n	800dfa8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800df7a:	4b13      	ldr	r3, [pc, #76]	; (800dfc8 <ip4_reass+0x330>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df80:	429a      	cmp	r2, r3
 800df82:	d006      	beq.n	800df92 <ip4_reass+0x2fa>
 800df84:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <ip4_reass+0x324>)
 800df86:	f240 22ab 	movw	r2, #683	; 0x2ab
 800df8a:	4910      	ldr	r1, [pc, #64]	; (800dfcc <ip4_reass+0x334>)
 800df8c:	480d      	ldr	r0, [pc, #52]	; (800dfc4 <ip4_reass+0x32c>)
 800df8e:	f009 fdef 	bl	8017b70 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800df92:	2100      	movs	r1, #0
 800df94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df96:	f7ff fce7 	bl	800d968 <ip_reass_dequeue_datagram>
 800df9a:	e006      	b.n	800dfaa <ip4_reass+0x312>
    goto nullreturn;
 800df9c:	bf00      	nop
 800df9e:	e004      	b.n	800dfaa <ip4_reass+0x312>
    goto nullreturn;
 800dfa0:	bf00      	nop
 800dfa2:	e002      	b.n	800dfaa <ip4_reass+0x312>
      goto nullreturn;
 800dfa4:	bf00      	nop
 800dfa6:	e000      	b.n	800dfaa <ip4_reass+0x312>
  }

nullreturn:
 800dfa8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f001 fd6e 	bl	800fa8c <pbuf_free>
  return NULL;
 800dfb0:	2300      	movs	r3, #0
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3738      	adds	r7, #56	; 0x38
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	0801aadc 	.word	0x0801aadc
 800dfc0:	0801acc0 	.word	0x0801acc0
 800dfc4:	0801ab7c 	.word	0x0801ab7c
 800dfc8:	24009e94 	.word	0x24009e94
 800dfcc:	0801accc 	.word	0x0801accc

0800dfd0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dfd4:	2005      	movs	r0, #5
 800dfd6:	f000 fe15 	bl	800ec04 <memp_malloc>
 800dfda:	4603      	mov	r3, r0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <ip_frag_free_pbuf_custom_ref+0x1c>
 800dfee:	4b07      	ldr	r3, [pc, #28]	; (800e00c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dff0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dff4:	4906      	ldr	r1, [pc, #24]	; (800e010 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dff6:	4807      	ldr	r0, [pc, #28]	; (800e014 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dff8:	f009 fdba 	bl	8017b70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dffc:	6879      	ldr	r1, [r7, #4]
 800dffe:	2005      	movs	r0, #5
 800e000:	f000 fe76 	bl	800ecf0 <memp_free>
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	0801aadc 	.word	0x0801aadc
 800e010:	0801acec 	.word	0x0801acec
 800e014:	0801ab7c 	.word	0x0801ab7c

0800e018 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <ipfrag_free_pbuf_custom+0x20>
 800e02a:	4b11      	ldr	r3, [pc, #68]	; (800e070 <ipfrag_free_pbuf_custom+0x58>)
 800e02c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e030:	4910      	ldr	r1, [pc, #64]	; (800e074 <ipfrag_free_pbuf_custom+0x5c>)
 800e032:	4811      	ldr	r0, [pc, #68]	; (800e078 <ipfrag_free_pbuf_custom+0x60>)
 800e034:	f009 fd9c 	bl	8017b70 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d006      	beq.n	800e04e <ipfrag_free_pbuf_custom+0x36>
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <ipfrag_free_pbuf_custom+0x58>)
 800e042:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e046:	490d      	ldr	r1, [pc, #52]	; (800e07c <ipfrag_free_pbuf_custom+0x64>)
 800e048:	480b      	ldr	r0, [pc, #44]	; (800e078 <ipfrag_free_pbuf_custom+0x60>)
 800e04a:	f009 fd91 	bl	8017b70 <iprintf>
  if (pcr->original != NULL) {
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d004      	beq.n	800e060 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	695b      	ldr	r3, [r3, #20]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f001 fd16 	bl	800fa8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7ff ffbd 	bl	800dfe0 <ip_frag_free_pbuf_custom_ref>
}
 800e066:	bf00      	nop
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	0801aadc 	.word	0x0801aadc
 800e074:	0801acf8 	.word	0x0801acf8
 800e078:	0801ab7c 	.word	0x0801ab7c
 800e07c:	0801ad04 	.word	0x0801ad04

0800e080 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b094      	sub	sp, #80	; 0x50
 800e084:	af02      	add	r7, sp, #8
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e096:	3b14      	subs	r3, #20
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da00      	bge.n	800e09e <ip4_frag+0x1e>
 800e09c:	3307      	adds	r3, #7
 800e09e:	10db      	asrs	r3, r3, #3
 800e0a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e0a2:	2314      	movs	r3, #20
 800e0a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 030f 	and.w	r3, r3, #15
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b14      	cmp	r3, #20
 800e0c0:	d002      	beq.n	800e0c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e0c2:	f06f 0305 	mvn.w	r3, #5
 800e0c6:	e110      	b.n	800e2ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	895b      	ldrh	r3, [r3, #10]
 800e0cc:	2b13      	cmp	r3, #19
 800e0ce:	d809      	bhi.n	800e0e4 <ip4_frag+0x64>
 800e0d0:	4b88      	ldr	r3, [pc, #544]	; (800e2f4 <ip4_frag+0x274>)
 800e0d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e0d6:	4988      	ldr	r1, [pc, #544]	; (800e2f8 <ip4_frag+0x278>)
 800e0d8:	4888      	ldr	r0, [pc, #544]	; (800e2fc <ip4_frag+0x27c>)
 800e0da:	f009 fd49 	bl	8017b70 <iprintf>
 800e0de:	f06f 0305 	mvn.w	r3, #5
 800e0e2:	e102      	b.n	800e2ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e6:	88db      	ldrh	r3, [r3, #6]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fd fd14 	bl	800bb18 <lwip_htons>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e0f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e0f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e0fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e104:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	891b      	ldrh	r3, [r3, #8]
 800e10a:	3b14      	subs	r3, #20
 800e10c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e110:	e0e1      	b.n	800e2d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e112:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e114:	00db      	lsls	r3, r3, #3
 800e116:	b29b      	uxth	r3, r3
 800e118:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e11c:	4293      	cmp	r3, r2
 800e11e:	bf28      	it	cs
 800e120:	4613      	movcs	r3, r2
 800e122:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e124:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e128:	2114      	movs	r1, #20
 800e12a:	200e      	movs	r0, #14
 800e12c:	f001 f9ca 	bl	800f4c4 <pbuf_alloc>
 800e130:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 80d5 	beq.w	800e2e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	895b      	ldrh	r3, [r3, #10]
 800e13e:	2b13      	cmp	r3, #19
 800e140:	d806      	bhi.n	800e150 <ip4_frag+0xd0>
 800e142:	4b6c      	ldr	r3, [pc, #432]	; (800e2f4 <ip4_frag+0x274>)
 800e144:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e148:	496d      	ldr	r1, [pc, #436]	; (800e300 <ip4_frag+0x280>)
 800e14a:	486c      	ldr	r0, [pc, #432]	; (800e2fc <ip4_frag+0x27c>)
 800e14c:	f009 fd10 	bl	8017b70 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	2214      	movs	r2, #20
 800e156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e158:	4618      	mov	r0, r3
 800e15a:	f009 fc44 	bl	80179e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e164:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e16a:	e064      	b.n	800e236 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	895a      	ldrh	r2, [r3, #10]
 800e170:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	895b      	ldrh	r3, [r3, #10]
 800e17a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d906      	bls.n	800e18e <ip4_frag+0x10e>
 800e180:	4b5c      	ldr	r3, [pc, #368]	; (800e2f4 <ip4_frag+0x274>)
 800e182:	f240 322d 	movw	r2, #813	; 0x32d
 800e186:	495f      	ldr	r1, [pc, #380]	; (800e304 <ip4_frag+0x284>)
 800e188:	485c      	ldr	r0, [pc, #368]	; (800e2fc <ip4_frag+0x27c>)
 800e18a:	f009 fcf1 	bl	8017b70 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e18e:	8bfa      	ldrh	r2, [r7, #30]
 800e190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e194:	4293      	cmp	r3, r2
 800e196:	bf28      	it	cs
 800e198:	4613      	movcs	r3, r2
 800e19a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e19e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d105      	bne.n	800e1b2 <ip4_frag+0x132>
        poff = 0;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	60fb      	str	r3, [r7, #12]
        continue;
 800e1b0:	e041      	b.n	800e236 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e1b2:	f7ff ff0d 	bl	800dfd0 <ip_frag_alloc_pbuf_custom_ref>
 800e1b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d103      	bne.n	800e1c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e1be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1c0:	f001 fc64 	bl	800fa8c <pbuf_free>
        goto memerr;
 800e1c4:	e08f      	b.n	800e2e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e1c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e1cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e1d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e1d8:	9201      	str	r2, [sp, #4]
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2241      	movs	r2, #65	; 0x41
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	f001 fa9b 	bl	800f71c <pbuf_alloced_custom>
 800e1e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d106      	bne.n	800e1fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e1ee:	69b8      	ldr	r0, [r7, #24]
 800e1f0:	f7ff fef6 	bl	800dfe0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e1f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f6:	f001 fc49 	bl	800fa8c <pbuf_free>
        goto memerr;
 800e1fa:	e074      	b.n	800e2e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f001 fceb 	bl	800fbd8 <pbuf_ref>
      pcr->original = p;
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	4a3f      	ldr	r2, [pc, #252]	; (800e308 <ip4_frag+0x288>)
 800e20c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e20e:	6979      	ldr	r1, [r7, #20]
 800e210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e212:	f001 fd09 	bl	800fc28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e216:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e21a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e224:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d004      	beq.n	800e236 <ip4_frag+0x1b6>
        poff = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e236:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d196      	bne.n	800e16c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e23e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e244:	4413      	add	r3, r2
 800e246:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e24c:	f1a3 0213 	sub.w	r2, r3, #19
 800e250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e254:	429a      	cmp	r2, r3
 800e256:	bfcc      	ite	gt
 800e258:	2301      	movgt	r3, #1
 800e25a:	2300      	movle	r3, #0
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e260:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e268:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e26a:	6a3b      	ldr	r3, [r7, #32]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <ip4_frag+0x1f6>
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	2b00      	cmp	r3, #0
 800e274:	d003      	beq.n	800e27e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e276:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e278:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e27c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e27e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e280:	4618      	mov	r0, r3
 800e282:	f7fd fc49 	bl	800bb18 <lwip_htons>
 800e286:	4603      	mov	r3, r0
 800e288:	461a      	mov	r2, r3
 800e28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e28e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e290:	3314      	adds	r3, #20
 800e292:	b29b      	uxth	r3, r3
 800e294:	4618      	mov	r0, r3
 800e296:	f7fd fc3f 	bl	800bb18 <lwip_htons>
 800e29a:	4603      	mov	r3, r0
 800e29c:	461a      	mov	r2, r3
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	729a      	strb	r2, [r3, #10]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2b4:	68b8      	ldr	r0, [r7, #8]
 800e2b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e2b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2ba:	f001 fbe7 	bl	800fa8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e2be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e2ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e2ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e2d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f47f af19 	bne.w	800e112 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e002      	b.n	800e2ea <ip4_frag+0x26a>
      goto memerr;
 800e2e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e2e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3748      	adds	r7, #72	; 0x48
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	0801aadc 	.word	0x0801aadc
 800e2f8:	0801ad10 	.word	0x0801ad10
 800e2fc:	0801ab7c 	.word	0x0801ab7c
 800e300:	0801ad2c 	.word	0x0801ad2c
 800e304:	0801ad4c 	.word	0x0801ad4c
 800e308:	0800e019 	.word	0x0800e019

0800e30c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800e314:	4b04      	ldr	r3, [pc, #16]	; (800e328 <ptr_to_mem+0x1c>)
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4413      	add	r3, r2
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	24009e9c 	.word	0x24009e9c

0800e32c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e334:	4b04      	ldr	r3, [pc, #16]	; (800e348 <mem_to_ptr+0x1c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	1ad3      	subs	r3, r2, r3
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	24009e9c 	.word	0x24009e9c

0800e34c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e354:	4b45      	ldr	r3, [pc, #276]	; (800e46c <plug_holes+0x120>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d206      	bcs.n	800e36c <plug_holes+0x20>
 800e35e:	4b44      	ldr	r3, [pc, #272]	; (800e470 <plug_holes+0x124>)
 800e360:	f240 12df 	movw	r2, #479	; 0x1df
 800e364:	4943      	ldr	r1, [pc, #268]	; (800e474 <plug_holes+0x128>)
 800e366:	4844      	ldr	r0, [pc, #272]	; (800e478 <plug_holes+0x12c>)
 800e368:	f009 fc02 	bl	8017b70 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e36c:	4b43      	ldr	r3, [pc, #268]	; (800e47c <plug_holes+0x130>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	429a      	cmp	r2, r3
 800e374:	d306      	bcc.n	800e384 <plug_holes+0x38>
 800e376:	4b3e      	ldr	r3, [pc, #248]	; (800e470 <plug_holes+0x124>)
 800e378:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e37c:	4940      	ldr	r1, [pc, #256]	; (800e480 <plug_holes+0x134>)
 800e37e:	483e      	ldr	r0, [pc, #248]	; (800e478 <plug_holes+0x12c>)
 800e380:	f009 fbf6 	bl	8017b70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	7a1b      	ldrb	r3, [r3, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d006      	beq.n	800e39a <plug_holes+0x4e>
 800e38c:	4b38      	ldr	r3, [pc, #224]	; (800e470 <plug_holes+0x124>)
 800e38e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e392:	493c      	ldr	r1, [pc, #240]	; (800e484 <plug_holes+0x138>)
 800e394:	4838      	ldr	r0, [pc, #224]	; (800e478 <plug_holes+0x12c>)
 800e396:	f009 fbeb 	bl	8017b70 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a3a      	ldr	r2, [pc, #232]	; (800e488 <plug_holes+0x13c>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d906      	bls.n	800e3b2 <plug_holes+0x66>
 800e3a4:	4b32      	ldr	r3, [pc, #200]	; (800e470 <plug_holes+0x124>)
 800e3a6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e3aa:	4938      	ldr	r1, [pc, #224]	; (800e48c <plug_holes+0x140>)
 800e3ac:	4832      	ldr	r0, [pc, #200]	; (800e478 <plug_holes+0x12c>)
 800e3ae:	f009 fbdf 	bl	8017b70 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7ff ffa8 	bl	800e30c <ptr_to_mem>
 800e3bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d024      	beq.n	800e410 <plug_holes+0xc4>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	7a1b      	ldrb	r3, [r3, #8]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d120      	bne.n	800e410 <plug_holes+0xc4>
 800e3ce:	4b2b      	ldr	r3, [pc, #172]	; (800e47c <plug_holes+0x130>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d01b      	beq.n	800e410 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e3d8:	4b2d      	ldr	r3, [pc, #180]	; (800e490 <plug_holes+0x144>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d102      	bne.n	800e3e8 <plug_holes+0x9c>
      lfree = mem;
 800e3e2:	4a2b      	ldr	r2, [pc, #172]	; (800e490 <plug_holes+0x144>)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4a24      	ldr	r2, [pc, #144]	; (800e488 <plug_holes+0x13c>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d00a      	beq.n	800e410 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff ff84 	bl	800e30c <ptr_to_mem>
 800e404:	4604      	mov	r4, r0
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7ff ff90 	bl	800e32c <mem_to_ptr>
 800e40c:	4603      	mov	r3, r0
 800e40e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff ff79 	bl	800e30c <ptr_to_mem>
 800e41a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	429a      	cmp	r2, r3
 800e422:	d01f      	beq.n	800e464 <plug_holes+0x118>
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	7a1b      	ldrb	r3, [r3, #8]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d11b      	bne.n	800e464 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e42c:	4b18      	ldr	r3, [pc, #96]	; (800e490 <plug_holes+0x144>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	429a      	cmp	r2, r3
 800e434:	d102      	bne.n	800e43c <plug_holes+0xf0>
      lfree = pmem;
 800e436:	4a16      	ldr	r2, [pc, #88]	; (800e490 <plug_holes+0x144>)
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a0f      	ldr	r2, [pc, #60]	; (800e488 <plug_holes+0x13c>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d00a      	beq.n	800e464 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4618      	mov	r0, r3
 800e454:	f7ff ff5a 	bl	800e30c <ptr_to_mem>
 800e458:	4604      	mov	r4, r0
 800e45a:	68b8      	ldr	r0, [r7, #8]
 800e45c:	f7ff ff66 	bl	800e32c <mem_to_ptr>
 800e460:	4603      	mov	r3, r0
 800e462:	6063      	str	r3, [r4, #4]
    }
  }
}
 800e464:	bf00      	nop
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd90      	pop	{r4, r7, pc}
 800e46c:	24009e9c 	.word	0x24009e9c
 800e470:	0801ad5c 	.word	0x0801ad5c
 800e474:	0801ade8 	.word	0x0801ade8
 800e478:	0801ae00 	.word	0x0801ae00
 800e47c:	24009ea0 	.word	0x24009ea0
 800e480:	0801ae28 	.word	0x0801ae28
 800e484:	0801ae44 	.word	0x0801ae44
 800e488:	0001ffe8 	.word	0x0001ffe8
 800e48c:	0801ae60 	.word	0x0801ae60
 800e490:	24009ea8 	.word	0x24009ea8

0800e494 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e49a:	4b1b      	ldr	r3, [pc, #108]	; (800e508 <mem_init+0x74>)
 800e49c:	4a1b      	ldr	r2, [pc, #108]	; (800e50c <mem_init+0x78>)
 800e49e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e4a0:	4b19      	ldr	r3, [pc, #100]	; (800e508 <mem_init+0x74>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	4a19      	ldr	r2, [pc, #100]	; (800e510 <mem_init+0x7c>)
 800e4aa:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e4b8:	4815      	ldr	r0, [pc, #84]	; (800e510 <mem_init+0x7c>)
 800e4ba:	f7ff ff27 	bl	800e30c <ptr_to_mem>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	4a14      	ldr	r2, [pc, #80]	; (800e514 <mem_init+0x80>)
 800e4c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e4c4:	4b13      	ldr	r3, [pc, #76]	; (800e514 <mem_init+0x80>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e4cc:	4b11      	ldr	r3, [pc, #68]	; (800e514 <mem_init+0x80>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a0f      	ldr	r2, [pc, #60]	; (800e510 <mem_init+0x7c>)
 800e4d2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e4d4:	4b0f      	ldr	r3, [pc, #60]	; (800e514 <mem_init+0x80>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a0d      	ldr	r2, [pc, #52]	; (800e510 <mem_init+0x7c>)
 800e4da:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	; (800e508 <mem_init+0x74>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a0d      	ldr	r2, [pc, #52]	; (800e518 <mem_init+0x84>)
 800e4e2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e4e4:	480d      	ldr	r0, [pc, #52]	; (800e51c <mem_init+0x88>)
 800e4e6:	f001 ff53 	bl	8010390 <sys_mutex_new>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d006      	beq.n	800e4fe <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e4f0:	4b0b      	ldr	r3, [pc, #44]	; (800e520 <mem_init+0x8c>)
 800e4f2:	f240 221f 	movw	r2, #543	; 0x21f
 800e4f6:	490b      	ldr	r1, [pc, #44]	; (800e524 <mem_init+0x90>)
 800e4f8:	480b      	ldr	r0, [pc, #44]	; (800e528 <mem_init+0x94>)
 800e4fa:	f009 fb39 	bl	8017b70 <iprintf>
  }
}
 800e4fe:	bf00      	nop
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	24009e9c 	.word	0x24009e9c
 800e50c:	30020000 	.word	0x30020000
 800e510:	0001ffe8 	.word	0x0001ffe8
 800e514:	24009ea0 	.word	0x24009ea0
 800e518:	24009ea8 	.word	0x24009ea8
 800e51c:	24009ea4 	.word	0x24009ea4
 800e520:	0801ad5c 	.word	0x0801ad5c
 800e524:	0801ae8c 	.word	0x0801ae8c
 800e528:	0801ae00 	.word	0x0801ae00

0800e52c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff fef9 	bl	800e32c <mem_to_ptr>
 800e53a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff fee3 	bl	800e30c <ptr_to_mem>
 800e546:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7ff fedd 	bl	800e30c <ptr_to_mem>
 800e552:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a11      	ldr	r2, [pc, #68]	; (800e5a0 <mem_link_valid+0x74>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d818      	bhi.n	800e590 <mem_link_valid+0x64>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	4a0f      	ldr	r2, [pc, #60]	; (800e5a0 <mem_link_valid+0x74>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d813      	bhi.n	800e590 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e56c:	697a      	ldr	r2, [r7, #20]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d004      	beq.n	800e57c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d109      	bne.n	800e590 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e57c:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <mem_link_valid+0x78>)
 800e57e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e580:	693a      	ldr	r2, [r7, #16]
 800e582:	429a      	cmp	r2, r3
 800e584:	d006      	beq.n	800e594 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d001      	beq.n	800e594 <mem_link_valid+0x68>
    return 0;
 800e590:	2300      	movs	r3, #0
 800e592:	e000      	b.n	800e596 <mem_link_valid+0x6a>
  }
  return 1;
 800e594:	2301      	movs	r3, #1
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	0001ffe8 	.word	0x0001ffe8
 800e5a4:	24009ea0 	.word	0x24009ea0

0800e5a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b088      	sub	sp, #32
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d070      	beq.n	800e698 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f003 0303 	and.w	r3, r3, #3
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00d      	beq.n	800e5dc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e5c0:	4b37      	ldr	r3, [pc, #220]	; (800e6a0 <mem_free+0xf8>)
 800e5c2:	f240 2273 	movw	r2, #627	; 0x273
 800e5c6:	4937      	ldr	r1, [pc, #220]	; (800e6a4 <mem_free+0xfc>)
 800e5c8:	4837      	ldr	r0, [pc, #220]	; (800e6a8 <mem_free+0x100>)
 800e5ca:	f009 fad1 	bl	8017b70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e5ce:	f001 ff31 	bl	8010434 <sys_arch_protect>
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f001 ff3b 	bl	8010450 <sys_arch_unprotect>
    return;
 800e5da:	e05e      	b.n	800e69a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3b0c      	subs	r3, #12
 800e5e0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e5e2:	4b32      	ldr	r3, [pc, #200]	; (800e6ac <mem_free+0x104>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	69fa      	ldr	r2, [r7, #28]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d306      	bcc.n	800e5fa <mem_free+0x52>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f103 020c 	add.w	r2, r3, #12
 800e5f2:	4b2f      	ldr	r3, [pc, #188]	; (800e6b0 <mem_free+0x108>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d90d      	bls.n	800e616 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e5fa:	4b29      	ldr	r3, [pc, #164]	; (800e6a0 <mem_free+0xf8>)
 800e5fc:	f240 227f 	movw	r2, #639	; 0x27f
 800e600:	492c      	ldr	r1, [pc, #176]	; (800e6b4 <mem_free+0x10c>)
 800e602:	4829      	ldr	r0, [pc, #164]	; (800e6a8 <mem_free+0x100>)
 800e604:	f009 fab4 	bl	8017b70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e608:	f001 ff14 	bl	8010434 <sys_arch_protect>
 800e60c:	6138      	str	r0, [r7, #16]
 800e60e:	6938      	ldr	r0, [r7, #16]
 800e610:	f001 ff1e 	bl	8010450 <sys_arch_unprotect>
    return;
 800e614:	e041      	b.n	800e69a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e616:	4828      	ldr	r0, [pc, #160]	; (800e6b8 <mem_free+0x110>)
 800e618:	f001 fed0 	bl	80103bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	7a1b      	ldrb	r3, [r3, #8]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d110      	bne.n	800e646 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e624:	4b1e      	ldr	r3, [pc, #120]	; (800e6a0 <mem_free+0xf8>)
 800e626:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e62a:	4924      	ldr	r1, [pc, #144]	; (800e6bc <mem_free+0x114>)
 800e62c:	481e      	ldr	r0, [pc, #120]	; (800e6a8 <mem_free+0x100>)
 800e62e:	f009 fa9f 	bl	8017b70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e632:	4821      	ldr	r0, [pc, #132]	; (800e6b8 <mem_free+0x110>)
 800e634:	f001 fed1 	bl	80103da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e638:	f001 fefc 	bl	8010434 <sys_arch_protect>
 800e63c:	6178      	str	r0, [r7, #20]
 800e63e:	6978      	ldr	r0, [r7, #20]
 800e640:	f001 ff06 	bl	8010450 <sys_arch_unprotect>
    return;
 800e644:	e029      	b.n	800e69a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e646:	69f8      	ldr	r0, [r7, #28]
 800e648:	f7ff ff70 	bl	800e52c <mem_link_valid>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d110      	bne.n	800e674 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e652:	4b13      	ldr	r3, [pc, #76]	; (800e6a0 <mem_free+0xf8>)
 800e654:	f240 2295 	movw	r2, #661	; 0x295
 800e658:	4919      	ldr	r1, [pc, #100]	; (800e6c0 <mem_free+0x118>)
 800e65a:	4813      	ldr	r0, [pc, #76]	; (800e6a8 <mem_free+0x100>)
 800e65c:	f009 fa88 	bl	8017b70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e660:	4815      	ldr	r0, [pc, #84]	; (800e6b8 <mem_free+0x110>)
 800e662:	f001 feba 	bl	80103da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e666:	f001 fee5 	bl	8010434 <sys_arch_protect>
 800e66a:	61b8      	str	r0, [r7, #24]
 800e66c:	69b8      	ldr	r0, [r7, #24]
 800e66e:	f001 feef 	bl	8010450 <sys_arch_unprotect>
    return;
 800e672:	e012      	b.n	800e69a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	2200      	movs	r2, #0
 800e678:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800e67a:	4b12      	ldr	r3, [pc, #72]	; (800e6c4 <mem_free+0x11c>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	69fa      	ldr	r2, [r7, #28]
 800e680:	429a      	cmp	r2, r3
 800e682:	d202      	bcs.n	800e68a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e684:	4a0f      	ldr	r2, [pc, #60]	; (800e6c4 <mem_free+0x11c>)
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e68a:	69f8      	ldr	r0, [r7, #28]
 800e68c:	f7ff fe5e 	bl	800e34c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e690:	4809      	ldr	r0, [pc, #36]	; (800e6b8 <mem_free+0x110>)
 800e692:	f001 fea2 	bl	80103da <sys_mutex_unlock>
 800e696:	e000      	b.n	800e69a <mem_free+0xf2>
    return;
 800e698:	bf00      	nop
}
 800e69a:	3720      	adds	r7, #32
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	0801ad5c 	.word	0x0801ad5c
 800e6a4:	0801aea8 	.word	0x0801aea8
 800e6a8:	0801ae00 	.word	0x0801ae00
 800e6ac:	24009e9c 	.word	0x24009e9c
 800e6b0:	24009ea0 	.word	0x24009ea0
 800e6b4:	0801aecc 	.word	0x0801aecc
 800e6b8:	24009ea4 	.word	0x24009ea4
 800e6bc:	0801aee8 	.word	0x0801aee8
 800e6c0:	0801af10 	.word	0x0801af10
 800e6c4:	24009ea8 	.word	0x24009ea8

0800e6c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08a      	sub	sp, #40	; 0x28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	3303      	adds	r3, #3
 800e6d6:	f023 0303 	bic.w	r3, r3, #3
 800e6da:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	2b0b      	cmp	r3, #11
 800e6e0:	d801      	bhi.n	800e6e6 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e8:	4a6e      	ldr	r2, [pc, #440]	; (800e8a4 <mem_trim+0x1dc>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d803      	bhi.n	800e6f6 <mem_trim+0x2e>
 800e6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d201      	bcs.n	800e6fa <mem_trim+0x32>
    return NULL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e0d0      	b.n	800e89c <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e6fa:	4b6b      	ldr	r3, [pc, #428]	; (800e8a8 <mem_trim+0x1e0>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d304      	bcc.n	800e70e <mem_trim+0x46>
 800e704:	4b69      	ldr	r3, [pc, #420]	; (800e8ac <mem_trim+0x1e4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d306      	bcc.n	800e71c <mem_trim+0x54>
 800e70e:	4b68      	ldr	r3, [pc, #416]	; (800e8b0 <mem_trim+0x1e8>)
 800e710:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e714:	4967      	ldr	r1, [pc, #412]	; (800e8b4 <mem_trim+0x1ec>)
 800e716:	4868      	ldr	r0, [pc, #416]	; (800e8b8 <mem_trim+0x1f0>)
 800e718:	f009 fa2a 	bl	8017b70 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e71c:	4b62      	ldr	r3, [pc, #392]	; (800e8a8 <mem_trim+0x1e0>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	429a      	cmp	r2, r3
 800e724:	d304      	bcc.n	800e730 <mem_trim+0x68>
 800e726:	4b61      	ldr	r3, [pc, #388]	; (800e8ac <mem_trim+0x1e4>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d307      	bcc.n	800e740 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e730:	f001 fe80 	bl	8010434 <sys_arch_protect>
 800e734:	60b8      	str	r0, [r7, #8]
 800e736:	68b8      	ldr	r0, [r7, #8]
 800e738:	f001 fe8a 	bl	8010450 <sys_arch_unprotect>
    return rmem;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	e0ad      	b.n	800e89c <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3b0c      	subs	r3, #12
 800e744:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e746:	6a38      	ldr	r0, [r7, #32]
 800e748:	f7ff fdf0 	bl	800e32c <mem_to_ptr>
 800e74c:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e74e:	6a3b      	ldr	r3, [r7, #32]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	3b0c      	subs	r3, #12
 800e758:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d906      	bls.n	800e770 <mem_trim+0xa8>
 800e762:	4b53      	ldr	r3, [pc, #332]	; (800e8b0 <mem_trim+0x1e8>)
 800e764:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e768:	4954      	ldr	r1, [pc, #336]	; (800e8bc <mem_trim+0x1f4>)
 800e76a:	4853      	ldr	r0, [pc, #332]	; (800e8b8 <mem_trim+0x1f0>)
 800e76c:	f009 fa00 	bl	8017b70 <iprintf>
  if (newsize > size) {
 800e770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	429a      	cmp	r2, r3
 800e776:	d901      	bls.n	800e77c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800e778:	2300      	movs	r3, #0
 800e77a:	e08f      	b.n	800e89c <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800e77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	429a      	cmp	r2, r3
 800e782:	d101      	bne.n	800e788 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	e089      	b.n	800e89c <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e788:	484d      	ldr	r0, [pc, #308]	; (800e8c0 <mem_trim+0x1f8>)
 800e78a:	f001 fe17 	bl	80103bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff fdba 	bl	800e30c <ptr_to_mem>
 800e798:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	7a1b      	ldrb	r3, [r3, #8]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d13c      	bne.n	800e81c <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a3f      	ldr	r2, [pc, #252]	; (800e8a4 <mem_trim+0x1dc>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d106      	bne.n	800e7ba <mem_trim+0xf2>
 800e7ac:	4b40      	ldr	r3, [pc, #256]	; (800e8b0 <mem_trim+0x1e8>)
 800e7ae:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e7b2:	4944      	ldr	r1, [pc, #272]	; (800e8c4 <mem_trim+0x1fc>)
 800e7b4:	4840      	ldr	r0, [pc, #256]	; (800e8b8 <mem_trim+0x1f0>)
 800e7b6:	f009 f9db 	bl	8017b70 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e7c0:	69fa      	ldr	r2, [r7, #28]
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	4413      	add	r3, r2
 800e7c6:	330c      	adds	r3, #12
 800e7c8:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800e7ca:	4b3f      	ldr	r3, [pc, #252]	; (800e8c8 <mem_trim+0x200>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d105      	bne.n	800e7e0 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800e7d4:	6938      	ldr	r0, [r7, #16]
 800e7d6:	f7ff fd99 	bl	800e30c <ptr_to_mem>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	4a3a      	ldr	r2, [pc, #232]	; (800e8c8 <mem_trim+0x200>)
 800e7de:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e7e0:	6938      	ldr	r0, [r7, #16]
 800e7e2:	f7ff fd93 	bl	800e30c <ptr_to_mem>
 800e7e6:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	69fa      	ldr	r2, [r7, #28]
 800e7f8:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	693a      	ldr	r2, [r7, #16]
 800e7fe:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a27      	ldr	r2, [pc, #156]	; (800e8a4 <mem_trim+0x1dc>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d044      	beq.n	800e894 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff fd7c 	bl	800e30c <ptr_to_mem>
 800e814:	4602      	mov	r2, r0
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	6053      	str	r3, [r2, #4]
 800e81a:	e03b      	b.n	800e894 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	3318      	adds	r3, #24
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	429a      	cmp	r2, r3
 800e824:	d336      	bcc.n	800e894 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e826:	69fa      	ldr	r2, [r7, #28]
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	4413      	add	r3, r2
 800e82c:	330c      	adds	r3, #12
 800e82e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e830:	6a3b      	ldr	r3, [r7, #32]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a1b      	ldr	r2, [pc, #108]	; (800e8a4 <mem_trim+0x1dc>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d106      	bne.n	800e848 <mem_trim+0x180>
 800e83a:	4b1d      	ldr	r3, [pc, #116]	; (800e8b0 <mem_trim+0x1e8>)
 800e83c:	f240 3216 	movw	r2, #790	; 0x316
 800e840:	4920      	ldr	r1, [pc, #128]	; (800e8c4 <mem_trim+0x1fc>)
 800e842:	481d      	ldr	r0, [pc, #116]	; (800e8b8 <mem_trim+0x1f0>)
 800e844:	f009 f994 	bl	8017b70 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e848:	6938      	ldr	r0, [r7, #16]
 800e84a:	f7ff fd5f 	bl	800e30c <ptr_to_mem>
 800e84e:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800e850:	4b1d      	ldr	r3, [pc, #116]	; (800e8c8 <mem_trim+0x200>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	697a      	ldr	r2, [r7, #20]
 800e856:	429a      	cmp	r2, r3
 800e858:	d202      	bcs.n	800e860 <mem_trim+0x198>
      lfree = mem2;
 800e85a:	4a1b      	ldr	r2, [pc, #108]	; (800e8c8 <mem_trim+0x200>)
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	2200      	movs	r2, #0
 800e864:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	69fa      	ldr	r2, [r7, #28]
 800e872:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a09      	ldr	r2, [pc, #36]	; (800e8a4 <mem_trim+0x1dc>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d007      	beq.n	800e894 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff fd3f 	bl	800e30c <ptr_to_mem>
 800e88e:	4602      	mov	r2, r0
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e894:	480a      	ldr	r0, [pc, #40]	; (800e8c0 <mem_trim+0x1f8>)
 800e896:	f001 fda0 	bl	80103da <sys_mutex_unlock>
  return rmem;
 800e89a:	687b      	ldr	r3, [r7, #4]
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3728      	adds	r7, #40	; 0x28
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	0001ffe8 	.word	0x0001ffe8
 800e8a8:	24009e9c 	.word	0x24009e9c
 800e8ac:	24009ea0 	.word	0x24009ea0
 800e8b0:	0801ad5c 	.word	0x0801ad5c
 800e8b4:	0801af44 	.word	0x0801af44
 800e8b8:	0801ae00 	.word	0x0801ae00
 800e8bc:	0801af5c 	.word	0x0801af5c
 800e8c0:	24009ea4 	.word	0x24009ea4
 800e8c4:	0801af7c 	.word	0x0801af7c
 800e8c8:	24009ea8 	.word	0x24009ea8

0800e8cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b088      	sub	sp, #32
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d101      	bne.n	800e8de <mem_malloc+0x12>
    return NULL;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	e0d9      	b.n	800ea92 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	3303      	adds	r3, #3
 800e8e2:	f023 0303 	bic.w	r3, r3, #3
 800e8e6:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	2b0b      	cmp	r3, #11
 800e8ec:	d801      	bhi.n	800e8f2 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e8ee:	230c      	movs	r3, #12
 800e8f0:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	4a69      	ldr	r2, [pc, #420]	; (800ea9c <mem_malloc+0x1d0>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d803      	bhi.n	800e902 <mem_malloc+0x36>
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d201      	bcs.n	800e906 <mem_malloc+0x3a>
    return NULL;
 800e902:	2300      	movs	r3, #0
 800e904:	e0c5      	b.n	800ea92 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e906:	4866      	ldr	r0, [pc, #408]	; (800eaa0 <mem_malloc+0x1d4>)
 800e908:	f001 fd58 	bl	80103bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e90c:	4b65      	ldr	r3, [pc, #404]	; (800eaa4 <mem_malloc+0x1d8>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff fd0b 	bl	800e32c <mem_to_ptr>
 800e916:	61f8      	str	r0, [r7, #28]
 800e918:	e0b0      	b.n	800ea7c <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e91a:	69f8      	ldr	r0, [r7, #28]
 800e91c:	f7ff fcf6 	bl	800e30c <ptr_to_mem>
 800e920:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	7a1b      	ldrb	r3, [r3, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	f040 80a2 	bne.w	800ea70 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800e936:	69ba      	ldr	r2, [r7, #24]
 800e938:	429a      	cmp	r2, r3
 800e93a:	f200 8099 	bhi.w	800ea70 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	1ad3      	subs	r3, r2, r3
 800e946:	f1a3 020c 	sub.w	r2, r3, #12
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	3318      	adds	r3, #24
 800e94e:	429a      	cmp	r2, r3
 800e950:	d331      	bcc.n	800e9b6 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e952:	69fa      	ldr	r2, [r7, #28]
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	4413      	add	r3, r2
 800e958:	330c      	adds	r3, #12
 800e95a:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4a4f      	ldr	r2, [pc, #316]	; (800ea9c <mem_malloc+0x1d0>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d106      	bne.n	800e972 <mem_malloc+0xa6>
 800e964:	4b50      	ldr	r3, [pc, #320]	; (800eaa8 <mem_malloc+0x1dc>)
 800e966:	f240 3287 	movw	r2, #903	; 0x387
 800e96a:	4950      	ldr	r1, [pc, #320]	; (800eaac <mem_malloc+0x1e0>)
 800e96c:	4850      	ldr	r0, [pc, #320]	; (800eab0 <mem_malloc+0x1e4>)
 800e96e:	f009 f8ff 	bl	8017b70 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f7ff fcca 	bl	800e30c <ptr_to_mem>
 800e978:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2200      	movs	r2, #0
 800e97e:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	69fa      	ldr	r2, [r7, #28]
 800e98c:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	2201      	movs	r2, #1
 800e998:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a3f      	ldr	r2, [pc, #252]	; (800ea9c <mem_malloc+0x1d0>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d00b      	beq.n	800e9bc <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff fcaf 	bl	800e30c <ptr_to_mem>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6053      	str	r3, [r2, #4]
 800e9b4:	e002      	b.n	800e9bc <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e9bc:	4b39      	ldr	r3, [pc, #228]	; (800eaa4 <mem_malloc+0x1d8>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	693a      	ldr	r2, [r7, #16]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d127      	bne.n	800ea16 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800e9c6:	4b37      	ldr	r3, [pc, #220]	; (800eaa4 <mem_malloc+0x1d8>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e9cc:	e005      	b.n	800e9da <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7ff fc9a 	bl	800e30c <ptr_to_mem>
 800e9d8:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	7a1b      	ldrb	r3, [r3, #8]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <mem_malloc+0x120>
 800e9e2:	4b34      	ldr	r3, [pc, #208]	; (800eab4 <mem_malloc+0x1e8>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d1f0      	bne.n	800e9ce <mem_malloc+0x102>
          }
          lfree = cur;
 800e9ec:	4a2d      	ldr	r2, [pc, #180]	; (800eaa4 <mem_malloc+0x1d8>)
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e9f2:	4b2c      	ldr	r3, [pc, #176]	; (800eaa4 <mem_malloc+0x1d8>)
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	4b2f      	ldr	r3, [pc, #188]	; (800eab4 <mem_malloc+0x1e8>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d00b      	beq.n	800ea16 <mem_malloc+0x14a>
 800e9fe:	4b29      	ldr	r3, [pc, #164]	; (800eaa4 <mem_malloc+0x1d8>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	7a1b      	ldrb	r3, [r3, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d006      	beq.n	800ea16 <mem_malloc+0x14a>
 800ea08:	4b27      	ldr	r3, [pc, #156]	; (800eaa8 <mem_malloc+0x1dc>)
 800ea0a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ea0e:	492a      	ldr	r1, [pc, #168]	; (800eab8 <mem_malloc+0x1ec>)
 800ea10:	4827      	ldr	r0, [pc, #156]	; (800eab0 <mem_malloc+0x1e4>)
 800ea12:	f009 f8ad 	bl	8017b70 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ea16:	4822      	ldr	r0, [pc, #136]	; (800eaa0 <mem_malloc+0x1d4>)
 800ea18:	f001 fcdf 	bl	80103da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	4413      	add	r3, r2
 800ea22:	330c      	adds	r3, #12
 800ea24:	4a23      	ldr	r2, [pc, #140]	; (800eab4 <mem_malloc+0x1e8>)
 800ea26:	6812      	ldr	r2, [r2, #0]
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d906      	bls.n	800ea3a <mem_malloc+0x16e>
 800ea2c:	4b1e      	ldr	r3, [pc, #120]	; (800eaa8 <mem_malloc+0x1dc>)
 800ea2e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ea32:	4922      	ldr	r1, [pc, #136]	; (800eabc <mem_malloc+0x1f0>)
 800ea34:	481e      	ldr	r0, [pc, #120]	; (800eab0 <mem_malloc+0x1e4>)
 800ea36:	f009 f89b 	bl	8017b70 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f003 0303 	and.w	r3, r3, #3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d006      	beq.n	800ea52 <mem_malloc+0x186>
 800ea44:	4b18      	ldr	r3, [pc, #96]	; (800eaa8 <mem_malloc+0x1dc>)
 800ea46:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ea4a:	491d      	ldr	r1, [pc, #116]	; (800eac0 <mem_malloc+0x1f4>)
 800ea4c:	4818      	ldr	r0, [pc, #96]	; (800eab0 <mem_malloc+0x1e4>)
 800ea4e:	f009 f88f 	bl	8017b70 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	f003 0303 	and.w	r3, r3, #3
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d006      	beq.n	800ea6a <mem_malloc+0x19e>
 800ea5c:	4b12      	ldr	r3, [pc, #72]	; (800eaa8 <mem_malloc+0x1dc>)
 800ea5e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ea62:	4918      	ldr	r1, [pc, #96]	; (800eac4 <mem_malloc+0x1f8>)
 800ea64:	4812      	ldr	r0, [pc, #72]	; (800eab0 <mem_malloc+0x1e4>)
 800ea66:	f009 f883 	bl	8017b70 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	330c      	adds	r3, #12
 800ea6e:	e010      	b.n	800ea92 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800ea70:	69f8      	ldr	r0, [r7, #28]
 800ea72:	f7ff fc4b 	bl	800e30c <ptr_to_mem>
 800ea76:	4603      	mov	r3, r0
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ea7c:	69ba      	ldr	r2, [r7, #24]
 800ea7e:	4b07      	ldr	r3, [pc, #28]	; (800ea9c <mem_malloc+0x1d0>)
 800ea80:	1a9b      	subs	r3, r3, r2
 800ea82:	69fa      	ldr	r2, [r7, #28]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	f4ff af48 	bcc.w	800e91a <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ea8a:	4805      	ldr	r0, [pc, #20]	; (800eaa0 <mem_malloc+0x1d4>)
 800ea8c:	f001 fca5 	bl	80103da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3720      	adds	r7, #32
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	0001ffe8 	.word	0x0001ffe8
 800eaa0:	24009ea4 	.word	0x24009ea4
 800eaa4:	24009ea8 	.word	0x24009ea8
 800eaa8:	0801ad5c 	.word	0x0801ad5c
 800eaac:	0801af7c 	.word	0x0801af7c
 800eab0:	0801ae00 	.word	0x0801ae00
 800eab4:	24009ea0 	.word	0x24009ea0
 800eab8:	0801af90 	.word	0x0801af90
 800eabc:	0801afac 	.word	0x0801afac
 800eac0:	0801afdc 	.word	0x0801afdc
 800eac4:	0801b00c 	.word	0x0801b00c

0800eac8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	3303      	adds	r3, #3
 800eade:	f023 0303 	bic.w	r3, r3, #3
 800eae2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800eae4:	2300      	movs	r3, #0
 800eae6:	60fb      	str	r3, [r7, #12]
 800eae8:	e011      	b.n	800eb0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	689b      	ldr	r3, [r3, #8]
 800eaf8:	68ba      	ldr	r2, [r7, #8]
 800eafa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	881b      	ldrh	r3, [r3, #0]
 800eb00:	461a      	mov	r2, r3
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	4413      	add	r3, r2
 800eb06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	885b      	ldrh	r3, [r3, #2]
 800eb12:	461a      	mov	r2, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4293      	cmp	r3, r2
 800eb18:	dbe7      	blt.n	800eaea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800eb1a:	bf00      	nop
 800eb1c:	bf00      	nop
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800eb2e:	2300      	movs	r3, #0
 800eb30:	80fb      	strh	r3, [r7, #6]
 800eb32:	e009      	b.n	800eb48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800eb34:	88fb      	ldrh	r3, [r7, #6]
 800eb36:	4a08      	ldr	r2, [pc, #32]	; (800eb58 <memp_init+0x30>)
 800eb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff ffc3 	bl	800eac8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800eb42:	88fb      	ldrh	r3, [r7, #6]
 800eb44:	3301      	adds	r3, #1
 800eb46:	80fb      	strh	r3, [r7, #6]
 800eb48:	88fb      	ldrh	r3, [r7, #6]
 800eb4a:	2b0c      	cmp	r3, #12
 800eb4c:	d9f2      	bls.n	800eb34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800eb4e:	bf00      	nop
 800eb50:	bf00      	nop
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	0801d5d8 	.word	0x0801d5d8

0800eb5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800eb64:	f001 fc66 	bl	8010434 <sys_arch_protect>
 800eb68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d015      	beq.n	800eba4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	6812      	ldr	r2, [r2, #0]
 800eb80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	f003 0303 	and.w	r3, r3, #3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d006      	beq.n	800eb9a <do_memp_malloc_pool+0x3e>
 800eb8c:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <do_memp_malloc_pool+0x58>)
 800eb8e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800eb92:	4909      	ldr	r1, [pc, #36]	; (800ebb8 <do_memp_malloc_pool+0x5c>)
 800eb94:	4809      	ldr	r0, [pc, #36]	; (800ebbc <do_memp_malloc_pool+0x60>)
 800eb96:	f008 ffeb 	bl	8017b70 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f001 fc58 	bl	8010450 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	e003      	b.n	800ebac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f001 fc53 	bl	8010450 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	0801b030 	.word	0x0801b030
 800ebb8:	0801b0bc 	.word	0x0801b0bc
 800ebbc:	0801b0e0 	.word	0x0801b0e0

0800ebc0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d106      	bne.n	800ebdc <memp_malloc_pool+0x1c>
 800ebce:	4b0a      	ldr	r3, [pc, #40]	; (800ebf8 <memp_malloc_pool+0x38>)
 800ebd0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ebd4:	4909      	ldr	r1, [pc, #36]	; (800ebfc <memp_malloc_pool+0x3c>)
 800ebd6:	480a      	ldr	r0, [pc, #40]	; (800ec00 <memp_malloc_pool+0x40>)
 800ebd8:	f008 ffca 	bl	8017b70 <iprintf>
  if (desc == NULL) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <memp_malloc_pool+0x26>
    return NULL;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	e003      	b.n	800ebee <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff ffb8 	bl	800eb5c <do_memp_malloc_pool>
 800ebec:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	0801b030 	.word	0x0801b030
 800ebfc:	0801b108 	.word	0x0801b108
 800ec00:	0801b0e0 	.word	0x0801b0e0

0800ec04 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ec0e:	79fb      	ldrb	r3, [r7, #7]
 800ec10:	2b0c      	cmp	r3, #12
 800ec12:	d908      	bls.n	800ec26 <memp_malloc+0x22>
 800ec14:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <memp_malloc+0x3c>)
 800ec16:	f240 1257 	movw	r2, #343	; 0x157
 800ec1a:	490a      	ldr	r1, [pc, #40]	; (800ec44 <memp_malloc+0x40>)
 800ec1c:	480a      	ldr	r0, [pc, #40]	; (800ec48 <memp_malloc+0x44>)
 800ec1e:	f008 ffa7 	bl	8017b70 <iprintf>
 800ec22:	2300      	movs	r3, #0
 800ec24:	e008      	b.n	800ec38 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ec26:	79fb      	ldrb	r3, [r7, #7]
 800ec28:	4a08      	ldr	r2, [pc, #32]	; (800ec4c <memp_malloc+0x48>)
 800ec2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff ff94 	bl	800eb5c <do_memp_malloc_pool>
 800ec34:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ec36:	68fb      	ldr	r3, [r7, #12]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	0801b030 	.word	0x0801b030
 800ec44:	0801b11c 	.word	0x0801b11c
 800ec48:	0801b0e0 	.word	0x0801b0e0
 800ec4c:	0801d5d8 	.word	0x0801d5d8

0800ec50 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	f003 0303 	and.w	r3, r3, #3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d006      	beq.n	800ec72 <do_memp_free_pool+0x22>
 800ec64:	4b0d      	ldr	r3, [pc, #52]	; (800ec9c <do_memp_free_pool+0x4c>)
 800ec66:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ec6a:	490d      	ldr	r1, [pc, #52]	; (800eca0 <do_memp_free_pool+0x50>)
 800ec6c:	480d      	ldr	r0, [pc, #52]	; (800eca4 <do_memp_free_pool+0x54>)
 800ec6e:	f008 ff7f 	bl	8017b70 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ec76:	f001 fbdd 	bl	8010434 <sys_arch_protect>
 800ec7a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ec8e:	68b8      	ldr	r0, [r7, #8]
 800ec90:	f001 fbde 	bl	8010450 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ec94:	bf00      	nop
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	0801b030 	.word	0x0801b030
 800eca0:	0801b13c 	.word	0x0801b13c
 800eca4:	0801b0e0 	.word	0x0801b0e0

0800eca8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d106      	bne.n	800ecc6 <memp_free_pool+0x1e>
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <memp_free_pool+0x3c>)
 800ecba:	f240 1295 	movw	r2, #405	; 0x195
 800ecbe:	490a      	ldr	r1, [pc, #40]	; (800ece8 <memp_free_pool+0x40>)
 800ecc0:	480a      	ldr	r0, [pc, #40]	; (800ecec <memp_free_pool+0x44>)
 800ecc2:	f008 ff55 	bl	8017b70 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d007      	beq.n	800ecdc <memp_free_pool+0x34>
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d004      	beq.n	800ecdc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7ff ffbb 	bl	800ec50 <do_memp_free_pool>
 800ecda:	e000      	b.n	800ecde <memp_free_pool+0x36>
    return;
 800ecdc:	bf00      	nop
}
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	0801b030 	.word	0x0801b030
 800ece8:	0801b108 	.word	0x0801b108
 800ecec:	0801b0e0 	.word	0x0801b0e0

0800ecf0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	6039      	str	r1, [r7, #0]
 800ecfa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	2b0c      	cmp	r3, #12
 800ed00:	d907      	bls.n	800ed12 <memp_free+0x22>
 800ed02:	4b0c      	ldr	r3, [pc, #48]	; (800ed34 <memp_free+0x44>)
 800ed04:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ed08:	490b      	ldr	r1, [pc, #44]	; (800ed38 <memp_free+0x48>)
 800ed0a:	480c      	ldr	r0, [pc, #48]	; (800ed3c <memp_free+0x4c>)
 800ed0c:	f008 ff30 	bl	8017b70 <iprintf>
 800ed10:	e00c      	b.n	800ed2c <memp_free+0x3c>

  if (mem == NULL) {
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d008      	beq.n	800ed2a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	4a09      	ldr	r2, [pc, #36]	; (800ed40 <memp_free+0x50>)
 800ed1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7ff ff94 	bl	800ec50 <do_memp_free_pool>
 800ed28:	e000      	b.n	800ed2c <memp_free+0x3c>
    return;
 800ed2a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	0801b030 	.word	0x0801b030
 800ed38:	0801b15c 	.word	0x0801b15c
 800ed3c:	0801b0e0 	.word	0x0801b0e0
 800ed40:	0801d5d8 	.word	0x0801d5d8

0800ed44 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d013      	beq.n	800ed7a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00b      	beq.n	800ed72 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f000 fe94 	bl	800fa8c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	605a      	str	r2, [r3, #4]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ed72:	6879      	ldr	r1, [r7, #4]
 800ed74:	2006      	movs	r0, #6
 800ed76:	f7ff ffbb 	bl	800ecf0 <memp_free>
  }
}
 800ed7a:	bf00      	nop
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ed82:	b480      	push	{r7}
 800ed84:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ed86:	bf00      	nop
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800ed9e:	f7f7 f847 	bl	8005e30 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d108      	bne.n	800edba <netif_add+0x2a>
 800eda8:	4b57      	ldr	r3, [pc, #348]	; (800ef08 <netif_add+0x178>)
 800edaa:	f240 1227 	movw	r2, #295	; 0x127
 800edae:	4957      	ldr	r1, [pc, #348]	; (800ef0c <netif_add+0x17c>)
 800edb0:	4857      	ldr	r0, [pc, #348]	; (800ef10 <netif_add+0x180>)
 800edb2:	f008 fedd 	bl	8017b70 <iprintf>
 800edb6:	2300      	movs	r3, #0
 800edb8:	e0a2      	b.n	800ef00 <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800edba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d108      	bne.n	800edd2 <netif_add+0x42>
 800edc0:	4b51      	ldr	r3, [pc, #324]	; (800ef08 <netif_add+0x178>)
 800edc2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800edc6:	4953      	ldr	r1, [pc, #332]	; (800ef14 <netif_add+0x184>)
 800edc8:	4851      	ldr	r0, [pc, #324]	; (800ef10 <netif_add+0x180>)
 800edca:	f008 fed1 	bl	8017b70 <iprintf>
 800edce:	2300      	movs	r3, #0
 800edd0:	e096      	b.n	800ef00 <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d101      	bne.n	800eddc <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800edd8:	4b4f      	ldr	r3, [pc, #316]	; (800ef18 <netif_add+0x188>)
 800edda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ede2:	4b4d      	ldr	r3, [pc, #308]	; (800ef18 <netif_add+0x188>)
 800ede4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d101      	bne.n	800edf0 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800edec:	4b4a      	ldr	r3, [pc, #296]	; (800ef18 <netif_add+0x188>)
 800edee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	4a45      	ldr	r2, [pc, #276]	; (800ef1c <netif_add+0x18c>)
 800ee06:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6a3a      	ldr	r2, [r7, #32]
 800ee20:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ee22:	4b3f      	ldr	r3, [pc, #252]	; (800ef20 <netif_add+0x190>)
 800ee24:	781a      	ldrb	r2, [r3, #0]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee30:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	68b9      	ldr	r1, [r7, #8]
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f000 f913 	bl	800f064 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	4798      	blx	r3
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <netif_add+0xbe>
    return NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e058      	b.n	800ef00 <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee54:	2bff      	cmp	r3, #255	; 0xff
 800ee56:	d103      	bne.n	800ee60 <netif_add+0xd0>
        netif->num = 0;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ee64:	4b2f      	ldr	r3, [pc, #188]	; (800ef24 <netif_add+0x194>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	617b      	str	r3, [r7, #20]
 800ee6a:	e02b      	b.n	800eec4 <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d106      	bne.n	800ee82 <netif_add+0xf2>
 800ee74:	4b24      	ldr	r3, [pc, #144]	; (800ef08 <netif_add+0x178>)
 800ee76:	f240 128b 	movw	r2, #395	; 0x18b
 800ee7a:	492b      	ldr	r1, [pc, #172]	; (800ef28 <netif_add+0x198>)
 800ee7c:	4824      	ldr	r0, [pc, #144]	; (800ef10 <netif_add+0x180>)
 800ee7e:	f008 fe77 	bl	8017b70 <iprintf>
        num_netifs++;
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	3301      	adds	r3, #1
 800ee86:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	2bff      	cmp	r3, #255	; 0xff
 800ee8c:	dd06      	ble.n	800ee9c <netif_add+0x10c>
 800ee8e:	4b1e      	ldr	r3, [pc, #120]	; (800ef08 <netif_add+0x178>)
 800ee90:	f240 128d 	movw	r2, #397	; 0x18d
 800ee94:	4925      	ldr	r1, [pc, #148]	; (800ef2c <netif_add+0x19c>)
 800ee96:	481e      	ldr	r0, [pc, #120]	; (800ef10 <netif_add+0x180>)
 800ee98:	f008 fe6a 	bl	8017b70 <iprintf>
        if (netif2->num == netif->num) {
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d108      	bne.n	800eebe <netif_add+0x12e>
          netif->num++;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800eebc:	e005      	b.n	800eeca <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	617b      	str	r3, [r7, #20]
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1d0      	bne.n	800ee6c <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1be      	bne.n	800ee4e <netif_add+0xbe>
  }
  if (netif->num == 254) {
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eed6:	2bfe      	cmp	r3, #254	; 0xfe
 800eed8:	d103      	bne.n	800eee2 <netif_add+0x152>
    netif_num = 0;
 800eeda:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <netif_add+0x190>)
 800eedc:	2200      	movs	r2, #0
 800eede:	701a      	strb	r2, [r3, #0]
 800eee0:	e006      	b.n	800eef0 <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eee8:	3301      	adds	r3, #1
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	4b0c      	ldr	r3, [pc, #48]	; (800ef20 <netif_add+0x190>)
 800eeee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800eef0:	4b0c      	ldr	r3, [pc, #48]	; (800ef24 <netif_add+0x194>)
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800eef8:	4a0a      	ldr	r2, [pc, #40]	; (800ef24 <netif_add+0x194>)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800eefe:	68fb      	ldr	r3, [r7, #12]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	0801b178 	.word	0x0801b178
 800ef0c:	0801b264 	.word	0x0801b264
 800ef10:	0801b220 	.word	0x0801b220
 800ef14:	0801b280 	.word	0x0801b280
 800ef18:	0801d538 	.word	0x0801d538
 800ef1c:	0800f353 	.word	0x0800f353
 800ef20:	24010940 	.word	0x24010940
 800ef24:	24010938 	.word	0x24010938
 800ef28:	0801b2a4 	.word	0x0801b2a4
 800ef2c:	0801b2b8 	.word	0x0801b2b8

0800ef30 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f003 f919 	bl	8012174 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ef42:	6839      	ldr	r1, [r7, #0]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f008 fbf1 	bl	801772c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ef4a:	bf00      	nop
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
	...

0800ef54 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d106      	bne.n	800ef74 <netif_do_set_ipaddr+0x20>
 800ef66:	4b1d      	ldr	r3, [pc, #116]	; (800efdc <netif_do_set_ipaddr+0x88>)
 800ef68:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ef6c:	491c      	ldr	r1, [pc, #112]	; (800efe0 <netif_do_set_ipaddr+0x8c>)
 800ef6e:	481d      	ldr	r0, [pc, #116]	; (800efe4 <netif_do_set_ipaddr+0x90>)
 800ef70:	f008 fdfe 	bl	8017b70 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <netif_do_set_ipaddr+0x34>
 800ef7a:	4b18      	ldr	r3, [pc, #96]	; (800efdc <netif_do_set_ipaddr+0x88>)
 800ef7c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ef80:	4917      	ldr	r1, [pc, #92]	; (800efe0 <netif_do_set_ipaddr+0x8c>)
 800ef82:	4818      	ldr	r0, [pc, #96]	; (800efe4 <netif_do_set_ipaddr+0x90>)
 800ef84:	f008 fdf4 	bl	8017b70 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3304      	adds	r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d01c      	beq.n	800efd0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	3304      	adds	r3, #4
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800efa6:	f107 0314 	add.w	r3, r7, #20
 800efaa:	4619      	mov	r1, r3
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7ff ffbf 	bl	800ef30 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d002      	beq.n	800efbe <netif_do_set_ipaddr+0x6a>
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	e000      	b.n	800efc0 <netif_do_set_ipaddr+0x6c>
 800efbe:	2300      	movs	r3, #0
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800efc4:	2101      	movs	r1, #1
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f000 f8d6 	bl	800f178 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800efcc:	2301      	movs	r3, #1
 800efce:	e000      	b.n	800efd2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	0801b178 	.word	0x0801b178
 800efe0:	0801b2e8 	.word	0x0801b2e8
 800efe4:	0801b220 	.word	0x0801b220

0800efe8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	3308      	adds	r3, #8
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	429a      	cmp	r2, r3
 800f000:	d00a      	beq.n	800f018 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d002      	beq.n	800f00e <netif_do_set_netmask+0x26>
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	e000      	b.n	800f010 <netif_do_set_netmask+0x28>
 800f00e:	2300      	movs	r3, #0
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f014:	2301      	movs	r3, #1
 800f016:	e000      	b.n	800f01a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3714      	adds	r7, #20
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr

0800f026 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f026:	b480      	push	{r7}
 800f028:	b085      	sub	sp, #20
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	60f8      	str	r0, [r7, #12]
 800f02e:	60b9      	str	r1, [r7, #8]
 800f030:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	330c      	adds	r3, #12
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d00a      	beq.n	800f056 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d002      	beq.n	800f04c <netif_do_set_gw+0x26>
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	e000      	b.n	800f04e <netif_do_set_gw+0x28>
 800f04c:	2300      	movs	r3, #0
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f052:	2301      	movs	r3, #1
 800f054:	e000      	b.n	800f058 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3714      	adds	r7, #20
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f072:	2300      	movs	r3, #0
 800f074:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f076:	2300      	movs	r3, #0
 800f078:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800f07a:	f7f6 fed9 	bl	8005e30 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800f084:	4b1c      	ldr	r3, [pc, #112]	; (800f0f8 <netif_set_addr+0x94>)
 800f086:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d101      	bne.n	800f092 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800f08e:	4b1a      	ldr	r3, [pc, #104]	; (800f0f8 <netif_set_addr+0x94>)
 800f090:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d101      	bne.n	800f09c <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800f098:	4b17      	ldr	r3, [pc, #92]	; (800f0f8 <netif_set_addr+0x94>)
 800f09a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d003      	beq.n	800f0aa <netif_set_addr+0x46>
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <netif_set_addr+0x4a>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e000      	b.n	800f0b0 <netif_set_addr+0x4c>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d006      	beq.n	800f0c6 <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f0b8:	f107 0310 	add.w	r3, r7, #16
 800f0bc:	461a      	mov	r2, r3
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f7ff ff47 	bl	800ef54 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f0c6:	69fa      	ldr	r2, [r7, #28]
 800f0c8:	6879      	ldr	r1, [r7, #4]
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f7ff ff8c 	bl	800efe8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f0d0:	69ba      	ldr	r2, [r7, #24]
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	68f8      	ldr	r0, [r7, #12]
 800f0d6:	f7ff ffa6 	bl	800f026 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d106      	bne.n	800f0ee <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f0e0:	f107 0310 	add.w	r3, r7, #16
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	68b9      	ldr	r1, [r7, #8]
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f7ff ff33 	bl	800ef54 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f0ee:	bf00      	nop
 800f0f0:	3720      	adds	r7, #32
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	0801d538 	.word	0x0801d538

0800f0fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f104:	f7f6 fe94 	bl	8005e30 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f108:	4a03      	ldr	r2, [pc, #12]	; (800f118 <netif_set_default+0x1c>)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f10e:	bf00      	nop
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	2401093c 	.word	0x2401093c

0800f11c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f124:	f7f6 fe84 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d107      	bne.n	800f13e <netif_set_up+0x22>
 800f12e:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <netif_set_up+0x50>)
 800f130:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f134:	490e      	ldr	r1, [pc, #56]	; (800f170 <netif_set_up+0x54>)
 800f136:	480f      	ldr	r0, [pc, #60]	; (800f174 <netif_set_up+0x58>)
 800f138:	f008 fd1a 	bl	8017b70 <iprintf>
 800f13c:	e013      	b.n	800f166 <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f144:	f003 0301 	and.w	r3, r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10c      	bne.n	800f166 <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f152:	f043 0301 	orr.w	r3, r3, #1
 800f156:	b2da      	uxtb	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f15e:	2103      	movs	r1, #3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f809 	bl	800f178 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	0801b178 	.word	0x0801b178
 800f170:	0801b358 	.word	0x0801b358
 800f174:	0801b220 	.word	0x0801b220

0800f178 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	460b      	mov	r3, r1
 800f182:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d106      	bne.n	800f198 <netif_issue_reports+0x20>
 800f18a:	4b18      	ldr	r3, [pc, #96]	; (800f1ec <netif_issue_reports+0x74>)
 800f18c:	f240 326d 	movw	r2, #877	; 0x36d
 800f190:	4917      	ldr	r1, [pc, #92]	; (800f1f0 <netif_issue_reports+0x78>)
 800f192:	4818      	ldr	r0, [pc, #96]	; (800f1f4 <netif_issue_reports+0x7c>)
 800f194:	f008 fcec 	bl	8017b70 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f19e:	f003 0304 	and.w	r3, r3, #4
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d01e      	beq.n	800f1e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d017      	beq.n	800f1e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f1b4:	78fb      	ldrb	r3, [r7, #3]
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d013      	beq.n	800f1e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	3304      	adds	r3, #4
 800f1c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00e      	beq.n	800f1e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1ce:	f003 0308 	and.w	r3, r3, #8
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d007      	beq.n	800f1e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	3304      	adds	r3, #4
 800f1da:	4619      	mov	r1, r3
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7fd fc07 	bl	800c9f0 <etharp_request>
 800f1e2:	e000      	b.n	800f1e6 <netif_issue_reports+0x6e>
    return;
 800f1e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	0801b178 	.word	0x0801b178
 800f1f0:	0801b374 	.word	0x0801b374
 800f1f4:	0801b220 	.word	0x0801b220

0800f1f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f200:	f7f6 fe16 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d107      	bne.n	800f21a <netif_set_down+0x22>
 800f20a:	4b12      	ldr	r3, [pc, #72]	; (800f254 <netif_set_down+0x5c>)
 800f20c:	f240 329b 	movw	r2, #923	; 0x39b
 800f210:	4911      	ldr	r1, [pc, #68]	; (800f258 <netif_set_down+0x60>)
 800f212:	4812      	ldr	r0, [pc, #72]	; (800f25c <netif_set_down+0x64>)
 800f214:	f008 fcac 	bl	8017b70 <iprintf>
 800f218:	e019      	b.n	800f24e <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	2b00      	cmp	r3, #0
 800f226:	d012      	beq.n	800f24e <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f22e:	f023 0301 	bic.w	r3, r3, #1
 800f232:	b2da      	uxtb	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f240:	f003 0308 	and.w	r3, r3, #8
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f7fc ff8b 	bl	800c164 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	0801b178 	.word	0x0801b178
 800f258:	0801b398 	.word	0x0801b398
 800f25c:	0801b220 	.word	0x0801b220

0800f260 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f268:	f7f6 fde2 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d107      	bne.n	800f282 <netif_set_link_up+0x22>
 800f272:	4b13      	ldr	r3, [pc, #76]	; (800f2c0 <netif_set_link_up+0x60>)
 800f274:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f278:	4912      	ldr	r1, [pc, #72]	; (800f2c4 <netif_set_link_up+0x64>)
 800f27a:	4813      	ldr	r0, [pc, #76]	; (800f2c8 <netif_set_link_up+0x68>)
 800f27c:	f008 fc78 	bl	8017b70 <iprintf>
 800f280:	e01b      	b.n	800f2ba <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f288:	f003 0304 	and.w	r3, r3, #4
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d114      	bne.n	800f2ba <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f296:	f043 0304 	orr.w	r3, r3, #4
 800f29a:	b2da      	uxtb	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f2a2:	2103      	movs	r1, #3
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff ff67 	bl	800f178 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	69db      	ldr	r3, [r3, #28]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d003      	beq.n	800f2ba <netif_set_link_up+0x5a>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	69db      	ldr	r3, [r3, #28]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	0801b178 	.word	0x0801b178
 800f2c4:	0801b3b8 	.word	0x0801b3b8
 800f2c8:	0801b220 	.word	0x0801b220

0800f2cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f2d4:	f7f6 fdac 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d107      	bne.n	800f2ee <netif_set_link_down+0x22>
 800f2de:	4b11      	ldr	r3, [pc, #68]	; (800f324 <netif_set_link_down+0x58>)
 800f2e0:	f240 4206 	movw	r2, #1030	; 0x406
 800f2e4:	4910      	ldr	r1, [pc, #64]	; (800f328 <netif_set_link_down+0x5c>)
 800f2e6:	4811      	ldr	r0, [pc, #68]	; (800f32c <netif_set_link_down+0x60>)
 800f2e8:	f008 fc42 	bl	8017b70 <iprintf>
 800f2ec:	e017      	b.n	800f31e <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f2f4:	f003 0304 	and.w	r3, r3, #4
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d010      	beq.n	800f31e <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f302:	f023 0304 	bic.w	r3, r3, #4
 800f306:	b2da      	uxtb	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	69db      	ldr	r3, [r3, #28]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <netif_set_link_down+0x52>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	0801b178 	.word	0x0801b178
 800f328:	0801b3dc 	.word	0x0801b3dc
 800f32c:	0801b220 	.word	0x0801b220

0800f330 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800f33a:	f7f6 fd79 	bl	8005e30 <sys_check_core_locking>

  if (netif) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	683a      	ldr	r2, [r7, #0]
 800f348:	61da      	str	r2, [r3, #28]
  }
}
 800f34a:	bf00      	nop
 800f34c:	3708      	adds	r7, #8
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f352:	b480      	push	{r7}
 800f354:	b085      	sub	sp, #20
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	60b9      	str	r1, [r7, #8]
 800f35c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f35e:	f06f 030b 	mvn.w	r3, #11
}
 800f362:	4618      	mov	r0, r3
 800f364:	3714      	adds	r7, #20
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
	...

0800f370 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	4603      	mov	r3, r0
 800f378:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800f37a:	f7f6 fd59 	bl	8005e30 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d013      	beq.n	800f3ac <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800f384:	4b0c      	ldr	r3, [pc, #48]	; (800f3b8 <netif_get_by_index+0x48>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	60fb      	str	r3, [r7, #12]
 800f38a:	e00c      	b.n	800f3a6 <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f392:	3301      	adds	r3, #1
 800f394:	b2db      	uxtb	r3, r3
 800f396:	79fa      	ldrb	r2, [r7, #7]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d101      	bne.n	800f3a0 <netif_get_by_index+0x30>
        return netif; /* found! */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	e006      	b.n	800f3ae <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	60fb      	str	r3, [r7, #12]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d1ef      	bne.n	800f38c <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	24010938 	.word	0x24010938

0800f3bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f3c2:	f001 f837 	bl	8010434 <sys_arch_protect>
 800f3c6:	6038      	str	r0, [r7, #0]
 800f3c8:	4b0d      	ldr	r3, [pc, #52]	; (800f400 <pbuf_free_ooseq+0x44>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	6838      	ldr	r0, [r7, #0]
 800f3d0:	f001 f83e 	bl	8010450 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f3d4:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <pbuf_free_ooseq+0x48>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	607b      	str	r3, [r7, #4]
 800f3da:	e00a      	b.n	800f3f2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f002 ff03 	bl	80121f0 <tcp_free_ooseq>
      return;
 800f3ea:	e005      	b.n	800f3f8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	607b      	str	r3, [r7, #4]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1f1      	bne.n	800f3dc <pbuf_free_ooseq+0x20>
    }
  }
}
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	24010941 	.word	0x24010941
 800f404:	24010954 	.word	0x24010954

0800f408 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f410:	f7ff ffd4 	bl	800f3bc <pbuf_free_ooseq>
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f422:	f001 f807 	bl	8010434 <sys_arch_protect>
 800f426:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f428:	4b0f      	ldr	r3, [pc, #60]	; (800f468 <pbuf_pool_is_empty+0x4c>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f42e:	4b0e      	ldr	r3, [pc, #56]	; (800f468 <pbuf_pool_is_empty+0x4c>)
 800f430:	2201      	movs	r2, #1
 800f432:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f001 f80b 	bl	8010450 <sys_arch_unprotect>

  if (!queued) {
 800f43a:	78fb      	ldrb	r3, [r7, #3]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d10f      	bne.n	800f460 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f440:	2100      	movs	r1, #0
 800f442:	480a      	ldr	r0, [pc, #40]	; (800f46c <pbuf_pool_is_empty+0x50>)
 800f444:	f007 f9f8 	bl	8016838 <tcpip_try_callback>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d008      	beq.n	800f460 <pbuf_pool_is_empty+0x44>
 800f44e:	f000 fff1 	bl	8010434 <sys_arch_protect>
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	4b04      	ldr	r3, [pc, #16]	; (800f468 <pbuf_pool_is_empty+0x4c>)
 800f456:	2200      	movs	r2, #0
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 fff8 	bl	8010450 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f460:	bf00      	nop
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	24010941 	.word	0x24010941
 800f46c:	0800f409 	.word	0x0800f409

0800f470 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4611      	mov	r1, r2
 800f47c:	461a      	mov	r2, r3
 800f47e:	460b      	mov	r3, r1
 800f480:	80fb      	strh	r3, [r7, #6]
 800f482:	4613      	mov	r3, r2
 800f484:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	88fa      	ldrh	r2, [r7, #6]
 800f496:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	88ba      	ldrh	r2, [r7, #4]
 800f49c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f49e:	8b3b      	ldrh	r3, [r7, #24]
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	7f3a      	ldrb	r2, [r7, #28]
 800f4aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	73da      	strb	r2, [r3, #15]
}
 800f4b8:	bf00      	nop
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08c      	sub	sp, #48	; 0x30
 800f4c8:	af02      	add	r7, sp, #8
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	71fb      	strb	r3, [r7, #7]
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	80bb      	strh	r3, [r7, #4]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f4d6:	79fb      	ldrb	r3, [r7, #7]
 800f4d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f4da:	887b      	ldrh	r3, [r7, #2]
 800f4dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f4e0:	f000 8082 	beq.w	800f5e8 <pbuf_alloc+0x124>
 800f4e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f4e8:	f300 80c9 	bgt.w	800f67e <pbuf_alloc+0x1ba>
 800f4ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f4f0:	d010      	beq.n	800f514 <pbuf_alloc+0x50>
 800f4f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f4f6:	f300 80c2 	bgt.w	800f67e <pbuf_alloc+0x1ba>
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d002      	beq.n	800f504 <pbuf_alloc+0x40>
 800f4fe:	2b41      	cmp	r3, #65	; 0x41
 800f500:	f040 80bd 	bne.w	800f67e <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f504:	887a      	ldrh	r2, [r7, #2]
 800f506:	88bb      	ldrh	r3, [r7, #4]
 800f508:	4619      	mov	r1, r3
 800f50a:	2000      	movs	r0, #0
 800f50c:	f000 f8d2 	bl	800f6b4 <pbuf_alloc_reference>
 800f510:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f512:	e0be      	b.n	800f692 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f514:	2300      	movs	r3, #0
 800f516:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f518:	2300      	movs	r3, #0
 800f51a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f51c:	88bb      	ldrh	r3, [r7, #4]
 800f51e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f520:	200c      	movs	r0, #12
 800f522:	f7ff fb6f 	bl	800ec04 <memp_malloc>
 800f526:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d109      	bne.n	800f542 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800f52e:	f7ff ff75 	bl	800f41c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f534:	2b00      	cmp	r3, #0
 800f536:	d002      	beq.n	800f53e <pbuf_alloc+0x7a>
            pbuf_free(p);
 800f538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f53a:	f000 faa7 	bl	800fa8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f53e:	2300      	movs	r3, #0
 800f540:	e0a8      	b.n	800f694 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f544:	3303      	adds	r3, #3
 800f546:	b29b      	uxth	r3, r3
 800f548:	f023 0303 	bic.w	r3, r3, #3
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	f240 53ec 	movw	r3, #1516	; 0x5ec
 800f552:	1a9b      	subs	r3, r3, r2
 800f554:	b29b      	uxth	r3, r3
 800f556:	8b7a      	ldrh	r2, [r7, #26]
 800f558:	4293      	cmp	r3, r2
 800f55a:	bf28      	it	cs
 800f55c:	4613      	movcs	r3, r2
 800f55e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f562:	3310      	adds	r3, #16
 800f564:	693a      	ldr	r2, [r7, #16]
 800f566:	4413      	add	r3, r2
 800f568:	3303      	adds	r3, #3
 800f56a:	f023 0303 	bic.w	r3, r3, #3
 800f56e:	4618      	mov	r0, r3
 800f570:	89f9      	ldrh	r1, [r7, #14]
 800f572:	8b7a      	ldrh	r2, [r7, #26]
 800f574:	2300      	movs	r3, #0
 800f576:	9301      	str	r3, [sp, #4]
 800f578:	887b      	ldrh	r3, [r7, #2]
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	460b      	mov	r3, r1
 800f57e:	4601      	mov	r1, r0
 800f580:	6938      	ldr	r0, [r7, #16]
 800f582:	f7ff ff75 	bl	800f470 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	f003 0303 	and.w	r3, r3, #3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d006      	beq.n	800f5a0 <pbuf_alloc+0xdc>
 800f592:	4b42      	ldr	r3, [pc, #264]	; (800f69c <pbuf_alloc+0x1d8>)
 800f594:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f598:	4941      	ldr	r1, [pc, #260]	; (800f6a0 <pbuf_alloc+0x1dc>)
 800f59a:	4842      	ldr	r0, [pc, #264]	; (800f6a4 <pbuf_alloc+0x1e0>)
 800f59c:	f008 fae8 	bl	8017b70 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f5a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5a2:	3303      	adds	r3, #3
 800f5a4:	f023 0303 	bic.w	r3, r3, #3
 800f5a8:	f240 52ec 	movw	r2, #1516	; 0x5ec
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d106      	bne.n	800f5be <pbuf_alloc+0xfa>
 800f5b0:	4b3a      	ldr	r3, [pc, #232]	; (800f69c <pbuf_alloc+0x1d8>)
 800f5b2:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f5b6:	493c      	ldr	r1, [pc, #240]	; (800f6a8 <pbuf_alloc+0x1e4>)
 800f5b8:	483a      	ldr	r0, [pc, #232]	; (800f6a4 <pbuf_alloc+0x1e0>)
 800f5ba:	f008 fad9 	bl	8017b70 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d102      	bne.n	800f5ca <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5c8:	e002      	b.n	800f5d0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	693a      	ldr	r2, [r7, #16]
 800f5ce:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f5d4:	8b7a      	ldrh	r2, [r7, #26]
 800f5d6:	89fb      	ldrh	r3, [r7, #14]
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f5e0:	8b7b      	ldrh	r3, [r7, #26]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d19c      	bne.n	800f520 <pbuf_alloc+0x5c>
      break;
 800f5e6:	e054      	b.n	800f692 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f5e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5ea:	3303      	adds	r3, #3
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	f023 0303 	bic.w	r3, r3, #3
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	88bb      	ldrh	r3, [r7, #4]
 800f5f6:	3303      	adds	r3, #3
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	f023 0303 	bic.w	r3, r3, #3
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	4413      	add	r3, r2
 800f602:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f604:	8b3b      	ldrh	r3, [r7, #24]
 800f606:	3310      	adds	r3, #16
 800f608:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f60a:	8b3a      	ldrh	r2, [r7, #24]
 800f60c:	88bb      	ldrh	r3, [r7, #4]
 800f60e:	3303      	adds	r3, #3
 800f610:	f023 0303 	bic.w	r3, r3, #3
 800f614:	429a      	cmp	r2, r3
 800f616:	d306      	bcc.n	800f626 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f618:	88bb      	ldrh	r3, [r7, #4]
 800f61a:	3303      	adds	r3, #3
 800f61c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f620:	697a      	ldr	r2, [r7, #20]
 800f622:	429a      	cmp	r2, r3
 800f624:	d201      	bcs.n	800f62a <pbuf_alloc+0x166>
        return NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	e034      	b.n	800f694 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f62a:	6978      	ldr	r0, [r7, #20]
 800f62c:	f7ff f94e 	bl	800e8cc <mem_malloc>
 800f630:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	2b00      	cmp	r3, #0
 800f636:	d101      	bne.n	800f63c <pbuf_alloc+0x178>
        return NULL;
 800f638:	2300      	movs	r3, #0
 800f63a:	e02b      	b.n	800f694 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f63c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f63e:	3310      	adds	r3, #16
 800f640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f642:	4413      	add	r3, r2
 800f644:	3303      	adds	r3, #3
 800f646:	f023 0303 	bic.w	r3, r3, #3
 800f64a:	4618      	mov	r0, r3
 800f64c:	88b9      	ldrh	r1, [r7, #4]
 800f64e:	88ba      	ldrh	r2, [r7, #4]
 800f650:	2300      	movs	r3, #0
 800f652:	9301      	str	r3, [sp, #4]
 800f654:	887b      	ldrh	r3, [r7, #2]
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	460b      	mov	r3, r1
 800f65a:	4601      	mov	r1, r0
 800f65c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f65e:	f7ff ff07 	bl	800f470 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	f003 0303 	and.w	r3, r3, #3
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d010      	beq.n	800f690 <pbuf_alloc+0x1cc>
 800f66e:	4b0b      	ldr	r3, [pc, #44]	; (800f69c <pbuf_alloc+0x1d8>)
 800f670:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f674:	490d      	ldr	r1, [pc, #52]	; (800f6ac <pbuf_alloc+0x1e8>)
 800f676:	480b      	ldr	r0, [pc, #44]	; (800f6a4 <pbuf_alloc+0x1e0>)
 800f678:	f008 fa7a 	bl	8017b70 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f67c:	e008      	b.n	800f690 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <pbuf_alloc+0x1d8>)
 800f680:	f240 1227 	movw	r2, #295	; 0x127
 800f684:	490a      	ldr	r1, [pc, #40]	; (800f6b0 <pbuf_alloc+0x1ec>)
 800f686:	4807      	ldr	r0, [pc, #28]	; (800f6a4 <pbuf_alloc+0x1e0>)
 800f688:	f008 fa72 	bl	8017b70 <iprintf>
      return NULL;
 800f68c:	2300      	movs	r3, #0
 800f68e:	e001      	b.n	800f694 <pbuf_alloc+0x1d0>
      break;
 800f690:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f694:	4618      	mov	r0, r3
 800f696:	3728      	adds	r7, #40	; 0x28
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	0801b400 	.word	0x0801b400
 800f6a0:	0801b48c 	.word	0x0801b48c
 800f6a4:	0801b4bc 	.word	0x0801b4bc
 800f6a8:	0801b4e4 	.word	0x0801b4e4
 800f6ac:	0801b518 	.word	0x0801b518
 800f6b0:	0801b544 	.word	0x0801b544

0800f6b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af02      	add	r7, sp, #8
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	460b      	mov	r3, r1
 800f6be:	807b      	strh	r3, [r7, #2]
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f6c4:	883b      	ldrh	r3, [r7, #0]
 800f6c6:	2b41      	cmp	r3, #65	; 0x41
 800f6c8:	d009      	beq.n	800f6de <pbuf_alloc_reference+0x2a>
 800f6ca:	883b      	ldrh	r3, [r7, #0]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d006      	beq.n	800f6de <pbuf_alloc_reference+0x2a>
 800f6d0:	4b0f      	ldr	r3, [pc, #60]	; (800f710 <pbuf_alloc_reference+0x5c>)
 800f6d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f6d6:	490f      	ldr	r1, [pc, #60]	; (800f714 <pbuf_alloc_reference+0x60>)
 800f6d8:	480f      	ldr	r0, [pc, #60]	; (800f718 <pbuf_alloc_reference+0x64>)
 800f6da:	f008 fa49 	bl	8017b70 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f6de:	200b      	movs	r0, #11
 800f6e0:	f7ff fa90 	bl	800ec04 <memp_malloc>
 800f6e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d101      	bne.n	800f6f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	e00b      	b.n	800f708 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f6f0:	8879      	ldrh	r1, [r7, #2]
 800f6f2:	887a      	ldrh	r2, [r7, #2]
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	9301      	str	r3, [sp, #4]
 800f6f8:	883b      	ldrh	r3, [r7, #0]
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	6879      	ldr	r1, [r7, #4]
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f7ff feb5 	bl	800f470 <pbuf_init_alloced_pbuf>
  return p;
 800f706:	68fb      	ldr	r3, [r7, #12]
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	0801b400 	.word	0x0801b400
 800f714:	0801b560 	.word	0x0801b560
 800f718:	0801b4bc 	.word	0x0801b4bc

0800f71c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b088      	sub	sp, #32
 800f720:	af02      	add	r7, sp, #8
 800f722:	607b      	str	r3, [r7, #4]
 800f724:	4603      	mov	r3, r0
 800f726:	73fb      	strb	r3, [r7, #15]
 800f728:	460b      	mov	r3, r1
 800f72a:	81bb      	strh	r3, [r7, #12]
 800f72c:	4613      	mov	r3, r2
 800f72e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f730:	7bfb      	ldrb	r3, [r7, #15]
 800f732:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f734:	8a7b      	ldrh	r3, [r7, #18]
 800f736:	3303      	adds	r3, #3
 800f738:	f023 0203 	bic.w	r2, r3, #3
 800f73c:	89bb      	ldrh	r3, [r7, #12]
 800f73e:	441a      	add	r2, r3
 800f740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f742:	429a      	cmp	r2, r3
 800f744:	d901      	bls.n	800f74a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f746:	2300      	movs	r3, #0
 800f748:	e018      	b.n	800f77c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f74a:	6a3b      	ldr	r3, [r7, #32]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d007      	beq.n	800f760 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f750:	8a7b      	ldrh	r3, [r7, #18]
 800f752:	3303      	adds	r3, #3
 800f754:	f023 0303 	bic.w	r3, r3, #3
 800f758:	6a3a      	ldr	r2, [r7, #32]
 800f75a:	4413      	add	r3, r2
 800f75c:	617b      	str	r3, [r7, #20]
 800f75e:	e001      	b.n	800f764 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	89b9      	ldrh	r1, [r7, #12]
 800f768:	89ba      	ldrh	r2, [r7, #12]
 800f76a:	2302      	movs	r3, #2
 800f76c:	9301      	str	r3, [sp, #4]
 800f76e:	897b      	ldrh	r3, [r7, #10]
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	460b      	mov	r3, r1
 800f774:	6979      	ldr	r1, [r7, #20]
 800f776:	f7ff fe7b 	bl	800f470 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f77a:	687b      	ldr	r3, [r7, #4]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3718      	adds	r7, #24
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	460b      	mov	r3, r1
 800f78e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d106      	bne.n	800f7a4 <pbuf_realloc+0x20>
 800f796:	4b39      	ldr	r3, [pc, #228]	; (800f87c <pbuf_realloc+0xf8>)
 800f798:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f79c:	4938      	ldr	r1, [pc, #224]	; (800f880 <pbuf_realloc+0xfc>)
 800f79e:	4839      	ldr	r0, [pc, #228]	; (800f884 <pbuf_realloc+0x100>)
 800f7a0:	f008 f9e6 	bl	8017b70 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	891b      	ldrh	r3, [r3, #8]
 800f7a8:	887a      	ldrh	r2, [r7, #2]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d261      	bcs.n	800f872 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	891a      	ldrh	r2, [r3, #8]
 800f7b2:	887b      	ldrh	r3, [r7, #2]
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f7b8:	887b      	ldrh	r3, [r7, #2]
 800f7ba:	817b      	strh	r3, [r7, #10]
  q = p;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f7c0:	e018      	b.n	800f7f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	895b      	ldrh	r3, [r3, #10]
 800f7c6:	897a      	ldrh	r2, [r7, #10]
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	891a      	ldrh	r2, [r3, #8]
 800f7d0:	893b      	ldrh	r3, [r7, #8]
 800f7d2:	1ad3      	subs	r3, r2, r3
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d106      	bne.n	800f7f4 <pbuf_realloc+0x70>
 800f7e6:	4b25      	ldr	r3, [pc, #148]	; (800f87c <pbuf_realloc+0xf8>)
 800f7e8:	f240 12af 	movw	r2, #431	; 0x1af
 800f7ec:	4926      	ldr	r1, [pc, #152]	; (800f888 <pbuf_realloc+0x104>)
 800f7ee:	4825      	ldr	r0, [pc, #148]	; (800f884 <pbuf_realloc+0x100>)
 800f7f0:	f008 f9be 	bl	8017b70 <iprintf>
  while (rem_len > q->len) {
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	895b      	ldrh	r3, [r3, #10]
 800f7f8:	897a      	ldrh	r2, [r7, #10]
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d8e1      	bhi.n	800f7c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	7b1b      	ldrb	r3, [r3, #12]
 800f802:	f003 030f 	and.w	r3, r3, #15
 800f806:	2b00      	cmp	r3, #0
 800f808:	d11f      	bne.n	800f84a <pbuf_realloc+0xc6>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	895b      	ldrh	r3, [r3, #10]
 800f80e:	897a      	ldrh	r2, [r7, #10]
 800f810:	429a      	cmp	r2, r3
 800f812:	d01a      	beq.n	800f84a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	7b5b      	ldrb	r3, [r3, #13]
 800f818:	f003 0302 	and.w	r3, r3, #2
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d114      	bne.n	800f84a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	685a      	ldr	r2, [r3, #4]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	1ad2      	subs	r2, r2, r3
 800f828:	897b      	ldrh	r3, [r7, #10]
 800f82a:	4413      	add	r3, r2
 800f82c:	4619      	mov	r1, r3
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7fe ff4a 	bl	800e6c8 <mem_trim>
 800f834:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d106      	bne.n	800f84a <pbuf_realloc+0xc6>
 800f83c:	4b0f      	ldr	r3, [pc, #60]	; (800f87c <pbuf_realloc+0xf8>)
 800f83e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f842:	4912      	ldr	r1, [pc, #72]	; (800f88c <pbuf_realloc+0x108>)
 800f844:	480f      	ldr	r0, [pc, #60]	; (800f884 <pbuf_realloc+0x100>)
 800f846:	f008 f993 	bl	8017b70 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	897a      	ldrh	r2, [r7, #10]
 800f84e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	895a      	ldrh	r2, [r3, #10]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d004      	beq.n	800f86a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4618      	mov	r0, r3
 800f866:	f000 f911 	bl	800fa8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2200      	movs	r2, #0
 800f86e:	601a      	str	r2, [r3, #0]
 800f870:	e000      	b.n	800f874 <pbuf_realloc+0xf0>
    return;
 800f872:	bf00      	nop

}
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	0801b400 	.word	0x0801b400
 800f880:	0801b574 	.word	0x0801b574
 800f884:	0801b4bc 	.word	0x0801b4bc
 800f888:	0801b58c 	.word	0x0801b58c
 800f88c:	0801b5a4 	.word	0x0801b5a4

0800f890 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	4613      	mov	r3, r2
 800f89c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d106      	bne.n	800f8b2 <pbuf_add_header_impl+0x22>
 800f8a4:	4b2b      	ldr	r3, [pc, #172]	; (800f954 <pbuf_add_header_impl+0xc4>)
 800f8a6:	f240 12df 	movw	r2, #479	; 0x1df
 800f8aa:	492b      	ldr	r1, [pc, #172]	; (800f958 <pbuf_add_header_impl+0xc8>)
 800f8ac:	482b      	ldr	r0, [pc, #172]	; (800f95c <pbuf_add_header_impl+0xcc>)
 800f8ae:	f008 f95f 	bl	8017b70 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d003      	beq.n	800f8c0 <pbuf_add_header_impl+0x30>
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8be:	d301      	bcc.n	800f8c4 <pbuf_add_header_impl+0x34>
    return 1;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e043      	b.n	800f94c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d101      	bne.n	800f8ce <pbuf_add_header_impl+0x3e>
    return 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	e03e      	b.n	800f94c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	891a      	ldrh	r2, [r3, #8]
 800f8d6:	8a7b      	ldrh	r3, [r7, #18]
 800f8d8:	4413      	add	r3, r2
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	8a7a      	ldrh	r2, [r7, #18]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d901      	bls.n	800f8e6 <pbuf_add_header_impl+0x56>
    return 1;
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e032      	b.n	800f94c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	7b1b      	ldrb	r3, [r3, #12]
 800f8ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f8ec:	8a3b      	ldrh	r3, [r7, #16]
 800f8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00c      	beq.n	800f910 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	685a      	ldr	r2, [r3, #4]
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	425b      	negs	r3, r3
 800f8fe:	4413      	add	r3, r2
 800f900:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	3310      	adds	r3, #16
 800f906:	697a      	ldr	r2, [r7, #20]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d20d      	bcs.n	800f928 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f90c:	2301      	movs	r3, #1
 800f90e:	e01d      	b.n	800f94c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f910:	79fb      	ldrb	r3, [r7, #7]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d006      	beq.n	800f924 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	425b      	negs	r3, r3
 800f91e:	4413      	add	r3, r2
 800f920:	617b      	str	r3, [r7, #20]
 800f922:	e001      	b.n	800f928 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f924:	2301      	movs	r3, #1
 800f926:	e011      	b.n	800f94c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	895a      	ldrh	r2, [r3, #10]
 800f932:	8a7b      	ldrh	r3, [r7, #18]
 800f934:	4413      	add	r3, r2
 800f936:	b29a      	uxth	r2, r3
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	891a      	ldrh	r2, [r3, #8]
 800f940:	8a7b      	ldrh	r3, [r7, #18]
 800f942:	4413      	add	r3, r2
 800f944:	b29a      	uxth	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	811a      	strh	r2, [r3, #8]


  return 0;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0801b400 	.word	0x0801b400
 800f958:	0801b5c0 	.word	0x0801b5c0
 800f95c:	0801b4bc 	.word	0x0801b4bc

0800f960 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f96a:	2200      	movs	r2, #0
 800f96c:	6839      	ldr	r1, [r7, #0]
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7ff ff8e 	bl	800f890 <pbuf_add_header_impl>
 800f974:	4603      	mov	r3, r0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
	...

0800f980 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d106      	bne.n	800f99e <pbuf_remove_header+0x1e>
 800f990:	4b20      	ldr	r3, [pc, #128]	; (800fa14 <pbuf_remove_header+0x94>)
 800f992:	f240 224b 	movw	r2, #587	; 0x24b
 800f996:	4920      	ldr	r1, [pc, #128]	; (800fa18 <pbuf_remove_header+0x98>)
 800f998:	4820      	ldr	r0, [pc, #128]	; (800fa1c <pbuf_remove_header+0x9c>)
 800f99a:	f008 f8e9 	bl	8017b70 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d003      	beq.n	800f9ac <pbuf_remove_header+0x2c>
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9aa:	d301      	bcc.n	800f9b0 <pbuf_remove_header+0x30>
    return 1;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e02c      	b.n	800fa0a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <pbuf_remove_header+0x3a>
    return 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	e027      	b.n	800fa0a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	895b      	ldrh	r3, [r3, #10]
 800f9c2:	89fa      	ldrh	r2, [r7, #14]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d908      	bls.n	800f9da <pbuf_remove_header+0x5a>
 800f9c8:	4b12      	ldr	r3, [pc, #72]	; (800fa14 <pbuf_remove_header+0x94>)
 800f9ca:	f240 2255 	movw	r2, #597	; 0x255
 800f9ce:	4914      	ldr	r1, [pc, #80]	; (800fa20 <pbuf_remove_header+0xa0>)
 800f9d0:	4812      	ldr	r0, [pc, #72]	; (800fa1c <pbuf_remove_header+0x9c>)
 800f9d2:	f008 f8cd 	bl	8017b70 <iprintf>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e017      	b.n	800fa0a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685a      	ldr	r2, [r3, #4]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	441a      	add	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	895a      	ldrh	r2, [r3, #10]
 800f9f0:	89fb      	ldrh	r3, [r7, #14]
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	891a      	ldrh	r2, [r3, #8]
 800f9fe:	89fb      	ldrh	r3, [r7, #14]
 800fa00:	1ad3      	subs	r3, r2, r3
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	0801b400 	.word	0x0801b400
 800fa18:	0801b5c0 	.word	0x0801b5c0
 800fa1c:	0801b4bc 	.word	0x0801b4bc
 800fa20:	0801b5cc 	.word	0x0801b5cc

0800fa24 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	807b      	strh	r3, [r7, #2]
 800fa30:	4613      	mov	r3, r2
 800fa32:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800fa34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	da08      	bge.n	800fa4e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800fa3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa40:	425b      	negs	r3, r3
 800fa42:	4619      	mov	r1, r3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff ff9b 	bl	800f980 <pbuf_remove_header>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	e007      	b.n	800fa5e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800fa4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa52:	787a      	ldrb	r2, [r7, #1]
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff ff1a 	bl	800f890 <pbuf_add_header_impl>
 800fa5c:	4603      	mov	r3, r0
  }
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}

0800fa66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b082      	sub	sp, #8
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
 800fa6e:	460b      	mov	r3, r1
 800fa70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800fa72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa76:	2201      	movs	r2, #1
 800fa78:	4619      	mov	r1, r3
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7ff ffd2 	bl	800fa24 <pbuf_header_impl>
 800fa80:	4603      	mov	r3, r0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3708      	adds	r7, #8
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
	...

0800fa8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b088      	sub	sp, #32
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10b      	bne.n	800fab2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d106      	bne.n	800faae <pbuf_free+0x22>
 800faa0:	4b3b      	ldr	r3, [pc, #236]	; (800fb90 <pbuf_free+0x104>)
 800faa2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800faa6:	493b      	ldr	r1, [pc, #236]	; (800fb94 <pbuf_free+0x108>)
 800faa8:	483b      	ldr	r0, [pc, #236]	; (800fb98 <pbuf_free+0x10c>)
 800faaa:	f008 f861 	bl	8017b70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	e069      	b.n	800fb86 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fab2:	2300      	movs	r3, #0
 800fab4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fab6:	e062      	b.n	800fb7e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800fab8:	f000 fcbc 	bl	8010434 <sys_arch_protect>
 800fabc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	7b9b      	ldrb	r3, [r3, #14]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d106      	bne.n	800fad4 <pbuf_free+0x48>
 800fac6:	4b32      	ldr	r3, [pc, #200]	; (800fb90 <pbuf_free+0x104>)
 800fac8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800facc:	4933      	ldr	r1, [pc, #204]	; (800fb9c <pbuf_free+0x110>)
 800face:	4832      	ldr	r0, [pc, #200]	; (800fb98 <pbuf_free+0x10c>)
 800fad0:	f008 f84e 	bl	8017b70 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7b9b      	ldrb	r3, [r3, #14]
 800fad8:	3b01      	subs	r3, #1
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	739a      	strb	r2, [r3, #14]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	7b9b      	ldrb	r3, [r3, #14]
 800fae4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800fae6:	69b8      	ldr	r0, [r7, #24]
 800fae8:	f000 fcb2 	bl	8010450 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800faec:	7dfb      	ldrb	r3, [r7, #23]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d143      	bne.n	800fb7a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	7b1b      	ldrb	r3, [r3, #12]
 800fafc:	f003 030f 	and.w	r3, r3, #15
 800fb00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	7b5b      	ldrb	r3, [r3, #13]
 800fb06:	f003 0302 	and.w	r3, r3, #2
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d011      	beq.n	800fb32 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d106      	bne.n	800fb28 <pbuf_free+0x9c>
 800fb1a:	4b1d      	ldr	r3, [pc, #116]	; (800fb90 <pbuf_free+0x104>)
 800fb1c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fb20:	491f      	ldr	r1, [pc, #124]	; (800fba0 <pbuf_free+0x114>)
 800fb22:	481d      	ldr	r0, [pc, #116]	; (800fb98 <pbuf_free+0x10c>)
 800fb24:	f008 f824 	bl	8017b70 <iprintf>
        pc->custom_free_function(p);
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	4798      	blx	r3
 800fb30:	e01d      	b.n	800fb6e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d104      	bne.n	800fb42 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	200c      	movs	r0, #12
 800fb3c:	f7ff f8d8 	bl	800ecf0 <memp_free>
 800fb40:	e015      	b.n	800fb6e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800fb42:	7bfb      	ldrb	r3, [r7, #15]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d104      	bne.n	800fb52 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800fb48:	6879      	ldr	r1, [r7, #4]
 800fb4a:	200b      	movs	r0, #11
 800fb4c:	f7ff f8d0 	bl	800ecf0 <memp_free>
 800fb50:	e00d      	b.n	800fb6e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fb52:	7bfb      	ldrb	r3, [r7, #15]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d103      	bne.n	800fb60 <pbuf_free+0xd4>
          mem_free(p);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7fe fd25 	bl	800e5a8 <mem_free>
 800fb5e:	e006      	b.n	800fb6e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fb60:	4b0b      	ldr	r3, [pc, #44]	; (800fb90 <pbuf_free+0x104>)
 800fb62:	f240 320f 	movw	r2, #783	; 0x30f
 800fb66:	490f      	ldr	r1, [pc, #60]	; (800fba4 <pbuf_free+0x118>)
 800fb68:	480b      	ldr	r0, [pc, #44]	; (800fb98 <pbuf_free+0x10c>)
 800fb6a:	f008 f801 	bl	8017b70 <iprintf>
        }
      }
      count++;
 800fb6e:	7ffb      	ldrb	r3, [r7, #31]
 800fb70:	3301      	adds	r3, #1
 800fb72:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	607b      	str	r3, [r7, #4]
 800fb78:	e001      	b.n	800fb7e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d199      	bne.n	800fab8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fb84:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3720      	adds	r7, #32
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	0801b400 	.word	0x0801b400
 800fb94:	0801b5c0 	.word	0x0801b5c0
 800fb98:	0801b4bc 	.word	0x0801b4bc
 800fb9c:	0801b5ec 	.word	0x0801b5ec
 800fba0:	0801b604 	.word	0x0801b604
 800fba4:	0801b628 	.word	0x0801b628

0800fba8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fbb4:	e005      	b.n	800fbc2 <pbuf_clen+0x1a>
    ++len;
 800fbb6:	89fb      	ldrh	r3, [r7, #14]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1f6      	bne.n	800fbb6 <pbuf_clen+0xe>
  }
  return len;
 800fbc8:	89fb      	ldrh	r3, [r7, #14]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3714      	adds	r7, #20
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
	...

0800fbd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d016      	beq.n	800fc14 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fbe6:	f000 fc25 	bl	8010434 <sys_arch_protect>
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	7b9b      	ldrb	r3, [r3, #14]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	739a      	strb	r2, [r3, #14]
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f000 fc29 	bl	8010450 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	7b9b      	ldrb	r3, [r3, #14]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <pbuf_ref+0x3c>
 800fc06:	4b05      	ldr	r3, [pc, #20]	; (800fc1c <pbuf_ref+0x44>)
 800fc08:	f240 3242 	movw	r2, #834	; 0x342
 800fc0c:	4904      	ldr	r1, [pc, #16]	; (800fc20 <pbuf_ref+0x48>)
 800fc0e:	4805      	ldr	r0, [pc, #20]	; (800fc24 <pbuf_ref+0x4c>)
 800fc10:	f007 ffae 	bl	8017b70 <iprintf>
  }
}
 800fc14:	bf00      	nop
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	0801b400 	.word	0x0801b400
 800fc20:	0801b63c 	.word	0x0801b63c
 800fc24:	0801b4bc 	.word	0x0801b4bc

0800fc28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d002      	beq.n	800fc3e <pbuf_cat+0x16>
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d107      	bne.n	800fc4e <pbuf_cat+0x26>
 800fc3e:	4b20      	ldr	r3, [pc, #128]	; (800fcc0 <pbuf_cat+0x98>)
 800fc40:	f240 3259 	movw	r2, #857	; 0x359
 800fc44:	491f      	ldr	r1, [pc, #124]	; (800fcc4 <pbuf_cat+0x9c>)
 800fc46:	4820      	ldr	r0, [pc, #128]	; (800fcc8 <pbuf_cat+0xa0>)
 800fc48:	f007 ff92 	bl	8017b70 <iprintf>
 800fc4c:	e034      	b.n	800fcb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	e00a      	b.n	800fc6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	891a      	ldrh	r2, [r3, #8]
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	891b      	ldrh	r3, [r3, #8]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	60fb      	str	r3, [r7, #12]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d1f0      	bne.n	800fc54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	891a      	ldrh	r2, [r3, #8]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	895b      	ldrh	r3, [r3, #10]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d006      	beq.n	800fc8c <pbuf_cat+0x64>
 800fc7e:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <pbuf_cat+0x98>)
 800fc80:	f240 3262 	movw	r2, #866	; 0x362
 800fc84:	4911      	ldr	r1, [pc, #68]	; (800fccc <pbuf_cat+0xa4>)
 800fc86:	4810      	ldr	r0, [pc, #64]	; (800fcc8 <pbuf_cat+0xa0>)
 800fc88:	f007 ff72 	bl	8017b70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d006      	beq.n	800fca2 <pbuf_cat+0x7a>
 800fc94:	4b0a      	ldr	r3, [pc, #40]	; (800fcc0 <pbuf_cat+0x98>)
 800fc96:	f240 3263 	movw	r2, #867	; 0x363
 800fc9a:	490d      	ldr	r1, [pc, #52]	; (800fcd0 <pbuf_cat+0xa8>)
 800fc9c:	480a      	ldr	r0, [pc, #40]	; (800fcc8 <pbuf_cat+0xa0>)
 800fc9e:	f007 ff67 	bl	8017b70 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	891a      	ldrh	r2, [r3, #8]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	891b      	ldrh	r3, [r3, #8]
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	0801b400 	.word	0x0801b400
 800fcc4:	0801b650 	.word	0x0801b650
 800fcc8:	0801b4bc 	.word	0x0801b4bc
 800fccc:	0801b688 	.word	0x0801b688
 800fcd0:	0801b6b8 	.word	0x0801b6b8

0800fcd4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7ff ffa1 	bl	800fc28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800fce6:	6838      	ldr	r0, [r7, #0]
 800fce8:	f7ff ff76 	bl	800fbd8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b086      	sub	sp, #24
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	617b      	str	r3, [r7, #20]
 800fd02:	2300      	movs	r3, #0
 800fd04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d008      	beq.n	800fd1e <pbuf_copy+0x2a>
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d005      	beq.n	800fd1e <pbuf_copy+0x2a>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	891a      	ldrh	r2, [r3, #8]
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	891b      	ldrh	r3, [r3, #8]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d209      	bcs.n	800fd32 <pbuf_copy+0x3e>
 800fd1e:	4b57      	ldr	r3, [pc, #348]	; (800fe7c <pbuf_copy+0x188>)
 800fd20:	f240 32c9 	movw	r2, #969	; 0x3c9
 800fd24:	4956      	ldr	r1, [pc, #344]	; (800fe80 <pbuf_copy+0x18c>)
 800fd26:	4857      	ldr	r0, [pc, #348]	; (800fe84 <pbuf_copy+0x190>)
 800fd28:	f007 ff22 	bl	8017b70 <iprintf>
 800fd2c:	f06f 030f 	mvn.w	r3, #15
 800fd30:	e09f      	b.n	800fe72 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	895b      	ldrh	r3, [r3, #10]
 800fd36:	461a      	mov	r2, r3
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	1ad2      	subs	r2, r2, r3
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	895b      	ldrh	r3, [r3, #10]
 800fd40:	4619      	mov	r1, r3
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	1acb      	subs	r3, r1, r3
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d306      	bcc.n	800fd58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	895b      	ldrh	r3, [r3, #10]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	60fb      	str	r3, [r7, #12]
 800fd56:	e005      	b.n	800fd64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	895b      	ldrh	r3, [r3, #10]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	685a      	ldr	r2, [r3, #4]
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	18d0      	adds	r0, r2, r3
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	685a      	ldr	r2, [r3, #4]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	4413      	add	r3, r2
 800fd74:	68fa      	ldr	r2, [r7, #12]
 800fd76:	4619      	mov	r1, r3
 800fd78:	f007 fe35 	bl	80179e6 <memcpy>
    offset_to += len;
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	4413      	add	r3, r2
 800fd82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fd84:	693a      	ldr	r2, [r7, #16]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	4413      	add	r3, r2
 800fd8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	895b      	ldrh	r3, [r3, #10]
 800fd90:	461a      	mov	r2, r3
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d906      	bls.n	800fda6 <pbuf_copy+0xb2>
 800fd98:	4b38      	ldr	r3, [pc, #224]	; (800fe7c <pbuf_copy+0x188>)
 800fd9a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800fd9e:	493a      	ldr	r1, [pc, #232]	; (800fe88 <pbuf_copy+0x194>)
 800fda0:	4838      	ldr	r0, [pc, #224]	; (800fe84 <pbuf_copy+0x190>)
 800fda2:	f007 fee5 	bl	8017b70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	895b      	ldrh	r3, [r3, #10]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d906      	bls.n	800fdc0 <pbuf_copy+0xcc>
 800fdb2:	4b32      	ldr	r3, [pc, #200]	; (800fe7c <pbuf_copy+0x188>)
 800fdb4:	f240 32da 	movw	r2, #986	; 0x3da
 800fdb8:	4934      	ldr	r1, [pc, #208]	; (800fe8c <pbuf_copy+0x198>)
 800fdba:	4832      	ldr	r0, [pc, #200]	; (800fe84 <pbuf_copy+0x190>)
 800fdbc:	f007 fed8 	bl	8017b70 <iprintf>
    if (offset_from >= p_from->len) {
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	895b      	ldrh	r3, [r3, #10]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d304      	bcc.n	800fdd6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	895b      	ldrh	r3, [r3, #10]
 800fdda:	461a      	mov	r2, r3
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d114      	bne.n	800fe0c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d10c      	bne.n	800fe0c <pbuf_copy+0x118>
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d009      	beq.n	800fe0c <pbuf_copy+0x118>
 800fdf8:	4b20      	ldr	r3, [pc, #128]	; (800fe7c <pbuf_copy+0x188>)
 800fdfa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800fdfe:	4924      	ldr	r1, [pc, #144]	; (800fe90 <pbuf_copy+0x19c>)
 800fe00:	4820      	ldr	r0, [pc, #128]	; (800fe84 <pbuf_copy+0x190>)
 800fe02:	f007 feb5 	bl	8017b70 <iprintf>
 800fe06:	f06f 030f 	mvn.w	r3, #15
 800fe0a:	e032      	b.n	800fe72 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d013      	beq.n	800fe3a <pbuf_copy+0x146>
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	895a      	ldrh	r2, [r3, #10]
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	891b      	ldrh	r3, [r3, #8]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d10d      	bne.n	800fe3a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d009      	beq.n	800fe3a <pbuf_copy+0x146>
 800fe26:	4b15      	ldr	r3, [pc, #84]	; (800fe7c <pbuf_copy+0x188>)
 800fe28:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800fe2c:	4919      	ldr	r1, [pc, #100]	; (800fe94 <pbuf_copy+0x1a0>)
 800fe2e:	4815      	ldr	r0, [pc, #84]	; (800fe84 <pbuf_copy+0x190>)
 800fe30:	f007 fe9e 	bl	8017b70 <iprintf>
 800fe34:	f06f 0305 	mvn.w	r3, #5
 800fe38:	e01b      	b.n	800fe72 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d013      	beq.n	800fe68 <pbuf_copy+0x174>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	895a      	ldrh	r2, [r3, #10]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	891b      	ldrh	r3, [r3, #8]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d10d      	bne.n	800fe68 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d009      	beq.n	800fe68 <pbuf_copy+0x174>
 800fe54:	4b09      	ldr	r3, [pc, #36]	; (800fe7c <pbuf_copy+0x188>)
 800fe56:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800fe5a:	490e      	ldr	r1, [pc, #56]	; (800fe94 <pbuf_copy+0x1a0>)
 800fe5c:	4809      	ldr	r0, [pc, #36]	; (800fe84 <pbuf_copy+0x190>)
 800fe5e:	f007 fe87 	bl	8017b70 <iprintf>
 800fe62:	f06f 0305 	mvn.w	r3, #5
 800fe66:	e004      	b.n	800fe72 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f47f af61 	bne.w	800fd32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fe70:	2300      	movs	r3, #0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3718      	adds	r7, #24
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	0801b400 	.word	0x0801b400
 800fe80:	0801b704 	.word	0x0801b704
 800fe84:	0801b4bc 	.word	0x0801b4bc
 800fe88:	0801b734 	.word	0x0801b734
 800fe8c:	0801b74c 	.word	0x0801b74c
 800fe90:	0801b768 	.word	0x0801b768
 800fe94:	0801b778 	.word	0x0801b778

0800fe98 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b088      	sub	sp, #32
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4611      	mov	r1, r2
 800fea4:	461a      	mov	r2, r3
 800fea6:	460b      	mov	r3, r1
 800fea8:	80fb      	strh	r3, [r7, #6]
 800feaa:	4613      	mov	r3, r2
 800feac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800feae:	2300      	movs	r3, #0
 800feb0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d108      	bne.n	800fece <pbuf_copy_partial+0x36>
 800febc:	4b2b      	ldr	r3, [pc, #172]	; (800ff6c <pbuf_copy_partial+0xd4>)
 800febe:	f240 420a 	movw	r2, #1034	; 0x40a
 800fec2:	492b      	ldr	r1, [pc, #172]	; (800ff70 <pbuf_copy_partial+0xd8>)
 800fec4:	482b      	ldr	r0, [pc, #172]	; (800ff74 <pbuf_copy_partial+0xdc>)
 800fec6:	f007 fe53 	bl	8017b70 <iprintf>
 800feca:	2300      	movs	r3, #0
 800fecc:	e04a      	b.n	800ff64 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d108      	bne.n	800fee6 <pbuf_copy_partial+0x4e>
 800fed4:	4b25      	ldr	r3, [pc, #148]	; (800ff6c <pbuf_copy_partial+0xd4>)
 800fed6:	f240 420b 	movw	r2, #1035	; 0x40b
 800feda:	4927      	ldr	r1, [pc, #156]	; (800ff78 <pbuf_copy_partial+0xe0>)
 800fedc:	4825      	ldr	r0, [pc, #148]	; (800ff74 <pbuf_copy_partial+0xdc>)
 800fede:	f007 fe47 	bl	8017b70 <iprintf>
 800fee2:	2300      	movs	r3, #0
 800fee4:	e03e      	b.n	800ff64 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	61fb      	str	r3, [r7, #28]
 800feea:	e034      	b.n	800ff56 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800feec:	88bb      	ldrh	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00a      	beq.n	800ff08 <pbuf_copy_partial+0x70>
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	895b      	ldrh	r3, [r3, #10]
 800fef6:	88ba      	ldrh	r2, [r7, #4]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d305      	bcc.n	800ff08 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	895b      	ldrh	r3, [r3, #10]
 800ff00:	88ba      	ldrh	r2, [r7, #4]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	80bb      	strh	r3, [r7, #4]
 800ff06:	e023      	b.n	800ff50 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	895a      	ldrh	r2, [r3, #10]
 800ff0c:	88bb      	ldrh	r3, [r7, #4]
 800ff0e:	1ad3      	subs	r3, r2, r3
 800ff10:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ff12:	8b3a      	ldrh	r2, [r7, #24]
 800ff14:	88fb      	ldrh	r3, [r7, #6]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d901      	bls.n	800ff1e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ff1a:	88fb      	ldrh	r3, [r7, #6]
 800ff1c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ff1e:	8b7b      	ldrh	r3, [r7, #26]
 800ff20:	68ba      	ldr	r2, [r7, #8]
 800ff22:	18d0      	adds	r0, r2, r3
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	88bb      	ldrh	r3, [r7, #4]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	8b3a      	ldrh	r2, [r7, #24]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	f007 fd59 	bl	80179e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ff34:	8afa      	ldrh	r2, [r7, #22]
 800ff36:	8b3b      	ldrh	r3, [r7, #24]
 800ff38:	4413      	add	r3, r2
 800ff3a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ff3c:	8b7a      	ldrh	r2, [r7, #26]
 800ff3e:	8b3b      	ldrh	r3, [r7, #24]
 800ff40:	4413      	add	r3, r2
 800ff42:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ff44:	88fa      	ldrh	r2, [r7, #6]
 800ff46:	8b3b      	ldrh	r3, [r7, #24]
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	61fb      	str	r3, [r7, #28]
 800ff56:	88fb      	ldrh	r3, [r7, #6]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d002      	beq.n	800ff62 <pbuf_copy_partial+0xca>
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1c4      	bne.n	800feec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ff62:	8afb      	ldrh	r3, [r7, #22]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3720      	adds	r7, #32
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	0801b400 	.word	0x0801b400
 800ff70:	0801b7a4 	.word	0x0801b7a4
 800ff74:	0801b4bc 	.word	0x0801b4bc
 800ff78:	0801b7c4 	.word	0x0801b7c4

0800ff7c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b088      	sub	sp, #32
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	4613      	mov	r3, r2
 800ff88:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ff8a:	88fb      	ldrh	r3, [r7, #6]
 800ff8c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d109      	bne.n	800ffac <pbuf_take+0x30>
 800ff98:	4b3a      	ldr	r3, [pc, #232]	; (8010084 <pbuf_take+0x108>)
 800ff9a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ff9e:	493a      	ldr	r1, [pc, #232]	; (8010088 <pbuf_take+0x10c>)
 800ffa0:	483a      	ldr	r0, [pc, #232]	; (801008c <pbuf_take+0x110>)
 800ffa2:	f007 fde5 	bl	8017b70 <iprintf>
 800ffa6:	f06f 030f 	mvn.w	r3, #15
 800ffaa:	e067      	b.n	801007c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d109      	bne.n	800ffc6 <pbuf_take+0x4a>
 800ffb2:	4b34      	ldr	r3, [pc, #208]	; (8010084 <pbuf_take+0x108>)
 800ffb4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ffb8:	4935      	ldr	r1, [pc, #212]	; (8010090 <pbuf_take+0x114>)
 800ffba:	4834      	ldr	r0, [pc, #208]	; (801008c <pbuf_take+0x110>)
 800ffbc:	f007 fdd8 	bl	8017b70 <iprintf>
 800ffc0:	f06f 030f 	mvn.w	r3, #15
 800ffc4:	e05a      	b.n	801007c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	891b      	ldrh	r3, [r3, #8]
 800ffca:	88fa      	ldrh	r2, [r7, #6]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d909      	bls.n	800ffe4 <pbuf_take+0x68>
 800ffd0:	4b2c      	ldr	r3, [pc, #176]	; (8010084 <pbuf_take+0x108>)
 800ffd2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ffd6:	492f      	ldr	r1, [pc, #188]	; (8010094 <pbuf_take+0x118>)
 800ffd8:	482c      	ldr	r0, [pc, #176]	; (801008c <pbuf_take+0x110>)
 800ffda:	f007 fdc9 	bl	8017b70 <iprintf>
 800ffde:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe2:	e04b      	b.n	801007c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d007      	beq.n	800fffa <pbuf_take+0x7e>
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d004      	beq.n	800fffa <pbuf_take+0x7e>
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	891b      	ldrh	r3, [r3, #8]
 800fff4:	88fa      	ldrh	r2, [r7, #6]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d902      	bls.n	8010000 <pbuf_take+0x84>
    return ERR_ARG;
 800fffa:	f06f 030f 	mvn.w	r3, #15
 800fffe:	e03d      	b.n	801007c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	61fb      	str	r3, [r7, #28]
 8010004:	e028      	b.n	8010058 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d106      	bne.n	801001a <pbuf_take+0x9e>
 801000c:	4b1d      	ldr	r3, [pc, #116]	; (8010084 <pbuf_take+0x108>)
 801000e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010012:	4921      	ldr	r1, [pc, #132]	; (8010098 <pbuf_take+0x11c>)
 8010014:	481d      	ldr	r0, [pc, #116]	; (801008c <pbuf_take+0x110>)
 8010016:	f007 fdab 	bl	8017b70 <iprintf>
    buf_copy_len = total_copy_len;
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	895b      	ldrh	r3, [r3, #10]
 8010022:	461a      	mov	r2, r3
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	4293      	cmp	r3, r2
 8010028:	d902      	bls.n	8010030 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	895b      	ldrh	r3, [r3, #10]
 801002e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	6858      	ldr	r0, [r3, #4]
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	4413      	add	r3, r2
 801003a:	69ba      	ldr	r2, [r7, #24]
 801003c:	4619      	mov	r1, r3
 801003e:	f007 fcd2 	bl	80179e6 <memcpy>
    total_copy_len -= buf_copy_len;
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	1ad3      	subs	r3, r2, r3
 8010048:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801004a:	693a      	ldr	r2, [r7, #16]
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	4413      	add	r3, r2
 8010050:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010052:	69fb      	ldr	r3, [r7, #28]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	61fb      	str	r3, [r7, #28]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1d3      	bne.n	8010006 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d103      	bne.n	801006c <pbuf_take+0xf0>
 8010064:	88fb      	ldrh	r3, [r7, #6]
 8010066:	693a      	ldr	r2, [r7, #16]
 8010068:	429a      	cmp	r2, r3
 801006a:	d006      	beq.n	801007a <pbuf_take+0xfe>
 801006c:	4b05      	ldr	r3, [pc, #20]	; (8010084 <pbuf_take+0x108>)
 801006e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8010072:	490a      	ldr	r1, [pc, #40]	; (801009c <pbuf_take+0x120>)
 8010074:	4805      	ldr	r0, [pc, #20]	; (801008c <pbuf_take+0x110>)
 8010076:	f007 fd7b 	bl	8017b70 <iprintf>
  return ERR_OK;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3720      	adds	r7, #32
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	0801b400 	.word	0x0801b400
 8010088:	0801b834 	.word	0x0801b834
 801008c:	0801b4bc 	.word	0x0801b4bc
 8010090:	0801b84c 	.word	0x0801b84c
 8010094:	0801b868 	.word	0x0801b868
 8010098:	0801b888 	.word	0x0801b888
 801009c:	0801b8a0 	.word	0x0801b8a0

080100a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	4603      	mov	r3, r0
 80100a8:	603a      	str	r2, [r7, #0]
 80100aa:	71fb      	strb	r3, [r7, #7]
 80100ac:	460b      	mov	r3, r1
 80100ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	8919      	ldrh	r1, [r3, #8]
 80100b4:	88ba      	ldrh	r2, [r7, #4]
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7ff fa03 	bl	800f4c4 <pbuf_alloc>
 80100be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d101      	bne.n	80100ca <pbuf_clone+0x2a>
    return NULL;
 80100c6:	2300      	movs	r3, #0
 80100c8:	e011      	b.n	80100ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f7ff fe11 	bl	800fcf4 <pbuf_copy>
 80100d2:	4603      	mov	r3, r0
 80100d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80100d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d006      	beq.n	80100ec <pbuf_clone+0x4c>
 80100de:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <pbuf_clone+0x58>)
 80100e0:	f240 5224 	movw	r2, #1316	; 0x524
 80100e4:	4905      	ldr	r1, [pc, #20]	; (80100fc <pbuf_clone+0x5c>)
 80100e6:	4806      	ldr	r0, [pc, #24]	; (8010100 <pbuf_clone+0x60>)
 80100e8:	f007 fd42 	bl	8017b70 <iprintf>
  return q;
 80100ec:	68fb      	ldr	r3, [r7, #12]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	0801b400 	.word	0x0801b400
 80100fc:	0801b8d0 	.word	0x0801b8d0
 8010100:	0801b4bc 	.word	0x0801b4bc

08010104 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2200      	movs	r2, #0
 8010112:	2104      	movs	r1, #4
 8010114:	4618      	mov	r0, r3
 8010116:	f7f6 fa81 	bl	800661c <osMessageQueueNew>
 801011a:	4602      	mov	r2, r0
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d102      	bne.n	801012e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8010128:	f04f 33ff 	mov.w	r3, #4294967295
 801012c:	e000      	b.n	8010130 <sys_mbox_new+0x2c>

  return ERR_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4618      	mov	r0, r3
 8010146:	f7f6 fb9b 	bl	8006880 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4618      	mov	r0, r3
 8010150:	f7f6 fbb6 	bl	80068c0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8010154:	bf00      	nop
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6818      	ldr	r0, [r3, #0]
 801016a:	4639      	mov	r1, r7
 801016c:	2300      	movs	r3, #0
 801016e:	2200      	movs	r2, #0
 8010170:	f7f6 fac8 	bl	8006704 <osMessageQueuePut>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d102      	bne.n	8010180 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801017a:	2300      	movs	r3, #0
 801017c:	73fb      	strb	r3, [r7, #15]
 801017e:	e001      	b.n	8010184 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010180:	23ff      	movs	r3, #255	; 0xff
 8010182:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801019c:	f7f5 ff1e 	bl	8005fdc <osKernelGetTickCount>
 80101a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d013      	beq.n	80101d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6818      	ldr	r0, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	68b9      	ldr	r1, [r7, #8]
 80101b2:	f7f6 fb07 	bl	80067c4 <osMessageQueueGet>
 80101b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d105      	bne.n	80101ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80101be:	f7f5 ff0d 	bl	8005fdc <osKernelGetTickCount>
 80101c2:	4602      	mov	r2, r0
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	e00f      	b.n	80101ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80101ca:	f04f 33ff 	mov.w	r3, #4294967295
 80101ce:	e00c      	b.n	80101ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	6818      	ldr	r0, [r3, #0]
 80101d4:	f04f 33ff 	mov.w	r3, #4294967295
 80101d8:	2200      	movs	r2, #0
 80101da:	68b9      	ldr	r1, [r7, #8]
 80101dc:	f7f6 faf2 	bl	80067c4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80101e0:	f7f5 fefc 	bl	8005fdc <osKernelGetTickCount>
 80101e4:	4602      	mov	r2, r0
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b082      	sub	sp, #8
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6818      	ldr	r0, [r3, #0]
 8010200:	2300      	movs	r3, #0
 8010202:	2200      	movs	r2, #0
 8010204:	6839      	ldr	r1, [r7, #0]
 8010206:	f7f6 fadd 	bl	80067c4 <osMessageQueueGet>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	e001      	b.n	8010218 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8010214:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d101      	bne.n	8010234 <sys_mbox_valid+0x14>
    return 0;
 8010230:	2300      	movs	r3, #0
 8010232:	e000      	b.n	8010236 <sys_mbox_valid+0x16>
  else
    return 1;
 8010234:	2301      	movs	r3, #1
}
 8010236:	4618      	mov	r0, r3
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8010242:	b480      	push	{r7}
 8010244:	b083      	sub	sp, #12
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	601a      	str	r2, [r3, #0]
}
 8010250:	bf00      	nop
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr

0801025c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	460b      	mov	r3, r1
 8010266:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8010268:	78fb      	ldrb	r3, [r7, #3]
 801026a:	2200      	movs	r2, #0
 801026c:	4619      	mov	r1, r3
 801026e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010272:	f7f6 f88f 	bl	8006394 <osSemaphoreNew>
 8010276:	4602      	mov	r2, r0
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d102      	bne.n	801028a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010284:	f04f 33ff 	mov.w	r3, #4294967295
 8010288:	e009      	b.n	801029e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801028a:	78fb      	ldrb	r3, [r7, #3]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d105      	bne.n	801029c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2100      	movs	r1, #0
 8010296:	4618      	mov	r0, r3
 8010298:	f7f6 f906 	bl	80064a8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b084      	sub	sp, #16
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80102b0:	f7f5 fe94 	bl	8005fdc <osKernelGetTickCount>
 80102b4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d011      	beq.n	80102e0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6839      	ldr	r1, [r7, #0]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7f6 f8f0 	bl	80064a8 <osSemaphoreAcquire>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d105      	bne.n	80102da <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80102ce:	f7f5 fe85 	bl	8005fdc <osKernelGetTickCount>
 80102d2:	4602      	mov	r2, r0
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	e012      	b.n	8010300 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80102da:	f04f 33ff 	mov.w	r3, #4294967295
 80102de:	e00f      	b.n	8010300 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80102e0:	bf00      	nop
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f04f 31ff 	mov.w	r1, #4294967295
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f6 f8dc 	bl	80064a8 <osSemaphoreAcquire>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1f5      	bne.n	80102e2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80102f6:	f7f5 fe71 	bl	8005fdc <osKernelGetTickCount>
 80102fa:	4602      	mov	r2, r0
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8010300:	4618      	mov	r0, r3
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4618      	mov	r0, r3
 8010316:	f7f6 f919 	bl	800654c <osSemaphoreRelease>
}
 801031a:	bf00      	nop
 801031c:	3708      	adds	r7, #8
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b082      	sub	sp, #8
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4618      	mov	r0, r3
 8010330:	f7f6 f950 	bl	80065d4 <osSemaphoreDelete>
}
 8010334:	bf00      	nop
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d101      	bne.n	8010350 <sys_sem_valid+0x14>
    return 0;
 801034c:	2300      	movs	r3, #0
 801034e:	e000      	b.n	8010352 <sys_sem_valid+0x16>
  else
    return 1;
 8010350:	2301      	movs	r3, #1
}
 8010352:	4618      	mov	r0, r3
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	601a      	str	r2, [r3, #0]
}
 801036c:	bf00      	nop
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801037c:	2000      	movs	r0, #0
 801037e:	f7f5 fefb 	bl	8006178 <osMutexNew>
 8010382:	4603      	mov	r3, r0
 8010384:	4a01      	ldr	r2, [pc, #4]	; (801038c <sys_init+0x14>)
 8010386:	6013      	str	r3, [r2, #0]
#endif
}
 8010388:	bf00      	nop
 801038a:	bd80      	pop	{r7, pc}
 801038c:	24010944 	.word	0x24010944

08010390 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8010398:	2000      	movs	r0, #0
 801039a:	f7f5 feed 	bl	8006178 <osMutexNew>
 801039e:	4602      	mov	r2, r0
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d102      	bne.n	80103b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80103ac:	f04f 33ff 	mov.w	r3, #4294967295
 80103b0:	e000      	b.n	80103b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f04f 31ff 	mov.w	r1, #4294967295
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7f5 ff59 	bl	8006284 <osMutexAcquire>
#endif
}
 80103d2:	bf00      	nop
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7f5 ff97 	bl	800631a <osMutexRelease>
}
 80103ec:	bf00      	nop
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08e      	sub	sp, #56	; 0x38
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	607a      	str	r2, [r7, #4]
 8010400:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8010402:	f107 0314 	add.w	r3, r7, #20
 8010406:	2224      	movs	r2, #36	; 0x24
 8010408:	2100      	movs	r1, #0
 801040a:	4618      	mov	r0, r3
 801040c:	f007 fb13 	bl	8017a36 <memset>
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	617b      	str	r3, [r7, #20]
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	62bb      	str	r3, [r7, #40]	; 0x28
 8010418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801041a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801041c:	f107 0314 	add.w	r3, r7, #20
 8010420:	461a      	mov	r2, r3
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	68b8      	ldr	r0, [r7, #8]
 8010426:	f7f5 fdee 	bl	8006006 <osThreadNew>
 801042a:	4603      	mov	r3, r0
#endif
}
 801042c:	4618      	mov	r0, r3
 801042e:	3738      	adds	r7, #56	; 0x38
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010438:	4b04      	ldr	r3, [pc, #16]	; (801044c <sys_arch_protect+0x18>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f04f 31ff 	mov.w	r1, #4294967295
 8010440:	4618      	mov	r0, r3
 8010442:	f7f5 ff1f 	bl	8006284 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8010446:	2301      	movs	r3, #1
}
 8010448:	4618      	mov	r0, r3
 801044a:	bd80      	pop	{r7, pc}
 801044c:	24010944 	.word	0x24010944

08010450 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010458:	4b04      	ldr	r3, [pc, #16]	; (801046c <sys_arch_unprotect+0x1c>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4618      	mov	r0, r3
 801045e:	f7f5 ff5c 	bl	800631a <osMutexRelease>
}
 8010462:	bf00      	nop
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	24010944 	.word	0x24010944

08010470 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010474:	f007 fb94 	bl	8017ba0 <rand>
 8010478:	4603      	mov	r3, r0
 801047a:	b29b      	uxth	r3, r3
 801047c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010480:	b29b      	uxth	r3, r3
 8010482:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010486:	b29a      	uxth	r2, r3
 8010488:	4b01      	ldr	r3, [pc, #4]	; (8010490 <tcp_init+0x20>)
 801048a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801048c:	bf00      	nop
 801048e:	bd80      	pop	{r7, pc}
 8010490:	24000034 	.word	0x24000034

08010494 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	7d1b      	ldrb	r3, [r3, #20]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d105      	bne.n	80104b0 <tcp_free+0x1c>
 80104a4:	4b06      	ldr	r3, [pc, #24]	; (80104c0 <tcp_free+0x2c>)
 80104a6:	22d4      	movs	r2, #212	; 0xd4
 80104a8:	4906      	ldr	r1, [pc, #24]	; (80104c4 <tcp_free+0x30>)
 80104aa:	4807      	ldr	r0, [pc, #28]	; (80104c8 <tcp_free+0x34>)
 80104ac:	f007 fb60 	bl	8017b70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80104b0:	6879      	ldr	r1, [r7, #4]
 80104b2:	2001      	movs	r0, #1
 80104b4:	f7fe fc1c 	bl	800ecf0 <memp_free>
}
 80104b8:	bf00      	nop
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	0801b95c 	.word	0x0801b95c
 80104c4:	0801b9e8 	.word	0x0801b9e8
 80104c8:	0801b9fc 	.word	0x0801b9fc

080104cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7d1b      	ldrb	r3, [r3, #20]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d105      	bne.n	80104e8 <tcp_free_listen+0x1c>
 80104dc:	4b06      	ldr	r3, [pc, #24]	; (80104f8 <tcp_free_listen+0x2c>)
 80104de:	22df      	movs	r2, #223	; 0xdf
 80104e0:	4906      	ldr	r1, [pc, #24]	; (80104fc <tcp_free_listen+0x30>)
 80104e2:	4807      	ldr	r0, [pc, #28]	; (8010500 <tcp_free_listen+0x34>)
 80104e4:	f007 fb44 	bl	8017b70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80104e8:	6879      	ldr	r1, [r7, #4]
 80104ea:	2002      	movs	r0, #2
 80104ec:	f7fe fc00 	bl	800ecf0 <memp_free>
}
 80104f0:	bf00      	nop
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	0801b95c 	.word	0x0801b95c
 80104fc:	0801ba24 	.word	0x0801ba24
 8010500:	0801b9fc 	.word	0x0801b9fc

08010504 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010508:	f001 f902 	bl	8011710 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801050c:	4b07      	ldr	r3, [pc, #28]	; (801052c <tcp_tmr+0x28>)
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	3301      	adds	r3, #1
 8010512:	b2da      	uxtb	r2, r3
 8010514:	4b05      	ldr	r3, [pc, #20]	; (801052c <tcp_tmr+0x28>)
 8010516:	701a      	strb	r2, [r3, #0]
 8010518:	4b04      	ldr	r3, [pc, #16]	; (801052c <tcp_tmr+0x28>)
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d001      	beq.n	8010528 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010524:	f000 fdb4 	bl	8011090 <tcp_slowtmr>
  }
}
 8010528:	bf00      	nop
 801052a:	bd80      	pop	{r7, pc}
 801052c:	2401095d 	.word	0x2401095d

08010530 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d105      	bne.n	801054c <tcp_remove_listener+0x1c>
 8010540:	4b0d      	ldr	r3, [pc, #52]	; (8010578 <tcp_remove_listener+0x48>)
 8010542:	22ff      	movs	r2, #255	; 0xff
 8010544:	490d      	ldr	r1, [pc, #52]	; (801057c <tcp_remove_listener+0x4c>)
 8010546:	480e      	ldr	r0, [pc, #56]	; (8010580 <tcp_remove_listener+0x50>)
 8010548:	f007 fb12 	bl	8017b70 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	60fb      	str	r3, [r7, #12]
 8010550:	e00a      	b.n	8010568 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010556:	683a      	ldr	r2, [r7, #0]
 8010558:	429a      	cmp	r2, r3
 801055a:	d102      	bne.n	8010562 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2200      	movs	r2, #0
 8010560:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1f1      	bne.n	8010552 <tcp_remove_listener+0x22>
    }
  }
}
 801056e:	bf00      	nop
 8010570:	bf00      	nop
 8010572:	3710      	adds	r7, #16
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	0801b95c 	.word	0x0801b95c
 801057c:	0801ba40 	.word	0x0801ba40
 8010580:	0801b9fc 	.word	0x0801b9fc

08010584 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d106      	bne.n	80105a0 <tcp_listen_closed+0x1c>
 8010592:	4b14      	ldr	r3, [pc, #80]	; (80105e4 <tcp_listen_closed+0x60>)
 8010594:	f240 1211 	movw	r2, #273	; 0x111
 8010598:	4913      	ldr	r1, [pc, #76]	; (80105e8 <tcp_listen_closed+0x64>)
 801059a:	4814      	ldr	r0, [pc, #80]	; (80105ec <tcp_listen_closed+0x68>)
 801059c:	f007 fae8 	bl	8017b70 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d006      	beq.n	80105b6 <tcp_listen_closed+0x32>
 80105a8:	4b0e      	ldr	r3, [pc, #56]	; (80105e4 <tcp_listen_closed+0x60>)
 80105aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80105ae:	4910      	ldr	r1, [pc, #64]	; (80105f0 <tcp_listen_closed+0x6c>)
 80105b0:	480e      	ldr	r0, [pc, #56]	; (80105ec <tcp_listen_closed+0x68>)
 80105b2:	f007 fadd 	bl	8017b70 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80105b6:	2301      	movs	r3, #1
 80105b8:	60fb      	str	r3, [r7, #12]
 80105ba:	e00b      	b.n	80105d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80105bc:	4a0d      	ldr	r2, [pc, #52]	; (80105f4 <tcp_listen_closed+0x70>)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff ffb1 	bl	8010530 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	3301      	adds	r3, #1
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b03      	cmp	r3, #3
 80105d8:	d9f0      	bls.n	80105bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80105da:	bf00      	nop
 80105dc:	bf00      	nop
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	0801b95c 	.word	0x0801b95c
 80105e8:	0801ba68 	.word	0x0801ba68
 80105ec:	0801b9fc 	.word	0x0801b9fc
 80105f0:	0801ba74 	.word	0x0801ba74
 80105f4:	0801d624 	.word	0x0801d624

080105f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80105f8:	b5b0      	push	{r4, r5, r7, lr}
 80105fa:	b088      	sub	sp, #32
 80105fc:	af04      	add	r7, sp, #16
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	460b      	mov	r3, r1
 8010602:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d106      	bne.n	8010618 <tcp_close_shutdown+0x20>
 801060a:	4b63      	ldr	r3, [pc, #396]	; (8010798 <tcp_close_shutdown+0x1a0>)
 801060c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010610:	4962      	ldr	r1, [pc, #392]	; (801079c <tcp_close_shutdown+0x1a4>)
 8010612:	4863      	ldr	r0, [pc, #396]	; (80107a0 <tcp_close_shutdown+0x1a8>)
 8010614:	f007 faac 	bl	8017b70 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010618:	78fb      	ldrb	r3, [r7, #3]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d067      	beq.n	80106ee <tcp_close_shutdown+0xf6>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	7d1b      	ldrb	r3, [r3, #20]
 8010622:	2b04      	cmp	r3, #4
 8010624:	d003      	beq.n	801062e <tcp_close_shutdown+0x36>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	7d1b      	ldrb	r3, [r3, #20]
 801062a:	2b07      	cmp	r3, #7
 801062c:	d15f      	bne.n	80106ee <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010632:	2b00      	cmp	r3, #0
 8010634:	d105      	bne.n	8010642 <tcp_close_shutdown+0x4a>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801063a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801063e:	4293      	cmp	r3, r2
 8010640:	d055      	beq.n	80106ee <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	8b5b      	ldrh	r3, [r3, #26]
 8010646:	f003 0310 	and.w	r3, r3, #16
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <tcp_close_shutdown+0x64>
 801064e:	4b52      	ldr	r3, [pc, #328]	; (8010798 <tcp_close_shutdown+0x1a0>)
 8010650:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010654:	4953      	ldr	r1, [pc, #332]	; (80107a4 <tcp_close_shutdown+0x1ac>)
 8010656:	4852      	ldr	r0, [pc, #328]	; (80107a0 <tcp_close_shutdown+0x1a8>)
 8010658:	f007 fa8a 	bl	8017b70 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010664:	687d      	ldr	r5, [r7, #4]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	3304      	adds	r3, #4
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	8ad2      	ldrh	r2, [r2, #22]
 801066e:	6879      	ldr	r1, [r7, #4]
 8010670:	8b09      	ldrh	r1, [r1, #24]
 8010672:	9102      	str	r1, [sp, #8]
 8010674:	9201      	str	r2, [sp, #4]
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	462b      	mov	r3, r5
 801067a:	4622      	mov	r2, r4
 801067c:	4601      	mov	r1, r0
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f005 fe28 	bl	80162d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f001 fbff 	bl	8011e88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801068a:	4b47      	ldr	r3, [pc, #284]	; (80107a8 <tcp_close_shutdown+0x1b0>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	429a      	cmp	r2, r3
 8010692:	d105      	bne.n	80106a0 <tcp_close_shutdown+0xa8>
 8010694:	4b44      	ldr	r3, [pc, #272]	; (80107a8 <tcp_close_shutdown+0x1b0>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	4a43      	ldr	r2, [pc, #268]	; (80107a8 <tcp_close_shutdown+0x1b0>)
 801069c:	6013      	str	r3, [r2, #0]
 801069e:	e013      	b.n	80106c8 <tcp_close_shutdown+0xd0>
 80106a0:	4b41      	ldr	r3, [pc, #260]	; (80107a8 <tcp_close_shutdown+0x1b0>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	60fb      	str	r3, [r7, #12]
 80106a6:	e00c      	b.n	80106c2 <tcp_close_shutdown+0xca>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d104      	bne.n	80106bc <tcp_close_shutdown+0xc4>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	68da      	ldr	r2, [r3, #12]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	60da      	str	r2, [r3, #12]
 80106ba:	e005      	b.n	80106c8 <tcp_close_shutdown+0xd0>
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	60fb      	str	r3, [r7, #12]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1ef      	bne.n	80106a8 <tcp_close_shutdown+0xb0>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	60da      	str	r2, [r3, #12]
 80106ce:	4b37      	ldr	r3, [pc, #220]	; (80107ac <tcp_close_shutdown+0x1b4>)
 80106d0:	2201      	movs	r2, #1
 80106d2:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80106d4:	4b36      	ldr	r3, [pc, #216]	; (80107b0 <tcp_close_shutdown+0x1b8>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	429a      	cmp	r2, r3
 80106dc:	d102      	bne.n	80106e4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80106de:	f004 f899 	bl	8014814 <tcp_trigger_input_pcb_close>
 80106e2:	e002      	b.n	80106ea <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff fed5 	bl	8010494 <tcp_free>
      }
      return ERR_OK;
 80106ea:	2300      	movs	r3, #0
 80106ec:	e050      	b.n	8010790 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	7d1b      	ldrb	r3, [r3, #20]
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d03b      	beq.n	801076e <tcp_close_shutdown+0x176>
 80106f6:	2b02      	cmp	r3, #2
 80106f8:	dc44      	bgt.n	8010784 <tcp_close_shutdown+0x18c>
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d002      	beq.n	8010704 <tcp_close_shutdown+0x10c>
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d02a      	beq.n	8010758 <tcp_close_shutdown+0x160>
 8010702:	e03f      	b.n	8010784 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	8adb      	ldrh	r3, [r3, #22]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d021      	beq.n	8010750 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801070c:	4b29      	ldr	r3, [pc, #164]	; (80107b4 <tcp_close_shutdown+0x1bc>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	429a      	cmp	r2, r3
 8010714:	d105      	bne.n	8010722 <tcp_close_shutdown+0x12a>
 8010716:	4b27      	ldr	r3, [pc, #156]	; (80107b4 <tcp_close_shutdown+0x1bc>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	4a25      	ldr	r2, [pc, #148]	; (80107b4 <tcp_close_shutdown+0x1bc>)
 801071e:	6013      	str	r3, [r2, #0]
 8010720:	e013      	b.n	801074a <tcp_close_shutdown+0x152>
 8010722:	4b24      	ldr	r3, [pc, #144]	; (80107b4 <tcp_close_shutdown+0x1bc>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	60bb      	str	r3, [r7, #8]
 8010728:	e00c      	b.n	8010744 <tcp_close_shutdown+0x14c>
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	429a      	cmp	r2, r3
 8010732:	d104      	bne.n	801073e <tcp_close_shutdown+0x146>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	68da      	ldr	r2, [r3, #12]
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	60da      	str	r2, [r3, #12]
 801073c:	e005      	b.n	801074a <tcp_close_shutdown+0x152>
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	60bb      	str	r3, [r7, #8]
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1ef      	bne.n	801072a <tcp_close_shutdown+0x132>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f7ff fe9f 	bl	8010494 <tcp_free>
      break;
 8010756:	e01a      	b.n	801078e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f7ff ff13 	bl	8010584 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801075e:	6879      	ldr	r1, [r7, #4]
 8010760:	4815      	ldr	r0, [pc, #84]	; (80107b8 <tcp_close_shutdown+0x1c0>)
 8010762:	f001 fbe1 	bl	8011f28 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff feb0 	bl	80104cc <tcp_free_listen>
      break;
 801076c:	e00f      	b.n	801078e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801076e:	6879      	ldr	r1, [r7, #4]
 8010770:	480d      	ldr	r0, [pc, #52]	; (80107a8 <tcp_close_shutdown+0x1b0>)
 8010772:	f001 fbd9 	bl	8011f28 <tcp_pcb_remove>
 8010776:	4b0d      	ldr	r3, [pc, #52]	; (80107ac <tcp_close_shutdown+0x1b4>)
 8010778:	2201      	movs	r2, #1
 801077a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff fe89 	bl	8010494 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010782:	e004      	b.n	801078e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 f819 	bl	80107bc <tcp_close_shutdown_fin>
 801078a:	4603      	mov	r3, r0
 801078c:	e000      	b.n	8010790 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bdb0      	pop	{r4, r5, r7, pc}
 8010798:	0801b95c 	.word	0x0801b95c
 801079c:	0801ba8c 	.word	0x0801ba8c
 80107a0:	0801b9fc 	.word	0x0801b9fc
 80107a4:	0801baac 	.word	0x0801baac
 80107a8:	24010954 	.word	0x24010954
 80107ac:	2401095c 	.word	0x2401095c
 80107b0:	24010994 	.word	0x24010994
 80107b4:	2401094c 	.word	0x2401094c
 80107b8:	24010950 	.word	0x24010950

080107bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d106      	bne.n	80107d8 <tcp_close_shutdown_fin+0x1c>
 80107ca:	4b2e      	ldr	r3, [pc, #184]	; (8010884 <tcp_close_shutdown_fin+0xc8>)
 80107cc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80107d0:	492d      	ldr	r1, [pc, #180]	; (8010888 <tcp_close_shutdown_fin+0xcc>)
 80107d2:	482e      	ldr	r0, [pc, #184]	; (801088c <tcp_close_shutdown_fin+0xd0>)
 80107d4:	f007 f9cc 	bl	8017b70 <iprintf>

  switch (pcb->state) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	7d1b      	ldrb	r3, [r3, #20]
 80107dc:	2b07      	cmp	r3, #7
 80107de:	d020      	beq.n	8010822 <tcp_close_shutdown_fin+0x66>
 80107e0:	2b07      	cmp	r3, #7
 80107e2:	dc2b      	bgt.n	801083c <tcp_close_shutdown_fin+0x80>
 80107e4:	2b03      	cmp	r3, #3
 80107e6:	d002      	beq.n	80107ee <tcp_close_shutdown_fin+0x32>
 80107e8:	2b04      	cmp	r3, #4
 80107ea:	d00d      	beq.n	8010808 <tcp_close_shutdown_fin+0x4c>
 80107ec:	e026      	b.n	801083c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f004 fe7c 	bl	80154ec <tcp_send_fin>
 80107f4:	4603      	mov	r3, r0
 80107f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80107f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d11f      	bne.n	8010840 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2205      	movs	r2, #5
 8010804:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010806:	e01b      	b.n	8010840 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f004 fe6f 	bl	80154ec <tcp_send_fin>
 801080e:	4603      	mov	r3, r0
 8010810:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d114      	bne.n	8010844 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2205      	movs	r2, #5
 801081e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010820:	e010      	b.n	8010844 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f004 fe62 	bl	80154ec <tcp_send_fin>
 8010828:	4603      	mov	r3, r0
 801082a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d109      	bne.n	8010848 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2209      	movs	r2, #9
 8010838:	751a      	strb	r2, [r3, #20]
      }
      break;
 801083a:	e005      	b.n	8010848 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	e01c      	b.n	801087a <tcp_close_shutdown_fin+0xbe>
      break;
 8010840:	bf00      	nop
 8010842:	e002      	b.n	801084a <tcp_close_shutdown_fin+0x8e>
      break;
 8010844:	bf00      	nop
 8010846:	e000      	b.n	801084a <tcp_close_shutdown_fin+0x8e>
      break;
 8010848:	bf00      	nop
  }

  if (err == ERR_OK) {
 801084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d103      	bne.n	801085a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f004 ff88 	bl	8015768 <tcp_output>
 8010858:	e00d      	b.n	8010876 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010862:	d108      	bne.n	8010876 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	8b5b      	ldrh	r3, [r3, #26]
 8010868:	f043 0308 	orr.w	r3, r3, #8
 801086c:	b29a      	uxth	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010872:	2300      	movs	r3, #0
 8010874:	e001      	b.n	801087a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801087a:	4618      	mov	r0, r3
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	0801b95c 	.word	0x0801b95c
 8010888:	0801ba68 	.word	0x0801ba68
 801088c:	0801b9fc 	.word	0x0801b9fc

08010890 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8010898:	f7f5 faca 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d109      	bne.n	80108b6 <tcp_close+0x26>
 80108a2:	4b0f      	ldr	r3, [pc, #60]	; (80108e0 <tcp_close+0x50>)
 80108a4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80108a8:	490e      	ldr	r1, [pc, #56]	; (80108e4 <tcp_close+0x54>)
 80108aa:	480f      	ldr	r0, [pc, #60]	; (80108e8 <tcp_close+0x58>)
 80108ac:	f007 f960 	bl	8017b70 <iprintf>
 80108b0:	f06f 030f 	mvn.w	r3, #15
 80108b4:	e00f      	b.n	80108d6 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	7d1b      	ldrb	r3, [r3, #20]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d006      	beq.n	80108cc <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	8b5b      	ldrh	r3, [r3, #26]
 80108c2:	f043 0310 	orr.w	r3, r3, #16
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80108cc:	2101      	movs	r1, #1
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff fe92 	bl	80105f8 <tcp_close_shutdown>
 80108d4:	4603      	mov	r3, r0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	0801b95c 	.word	0x0801b95c
 80108e4:	0801bac8 	.word	0x0801bac8
 80108e8:	0801b9fc 	.word	0x0801b9fc

080108ec <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80108f8:	f7f5 fa9a 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d109      	bne.n	8010916 <tcp_shutdown+0x2a>
 8010902:	4b26      	ldr	r3, [pc, #152]	; (801099c <tcp_shutdown+0xb0>)
 8010904:	f240 2207 	movw	r2, #519	; 0x207
 8010908:	4925      	ldr	r1, [pc, #148]	; (80109a0 <tcp_shutdown+0xb4>)
 801090a:	4826      	ldr	r0, [pc, #152]	; (80109a4 <tcp_shutdown+0xb8>)
 801090c:	f007 f930 	bl	8017b70 <iprintf>
 8010910:	f06f 030f 	mvn.w	r3, #15
 8010914:	e03d      	b.n	8010992 <tcp_shutdown+0xa6>

  if (pcb->state == LISTEN) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	7d1b      	ldrb	r3, [r3, #20]
 801091a:	2b01      	cmp	r3, #1
 801091c:	d102      	bne.n	8010924 <tcp_shutdown+0x38>
    return ERR_CONN;
 801091e:	f06f 030a 	mvn.w	r3, #10
 8010922:	e036      	b.n	8010992 <tcp_shutdown+0xa6>
  }
  if (shut_rx) {
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d01b      	beq.n	8010962 <tcp_shutdown+0x76>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	8b5b      	ldrh	r3, [r3, #26]
 801092e:	f043 0310 	orr.w	r3, r3, #16
 8010932:	b29a      	uxth	r2, r3
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d005      	beq.n	801094a <tcp_shutdown+0x5e>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801093e:	2101      	movs	r1, #1
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f7ff fe59 	bl	80105f8 <tcp_close_shutdown>
 8010946:	4603      	mov	r3, r0
 8010948:	e023      	b.n	8010992 <tcp_shutdown+0xa6>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801094e:	2b00      	cmp	r3, #0
 8010950:	d007      	beq.n	8010962 <tcp_shutdown+0x76>
      pbuf_free(pcb->refused_data);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010956:	4618      	mov	r0, r3
 8010958:	f7ff f898 	bl	800fa8c <pbuf_free>
      pcb->refused_data = NULL;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2200      	movs	r2, #0
 8010960:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d013      	beq.n	8010990 <tcp_shutdown+0xa4>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	7d1b      	ldrb	r3, [r3, #20]
 801096c:	2b04      	cmp	r3, #4
 801096e:	dc02      	bgt.n	8010976 <tcp_shutdown+0x8a>
 8010970:	2b03      	cmp	r3, #3
 8010972:	da02      	bge.n	801097a <tcp_shutdown+0x8e>
 8010974:	e009      	b.n	801098a <tcp_shutdown+0x9e>
 8010976:	2b07      	cmp	r3, #7
 8010978:	d107      	bne.n	801098a <tcp_shutdown+0x9e>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	b2db      	uxtb	r3, r3
 801097e:	4619      	mov	r1, r3
 8010980:	68f8      	ldr	r0, [r7, #12]
 8010982:	f7ff fe39 	bl	80105f8 <tcp_close_shutdown>
 8010986:	4603      	mov	r3, r0
 8010988:	e003      	b.n	8010992 <tcp_shutdown+0xa6>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801098a:	f06f 030a 	mvn.w	r3, #10
 801098e:	e000      	b.n	8010992 <tcp_shutdown+0xa6>
    }
  }
  return ERR_OK;
 8010990:	2300      	movs	r3, #0
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	0801b95c 	.word	0x0801b95c
 80109a0:	0801bae0 	.word	0x0801bae0
 80109a4:	0801b9fc 	.word	0x0801b9fc

080109a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b08e      	sub	sp, #56	; 0x38
 80109ac:	af04      	add	r7, sp, #16
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 80109b2:	f7f5 fa3d 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d107      	bne.n	80109cc <tcp_abandon+0x24>
 80109bc:	4b52      	ldr	r3, [pc, #328]	; (8010b08 <tcp_abandon+0x160>)
 80109be:	f240 223d 	movw	r2, #573	; 0x23d
 80109c2:	4952      	ldr	r1, [pc, #328]	; (8010b0c <tcp_abandon+0x164>)
 80109c4:	4852      	ldr	r0, [pc, #328]	; (8010b10 <tcp_abandon+0x168>)
 80109c6:	f007 f8d3 	bl	8017b70 <iprintf>
 80109ca:	e099      	b.n	8010b00 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	7d1b      	ldrb	r3, [r3, #20]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d106      	bne.n	80109e2 <tcp_abandon+0x3a>
 80109d4:	4b4c      	ldr	r3, [pc, #304]	; (8010b08 <tcp_abandon+0x160>)
 80109d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80109da:	494e      	ldr	r1, [pc, #312]	; (8010b14 <tcp_abandon+0x16c>)
 80109dc:	484c      	ldr	r0, [pc, #304]	; (8010b10 <tcp_abandon+0x168>)
 80109de:	f007 f8c7 	bl	8017b70 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7d1b      	ldrb	r3, [r3, #20]
 80109e6:	2b0a      	cmp	r3, #10
 80109e8:	d107      	bne.n	80109fa <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80109ea:	6879      	ldr	r1, [r7, #4]
 80109ec:	484a      	ldr	r0, [pc, #296]	; (8010b18 <tcp_abandon+0x170>)
 80109ee:	f001 fa9b 	bl	8011f28 <tcp_pcb_remove>
    tcp_free(pcb);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff fd4e 	bl	8010494 <tcp_free>
 80109f8:	e082      	b.n	8010b00 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a06:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a14:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	691b      	ldr	r3, [r3, #16]
 8010a1a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7d1b      	ldrb	r3, [r3, #20]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d126      	bne.n	8010a72 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	8adb      	ldrh	r3, [r3, #22]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d02e      	beq.n	8010a8a <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a2c:	4b3b      	ldr	r3, [pc, #236]	; (8010b1c <tcp_abandon+0x174>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d105      	bne.n	8010a42 <tcp_abandon+0x9a>
 8010a36:	4b39      	ldr	r3, [pc, #228]	; (8010b1c <tcp_abandon+0x174>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	4a37      	ldr	r2, [pc, #220]	; (8010b1c <tcp_abandon+0x174>)
 8010a3e:	6013      	str	r3, [r2, #0]
 8010a40:	e013      	b.n	8010a6a <tcp_abandon+0xc2>
 8010a42:	4b36      	ldr	r3, [pc, #216]	; (8010b1c <tcp_abandon+0x174>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	61fb      	str	r3, [r7, #28]
 8010a48:	e00c      	b.n	8010a64 <tcp_abandon+0xbc>
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d104      	bne.n	8010a5e <tcp_abandon+0xb6>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68da      	ldr	r2, [r3, #12]
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	60da      	str	r2, [r3, #12]
 8010a5c:	e005      	b.n	8010a6a <tcp_abandon+0xc2>
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	61fb      	str	r3, [r7, #28]
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1ef      	bne.n	8010a4a <tcp_abandon+0xa2>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	60da      	str	r2, [r3, #12]
 8010a70:	e00b      	b.n	8010a8a <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	8adb      	ldrh	r3, [r3, #22]
 8010a7a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010a7c:	6879      	ldr	r1, [r7, #4]
 8010a7e:	4828      	ldr	r0, [pc, #160]	; (8010b20 <tcp_abandon+0x178>)
 8010a80:	f001 fa52 	bl	8011f28 <tcp_pcb_remove>
 8010a84:	4b27      	ldr	r3, [pc, #156]	; (8010b24 <tcp_abandon+0x17c>)
 8010a86:	2201      	movs	r2, #1
 8010a88:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d004      	beq.n	8010a9c <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 ff1c 	bl	80118d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d004      	beq.n	8010aae <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f000 ff13 	bl	80118d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d004      	beq.n	8010ac0 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010aba:	4618      	mov	r0, r3
 8010abc:	f000 ff0a 	bl	80118d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00e      	beq.n	8010ae4 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010ac6:	6879      	ldr	r1, [r7, #4]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	3304      	adds	r3, #4
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	8b12      	ldrh	r2, [r2, #24]
 8010ad0:	9202      	str	r2, [sp, #8]
 8010ad2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ad4:	9201      	str	r2, [sp, #4]
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	69b9      	ldr	r1, [r7, #24]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f005 fbf8 	bl	80162d4 <tcp_rst>
    }
    last_state = pcb->state;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	7d1b      	ldrb	r3, [r3, #20]
 8010ae8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f7ff fcd2 	bl	8010494 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d004      	beq.n	8010b00 <tcp_abandon+0x158>
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	f06f 010c 	mvn.w	r1, #12
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	4798      	blx	r3
  }
}
 8010b00:	3728      	adds	r7, #40	; 0x28
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	0801b95c 	.word	0x0801b95c
 8010b0c:	0801bafc 	.word	0x0801bafc
 8010b10:	0801b9fc 	.word	0x0801b9fc
 8010b14:	0801bb18 	.word	0x0801bb18
 8010b18:	24010958 	.word	0x24010958
 8010b1c:	2401094c 	.word	0x2401094c
 8010b20:	24010954 	.word	0x24010954
 8010b24:	2401095c 	.word	0x2401095c

08010b28 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010b30:	2101      	movs	r1, #1
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff ff38 	bl	80109a8 <tcp_abandon>
}
 8010b38:	bf00      	nop
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010b4e:	2304      	movs	r3, #4
 8010b50:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8010b52:	f7f5 f96d 	bl	8005e30 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d101      	bne.n	8010b60 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 8010b5c:	4b3e      	ldr	r3, [pc, #248]	; (8010c58 <tcp_bind+0x118>)
 8010b5e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d109      	bne.n	8010b7a <tcp_bind+0x3a>
 8010b66:	4b3d      	ldr	r3, [pc, #244]	; (8010c5c <tcp_bind+0x11c>)
 8010b68:	f240 22a9 	movw	r2, #681	; 0x2a9
 8010b6c:	493c      	ldr	r1, [pc, #240]	; (8010c60 <tcp_bind+0x120>)
 8010b6e:	483d      	ldr	r0, [pc, #244]	; (8010c64 <tcp_bind+0x124>)
 8010b70:	f006 fffe 	bl	8017b70 <iprintf>
 8010b74:	f06f 030f 	mvn.w	r3, #15
 8010b78:	e06a      	b.n	8010c50 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	7d1b      	ldrb	r3, [r3, #20]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d009      	beq.n	8010b96 <tcp_bind+0x56>
 8010b82:	4b36      	ldr	r3, [pc, #216]	; (8010c5c <tcp_bind+0x11c>)
 8010b84:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010b88:	4937      	ldr	r1, [pc, #220]	; (8010c68 <tcp_bind+0x128>)
 8010b8a:	4836      	ldr	r0, [pc, #216]	; (8010c64 <tcp_bind+0x124>)
 8010b8c:	f006 fff0 	bl	8017b70 <iprintf>
 8010b90:	f06f 0305 	mvn.w	r3, #5
 8010b94:	e05c      	b.n	8010c50 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010b96:	88fb      	ldrh	r3, [r7, #6]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <tcp_bind+0x70>
    port = tcp_new_port();
 8010b9c:	f000 f918 	bl	8010dd0 <tcp_new_port>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010ba4:	88fb      	ldrh	r3, [r7, #6]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d135      	bne.n	8010c16 <tcp_bind+0xd6>
      return ERR_BUF;
 8010baa:	f06f 0301 	mvn.w	r3, #1
 8010bae:	e04f      	b.n	8010c50 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	61fb      	str	r3, [r7, #28]
 8010bb4:	e02b      	b.n	8010c0e <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010bb6:	4a2d      	ldr	r2, [pc, #180]	; (8010c6c <tcp_bind+0x12c>)
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	61bb      	str	r3, [r7, #24]
 8010bc2:	e01e      	b.n	8010c02 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	8adb      	ldrh	r3, [r3, #22]
 8010bc8:	88fa      	ldrh	r2, [r7, #6]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d116      	bne.n	8010bfc <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010bce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d010      	beq.n	8010bf6 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00c      	beq.n	8010bf6 <tcp_bind+0xb6>
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d009      	beq.n	8010bf6 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d005      	beq.n	8010bf6 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d102      	bne.n	8010bfc <tcp_bind+0xbc>
              return ERR_USE;
 8010bf6:	f06f 0307 	mvn.w	r3, #7
 8010bfa:	e029      	b.n	8010c50 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	61bb      	str	r3, [r7, #24]
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1dd      	bne.n	8010bc4 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	61fb      	str	r3, [r7, #28]
 8010c0e:	69fa      	ldr	r2, [r7, #28]
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	dbcf      	blt.n	8010bb6 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00c      	beq.n	8010c36 <tcp_bind+0xf6>
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d008      	beq.n	8010c36 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d002      	beq.n	8010c30 <tcp_bind+0xf0>
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	e000      	b.n	8010c32 <tcp_bind+0xf2>
 8010c30:	2300      	movs	r3, #0
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	88fa      	ldrh	r2, [r7, #6]
 8010c3a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010c3c:	4b0c      	ldr	r3, [pc, #48]	; (8010c70 <tcp_bind+0x130>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	60da      	str	r2, [r3, #12]
 8010c44:	4a0a      	ldr	r2, [pc, #40]	; (8010c70 <tcp_bind+0x130>)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	f005 feb5 	bl	80169b8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3720      	adds	r7, #32
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	0801d538 	.word	0x0801d538
 8010c5c:	0801b95c 	.word	0x0801b95c
 8010c60:	0801bb4c 	.word	0x0801bb4c
 8010c64:	0801b9fc 	.word	0x0801b9fc
 8010c68:	0801bb64 	.word	0x0801bb64
 8010c6c:	0801d624 	.word	0x0801d624
 8010c70:	2401094c 	.word	0x2401094c

08010c74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <tcp_update_rcv_ann_wnd+0x1c>
 8010c82:	4b25      	ldr	r3, [pc, #148]	; (8010d18 <tcp_update_rcv_ann_wnd+0xa4>)
 8010c84:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010c88:	4924      	ldr	r1, [pc, #144]	; (8010d1c <tcp_update_rcv_ann_wnd+0xa8>)
 8010c8a:	4825      	ldr	r0, [pc, #148]	; (8010d20 <tcp_update_rcv_ann_wnd+0xac>)
 8010c8c:	f006 ff70 	bl	8017b70 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010c98:	4413      	add	r3, r2
 8010c9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010ca4:	f640 3168 	movw	r1, #2920	; 0xb68
 8010ca8:	428a      	cmp	r2, r1
 8010caa:	bf28      	it	cs
 8010cac:	460a      	movcs	r2, r1
 8010cae:	b292      	uxth	r2, r2
 8010cb0:	4413      	add	r3, r2
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	db08      	blt.n	8010ccc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	e020      	b.n	8010d0e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	dd03      	ble.n	8010ce2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010ce0:	e014      	b.n	8010d0c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cf4:	d306      	bcc.n	8010d04 <tcp_update_rcv_ann_wnd+0x90>
 8010cf6:	4b08      	ldr	r3, [pc, #32]	; (8010d18 <tcp_update_rcv_ann_wnd+0xa4>)
 8010cf8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010cfc:	4909      	ldr	r1, [pc, #36]	; (8010d24 <tcp_update_rcv_ann_wnd+0xb0>)
 8010cfe:	4808      	ldr	r0, [pc, #32]	; (8010d20 <tcp_update_rcv_ann_wnd+0xac>)
 8010d00:	f006 ff36 	bl	8017b70 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010d0c:	2300      	movs	r3, #0
  }
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	0801b95c 	.word	0x0801b95c
 8010d1c:	0801bc14 	.word	0x0801bc14
 8010d20:	0801b9fc 	.word	0x0801b9fc
 8010d24:	0801bc38 	.word	0x0801bc38

08010d28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 8010d34:	f7f5 f87c 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d107      	bne.n	8010d4e <tcp_recved+0x26>
 8010d3e:	4b20      	ldr	r3, [pc, #128]	; (8010dc0 <tcp_recved+0x98>)
 8010d40:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010d44:	491f      	ldr	r1, [pc, #124]	; (8010dc4 <tcp_recved+0x9c>)
 8010d46:	4820      	ldr	r0, [pc, #128]	; (8010dc8 <tcp_recved+0xa0>)
 8010d48:	f006 ff12 	bl	8017b70 <iprintf>
 8010d4c:	e034      	b.n	8010db8 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7d1b      	ldrb	r3, [r3, #20]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d106      	bne.n	8010d64 <tcp_recved+0x3c>
 8010d56:	4b1a      	ldr	r3, [pc, #104]	; (8010dc0 <tcp_recved+0x98>)
 8010d58:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010d5c:	491b      	ldr	r1, [pc, #108]	; (8010dcc <tcp_recved+0xa4>)
 8010d5e:	481a      	ldr	r0, [pc, #104]	; (8010dc8 <tcp_recved+0xa0>)
 8010d60:	f006 ff06 	bl	8017b70 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d68:	887b      	ldrh	r3, [r7, #2]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010d6e:	89fb      	ldrh	r3, [r7, #14]
 8010d70:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d804      	bhi.n	8010d82 <tcp_recved+0x5a>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d7c:	89fa      	ldrh	r2, [r7, #14]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d204      	bcs.n	8010d8c <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010d88:	851a      	strh	r2, [r3, #40]	; 0x28
 8010d8a:	e002      	b.n	8010d92 <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	89fa      	ldrh	r2, [r7, #14]
 8010d90:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f7ff ff6e 	bl	8010c74 <tcp_update_rcv_ann_wnd>
 8010d98:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d909      	bls.n	8010db8 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	8b5b      	ldrh	r3, [r3, #26]
 8010da8:	f043 0302 	orr.w	r3, r3, #2
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f004 fcd8 	bl	8015768 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	0801b95c 	.word	0x0801b95c
 8010dc4:	0801bc54 	.word	0x0801bc54
 8010dc8:	0801b9fc 	.word	0x0801b9fc
 8010dcc:	0801bc6c 	.word	0x0801bc6c

08010dd0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010dda:	4b1e      	ldr	r3, [pc, #120]	; (8010e54 <tcp_new_port+0x84>)
 8010ddc:	881b      	ldrh	r3, [r3, #0]
 8010dde:	3301      	adds	r3, #1
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	4b1c      	ldr	r3, [pc, #112]	; (8010e54 <tcp_new_port+0x84>)
 8010de4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010de6:	4b1b      	ldr	r3, [pc, #108]	; (8010e54 <tcp_new_port+0x84>)
 8010de8:	881b      	ldrh	r3, [r3, #0]
 8010dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d103      	bne.n	8010dfa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010df2:	4b18      	ldr	r3, [pc, #96]	; (8010e54 <tcp_new_port+0x84>)
 8010df4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010df8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	71fb      	strb	r3, [r7, #7]
 8010dfe:	e01e      	b.n	8010e3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010e00:	79fb      	ldrb	r3, [r7, #7]
 8010e02:	4a15      	ldr	r2, [pc, #84]	; (8010e58 <tcp_new_port+0x88>)
 8010e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	603b      	str	r3, [r7, #0]
 8010e0c:	e011      	b.n	8010e32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	8ada      	ldrh	r2, [r3, #22]
 8010e12:	4b10      	ldr	r3, [pc, #64]	; (8010e54 <tcp_new_port+0x84>)
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d108      	bne.n	8010e2c <tcp_new_port+0x5c>
        n++;
 8010e1a:	88bb      	ldrh	r3, [r7, #4]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010e20:	88bb      	ldrh	r3, [r7, #4]
 8010e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e26:	d3d8      	bcc.n	8010dda <tcp_new_port+0xa>
          return 0;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e00d      	b.n	8010e48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	603b      	str	r3, [r7, #0]
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d1ea      	bne.n	8010e0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010e38:	79fb      	ldrb	r3, [r7, #7]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	71fb      	strb	r3, [r7, #7]
 8010e3e:	79fb      	ldrb	r3, [r7, #7]
 8010e40:	2b03      	cmp	r3, #3
 8010e42:	d9dd      	bls.n	8010e00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010e44:	4b03      	ldr	r3, [pc, #12]	; (8010e54 <tcp_new_port+0x84>)
 8010e46:	881b      	ldrh	r3, [r3, #0]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	24000034 	.word	0x24000034
 8010e58:	0801d624 	.word	0x0801d624

08010e5c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b08a      	sub	sp, #40	; 0x28
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	603b      	str	r3, [r7, #0]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	627b      	str	r3, [r7, #36]	; 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 8010e70:	f7f4 ffde 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d109      	bne.n	8010e8e <tcp_connect+0x32>
 8010e7a:	4b7d      	ldr	r3, [pc, #500]	; (8011070 <tcp_connect+0x214>)
 8010e7c:	f240 4235 	movw	r2, #1077	; 0x435
 8010e80:	497c      	ldr	r1, [pc, #496]	; (8011074 <tcp_connect+0x218>)
 8010e82:	487d      	ldr	r0, [pc, #500]	; (8011078 <tcp_connect+0x21c>)
 8010e84:	f006 fe74 	bl	8017b70 <iprintf>
 8010e88:	f06f 030f 	mvn.w	r3, #15
 8010e8c:	e0ec      	b.n	8011068 <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d109      	bne.n	8010ea8 <tcp_connect+0x4c>
 8010e94:	4b76      	ldr	r3, [pc, #472]	; (8011070 <tcp_connect+0x214>)
 8010e96:	f240 4236 	movw	r2, #1078	; 0x436
 8010e9a:	4978      	ldr	r1, [pc, #480]	; (801107c <tcp_connect+0x220>)
 8010e9c:	4876      	ldr	r0, [pc, #472]	; (8011078 <tcp_connect+0x21c>)
 8010e9e:	f006 fe67 	bl	8017b70 <iprintf>
 8010ea2:	f06f 030f 	mvn.w	r3, #15
 8010ea6:	e0df      	b.n	8011068 <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	7d1b      	ldrb	r3, [r3, #20]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d009      	beq.n	8010ec4 <tcp_connect+0x68>
 8010eb0:	4b6f      	ldr	r3, [pc, #444]	; (8011070 <tcp_connect+0x214>)
 8010eb2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8010eb6:	4972      	ldr	r1, [pc, #456]	; (8011080 <tcp_connect+0x224>)
 8010eb8:	486f      	ldr	r0, [pc, #444]	; (8011078 <tcp_connect+0x21c>)
 8010eba:	f006 fe59 	bl	8017b70 <iprintf>
 8010ebe:	f06f 0309 	mvn.w	r3, #9
 8010ec2:	e0d1      	b.n	8011068 <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d002      	beq.n	8010ed0 <tcp_connect+0x74>
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	e000      	b.n	8010ed2 <tcp_connect+0x76>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	88fa      	ldrh	r2, [r7, #6]
 8010eda:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	7a1b      	ldrb	r3, [r3, #8]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d006      	beq.n	8010ef2 <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	7a1b      	ldrb	r3, [r3, #8]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fe fa41 	bl	800f370 <netif_get_by_index>
 8010eee:	6278      	str	r0, [r7, #36]	; 0x24
 8010ef0:	e005      	b.n	8010efe <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	3304      	adds	r3, #4
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fc f8ee 	bl	800d0d8 <ip4_route>
 8010efc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8010efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d102      	bne.n	8010f0a <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010f04:	f06f 0303 	mvn.w	r3, #3
 8010f08:	e0ae      	b.n	8011068 <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d003      	beq.n	8010f18 <tcp_connect+0xbc>
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d111      	bne.n	8010f3c <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d002      	beq.n	8010f24 <tcp_connect+0xc8>
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f20:	3304      	adds	r3, #4
 8010f22:	e000      	b.n	8010f26 <tcp_connect+0xca>
 8010f24:	2300      	movs	r3, #0
 8010f26:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d102      	bne.n	8010f34 <tcp_connect+0xd8>
      return ERR_RTE;
 8010f2e:	f06f 0303 	mvn.w	r3, #3
 8010f32:	e099      	b.n	8011068 <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	8adb      	ldrh	r3, [r3, #22]
 8010f40:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	8adb      	ldrh	r3, [r3, #22]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d10c      	bne.n	8010f64 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 8010f4a:	f7ff ff41 	bl	8010dd0 <tcp_new_port>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	461a      	mov	r2, r3
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	8adb      	ldrh	r3, [r3, #22]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d102      	bne.n	8010f64 <tcp_connect+0x108>
      return ERR_BUF;
 8010f5e:	f06f 0301 	mvn.w	r3, #1
 8010f62:	e081      	b.n	8011068 <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f001 f873 	bl	8012050 <tcp_next_iss>
 8010f6a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	697a      	ldr	r2, [r7, #20]
 8010f76:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	1e5a      	subs	r2, r3, #1
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	1e5a      	subs	r2, r3, #1
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	1e5a      	subs	r2, r3, #1
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010fb8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fc6:	f001 f869 	bl	801209c <tcp_eff_send_mss_netif>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	461a      	mov	r2, r3
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	683a      	ldr	r2, [r7, #0]
 8010fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010fe2:	2102      	movs	r1, #2
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	f004 fad1 	bl	801558c <tcp_enqueue_flags>
 8010fea:	4603      	mov	r3, r0
 8010fec:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8010fee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d136      	bne.n	8011064 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2202      	movs	r2, #2
 8010ffa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8010ffc:	8b7b      	ldrh	r3, [r7, #26]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d021      	beq.n	8011046 <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8011002:	4b20      	ldr	r3, [pc, #128]	; (8011084 <tcp_connect+0x228>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	429a      	cmp	r2, r3
 801100a:	d105      	bne.n	8011018 <tcp_connect+0x1bc>
 801100c:	4b1d      	ldr	r3, [pc, #116]	; (8011084 <tcp_connect+0x228>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	4a1c      	ldr	r2, [pc, #112]	; (8011084 <tcp_connect+0x228>)
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	e013      	b.n	8011040 <tcp_connect+0x1e4>
 8011018:	4b1a      	ldr	r3, [pc, #104]	; (8011084 <tcp_connect+0x228>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	623b      	str	r3, [r7, #32]
 801101e:	e00c      	b.n	801103a <tcp_connect+0x1de>
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	68fa      	ldr	r2, [r7, #12]
 8011026:	429a      	cmp	r2, r3
 8011028:	d104      	bne.n	8011034 <tcp_connect+0x1d8>
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	68da      	ldr	r2, [r3, #12]
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	60da      	str	r2, [r3, #12]
 8011032:	e005      	b.n	8011040 <tcp_connect+0x1e4>
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	623b      	str	r3, [r7, #32]
 801103a:	6a3b      	ldr	r3, [r7, #32]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1ef      	bne.n	8011020 <tcp_connect+0x1c4>
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2200      	movs	r2, #0
 8011044:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8011046:	4b10      	ldr	r3, [pc, #64]	; (8011088 <tcp_connect+0x22c>)
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	60da      	str	r2, [r3, #12]
 801104e:	4a0e      	ldr	r2, [pc, #56]	; (8011088 <tcp_connect+0x22c>)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	f005 fcb0 	bl	80169b8 <tcp_timer_needed>
 8011058:	4b0c      	ldr	r3, [pc, #48]	; (801108c <tcp_connect+0x230>)
 801105a:	2201      	movs	r2, #1
 801105c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f004 fb82 	bl	8015768 <tcp_output>
  }
  return ret;
 8011064:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3728      	adds	r7, #40	; 0x28
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}
 8011070:	0801b95c 	.word	0x0801b95c
 8011074:	0801bc94 	.word	0x0801bc94
 8011078:	0801b9fc 	.word	0x0801b9fc
 801107c:	0801bcb0 	.word	0x0801bcb0
 8011080:	0801bccc 	.word	0x0801bccc
 8011084:	2401094c 	.word	0x2401094c
 8011088:	24010954 	.word	0x24010954
 801108c:	2401095c 	.word	0x2401095c

08011090 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011090:	b5b0      	push	{r4, r5, r7, lr}
 8011092:	b090      	sub	sp, #64	; 0x40
 8011094:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801109c:	4b94      	ldr	r3, [pc, #592]	; (80112f0 <tcp_slowtmr+0x260>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	3301      	adds	r3, #1
 80110a2:	4a93      	ldr	r2, [pc, #588]	; (80112f0 <tcp_slowtmr+0x260>)
 80110a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80110a6:	4b93      	ldr	r3, [pc, #588]	; (80112f4 <tcp_slowtmr+0x264>)
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	3301      	adds	r3, #1
 80110ac:	b2da      	uxtb	r2, r3
 80110ae:	4b91      	ldr	r3, [pc, #580]	; (80112f4 <tcp_slowtmr+0x264>)
 80110b0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80110b6:	4b90      	ldr	r3, [pc, #576]	; (80112f8 <tcp_slowtmr+0x268>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80110bc:	e29d      	b.n	80115fa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80110be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c0:	7d1b      	ldrb	r3, [r3, #20]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d106      	bne.n	80110d4 <tcp_slowtmr+0x44>
 80110c6:	4b8d      	ldr	r3, [pc, #564]	; (80112fc <tcp_slowtmr+0x26c>)
 80110c8:	f240 42be 	movw	r2, #1214	; 0x4be
 80110cc:	498c      	ldr	r1, [pc, #560]	; (8011300 <tcp_slowtmr+0x270>)
 80110ce:	488d      	ldr	r0, [pc, #564]	; (8011304 <tcp_slowtmr+0x274>)
 80110d0:	f006 fd4e 	bl	8017b70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	7d1b      	ldrb	r3, [r3, #20]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d106      	bne.n	80110ea <tcp_slowtmr+0x5a>
 80110dc:	4b87      	ldr	r3, [pc, #540]	; (80112fc <tcp_slowtmr+0x26c>)
 80110de:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80110e2:	4989      	ldr	r1, [pc, #548]	; (8011308 <tcp_slowtmr+0x278>)
 80110e4:	4887      	ldr	r0, [pc, #540]	; (8011304 <tcp_slowtmr+0x274>)
 80110e6:	f006 fd43 	bl	8017b70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	7d1b      	ldrb	r3, [r3, #20]
 80110ee:	2b0a      	cmp	r3, #10
 80110f0:	d106      	bne.n	8011100 <tcp_slowtmr+0x70>
 80110f2:	4b82      	ldr	r3, [pc, #520]	; (80112fc <tcp_slowtmr+0x26c>)
 80110f4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80110f8:	4984      	ldr	r1, [pc, #528]	; (801130c <tcp_slowtmr+0x27c>)
 80110fa:	4882      	ldr	r0, [pc, #520]	; (8011304 <tcp_slowtmr+0x274>)
 80110fc:	f006 fd38 	bl	8017b70 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011102:	7f9a      	ldrb	r2, [r3, #30]
 8011104:	4b7b      	ldr	r3, [pc, #492]	; (80112f4 <tcp_slowtmr+0x264>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	429a      	cmp	r2, r3
 801110a:	d105      	bne.n	8011118 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011116:	e270      	b.n	80115fa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011118:	4b76      	ldr	r3, [pc, #472]	; (80112f4 <tcp_slowtmr+0x264>)
 801111a:	781a      	ldrb	r2, [r3, #0]
 801111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011120:	2300      	movs	r3, #0
 8011122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011126:	2300      	movs	r3, #0
 8011128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112e:	7d1b      	ldrb	r3, [r3, #20]
 8011130:	2b02      	cmp	r3, #2
 8011132:	d10a      	bne.n	801114a <tcp_slowtmr+0xba>
 8011134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801113a:	2b05      	cmp	r3, #5
 801113c:	d905      	bls.n	801114a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801113e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011142:	3301      	adds	r3, #1
 8011144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011148:	e11e      	b.n	8011388 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011150:	2b0b      	cmp	r3, #11
 8011152:	d905      	bls.n	8011160 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011158:	3301      	adds	r3, #1
 801115a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801115e:	e113      	b.n	8011388 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011162:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011166:	2b00      	cmp	r3, #0
 8011168:	d075      	beq.n	8011256 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116e:	2b00      	cmp	r3, #0
 8011170:	d006      	beq.n	8011180 <tcp_slowtmr+0xf0>
 8011172:	4b62      	ldr	r3, [pc, #392]	; (80112fc <tcp_slowtmr+0x26c>)
 8011174:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011178:	4965      	ldr	r1, [pc, #404]	; (8011310 <tcp_slowtmr+0x280>)
 801117a:	4862      	ldr	r0, [pc, #392]	; (8011304 <tcp_slowtmr+0x274>)
 801117c:	f006 fcf8 	bl	8017b70 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011184:	2b00      	cmp	r3, #0
 8011186:	d106      	bne.n	8011196 <tcp_slowtmr+0x106>
 8011188:	4b5c      	ldr	r3, [pc, #368]	; (80112fc <tcp_slowtmr+0x26c>)
 801118a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801118e:	4961      	ldr	r1, [pc, #388]	; (8011314 <tcp_slowtmr+0x284>)
 8011190:	485c      	ldr	r0, [pc, #368]	; (8011304 <tcp_slowtmr+0x274>)
 8011192:	f006 fced 	bl	8017b70 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011198:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801119c:	2b0b      	cmp	r3, #11
 801119e:	d905      	bls.n	80111ac <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80111a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a4:	3301      	adds	r3, #1
 80111a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111aa:	e0ed      	b.n	8011388 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111b2:	3b01      	subs	r3, #1
 80111b4:	4a58      	ldr	r2, [pc, #352]	; (8011318 <tcp_slowtmr+0x288>)
 80111b6:	5cd3      	ldrb	r3, [r2, r3]
 80111b8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80111ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111c0:	7c7a      	ldrb	r2, [r7, #17]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d907      	bls.n	80111d6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111cc:	3301      	adds	r3, #1
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80111d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111dc:	7c7a      	ldrb	r2, [r7, #17]
 80111de:	429a      	cmp	r2, r3
 80111e0:	f200 80d2 	bhi.w	8011388 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80111e4:	2301      	movs	r3, #1
 80111e6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80111e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d108      	bne.n	8011204 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80111f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111f4:	f005 f962 	bl	80164bc <tcp_zero_window_probe>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d014      	beq.n	8011228 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80111fe:	2300      	movs	r3, #0
 8011200:	623b      	str	r3, [r7, #32]
 8011202:	e011      	b.n	8011228 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801120a:	4619      	mov	r1, r3
 801120c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801120e:	f004 f825 	bl	801525c <tcp_split_unsent_seg>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	d107      	bne.n	8011228 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801121a:	f004 faa5 	bl	8015768 <tcp_output>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011224:	2300      	movs	r3, #0
 8011226:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011228:	6a3b      	ldr	r3, [r7, #32]
 801122a:	2b00      	cmp	r3, #0
 801122c:	f000 80ac 	beq.w	8011388 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	2200      	movs	r2, #0
 8011234:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801123e:	2b06      	cmp	r3, #6
 8011240:	f200 80a2 	bhi.w	8011388 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801124a:	3301      	adds	r3, #1
 801124c:	b2da      	uxtb	r2, r3
 801124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011250:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011254:	e098      	b.n	8011388 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801125c:	2b00      	cmp	r3, #0
 801125e:	db0f      	blt.n	8011280 <tcp_slowtmr+0x1f0>
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011266:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801126a:	4293      	cmp	r3, r2
 801126c:	d008      	beq.n	8011280 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011270:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011274:	b29b      	uxth	r3, r3
 8011276:	3301      	adds	r3, #1
 8011278:	b29b      	uxth	r3, r3
 801127a:	b21a      	sxth	r2, r3
 801127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011288:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801128c:	429a      	cmp	r2, r3
 801128e:	db7b      	blt.n	8011388 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011292:	f004 fd5d 	bl	8015d50 <tcp_rexmit_rto_prepare>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d007      	beq.n	80112ac <tcp_slowtmr+0x21c>
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d171      	bne.n	8011388 <tcp_slowtmr+0x2f8>
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d06d      	beq.n	8011388 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	7d1b      	ldrb	r3, [r3, #20]
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	d03a      	beq.n	801132a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112ba:	2b0c      	cmp	r3, #12
 80112bc:	bf28      	it	cs
 80112be:	230c      	movcs	r3, #12
 80112c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80112c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112c8:	10db      	asrs	r3, r3, #3
 80112ca:	b21b      	sxth	r3, r3
 80112cc:	461a      	mov	r2, r3
 80112ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80112d4:	4413      	add	r3, r2
 80112d6:	7efa      	ldrb	r2, [r7, #27]
 80112d8:	4910      	ldr	r1, [pc, #64]	; (801131c <tcp_slowtmr+0x28c>)
 80112da:	5c8a      	ldrb	r2, [r1, r2]
 80112dc:	4093      	lsls	r3, r2
 80112de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80112e6:	4293      	cmp	r3, r2
 80112e8:	dc1a      	bgt.n	8011320 <tcp_slowtmr+0x290>
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	b21a      	sxth	r2, r3
 80112ee:	e019      	b.n	8011324 <tcp_slowtmr+0x294>
 80112f0:	24010948 	.word	0x24010948
 80112f4:	2401095e 	.word	0x2401095e
 80112f8:	24010954 	.word	0x24010954
 80112fc:	0801b95c 	.word	0x0801b95c
 8011300:	0801bcfc 	.word	0x0801bcfc
 8011304:	0801b9fc 	.word	0x0801b9fc
 8011308:	0801bd28 	.word	0x0801bd28
 801130c:	0801bd54 	.word	0x0801bd54
 8011310:	0801bd84 	.word	0x0801bd84
 8011314:	0801bdb8 	.word	0x0801bdb8
 8011318:	0801d61c 	.word	0x0801d61c
 801131c:	0801d60c 	.word	0x0801d60c
 8011320:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011326:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	2200      	movs	r2, #0
 801132e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011338:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801133c:	4293      	cmp	r3, r2
 801133e:	bf28      	it	cs
 8011340:	4613      	movcs	r3, r2
 8011342:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011344:	8a7b      	ldrh	r3, [r7, #18]
 8011346:	085b      	lsrs	r3, r3, #1
 8011348:	b29a      	uxth	r2, r3
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011352:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011358:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801135a:	005b      	lsls	r3, r3, #1
 801135c:	b29b      	uxth	r3, r3
 801135e:	429a      	cmp	r2, r3
 8011360:	d206      	bcs.n	8011370 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	b29a      	uxth	r2, r3
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011376:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137c:	2200      	movs	r2, #0
 801137e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011384:	f004 fd54 	bl	8015e30 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138a:	7d1b      	ldrb	r3, [r3, #20]
 801138c:	2b06      	cmp	r3, #6
 801138e:	d111      	bne.n	80113b4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011392:	8b5b      	ldrh	r3, [r3, #26]
 8011394:	f003 0310 	and.w	r3, r3, #16
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00b      	beq.n	80113b4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801139c:	4b9c      	ldr	r3, [pc, #624]	; (8011610 <tcp_slowtmr+0x580>)
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a2:	6a1b      	ldr	r3, [r3, #32]
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	2b28      	cmp	r3, #40	; 0x28
 80113a8:	d904      	bls.n	80113b4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80113aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ae:	3301      	adds	r3, #1
 80113b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80113b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b6:	7a5b      	ldrb	r3, [r3, #9]
 80113b8:	f003 0308 	and.w	r3, r3, #8
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d04a      	beq.n	8011456 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80113c4:	2b04      	cmp	r3, #4
 80113c6:	d003      	beq.n	80113d0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80113cc:	2b07      	cmp	r3, #7
 80113ce:	d142      	bne.n	8011456 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113d0:	4b8f      	ldr	r3, [pc, #572]	; (8011610 <tcp_slowtmr+0x580>)
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	6a1b      	ldr	r3, [r3, #32]
 80113d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80113da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113dc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80113e0:	4b8c      	ldr	r3, [pc, #560]	; (8011614 <tcp_slowtmr+0x584>)
 80113e2:	440b      	add	r3, r1
 80113e4:	498c      	ldr	r1, [pc, #560]	; (8011618 <tcp_slowtmr+0x588>)
 80113e6:	fba1 1303 	umull	r1, r3, r1, r3
 80113ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d90a      	bls.n	8011406 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80113f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113f4:	3301      	adds	r3, #1
 80113f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80113fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113fe:	3301      	adds	r3, #1
 8011400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011404:	e027      	b.n	8011456 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011406:	4b82      	ldr	r3, [pc, #520]	; (8011610 <tcp_slowtmr+0x580>)
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140c:	6a1b      	ldr	r3, [r3, #32]
 801140e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011412:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801141c:	4618      	mov	r0, r3
 801141e:	4b7f      	ldr	r3, [pc, #508]	; (801161c <tcp_slowtmr+0x58c>)
 8011420:	fb00 f303 	mul.w	r3, r0, r3
 8011424:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011426:	497c      	ldr	r1, [pc, #496]	; (8011618 <tcp_slowtmr+0x588>)
 8011428:	fba1 1303 	umull	r1, r3, r1, r3
 801142c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801142e:	429a      	cmp	r2, r3
 8011430:	d911      	bls.n	8011456 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011434:	f005 f802 	bl	801643c <tcp_keepalive>
 8011438:	4603      	mov	r3, r0
 801143a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801143e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011442:	2b00      	cmp	r3, #0
 8011444:	d107      	bne.n	8011456 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801144c:	3301      	adds	r3, #1
 801144e:	b2da      	uxtb	r2, r3
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801145a:	2b00      	cmp	r3, #0
 801145c:	d011      	beq.n	8011482 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801145e:	4b6c      	ldr	r3, [pc, #432]	; (8011610 <tcp_slowtmr+0x580>)
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011464:	6a1b      	ldr	r3, [r3, #32]
 8011466:	1ad2      	subs	r2, r2, r3
 8011468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801146e:	4619      	mov	r1, r3
 8011470:	460b      	mov	r3, r1
 8011472:	005b      	lsls	r3, r3, #1
 8011474:	440b      	add	r3, r1
 8011476:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011478:	429a      	cmp	r2, r3
 801147a:	d302      	bcc.n	8011482 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801147c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801147e:	f000 feb7 	bl	80121f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011484:	7d1b      	ldrb	r3, [r3, #20]
 8011486:	2b03      	cmp	r3, #3
 8011488:	d10b      	bne.n	80114a2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801148a:	4b61      	ldr	r3, [pc, #388]	; (8011610 <tcp_slowtmr+0x580>)
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011490:	6a1b      	ldr	r3, [r3, #32]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	2b28      	cmp	r3, #40	; 0x28
 8011496:	d904      	bls.n	80114a2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801149c:	3301      	adds	r3, #1
 801149e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	7d1b      	ldrb	r3, [r3, #20]
 80114a6:	2b09      	cmp	r3, #9
 80114a8:	d10b      	bne.n	80114c2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80114aa:	4b59      	ldr	r3, [pc, #356]	; (8011610 <tcp_slowtmr+0x580>)
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b0:	6a1b      	ldr	r3, [r3, #32]
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	2bf0      	cmp	r3, #240	; 0xf0
 80114b6:	d904      	bls.n	80114c2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80114b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114bc:	3301      	adds	r3, #1
 80114be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d060      	beq.n	801158c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80114ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114d0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80114d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114d4:	f000 fcd8 	bl	8011e88 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80114d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d010      	beq.n	8011500 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80114de:	4b50      	ldr	r3, [pc, #320]	; (8011620 <tcp_slowtmr+0x590>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d106      	bne.n	80114f6 <tcp_slowtmr+0x466>
 80114e8:	4b4e      	ldr	r3, [pc, #312]	; (8011624 <tcp_slowtmr+0x594>)
 80114ea:	f240 526d 	movw	r2, #1389	; 0x56d
 80114ee:	494e      	ldr	r1, [pc, #312]	; (8011628 <tcp_slowtmr+0x598>)
 80114f0:	484e      	ldr	r0, [pc, #312]	; (801162c <tcp_slowtmr+0x59c>)
 80114f2:	f006 fb3d 	bl	8017b70 <iprintf>
        prev->next = pcb->next;
 80114f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f8:	68da      	ldr	r2, [r3, #12]
 80114fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fc:	60da      	str	r2, [r3, #12]
 80114fe:	e00f      	b.n	8011520 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011500:	4b47      	ldr	r3, [pc, #284]	; (8011620 <tcp_slowtmr+0x590>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011506:	429a      	cmp	r2, r3
 8011508:	d006      	beq.n	8011518 <tcp_slowtmr+0x488>
 801150a:	4b46      	ldr	r3, [pc, #280]	; (8011624 <tcp_slowtmr+0x594>)
 801150c:	f240 5271 	movw	r2, #1393	; 0x571
 8011510:	4947      	ldr	r1, [pc, #284]	; (8011630 <tcp_slowtmr+0x5a0>)
 8011512:	4846      	ldr	r0, [pc, #280]	; (801162c <tcp_slowtmr+0x59c>)
 8011514:	f006 fb2c 	bl	8017b70 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	4a40      	ldr	r2, [pc, #256]	; (8011620 <tcp_slowtmr+0x590>)
 801151e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011524:	2b00      	cmp	r3, #0
 8011526:	d013      	beq.n	8011550 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011530:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011534:	3304      	adds	r3, #4
 8011536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011538:	8ad2      	ldrh	r2, [r2, #22]
 801153a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801153c:	8b09      	ldrh	r1, [r1, #24]
 801153e:	9102      	str	r1, [sp, #8]
 8011540:	9201      	str	r2, [sp, #4]
 8011542:	9300      	str	r3, [sp, #0]
 8011544:	462b      	mov	r3, r5
 8011546:	4622      	mov	r2, r4
 8011548:	4601      	mov	r1, r0
 801154a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801154c:	f004 fec2 	bl	80162d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011552:	691b      	ldr	r3, [r3, #16]
 8011554:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011558:	7d1b      	ldrb	r3, [r3, #20]
 801155a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011566:	6838      	ldr	r0, [r7, #0]
 8011568:	f7fe ff94 	bl	8010494 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801156c:	4b31      	ldr	r3, [pc, #196]	; (8011634 <tcp_slowtmr+0x5a4>)
 801156e:	2200      	movs	r2, #0
 8011570:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d004      	beq.n	8011582 <tcp_slowtmr+0x4f2>
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f06f 010c 	mvn.w	r1, #12
 801157e:	68b8      	ldr	r0, [r7, #8]
 8011580:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011582:	4b2c      	ldr	r3, [pc, #176]	; (8011634 <tcp_slowtmr+0x5a4>)
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d037      	beq.n	80115fa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801158a:	e592      	b.n	80110b2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	7f1b      	ldrb	r3, [r3, #28]
 801159a:	3301      	adds	r3, #1
 801159c:	b2da      	uxtb	r2, r3
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80115a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a4:	7f1a      	ldrb	r2, [r3, #28]
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	7f5b      	ldrb	r3, [r3, #29]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d325      	bcc.n	80115fa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	2200      	movs	r2, #0
 80115b2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80115b4:	4b1f      	ldr	r3, [pc, #124]	; (8011634 <tcp_slowtmr+0x5a4>)
 80115b6:	2200      	movs	r2, #0
 80115b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d00b      	beq.n	80115dc <tcp_slowtmr+0x54c>
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115cc:	6912      	ldr	r2, [r2, #16]
 80115ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115d0:	4610      	mov	r0, r2
 80115d2:	4798      	blx	r3
 80115d4:	4603      	mov	r3, r0
 80115d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80115da:	e002      	b.n	80115e2 <tcp_slowtmr+0x552>
 80115dc:	2300      	movs	r3, #0
 80115de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80115e2:	4b14      	ldr	r3, [pc, #80]	; (8011634 <tcp_slowtmr+0x5a4>)
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d000      	beq.n	80115ec <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80115ea:	e562      	b.n	80110b2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80115ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d102      	bne.n	80115fa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80115f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115f6:	f004 f8b7 	bl	8015768 <tcp_output>
  while (pcb != NULL) {
 80115fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f47f ad5e 	bne.w	80110be <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011602:	2300      	movs	r3, #0
 8011604:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011606:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <tcp_slowtmr+0x5a8>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801160c:	e069      	b.n	80116e2 <tcp_slowtmr+0x652>
 801160e:	bf00      	nop
 8011610:	24010948 	.word	0x24010948
 8011614:	000a4cb8 	.word	0x000a4cb8
 8011618:	10624dd3 	.word	0x10624dd3
 801161c:	000124f8 	.word	0x000124f8
 8011620:	24010954 	.word	0x24010954
 8011624:	0801b95c 	.word	0x0801b95c
 8011628:	0801bdf0 	.word	0x0801bdf0
 801162c:	0801b9fc 	.word	0x0801b9fc
 8011630:	0801be1c 	.word	0x0801be1c
 8011634:	2401095c 	.word	0x2401095c
 8011638:	24010958 	.word	0x24010958
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163e:	7d1b      	ldrb	r3, [r3, #20]
 8011640:	2b0a      	cmp	r3, #10
 8011642:	d006      	beq.n	8011652 <tcp_slowtmr+0x5c2>
 8011644:	4b2b      	ldr	r3, [pc, #172]	; (80116f4 <tcp_slowtmr+0x664>)
 8011646:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801164a:	492b      	ldr	r1, [pc, #172]	; (80116f8 <tcp_slowtmr+0x668>)
 801164c:	482b      	ldr	r0, [pc, #172]	; (80116fc <tcp_slowtmr+0x66c>)
 801164e:	f006 fa8f 	bl	8017b70 <iprintf>
    pcb_remove = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011658:	4b29      	ldr	r3, [pc, #164]	; (8011700 <tcp_slowtmr+0x670>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165e:	6a1b      	ldr	r3, [r3, #32]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	2bf0      	cmp	r3, #240	; 0xf0
 8011664:	d904      	bls.n	8011670 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801166a:	3301      	adds	r3, #1
 801166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011674:	2b00      	cmp	r3, #0
 8011676:	d02f      	beq.n	80116d8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801167a:	f000 fc05 	bl	8011e88 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011680:	2b00      	cmp	r3, #0
 8011682:	d010      	beq.n	80116a6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011684:	4b1f      	ldr	r3, [pc, #124]	; (8011704 <tcp_slowtmr+0x674>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801168a:	429a      	cmp	r2, r3
 801168c:	d106      	bne.n	801169c <tcp_slowtmr+0x60c>
 801168e:	4b19      	ldr	r3, [pc, #100]	; (80116f4 <tcp_slowtmr+0x664>)
 8011690:	f240 52af 	movw	r2, #1455	; 0x5af
 8011694:	491c      	ldr	r1, [pc, #112]	; (8011708 <tcp_slowtmr+0x678>)
 8011696:	4819      	ldr	r0, [pc, #100]	; (80116fc <tcp_slowtmr+0x66c>)
 8011698:	f006 fa6a 	bl	8017b70 <iprintf>
        prev->next = pcb->next;
 801169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169e:	68da      	ldr	r2, [r3, #12]
 80116a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	e00f      	b.n	80116c6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80116a6:	4b17      	ldr	r3, [pc, #92]	; (8011704 <tcp_slowtmr+0x674>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d006      	beq.n	80116be <tcp_slowtmr+0x62e>
 80116b0:	4b10      	ldr	r3, [pc, #64]	; (80116f4 <tcp_slowtmr+0x664>)
 80116b2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80116b6:	4915      	ldr	r1, [pc, #84]	; (801170c <tcp_slowtmr+0x67c>)
 80116b8:	4810      	ldr	r0, [pc, #64]	; (80116fc <tcp_slowtmr+0x66c>)
 80116ba:	f006 fa59 	bl	8017b70 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80116be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	4a10      	ldr	r2, [pc, #64]	; (8011704 <tcp_slowtmr+0x674>)
 80116c4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80116c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80116ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80116d0:	69f8      	ldr	r0, [r7, #28]
 80116d2:	f7fe fedf 	bl	8010494 <tcp_free>
 80116d6:	e004      	b.n	80116e2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80116d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80116dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80116e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d1a9      	bne.n	801163c <tcp_slowtmr+0x5ac>
    }
  }
}
 80116e8:	bf00      	nop
 80116ea:	bf00      	nop
 80116ec:	3730      	adds	r7, #48	; 0x30
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bdb0      	pop	{r4, r5, r7, pc}
 80116f2:	bf00      	nop
 80116f4:	0801b95c 	.word	0x0801b95c
 80116f8:	0801be48 	.word	0x0801be48
 80116fc:	0801b9fc 	.word	0x0801b9fc
 8011700:	24010948 	.word	0x24010948
 8011704:	24010958 	.word	0x24010958
 8011708:	0801be78 	.word	0x0801be78
 801170c:	0801bea0 	.word	0x0801bea0

08011710 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011716:	4b2d      	ldr	r3, [pc, #180]	; (80117cc <tcp_fasttmr+0xbc>)
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	3301      	adds	r3, #1
 801171c:	b2da      	uxtb	r2, r3
 801171e:	4b2b      	ldr	r3, [pc, #172]	; (80117cc <tcp_fasttmr+0xbc>)
 8011720:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011722:	4b2b      	ldr	r3, [pc, #172]	; (80117d0 <tcp_fasttmr+0xc0>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011728:	e048      	b.n	80117bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	7f9a      	ldrb	r2, [r3, #30]
 801172e:	4b27      	ldr	r3, [pc, #156]	; (80117cc <tcp_fasttmr+0xbc>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	429a      	cmp	r2, r3
 8011734:	d03f      	beq.n	80117b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011736:	4b25      	ldr	r3, [pc, #148]	; (80117cc <tcp_fasttmr+0xbc>)
 8011738:	781a      	ldrb	r2, [r3, #0]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	8b5b      	ldrh	r3, [r3, #26]
 8011742:	f003 0301 	and.w	r3, r3, #1
 8011746:	2b00      	cmp	r3, #0
 8011748:	d010      	beq.n	801176c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	8b5b      	ldrh	r3, [r3, #26]
 801174e:	f043 0302 	orr.w	r3, r3, #2
 8011752:	b29a      	uxth	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f004 f805 	bl	8015768 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	8b5b      	ldrh	r3, [r3, #26]
 8011762:	f023 0303 	bic.w	r3, r3, #3
 8011766:	b29a      	uxth	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	8b5b      	ldrh	r3, [r3, #26]
 8011770:	f003 0308 	and.w	r3, r3, #8
 8011774:	2b00      	cmp	r3, #0
 8011776:	d009      	beq.n	801178c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	8b5b      	ldrh	r3, [r3, #26]
 801177c:	f023 0308 	bic.w	r3, r3, #8
 8011780:	b29a      	uxth	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7ff f818 	bl	80107bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00a      	beq.n	80117b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801179a:	4b0e      	ldr	r3, [pc, #56]	; (80117d4 <tcp_fasttmr+0xc4>)
 801179c:	2200      	movs	r2, #0
 801179e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f000 f819 	bl	80117d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80117a6:	4b0b      	ldr	r3, [pc, #44]	; (80117d4 <tcp_fasttmr+0xc4>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d000      	beq.n	80117b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80117ae:	e7b8      	b.n	8011722 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	607b      	str	r3, [r7, #4]
 80117b4:	e002      	b.n	80117bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1b3      	bne.n	801172a <tcp_fasttmr+0x1a>
    }
  }
}
 80117c2:	bf00      	nop
 80117c4:	bf00      	nop
 80117c6:	3708      	adds	r7, #8
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	2401095e 	.word	0x2401095e
 80117d0:	24010954 	.word	0x24010954
 80117d4:	2401095c 	.word	0x2401095c

080117d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80117d8:	b590      	push	{r4, r7, lr}
 80117da:	b085      	sub	sp, #20
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d109      	bne.n	80117fa <tcp_process_refused_data+0x22>
 80117e6:	4b38      	ldr	r3, [pc, #224]	; (80118c8 <tcp_process_refused_data+0xf0>)
 80117e8:	f240 6209 	movw	r2, #1545	; 0x609
 80117ec:	4937      	ldr	r1, [pc, #220]	; (80118cc <tcp_process_refused_data+0xf4>)
 80117ee:	4838      	ldr	r0, [pc, #224]	; (80118d0 <tcp_process_refused_data+0xf8>)
 80117f0:	f006 f9be 	bl	8017b70 <iprintf>
 80117f4:	f06f 030f 	mvn.w	r3, #15
 80117f8:	e061      	b.n	80118be <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117fe:	7b5b      	ldrb	r3, [r3, #13]
 8011800:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011806:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00b      	beq.n	8011830 <tcp_process_refused_data+0x58>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6918      	ldr	r0, [r3, #16]
 8011822:	2300      	movs	r3, #0
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	6879      	ldr	r1, [r7, #4]
 8011828:	47a0      	blx	r4
 801182a:	4603      	mov	r3, r0
 801182c:	73fb      	strb	r3, [r7, #15]
 801182e:	e007      	b.n	8011840 <tcp_process_refused_data+0x68>
 8011830:	2300      	movs	r3, #0
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	6879      	ldr	r1, [r7, #4]
 8011836:	2000      	movs	r0, #0
 8011838:	f000 f8a6 	bl	8011988 <tcp_recv_null>
 801183c:	4603      	mov	r3, r0
 801183e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d12b      	bne.n	80118a0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011848:	7bbb      	ldrb	r3, [r7, #14]
 801184a:	f003 0320 	and.w	r3, r3, #32
 801184e:	2b00      	cmp	r3, #0
 8011850:	d034      	beq.n	80118bc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011856:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801185a:	4293      	cmp	r3, r2
 801185c:	d005      	beq.n	801186a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011862:	3301      	adds	r3, #1
 8011864:	b29a      	uxth	r2, r3
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011870:	2b00      	cmp	r3, #0
 8011872:	d00b      	beq.n	801188c <tcp_process_refused_data+0xb4>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6918      	ldr	r0, [r3, #16]
 801187e:	2300      	movs	r3, #0
 8011880:	2200      	movs	r2, #0
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	47a0      	blx	r4
 8011886:	4603      	mov	r3, r0
 8011888:	73fb      	strb	r3, [r7, #15]
 801188a:	e001      	b.n	8011890 <tcp_process_refused_data+0xb8>
 801188c:	2300      	movs	r3, #0
 801188e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011894:	f113 0f0d 	cmn.w	r3, #13
 8011898:	d110      	bne.n	80118bc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801189a:	f06f 030c 	mvn.w	r3, #12
 801189e:	e00e      	b.n	80118be <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80118a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118a4:	f113 0f0d 	cmn.w	r3, #13
 80118a8:	d102      	bne.n	80118b0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80118aa:	f06f 030c 	mvn.w	r3, #12
 80118ae:	e006      	b.n	80118be <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	68ba      	ldr	r2, [r7, #8]
 80118b4:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80118b6:	f06f 0304 	mvn.w	r3, #4
 80118ba:	e000      	b.n	80118be <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80118bc:	2300      	movs	r3, #0
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3714      	adds	r7, #20
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd90      	pop	{r4, r7, pc}
 80118c6:	bf00      	nop
 80118c8:	0801b95c 	.word	0x0801b95c
 80118cc:	0801bec8 	.word	0x0801bec8
 80118d0:	0801b9fc 	.word	0x0801b9fc

080118d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80118dc:	e007      	b.n	80118ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f80a 	bl	80118fe <tcp_seg_free>
    seg = next;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1f4      	bne.n	80118de <tcp_segs_free+0xa>
  }
}
 80118f4:	bf00      	nop
 80118f6:	bf00      	nop
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b082      	sub	sp, #8
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00c      	beq.n	8011926 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d004      	beq.n	801191e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	4618      	mov	r0, r3
 801191a:	f7fe f8b7 	bl	800fa8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801191e:	6879      	ldr	r1, [r7, #4]
 8011920:	2003      	movs	r0, #3
 8011922:	f7fd f9e5 	bl	800ecf0 <memp_free>
  }
}
 8011926:	bf00      	nop
 8011928:	3708      	adds	r7, #8
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
	...

08011930 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d106      	bne.n	801194c <tcp_seg_copy+0x1c>
 801193e:	4b0f      	ldr	r3, [pc, #60]	; (801197c <tcp_seg_copy+0x4c>)
 8011940:	f240 6282 	movw	r2, #1666	; 0x682
 8011944:	490e      	ldr	r1, [pc, #56]	; (8011980 <tcp_seg_copy+0x50>)
 8011946:	480f      	ldr	r0, [pc, #60]	; (8011984 <tcp_seg_copy+0x54>)
 8011948:	f006 f912 	bl	8017b70 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801194c:	2003      	movs	r0, #3
 801194e:	f7fd f959 	bl	800ec04 <memp_malloc>
 8011952:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d101      	bne.n	801195e <tcp_seg_copy+0x2e>
    return NULL;
 801195a:	2300      	movs	r3, #0
 801195c:	e00a      	b.n	8011974 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801195e:	2210      	movs	r2, #16
 8011960:	6879      	ldr	r1, [r7, #4]
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f006 f83f 	bl	80179e6 <memcpy>
  pbuf_ref(cseg->p);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	4618      	mov	r0, r3
 801196e:	f7fe f933 	bl	800fbd8 <pbuf_ref>
  return cseg;
 8011972:	68fb      	ldr	r3, [r7, #12]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3710      	adds	r7, #16
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	0801b95c 	.word	0x0801b95c
 8011980:	0801bf0c 	.word	0x0801bf0c
 8011984:	0801b9fc 	.word	0x0801b9fc

08011988 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	607a      	str	r2, [r7, #4]
 8011994:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d109      	bne.n	80119b0 <tcp_recv_null+0x28>
 801199c:	4b12      	ldr	r3, [pc, #72]	; (80119e8 <tcp_recv_null+0x60>)
 801199e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80119a2:	4912      	ldr	r1, [pc, #72]	; (80119ec <tcp_recv_null+0x64>)
 80119a4:	4812      	ldr	r0, [pc, #72]	; (80119f0 <tcp_recv_null+0x68>)
 80119a6:	f006 f8e3 	bl	8017b70 <iprintf>
 80119aa:	f06f 030f 	mvn.w	r3, #15
 80119ae:	e016      	b.n	80119de <tcp_recv_null+0x56>

  if (p != NULL) {
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d009      	beq.n	80119ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	891b      	ldrh	r3, [r3, #8]
 80119ba:	4619      	mov	r1, r3
 80119bc:	68b8      	ldr	r0, [r7, #8]
 80119be:	f7ff f9b3 	bl	8010d28 <tcp_recved>
    pbuf_free(p);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7fe f862 	bl	800fa8c <pbuf_free>
 80119c8:	e008      	b.n	80119dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80119ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d104      	bne.n	80119dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80119d2:	68b8      	ldr	r0, [r7, #8]
 80119d4:	f7fe ff5c 	bl	8010890 <tcp_close>
 80119d8:	4603      	mov	r3, r0
 80119da:	e000      	b.n	80119de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	0801b95c 	.word	0x0801b95c
 80119ec:	0801bf28 	.word	0x0801bf28
 80119f0:	0801b9fc 	.word	0x0801b9fc

080119f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b086      	sub	sp, #24
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	4603      	mov	r3, r0
 80119fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80119fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	db01      	blt.n	8011a0a <tcp_kill_prio+0x16>
 8011a06:	79fb      	ldrb	r3, [r7, #7]
 8011a08:	e000      	b.n	8011a0c <tcp_kill_prio+0x18>
 8011a0a:	237f      	movs	r3, #127	; 0x7f
 8011a0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011a0e:	7afb      	ldrb	r3, [r7, #11]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d034      	beq.n	8011a7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011a14:	7afb      	ldrb	r3, [r7, #11]
 8011a16:	3b01      	subs	r3, #1
 8011a18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a22:	4b19      	ldr	r3, [pc, #100]	; (8011a88 <tcp_kill_prio+0x94>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	e01f      	b.n	8011a6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	7d5b      	ldrb	r3, [r3, #21]
 8011a2e:	7afa      	ldrb	r2, [r7, #11]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d80c      	bhi.n	8011a4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011a38:	7afa      	ldrb	r2, [r7, #11]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d112      	bne.n	8011a64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011a3e:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <tcp_kill_prio+0x98>)
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	6a1b      	ldr	r3, [r3, #32]
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d80a      	bhi.n	8011a64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011a4e:	4b0f      	ldr	r3, [pc, #60]	; (8011a8c <tcp_kill_prio+0x98>)
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	6a1b      	ldr	r3, [r3, #32]
 8011a56:	1ad3      	subs	r3, r2, r3
 8011a58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	7d5b      	ldrb	r3, [r3, #21]
 8011a62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	617b      	str	r3, [r7, #20]
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1dc      	bne.n	8011a2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d004      	beq.n	8011a80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011a76:	6938      	ldr	r0, [r7, #16]
 8011a78:	f7ff f856 	bl	8010b28 <tcp_abort>
 8011a7c:	e000      	b.n	8011a80 <tcp_kill_prio+0x8c>
    return;
 8011a7e:	bf00      	nop
  }
}
 8011a80:	3718      	adds	r7, #24
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	24010954 	.word	0x24010954
 8011a8c:	24010948 	.word	0x24010948

08011a90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b086      	sub	sp, #24
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	4603      	mov	r3, r0
 8011a98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011a9a:	79fb      	ldrb	r3, [r7, #7]
 8011a9c:	2b08      	cmp	r3, #8
 8011a9e:	d009      	beq.n	8011ab4 <tcp_kill_state+0x24>
 8011aa0:	79fb      	ldrb	r3, [r7, #7]
 8011aa2:	2b09      	cmp	r3, #9
 8011aa4:	d006      	beq.n	8011ab4 <tcp_kill_state+0x24>
 8011aa6:	4b1a      	ldr	r3, [pc, #104]	; (8011b10 <tcp_kill_state+0x80>)
 8011aa8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011aac:	4919      	ldr	r1, [pc, #100]	; (8011b14 <tcp_kill_state+0x84>)
 8011aae:	481a      	ldr	r0, [pc, #104]	; (8011b18 <tcp_kill_state+0x88>)
 8011ab0:	f006 f85e 	bl	8017b70 <iprintf>

  inactivity = 0;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011abc:	4b17      	ldr	r3, [pc, #92]	; (8011b1c <tcp_kill_state+0x8c>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	617b      	str	r3, [r7, #20]
 8011ac2:	e017      	b.n	8011af4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	7d1b      	ldrb	r3, [r3, #20]
 8011ac8:	79fa      	ldrb	r2, [r7, #7]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d10f      	bne.n	8011aee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011ace:	4b14      	ldr	r3, [pc, #80]	; (8011b20 <tcp_kill_state+0x90>)
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	6a1b      	ldr	r3, [r3, #32]
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d807      	bhi.n	8011aee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011ade:	4b10      	ldr	r3, [pc, #64]	; (8011b20 <tcp_kill_state+0x90>)
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	617b      	str	r3, [r7, #20]
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1e4      	bne.n	8011ac4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d003      	beq.n	8011b08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011b00:	2100      	movs	r1, #0
 8011b02:	6938      	ldr	r0, [r7, #16]
 8011b04:	f7fe ff50 	bl	80109a8 <tcp_abandon>
  }
}
 8011b08:	bf00      	nop
 8011b0a:	3718      	adds	r7, #24
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	0801b95c 	.word	0x0801b95c
 8011b14:	0801bf44 	.word	0x0801bf44
 8011b18:	0801b9fc 	.word	0x0801b9fc
 8011b1c:	24010954 	.word	0x24010954
 8011b20:	24010948 	.word	0x24010948

08011b24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b32:	4b12      	ldr	r3, [pc, #72]	; (8011b7c <tcp_kill_timewait+0x58>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	60fb      	str	r3, [r7, #12]
 8011b38:	e012      	b.n	8011b60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b3a:	4b11      	ldr	r3, [pc, #68]	; (8011b80 <tcp_kill_timewait+0x5c>)
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	6a1b      	ldr	r3, [r3, #32]
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d807      	bhi.n	8011b5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011b4a:	4b0d      	ldr	r3, [pc, #52]	; (8011b80 <tcp_kill_timewait+0x5c>)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	6a1b      	ldr	r3, [r3, #32]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1e9      	bne.n	8011b3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d002      	beq.n	8011b72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b6c:	68b8      	ldr	r0, [r7, #8]
 8011b6e:	f7fe ffdb 	bl	8010b28 <tcp_abort>
  }
}
 8011b72:	bf00      	nop
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	24010958 	.word	0x24010958
 8011b80:	24010948 	.word	0x24010948

08011b84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011b8a:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <tcp_handle_closepend+0x48>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011b90:	e014      	b.n	8011bbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	8b5b      	ldrh	r3, [r3, #26]
 8011b9c:	f003 0308 	and.w	r3, r3, #8
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d009      	beq.n	8011bb8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	8b5b      	ldrh	r3, [r3, #26]
 8011ba8:	f023 0308 	bic.w	r3, r3, #8
 8011bac:	b29a      	uxth	r2, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7fe fe02 	bl	80107bc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d1e7      	bne.n	8011b92 <tcp_handle_closepend+0xe>
  }
}
 8011bc2:	bf00      	nop
 8011bc4:	bf00      	nop
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	24010954 	.word	0x24010954

08011bd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8011bda:	f7f4 f929 	bl	8005e30 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bde:	2001      	movs	r0, #1
 8011be0:	f7fd f810 	bl	800ec04 <memp_malloc>
 8011be4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d126      	bne.n	8011c3a <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011bec:	f7ff ffca 	bl	8011b84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011bf0:	f7ff ff98 	bl	8011b24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	f7fd f805 	bl	800ec04 <memp_malloc>
 8011bfa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d11b      	bne.n	8011c3a <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011c02:	2009      	movs	r0, #9
 8011c04:	f7ff ff44 	bl	8011a90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c08:	2001      	movs	r0, #1
 8011c0a:	f7fc fffb 	bl	800ec04 <memp_malloc>
 8011c0e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d111      	bne.n	8011c3a <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011c16:	2008      	movs	r0, #8
 8011c18:	f7ff ff3a 	bl	8011a90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	f7fc fff1 	bl	800ec04 <memp_malloc>
 8011c22:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d107      	bne.n	8011c3a <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011c2a:	79fb      	ldrb	r3, [r7, #7]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff fee1 	bl	80119f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c32:	2001      	movs	r0, #1
 8011c34:	f7fc ffe6 	bl	800ec04 <memp_malloc>
 8011c38:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d03f      	beq.n	8011cc0 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011c40:	229c      	movs	r2, #156	; 0x9c
 8011c42:	2100      	movs	r1, #0
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f005 fef6 	bl	8017a36 <memset>
    pcb->prio = prio;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	79fa      	ldrb	r2, [r7, #7]
 8011c4e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011c56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011c60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	22ff      	movs	r2, #255	; 0xff
 8011c6e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c76:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2206      	movs	r2, #6
 8011c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	2206      	movs	r2, #6
 8011c84:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c8c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2201      	movs	r2, #1
 8011c92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011c96:	4b0d      	ldr	r3, [pc, #52]	; (8011ccc <tcp_alloc+0xfc>)
 8011c98:	681a      	ldr	r2, [r3, #0]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011c9e:	4b0c      	ldr	r3, [pc, #48]	; (8011cd0 <tcp_alloc+0x100>)
 8011ca0:	781a      	ldrb	r2, [r3, #0]
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011cac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	4a08      	ldr	r2, [pc, #32]	; (8011cd4 <tcp_alloc+0x104>)
 8011cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	4a07      	ldr	r2, [pc, #28]	; (8011cd8 <tcp_alloc+0x108>)
 8011cbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	24010948 	.word	0x24010948
 8011cd0:	2401095e 	.word	0x2401095e
 8011cd4:	08011989 	.word	0x08011989
 8011cd8:	006ddd00 	.word	0x006ddd00

08011cdc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011ce6:	2040      	movs	r0, #64	; 0x40
 8011ce8:	f7ff ff72 	bl	8011bd0 <tcp_alloc>
 8011cec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011cee:	68fb      	ldr	r3, [r7, #12]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011d02:	f7f4 f895 	bl	8005e30 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d002      	beq.n	8011d12 <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	683a      	ldr	r2, [r7, #0]
 8011d10:	611a      	str	r2, [r3, #16]
  }
}
 8011d12:	bf00      	nop
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
	...

08011d1c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011d26:	f7f4 f883 	bl	8005e30 <sys_check_core_locking>
  if (pcb != NULL) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d00e      	beq.n	8011d4e <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	7d1b      	ldrb	r3, [r3, #20]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d106      	bne.n	8011d46 <tcp_recv+0x2a>
 8011d38:	4b07      	ldr	r3, [pc, #28]	; (8011d58 <tcp_recv+0x3c>)
 8011d3a:	f240 72df 	movw	r2, #2015	; 0x7df
 8011d3e:	4907      	ldr	r1, [pc, #28]	; (8011d5c <tcp_recv+0x40>)
 8011d40:	4807      	ldr	r0, [pc, #28]	; (8011d60 <tcp_recv+0x44>)
 8011d42:	f005 ff15 	bl	8017b70 <iprintf>
    pcb->recv = recv;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8011d4e:	bf00      	nop
 8011d50:	3708      	adds	r7, #8
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	0801b95c 	.word	0x0801b95c
 8011d5c:	0801bf54 	.word	0x0801bf54
 8011d60:	0801b9fc 	.word	0x0801b9fc

08011d64 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011d6e:	f7f4 f85f 	bl	8005e30 <sys_check_core_locking>
  if (pcb != NULL) {
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00e      	beq.n	8011d96 <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	7d1b      	ldrb	r3, [r3, #20]
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d106      	bne.n	8011d8e <tcp_sent+0x2a>
 8011d80:	4b07      	ldr	r3, [pc, #28]	; (8011da0 <tcp_sent+0x3c>)
 8011d82:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8011d86:	4907      	ldr	r1, [pc, #28]	; (8011da4 <tcp_sent+0x40>)
 8011d88:	4807      	ldr	r0, [pc, #28]	; (8011da8 <tcp_sent+0x44>)
 8011d8a:	f005 fef1 	bl	8017b70 <iprintf>
    pcb->sent = sent;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	683a      	ldr	r2, [r7, #0]
 8011d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011d96:	bf00      	nop
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	0801b95c 	.word	0x0801b95c
 8011da4:	0801bf7c 	.word	0x0801bf7c
 8011da8:	0801b9fc 	.word	0x0801b9fc

08011dac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011db6:	f7f4 f83b 	bl	8005e30 <sys_check_core_locking>
  if (pcb != NULL) {
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00e      	beq.n	8011dde <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7d1b      	ldrb	r3, [r3, #20]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d106      	bne.n	8011dd6 <tcp_err+0x2a>
 8011dc8:	4b07      	ldr	r3, [pc, #28]	; (8011de8 <tcp_err+0x3c>)
 8011dca:	f640 020d 	movw	r2, #2061	; 0x80d
 8011dce:	4907      	ldr	r1, [pc, #28]	; (8011dec <tcp_err+0x40>)
 8011dd0:	4807      	ldr	r0, [pc, #28]	; (8011df0 <tcp_err+0x44>)
 8011dd2:	f005 fecd 	bl	8017b70 <iprintf>
    pcb->errf = err;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	683a      	ldr	r2, [r7, #0]
 8011dda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011dde:	bf00      	nop
 8011de0:	3708      	adds	r7, #8
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	0801b95c 	.word	0x0801b95c
 8011dec:	0801bfa4 	.word	0x0801bfa4
 8011df0:	0801b9fc 	.word	0x0801b9fc

08011df4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011dfe:	f7f4 f817 	bl	8005e30 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d008      	beq.n	8011e1a <tcp_accept+0x26>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	7d1b      	ldrb	r3, [r3, #20]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d104      	bne.n	8011e1a <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	683a      	ldr	r2, [r7, #0]
 8011e18:	619a      	str	r2, [r3, #24]
  }
}
 8011e1a:	bf00      	nop
 8011e1c:	3710      	adds	r7, #16
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
	...

08011e24 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	4613      	mov	r3, r2
 8011e30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 8011e32:	f7f3 fffd 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d107      	bne.n	8011e4c <tcp_poll+0x28>
 8011e3c:	4b0e      	ldr	r3, [pc, #56]	; (8011e78 <tcp_poll+0x54>)
 8011e3e:	f640 023d 	movw	r2, #2109	; 0x83d
 8011e42:	490e      	ldr	r1, [pc, #56]	; (8011e7c <tcp_poll+0x58>)
 8011e44:	480e      	ldr	r0, [pc, #56]	; (8011e80 <tcp_poll+0x5c>)
 8011e46:	f005 fe93 	bl	8017b70 <iprintf>
 8011e4a:	e011      	b.n	8011e70 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	7d1b      	ldrb	r3, [r3, #20]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d106      	bne.n	8011e62 <tcp_poll+0x3e>
 8011e54:	4b08      	ldr	r3, [pc, #32]	; (8011e78 <tcp_poll+0x54>)
 8011e56:	f640 023e 	movw	r2, #2110	; 0x83e
 8011e5a:	490a      	ldr	r1, [pc, #40]	; (8011e84 <tcp_poll+0x60>)
 8011e5c:	4808      	ldr	r0, [pc, #32]	; (8011e80 <tcp_poll+0x5c>)
 8011e5e:	f005 fe87 	bl	8017b70 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	68ba      	ldr	r2, [r7, #8]
 8011e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	79fa      	ldrb	r2, [r7, #7]
 8011e6e:	775a      	strb	r2, [r3, #29]
}
 8011e70:	3710      	adds	r7, #16
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	0801b95c 	.word	0x0801b95c
 8011e7c:	0801bfcc 	.word	0x0801bfcc
 8011e80:	0801b9fc 	.word	0x0801b9fc
 8011e84:	0801bfe4 	.word	0x0801bfe4

08011e88 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d107      	bne.n	8011ea6 <tcp_pcb_purge+0x1e>
 8011e96:	4b21      	ldr	r3, [pc, #132]	; (8011f1c <tcp_pcb_purge+0x94>)
 8011e98:	f640 0251 	movw	r2, #2129	; 0x851
 8011e9c:	4920      	ldr	r1, [pc, #128]	; (8011f20 <tcp_pcb_purge+0x98>)
 8011e9e:	4821      	ldr	r0, [pc, #132]	; (8011f24 <tcp_pcb_purge+0x9c>)
 8011ea0:	f005 fe66 	bl	8017b70 <iprintf>
 8011ea4:	e037      	b.n	8011f16 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	7d1b      	ldrb	r3, [r3, #20]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d033      	beq.n	8011f16 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011eb2:	2b0a      	cmp	r3, #10
 8011eb4:	d02f      	beq.n	8011f16 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	d02b      	beq.n	8011f16 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d007      	beq.n	8011ed6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fd fdde 	bl	800fa8c <pbuf_free>
      pcb->refused_data = NULL;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d002      	beq.n	8011ee4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f000 f986 	bl	80121f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7ff fcef 	bl	80118d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7ff fcea 	bl	80118d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2200      	movs	r2, #0
 8011f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	0801b95c 	.word	0x0801b95c
 8011f20:	0801c004 	.word	0x0801c004
 8011f24:	0801b9fc 	.word	0x0801b9fc

08011f28 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d106      	bne.n	8011f46 <tcp_pcb_remove+0x1e>
 8011f38:	4b3e      	ldr	r3, [pc, #248]	; (8012034 <tcp_pcb_remove+0x10c>)
 8011f3a:	f640 0283 	movw	r2, #2179	; 0x883
 8011f3e:	493e      	ldr	r1, [pc, #248]	; (8012038 <tcp_pcb_remove+0x110>)
 8011f40:	483e      	ldr	r0, [pc, #248]	; (801203c <tcp_pcb_remove+0x114>)
 8011f42:	f005 fe15 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d106      	bne.n	8011f5a <tcp_pcb_remove+0x32>
 8011f4c:	4b39      	ldr	r3, [pc, #228]	; (8012034 <tcp_pcb_remove+0x10c>)
 8011f4e:	f640 0284 	movw	r2, #2180	; 0x884
 8011f52:	493b      	ldr	r1, [pc, #236]	; (8012040 <tcp_pcb_remove+0x118>)
 8011f54:	4839      	ldr	r0, [pc, #228]	; (801203c <tcp_pcb_remove+0x114>)
 8011f56:	f005 fe0b 	bl	8017b70 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d105      	bne.n	8011f70 <tcp_pcb_remove+0x48>
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	68da      	ldr	r2, [r3, #12]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	601a      	str	r2, [r3, #0]
 8011f6e:	e013      	b.n	8011f98 <tcp_pcb_remove+0x70>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	60fb      	str	r3, [r7, #12]
 8011f76:	e00c      	b.n	8011f92 <tcp_pcb_remove+0x6a>
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	683a      	ldr	r2, [r7, #0]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d104      	bne.n	8011f8c <tcp_pcb_remove+0x64>
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	68da      	ldr	r2, [r3, #12]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	60da      	str	r2, [r3, #12]
 8011f8a:	e005      	b.n	8011f98 <tcp_pcb_remove+0x70>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	60fb      	str	r3, [r7, #12]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d1ef      	bne.n	8011f78 <tcp_pcb_remove+0x50>
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011f9e:	6838      	ldr	r0, [r7, #0]
 8011fa0:	f7ff ff72 	bl	8011e88 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	7d1b      	ldrb	r3, [r3, #20]
 8011fa8:	2b0a      	cmp	r3, #10
 8011faa:	d013      	beq.n	8011fd4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	d00f      	beq.n	8011fd4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	8b5b      	ldrh	r3, [r3, #26]
 8011fb8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d009      	beq.n	8011fd4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	8b5b      	ldrh	r3, [r3, #26]
 8011fc4:	f043 0302 	orr.w	r3, r3, #2
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011fce:	6838      	ldr	r0, [r7, #0]
 8011fd0:	f003 fbca 	bl	8015768 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	7d1b      	ldrb	r3, [r3, #20]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d020      	beq.n	801201e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d006      	beq.n	8011ff2 <tcp_pcb_remove+0xca>
 8011fe4:	4b13      	ldr	r3, [pc, #76]	; (8012034 <tcp_pcb_remove+0x10c>)
 8011fe6:	f640 0293 	movw	r2, #2195	; 0x893
 8011fea:	4916      	ldr	r1, [pc, #88]	; (8012044 <tcp_pcb_remove+0x11c>)
 8011fec:	4813      	ldr	r0, [pc, #76]	; (801203c <tcp_pcb_remove+0x114>)
 8011fee:	f005 fdbf 	bl	8017b70 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d006      	beq.n	8012008 <tcp_pcb_remove+0xe0>
 8011ffa:	4b0e      	ldr	r3, [pc, #56]	; (8012034 <tcp_pcb_remove+0x10c>)
 8011ffc:	f640 0294 	movw	r2, #2196	; 0x894
 8012000:	4911      	ldr	r1, [pc, #68]	; (8012048 <tcp_pcb_remove+0x120>)
 8012002:	480e      	ldr	r0, [pc, #56]	; (801203c <tcp_pcb_remove+0x114>)
 8012004:	f005 fdb4 	bl	8017b70 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801200c:	2b00      	cmp	r3, #0
 801200e:	d006      	beq.n	801201e <tcp_pcb_remove+0xf6>
 8012010:	4b08      	ldr	r3, [pc, #32]	; (8012034 <tcp_pcb_remove+0x10c>)
 8012012:	f640 0296 	movw	r2, #2198	; 0x896
 8012016:	490d      	ldr	r1, [pc, #52]	; (801204c <tcp_pcb_remove+0x124>)
 8012018:	4808      	ldr	r0, [pc, #32]	; (801203c <tcp_pcb_remove+0x114>)
 801201a:	f005 fda9 	bl	8017b70 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	2200      	movs	r2, #0
 8012022:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	2200      	movs	r2, #0
 8012028:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801202a:	bf00      	nop
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	0801b95c 	.word	0x0801b95c
 8012038:	0801c020 	.word	0x0801c020
 801203c:	0801b9fc 	.word	0x0801b9fc
 8012040:	0801c03c 	.word	0x0801c03c
 8012044:	0801c05c 	.word	0x0801c05c
 8012048:	0801c074 	.word	0x0801c074
 801204c:	0801c090 	.word	0x0801c090

08012050 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <tcp_next_iss+0x1c>
 801205e:	4b0a      	ldr	r3, [pc, #40]	; (8012088 <tcp_next_iss+0x38>)
 8012060:	f640 02af 	movw	r2, #2223	; 0x8af
 8012064:	4909      	ldr	r1, [pc, #36]	; (801208c <tcp_next_iss+0x3c>)
 8012066:	480a      	ldr	r0, [pc, #40]	; (8012090 <tcp_next_iss+0x40>)
 8012068:	f005 fd82 	bl	8017b70 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801206c:	4b09      	ldr	r3, [pc, #36]	; (8012094 <tcp_next_iss+0x44>)
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	4b09      	ldr	r3, [pc, #36]	; (8012098 <tcp_next_iss+0x48>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4413      	add	r3, r2
 8012076:	4a07      	ldr	r2, [pc, #28]	; (8012094 <tcp_next_iss+0x44>)
 8012078:	6013      	str	r3, [r2, #0]
  return iss;
 801207a:	4b06      	ldr	r3, [pc, #24]	; (8012094 <tcp_next_iss+0x44>)
 801207c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801207e:	4618      	mov	r0, r3
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	0801b95c 	.word	0x0801b95c
 801208c:	0801c0a8 	.word	0x0801c0a8
 8012090:	0801b9fc 	.word	0x0801b9fc
 8012094:	24000038 	.word	0x24000038
 8012098:	24010948 	.word	0x24010948

0801209c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	4603      	mov	r3, r0
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d106      	bne.n	80120be <tcp_eff_send_mss_netif+0x22>
 80120b0:	4b14      	ldr	r3, [pc, #80]	; (8012104 <tcp_eff_send_mss_netif+0x68>)
 80120b2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80120b6:	4914      	ldr	r1, [pc, #80]	; (8012108 <tcp_eff_send_mss_netif+0x6c>)
 80120b8:	4814      	ldr	r0, [pc, #80]	; (801210c <tcp_eff_send_mss_netif+0x70>)
 80120ba:	f005 fd59 	bl	8017b70 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d101      	bne.n	80120c8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80120c4:	89fb      	ldrh	r3, [r7, #14]
 80120c6:	e019      	b.n	80120fc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80120cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80120ce:	8afb      	ldrh	r3, [r7, #22]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d012      	beq.n	80120fa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80120d4:	2328      	movs	r3, #40	; 0x28
 80120d6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80120d8:	8afa      	ldrh	r2, [r7, #22]
 80120da:	8abb      	ldrh	r3, [r7, #20]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d904      	bls.n	80120ea <tcp_eff_send_mss_netif+0x4e>
 80120e0:	8afa      	ldrh	r2, [r7, #22]
 80120e2:	8abb      	ldrh	r3, [r7, #20]
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	e000      	b.n	80120ec <tcp_eff_send_mss_netif+0x50>
 80120ea:	2300      	movs	r3, #0
 80120ec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80120ee:	8a7a      	ldrh	r2, [r7, #18]
 80120f0:	89fb      	ldrh	r3, [r7, #14]
 80120f2:	4293      	cmp	r3, r2
 80120f4:	bf28      	it	cs
 80120f6:	4613      	movcs	r3, r2
 80120f8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80120fa:	89fb      	ldrh	r3, [r7, #14]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3718      	adds	r7, #24
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	0801b95c 	.word	0x0801b95c
 8012108:	0801c0c4 	.word	0x0801c0c4
 801210c:	0801b9fc 	.word	0x0801b9fc

08012110 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b084      	sub	sp, #16
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d119      	bne.n	8012158 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012124:	4b10      	ldr	r3, [pc, #64]	; (8012168 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012126:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801212a:	4910      	ldr	r1, [pc, #64]	; (801216c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801212c:	4810      	ldr	r0, [pc, #64]	; (8012170 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801212e:	f005 fd1f 	bl	8017b70 <iprintf>

  while (pcb != NULL) {
 8012132:	e011      	b.n	8012158 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	429a      	cmp	r2, r3
 801213e:	d108      	bne.n	8012152 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f7fe fcee 	bl	8010b28 <tcp_abort>
      pcb = next;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	60fb      	str	r3, [r7, #12]
 8012150:	e002      	b.n	8012158 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d1ea      	bne.n	8012134 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801215e:	bf00      	nop
 8012160:	bf00      	nop
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	0801b95c 	.word	0x0801b95c
 801216c:	0801c0ec 	.word	0x0801c0ec
 8012170:	0801b9fc 	.word	0x0801b9fc

08012174 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d02a      	beq.n	80121da <tcp_netif_ip_addr_changed+0x66>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d026      	beq.n	80121da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801218c:	4b15      	ldr	r3, [pc, #84]	; (80121e4 <tcp_netif_ip_addr_changed+0x70>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4619      	mov	r1, r3
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7ff ffbc 	bl	8012110 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012198:	4b13      	ldr	r3, [pc, #76]	; (80121e8 <tcp_netif_ip_addr_changed+0x74>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4619      	mov	r1, r3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7ff ffb6 	bl	8012110 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d017      	beq.n	80121da <tcp_netif_ip_addr_changed+0x66>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d013      	beq.n	80121da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80121b2:	4b0e      	ldr	r3, [pc, #56]	; (80121ec <tcp_netif_ip_addr_changed+0x78>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	60fb      	str	r3, [r7, #12]
 80121b8:	e00c      	b.n	80121d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d103      	bne.n	80121ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	60fb      	str	r3, [r7, #12]
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d1ef      	bne.n	80121ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80121da:	bf00      	nop
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	24010954 	.word	0x24010954
 80121e8:	2401094c 	.word	0x2401094c
 80121ec:	24010950 	.word	0x24010950

080121f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d007      	beq.n	8012210 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012204:	4618      	mov	r0, r3
 8012206:	f7ff fb65 	bl	80118d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2200      	movs	r2, #0
 801220e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012218:	b590      	push	{r4, r7, lr}
 801221a:	b08d      	sub	sp, #52	; 0x34
 801221c:	af04      	add	r7, sp, #16
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 8012222:	f7f3 fe05 	bl	8005e30 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d105      	bne.n	8012238 <tcp_input+0x20>
 801222c:	4b9b      	ldr	r3, [pc, #620]	; (801249c <tcp_input+0x284>)
 801222e:	2283      	movs	r2, #131	; 0x83
 8012230:	499b      	ldr	r1, [pc, #620]	; (80124a0 <tcp_input+0x288>)
 8012232:	489c      	ldr	r0, [pc, #624]	; (80124a4 <tcp_input+0x28c>)
 8012234:	f005 fc9c 	bl	8017b70 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	4a9a      	ldr	r2, [pc, #616]	; (80124a8 <tcp_input+0x290>)
 801223e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	895b      	ldrh	r3, [r3, #10]
 8012244:	2b13      	cmp	r3, #19
 8012246:	f240 83d1 	bls.w	80129ec <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801224a:	4b98      	ldr	r3, [pc, #608]	; (80124ac <tcp_input+0x294>)
 801224c:	695b      	ldr	r3, [r3, #20]
 801224e:	4a97      	ldr	r2, [pc, #604]	; (80124ac <tcp_input+0x294>)
 8012250:	6812      	ldr	r2, [r2, #0]
 8012252:	4611      	mov	r1, r2
 8012254:	4618      	mov	r0, r3
 8012256:	f7fb f9d9 	bl	800d60c <ip4_addr_isbroadcast_u32>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	f040 83c7 	bne.w	80129f0 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012262:	4b92      	ldr	r3, [pc, #584]	; (80124ac <tcp_input+0x294>)
 8012264:	695b      	ldr	r3, [r3, #20]
 8012266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801226a:	2be0      	cmp	r3, #224	; 0xe0
 801226c:	f000 83c0 	beq.w	80129f0 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012270:	4b8d      	ldr	r3, [pc, #564]	; (80124a8 <tcp_input+0x290>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	899b      	ldrh	r3, [r3, #12]
 8012276:	b29b      	uxth	r3, r3
 8012278:	4618      	mov	r0, r3
 801227a:	f7f9 fc4d 	bl	800bb18 <lwip_htons>
 801227e:	4603      	mov	r3, r0
 8012280:	0b1b      	lsrs	r3, r3, #12
 8012282:	b29b      	uxth	r3, r3
 8012284:	b2db      	uxtb	r3, r3
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801228a:	7cbb      	ldrb	r3, [r7, #18]
 801228c:	2b13      	cmp	r3, #19
 801228e:	f240 83b1 	bls.w	80129f4 <tcp_input+0x7dc>
 8012292:	7cbb      	ldrb	r3, [r7, #18]
 8012294:	b29a      	uxth	r2, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	891b      	ldrh	r3, [r3, #8]
 801229a:	429a      	cmp	r2, r3
 801229c:	f200 83aa 	bhi.w	80129f4 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80122a0:	7cbb      	ldrb	r3, [r7, #18]
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	3b14      	subs	r3, #20
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	4b81      	ldr	r3, [pc, #516]	; (80124b0 <tcp_input+0x298>)
 80122aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80122ac:	4b81      	ldr	r3, [pc, #516]	; (80124b4 <tcp_input+0x29c>)
 80122ae:	2200      	movs	r2, #0
 80122b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	895a      	ldrh	r2, [r3, #10]
 80122b6:	7cbb      	ldrb	r3, [r7, #18]
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d309      	bcc.n	80122d2 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80122be:	4b7c      	ldr	r3, [pc, #496]	; (80124b0 <tcp_input+0x298>)
 80122c0:	881a      	ldrh	r2, [r3, #0]
 80122c2:	4b7d      	ldr	r3, [pc, #500]	; (80124b8 <tcp_input+0x2a0>)
 80122c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80122c6:	7cbb      	ldrb	r3, [r7, #18]
 80122c8:	4619      	mov	r1, r3
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7fd fb58 	bl	800f980 <pbuf_remove_header>
 80122d0:	e04e      	b.n	8012370 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d105      	bne.n	80122e6 <tcp_input+0xce>
 80122da:	4b70      	ldr	r3, [pc, #448]	; (801249c <tcp_input+0x284>)
 80122dc:	22c2      	movs	r2, #194	; 0xc2
 80122de:	4977      	ldr	r1, [pc, #476]	; (80124bc <tcp_input+0x2a4>)
 80122e0:	4870      	ldr	r0, [pc, #448]	; (80124a4 <tcp_input+0x28c>)
 80122e2:	f005 fc45 	bl	8017b70 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80122e6:	2114      	movs	r1, #20
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7fd fb49 	bl	800f980 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	895a      	ldrh	r2, [r3, #10]
 80122f2:	4b71      	ldr	r3, [pc, #452]	; (80124b8 <tcp_input+0x2a0>)
 80122f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80122f6:	4b6e      	ldr	r3, [pc, #440]	; (80124b0 <tcp_input+0x298>)
 80122f8:	881a      	ldrh	r2, [r3, #0]
 80122fa:	4b6f      	ldr	r3, [pc, #444]	; (80124b8 <tcp_input+0x2a0>)
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012302:	4b6d      	ldr	r3, [pc, #436]	; (80124b8 <tcp_input+0x2a0>)
 8012304:	881b      	ldrh	r3, [r3, #0]
 8012306:	4619      	mov	r1, r3
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f7fd fb39 	bl	800f980 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	895b      	ldrh	r3, [r3, #10]
 8012314:	8a3a      	ldrh	r2, [r7, #16]
 8012316:	429a      	cmp	r2, r3
 8012318:	f200 836e 	bhi.w	80129f8 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	4a64      	ldr	r2, [pc, #400]	; (80124b4 <tcp_input+0x29c>)
 8012324:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	8a3a      	ldrh	r2, [r7, #16]
 801232c:	4611      	mov	r1, r2
 801232e:	4618      	mov	r0, r3
 8012330:	f7fd fb26 	bl	800f980 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	891a      	ldrh	r2, [r3, #8]
 8012338:	8a3b      	ldrh	r3, [r7, #16]
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	b29a      	uxth	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	895b      	ldrh	r3, [r3, #10]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d005      	beq.n	8012356 <tcp_input+0x13e>
 801234a:	4b54      	ldr	r3, [pc, #336]	; (801249c <tcp_input+0x284>)
 801234c:	22df      	movs	r2, #223	; 0xdf
 801234e:	495c      	ldr	r1, [pc, #368]	; (80124c0 <tcp_input+0x2a8>)
 8012350:	4854      	ldr	r0, [pc, #336]	; (80124a4 <tcp_input+0x28c>)
 8012352:	f005 fc0d 	bl	8017b70 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	891a      	ldrh	r2, [r3, #8]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	891b      	ldrh	r3, [r3, #8]
 8012360:	429a      	cmp	r2, r3
 8012362:	d005      	beq.n	8012370 <tcp_input+0x158>
 8012364:	4b4d      	ldr	r3, [pc, #308]	; (801249c <tcp_input+0x284>)
 8012366:	22e0      	movs	r2, #224	; 0xe0
 8012368:	4956      	ldr	r1, [pc, #344]	; (80124c4 <tcp_input+0x2ac>)
 801236a:	484e      	ldr	r0, [pc, #312]	; (80124a4 <tcp_input+0x28c>)
 801236c:	f005 fc00 	bl	8017b70 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012370:	4b4d      	ldr	r3, [pc, #308]	; (80124a8 <tcp_input+0x290>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	881b      	ldrh	r3, [r3, #0]
 8012376:	b29b      	uxth	r3, r3
 8012378:	4a4b      	ldr	r2, [pc, #300]	; (80124a8 <tcp_input+0x290>)
 801237a:	6814      	ldr	r4, [r2, #0]
 801237c:	4618      	mov	r0, r3
 801237e:	f7f9 fbcb 	bl	800bb18 <lwip_htons>
 8012382:	4603      	mov	r3, r0
 8012384:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012386:	4b48      	ldr	r3, [pc, #288]	; (80124a8 <tcp_input+0x290>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	885b      	ldrh	r3, [r3, #2]
 801238c:	b29b      	uxth	r3, r3
 801238e:	4a46      	ldr	r2, [pc, #280]	; (80124a8 <tcp_input+0x290>)
 8012390:	6814      	ldr	r4, [r2, #0]
 8012392:	4618      	mov	r0, r3
 8012394:	f7f9 fbc0 	bl	800bb18 <lwip_htons>
 8012398:	4603      	mov	r3, r0
 801239a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801239c:	4b42      	ldr	r3, [pc, #264]	; (80124a8 <tcp_input+0x290>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	4a41      	ldr	r2, [pc, #260]	; (80124a8 <tcp_input+0x290>)
 80123a4:	6814      	ldr	r4, [r2, #0]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7f9 fbcb 	bl	800bb42 <lwip_htonl>
 80123ac:	4603      	mov	r3, r0
 80123ae:	6063      	str	r3, [r4, #4]
 80123b0:	6863      	ldr	r3, [r4, #4]
 80123b2:	4a45      	ldr	r2, [pc, #276]	; (80124c8 <tcp_input+0x2b0>)
 80123b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80123b6:	4b3c      	ldr	r3, [pc, #240]	; (80124a8 <tcp_input+0x290>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	4a3a      	ldr	r2, [pc, #232]	; (80124a8 <tcp_input+0x290>)
 80123be:	6814      	ldr	r4, [r2, #0]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f9 fbbe 	bl	800bb42 <lwip_htonl>
 80123c6:	4603      	mov	r3, r0
 80123c8:	60a3      	str	r3, [r4, #8]
 80123ca:	68a3      	ldr	r3, [r4, #8]
 80123cc:	4a3f      	ldr	r2, [pc, #252]	; (80124cc <tcp_input+0x2b4>)
 80123ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80123d0:	4b35      	ldr	r3, [pc, #212]	; (80124a8 <tcp_input+0x290>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	89db      	ldrh	r3, [r3, #14]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4a33      	ldr	r2, [pc, #204]	; (80124a8 <tcp_input+0x290>)
 80123da:	6814      	ldr	r4, [r2, #0]
 80123dc:	4618      	mov	r0, r3
 80123de:	f7f9 fb9b 	bl	800bb18 <lwip_htons>
 80123e2:	4603      	mov	r3, r0
 80123e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80123e6:	4b30      	ldr	r3, [pc, #192]	; (80124a8 <tcp_input+0x290>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	899b      	ldrh	r3, [r3, #12]
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7f9 fb92 	bl	800bb18 <lwip_htons>
 80123f4:	4603      	mov	r3, r0
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123fc:	b2da      	uxtb	r2, r3
 80123fe:	4b34      	ldr	r3, [pc, #208]	; (80124d0 <tcp_input+0x2b8>)
 8012400:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	891a      	ldrh	r2, [r3, #8]
 8012406:	4b33      	ldr	r3, [pc, #204]	; (80124d4 <tcp_input+0x2bc>)
 8012408:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801240a:	4b31      	ldr	r3, [pc, #196]	; (80124d0 <tcp_input+0x2b8>)
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	f003 0303 	and.w	r3, r3, #3
 8012412:	2b00      	cmp	r3, #0
 8012414:	d00c      	beq.n	8012430 <tcp_input+0x218>
    tcplen++;
 8012416:	4b2f      	ldr	r3, [pc, #188]	; (80124d4 <tcp_input+0x2bc>)
 8012418:	881b      	ldrh	r3, [r3, #0]
 801241a:	3301      	adds	r3, #1
 801241c:	b29a      	uxth	r2, r3
 801241e:	4b2d      	ldr	r3, [pc, #180]	; (80124d4 <tcp_input+0x2bc>)
 8012420:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	891a      	ldrh	r2, [r3, #8]
 8012426:	4b2b      	ldr	r3, [pc, #172]	; (80124d4 <tcp_input+0x2bc>)
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	429a      	cmp	r2, r3
 801242c:	f200 82e6 	bhi.w	80129fc <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012434:	4b28      	ldr	r3, [pc, #160]	; (80124d8 <tcp_input+0x2c0>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	61fb      	str	r3, [r7, #28]
 801243a:	e09d      	b.n	8012578 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	7d1b      	ldrb	r3, [r3, #20]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d105      	bne.n	8012450 <tcp_input+0x238>
 8012444:	4b15      	ldr	r3, [pc, #84]	; (801249c <tcp_input+0x284>)
 8012446:	22fb      	movs	r2, #251	; 0xfb
 8012448:	4924      	ldr	r1, [pc, #144]	; (80124dc <tcp_input+0x2c4>)
 801244a:	4816      	ldr	r0, [pc, #88]	; (80124a4 <tcp_input+0x28c>)
 801244c:	f005 fb90 	bl	8017b70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	7d1b      	ldrb	r3, [r3, #20]
 8012454:	2b0a      	cmp	r3, #10
 8012456:	d105      	bne.n	8012464 <tcp_input+0x24c>
 8012458:	4b10      	ldr	r3, [pc, #64]	; (801249c <tcp_input+0x284>)
 801245a:	22fc      	movs	r2, #252	; 0xfc
 801245c:	4920      	ldr	r1, [pc, #128]	; (80124e0 <tcp_input+0x2c8>)
 801245e:	4811      	ldr	r0, [pc, #68]	; (80124a4 <tcp_input+0x28c>)
 8012460:	f005 fb86 	bl	8017b70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	7d1b      	ldrb	r3, [r3, #20]
 8012468:	2b01      	cmp	r3, #1
 801246a:	d105      	bne.n	8012478 <tcp_input+0x260>
 801246c:	4b0b      	ldr	r3, [pc, #44]	; (801249c <tcp_input+0x284>)
 801246e:	22fd      	movs	r2, #253	; 0xfd
 8012470:	491c      	ldr	r1, [pc, #112]	; (80124e4 <tcp_input+0x2cc>)
 8012472:	480c      	ldr	r0, [pc, #48]	; (80124a4 <tcp_input+0x28c>)
 8012474:	f005 fb7c 	bl	8017b70 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	7a1b      	ldrb	r3, [r3, #8]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d033      	beq.n	80124e8 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	7a1a      	ldrb	r2, [r3, #8]
 8012484:	4b09      	ldr	r3, [pc, #36]	; (80124ac <tcp_input+0x294>)
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801248c:	3301      	adds	r3, #1
 801248e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012490:	429a      	cmp	r2, r3
 8012492:	d029      	beq.n	80124e8 <tcp_input+0x2d0>
      prev = pcb;
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	61bb      	str	r3, [r7, #24]
      continue;
 8012498:	e06b      	b.n	8012572 <tcp_input+0x35a>
 801249a:	bf00      	nop
 801249c:	0801c120 	.word	0x0801c120
 80124a0:	0801c1b0 	.word	0x0801c1b0
 80124a4:	0801c1c8 	.word	0x0801c1c8
 80124a8:	24010970 	.word	0x24010970
 80124ac:	24009e78 	.word	0x24009e78
 80124b0:	24010974 	.word	0x24010974
 80124b4:	24010978 	.word	0x24010978
 80124b8:	24010976 	.word	0x24010976
 80124bc:	0801c1f0 	.word	0x0801c1f0
 80124c0:	0801c200 	.word	0x0801c200
 80124c4:	0801c20c 	.word	0x0801c20c
 80124c8:	24010980 	.word	0x24010980
 80124cc:	24010984 	.word	0x24010984
 80124d0:	2401098c 	.word	0x2401098c
 80124d4:	2401098a 	.word	0x2401098a
 80124d8:	24010954 	.word	0x24010954
 80124dc:	0801c22c 	.word	0x0801c22c
 80124e0:	0801c254 	.word	0x0801c254
 80124e4:	0801c280 	.word	0x0801c280
    }

    if (pcb->remote_port == tcphdr->src &&
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	8b1a      	ldrh	r2, [r3, #24]
 80124ec:	4b72      	ldr	r3, [pc, #456]	; (80126b8 <tcp_input+0x4a0>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d13a      	bne.n	801256e <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	8ada      	ldrh	r2, [r3, #22]
 80124fc:	4b6e      	ldr	r3, [pc, #440]	; (80126b8 <tcp_input+0x4a0>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	885b      	ldrh	r3, [r3, #2]
 8012502:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012504:	429a      	cmp	r2, r3
 8012506:	d132      	bne.n	801256e <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	4b6b      	ldr	r3, [pc, #428]	; (80126bc <tcp_input+0x4a4>)
 801250e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012510:	429a      	cmp	r2, r3
 8012512:	d12c      	bne.n	801256e <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	4b68      	ldr	r3, [pc, #416]	; (80126bc <tcp_input+0x4a4>)
 801251a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801251c:	429a      	cmp	r2, r3
 801251e:	d126      	bne.n	801256e <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	69fa      	ldr	r2, [r7, #28]
 8012526:	429a      	cmp	r2, r3
 8012528:	d106      	bne.n	8012538 <tcp_input+0x320>
 801252a:	4b65      	ldr	r3, [pc, #404]	; (80126c0 <tcp_input+0x4a8>)
 801252c:	f240 120d 	movw	r2, #269	; 0x10d
 8012530:	4964      	ldr	r1, [pc, #400]	; (80126c4 <tcp_input+0x4ac>)
 8012532:	4865      	ldr	r0, [pc, #404]	; (80126c8 <tcp_input+0x4b0>)
 8012534:	f005 fb1c 	bl	8017b70 <iprintf>
      if (prev != NULL) {
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00a      	beq.n	8012554 <tcp_input+0x33c>
        prev->next = pcb->next;
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	68da      	ldr	r2, [r3, #12]
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012546:	4b61      	ldr	r3, [pc, #388]	; (80126cc <tcp_input+0x4b4>)
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801254e:	4a5f      	ldr	r2, [pc, #380]	; (80126cc <tcp_input+0x4b4>)
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	69fa      	ldr	r2, [r7, #28]
 801255a:	429a      	cmp	r2, r3
 801255c:	d111      	bne.n	8012582 <tcp_input+0x36a>
 801255e:	4b58      	ldr	r3, [pc, #352]	; (80126c0 <tcp_input+0x4a8>)
 8012560:	f240 1215 	movw	r2, #277	; 0x115
 8012564:	495a      	ldr	r1, [pc, #360]	; (80126d0 <tcp_input+0x4b8>)
 8012566:	4858      	ldr	r0, [pc, #352]	; (80126c8 <tcp_input+0x4b0>)
 8012568:	f005 fb02 	bl	8017b70 <iprintf>
      break;
 801256c:	e009      	b.n	8012582 <tcp_input+0x36a>
    }
    prev = pcb;
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	61fb      	str	r3, [r7, #28]
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	2b00      	cmp	r3, #0
 801257c:	f47f af5e 	bne.w	801243c <tcp_input+0x224>
 8012580:	e000      	b.n	8012584 <tcp_input+0x36c>
      break;
 8012582:	bf00      	nop
  }

  if (pcb == NULL) {
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	2b00      	cmp	r3, #0
 8012588:	f040 80aa 	bne.w	80126e0 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801258c:	4b51      	ldr	r3, [pc, #324]	; (80126d4 <tcp_input+0x4bc>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	61fb      	str	r3, [r7, #28]
 8012592:	e03f      	b.n	8012614 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	7d1b      	ldrb	r3, [r3, #20]
 8012598:	2b0a      	cmp	r3, #10
 801259a:	d006      	beq.n	80125aa <tcp_input+0x392>
 801259c:	4b48      	ldr	r3, [pc, #288]	; (80126c0 <tcp_input+0x4a8>)
 801259e:	f240 121f 	movw	r2, #287	; 0x11f
 80125a2:	494d      	ldr	r1, [pc, #308]	; (80126d8 <tcp_input+0x4c0>)
 80125a4:	4848      	ldr	r0, [pc, #288]	; (80126c8 <tcp_input+0x4b0>)
 80125a6:	f005 fae3 	bl	8017b70 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125aa:	69fb      	ldr	r3, [r7, #28]
 80125ac:	7a1b      	ldrb	r3, [r3, #8]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d009      	beq.n	80125c6 <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80125b2:	69fb      	ldr	r3, [r7, #28]
 80125b4:	7a1a      	ldrb	r2, [r3, #8]
 80125b6:	4b41      	ldr	r3, [pc, #260]	; (80126bc <tcp_input+0x4a4>)
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125be:	3301      	adds	r3, #1
 80125c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d122      	bne.n	801260c <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80125c6:	69fb      	ldr	r3, [r7, #28]
 80125c8:	8b1a      	ldrh	r2, [r3, #24]
 80125ca:	4b3b      	ldr	r3, [pc, #236]	; (80126b8 <tcp_input+0x4a0>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	881b      	ldrh	r3, [r3, #0]
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d11b      	bne.n	801260e <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	8ada      	ldrh	r2, [r3, #22]
 80125da:	4b37      	ldr	r3, [pc, #220]	; (80126b8 <tcp_input+0x4a0>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	885b      	ldrh	r3, [r3, #2]
 80125e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d113      	bne.n	801260e <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	685a      	ldr	r2, [r3, #4]
 80125ea:	4b34      	ldr	r3, [pc, #208]	; (80126bc <tcp_input+0x4a4>)
 80125ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d10d      	bne.n	801260e <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	4b31      	ldr	r3, [pc, #196]	; (80126bc <tcp_input+0x4a4>)
 80125f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d107      	bne.n	801260e <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80125fe:	69f8      	ldr	r0, [r7, #28]
 8012600:	f000 fb56 	bl	8012cb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7fd fa41 	bl	800fa8c <pbuf_free>
        return;
 801260a:	e1fd      	b.n	8012a08 <tcp_input+0x7f0>
        continue;
 801260c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	61fb      	str	r3, [r7, #28]
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1bc      	bne.n	8012594 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801261a:	2300      	movs	r3, #0
 801261c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801261e:	4b2f      	ldr	r3, [pc, #188]	; (80126dc <tcp_input+0x4c4>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	617b      	str	r3, [r7, #20]
 8012624:	e02a      	b.n	801267c <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	7a1b      	ldrb	r3, [r3, #8]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00c      	beq.n	8012648 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	7a1a      	ldrb	r2, [r3, #8]
 8012632:	4b22      	ldr	r3, [pc, #136]	; (80126bc <tcp_input+0x4a4>)
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801263a:	3301      	adds	r3, #1
 801263c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801263e:	429a      	cmp	r2, r3
 8012640:	d002      	beq.n	8012648 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	61bb      	str	r3, [r7, #24]
        continue;
 8012646:	e016      	b.n	8012676 <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	8ada      	ldrh	r2, [r3, #22]
 801264c:	4b1a      	ldr	r3, [pc, #104]	; (80126b8 <tcp_input+0x4a0>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	885b      	ldrh	r3, [r3, #2]
 8012652:	b29b      	uxth	r3, r3
 8012654:	429a      	cmp	r2, r3
 8012656:	d10c      	bne.n	8012672 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	4b17      	ldr	r3, [pc, #92]	; (80126bc <tcp_input+0x4a4>)
 801265e:	695b      	ldr	r3, [r3, #20]
 8012660:	429a      	cmp	r2, r3
 8012662:	d00f      	beq.n	8012684 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d00d      	beq.n	8012686 <tcp_input+0x46e>
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d009      	beq.n	8012686 <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	617b      	str	r3, [r7, #20]
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1d1      	bne.n	8012626 <tcp_input+0x40e>
 8012682:	e000      	b.n	8012686 <tcp_input+0x46e>
            break;
 8012684:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d029      	beq.n	80126e0 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801268c:	69bb      	ldr	r3, [r7, #24]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d00a      	beq.n	80126a8 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	68da      	ldr	r2, [r3, #12]
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801269a:	4b10      	ldr	r3, [pc, #64]	; (80126dc <tcp_input+0x4c4>)
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80126a2:	4a0e      	ldr	r2, [pc, #56]	; (80126dc <tcp_input+0x4c4>)
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80126a8:	6978      	ldr	r0, [r7, #20]
 80126aa:	f000 fa03 	bl	8012ab4 <tcp_listen_input>
      }
      pbuf_free(p);
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7fd f9ec 	bl	800fa8c <pbuf_free>
      return;
 80126b4:	e1a8      	b.n	8012a08 <tcp_input+0x7f0>
 80126b6:	bf00      	nop
 80126b8:	24010970 	.word	0x24010970
 80126bc:	24009e78 	.word	0x24009e78
 80126c0:	0801c120 	.word	0x0801c120
 80126c4:	0801c2a8 	.word	0x0801c2a8
 80126c8:	0801c1c8 	.word	0x0801c1c8
 80126cc:	24010954 	.word	0x24010954
 80126d0:	0801c2d4 	.word	0x0801c2d4
 80126d4:	24010958 	.word	0x24010958
 80126d8:	0801c300 	.word	0x0801c300
 80126dc:	24010950 	.word	0x24010950
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 8158 	beq.w	8012998 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80126e8:	4b95      	ldr	r3, [pc, #596]	; (8012940 <tcp_input+0x728>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	891a      	ldrh	r2, [r3, #8]
 80126f2:	4b93      	ldr	r3, [pc, #588]	; (8012940 <tcp_input+0x728>)
 80126f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80126f6:	4a92      	ldr	r2, [pc, #584]	; (8012940 <tcp_input+0x728>)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80126fc:	4b91      	ldr	r3, [pc, #580]	; (8012944 <tcp_input+0x72c>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	4a8f      	ldr	r2, [pc, #572]	; (8012940 <tcp_input+0x728>)
 8012702:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012704:	4b90      	ldr	r3, [pc, #576]	; (8012948 <tcp_input+0x730>)
 8012706:	2200      	movs	r2, #0
 8012708:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801270a:	4b90      	ldr	r3, [pc, #576]	; (801294c <tcp_input+0x734>)
 801270c:	2200      	movs	r2, #0
 801270e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012710:	4b8f      	ldr	r3, [pc, #572]	; (8012950 <tcp_input+0x738>)
 8012712:	2200      	movs	r2, #0
 8012714:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012716:	4b8f      	ldr	r3, [pc, #572]	; (8012954 <tcp_input+0x73c>)
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	f003 0308 	and.w	r3, r3, #8
 801271e:	2b00      	cmp	r3, #0
 8012720:	d006      	beq.n	8012730 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	7b5b      	ldrb	r3, [r3, #13]
 8012726:	f043 0301 	orr.w	r3, r3, #1
 801272a:	b2da      	uxtb	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012734:	2b00      	cmp	r3, #0
 8012736:	d017      	beq.n	8012768 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012738:	69f8      	ldr	r0, [r7, #28]
 801273a:	f7ff f84d 	bl	80117d8 <tcp_process_refused_data>
 801273e:	4603      	mov	r3, r0
 8012740:	f113 0f0d 	cmn.w	r3, #13
 8012744:	d007      	beq.n	8012756 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00c      	beq.n	8012768 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801274e:	4b82      	ldr	r3, [pc, #520]	; (8012958 <tcp_input+0x740>)
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d008      	beq.n	8012768 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801275a:	2b00      	cmp	r3, #0
 801275c:	f040 80e4 	bne.w	8012928 <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012760:	69f8      	ldr	r0, [r7, #28]
 8012762:	f003 fe09 	bl	8016378 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012766:	e0df      	b.n	8012928 <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 8012768:	4a7c      	ldr	r2, [pc, #496]	; (801295c <tcp_input+0x744>)
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801276e:	69f8      	ldr	r0, [r7, #28]
 8012770:	f000 fb18 	bl	8012da4 <tcp_process>
 8012774:	4603      	mov	r3, r0
 8012776:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801277c:	f113 0f0d 	cmn.w	r3, #13
 8012780:	f000 80d4 	beq.w	801292c <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 8012784:	4b71      	ldr	r3, [pc, #452]	; (801294c <tcp_input+0x734>)
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	f003 0308 	and.w	r3, r3, #8
 801278c:	2b00      	cmp	r3, #0
 801278e:	d015      	beq.n	80127bc <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012796:	2b00      	cmp	r3, #0
 8012798:	d008      	beq.n	80127ac <tcp_input+0x594>
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127a0:	69fa      	ldr	r2, [r7, #28]
 80127a2:	6912      	ldr	r2, [r2, #16]
 80127a4:	f06f 010d 	mvn.w	r1, #13
 80127a8:	4610      	mov	r0, r2
 80127aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80127ac:	69f9      	ldr	r1, [r7, #28]
 80127ae:	486c      	ldr	r0, [pc, #432]	; (8012960 <tcp_input+0x748>)
 80127b0:	f7ff fbba 	bl	8011f28 <tcp_pcb_remove>
        tcp_free(pcb);
 80127b4:	69f8      	ldr	r0, [r7, #28]
 80127b6:	f7fd fe6d 	bl	8010494 <tcp_free>
 80127ba:	e0da      	b.n	8012972 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 80127bc:	2300      	movs	r3, #0
 80127be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80127c0:	4b63      	ldr	r3, [pc, #396]	; (8012950 <tcp_input+0x738>)
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d01d      	beq.n	8012804 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80127c8:	4b61      	ldr	r3, [pc, #388]	; (8012950 <tcp_input+0x738>)
 80127ca:	881b      	ldrh	r3, [r3, #0]
 80127cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00a      	beq.n	80127ee <tcp_input+0x5d6>
 80127d8:	69fb      	ldr	r3, [r7, #28]
 80127da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127de:	69fa      	ldr	r2, [r7, #28]
 80127e0:	6910      	ldr	r0, [r2, #16]
 80127e2:	89fa      	ldrh	r2, [r7, #14]
 80127e4:	69f9      	ldr	r1, [r7, #28]
 80127e6:	4798      	blx	r3
 80127e8:	4603      	mov	r3, r0
 80127ea:	74fb      	strb	r3, [r7, #19]
 80127ec:	e001      	b.n	80127f2 <tcp_input+0x5da>
 80127ee:	2300      	movs	r3, #0
 80127f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80127f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127f6:	f113 0f0d 	cmn.w	r3, #13
 80127fa:	f000 8099 	beq.w	8012930 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 80127fe:	4b54      	ldr	r3, [pc, #336]	; (8012950 <tcp_input+0x738>)
 8012800:	2200      	movs	r2, #0
 8012802:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012804:	69f8      	ldr	r0, [r7, #28]
 8012806:	f000 f915 	bl	8012a34 <tcp_input_delayed_close>
 801280a:	4603      	mov	r3, r0
 801280c:	2b00      	cmp	r3, #0
 801280e:	f040 8091 	bne.w	8012934 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012812:	4b4d      	ldr	r3, [pc, #308]	; (8012948 <tcp_input+0x730>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d041      	beq.n	801289e <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801281e:	2b00      	cmp	r3, #0
 8012820:	d006      	beq.n	8012830 <tcp_input+0x618>
 8012822:	4b50      	ldr	r3, [pc, #320]	; (8012964 <tcp_input+0x74c>)
 8012824:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012828:	494f      	ldr	r1, [pc, #316]	; (8012968 <tcp_input+0x750>)
 801282a:	4850      	ldr	r0, [pc, #320]	; (801296c <tcp_input+0x754>)
 801282c:	f005 f9a0 	bl	8017b70 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	8b5b      	ldrh	r3, [r3, #26]
 8012834:	f003 0310 	and.w	r3, r3, #16
 8012838:	2b00      	cmp	r3, #0
 801283a:	d008      	beq.n	801284e <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801283c:	4b42      	ldr	r3, [pc, #264]	; (8012948 <tcp_input+0x730>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4618      	mov	r0, r3
 8012842:	f7fd f923 	bl	800fa8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012846:	69f8      	ldr	r0, [r7, #28]
 8012848:	f7fe f96e 	bl	8010b28 <tcp_abort>
            goto aborted;
 801284c:	e091      	b.n	8012972 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012854:	2b00      	cmp	r3, #0
 8012856:	d00c      	beq.n	8012872 <tcp_input+0x65a>
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	6918      	ldr	r0, [r3, #16]
 8012862:	4b39      	ldr	r3, [pc, #228]	; (8012948 <tcp_input+0x730>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	2300      	movs	r3, #0
 8012868:	69f9      	ldr	r1, [r7, #28]
 801286a:	47a0      	blx	r4
 801286c:	4603      	mov	r3, r0
 801286e:	74fb      	strb	r3, [r7, #19]
 8012870:	e008      	b.n	8012884 <tcp_input+0x66c>
 8012872:	4b35      	ldr	r3, [pc, #212]	; (8012948 <tcp_input+0x730>)
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	2300      	movs	r3, #0
 8012878:	69f9      	ldr	r1, [r7, #28]
 801287a:	2000      	movs	r0, #0
 801287c:	f7ff f884 	bl	8011988 <tcp_recv_null>
 8012880:	4603      	mov	r3, r0
 8012882:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012888:	f113 0f0d 	cmn.w	r3, #13
 801288c:	d054      	beq.n	8012938 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801288e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d003      	beq.n	801289e <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012896:	4b2c      	ldr	r3, [pc, #176]	; (8012948 <tcp_input+0x730>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801289e:	4b2b      	ldr	r3, [pc, #172]	; (801294c <tcp_input+0x734>)
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	f003 0320 	and.w	r3, r3, #32
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d031      	beq.n	801290e <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d009      	beq.n	80128c6 <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128b6:	7b5a      	ldrb	r2, [r3, #13]
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128bc:	f042 0220 	orr.w	r2, r2, #32
 80128c0:	b2d2      	uxtb	r2, r2
 80128c2:	735a      	strb	r2, [r3, #13]
 80128c4:	e023      	b.n	801290e <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80128c6:	69fb      	ldr	r3, [r7, #28]
 80128c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128ca:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d005      	beq.n	80128de <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128d6:	3301      	adds	r3, #1
 80128d8:	b29a      	uxth	r2, r3
 80128da:	69fb      	ldr	r3, [r7, #28]
 80128dc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d00b      	beq.n	8012900 <tcp_input+0x6e8>
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	6918      	ldr	r0, [r3, #16]
 80128f2:	2300      	movs	r3, #0
 80128f4:	2200      	movs	r2, #0
 80128f6:	69f9      	ldr	r1, [r7, #28]
 80128f8:	47a0      	blx	r4
 80128fa:	4603      	mov	r3, r0
 80128fc:	74fb      	strb	r3, [r7, #19]
 80128fe:	e001      	b.n	8012904 <tcp_input+0x6ec>
 8012900:	2300      	movs	r3, #0
 8012902:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012904:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012908:	f113 0f0d 	cmn.w	r3, #13
 801290c:	d016      	beq.n	801293c <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801290e:	4b13      	ldr	r3, [pc, #76]	; (801295c <tcp_input+0x744>)
 8012910:	2200      	movs	r2, #0
 8012912:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012914:	69f8      	ldr	r0, [r7, #28]
 8012916:	f000 f88d 	bl	8012a34 <tcp_input_delayed_close>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d127      	bne.n	8012970 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012920:	69f8      	ldr	r0, [r7, #28]
 8012922:	f002 ff21 	bl	8015768 <tcp_output>
 8012926:	e024      	b.n	8012972 <tcp_input+0x75a>
        goto aborted;
 8012928:	bf00      	nop
 801292a:	e022      	b.n	8012972 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801292c:	bf00      	nop
 801292e:	e020      	b.n	8012972 <tcp_input+0x75a>
              goto aborted;
 8012930:	bf00      	nop
 8012932:	e01e      	b.n	8012972 <tcp_input+0x75a>
          goto aborted;
 8012934:	bf00      	nop
 8012936:	e01c      	b.n	8012972 <tcp_input+0x75a>
            goto aborted;
 8012938:	bf00      	nop
 801293a:	e01a      	b.n	8012972 <tcp_input+0x75a>
              goto aborted;
 801293c:	bf00      	nop
 801293e:	e018      	b.n	8012972 <tcp_input+0x75a>
 8012940:	24010960 	.word	0x24010960
 8012944:	24010970 	.word	0x24010970
 8012948:	24010990 	.word	0x24010990
 801294c:	2401098d 	.word	0x2401098d
 8012950:	24010988 	.word	0x24010988
 8012954:	2401098c 	.word	0x2401098c
 8012958:	2401098a 	.word	0x2401098a
 801295c:	24010994 	.word	0x24010994
 8012960:	24010954 	.word	0x24010954
 8012964:	0801c120 	.word	0x0801c120
 8012968:	0801c330 	.word	0x0801c330
 801296c:	0801c1c8 	.word	0x0801c1c8
          goto aborted;
 8012970:	bf00      	nop
    tcp_input_pcb = NULL;
 8012972:	4b27      	ldr	r3, [pc, #156]	; (8012a10 <tcp_input+0x7f8>)
 8012974:	2200      	movs	r2, #0
 8012976:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012978:	4b26      	ldr	r3, [pc, #152]	; (8012a14 <tcp_input+0x7fc>)
 801297a:	2200      	movs	r2, #0
 801297c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801297e:	4b26      	ldr	r3, [pc, #152]	; (8012a18 <tcp_input+0x800>)
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d03f      	beq.n	8012a06 <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 8012986:	4b24      	ldr	r3, [pc, #144]	; (8012a18 <tcp_input+0x800>)
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	4618      	mov	r0, r3
 801298c:	f7fd f87e 	bl	800fa8c <pbuf_free>
      inseg.p = NULL;
 8012990:	4b21      	ldr	r3, [pc, #132]	; (8012a18 <tcp_input+0x800>)
 8012992:	2200      	movs	r2, #0
 8012994:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012996:	e036      	b.n	8012a06 <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012998:	4b20      	ldr	r3, [pc, #128]	; (8012a1c <tcp_input+0x804>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	899b      	ldrh	r3, [r3, #12]
 801299e:	b29b      	uxth	r3, r3
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7f9 f8b9 	bl	800bb18 <lwip_htons>
 80129a6:	4603      	mov	r3, r0
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	f003 0304 	and.w	r3, r3, #4
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d118      	bne.n	80129e4 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129b2:	4b1b      	ldr	r3, [pc, #108]	; (8012a20 <tcp_input+0x808>)
 80129b4:	6819      	ldr	r1, [r3, #0]
 80129b6:	4b1b      	ldr	r3, [pc, #108]	; (8012a24 <tcp_input+0x80c>)
 80129b8:	881b      	ldrh	r3, [r3, #0]
 80129ba:	461a      	mov	r2, r3
 80129bc:	4b1a      	ldr	r3, [pc, #104]	; (8012a28 <tcp_input+0x810>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129c2:	4b16      	ldr	r3, [pc, #88]	; (8012a1c <tcp_input+0x804>)
 80129c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129c6:	885b      	ldrh	r3, [r3, #2]
 80129c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129ca:	4a14      	ldr	r2, [pc, #80]	; (8012a1c <tcp_input+0x804>)
 80129cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ce:	8812      	ldrh	r2, [r2, #0]
 80129d0:	b292      	uxth	r2, r2
 80129d2:	9202      	str	r2, [sp, #8]
 80129d4:	9301      	str	r3, [sp, #4]
 80129d6:	4b15      	ldr	r3, [pc, #84]	; (8012a2c <tcp_input+0x814>)
 80129d8:	9300      	str	r3, [sp, #0]
 80129da:	4b15      	ldr	r3, [pc, #84]	; (8012a30 <tcp_input+0x818>)
 80129dc:	4602      	mov	r2, r0
 80129de:	2000      	movs	r0, #0
 80129e0:	f003 fc78 	bl	80162d4 <tcp_rst>
    pbuf_free(p);
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f7fd f851 	bl	800fa8c <pbuf_free>
  return;
 80129ea:	e00c      	b.n	8012a06 <tcp_input+0x7ee>
    goto dropped;
 80129ec:	bf00      	nop
 80129ee:	e006      	b.n	80129fe <tcp_input+0x7e6>
    goto dropped;
 80129f0:	bf00      	nop
 80129f2:	e004      	b.n	80129fe <tcp_input+0x7e6>
    goto dropped;
 80129f4:	bf00      	nop
 80129f6:	e002      	b.n	80129fe <tcp_input+0x7e6>
      goto dropped;
 80129f8:	bf00      	nop
 80129fa:	e000      	b.n	80129fe <tcp_input+0x7e6>
      goto dropped;
 80129fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7fd f844 	bl	800fa8c <pbuf_free>
 8012a04:	e000      	b.n	8012a08 <tcp_input+0x7f0>
  return;
 8012a06:	bf00      	nop
}
 8012a08:	3724      	adds	r7, #36	; 0x24
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd90      	pop	{r4, r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	24010994 	.word	0x24010994
 8012a14:	24010990 	.word	0x24010990
 8012a18:	24010960 	.word	0x24010960
 8012a1c:	24010970 	.word	0x24010970
 8012a20:	24010984 	.word	0x24010984
 8012a24:	2401098a 	.word	0x2401098a
 8012a28:	24010980 	.word	0x24010980
 8012a2c:	24009e88 	.word	0x24009e88
 8012a30:	24009e8c 	.word	0x24009e8c

08012a34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d106      	bne.n	8012a50 <tcp_input_delayed_close+0x1c>
 8012a42:	4b17      	ldr	r3, [pc, #92]	; (8012aa0 <tcp_input_delayed_close+0x6c>)
 8012a44:	f240 225a 	movw	r2, #602	; 0x25a
 8012a48:	4916      	ldr	r1, [pc, #88]	; (8012aa4 <tcp_input_delayed_close+0x70>)
 8012a4a:	4817      	ldr	r0, [pc, #92]	; (8012aa8 <tcp_input_delayed_close+0x74>)
 8012a4c:	f005 f890 	bl	8017b70 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012a50:	4b16      	ldr	r3, [pc, #88]	; (8012aac <tcp_input_delayed_close+0x78>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	f003 0310 	and.w	r3, r3, #16
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d01c      	beq.n	8012a96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8b5b      	ldrh	r3, [r3, #26]
 8012a60:	f003 0310 	and.w	r3, r3, #16
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10d      	bne.n	8012a84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d008      	beq.n	8012a84 <tcp_input_delayed_close+0x50>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	6912      	ldr	r2, [r2, #16]
 8012a7c:	f06f 010e 	mvn.w	r1, #14
 8012a80:	4610      	mov	r0, r2
 8012a82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012a84:	6879      	ldr	r1, [r7, #4]
 8012a86:	480a      	ldr	r0, [pc, #40]	; (8012ab0 <tcp_input_delayed_close+0x7c>)
 8012a88:	f7ff fa4e 	bl	8011f28 <tcp_pcb_remove>
    tcp_free(pcb);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f7fd fd01 	bl	8010494 <tcp_free>
    return 1;
 8012a92:	2301      	movs	r3, #1
 8012a94:	e000      	b.n	8012a98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012a96:	2300      	movs	r3, #0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	0801c120 	.word	0x0801c120
 8012aa4:	0801c34c 	.word	0x0801c34c
 8012aa8:	0801c1c8 	.word	0x0801c1c8
 8012aac:	2401098d 	.word	0x2401098d
 8012ab0:	24010954 	.word	0x24010954

08012ab4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012ab4:	b590      	push	{r4, r7, lr}
 8012ab6:	b08b      	sub	sp, #44	; 0x2c
 8012ab8:	af04      	add	r7, sp, #16
 8012aba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012abc:	4b6f      	ldr	r3, [pc, #444]	; (8012c7c <tcp_listen_input+0x1c8>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	f003 0304 	and.w	r3, r3, #4
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	f040 80d2 	bne.w	8012c6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d106      	bne.n	8012ade <tcp_listen_input+0x2a>
 8012ad0:	4b6b      	ldr	r3, [pc, #428]	; (8012c80 <tcp_listen_input+0x1cc>)
 8012ad2:	f240 2281 	movw	r2, #641	; 0x281
 8012ad6:	496b      	ldr	r1, [pc, #428]	; (8012c84 <tcp_listen_input+0x1d0>)
 8012ad8:	486b      	ldr	r0, [pc, #428]	; (8012c88 <tcp_listen_input+0x1d4>)
 8012ada:	f005 f849 	bl	8017b70 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012ade:	4b67      	ldr	r3, [pc, #412]	; (8012c7c <tcp_listen_input+0x1c8>)
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	f003 0310 	and.w	r3, r3, #16
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d019      	beq.n	8012b1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012aea:	4b68      	ldr	r3, [pc, #416]	; (8012c8c <tcp_listen_input+0x1d8>)
 8012aec:	6819      	ldr	r1, [r3, #0]
 8012aee:	4b68      	ldr	r3, [pc, #416]	; (8012c90 <tcp_listen_input+0x1dc>)
 8012af0:	881b      	ldrh	r3, [r3, #0]
 8012af2:	461a      	mov	r2, r3
 8012af4:	4b67      	ldr	r3, [pc, #412]	; (8012c94 <tcp_listen_input+0x1e0>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012afa:	4b67      	ldr	r3, [pc, #412]	; (8012c98 <tcp_listen_input+0x1e4>)
 8012afc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012afe:	885b      	ldrh	r3, [r3, #2]
 8012b00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b02:	4a65      	ldr	r2, [pc, #404]	; (8012c98 <tcp_listen_input+0x1e4>)
 8012b04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b06:	8812      	ldrh	r2, [r2, #0]
 8012b08:	b292      	uxth	r2, r2
 8012b0a:	9202      	str	r2, [sp, #8]
 8012b0c:	9301      	str	r3, [sp, #4]
 8012b0e:	4b63      	ldr	r3, [pc, #396]	; (8012c9c <tcp_listen_input+0x1e8>)
 8012b10:	9300      	str	r3, [sp, #0]
 8012b12:	4b63      	ldr	r3, [pc, #396]	; (8012ca0 <tcp_listen_input+0x1ec>)
 8012b14:	4602      	mov	r2, r0
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f003 fbdc 	bl	80162d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012b1c:	e0a9      	b.n	8012c72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012b1e:	4b57      	ldr	r3, [pc, #348]	; (8012c7c <tcp_listen_input+0x1c8>)
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	f003 0302 	and.w	r3, r3, #2
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f000 80a3 	beq.w	8012c72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	7d5b      	ldrb	r3, [r3, #21]
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7ff f84d 	bl	8011bd0 <tcp_alloc>
 8012b36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d111      	bne.n	8012b62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	699b      	ldr	r3, [r3, #24]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d00a      	beq.n	8012b5c <tcp_listen_input+0xa8>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	699b      	ldr	r3, [r3, #24]
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	6910      	ldr	r0, [r2, #16]
 8012b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b52:	2100      	movs	r1, #0
 8012b54:	4798      	blx	r3
 8012b56:	4603      	mov	r3, r0
 8012b58:	73bb      	strb	r3, [r7, #14]
      return;
 8012b5a:	e08b      	b.n	8012c74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012b5c:	23f0      	movs	r3, #240	; 0xf0
 8012b5e:	73bb      	strb	r3, [r7, #14]
      return;
 8012b60:	e088      	b.n	8012c74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012b62:	4b50      	ldr	r3, [pc, #320]	; (8012ca4 <tcp_listen_input+0x1f0>)
 8012b64:	695a      	ldr	r2, [r3, #20]
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012b6a:	4b4e      	ldr	r3, [pc, #312]	; (8012ca4 <tcp_listen_input+0x1f0>)
 8012b6c:	691a      	ldr	r2, [r3, #16]
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	8ada      	ldrh	r2, [r3, #22]
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012b7a:	4b47      	ldr	r3, [pc, #284]	; (8012c98 <tcp_listen_input+0x1e4>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	881b      	ldrh	r3, [r3, #0]
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	2203      	movs	r2, #3
 8012b8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012b8c:	4b41      	ldr	r3, [pc, #260]	; (8012c94 <tcp_listen_input+0x1e0>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	1c5a      	adds	r2, r3, #1
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012b9e:	6978      	ldr	r0, [r7, #20]
 8012ba0:	f7ff fa56 	bl	8012050 <tcp_next_iss>
 8012ba4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	693a      	ldr	r2, [r7, #16]
 8012baa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	693a      	ldr	r2, [r7, #16]
 8012bb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	693a      	ldr	r2, [r7, #16]
 8012bb6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	693a      	ldr	r2, [r7, #16]
 8012bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012bbe:	4b35      	ldr	r3, [pc, #212]	; (8012c94 <tcp_listen_input+0x1e0>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	1e5a      	subs	r2, r3, #1
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	691a      	ldr	r2, [r3, #16]
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	7a5b      	ldrb	r3, [r3, #9]
 8012bda:	f003 030c 	and.w	r3, r3, #12
 8012bde:	b2da      	uxtb	r2, r3
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	7a1a      	ldrb	r2, [r3, #8]
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012bec:	4b2e      	ldr	r3, [pc, #184]	; (8012ca8 <tcp_listen_input+0x1f4>)
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	60da      	str	r2, [r3, #12]
 8012bf4:	4a2c      	ldr	r2, [pc, #176]	; (8012ca8 <tcp_listen_input+0x1f4>)
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	6013      	str	r3, [r2, #0]
 8012bfa:	f003 fedd 	bl	80169b8 <tcp_timer_needed>
 8012bfe:	4b2b      	ldr	r3, [pc, #172]	; (8012cac <tcp_listen_input+0x1f8>)
 8012c00:	2201      	movs	r2, #1
 8012c02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012c04:	6978      	ldr	r0, [r7, #20]
 8012c06:	f001 fd8f 	bl	8014728 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012c0a:	4b23      	ldr	r3, [pc, #140]	; (8012c98 <tcp_listen_input+0x1e4>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	89db      	ldrh	r3, [r3, #14]
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	3304      	adds	r3, #4
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fa fa53 	bl	800d0d8 <ip4_route>
 8012c32:	4601      	mov	r1, r0
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	3304      	adds	r3, #4
 8012c38:	461a      	mov	r2, r3
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f7ff fa2e 	bl	801209c <tcp_eff_send_mss_netif>
 8012c40:	4603      	mov	r3, r0
 8012c42:	461a      	mov	r2, r3
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012c48:	2112      	movs	r1, #18
 8012c4a:	6978      	ldr	r0, [r7, #20]
 8012c4c:	f002 fc9e 	bl	801558c <tcp_enqueue_flags>
 8012c50:	4603      	mov	r3, r0
 8012c52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d004      	beq.n	8012c66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012c5c:	2100      	movs	r1, #0
 8012c5e:	6978      	ldr	r0, [r7, #20]
 8012c60:	f7fd fea2 	bl	80109a8 <tcp_abandon>
      return;
 8012c64:	e006      	b.n	8012c74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012c66:	6978      	ldr	r0, [r7, #20]
 8012c68:	f002 fd7e 	bl	8015768 <tcp_output>
  return;
 8012c6c:	e001      	b.n	8012c72 <tcp_listen_input+0x1be>
    return;
 8012c6e:	bf00      	nop
 8012c70:	e000      	b.n	8012c74 <tcp_listen_input+0x1c0>
  return;
 8012c72:	bf00      	nop
}
 8012c74:	371c      	adds	r7, #28
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd90      	pop	{r4, r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	2401098c 	.word	0x2401098c
 8012c80:	0801c120 	.word	0x0801c120
 8012c84:	0801c374 	.word	0x0801c374
 8012c88:	0801c1c8 	.word	0x0801c1c8
 8012c8c:	24010984 	.word	0x24010984
 8012c90:	2401098a 	.word	0x2401098a
 8012c94:	24010980 	.word	0x24010980
 8012c98:	24010970 	.word	0x24010970
 8012c9c:	24009e88 	.word	0x24009e88
 8012ca0:	24009e8c 	.word	0x24009e8c
 8012ca4:	24009e78 	.word	0x24009e78
 8012ca8:	24010954 	.word	0x24010954
 8012cac:	2401095c 	.word	0x2401095c

08012cb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af04      	add	r7, sp, #16
 8012cb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012cb8:	4b2f      	ldr	r3, [pc, #188]	; (8012d78 <tcp_timewait_input+0xc8>)
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	f003 0304 	and.w	r3, r3, #4
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d153      	bne.n	8012d6c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <tcp_timewait_input+0x28>
 8012cca:	4b2c      	ldr	r3, [pc, #176]	; (8012d7c <tcp_timewait_input+0xcc>)
 8012ccc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012cd0:	492b      	ldr	r1, [pc, #172]	; (8012d80 <tcp_timewait_input+0xd0>)
 8012cd2:	482c      	ldr	r0, [pc, #176]	; (8012d84 <tcp_timewait_input+0xd4>)
 8012cd4:	f004 ff4c 	bl	8017b70 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012cd8:	4b27      	ldr	r3, [pc, #156]	; (8012d78 <tcp_timewait_input+0xc8>)
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	f003 0302 	and.w	r3, r3, #2
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d02a      	beq.n	8012d3a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012ce4:	4b28      	ldr	r3, [pc, #160]	; (8012d88 <tcp_timewait_input+0xd8>)
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	db2d      	blt.n	8012d4e <tcp_timewait_input+0x9e>
 8012cf2:	4b25      	ldr	r3, [pc, #148]	; (8012d88 <tcp_timewait_input+0xd8>)
 8012cf4:	681a      	ldr	r2, [r3, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cfe:	440b      	add	r3, r1
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	dc23      	bgt.n	8012d4e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d06:	4b21      	ldr	r3, [pc, #132]	; (8012d8c <tcp_timewait_input+0xdc>)
 8012d08:	6819      	ldr	r1, [r3, #0]
 8012d0a:	4b21      	ldr	r3, [pc, #132]	; (8012d90 <tcp_timewait_input+0xe0>)
 8012d0c:	881b      	ldrh	r3, [r3, #0]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	4b1d      	ldr	r3, [pc, #116]	; (8012d88 <tcp_timewait_input+0xd8>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d16:	4b1f      	ldr	r3, [pc, #124]	; (8012d94 <tcp_timewait_input+0xe4>)
 8012d18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d1a:	885b      	ldrh	r3, [r3, #2]
 8012d1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d1e:	4a1d      	ldr	r2, [pc, #116]	; (8012d94 <tcp_timewait_input+0xe4>)
 8012d20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d22:	8812      	ldrh	r2, [r2, #0]
 8012d24:	b292      	uxth	r2, r2
 8012d26:	9202      	str	r2, [sp, #8]
 8012d28:	9301      	str	r3, [sp, #4]
 8012d2a:	4b1b      	ldr	r3, [pc, #108]	; (8012d98 <tcp_timewait_input+0xe8>)
 8012d2c:	9300      	str	r3, [sp, #0]
 8012d2e:	4b1b      	ldr	r3, [pc, #108]	; (8012d9c <tcp_timewait_input+0xec>)
 8012d30:	4602      	mov	r2, r0
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f003 face 	bl	80162d4 <tcp_rst>
      return;
 8012d38:	e01b      	b.n	8012d72 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012d3a:	4b0f      	ldr	r3, [pc, #60]	; (8012d78 <tcp_timewait_input+0xc8>)
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	f003 0301 	and.w	r3, r3, #1
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d003      	beq.n	8012d4e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012d46:	4b16      	ldr	r3, [pc, #88]	; (8012da0 <tcp_timewait_input+0xf0>)
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012d4e:	4b10      	ldr	r3, [pc, #64]	; (8012d90 <tcp_timewait_input+0xe0>)
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00c      	beq.n	8012d70 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	8b5b      	ldrh	r3, [r3, #26]
 8012d5a:	f043 0302 	orr.w	r3, r3, #2
 8012d5e:	b29a      	uxth	r2, r3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f002 fcff 	bl	8015768 <tcp_output>
  }
  return;
 8012d6a:	e001      	b.n	8012d70 <tcp_timewait_input+0xc0>
    return;
 8012d6c:	bf00      	nop
 8012d6e:	e000      	b.n	8012d72 <tcp_timewait_input+0xc2>
  return;
 8012d70:	bf00      	nop
}
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	2401098c 	.word	0x2401098c
 8012d7c:	0801c120 	.word	0x0801c120
 8012d80:	0801c394 	.word	0x0801c394
 8012d84:	0801c1c8 	.word	0x0801c1c8
 8012d88:	24010980 	.word	0x24010980
 8012d8c:	24010984 	.word	0x24010984
 8012d90:	2401098a 	.word	0x2401098a
 8012d94:	24010970 	.word	0x24010970
 8012d98:	24009e88 	.word	0x24009e88
 8012d9c:	24009e8c 	.word	0x24009e8c
 8012da0:	24010948 	.word	0x24010948

08012da4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012da4:	b590      	push	{r4, r7, lr}
 8012da6:	b08d      	sub	sp, #52	; 0x34
 8012da8:	af04      	add	r7, sp, #16
 8012daa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012dac:	2300      	movs	r3, #0
 8012dae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012db0:	2300      	movs	r3, #0
 8012db2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d106      	bne.n	8012dc8 <tcp_process+0x24>
 8012dba:	4b9d      	ldr	r3, [pc, #628]	; (8013030 <tcp_process+0x28c>)
 8012dbc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012dc0:	499c      	ldr	r1, [pc, #624]	; (8013034 <tcp_process+0x290>)
 8012dc2:	489d      	ldr	r0, [pc, #628]	; (8013038 <tcp_process+0x294>)
 8012dc4:	f004 fed4 	bl	8017b70 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012dc8:	4b9c      	ldr	r3, [pc, #624]	; (801303c <tcp_process+0x298>)
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	f003 0304 	and.w	r3, r3, #4
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d04e      	beq.n	8012e72 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	7d1b      	ldrb	r3, [r3, #20]
 8012dd8:	2b02      	cmp	r3, #2
 8012dda:	d108      	bne.n	8012dee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012de0:	4b97      	ldr	r3, [pc, #604]	; (8013040 <tcp_process+0x29c>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d123      	bne.n	8012e30 <tcp_process+0x8c>
        acceptable = 1;
 8012de8:	2301      	movs	r3, #1
 8012dea:	76fb      	strb	r3, [r7, #27]
 8012dec:	e020      	b.n	8012e30 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012df2:	4b94      	ldr	r3, [pc, #592]	; (8013044 <tcp_process+0x2a0>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d102      	bne.n	8012e00 <tcp_process+0x5c>
        acceptable = 1;
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	76fb      	strb	r3, [r7, #27]
 8012dfe:	e017      	b.n	8012e30 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e00:	4b90      	ldr	r3, [pc, #576]	; (8013044 <tcp_process+0x2a0>)
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	db10      	blt.n	8012e30 <tcp_process+0x8c>
 8012e0e:	4b8d      	ldr	r3, [pc, #564]	; (8013044 <tcp_process+0x2a0>)
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e16:	6879      	ldr	r1, [r7, #4]
 8012e18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e1a:	440b      	add	r3, r1
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	dc06      	bgt.n	8012e30 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	8b5b      	ldrh	r3, [r3, #26]
 8012e26:	f043 0302 	orr.w	r3, r3, #2
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012e30:	7efb      	ldrb	r3, [r7, #27]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d01b      	beq.n	8012e6e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	7d1b      	ldrb	r3, [r3, #20]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d106      	bne.n	8012e4c <tcp_process+0xa8>
 8012e3e:	4b7c      	ldr	r3, [pc, #496]	; (8013030 <tcp_process+0x28c>)
 8012e40:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012e44:	4980      	ldr	r1, [pc, #512]	; (8013048 <tcp_process+0x2a4>)
 8012e46:	487c      	ldr	r0, [pc, #496]	; (8013038 <tcp_process+0x294>)
 8012e48:	f004 fe92 	bl	8017b70 <iprintf>
      recv_flags |= TF_RESET;
 8012e4c:	4b7f      	ldr	r3, [pc, #508]	; (801304c <tcp_process+0x2a8>)
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	f043 0308 	orr.w	r3, r3, #8
 8012e54:	b2da      	uxtb	r2, r3
 8012e56:	4b7d      	ldr	r3, [pc, #500]	; (801304c <tcp_process+0x2a8>)
 8012e58:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	8b5b      	ldrh	r3, [r3, #26]
 8012e5e:	f023 0301 	bic.w	r3, r3, #1
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012e68:	f06f 030d 	mvn.w	r3, #13
 8012e6c:	e37a      	b.n	8013564 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e378      	b.n	8013564 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012e72:	4b72      	ldr	r3, [pc, #456]	; (801303c <tcp_process+0x298>)
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	f003 0302 	and.w	r3, r3, #2
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d010      	beq.n	8012ea0 <tcp_process+0xfc>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	7d1b      	ldrb	r3, [r3, #20]
 8012e82:	2b02      	cmp	r3, #2
 8012e84:	d00c      	beq.n	8012ea0 <tcp_process+0xfc>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	7d1b      	ldrb	r3, [r3, #20]
 8012e8a:	2b03      	cmp	r3, #3
 8012e8c:	d008      	beq.n	8012ea0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	8b5b      	ldrh	r3, [r3, #26]
 8012e92:	f043 0302 	orr.w	r3, r3, #2
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	e361      	b.n	8013564 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	8b5b      	ldrh	r3, [r3, #26]
 8012ea4:	f003 0310 	and.w	r3, r3, #16
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d103      	bne.n	8012eb4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012eac:	4b68      	ldr	r3, [pc, #416]	; (8013050 <tcp_process+0x2ac>)
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f001 fc2f 	bl	8014728 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	7d1b      	ldrb	r3, [r3, #20]
 8012ece:	3b02      	subs	r3, #2
 8012ed0:	2b07      	cmp	r3, #7
 8012ed2:	f200 8337 	bhi.w	8013544 <tcp_process+0x7a0>
 8012ed6:	a201      	add	r2, pc, #4	; (adr r2, 8012edc <tcp_process+0x138>)
 8012ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012edc:	08012efd 	.word	0x08012efd
 8012ee0:	0801312d 	.word	0x0801312d
 8012ee4:	080132a5 	.word	0x080132a5
 8012ee8:	080132cf 	.word	0x080132cf
 8012eec:	080133f3 	.word	0x080133f3
 8012ef0:	080132a5 	.word	0x080132a5
 8012ef4:	0801347f 	.word	0x0801347f
 8012ef8:	0801350f 	.word	0x0801350f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012efc:	4b4f      	ldr	r3, [pc, #316]	; (801303c <tcp_process+0x298>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	f003 0310 	and.w	r3, r3, #16
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 80e4 	beq.w	80130d2 <tcp_process+0x32e>
 8012f0a:	4b4c      	ldr	r3, [pc, #304]	; (801303c <tcp_process+0x298>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	f003 0302 	and.w	r3, r3, #2
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f000 80dd 	beq.w	80130d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f1c:	1c5a      	adds	r2, r3, #1
 8012f1e:	4b48      	ldr	r3, [pc, #288]	; (8013040 <tcp_process+0x29c>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	f040 80d5 	bne.w	80130d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012f28:	4b46      	ldr	r3, [pc, #280]	; (8013044 <tcp_process+0x2a0>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	1c5a      	adds	r2, r3, #1
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012f3a:	4b41      	ldr	r3, [pc, #260]	; (8013040 <tcp_process+0x29c>)
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012f42:	4b44      	ldr	r3, [pc, #272]	; (8013054 <tcp_process+0x2b0>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	89db      	ldrh	r3, [r3, #14]
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012f5c:	4b39      	ldr	r3, [pc, #228]	; (8013044 <tcp_process+0x2a0>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	1e5a      	subs	r2, r3, #1
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2204      	movs	r2, #4
 8012f6a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	3304      	adds	r3, #4
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7fa f8af 	bl	800d0d8 <ip4_route>
 8012f7a:	4601      	mov	r1, r0
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	3304      	adds	r3, #4
 8012f80:	461a      	mov	r2, r3
 8012f82:	4620      	mov	r0, r4
 8012f84:	f7ff f88a 	bl	801209c <tcp_eff_send_mss_netif>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f94:	009a      	lsls	r2, r3, #2
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012fa0:	428b      	cmp	r3, r1
 8012fa2:	bf38      	it	cc
 8012fa4:	460b      	movcc	r3, r1
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d204      	bcs.n	8012fb4 <tcp_process+0x210>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	e00d      	b.n	8012fd0 <tcp_process+0x22c>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	f241 121c 	movw	r2, #4380	; 0x111c
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d904      	bls.n	8012fcc <tcp_process+0x228>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fc6:	005b      	lsls	r3, r3, #1
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	e001      	b.n	8012fd0 <tcp_process+0x22c>
 8012fcc:	f241 131c 	movw	r3, #4380	; 0x111c
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d106      	bne.n	8012fee <tcp_process+0x24a>
 8012fe0:	4b13      	ldr	r3, [pc, #76]	; (8013030 <tcp_process+0x28c>)
 8012fe2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012fe6:	491c      	ldr	r1, [pc, #112]	; (8013058 <tcp_process+0x2b4>)
 8012fe8:	4813      	ldr	r0, [pc, #76]	; (8013038 <tcp_process+0x294>)
 8012fea:	f004 fdc1 	bl	8017b70 <iprintf>
        --pcb->snd_queuelen;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013002:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d12a      	bne.n	8013060 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801300e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <tcp_process+0x280>
 8013016:	4b06      	ldr	r3, [pc, #24]	; (8013030 <tcp_process+0x28c>)
 8013018:	f44f 725d 	mov.w	r2, #884	; 0x374
 801301c:	490f      	ldr	r1, [pc, #60]	; (801305c <tcp_process+0x2b8>)
 801301e:	4806      	ldr	r0, [pc, #24]	; (8013038 <tcp_process+0x294>)
 8013020:	f004 fda6 	bl	8017b70 <iprintf>
          pcb->unsent = rseg->next;
 8013024:	69fb      	ldr	r3, [r7, #28]
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	66da      	str	r2, [r3, #108]	; 0x6c
 801302c:	e01c      	b.n	8013068 <tcp_process+0x2c4>
 801302e:	bf00      	nop
 8013030:	0801c120 	.word	0x0801c120
 8013034:	0801c3b4 	.word	0x0801c3b4
 8013038:	0801c1c8 	.word	0x0801c1c8
 801303c:	2401098c 	.word	0x2401098c
 8013040:	24010984 	.word	0x24010984
 8013044:	24010980 	.word	0x24010980
 8013048:	0801c3d0 	.word	0x0801c3d0
 801304c:	2401098d 	.word	0x2401098d
 8013050:	24010948 	.word	0x24010948
 8013054:	24010970 	.word	0x24010970
 8013058:	0801c3f0 	.word	0x0801c3f0
 801305c:	0801c408 	.word	0x0801c408
        } else {
          pcb->unacked = rseg->next;
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	681a      	ldr	r2, [r3, #0]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013068:	69f8      	ldr	r0, [r7, #28]
 801306a:	f7fe fc48 	bl	80118fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013072:	2b00      	cmp	r3, #0
 8013074:	d104      	bne.n	8013080 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801307c:	861a      	strh	r2, [r3, #48]	; 0x30
 801307e:	e006      	b.n	801308e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	2200      	movs	r2, #0
 801308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013094:	2b00      	cmp	r3, #0
 8013096:	d00a      	beq.n	80130ae <tcp_process+0x30a>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	6910      	ldr	r0, [r2, #16]
 80130a2:	2200      	movs	r2, #0
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	4798      	blx	r3
 80130a8:	4603      	mov	r3, r0
 80130aa:	76bb      	strb	r3, [r7, #26]
 80130ac:	e001      	b.n	80130b2 <tcp_process+0x30e>
 80130ae:	2300      	movs	r3, #0
 80130b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80130b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80130b6:	f113 0f0d 	cmn.w	r3, #13
 80130ba:	d102      	bne.n	80130c2 <tcp_process+0x31e>
          return ERR_ABRT;
 80130bc:	f06f 030c 	mvn.w	r3, #12
 80130c0:	e250      	b.n	8013564 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	8b5b      	ldrh	r3, [r3, #26]
 80130c6:	f043 0302 	orr.w	r3, r3, #2
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80130d0:	e23a      	b.n	8013548 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80130d2:	4b98      	ldr	r3, [pc, #608]	; (8013334 <tcp_process+0x590>)
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	f003 0310 	and.w	r3, r3, #16
 80130da:	2b00      	cmp	r3, #0
 80130dc:	f000 8234 	beq.w	8013548 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130e0:	4b95      	ldr	r3, [pc, #596]	; (8013338 <tcp_process+0x594>)
 80130e2:	6819      	ldr	r1, [r3, #0]
 80130e4:	4b95      	ldr	r3, [pc, #596]	; (801333c <tcp_process+0x598>)
 80130e6:	881b      	ldrh	r3, [r3, #0]
 80130e8:	461a      	mov	r2, r3
 80130ea:	4b95      	ldr	r3, [pc, #596]	; (8013340 <tcp_process+0x59c>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130f0:	4b94      	ldr	r3, [pc, #592]	; (8013344 <tcp_process+0x5a0>)
 80130f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130f4:	885b      	ldrh	r3, [r3, #2]
 80130f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80130f8:	4a92      	ldr	r2, [pc, #584]	; (8013344 <tcp_process+0x5a0>)
 80130fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130fc:	8812      	ldrh	r2, [r2, #0]
 80130fe:	b292      	uxth	r2, r2
 8013100:	9202      	str	r2, [sp, #8]
 8013102:	9301      	str	r3, [sp, #4]
 8013104:	4b90      	ldr	r3, [pc, #576]	; (8013348 <tcp_process+0x5a4>)
 8013106:	9300      	str	r3, [sp, #0]
 8013108:	4b90      	ldr	r3, [pc, #576]	; (801334c <tcp_process+0x5a8>)
 801310a:	4602      	mov	r2, r0
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f003 f8e1 	bl	80162d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013118:	2b05      	cmp	r3, #5
 801311a:	f200 8215 	bhi.w	8013548 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2200      	movs	r2, #0
 8013122:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f002 feab 	bl	8015e80 <tcp_rexmit_rto>
      break;
 801312a:	e20d      	b.n	8013548 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801312c:	4b81      	ldr	r3, [pc, #516]	; (8013334 <tcp_process+0x590>)
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	f003 0310 	and.w	r3, r3, #16
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 80a1 	beq.w	801327c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801313a:	4b7f      	ldr	r3, [pc, #508]	; (8013338 <tcp_process+0x594>)
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013142:	1ad3      	subs	r3, r2, r3
 8013144:	3b01      	subs	r3, #1
 8013146:	2b00      	cmp	r3, #0
 8013148:	db7e      	blt.n	8013248 <tcp_process+0x4a4>
 801314a:	4b7b      	ldr	r3, [pc, #492]	; (8013338 <tcp_process+0x594>)
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	2b00      	cmp	r3, #0
 8013156:	dc77      	bgt.n	8013248 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2204      	movs	r2, #4
 801315c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013162:	2b00      	cmp	r3, #0
 8013164:	d102      	bne.n	801316c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013166:	23fa      	movs	r3, #250	; 0xfa
 8013168:	76bb      	strb	r3, [r7, #26]
 801316a:	e01d      	b.n	80131a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013170:	699b      	ldr	r3, [r3, #24]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <tcp_process+0x3e0>
 8013176:	4b76      	ldr	r3, [pc, #472]	; (8013350 <tcp_process+0x5ac>)
 8013178:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801317c:	4975      	ldr	r1, [pc, #468]	; (8013354 <tcp_process+0x5b0>)
 801317e:	4876      	ldr	r0, [pc, #472]	; (8013358 <tcp_process+0x5b4>)
 8013180:	f004 fcf6 	bl	8017b70 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013188:	699b      	ldr	r3, [r3, #24]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00a      	beq.n	80131a4 <tcp_process+0x400>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013192:	699b      	ldr	r3, [r3, #24]
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	6910      	ldr	r0, [r2, #16]
 8013198:	2200      	movs	r2, #0
 801319a:	6879      	ldr	r1, [r7, #4]
 801319c:	4798      	blx	r3
 801319e:	4603      	mov	r3, r0
 80131a0:	76bb      	strb	r3, [r7, #26]
 80131a2:	e001      	b.n	80131a8 <tcp_process+0x404>
 80131a4:	23f0      	movs	r3, #240	; 0xf0
 80131a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80131a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00a      	beq.n	80131c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80131b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80131b4:	f113 0f0d 	cmn.w	r3, #13
 80131b8:	d002      	beq.n	80131c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f7fd fcb4 	bl	8010b28 <tcp_abort>
            }
            return ERR_ABRT;
 80131c0:	f06f 030c 	mvn.w	r3, #12
 80131c4:	e1ce      	b.n	8013564 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 fae0 	bl	801378c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80131cc:	4b63      	ldr	r3, [pc, #396]	; (801335c <tcp_process+0x5b8>)
 80131ce:	881b      	ldrh	r3, [r3, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d005      	beq.n	80131e0 <tcp_process+0x43c>
            recv_acked--;
 80131d4:	4b61      	ldr	r3, [pc, #388]	; (801335c <tcp_process+0x5b8>)
 80131d6:	881b      	ldrh	r3, [r3, #0]
 80131d8:	3b01      	subs	r3, #1
 80131da:	b29a      	uxth	r2, r3
 80131dc:	4b5f      	ldr	r3, [pc, #380]	; (801335c <tcp_process+0x5b8>)
 80131de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131e4:	009a      	lsls	r2, r3, #2
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80131f0:	428b      	cmp	r3, r1
 80131f2:	bf38      	it	cc
 80131f4:	460b      	movcc	r3, r1
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d204      	bcs.n	8013204 <tcp_process+0x460>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131fe:	009b      	lsls	r3, r3, #2
 8013200:	b29b      	uxth	r3, r3
 8013202:	e00d      	b.n	8013220 <tcp_process+0x47c>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013208:	005b      	lsls	r3, r3, #1
 801320a:	f241 121c 	movw	r2, #4380	; 0x111c
 801320e:	4293      	cmp	r3, r2
 8013210:	d904      	bls.n	801321c <tcp_process+0x478>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013216:	005b      	lsls	r3, r3, #1
 8013218:	b29b      	uxth	r3, r3
 801321a:	e001      	b.n	8013220 <tcp_process+0x47c>
 801321c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013226:	4b4e      	ldr	r3, [pc, #312]	; (8013360 <tcp_process+0x5bc>)
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	f003 0320 	and.w	r3, r3, #32
 801322e:	2b00      	cmp	r3, #0
 8013230:	d037      	beq.n	80132a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	8b5b      	ldrh	r3, [r3, #26]
 8013236:	f043 0302 	orr.w	r3, r3, #2
 801323a:	b29a      	uxth	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2207      	movs	r2, #7
 8013244:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013246:	e02c      	b.n	80132a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013248:	4b3b      	ldr	r3, [pc, #236]	; (8013338 <tcp_process+0x594>)
 801324a:	6819      	ldr	r1, [r3, #0]
 801324c:	4b3b      	ldr	r3, [pc, #236]	; (801333c <tcp_process+0x598>)
 801324e:	881b      	ldrh	r3, [r3, #0]
 8013250:	461a      	mov	r2, r3
 8013252:	4b3b      	ldr	r3, [pc, #236]	; (8013340 <tcp_process+0x59c>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013258:	4b3a      	ldr	r3, [pc, #232]	; (8013344 <tcp_process+0x5a0>)
 801325a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801325c:	885b      	ldrh	r3, [r3, #2]
 801325e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013260:	4a38      	ldr	r2, [pc, #224]	; (8013344 <tcp_process+0x5a0>)
 8013262:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013264:	8812      	ldrh	r2, [r2, #0]
 8013266:	b292      	uxth	r2, r2
 8013268:	9202      	str	r2, [sp, #8]
 801326a:	9301      	str	r3, [sp, #4]
 801326c:	4b36      	ldr	r3, [pc, #216]	; (8013348 <tcp_process+0x5a4>)
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	4b36      	ldr	r3, [pc, #216]	; (801334c <tcp_process+0x5a8>)
 8013272:	4602      	mov	r2, r0
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f003 f82d 	bl	80162d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801327a:	e167      	b.n	801354c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801327c:	4b2d      	ldr	r3, [pc, #180]	; (8013334 <tcp_process+0x590>)
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	f003 0302 	and.w	r3, r3, #2
 8013284:	2b00      	cmp	r3, #0
 8013286:	f000 8161 	beq.w	801354c <tcp_process+0x7a8>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801328e:	1e5a      	subs	r2, r3, #1
 8013290:	4b2b      	ldr	r3, [pc, #172]	; (8013340 <tcp_process+0x59c>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	429a      	cmp	r2, r3
 8013296:	f040 8159 	bne.w	801354c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f002 fe12 	bl	8015ec4 <tcp_rexmit>
      break;
 80132a0:	e154      	b.n	801354c <tcp_process+0x7a8>
 80132a2:	e153      	b.n	801354c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f000 fa71 	bl	801378c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80132aa:	4b2d      	ldr	r3, [pc, #180]	; (8013360 <tcp_process+0x5bc>)
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	f003 0320 	and.w	r3, r3, #32
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	f000 814c 	beq.w	8013550 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	8b5b      	ldrh	r3, [r3, #26]
 80132bc:	f043 0302 	orr.w	r3, r3, #2
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2207      	movs	r2, #7
 80132ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80132cc:	e140      	b.n	8013550 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f000 fa5c 	bl	801378c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80132d4:	4b22      	ldr	r3, [pc, #136]	; (8013360 <tcp_process+0x5bc>)
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 0320 	and.w	r3, r3, #32
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d071      	beq.n	80133c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80132e0:	4b14      	ldr	r3, [pc, #80]	; (8013334 <tcp_process+0x590>)
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	f003 0310 	and.w	r3, r3, #16
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d060      	beq.n	80133ae <tcp_process+0x60a>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132f0:	4b11      	ldr	r3, [pc, #68]	; (8013338 <tcp_process+0x594>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d15a      	bne.n	80133ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d156      	bne.n	80133ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	8b5b      	ldrh	r3, [r3, #26]
 8013304:	f043 0302 	orr.w	r3, r3, #2
 8013308:	b29a      	uxth	r2, r3
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f7fe fdba 	bl	8011e88 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013314:	4b13      	ldr	r3, [pc, #76]	; (8013364 <tcp_process+0x5c0>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	429a      	cmp	r2, r3
 801331c:	d105      	bne.n	801332a <tcp_process+0x586>
 801331e:	4b11      	ldr	r3, [pc, #68]	; (8013364 <tcp_process+0x5c0>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	68db      	ldr	r3, [r3, #12]
 8013324:	4a0f      	ldr	r2, [pc, #60]	; (8013364 <tcp_process+0x5c0>)
 8013326:	6013      	str	r3, [r2, #0]
 8013328:	e02e      	b.n	8013388 <tcp_process+0x5e4>
 801332a:	4b0e      	ldr	r3, [pc, #56]	; (8013364 <tcp_process+0x5c0>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	617b      	str	r3, [r7, #20]
 8013330:	e027      	b.n	8013382 <tcp_process+0x5de>
 8013332:	bf00      	nop
 8013334:	2401098c 	.word	0x2401098c
 8013338:	24010984 	.word	0x24010984
 801333c:	2401098a 	.word	0x2401098a
 8013340:	24010980 	.word	0x24010980
 8013344:	24010970 	.word	0x24010970
 8013348:	24009e88 	.word	0x24009e88
 801334c:	24009e8c 	.word	0x24009e8c
 8013350:	0801c120 	.word	0x0801c120
 8013354:	0801c41c 	.word	0x0801c41c
 8013358:	0801c1c8 	.word	0x0801c1c8
 801335c:	24010988 	.word	0x24010988
 8013360:	2401098d 	.word	0x2401098d
 8013364:	24010954 	.word	0x24010954
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	429a      	cmp	r2, r3
 8013370:	d104      	bne.n	801337c <tcp_process+0x5d8>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	68da      	ldr	r2, [r3, #12]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	60da      	str	r2, [r3, #12]
 801337a:	e005      	b.n	8013388 <tcp_process+0x5e4>
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	617b      	str	r3, [r7, #20]
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d1ef      	bne.n	8013368 <tcp_process+0x5c4>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2200      	movs	r2, #0
 801338c:	60da      	str	r2, [r3, #12]
 801338e:	4b77      	ldr	r3, [pc, #476]	; (801356c <tcp_process+0x7c8>)
 8013390:	2201      	movs	r2, #1
 8013392:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	220a      	movs	r2, #10
 8013398:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801339a:	4b75      	ldr	r3, [pc, #468]	; (8013570 <tcp_process+0x7cc>)
 801339c:	681a      	ldr	r2, [r3, #0]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	60da      	str	r2, [r3, #12]
 80133a2:	4a73      	ldr	r2, [pc, #460]	; (8013570 <tcp_process+0x7cc>)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6013      	str	r3, [r2, #0]
 80133a8:	f003 fb06 	bl	80169b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80133ac:	e0d2      	b.n	8013554 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	8b5b      	ldrh	r3, [r3, #26]
 80133b2:	f043 0302 	orr.w	r3, r3, #2
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2208      	movs	r2, #8
 80133c0:	751a      	strb	r2, [r3, #20]
      break;
 80133c2:	e0c7      	b.n	8013554 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80133c4:	4b6b      	ldr	r3, [pc, #428]	; (8013574 <tcp_process+0x7d0>)
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	f003 0310 	and.w	r3, r3, #16
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	f000 80c1 	beq.w	8013554 <tcp_process+0x7b0>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80133d6:	4b68      	ldr	r3, [pc, #416]	; (8013578 <tcp_process+0x7d4>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	f040 80ba 	bne.w	8013554 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	f040 80b5 	bne.w	8013554 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2206      	movs	r2, #6
 80133ee:	751a      	strb	r2, [r3, #20]
      break;
 80133f0:	e0b0      	b.n	8013554 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f000 f9ca 	bl	801378c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80133f8:	4b60      	ldr	r3, [pc, #384]	; (801357c <tcp_process+0x7d8>)
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	f003 0320 	and.w	r3, r3, #32
 8013400:	2b00      	cmp	r3, #0
 8013402:	f000 80a9 	beq.w	8013558 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	8b5b      	ldrh	r3, [r3, #26]
 801340a:	f043 0302 	orr.w	r3, r3, #2
 801340e:	b29a      	uxth	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f7fe fd37 	bl	8011e88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801341a:	4b59      	ldr	r3, [pc, #356]	; (8013580 <tcp_process+0x7dc>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	429a      	cmp	r2, r3
 8013422:	d105      	bne.n	8013430 <tcp_process+0x68c>
 8013424:	4b56      	ldr	r3, [pc, #344]	; (8013580 <tcp_process+0x7dc>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	4a55      	ldr	r2, [pc, #340]	; (8013580 <tcp_process+0x7dc>)
 801342c:	6013      	str	r3, [r2, #0]
 801342e:	e013      	b.n	8013458 <tcp_process+0x6b4>
 8013430:	4b53      	ldr	r3, [pc, #332]	; (8013580 <tcp_process+0x7dc>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	613b      	str	r3, [r7, #16]
 8013436:	e00c      	b.n	8013452 <tcp_process+0x6ae>
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	687a      	ldr	r2, [r7, #4]
 801343e:	429a      	cmp	r2, r3
 8013440:	d104      	bne.n	801344c <tcp_process+0x6a8>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	68da      	ldr	r2, [r3, #12]
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	60da      	str	r2, [r3, #12]
 801344a:	e005      	b.n	8013458 <tcp_process+0x6b4>
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	613b      	str	r3, [r7, #16]
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d1ef      	bne.n	8013438 <tcp_process+0x694>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2200      	movs	r2, #0
 801345c:	60da      	str	r2, [r3, #12]
 801345e:	4b43      	ldr	r3, [pc, #268]	; (801356c <tcp_process+0x7c8>)
 8013460:	2201      	movs	r2, #1
 8013462:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	220a      	movs	r2, #10
 8013468:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801346a:	4b41      	ldr	r3, [pc, #260]	; (8013570 <tcp_process+0x7cc>)
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	60da      	str	r2, [r3, #12]
 8013472:	4a3f      	ldr	r2, [pc, #252]	; (8013570 <tcp_process+0x7cc>)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6013      	str	r3, [r2, #0]
 8013478:	f003 fa9e 	bl	80169b8 <tcp_timer_needed>
      }
      break;
 801347c:	e06c      	b.n	8013558 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f984 	bl	801378c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013484:	4b3b      	ldr	r3, [pc, #236]	; (8013574 <tcp_process+0x7d0>)
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	f003 0310 	and.w	r3, r3, #16
 801348c:	2b00      	cmp	r3, #0
 801348e:	d065      	beq.n	801355c <tcp_process+0x7b8>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013494:	4b38      	ldr	r3, [pc, #224]	; (8013578 <tcp_process+0x7d4>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	429a      	cmp	r2, r3
 801349a:	d15f      	bne.n	801355c <tcp_process+0x7b8>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d15b      	bne.n	801355c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7fe fcef 	bl	8011e88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80134aa:	4b35      	ldr	r3, [pc, #212]	; (8013580 <tcp_process+0x7dc>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d105      	bne.n	80134c0 <tcp_process+0x71c>
 80134b4:	4b32      	ldr	r3, [pc, #200]	; (8013580 <tcp_process+0x7dc>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	4a31      	ldr	r2, [pc, #196]	; (8013580 <tcp_process+0x7dc>)
 80134bc:	6013      	str	r3, [r2, #0]
 80134be:	e013      	b.n	80134e8 <tcp_process+0x744>
 80134c0:	4b2f      	ldr	r3, [pc, #188]	; (8013580 <tcp_process+0x7dc>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	60fb      	str	r3, [r7, #12]
 80134c6:	e00c      	b.n	80134e2 <tcp_process+0x73e>
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d104      	bne.n	80134dc <tcp_process+0x738>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	68da      	ldr	r2, [r3, #12]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	60da      	str	r2, [r3, #12]
 80134da:	e005      	b.n	80134e8 <tcp_process+0x744>
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	60fb      	str	r3, [r7, #12]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d1ef      	bne.n	80134c8 <tcp_process+0x724>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2200      	movs	r2, #0
 80134ec:	60da      	str	r2, [r3, #12]
 80134ee:	4b1f      	ldr	r3, [pc, #124]	; (801356c <tcp_process+0x7c8>)
 80134f0:	2201      	movs	r2, #1
 80134f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	220a      	movs	r2, #10
 80134f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134fa:	4b1d      	ldr	r3, [pc, #116]	; (8013570 <tcp_process+0x7cc>)
 80134fc:	681a      	ldr	r2, [r3, #0]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	60da      	str	r2, [r3, #12]
 8013502:	4a1b      	ldr	r2, [pc, #108]	; (8013570 <tcp_process+0x7cc>)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6013      	str	r3, [r2, #0]
 8013508:	f003 fa56 	bl	80169b8 <tcp_timer_needed>
      }
      break;
 801350c:	e026      	b.n	801355c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 f93c 	bl	801378c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013514:	4b17      	ldr	r3, [pc, #92]	; (8013574 <tcp_process+0x7d0>)
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	f003 0310 	and.w	r3, r3, #16
 801351c:	2b00      	cmp	r3, #0
 801351e:	d01f      	beq.n	8013560 <tcp_process+0x7bc>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013524:	4b14      	ldr	r3, [pc, #80]	; (8013578 <tcp_process+0x7d4>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	429a      	cmp	r2, r3
 801352a:	d119      	bne.n	8013560 <tcp_process+0x7bc>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013530:	2b00      	cmp	r3, #0
 8013532:	d115      	bne.n	8013560 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013534:	4b11      	ldr	r3, [pc, #68]	; (801357c <tcp_process+0x7d8>)
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	f043 0310 	orr.w	r3, r3, #16
 801353c:	b2da      	uxtb	r2, r3
 801353e:	4b0f      	ldr	r3, [pc, #60]	; (801357c <tcp_process+0x7d8>)
 8013540:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013542:	e00d      	b.n	8013560 <tcp_process+0x7bc>
    default:
      break;
 8013544:	bf00      	nop
 8013546:	e00c      	b.n	8013562 <tcp_process+0x7be>
      break;
 8013548:	bf00      	nop
 801354a:	e00a      	b.n	8013562 <tcp_process+0x7be>
      break;
 801354c:	bf00      	nop
 801354e:	e008      	b.n	8013562 <tcp_process+0x7be>
      break;
 8013550:	bf00      	nop
 8013552:	e006      	b.n	8013562 <tcp_process+0x7be>
      break;
 8013554:	bf00      	nop
 8013556:	e004      	b.n	8013562 <tcp_process+0x7be>
      break;
 8013558:	bf00      	nop
 801355a:	e002      	b.n	8013562 <tcp_process+0x7be>
      break;
 801355c:	bf00      	nop
 801355e:	e000      	b.n	8013562 <tcp_process+0x7be>
      break;
 8013560:	bf00      	nop
  }
  return ERR_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3724      	adds	r7, #36	; 0x24
 8013568:	46bd      	mov	sp, r7
 801356a:	bd90      	pop	{r4, r7, pc}
 801356c:	2401095c 	.word	0x2401095c
 8013570:	24010958 	.word	0x24010958
 8013574:	2401098c 	.word	0x2401098c
 8013578:	24010984 	.word	0x24010984
 801357c:	2401098d 	.word	0x2401098d
 8013580:	24010954 	.word	0x24010954

08013584 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013584:	b590      	push	{r4, r7, lr}
 8013586:	b085      	sub	sp, #20
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d106      	bne.n	80135a2 <tcp_oos_insert_segment+0x1e>
 8013594:	4b3b      	ldr	r3, [pc, #236]	; (8013684 <tcp_oos_insert_segment+0x100>)
 8013596:	f240 421f 	movw	r2, #1055	; 0x41f
 801359a:	493b      	ldr	r1, [pc, #236]	; (8013688 <tcp_oos_insert_segment+0x104>)
 801359c:	483b      	ldr	r0, [pc, #236]	; (801368c <tcp_oos_insert_segment+0x108>)
 801359e:	f004 fae7 	bl	8017b70 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	899b      	ldrh	r3, [r3, #12]
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7f8 fab4 	bl	800bb18 <lwip_htons>
 80135b0:	4603      	mov	r3, r0
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d028      	beq.n	801360e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80135bc:	6838      	ldr	r0, [r7, #0]
 80135be:	f7fe f989 	bl	80118d4 <tcp_segs_free>
    next = NULL;
 80135c2:	2300      	movs	r3, #0
 80135c4:	603b      	str	r3, [r7, #0]
 80135c6:	e056      	b.n	8013676 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	68db      	ldr	r3, [r3, #12]
 80135cc:	899b      	ldrh	r3, [r3, #12]
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7f8 faa1 	bl	800bb18 <lwip_htons>
 80135d6:	4603      	mov	r3, r0
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	f003 0301 	and.w	r3, r3, #1
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00d      	beq.n	80135fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	899b      	ldrh	r3, [r3, #12]
 80135e8:	b29c      	uxth	r4, r3
 80135ea:	2001      	movs	r0, #1
 80135ec:	f7f8 fa94 	bl	800bb18 <lwip_htons>
 80135f0:	4603      	mov	r3, r0
 80135f2:	461a      	mov	r2, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	4322      	orrs	r2, r4
 80135fa:	b292      	uxth	r2, r2
 80135fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013608:	68f8      	ldr	r0, [r7, #12]
 801360a:	f7fe f978 	bl	80118fe <tcp_seg_free>
    while (next &&
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d00e      	beq.n	8013632 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	891b      	ldrh	r3, [r3, #8]
 8013618:	461a      	mov	r2, r3
 801361a:	4b1d      	ldr	r3, [pc, #116]	; (8013690 <tcp_oos_insert_segment+0x10c>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	441a      	add	r2, r3
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	6839      	ldr	r1, [r7, #0]
 8013628:	8909      	ldrh	r1, [r1, #8]
 801362a:	440b      	add	r3, r1
 801362c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801362e:	2b00      	cmp	r3, #0
 8013630:	daca      	bge.n	80135c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d01e      	beq.n	8013676 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	891b      	ldrh	r3, [r3, #8]
 801363c:	461a      	mov	r2, r3
 801363e:	4b14      	ldr	r3, [pc, #80]	; (8013690 <tcp_oos_insert_segment+0x10c>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	441a      	add	r2, r3
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801364c:	2b00      	cmp	r3, #0
 801364e:	dd12      	ble.n	8013676 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	b29a      	uxth	r2, r3
 8013658:	4b0d      	ldr	r3, [pc, #52]	; (8013690 <tcp_oos_insert_segment+0x10c>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	b29b      	uxth	r3, r3
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	b29a      	uxth	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	685a      	ldr	r2, [r3, #4]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	891b      	ldrh	r3, [r3, #8]
 801366e:	4619      	mov	r1, r3
 8013670:	4610      	mov	r0, r2
 8013672:	f7fc f887 	bl	800f784 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	601a      	str	r2, [r3, #0]
}
 801367c:	bf00      	nop
 801367e:	3714      	adds	r7, #20
 8013680:	46bd      	mov	sp, r7
 8013682:	bd90      	pop	{r4, r7, pc}
 8013684:	0801c120 	.word	0x0801c120
 8013688:	0801c43c 	.word	0x0801c43c
 801368c:	0801c1c8 	.word	0x0801c1c8
 8013690:	24010980 	.word	0x24010980

08013694 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013694:	b5b0      	push	{r4, r5, r7, lr}
 8013696:	b086      	sub	sp, #24
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
 80136a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80136a2:	e03e      	b.n	8013722 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	685b      	ldr	r3, [r3, #4]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fc fa78 	bl	800fba8 <pbuf_clen>
 80136b8:	4603      	mov	r3, r0
 80136ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136c2:	8a7a      	ldrh	r2, [r7, #18]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d906      	bls.n	80136d6 <tcp_free_acked_segments+0x42>
 80136c8:	4b2a      	ldr	r3, [pc, #168]	; (8013774 <tcp_free_acked_segments+0xe0>)
 80136ca:	f240 4257 	movw	r2, #1111	; 0x457
 80136ce:	492a      	ldr	r1, [pc, #168]	; (8013778 <tcp_free_acked_segments+0xe4>)
 80136d0:	482a      	ldr	r0, [pc, #168]	; (801377c <tcp_free_acked_segments+0xe8>)
 80136d2:	f004 fa4d 	bl	8017b70 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80136dc:	8a7b      	ldrh	r3, [r7, #18]
 80136de:	1ad3      	subs	r3, r2, r3
 80136e0:	b29a      	uxth	r2, r3
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	891a      	ldrh	r2, [r3, #8]
 80136ec:	4b24      	ldr	r3, [pc, #144]	; (8013780 <tcp_free_acked_segments+0xec>)
 80136ee:	881b      	ldrh	r3, [r3, #0]
 80136f0:	4413      	add	r3, r2
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	4b22      	ldr	r3, [pc, #136]	; (8013780 <tcp_free_acked_segments+0xec>)
 80136f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80136f8:	6978      	ldr	r0, [r7, #20]
 80136fa:	f7fe f900 	bl	80118fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013704:	2b00      	cmp	r3, #0
 8013706:	d00c      	beq.n	8013722 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d109      	bne.n	8013722 <tcp_free_acked_segments+0x8e>
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d106      	bne.n	8013722 <tcp_free_acked_segments+0x8e>
 8013714:	4b17      	ldr	r3, [pc, #92]	; (8013774 <tcp_free_acked_segments+0xe0>)
 8013716:	f240 4261 	movw	r2, #1121	; 0x461
 801371a:	491a      	ldr	r1, [pc, #104]	; (8013784 <tcp_free_acked_segments+0xf0>)
 801371c:	4817      	ldr	r0, [pc, #92]	; (801377c <tcp_free_acked_segments+0xe8>)
 801371e:	f004 fa27 	bl	8017b70 <iprintf>
  while (seg_list != NULL &&
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d020      	beq.n	801376a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	4618      	mov	r0, r3
 8013730:	f7f8 fa07 	bl	800bb42 <lwip_htonl>
 8013734:	4604      	mov	r4, r0
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	461d      	mov	r5, r3
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	899b      	ldrh	r3, [r3, #12]
 8013742:	b29b      	uxth	r3, r3
 8013744:	4618      	mov	r0, r3
 8013746:	f7f8 f9e7 	bl	800bb18 <lwip_htons>
 801374a:	4603      	mov	r3, r0
 801374c:	b2db      	uxtb	r3, r3
 801374e:	f003 0303 	and.w	r3, r3, #3
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <tcp_free_acked_segments+0xc6>
 8013756:	2301      	movs	r3, #1
 8013758:	e000      	b.n	801375c <tcp_free_acked_segments+0xc8>
 801375a:	2300      	movs	r3, #0
 801375c:	442b      	add	r3, r5
 801375e:	18e2      	adds	r2, r4, r3
 8013760:	4b09      	ldr	r3, [pc, #36]	; (8013788 <tcp_free_acked_segments+0xf4>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013766:	2b00      	cmp	r3, #0
 8013768:	dd9c      	ble.n	80136a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801376a:	68bb      	ldr	r3, [r7, #8]
}
 801376c:	4618      	mov	r0, r3
 801376e:	3718      	adds	r7, #24
 8013770:	46bd      	mov	sp, r7
 8013772:	bdb0      	pop	{r4, r5, r7, pc}
 8013774:	0801c120 	.word	0x0801c120
 8013778:	0801c464 	.word	0x0801c464
 801377c:	0801c1c8 	.word	0x0801c1c8
 8013780:	24010988 	.word	0x24010988
 8013784:	0801c48c 	.word	0x0801c48c
 8013788:	24010984 	.word	0x24010984

0801378c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801378c:	b5b0      	push	{r4, r5, r7, lr}
 801378e:	b094      	sub	sp, #80	; 0x50
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013794:	2300      	movs	r3, #0
 8013796:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d106      	bne.n	80137ac <tcp_receive+0x20>
 801379e:	4b91      	ldr	r3, [pc, #580]	; (80139e4 <tcp_receive+0x258>)
 80137a0:	f240 427b 	movw	r2, #1147	; 0x47b
 80137a4:	4990      	ldr	r1, [pc, #576]	; (80139e8 <tcp_receive+0x25c>)
 80137a6:	4891      	ldr	r0, [pc, #580]	; (80139ec <tcp_receive+0x260>)
 80137a8:	f004 f9e2 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	7d1b      	ldrb	r3, [r3, #20]
 80137b0:	2b03      	cmp	r3, #3
 80137b2:	d806      	bhi.n	80137c2 <tcp_receive+0x36>
 80137b4:	4b8b      	ldr	r3, [pc, #556]	; (80139e4 <tcp_receive+0x258>)
 80137b6:	f240 427c 	movw	r2, #1148	; 0x47c
 80137ba:	498d      	ldr	r1, [pc, #564]	; (80139f0 <tcp_receive+0x264>)
 80137bc:	488b      	ldr	r0, [pc, #556]	; (80139ec <tcp_receive+0x260>)
 80137be:	f004 f9d7 	bl	8017b70 <iprintf>

  if (flags & TCP_ACK) {
 80137c2:	4b8c      	ldr	r3, [pc, #560]	; (80139f4 <tcp_receive+0x268>)
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	f003 0310 	and.w	r3, r3, #16
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	f000 8264 	beq.w	8013c98 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80137d6:	461a      	mov	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137dc:	4413      	add	r3, r2
 80137de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137e4:	4b84      	ldr	r3, [pc, #528]	; (80139f8 <tcp_receive+0x26c>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	1ad3      	subs	r3, r2, r3
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	db1b      	blt.n	8013826 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137f2:	4b81      	ldr	r3, [pc, #516]	; (80139f8 <tcp_receive+0x26c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d106      	bne.n	8013808 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137fe:	4b7f      	ldr	r3, [pc, #508]	; (80139fc <tcp_receive+0x270>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	1ad3      	subs	r3, r2, r3
 8013804:	2b00      	cmp	r3, #0
 8013806:	db0e      	blt.n	8013826 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801380c:	4b7b      	ldr	r3, [pc, #492]	; (80139fc <tcp_receive+0x270>)
 801380e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013810:	429a      	cmp	r2, r3
 8013812:	d125      	bne.n	8013860 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013814:	4b7a      	ldr	r3, [pc, #488]	; (8013a00 <tcp_receive+0x274>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	89db      	ldrh	r3, [r3, #14]
 801381a:	b29a      	uxth	r2, r3
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013822:	429a      	cmp	r2, r3
 8013824:	d91c      	bls.n	8013860 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013826:	4b76      	ldr	r3, [pc, #472]	; (8013a00 <tcp_receive+0x274>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	89db      	ldrh	r3, [r3, #14]
 801382c:	b29a      	uxth	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013840:	429a      	cmp	r2, r3
 8013842:	d205      	bcs.n	8013850 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013850:	4b69      	ldr	r3, [pc, #420]	; (80139f8 <tcp_receive+0x26c>)
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013858:	4b68      	ldr	r3, [pc, #416]	; (80139fc <tcp_receive+0x270>)
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013860:	4b66      	ldr	r3, [pc, #408]	; (80139fc <tcp_receive+0x270>)
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	2b00      	cmp	r3, #0
 801386c:	dc58      	bgt.n	8013920 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801386e:	4b65      	ldr	r3, [pc, #404]	; (8013a04 <tcp_receive+0x278>)
 8013870:	881b      	ldrh	r3, [r3, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d14b      	bne.n	801390e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013880:	4413      	add	r3, r2
 8013882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013884:	429a      	cmp	r2, r3
 8013886:	d142      	bne.n	801390e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801388e:	2b00      	cmp	r3, #0
 8013890:	db3d      	blt.n	801390e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013896:	4b59      	ldr	r3, [pc, #356]	; (80139fc <tcp_receive+0x270>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	429a      	cmp	r2, r3
 801389c:	d137      	bne.n	801390e <tcp_receive+0x182>
              found_dupack = 1;
 801389e:	2301      	movs	r3, #1
 80138a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80138a8:	2bff      	cmp	r3, #255	; 0xff
 80138aa:	d007      	beq.n	80138bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80138b2:	3301      	adds	r3, #1
 80138b4:	b2da      	uxtb	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80138c2:	2b03      	cmp	r3, #3
 80138c4:	d91b      	bls.n	80138fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138d0:	4413      	add	r3, r2
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138da:	429a      	cmp	r2, r3
 80138dc:	d30a      	bcc.n	80138f4 <tcp_receive+0x168>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138e8:	4413      	add	r3, r2
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80138f2:	e004      	b.n	80138fe <tcp_receive+0x172>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013904:	2b02      	cmp	r3, #2
 8013906:	d902      	bls.n	801390e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f002 fb47 	bl	8015f9c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013910:	2b00      	cmp	r3, #0
 8013912:	f040 8161 	bne.w	8013bd8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2200      	movs	r2, #0
 801391a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801391e:	e15b      	b.n	8013bd8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013920:	4b36      	ldr	r3, [pc, #216]	; (80139fc <tcp_receive+0x270>)
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	3b01      	subs	r3, #1
 801392c:	2b00      	cmp	r3, #0
 801392e:	f2c0 814e 	blt.w	8013bce <tcp_receive+0x442>
 8013932:	4b32      	ldr	r3, [pc, #200]	; (80139fc <tcp_receive+0x270>)
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	f300 8146 	bgt.w	8013bce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	8b5b      	ldrh	r3, [r3, #26]
 8013946:	f003 0304 	and.w	r3, r3, #4
 801394a:	2b00      	cmp	r3, #0
 801394c:	d010      	beq.n	8013970 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	8b5b      	ldrh	r3, [r3, #26]
 8013952:	f023 0304 	bic.w	r3, r3, #4
 8013956:	b29a      	uxth	r2, r3
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2200      	movs	r2, #0
 8013974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801397e:	10db      	asrs	r3, r3, #3
 8013980:	b21b      	sxth	r3, r3
 8013982:	b29a      	uxth	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801398a:	b29b      	uxth	r3, r3
 801398c:	4413      	add	r3, r2
 801398e:	b29b      	uxth	r3, r3
 8013990:	b21a      	sxth	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013998:	4b18      	ldr	r3, [pc, #96]	; (80139fc <tcp_receive+0x270>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	b29a      	uxth	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	1ad3      	subs	r3, r2, r3
 80139a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80139b0:	4b12      	ldr	r3, [pc, #72]	; (80139fc <tcp_receive+0x270>)
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	7d1b      	ldrb	r3, [r3, #20]
 80139bc:	2b03      	cmp	r3, #3
 80139be:	f240 8097 	bls.w	8013af0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d245      	bcs.n	8013a5e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	8b5b      	ldrh	r3, [r3, #26]
 80139d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d014      	beq.n	8013a08 <tcp_receive+0x27c>
 80139de:	2301      	movs	r3, #1
 80139e0:	e013      	b.n	8013a0a <tcp_receive+0x27e>
 80139e2:	bf00      	nop
 80139e4:	0801c120 	.word	0x0801c120
 80139e8:	0801c4ac 	.word	0x0801c4ac
 80139ec:	0801c1c8 	.word	0x0801c1c8
 80139f0:	0801c4c8 	.word	0x0801c4c8
 80139f4:	2401098c 	.word	0x2401098c
 80139f8:	24010980 	.word	0x24010980
 80139fc:	24010984 	.word	0x24010984
 8013a00:	24010970 	.word	0x24010970
 8013a04:	2401098a 	.word	0x2401098a
 8013a08:	2302      	movs	r3, #2
 8013a0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013a0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a18:	fb12 f303 	smulbb	r3, r2, r3
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a20:	4293      	cmp	r3, r2
 8013a22:	bf28      	it	cs
 8013a24:	4613      	movcs	r3, r2
 8013a26:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a30:	4413      	add	r3, r2
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d309      	bcc.n	8013a52 <tcp_receive+0x2c6>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a46:	4413      	add	r3, r2
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013a50:	e04e      	b.n	8013af0 <tcp_receive+0x364>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013a5c:	e048      	b.n	8013af0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a66:	4413      	add	r3, r2
 8013a68:	b29a      	uxth	r2, r3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d309      	bcc.n	8013a88 <tcp_receive+0x2fc>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a7c:	4413      	add	r3, r2
 8013a7e:	b29a      	uxth	r2, r3
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013a86:	e004      	b.n	8013a92 <tcp_receive+0x306>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d326      	bcc.n	8013af0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013aae:	1ad3      	subs	r3, r2, r3
 8013ab0:	b29a      	uxth	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ac2:	4413      	add	r3, r2
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d30a      	bcc.n	8013ae6 <tcp_receive+0x35a>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ada:	4413      	add	r3, r2
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013ae4:	e004      	b.n	8013af0 <tcp_receive+0x364>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013aec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013af8:	4a98      	ldr	r2, [pc, #608]	; (8013d5c <tcp_receive+0x5d0>)
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7ff fdca 	bl	8013694 <tcp_free_acked_segments>
 8013b00:	4602      	mov	r2, r0
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b0e:	4a94      	ldr	r2, [pc, #592]	; (8013d60 <tcp_receive+0x5d4>)
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7ff fdbf 	bl	8013694 <tcp_free_acked_segments>
 8013b16:	4602      	mov	r2, r0
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d104      	bne.n	8013b2e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b2a:	861a      	strh	r2, [r3, #48]	; 0x30
 8013b2c:	e002      	b.n	8013b34 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2200      	movs	r2, #0
 8013b32:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2200      	movs	r2, #0
 8013b38:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d103      	bne.n	8013b4a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2200      	movs	r2, #0
 8013b46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013b50:	4b84      	ldr	r3, [pc, #528]	; (8013d64 <tcp_receive+0x5d8>)
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	4413      	add	r3, r2
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	8b5b      	ldrh	r3, [r3, #26]
 8013b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d035      	beq.n	8013bd6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d118      	bne.n	8013ba4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00c      	beq.n	8013b94 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b82:	68db      	ldr	r3, [r3, #12]
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f7 ffdb 	bl	800bb42 <lwip_htonl>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	dc20      	bgt.n	8013bd6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	8b5b      	ldrh	r3, [r3, #26]
 8013b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013b9c:	b29a      	uxth	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ba2:	e018      	b.n	8013bd6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7f7 ffc6 	bl	800bb42 <lwip_htonl>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	1ae3      	subs	r3, r4, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	dc0b      	bgt.n	8013bd6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	8b5b      	ldrh	r3, [r3, #26]
 8013bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013bcc:	e003      	b.n	8013bd6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f002 fbd2 	bl	8016378 <tcp_send_empty_ack>
 8013bd4:	e000      	b.n	8013bd8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013bd6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d05b      	beq.n	8013c98 <tcp_receive+0x50c>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013be4:	4b60      	ldr	r3, [pc, #384]	; (8013d68 <tcp_receive+0x5dc>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	da54      	bge.n	8013c98 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013bee:	4b5f      	ldr	r3, [pc, #380]	; (8013d6c <tcp_receive+0x5e0>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	b29a      	uxth	r2, r3
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013c02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c0c:	10db      	asrs	r3, r3, #3
 8013c0e:	b21b      	sxth	r3, r3
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	1ad3      	subs	r3, r2, r3
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013c26:	4413      	add	r3, r2
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	b21a      	sxth	r2, r3
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013c30:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	da05      	bge.n	8013c44 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013c3c:	425b      	negs	r3, r3
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013c44:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013c4e:	109b      	asrs	r3, r3, #2
 8013c50:	b21b      	sxth	r3, r3
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013c62:	b29a      	uxth	r2, r3
 8013c64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013c68:	4413      	add	r3, r2
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	b21a      	sxth	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c78:	10db      	asrs	r3, r3, #3
 8013c7a:	b21b      	sxth	r3, r3
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013c84:	b29b      	uxth	r3, r3
 8013c86:	4413      	add	r3, r2
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	b21a      	sxth	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2200      	movs	r2, #0
 8013c96:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013c98:	4b35      	ldr	r3, [pc, #212]	; (8013d70 <tcp_receive+0x5e4>)
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	f000 84e2 	beq.w	8014666 <tcp_receive+0xeda>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7d1b      	ldrb	r3, [r3, #20]
 8013ca6:	2b06      	cmp	r3, #6
 8013ca8:	f200 84dd 	bhi.w	8014666 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cb0:	4b30      	ldr	r3, [pc, #192]	; (8013d74 <tcp_receive+0x5e8>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	1ad3      	subs	r3, r2, r3
 8013cb6:	3b01      	subs	r3, #1
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f2c0 808f 	blt.w	8013ddc <tcp_receive+0x650>
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cc2:	4b2b      	ldr	r3, [pc, #172]	; (8013d70 <tcp_receive+0x5e4>)
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	4b2a      	ldr	r3, [pc, #168]	; (8013d74 <tcp_receive+0x5e8>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	440b      	add	r3, r1
 8013cce:	1ad3      	subs	r3, r2, r3
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f300 8082 	bgt.w	8013ddc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013cd8:	4b27      	ldr	r3, [pc, #156]	; (8013d78 <tcp_receive+0x5ec>)
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ce2:	4b24      	ldr	r3, [pc, #144]	; (8013d74 <tcp_receive+0x5e8>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013cea:	4b23      	ldr	r3, [pc, #140]	; (8013d78 <tcp_receive+0x5ec>)
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d106      	bne.n	8013d00 <tcp_receive+0x574>
 8013cf2:	4b22      	ldr	r3, [pc, #136]	; (8013d7c <tcp_receive+0x5f0>)
 8013cf4:	f240 5294 	movw	r2, #1428	; 0x594
 8013cf8:	4921      	ldr	r1, [pc, #132]	; (8013d80 <tcp_receive+0x5f4>)
 8013cfa:	4822      	ldr	r0, [pc, #136]	; (8013d84 <tcp_receive+0x5f8>)
 8013cfc:	f003 ff38 	bl	8017b70 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d906      	bls.n	8013d18 <tcp_receive+0x58c>
 8013d0a:	4b1c      	ldr	r3, [pc, #112]	; (8013d7c <tcp_receive+0x5f0>)
 8013d0c:	f240 5295 	movw	r2, #1429	; 0x595
 8013d10:	491d      	ldr	r1, [pc, #116]	; (8013d88 <tcp_receive+0x5fc>)
 8013d12:	481c      	ldr	r0, [pc, #112]	; (8013d84 <tcp_receive+0x5f8>)
 8013d14:	f003 ff2c 	bl	8017b70 <iprintf>
      off = (u16_t)off32;
 8013d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013d1e:	4b16      	ldr	r3, [pc, #88]	; (8013d78 <tcp_receive+0x5ec>)
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	891b      	ldrh	r3, [r3, #8]
 8013d24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d906      	bls.n	8013d3a <tcp_receive+0x5ae>
 8013d2c:	4b13      	ldr	r3, [pc, #76]	; (8013d7c <tcp_receive+0x5f0>)
 8013d2e:	f240 5297 	movw	r2, #1431	; 0x597
 8013d32:	4916      	ldr	r1, [pc, #88]	; (8013d8c <tcp_receive+0x600>)
 8013d34:	4813      	ldr	r0, [pc, #76]	; (8013d84 <tcp_receive+0x5f8>)
 8013d36:	f003 ff1b 	bl	8017b70 <iprintf>
      inseg.len -= off;
 8013d3a:	4b0f      	ldr	r3, [pc, #60]	; (8013d78 <tcp_receive+0x5ec>)
 8013d3c:	891a      	ldrh	r2, [r3, #8]
 8013d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	4b0c      	ldr	r3, [pc, #48]	; (8013d78 <tcp_receive+0x5ec>)
 8013d48:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013d4a:	4b0b      	ldr	r3, [pc, #44]	; (8013d78 <tcp_receive+0x5ec>)
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	891a      	ldrh	r2, [r3, #8]
 8013d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013d58:	e02a      	b.n	8013db0 <tcp_receive+0x624>
 8013d5a:	bf00      	nop
 8013d5c:	0801c4e4 	.word	0x0801c4e4
 8013d60:	0801c4ec 	.word	0x0801c4ec
 8013d64:	24010988 	.word	0x24010988
 8013d68:	24010984 	.word	0x24010984
 8013d6c:	24010948 	.word	0x24010948
 8013d70:	2401098a 	.word	0x2401098a
 8013d74:	24010980 	.word	0x24010980
 8013d78:	24010960 	.word	0x24010960
 8013d7c:	0801c120 	.word	0x0801c120
 8013d80:	0801c4f4 	.word	0x0801c4f4
 8013d84:	0801c1c8 	.word	0x0801c1c8
 8013d88:	0801c504 	.word	0x0801c504
 8013d8c:	0801c514 	.word	0x0801c514
        off -= p->len;
 8013d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d92:	895b      	ldrh	r3, [r3, #10]
 8013d94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d98:	1ad3      	subs	r3, r2, r3
 8013d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013da0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013da2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013da6:	2200      	movs	r2, #0
 8013da8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013db2:	895b      	ldrh	r3, [r3, #10]
 8013db4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d8e9      	bhi.n	8013d90 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013dbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dc0:	4619      	mov	r1, r3
 8013dc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013dc4:	f7fb fddc 	bl	800f980 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dcc:	4a91      	ldr	r2, [pc, #580]	; (8014014 <tcp_receive+0x888>)
 8013dce:	6013      	str	r3, [r2, #0]
 8013dd0:	4b91      	ldr	r3, [pc, #580]	; (8014018 <tcp_receive+0x88c>)
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	4a8f      	ldr	r2, [pc, #572]	; (8014014 <tcp_receive+0x888>)
 8013dd6:	6812      	ldr	r2, [r2, #0]
 8013dd8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013dda:	e00d      	b.n	8013df8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013ddc:	4b8d      	ldr	r3, [pc, #564]	; (8014014 <tcp_receive+0x888>)
 8013dde:	681a      	ldr	r2, [r3, #0]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	da06      	bge.n	8013df8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	8b5b      	ldrh	r3, [r3, #26]
 8013dee:	f043 0302 	orr.w	r3, r3, #2
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013df8:	4b86      	ldr	r3, [pc, #536]	; (8014014 <tcp_receive+0x888>)
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e00:	1ad3      	subs	r3, r2, r3
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f2c0 842a 	blt.w	801465c <tcp_receive+0xed0>
 8013e08:	4b82      	ldr	r3, [pc, #520]	; (8014014 <tcp_receive+0x888>)
 8013e0a:	681a      	ldr	r2, [r3, #0]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e10:	6879      	ldr	r1, [r7, #4]
 8013e12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e14:	440b      	add	r3, r1
 8013e16:	1ad3      	subs	r3, r2, r3
 8013e18:	3301      	adds	r3, #1
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f300 841e 	bgt.w	801465c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e24:	4b7b      	ldr	r3, [pc, #492]	; (8014014 <tcp_receive+0x888>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	f040 829a 	bne.w	8014362 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013e2e:	4b7a      	ldr	r3, [pc, #488]	; (8014018 <tcp_receive+0x88c>)
 8013e30:	891c      	ldrh	r4, [r3, #8]
 8013e32:	4b79      	ldr	r3, [pc, #484]	; (8014018 <tcp_receive+0x88c>)
 8013e34:	68db      	ldr	r3, [r3, #12]
 8013e36:	899b      	ldrh	r3, [r3, #12]
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7f7 fe6c 	bl	800bb18 <lwip_htons>
 8013e40:	4603      	mov	r3, r0
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	f003 0303 	and.w	r3, r3, #3
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d001      	beq.n	8013e50 <tcp_receive+0x6c4>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	e000      	b.n	8013e52 <tcp_receive+0x6c6>
 8013e50:	2300      	movs	r3, #0
 8013e52:	4423      	add	r3, r4
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	4b71      	ldr	r3, [pc, #452]	; (801401c <tcp_receive+0x890>)
 8013e58:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e5e:	4b6f      	ldr	r3, [pc, #444]	; (801401c <tcp_receive+0x890>)
 8013e60:	881b      	ldrh	r3, [r3, #0]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d275      	bcs.n	8013f52 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013e66:	4b6c      	ldr	r3, [pc, #432]	; (8014018 <tcp_receive+0x88c>)
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	899b      	ldrh	r3, [r3, #12]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7f7 fe52 	bl	800bb18 <lwip_htons>
 8013e74:	4603      	mov	r3, r0
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	f003 0301 	and.w	r3, r3, #1
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d01f      	beq.n	8013ec0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013e80:	4b65      	ldr	r3, [pc, #404]	; (8014018 <tcp_receive+0x88c>)
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	899b      	ldrh	r3, [r3, #12]
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	b21b      	sxth	r3, r3
 8013e8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013e8e:	b21c      	sxth	r4, r3
 8013e90:	4b61      	ldr	r3, [pc, #388]	; (8014018 <tcp_receive+0x88c>)
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	899b      	ldrh	r3, [r3, #12]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7f7 fe3d 	bl	800bb18 <lwip_htons>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7f7 fe34 	bl	800bb18 <lwip_htons>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	b21b      	sxth	r3, r3
 8013eb4:	4323      	orrs	r3, r4
 8013eb6:	b21a      	sxth	r2, r3
 8013eb8:	4b57      	ldr	r3, [pc, #348]	; (8014018 <tcp_receive+0x88c>)
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	b292      	uxth	r2, r2
 8013ebe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ec4:	4b54      	ldr	r3, [pc, #336]	; (8014018 <tcp_receive+0x88c>)
 8013ec6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013ec8:	4b53      	ldr	r3, [pc, #332]	; (8014018 <tcp_receive+0x88c>)
 8013eca:	68db      	ldr	r3, [r3, #12]
 8013ecc:	899b      	ldrh	r3, [r3, #12]
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f7 fe21 	bl	800bb18 <lwip_htons>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	f003 0302 	and.w	r3, r3, #2
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d005      	beq.n	8013eee <tcp_receive+0x762>
            inseg.len -= 1;
 8013ee2:	4b4d      	ldr	r3, [pc, #308]	; (8014018 <tcp_receive+0x88c>)
 8013ee4:	891b      	ldrh	r3, [r3, #8]
 8013ee6:	3b01      	subs	r3, #1
 8013ee8:	b29a      	uxth	r2, r3
 8013eea:	4b4b      	ldr	r3, [pc, #300]	; (8014018 <tcp_receive+0x88c>)
 8013eec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013eee:	4b4a      	ldr	r3, [pc, #296]	; (8014018 <tcp_receive+0x88c>)
 8013ef0:	685b      	ldr	r3, [r3, #4]
 8013ef2:	4a49      	ldr	r2, [pc, #292]	; (8014018 <tcp_receive+0x88c>)
 8013ef4:	8912      	ldrh	r2, [r2, #8]
 8013ef6:	4611      	mov	r1, r2
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f7fb fc43 	bl	800f784 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013efe:	4b46      	ldr	r3, [pc, #280]	; (8014018 <tcp_receive+0x88c>)
 8013f00:	891c      	ldrh	r4, [r3, #8]
 8013f02:	4b45      	ldr	r3, [pc, #276]	; (8014018 <tcp_receive+0x88c>)
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	899b      	ldrh	r3, [r3, #12]
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f7 fe04 	bl	800bb18 <lwip_htons>
 8013f10:	4603      	mov	r3, r0
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	f003 0303 	and.w	r3, r3, #3
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d001      	beq.n	8013f20 <tcp_receive+0x794>
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e000      	b.n	8013f22 <tcp_receive+0x796>
 8013f20:	2300      	movs	r3, #0
 8013f22:	4423      	add	r3, r4
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	4b3d      	ldr	r3, [pc, #244]	; (801401c <tcp_receive+0x890>)
 8013f28:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013f2a:	4b3c      	ldr	r3, [pc, #240]	; (801401c <tcp_receive+0x890>)
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	4b38      	ldr	r3, [pc, #224]	; (8014014 <tcp_receive+0x888>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	441a      	add	r2, r3
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3a:	6879      	ldr	r1, [r7, #4]
 8013f3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f3e:	440b      	add	r3, r1
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d006      	beq.n	8013f52 <tcp_receive+0x7c6>
 8013f44:	4b36      	ldr	r3, [pc, #216]	; (8014020 <tcp_receive+0x894>)
 8013f46:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013f4a:	4936      	ldr	r1, [pc, #216]	; (8014024 <tcp_receive+0x898>)
 8013f4c:	4836      	ldr	r0, [pc, #216]	; (8014028 <tcp_receive+0x89c>)
 8013f4e:	f003 fe0f 	bl	8017b70 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	f000 80e7 	beq.w	801412a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f5c:	4b2e      	ldr	r3, [pc, #184]	; (8014018 <tcp_receive+0x88c>)
 8013f5e:	68db      	ldr	r3, [r3, #12]
 8013f60:	899b      	ldrh	r3, [r3, #12]
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7f7 fdd7 	bl	800bb18 <lwip_htons>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	b2db      	uxtb	r3, r3
 8013f6e:	f003 0301 	and.w	r3, r3, #1
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d010      	beq.n	8013f98 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013f76:	e00a      	b.n	8013f8e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f7c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f7fd fcb8 	bl	80118fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d1f0      	bne.n	8013f78 <tcp_receive+0x7ec>
 8013f96:	e0c8      	b.n	801412a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013f9e:	e052      	b.n	8014046 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	899b      	ldrh	r3, [r3, #12]
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7f7 fdb5 	bl	800bb18 <lwip_htons>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	f003 0301 	and.w	r3, r3, #1
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d03d      	beq.n	8014036 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013fba:	4b17      	ldr	r3, [pc, #92]	; (8014018 <tcp_receive+0x88c>)
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	899b      	ldrh	r3, [r3, #12]
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7f7 fda8 	bl	800bb18 <lwip_htons>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	b2db      	uxtb	r3, r3
 8013fcc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d130      	bne.n	8014036 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013fd4:	4b10      	ldr	r3, [pc, #64]	; (8014018 <tcp_receive+0x88c>)
 8013fd6:	68db      	ldr	r3, [r3, #12]
 8013fd8:	899b      	ldrh	r3, [r3, #12]
 8013fda:	b29c      	uxth	r4, r3
 8013fdc:	2001      	movs	r0, #1
 8013fde:	f7f7 fd9b 	bl	800bb18 <lwip_htons>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	461a      	mov	r2, r3
 8013fe6:	4b0c      	ldr	r3, [pc, #48]	; (8014018 <tcp_receive+0x88c>)
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	4322      	orrs	r2, r4
 8013fec:	b292      	uxth	r2, r2
 8013fee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013ff0:	4b09      	ldr	r3, [pc, #36]	; (8014018 <tcp_receive+0x88c>)
 8013ff2:	891c      	ldrh	r4, [r3, #8]
 8013ff4:	4b08      	ldr	r3, [pc, #32]	; (8014018 <tcp_receive+0x88c>)
 8013ff6:	68db      	ldr	r3, [r3, #12]
 8013ff8:	899b      	ldrh	r3, [r3, #12]
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7f7 fd8b 	bl	800bb18 <lwip_htons>
 8014002:	4603      	mov	r3, r0
 8014004:	b2db      	uxtb	r3, r3
 8014006:	f003 0303 	and.w	r3, r3, #3
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00e      	beq.n	801402c <tcp_receive+0x8a0>
 801400e:	2301      	movs	r3, #1
 8014010:	e00d      	b.n	801402e <tcp_receive+0x8a2>
 8014012:	bf00      	nop
 8014014:	24010980 	.word	0x24010980
 8014018:	24010960 	.word	0x24010960
 801401c:	2401098a 	.word	0x2401098a
 8014020:	0801c120 	.word	0x0801c120
 8014024:	0801c524 	.word	0x0801c524
 8014028:	0801c1c8 	.word	0x0801c1c8
 801402c:	2300      	movs	r3, #0
 801402e:	4423      	add	r3, r4
 8014030:	b29a      	uxth	r2, r3
 8014032:	4b98      	ldr	r3, [pc, #608]	; (8014294 <tcp_receive+0xb08>)
 8014034:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014038:	613b      	str	r3, [r7, #16]
              next = next->next;
 801403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014040:	6938      	ldr	r0, [r7, #16]
 8014042:	f7fd fc5c 	bl	80118fe <tcp_seg_free>
            while (next &&
 8014046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014048:	2b00      	cmp	r3, #0
 801404a:	d00e      	beq.n	801406a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801404c:	4b91      	ldr	r3, [pc, #580]	; (8014294 <tcp_receive+0xb08>)
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	461a      	mov	r2, r3
 8014052:	4b91      	ldr	r3, [pc, #580]	; (8014298 <tcp_receive+0xb0c>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	441a      	add	r2, r3
 8014058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014060:	8909      	ldrh	r1, [r1, #8]
 8014062:	440b      	add	r3, r1
 8014064:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014066:	2b00      	cmp	r3, #0
 8014068:	da9a      	bge.n	8013fa0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801406c:	2b00      	cmp	r3, #0
 801406e:	d059      	beq.n	8014124 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014070:	4b88      	ldr	r3, [pc, #544]	; (8014294 <tcp_receive+0xb08>)
 8014072:	881b      	ldrh	r3, [r3, #0]
 8014074:	461a      	mov	r2, r3
 8014076:	4b88      	ldr	r3, [pc, #544]	; (8014298 <tcp_receive+0xb0c>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	441a      	add	r2, r3
 801407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014084:	2b00      	cmp	r3, #0
 8014086:	dd4d      	ble.n	8014124 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	b29a      	uxth	r2, r3
 8014090:	4b81      	ldr	r3, [pc, #516]	; (8014298 <tcp_receive+0xb0c>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	b29b      	uxth	r3, r3
 8014096:	1ad3      	subs	r3, r2, r3
 8014098:	b29a      	uxth	r2, r3
 801409a:	4b80      	ldr	r3, [pc, #512]	; (801429c <tcp_receive+0xb10>)
 801409c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801409e:	4b7f      	ldr	r3, [pc, #508]	; (801429c <tcp_receive+0xb10>)
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	899b      	ldrh	r3, [r3, #12]
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7f7 fd36 	bl	800bb18 <lwip_htons>
 80140ac:	4603      	mov	r3, r0
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	f003 0302 	and.w	r3, r3, #2
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d005      	beq.n	80140c4 <tcp_receive+0x938>
                inseg.len -= 1;
 80140b8:	4b78      	ldr	r3, [pc, #480]	; (801429c <tcp_receive+0xb10>)
 80140ba:	891b      	ldrh	r3, [r3, #8]
 80140bc:	3b01      	subs	r3, #1
 80140be:	b29a      	uxth	r2, r3
 80140c0:	4b76      	ldr	r3, [pc, #472]	; (801429c <tcp_receive+0xb10>)
 80140c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80140c4:	4b75      	ldr	r3, [pc, #468]	; (801429c <tcp_receive+0xb10>)
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	4a74      	ldr	r2, [pc, #464]	; (801429c <tcp_receive+0xb10>)
 80140ca:	8912      	ldrh	r2, [r2, #8]
 80140cc:	4611      	mov	r1, r2
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7fb fb58 	bl	800f784 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80140d4:	4b71      	ldr	r3, [pc, #452]	; (801429c <tcp_receive+0xb10>)
 80140d6:	891c      	ldrh	r4, [r3, #8]
 80140d8:	4b70      	ldr	r3, [pc, #448]	; (801429c <tcp_receive+0xb10>)
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	899b      	ldrh	r3, [r3, #12]
 80140de:	b29b      	uxth	r3, r3
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7f7 fd19 	bl	800bb18 <lwip_htons>
 80140e6:	4603      	mov	r3, r0
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	f003 0303 	and.w	r3, r3, #3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d001      	beq.n	80140f6 <tcp_receive+0x96a>
 80140f2:	2301      	movs	r3, #1
 80140f4:	e000      	b.n	80140f8 <tcp_receive+0x96c>
 80140f6:	2300      	movs	r3, #0
 80140f8:	4423      	add	r3, r4
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	4b65      	ldr	r3, [pc, #404]	; (8014294 <tcp_receive+0xb08>)
 80140fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014100:	4b64      	ldr	r3, [pc, #400]	; (8014294 <tcp_receive+0xb08>)
 8014102:	881b      	ldrh	r3, [r3, #0]
 8014104:	461a      	mov	r2, r3
 8014106:	4b64      	ldr	r3, [pc, #400]	; (8014298 <tcp_receive+0xb0c>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	441a      	add	r2, r3
 801410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801410e:	68db      	ldr	r3, [r3, #12]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	429a      	cmp	r2, r3
 8014114:	d006      	beq.n	8014124 <tcp_receive+0x998>
 8014116:	4b62      	ldr	r3, [pc, #392]	; (80142a0 <tcp_receive+0xb14>)
 8014118:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801411c:	4961      	ldr	r1, [pc, #388]	; (80142a4 <tcp_receive+0xb18>)
 801411e:	4862      	ldr	r0, [pc, #392]	; (80142a8 <tcp_receive+0xb1c>)
 8014120:	f003 fd26 	bl	8017b70 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014128:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801412a:	4b5a      	ldr	r3, [pc, #360]	; (8014294 <tcp_receive+0xb08>)
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	461a      	mov	r2, r3
 8014130:	4b59      	ldr	r3, [pc, #356]	; (8014298 <tcp_receive+0xb0c>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	441a      	add	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801413e:	4b55      	ldr	r3, [pc, #340]	; (8014294 <tcp_receive+0xb08>)
 8014140:	881b      	ldrh	r3, [r3, #0]
 8014142:	429a      	cmp	r2, r3
 8014144:	d206      	bcs.n	8014154 <tcp_receive+0x9c8>
 8014146:	4b56      	ldr	r3, [pc, #344]	; (80142a0 <tcp_receive+0xb14>)
 8014148:	f240 6207 	movw	r2, #1543	; 0x607
 801414c:	4957      	ldr	r1, [pc, #348]	; (80142ac <tcp_receive+0xb20>)
 801414e:	4856      	ldr	r0, [pc, #344]	; (80142a8 <tcp_receive+0xb1c>)
 8014150:	f003 fd0e 	bl	8017b70 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014158:	4b4e      	ldr	r3, [pc, #312]	; (8014294 <tcp_receive+0xb08>)
 801415a:	881b      	ldrh	r3, [r3, #0]
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	b29a      	uxth	r2, r3
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7fc fd85 	bl	8010c74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801416a:	4b4c      	ldr	r3, [pc, #304]	; (801429c <tcp_receive+0xb10>)
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	891b      	ldrh	r3, [r3, #8]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d006      	beq.n	8014182 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014174:	4b49      	ldr	r3, [pc, #292]	; (801429c <tcp_receive+0xb10>)
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	4a4d      	ldr	r2, [pc, #308]	; (80142b0 <tcp_receive+0xb24>)
 801417a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801417c:	4b47      	ldr	r3, [pc, #284]	; (801429c <tcp_receive+0xb10>)
 801417e:	2200      	movs	r2, #0
 8014180:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014182:	4b46      	ldr	r3, [pc, #280]	; (801429c <tcp_receive+0xb10>)
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	899b      	ldrh	r3, [r3, #12]
 8014188:	b29b      	uxth	r3, r3
 801418a:	4618      	mov	r0, r3
 801418c:	f7f7 fcc4 	bl	800bb18 <lwip_htons>
 8014190:	4603      	mov	r3, r0
 8014192:	b2db      	uxtb	r3, r3
 8014194:	f003 0301 	and.w	r3, r3, #1
 8014198:	2b00      	cmp	r3, #0
 801419a:	f000 80b8 	beq.w	801430e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801419e:	4b45      	ldr	r3, [pc, #276]	; (80142b4 <tcp_receive+0xb28>)
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	f043 0320 	orr.w	r3, r3, #32
 80141a6:	b2da      	uxtb	r2, r3
 80141a8:	4b42      	ldr	r3, [pc, #264]	; (80142b4 <tcp_receive+0xb28>)
 80141aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80141ac:	e0af      	b.n	801430e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b8:	68db      	ldr	r3, [r3, #12]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	4a36      	ldr	r2, [pc, #216]	; (8014298 <tcp_receive+0xb0c>)
 80141be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	891b      	ldrh	r3, [r3, #8]
 80141c4:	461c      	mov	r4, r3
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	68db      	ldr	r3, [r3, #12]
 80141ca:	899b      	ldrh	r3, [r3, #12]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7f7 fca2 	bl	800bb18 <lwip_htons>
 80141d4:	4603      	mov	r3, r0
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	f003 0303 	and.w	r3, r3, #3
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d001      	beq.n	80141e4 <tcp_receive+0xa58>
 80141e0:	2301      	movs	r3, #1
 80141e2:	e000      	b.n	80141e6 <tcp_receive+0xa5a>
 80141e4:	2300      	movs	r3, #0
 80141e6:	191a      	adds	r2, r3, r4
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ec:	441a      	add	r2, r3
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141f6:	461c      	mov	r4, r3
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	891b      	ldrh	r3, [r3, #8]
 80141fc:	461d      	mov	r5, r3
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	899b      	ldrh	r3, [r3, #12]
 8014204:	b29b      	uxth	r3, r3
 8014206:	4618      	mov	r0, r3
 8014208:	f7f7 fc86 	bl	800bb18 <lwip_htons>
 801420c:	4603      	mov	r3, r0
 801420e:	b2db      	uxtb	r3, r3
 8014210:	f003 0303 	and.w	r3, r3, #3
 8014214:	2b00      	cmp	r3, #0
 8014216:	d001      	beq.n	801421c <tcp_receive+0xa90>
 8014218:	2301      	movs	r3, #1
 801421a:	e000      	b.n	801421e <tcp_receive+0xa92>
 801421c:	2300      	movs	r3, #0
 801421e:	442b      	add	r3, r5
 8014220:	429c      	cmp	r4, r3
 8014222:	d206      	bcs.n	8014232 <tcp_receive+0xaa6>
 8014224:	4b1e      	ldr	r3, [pc, #120]	; (80142a0 <tcp_receive+0xb14>)
 8014226:	f240 622b 	movw	r2, #1579	; 0x62b
 801422a:	4923      	ldr	r1, [pc, #140]	; (80142b8 <tcp_receive+0xb2c>)
 801422c:	481e      	ldr	r0, [pc, #120]	; (80142a8 <tcp_receive+0xb1c>)
 801422e:	f003 fc9f 	bl	8017b70 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	891b      	ldrh	r3, [r3, #8]
 8014236:	461c      	mov	r4, r3
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	899b      	ldrh	r3, [r3, #12]
 801423e:	b29b      	uxth	r3, r3
 8014240:	4618      	mov	r0, r3
 8014242:	f7f7 fc69 	bl	800bb18 <lwip_htons>
 8014246:	4603      	mov	r3, r0
 8014248:	b2db      	uxtb	r3, r3
 801424a:	f003 0303 	and.w	r3, r3, #3
 801424e:	2b00      	cmp	r3, #0
 8014250:	d001      	beq.n	8014256 <tcp_receive+0xaca>
 8014252:	2301      	movs	r3, #1
 8014254:	e000      	b.n	8014258 <tcp_receive+0xacc>
 8014256:	2300      	movs	r3, #0
 8014258:	1919      	adds	r1, r3, r4
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801425e:	b28b      	uxth	r3, r1
 8014260:	1ad3      	subs	r3, r2, r3
 8014262:	b29a      	uxth	r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f7fc fd03 	bl	8010c74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	891b      	ldrh	r3, [r3, #8]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d028      	beq.n	80142ca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014278:	4b0d      	ldr	r3, [pc, #52]	; (80142b0 <tcp_receive+0xb24>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d01d      	beq.n	80142bc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014280:	4b0b      	ldr	r3, [pc, #44]	; (80142b0 <tcp_receive+0xb24>)
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	4619      	mov	r1, r3
 801428a:	4610      	mov	r0, r2
 801428c:	f7fb fccc 	bl	800fc28 <pbuf_cat>
 8014290:	e018      	b.n	80142c4 <tcp_receive+0xb38>
 8014292:	bf00      	nop
 8014294:	2401098a 	.word	0x2401098a
 8014298:	24010980 	.word	0x24010980
 801429c:	24010960 	.word	0x24010960
 80142a0:	0801c120 	.word	0x0801c120
 80142a4:	0801c55c 	.word	0x0801c55c
 80142a8:	0801c1c8 	.word	0x0801c1c8
 80142ac:	0801c598 	.word	0x0801c598
 80142b0:	24010990 	.word	0x24010990
 80142b4:	2401098d 	.word	0x2401098d
 80142b8:	0801c5b8 	.word	0x0801c5b8
            } else {
              recv_data = cseg->p;
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	4a70      	ldr	r2, [pc, #448]	; (8014484 <tcp_receive+0xcf8>)
 80142c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	2200      	movs	r2, #0
 80142c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	68db      	ldr	r3, [r3, #12]
 80142ce:	899b      	ldrh	r3, [r3, #12]
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7f7 fc20 	bl	800bb18 <lwip_htons>
 80142d8:	4603      	mov	r3, r0
 80142da:	b2db      	uxtb	r3, r3
 80142dc:	f003 0301 	and.w	r3, r3, #1
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d00d      	beq.n	8014300 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80142e4:	4b68      	ldr	r3, [pc, #416]	; (8014488 <tcp_receive+0xcfc>)
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	f043 0320 	orr.w	r3, r3, #32
 80142ec:	b2da      	uxtb	r2, r3
 80142ee:	4b66      	ldr	r3, [pc, #408]	; (8014488 <tcp_receive+0xcfc>)
 80142f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	7d1b      	ldrb	r3, [r3, #20]
 80142f6:	2b04      	cmp	r3, #4
 80142f8:	d102      	bne.n	8014300 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2207      	movs	r2, #7
 80142fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014308:	68b8      	ldr	r0, [r7, #8]
 801430a:	f7fd faf8 	bl	80118fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014312:	2b00      	cmp	r3, #0
 8014314:	d008      	beq.n	8014328 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	685a      	ldr	r2, [r3, #4]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014322:	429a      	cmp	r2, r3
 8014324:	f43f af43 	beq.w	80141ae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	8b5b      	ldrh	r3, [r3, #26]
 801432c:	f003 0301 	and.w	r3, r3, #1
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00e      	beq.n	8014352 <tcp_receive+0xbc6>
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	8b5b      	ldrh	r3, [r3, #26]
 8014338:	f023 0301 	bic.w	r3, r3, #1
 801433c:	b29a      	uxth	r2, r3
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	835a      	strh	r2, [r3, #26]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	8b5b      	ldrh	r3, [r3, #26]
 8014346:	f043 0302 	orr.w	r3, r3, #2
 801434a:	b29a      	uxth	r2, r3
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014350:	e188      	b.n	8014664 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	8b5b      	ldrh	r3, [r3, #26]
 8014356:	f043 0301 	orr.w	r3, r3, #1
 801435a:	b29a      	uxth	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014360:	e180      	b.n	8014664 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014366:	2b00      	cmp	r3, #0
 8014368:	d106      	bne.n	8014378 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801436a:	4848      	ldr	r0, [pc, #288]	; (801448c <tcp_receive+0xd00>)
 801436c:	f7fd fae0 	bl	8011930 <tcp_seg_copy>
 8014370:	4602      	mov	r2, r0
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	675a      	str	r2, [r3, #116]	; 0x74
 8014376:	e16d      	b.n	8014654 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014378:	2300      	movs	r3, #0
 801437a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014380:	63bb      	str	r3, [r7, #56]	; 0x38
 8014382:	e157      	b.n	8014634 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	685a      	ldr	r2, [r3, #4]
 801438a:	4b41      	ldr	r3, [pc, #260]	; (8014490 <tcp_receive+0xd04>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	429a      	cmp	r2, r3
 8014390:	d11d      	bne.n	80143ce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014392:	4b3e      	ldr	r3, [pc, #248]	; (801448c <tcp_receive+0xd00>)
 8014394:	891a      	ldrh	r2, [r3, #8]
 8014396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014398:	891b      	ldrh	r3, [r3, #8]
 801439a:	429a      	cmp	r2, r3
 801439c:	f240 814f 	bls.w	801463e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80143a0:	483a      	ldr	r0, [pc, #232]	; (801448c <tcp_receive+0xd00>)
 80143a2:	f7fd fac5 	bl	8011930 <tcp_seg_copy>
 80143a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	f000 8149 	beq.w	8014642 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80143b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d003      	beq.n	80143be <tcp_receive+0xc32>
                    prev->next = cseg;
 80143b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143b8:	697a      	ldr	r2, [r7, #20]
 80143ba:	601a      	str	r2, [r3, #0]
 80143bc:	e002      	b.n	80143c4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	697a      	ldr	r2, [r7, #20]
 80143c2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80143c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80143c6:	6978      	ldr	r0, [r7, #20]
 80143c8:	f7ff f8dc 	bl	8013584 <tcp_oos_insert_segment>
                }
                break;
 80143cc:	e139      	b.n	8014642 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80143ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d117      	bne.n	8014404 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80143d4:	4b2e      	ldr	r3, [pc, #184]	; (8014490 <tcp_receive+0xd04>)
 80143d6:	681a      	ldr	r2, [r3, #0]
 80143d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	1ad3      	subs	r3, r2, r3
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	da57      	bge.n	8014494 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80143e4:	4829      	ldr	r0, [pc, #164]	; (801448c <tcp_receive+0xd00>)
 80143e6:	f7fd faa3 	bl	8011930 <tcp_seg_copy>
 80143ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80143ec:	69bb      	ldr	r3, [r7, #24]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f000 8129 	beq.w	8014646 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	69ba      	ldr	r2, [r7, #24]
 80143f8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80143fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80143fc:	69b8      	ldr	r0, [r7, #24]
 80143fe:	f7ff f8c1 	bl	8013584 <tcp_oos_insert_segment>
                  }
                  break;
 8014402:	e120      	b.n	8014646 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014404:	4b22      	ldr	r3, [pc, #136]	; (8014490 <tcp_receive+0xd04>)
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	1ad3      	subs	r3, r2, r3
 8014410:	3b01      	subs	r3, #1
 8014412:	2b00      	cmp	r3, #0
 8014414:	db3e      	blt.n	8014494 <tcp_receive+0xd08>
 8014416:	4b1e      	ldr	r3, [pc, #120]	; (8014490 <tcp_receive+0xd04>)
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	1ad3      	subs	r3, r2, r3
 8014422:	3301      	adds	r3, #1
 8014424:	2b00      	cmp	r3, #0
 8014426:	dc35      	bgt.n	8014494 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014428:	4818      	ldr	r0, [pc, #96]	; (801448c <tcp_receive+0xd00>)
 801442a:	f7fd fa81 	bl	8011930 <tcp_seg_copy>
 801442e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	2b00      	cmp	r3, #0
 8014434:	f000 8109 	beq.w	801464a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014440:	8912      	ldrh	r2, [r2, #8]
 8014442:	441a      	add	r2, r3
 8014444:	4b12      	ldr	r3, [pc, #72]	; (8014490 <tcp_receive+0xd04>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	dd12      	ble.n	8014474 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801444e:	4b10      	ldr	r3, [pc, #64]	; (8014490 <tcp_receive+0xd04>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	b29a      	uxth	r2, r3
 8014454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	b29b      	uxth	r3, r3
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	b29a      	uxth	r2, r3
 8014460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014462:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014466:	685a      	ldr	r2, [r3, #4]
 8014468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801446a:	891b      	ldrh	r3, [r3, #8]
 801446c:	4619      	mov	r1, r3
 801446e:	4610      	mov	r0, r2
 8014470:	f7fb f988 	bl	800f784 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014476:	69fa      	ldr	r2, [r7, #28]
 8014478:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801447a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801447c:	69f8      	ldr	r0, [r7, #28]
 801447e:	f7ff f881 	bl	8013584 <tcp_oos_insert_segment>
                  }
                  break;
 8014482:	e0e2      	b.n	801464a <tcp_receive+0xebe>
 8014484:	24010990 	.word	0x24010990
 8014488:	2401098d 	.word	0x2401098d
 801448c:	24010960 	.word	0x24010960
 8014490:	24010980 	.word	0x24010980
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014496:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	f040 80c6 	bne.w	801462e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80144a2:	4b80      	ldr	r3, [pc, #512]	; (80146a4 <tcp_receive+0xf18>)
 80144a4:	681a      	ldr	r2, [r3, #0]
 80144a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a8:	68db      	ldr	r3, [r3, #12]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	f340 80bd 	ble.w	801462e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80144b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b6:	68db      	ldr	r3, [r3, #12]
 80144b8:	899b      	ldrh	r3, [r3, #12]
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	4618      	mov	r0, r3
 80144be:	f7f7 fb2b 	bl	800bb18 <lwip_htons>
 80144c2:	4603      	mov	r3, r0
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	f003 0301 	and.w	r3, r3, #1
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	f040 80bf 	bne.w	801464e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80144d0:	4875      	ldr	r0, [pc, #468]	; (80146a8 <tcp_receive+0xf1c>)
 80144d2:	f7fd fa2d 	bl	8011930 <tcp_seg_copy>
 80144d6:	4602      	mov	r2, r0
 80144d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80144dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	f000 80b6 	beq.w	8014652 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80144e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144ee:	8912      	ldrh	r2, [r2, #8]
 80144f0:	441a      	add	r2, r3
 80144f2:	4b6c      	ldr	r3, [pc, #432]	; (80146a4 <tcp_receive+0xf18>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	dd12      	ble.n	8014522 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80144fc:	4b69      	ldr	r3, [pc, #420]	; (80146a4 <tcp_receive+0xf18>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	b29a      	uxth	r2, r3
 8014502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	b29b      	uxth	r3, r3
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	b29a      	uxth	r2, r3
 801450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014510:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014514:	685a      	ldr	r2, [r3, #4]
 8014516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014518:	891b      	ldrh	r3, [r3, #8]
 801451a:	4619      	mov	r1, r3
 801451c:	4610      	mov	r0, r2
 801451e:	f7fb f931 	bl	800f784 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014522:	4b62      	ldr	r3, [pc, #392]	; (80146ac <tcp_receive+0xf20>)
 8014524:	881b      	ldrh	r3, [r3, #0]
 8014526:	461a      	mov	r2, r3
 8014528:	4b5e      	ldr	r3, [pc, #376]	; (80146a4 <tcp_receive+0xf18>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	441a      	add	r2, r3
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014532:	6879      	ldr	r1, [r7, #4]
 8014534:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014536:	440b      	add	r3, r1
 8014538:	1ad3      	subs	r3, r2, r3
 801453a:	2b00      	cmp	r3, #0
 801453c:	f340 8089 	ble.w	8014652 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	68db      	ldr	r3, [r3, #12]
 8014546:	899b      	ldrh	r3, [r3, #12]
 8014548:	b29b      	uxth	r3, r3
 801454a:	4618      	mov	r0, r3
 801454c:	f7f7 fae4 	bl	800bb18 <lwip_htons>
 8014550:	4603      	mov	r3, r0
 8014552:	b2db      	uxtb	r3, r3
 8014554:	f003 0301 	and.w	r3, r3, #1
 8014558:	2b00      	cmp	r3, #0
 801455a:	d022      	beq.n	80145a2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	68db      	ldr	r3, [r3, #12]
 8014562:	899b      	ldrh	r3, [r3, #12]
 8014564:	b29b      	uxth	r3, r3
 8014566:	b21b      	sxth	r3, r3
 8014568:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801456c:	b21c      	sxth	r4, r3
 801456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	899b      	ldrh	r3, [r3, #12]
 8014576:	b29b      	uxth	r3, r3
 8014578:	4618      	mov	r0, r3
 801457a:	f7f7 facd 	bl	800bb18 <lwip_htons>
 801457e:	4603      	mov	r3, r0
 8014580:	b2db      	uxtb	r3, r3
 8014582:	b29b      	uxth	r3, r3
 8014584:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014588:	b29b      	uxth	r3, r3
 801458a:	4618      	mov	r0, r3
 801458c:	f7f7 fac4 	bl	800bb18 <lwip_htons>
 8014590:	4603      	mov	r3, r0
 8014592:	b21b      	sxth	r3, r3
 8014594:	4323      	orrs	r3, r4
 8014596:	b21a      	sxth	r2, r3
 8014598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	b292      	uxth	r2, r2
 80145a0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145ac:	4413      	add	r3, r2
 80145ae:	b299      	uxth	r1, r3
 80145b0:	4b3c      	ldr	r3, [pc, #240]	; (80146a4 <tcp_receive+0xf18>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	b29a      	uxth	r2, r3
 80145b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	1a8a      	subs	r2, r1, r2
 80145bc:	b292      	uxth	r2, r2
 80145be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80145c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	685a      	ldr	r2, [r3, #4]
 80145c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	891b      	ldrh	r3, [r3, #8]
 80145cc:	4619      	mov	r1, r3
 80145ce:	4610      	mov	r0, r2
 80145d0:	f7fb f8d8 	bl	800f784 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80145d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	891c      	ldrh	r4, [r3, #8]
 80145da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	899b      	ldrh	r3, [r3, #12]
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7f7 fa97 	bl	800bb18 <lwip_htons>
 80145ea:	4603      	mov	r3, r0
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	f003 0303 	and.w	r3, r3, #3
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d001      	beq.n	80145fa <tcp_receive+0xe6e>
 80145f6:	2301      	movs	r3, #1
 80145f8:	e000      	b.n	80145fc <tcp_receive+0xe70>
 80145fa:	2300      	movs	r3, #0
 80145fc:	4423      	add	r3, r4
 80145fe:	b29a      	uxth	r2, r3
 8014600:	4b2a      	ldr	r3, [pc, #168]	; (80146ac <tcp_receive+0xf20>)
 8014602:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014604:	4b29      	ldr	r3, [pc, #164]	; (80146ac <tcp_receive+0xf20>)
 8014606:	881b      	ldrh	r3, [r3, #0]
 8014608:	461a      	mov	r2, r3
 801460a:	4b26      	ldr	r3, [pc, #152]	; (80146a4 <tcp_receive+0xf18>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	441a      	add	r2, r3
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014614:	6879      	ldr	r1, [r7, #4]
 8014616:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014618:	440b      	add	r3, r1
 801461a:	429a      	cmp	r2, r3
 801461c:	d019      	beq.n	8014652 <tcp_receive+0xec6>
 801461e:	4b24      	ldr	r3, [pc, #144]	; (80146b0 <tcp_receive+0xf24>)
 8014620:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014624:	4923      	ldr	r1, [pc, #140]	; (80146b4 <tcp_receive+0xf28>)
 8014626:	4824      	ldr	r0, [pc, #144]	; (80146b8 <tcp_receive+0xf2c>)
 8014628:	f003 faa2 	bl	8017b70 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801462c:	e011      	b.n	8014652 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	63bb      	str	r3, [r7, #56]	; 0x38
 8014634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014636:	2b00      	cmp	r3, #0
 8014638:	f47f aea4 	bne.w	8014384 <tcp_receive+0xbf8>
 801463c:	e00a      	b.n	8014654 <tcp_receive+0xec8>
                break;
 801463e:	bf00      	nop
 8014640:	e008      	b.n	8014654 <tcp_receive+0xec8>
                break;
 8014642:	bf00      	nop
 8014644:	e006      	b.n	8014654 <tcp_receive+0xec8>
                  break;
 8014646:	bf00      	nop
 8014648:	e004      	b.n	8014654 <tcp_receive+0xec8>
                  break;
 801464a:	bf00      	nop
 801464c:	e002      	b.n	8014654 <tcp_receive+0xec8>
                  break;
 801464e:	bf00      	nop
 8014650:	e000      	b.n	8014654 <tcp_receive+0xec8>
                break;
 8014652:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f001 fe8f 	bl	8016378 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801465a:	e003      	b.n	8014664 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f001 fe8b 	bl	8016378 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014662:	e01a      	b.n	801469a <tcp_receive+0xf0e>
 8014664:	e019      	b.n	801469a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014666:	4b0f      	ldr	r3, [pc, #60]	; (80146a4 <tcp_receive+0xf18>)
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801466e:	1ad3      	subs	r3, r2, r3
 8014670:	2b00      	cmp	r3, #0
 8014672:	db0a      	blt.n	801468a <tcp_receive+0xefe>
 8014674:	4b0b      	ldr	r3, [pc, #44]	; (80146a4 <tcp_receive+0xf18>)
 8014676:	681a      	ldr	r2, [r3, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801467c:	6879      	ldr	r1, [r7, #4]
 801467e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014680:	440b      	add	r3, r1
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	3301      	adds	r3, #1
 8014686:	2b00      	cmp	r3, #0
 8014688:	dd07      	ble.n	801469a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	8b5b      	ldrh	r3, [r3, #26]
 801468e:	f043 0302 	orr.w	r3, r3, #2
 8014692:	b29a      	uxth	r2, r3
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014698:	e7ff      	b.n	801469a <tcp_receive+0xf0e>
 801469a:	bf00      	nop
 801469c:	3750      	adds	r7, #80	; 0x50
 801469e:	46bd      	mov	sp, r7
 80146a0:	bdb0      	pop	{r4, r5, r7, pc}
 80146a2:	bf00      	nop
 80146a4:	24010980 	.word	0x24010980
 80146a8:	24010960 	.word	0x24010960
 80146ac:	2401098a 	.word	0x2401098a
 80146b0:	0801c120 	.word	0x0801c120
 80146b4:	0801c524 	.word	0x0801c524
 80146b8:	0801c1c8 	.word	0x0801c1c8

080146bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80146c2:	4b15      	ldr	r3, [pc, #84]	; (8014718 <tcp_get_next_optbyte+0x5c>)
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	b291      	uxth	r1, r2
 80146ca:	4a13      	ldr	r2, [pc, #76]	; (8014718 <tcp_get_next_optbyte+0x5c>)
 80146cc:	8011      	strh	r1, [r2, #0]
 80146ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80146d0:	4b12      	ldr	r3, [pc, #72]	; (801471c <tcp_get_next_optbyte+0x60>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d004      	beq.n	80146e2 <tcp_get_next_optbyte+0x26>
 80146d8:	4b11      	ldr	r3, [pc, #68]	; (8014720 <tcp_get_next_optbyte+0x64>)
 80146da:	881b      	ldrh	r3, [r3, #0]
 80146dc:	88fa      	ldrh	r2, [r7, #6]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d208      	bcs.n	80146f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80146e2:	4b10      	ldr	r3, [pc, #64]	; (8014724 <tcp_get_next_optbyte+0x68>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	3314      	adds	r3, #20
 80146e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80146ea:	88fb      	ldrh	r3, [r7, #6]
 80146ec:	683a      	ldr	r2, [r7, #0]
 80146ee:	4413      	add	r3, r2
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	e00b      	b.n	801470c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80146f4:	88fb      	ldrh	r3, [r7, #6]
 80146f6:	b2da      	uxtb	r2, r3
 80146f8:	4b09      	ldr	r3, [pc, #36]	; (8014720 <tcp_get_next_optbyte+0x64>)
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014702:	4b06      	ldr	r3, [pc, #24]	; (801471c <tcp_get_next_optbyte+0x60>)
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	797b      	ldrb	r3, [r7, #5]
 8014708:	4413      	add	r3, r2
 801470a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801470c:	4618      	mov	r0, r3
 801470e:	370c      	adds	r7, #12
 8014710:	46bd      	mov	sp, r7
 8014712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014716:	4770      	bx	lr
 8014718:	2401097c 	.word	0x2401097c
 801471c:	24010978 	.word	0x24010978
 8014720:	24010976 	.word	0x24010976
 8014724:	24010970 	.word	0x24010970

08014728 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d106      	bne.n	8014744 <tcp_parseopt+0x1c>
 8014736:	4b32      	ldr	r3, [pc, #200]	; (8014800 <tcp_parseopt+0xd8>)
 8014738:	f240 727d 	movw	r2, #1917	; 0x77d
 801473c:	4931      	ldr	r1, [pc, #196]	; (8014804 <tcp_parseopt+0xdc>)
 801473e:	4832      	ldr	r0, [pc, #200]	; (8014808 <tcp_parseopt+0xe0>)
 8014740:	f003 fa16 	bl	8017b70 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014744:	4b31      	ldr	r3, [pc, #196]	; (801480c <tcp_parseopt+0xe4>)
 8014746:	881b      	ldrh	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d056      	beq.n	80147fa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801474c:	4b30      	ldr	r3, [pc, #192]	; (8014810 <tcp_parseopt+0xe8>)
 801474e:	2200      	movs	r2, #0
 8014750:	801a      	strh	r2, [r3, #0]
 8014752:	e046      	b.n	80147e2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014754:	f7ff ffb2 	bl	80146bc <tcp_get_next_optbyte>
 8014758:	4603      	mov	r3, r0
 801475a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801475c:	7bfb      	ldrb	r3, [r7, #15]
 801475e:	2b02      	cmp	r3, #2
 8014760:	d006      	beq.n	8014770 <tcp_parseopt+0x48>
 8014762:	2b02      	cmp	r3, #2
 8014764:	dc2c      	bgt.n	80147c0 <tcp_parseopt+0x98>
 8014766:	2b00      	cmp	r3, #0
 8014768:	d042      	beq.n	80147f0 <tcp_parseopt+0xc8>
 801476a:	2b01      	cmp	r3, #1
 801476c:	d128      	bne.n	80147c0 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801476e:	e038      	b.n	80147e2 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014770:	f7ff ffa4 	bl	80146bc <tcp_get_next_optbyte>
 8014774:	4603      	mov	r3, r0
 8014776:	2b04      	cmp	r3, #4
 8014778:	d13c      	bne.n	80147f4 <tcp_parseopt+0xcc>
 801477a:	4b25      	ldr	r3, [pc, #148]	; (8014810 <tcp_parseopt+0xe8>)
 801477c:	881b      	ldrh	r3, [r3, #0]
 801477e:	3301      	adds	r3, #1
 8014780:	4a22      	ldr	r2, [pc, #136]	; (801480c <tcp_parseopt+0xe4>)
 8014782:	8812      	ldrh	r2, [r2, #0]
 8014784:	4293      	cmp	r3, r2
 8014786:	da35      	bge.n	80147f4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014788:	f7ff ff98 	bl	80146bc <tcp_get_next_optbyte>
 801478c:	4603      	mov	r3, r0
 801478e:	b29b      	uxth	r3, r3
 8014790:	021b      	lsls	r3, r3, #8
 8014792:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014794:	f7ff ff92 	bl	80146bc <tcp_get_next_optbyte>
 8014798:	4603      	mov	r3, r0
 801479a:	b29a      	uxth	r2, r3
 801479c:	89bb      	ldrh	r3, [r7, #12]
 801479e:	4313      	orrs	r3, r2
 80147a0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80147a2:	89bb      	ldrh	r3, [r7, #12]
 80147a4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80147a8:	4293      	cmp	r3, r2
 80147aa:	d804      	bhi.n	80147b6 <tcp_parseopt+0x8e>
 80147ac:	89bb      	ldrh	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d001      	beq.n	80147b6 <tcp_parseopt+0x8e>
 80147b2:	89ba      	ldrh	r2, [r7, #12]
 80147b4:	e001      	b.n	80147ba <tcp_parseopt+0x92>
 80147b6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80147be:	e010      	b.n	80147e2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80147c0:	f7ff ff7c 	bl	80146bc <tcp_get_next_optbyte>
 80147c4:	4603      	mov	r3, r0
 80147c6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80147c8:	7afb      	ldrb	r3, [r7, #11]
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d914      	bls.n	80147f8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80147ce:	7afb      	ldrb	r3, [r7, #11]
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	4b0f      	ldr	r3, [pc, #60]	; (8014810 <tcp_parseopt+0xe8>)
 80147d4:	881b      	ldrh	r3, [r3, #0]
 80147d6:	4413      	add	r3, r2
 80147d8:	b29b      	uxth	r3, r3
 80147da:	3b02      	subs	r3, #2
 80147dc:	b29a      	uxth	r2, r3
 80147de:	4b0c      	ldr	r3, [pc, #48]	; (8014810 <tcp_parseopt+0xe8>)
 80147e0:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80147e2:	4b0b      	ldr	r3, [pc, #44]	; (8014810 <tcp_parseopt+0xe8>)
 80147e4:	881a      	ldrh	r2, [r3, #0]
 80147e6:	4b09      	ldr	r3, [pc, #36]	; (801480c <tcp_parseopt+0xe4>)
 80147e8:	881b      	ldrh	r3, [r3, #0]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d3b2      	bcc.n	8014754 <tcp_parseopt+0x2c>
 80147ee:	e004      	b.n	80147fa <tcp_parseopt+0xd2>
          return;
 80147f0:	bf00      	nop
 80147f2:	e002      	b.n	80147fa <tcp_parseopt+0xd2>
            return;
 80147f4:	bf00      	nop
 80147f6:	e000      	b.n	80147fa <tcp_parseopt+0xd2>
            return;
 80147f8:	bf00      	nop
      }
    }
  }
}
 80147fa:	3710      	adds	r7, #16
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}
 8014800:	0801c120 	.word	0x0801c120
 8014804:	0801c5e0 	.word	0x0801c5e0
 8014808:	0801c1c8 	.word	0x0801c1c8
 801480c:	24010974 	.word	0x24010974
 8014810:	2401097c 	.word	0x2401097c

08014814 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014814:	b480      	push	{r7}
 8014816:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014818:	4b05      	ldr	r3, [pc, #20]	; (8014830 <tcp_trigger_input_pcb_close+0x1c>)
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	f043 0310 	orr.w	r3, r3, #16
 8014820:	b2da      	uxtb	r2, r3
 8014822:	4b03      	ldr	r3, [pc, #12]	; (8014830 <tcp_trigger_input_pcb_close+0x1c>)
 8014824:	701a      	strb	r2, [r3, #0]
}
 8014826:	bf00      	nop
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr
 8014830:	2401098d 	.word	0x2401098d

08014834 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b084      	sub	sp, #16
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d00a      	beq.n	801485c <tcp_route+0x28>
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	7a1b      	ldrb	r3, [r3, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d006      	beq.n	801485c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	7a1b      	ldrb	r3, [r3, #8]
 8014852:	4618      	mov	r0, r3
 8014854:	f7fa fd8c 	bl	800f370 <netif_get_by_index>
 8014858:	4603      	mov	r3, r0
 801485a:	e003      	b.n	8014864 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7f8 fc3b 	bl	800d0d8 <ip4_route>
 8014862:	4603      	mov	r3, r0
  }
}
 8014864:	4618      	mov	r0, r3
 8014866:	3710      	adds	r7, #16
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801486c:	b590      	push	{r4, r7, lr}
 801486e:	b087      	sub	sp, #28
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	603b      	str	r3, [r7, #0]
 8014878:	4613      	mov	r3, r2
 801487a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d105      	bne.n	801488e <tcp_create_segment+0x22>
 8014882:	4b44      	ldr	r3, [pc, #272]	; (8014994 <tcp_create_segment+0x128>)
 8014884:	22a3      	movs	r2, #163	; 0xa3
 8014886:	4944      	ldr	r1, [pc, #272]	; (8014998 <tcp_create_segment+0x12c>)
 8014888:	4844      	ldr	r0, [pc, #272]	; (801499c <tcp_create_segment+0x130>)
 801488a:	f003 f971 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d105      	bne.n	80148a0 <tcp_create_segment+0x34>
 8014894:	4b3f      	ldr	r3, [pc, #252]	; (8014994 <tcp_create_segment+0x128>)
 8014896:	22a4      	movs	r2, #164	; 0xa4
 8014898:	4941      	ldr	r1, [pc, #260]	; (80149a0 <tcp_create_segment+0x134>)
 801489a:	4840      	ldr	r0, [pc, #256]	; (801499c <tcp_create_segment+0x130>)
 801489c:	f003 f968 	bl	8017b70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80148a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148a4:	009b      	lsls	r3, r3, #2
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	f003 0304 	and.w	r3, r3, #4
 80148ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80148ae:	2003      	movs	r0, #3
 80148b0:	f7fa f9a8 	bl	800ec04 <memp_malloc>
 80148b4:	6138      	str	r0, [r7, #16]
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d104      	bne.n	80148c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80148bc:	68b8      	ldr	r0, [r7, #8]
 80148be:	f7fb f8e5 	bl	800fa8c <pbuf_free>
    return NULL;
 80148c2:	2300      	movs	r3, #0
 80148c4:	e061      	b.n	801498a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80148cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	2200      	movs	r2, #0
 80148d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	68ba      	ldr	r2, [r7, #8]
 80148d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	891a      	ldrh	r2, [r3, #8]
 80148de:	7dfb      	ldrb	r3, [r7, #23]
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d205      	bcs.n	80148f2 <tcp_create_segment+0x86>
 80148e6:	4b2b      	ldr	r3, [pc, #172]	; (8014994 <tcp_create_segment+0x128>)
 80148e8:	22b0      	movs	r2, #176	; 0xb0
 80148ea:	492e      	ldr	r1, [pc, #184]	; (80149a4 <tcp_create_segment+0x138>)
 80148ec:	482b      	ldr	r0, [pc, #172]	; (801499c <tcp_create_segment+0x130>)
 80148ee:	f003 f93f 	bl	8017b70 <iprintf>
  seg->len = p->tot_len - optlen;
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	891a      	ldrh	r2, [r3, #8]
 80148f6:	7dfb      	ldrb	r3, [r7, #23]
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	1ad3      	subs	r3, r2, r3
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014902:	2114      	movs	r1, #20
 8014904:	68b8      	ldr	r0, [r7, #8]
 8014906:	f7fb f82b 	bl	800f960 <pbuf_add_header>
 801490a:	4603      	mov	r3, r0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d004      	beq.n	801491a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014910:	6938      	ldr	r0, [r7, #16]
 8014912:	f7fc fff4 	bl	80118fe <tcp_seg_free>
    return NULL;
 8014916:	2300      	movs	r3, #0
 8014918:	e037      	b.n	801498a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	685a      	ldr	r2, [r3, #4]
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	8ada      	ldrh	r2, [r3, #22]
 8014928:	693b      	ldr	r3, [r7, #16]
 801492a:	68dc      	ldr	r4, [r3, #12]
 801492c:	4610      	mov	r0, r2
 801492e:	f7f7 f8f3 	bl	800bb18 <lwip_htons>
 8014932:	4603      	mov	r3, r0
 8014934:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	8b1a      	ldrh	r2, [r3, #24]
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	68dc      	ldr	r4, [r3, #12]
 801493e:	4610      	mov	r0, r2
 8014940:	f7f7 f8ea 	bl	800bb18 <lwip_htons>
 8014944:	4603      	mov	r3, r0
 8014946:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	68dc      	ldr	r4, [r3, #12]
 801494c:	6838      	ldr	r0, [r7, #0]
 801494e:	f7f7 f8f8 	bl	800bb42 <lwip_htonl>
 8014952:	4603      	mov	r3, r0
 8014954:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014956:	7dfb      	ldrb	r3, [r7, #23]
 8014958:	089b      	lsrs	r3, r3, #2
 801495a:	b2db      	uxtb	r3, r3
 801495c:	b29b      	uxth	r3, r3
 801495e:	3305      	adds	r3, #5
 8014960:	b29b      	uxth	r3, r3
 8014962:	031b      	lsls	r3, r3, #12
 8014964:	b29a      	uxth	r2, r3
 8014966:	79fb      	ldrb	r3, [r7, #7]
 8014968:	b29b      	uxth	r3, r3
 801496a:	4313      	orrs	r3, r2
 801496c:	b29a      	uxth	r2, r3
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	68dc      	ldr	r4, [r3, #12]
 8014972:	4610      	mov	r0, r2
 8014974:	f7f7 f8d0 	bl	800bb18 <lwip_htons>
 8014978:	4603      	mov	r3, r0
 801497a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	68db      	ldr	r3, [r3, #12]
 8014980:	2200      	movs	r2, #0
 8014982:	749a      	strb	r2, [r3, #18]
 8014984:	2200      	movs	r2, #0
 8014986:	74da      	strb	r2, [r3, #19]
  return seg;
 8014988:	693b      	ldr	r3, [r7, #16]
}
 801498a:	4618      	mov	r0, r3
 801498c:	371c      	adds	r7, #28
 801498e:	46bd      	mov	sp, r7
 8014990:	bd90      	pop	{r4, r7, pc}
 8014992:	bf00      	nop
 8014994:	0801c5fc 	.word	0x0801c5fc
 8014998:	0801c68c 	.word	0x0801c68c
 801499c:	0801c6ac 	.word	0x0801c6ac
 80149a0:	0801c6d4 	.word	0x0801c6d4
 80149a4:	0801c6f8 	.word	0x0801c6f8

080149a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b086      	sub	sp, #24
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	607b      	str	r3, [r7, #4]
 80149b0:	4603      	mov	r3, r0
 80149b2:	73fb      	strb	r3, [r7, #15]
 80149b4:	460b      	mov	r3, r1
 80149b6:	81bb      	strh	r3, [r7, #12]
 80149b8:	4613      	mov	r3, r2
 80149ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80149bc:	89bb      	ldrh	r3, [r7, #12]
 80149be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d105      	bne.n	80149d2 <tcp_pbuf_prealloc+0x2a>
 80149c6:	4b30      	ldr	r3, [pc, #192]	; (8014a88 <tcp_pbuf_prealloc+0xe0>)
 80149c8:	22e8      	movs	r2, #232	; 0xe8
 80149ca:	4930      	ldr	r1, [pc, #192]	; (8014a8c <tcp_pbuf_prealloc+0xe4>)
 80149cc:	4830      	ldr	r0, [pc, #192]	; (8014a90 <tcp_pbuf_prealloc+0xe8>)
 80149ce:	f003 f8cf 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80149d2:	6a3b      	ldr	r3, [r7, #32]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d105      	bne.n	80149e4 <tcp_pbuf_prealloc+0x3c>
 80149d8:	4b2b      	ldr	r3, [pc, #172]	; (8014a88 <tcp_pbuf_prealloc+0xe0>)
 80149da:	22e9      	movs	r2, #233	; 0xe9
 80149dc:	492d      	ldr	r1, [pc, #180]	; (8014a94 <tcp_pbuf_prealloc+0xec>)
 80149de:	482c      	ldr	r0, [pc, #176]	; (8014a90 <tcp_pbuf_prealloc+0xe8>)
 80149e0:	f003 f8c6 	bl	8017b70 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80149e4:	89ba      	ldrh	r2, [r7, #12]
 80149e6:	897b      	ldrh	r3, [r7, #10]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d221      	bcs.n	8014a30 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80149ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149f0:	f003 0302 	and.w	r3, r3, #2
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d111      	bne.n	8014a1c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80149f8:	6a3b      	ldr	r3, [r7, #32]
 80149fa:	8b5b      	ldrh	r3, [r3, #26]
 80149fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d115      	bne.n	8014a30 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014a04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d007      	beq.n	8014a1c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014a0c:	6a3b      	ldr	r3, [r7, #32]
 8014a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d103      	bne.n	8014a1c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014a14:	6a3b      	ldr	r3, [r7, #32]
 8014a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d009      	beq.n	8014a30 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014a1c:	89bb      	ldrh	r3, [r7, #12]
 8014a1e:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8014a22:	f023 0203 	bic.w	r2, r3, #3
 8014a26:	897b      	ldrh	r3, [r7, #10]
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	bf28      	it	cs
 8014a2c:	4613      	movcs	r3, r2
 8014a2e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014a30:	8af9      	ldrh	r1, [r7, #22]
 8014a32:	7bfb      	ldrb	r3, [r7, #15]
 8014a34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7fa fd43 	bl	800f4c4 <pbuf_alloc>
 8014a3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e019      	b.n	8014a7e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d006      	beq.n	8014a60 <tcp_pbuf_prealloc+0xb8>
 8014a52:	4b0d      	ldr	r3, [pc, #52]	; (8014a88 <tcp_pbuf_prealloc+0xe0>)
 8014a54:	f240 120b 	movw	r2, #267	; 0x10b
 8014a58:	490f      	ldr	r1, [pc, #60]	; (8014a98 <tcp_pbuf_prealloc+0xf0>)
 8014a5a:	480d      	ldr	r0, [pc, #52]	; (8014a90 <tcp_pbuf_prealloc+0xe8>)
 8014a5c:	f003 f888 	bl	8017b70 <iprintf>
  *oversize = p->len - length;
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	895a      	ldrh	r2, [r3, #10]
 8014a64:	89bb      	ldrh	r3, [r7, #12]
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014a6e:	693b      	ldr	r3, [r7, #16]
 8014a70:	89ba      	ldrh	r2, [r7, #12]
 8014a72:	811a      	strh	r2, [r3, #8]
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	891a      	ldrh	r2, [r3, #8]
 8014a78:	693b      	ldr	r3, [r7, #16]
 8014a7a:	815a      	strh	r2, [r3, #10]
  return p;
 8014a7c:	693b      	ldr	r3, [r7, #16]
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3718      	adds	r7, #24
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	0801c5fc 	.word	0x0801c5fc
 8014a8c:	0801c710 	.word	0x0801c710
 8014a90:	0801c6ac 	.word	0x0801c6ac
 8014a94:	0801c734 	.word	0x0801c734
 8014a98:	0801c754 	.word	0x0801c754

08014a9c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	460b      	mov	r3, r1
 8014aa6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d106      	bne.n	8014abc <tcp_write_checks+0x20>
 8014aae:	4b33      	ldr	r3, [pc, #204]	; (8014b7c <tcp_write_checks+0xe0>)
 8014ab0:	f240 1233 	movw	r2, #307	; 0x133
 8014ab4:	4932      	ldr	r1, [pc, #200]	; (8014b80 <tcp_write_checks+0xe4>)
 8014ab6:	4833      	ldr	r0, [pc, #204]	; (8014b84 <tcp_write_checks+0xe8>)
 8014ab8:	f003 f85a 	bl	8017b70 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	7d1b      	ldrb	r3, [r3, #20]
 8014ac0:	2b04      	cmp	r3, #4
 8014ac2:	d00e      	beq.n	8014ae2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014ac8:	2b07      	cmp	r3, #7
 8014aca:	d00a      	beq.n	8014ae2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014ad0:	2b02      	cmp	r3, #2
 8014ad2:	d006      	beq.n	8014ae2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014ad8:	2b03      	cmp	r3, #3
 8014ada:	d002      	beq.n	8014ae2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014adc:	f06f 030a 	mvn.w	r3, #10
 8014ae0:	e048      	b.n	8014b74 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014ae2:	887b      	ldrh	r3, [r7, #2]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <tcp_write_checks+0x50>
    return ERR_OK;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	e043      	b.n	8014b74 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014af2:	887a      	ldrh	r2, [r7, #2]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d909      	bls.n	8014b0c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	8b5b      	ldrh	r3, [r3, #26]
 8014afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b00:	b29a      	uxth	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014b06:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0a:	e033      	b.n	8014b74 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b12:	2b0f      	cmp	r3, #15
 8014b14:	d909      	bls.n	8014b2a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	8b5b      	ldrh	r3, [r3, #26]
 8014b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b1e:	b29a      	uxth	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014b24:	f04f 33ff 	mov.w	r3, #4294967295
 8014b28:	e024      	b.n	8014b74 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d00f      	beq.n	8014b54 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d11a      	bne.n	8014b72 <tcp_write_checks+0xd6>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d116      	bne.n	8014b72 <tcp_write_checks+0xd6>
 8014b44:	4b0d      	ldr	r3, [pc, #52]	; (8014b7c <tcp_write_checks+0xe0>)
 8014b46:	f240 1255 	movw	r2, #341	; 0x155
 8014b4a:	490f      	ldr	r1, [pc, #60]	; (8014b88 <tcp_write_checks+0xec>)
 8014b4c:	480d      	ldr	r0, [pc, #52]	; (8014b84 <tcp_write_checks+0xe8>)
 8014b4e:	f003 f80f 	bl	8017b70 <iprintf>
 8014b52:	e00e      	b.n	8014b72 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d103      	bne.n	8014b64 <tcp_write_checks+0xc8>
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d006      	beq.n	8014b72 <tcp_write_checks+0xd6>
 8014b64:	4b05      	ldr	r3, [pc, #20]	; (8014b7c <tcp_write_checks+0xe0>)
 8014b66:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014b6a:	4908      	ldr	r1, [pc, #32]	; (8014b8c <tcp_write_checks+0xf0>)
 8014b6c:	4805      	ldr	r0, [pc, #20]	; (8014b84 <tcp_write_checks+0xe8>)
 8014b6e:	f002 ffff 	bl	8017b70 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014b72:	2300      	movs	r3, #0
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	3708      	adds	r7, #8
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}
 8014b7c:	0801c5fc 	.word	0x0801c5fc
 8014b80:	0801c768 	.word	0x0801c768
 8014b84:	0801c6ac 	.word	0x0801c6ac
 8014b88:	0801c788 	.word	0x0801c788
 8014b8c:	0801c7c4 	.word	0x0801c7c4

08014b90 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014b90:	b590      	push	{r4, r7, lr}
 8014b92:	b09b      	sub	sp, #108	; 0x6c
 8014b94:	af04      	add	r7, sp, #16
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	4611      	mov	r1, r2
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	80fb      	strh	r3, [r7, #6]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014baa:	2300      	movs	r3, #0
 8014bac:	653b      	str	r3, [r7, #80]	; 0x50
 8014bae:	2300      	movs	r3, #0
 8014bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014bba:	2300      	movs	r3, #0
 8014bbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d109      	bne.n	8014bec <tcp_write+0x5c>
 8014bd8:	4ba5      	ldr	r3, [pc, #660]	; (8014e70 <tcp_write+0x2e0>)
 8014bda:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014bde:	49a5      	ldr	r1, [pc, #660]	; (8014e74 <tcp_write+0x2e4>)
 8014be0:	48a5      	ldr	r0, [pc, #660]	; (8014e78 <tcp_write+0x2e8>)
 8014be2:	f002 ffc5 	bl	8017b70 <iprintf>
 8014be6:	f06f 030f 	mvn.w	r3, #15
 8014bea:	e32c      	b.n	8015246 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014bf2:	085b      	lsrs	r3, r3, #1
 8014bf4:	b29a      	uxth	r2, r3
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	bf28      	it	cs
 8014bfe:	4613      	movcs	r3, r2
 8014c00:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d102      	bne.n	8014c0e <tcp_write+0x7e>
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c0c:	e000      	b.n	8014c10 <tcp_write+0x80>
 8014c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c10:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT_CORE_LOCKED();
 8014c12:	f7f1 f90d 	bl	8005e30 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d109      	bne.n	8014c30 <tcp_write+0xa0>
 8014c1c:	4b94      	ldr	r3, [pc, #592]	; (8014e70 <tcp_write+0x2e0>)
 8014c1e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014c22:	4996      	ldr	r1, [pc, #600]	; (8014e7c <tcp_write+0x2ec>)
 8014c24:	4894      	ldr	r0, [pc, #592]	; (8014e78 <tcp_write+0x2e8>)
 8014c26:	f002 ffa3 	bl	8017b70 <iprintf>
 8014c2a:	f06f 030f 	mvn.w	r3, #15
 8014c2e:	e30a      	b.n	8015246 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014c30:	88fb      	ldrh	r3, [r7, #6]
 8014c32:	4619      	mov	r1, r3
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f7ff ff31 	bl	8014a9c <tcp_write_checks>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014c40:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d002      	beq.n	8014c4e <tcp_write+0xbe>
    return err;
 8014c48:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014c4c:	e2fb      	b.n	8015246 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c58:	2300      	movs	r3, #0
 8014c5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f000 80f6 	beq.w	8014e54 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8014c6e:	e002      	b.n	8014c76 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 8014c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d1f8      	bne.n	8014c70 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c80:	7a9b      	ldrb	r3, [r3, #10]
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	f003 0304 	and.w	r3, r3, #4
 8014c8a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014c8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c90:	891b      	ldrh	r3, [r3, #8]
 8014c92:	4619      	mov	r1, r3
 8014c94:	8c3b      	ldrh	r3, [r7, #32]
 8014c96:	440b      	add	r3, r1
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	da06      	bge.n	8014caa <tcp_write+0x11a>
 8014c9c:	4b74      	ldr	r3, [pc, #464]	; (8014e70 <tcp_write+0x2e0>)
 8014c9e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014ca2:	4977      	ldr	r1, [pc, #476]	; (8014e80 <tcp_write+0x2f0>)
 8014ca4:	4874      	ldr	r0, [pc, #464]	; (8014e78 <tcp_write+0x2e8>)
 8014ca6:	f002 ff63 	bl	8017b70 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cac:	891a      	ldrh	r2, [r3, #8]
 8014cae:	8c3b      	ldrh	r3, [r7, #32]
 8014cb0:	4413      	add	r3, r2
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014cb6:	1ad3      	subs	r3, r2, r3
 8014cb8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014cc0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014cc2:	8a7b      	ldrh	r3, [r7, #18]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d026      	beq.n	8014d16 <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014cc8:	8a7b      	ldrh	r3, [r7, #18]
 8014cca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d206      	bcs.n	8014cde <tcp_write+0x14e>
 8014cd0:	4b67      	ldr	r3, [pc, #412]	; (8014e70 <tcp_write+0x2e0>)
 8014cd2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014cd6:	496b      	ldr	r1, [pc, #428]	; (8014e84 <tcp_write+0x2f4>)
 8014cd8:	4867      	ldr	r0, [pc, #412]	; (8014e78 <tcp_write+0x2e8>)
 8014cda:	f002 ff49 	bl	8017b70 <iprintf>
      seg = last_unsent;
 8014cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014ce2:	8a7b      	ldrh	r3, [r7, #18]
 8014ce4:	88fa      	ldrh	r2, [r7, #6]
 8014ce6:	4293      	cmp	r3, r2
 8014ce8:	bf28      	it	cs
 8014cea:	4613      	movcs	r3, r2
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	bf28      	it	cs
 8014cf4:	4613      	movcs	r3, r2
 8014cf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014cf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014cfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014cfe:	4413      	add	r3, r2
 8014d00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014d04:	8a7a      	ldrh	r2, [r7, #18]
 8014d06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d08:	1ad3      	subs	r3, r2, r3
 8014d0a:	b29b      	uxth	r3, r3
 8014d0c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014d0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014d12:	1ad3      	subs	r3, r2, r3
 8014d14:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014d16:	8a7b      	ldrh	r3, [r7, #18]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00b      	beq.n	8014d34 <tcp_write+0x1a4>
 8014d1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d20:	88fb      	ldrh	r3, [r7, #6]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d006      	beq.n	8014d34 <tcp_write+0x1a4>
 8014d26:	4b52      	ldr	r3, [pc, #328]	; (8014e70 <tcp_write+0x2e0>)
 8014d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d2c:	4956      	ldr	r1, [pc, #344]	; (8014e88 <tcp_write+0x2f8>)
 8014d2e:	4852      	ldr	r0, [pc, #328]	; (8014e78 <tcp_write+0x2e8>)
 8014d30:	f002 ff1e 	bl	8017b70 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014d34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d38:	88fb      	ldrh	r3, [r7, #6]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	f080 8167 	bcs.w	801500e <tcp_write+0x47e>
 8014d40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	f000 8163 	beq.w	801500e <tcp_write+0x47e>
 8014d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d4a:	891b      	ldrh	r3, [r3, #8]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	f000 815e 	beq.w	801500e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014d52:	88fa      	ldrh	r2, [r7, #6]
 8014d54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d58:	1ad2      	subs	r2, r2, r3
 8014d5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	bfa8      	it	ge
 8014d60:	4613      	movge	r3, r2
 8014d62:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d66:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014d68:	797b      	ldrb	r3, [r7, #5]
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d027      	beq.n	8014dc2 <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014d72:	f107 0012 	add.w	r0, r7, #18
 8014d76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d78:	8bf9      	ldrh	r1, [r7, #30]
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	9302      	str	r3, [sp, #8]
 8014d7e:	797b      	ldrb	r3, [r7, #5]
 8014d80:	9301      	str	r3, [sp, #4]
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	9300      	str	r3, [sp, #0]
 8014d86:	4603      	mov	r3, r0
 8014d88:	2000      	movs	r0, #0
 8014d8a:	f7ff fe0d 	bl	80149a8 <tcp_pbuf_prealloc>
 8014d8e:	6578      	str	r0, [r7, #84]	; 0x54
 8014d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	f000 8225 	beq.w	80151e2 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d9a:	6858      	ldr	r0, [r3, #4]
 8014d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014da0:	68ba      	ldr	r2, [r7, #8]
 8014da2:	4413      	add	r3, r2
 8014da4:	8bfa      	ldrh	r2, [r7, #30]
 8014da6:	4619      	mov	r1, r3
 8014da8:	f002 fe1d 	bl	80179e6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014dac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014dae:	f7fa fefb 	bl	800fba8 <pbuf_clen>
 8014db2:	4603      	mov	r3, r0
 8014db4:	461a      	mov	r2, r3
 8014db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014dba:	4413      	add	r3, r2
 8014dbc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014dc0:	e041      	b.n	8014e46 <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8014dc8:	e002      	b.n	8014dd0 <tcp_write+0x240>
 8014dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	637b      	str	r3, [r7, #52]	; 0x34
 8014dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d1f8      	bne.n	8014dca <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dda:	7b1b      	ldrb	r3, [r3, #12]
 8014ddc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d115      	bne.n	8014e10 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014dea:	8952      	ldrh	r2, [r2, #10]
 8014dec:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014dee:	68ba      	ldr	r2, [r7, #8]
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d10d      	bne.n	8014e10 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d006      	beq.n	8014e0a <tcp_write+0x27a>
 8014dfc:	4b1c      	ldr	r3, [pc, #112]	; (8014e70 <tcp_write+0x2e0>)
 8014dfe:	f240 2231 	movw	r2, #561	; 0x231
 8014e02:	4922      	ldr	r1, [pc, #136]	; (8014e8c <tcp_write+0x2fc>)
 8014e04:	481c      	ldr	r0, [pc, #112]	; (8014e78 <tcp_write+0x2e8>)
 8014e06:	f002 feb3 	bl	8017b70 <iprintf>
          extendlen = seglen;
 8014e0a:	8bfb      	ldrh	r3, [r7, #30]
 8014e0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014e0e:	e01a      	b.n	8014e46 <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014e10:	8bfb      	ldrh	r3, [r7, #30]
 8014e12:	2201      	movs	r2, #1
 8014e14:	4619      	mov	r1, r3
 8014e16:	2000      	movs	r0, #0
 8014e18:	f7fa fb54 	bl	800f4c4 <pbuf_alloc>
 8014e1c:	6578      	str	r0, [r7, #84]	; 0x54
 8014e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	f000 81e0 	beq.w	80151e6 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014e26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e2a:	68ba      	ldr	r2, [r7, #8]
 8014e2c:	441a      	add	r2, r3
 8014e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e30:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014e32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014e34:	f7fa feb8 	bl	800fba8 <pbuf_clen>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014e40:	4413      	add	r3, r2
 8014e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014e46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014e4a:	8bfb      	ldrh	r3, [r7, #30]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014e52:	e0dc      	b.n	801500e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f000 80d7 	beq.w	801500e <tcp_write+0x47e>
 8014e60:	4b03      	ldr	r3, [pc, #12]	; (8014e70 <tcp_write+0x2e0>)
 8014e62:	f240 224a 	movw	r2, #586	; 0x24a
 8014e66:	490a      	ldr	r1, [pc, #40]	; (8014e90 <tcp_write+0x300>)
 8014e68:	4803      	ldr	r0, [pc, #12]	; (8014e78 <tcp_write+0x2e8>)
 8014e6a:	f002 fe81 	bl	8017b70 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014e6e:	e0ce      	b.n	801500e <tcp_write+0x47e>
 8014e70:	0801c5fc 	.word	0x0801c5fc
 8014e74:	0801c7f8 	.word	0x0801c7f8
 8014e78:	0801c6ac 	.word	0x0801c6ac
 8014e7c:	0801c810 	.word	0x0801c810
 8014e80:	0801c844 	.word	0x0801c844
 8014e84:	0801c85c 	.word	0x0801c85c
 8014e88:	0801c87c 	.word	0x0801c87c
 8014e8c:	0801c89c 	.word	0x0801c89c
 8014e90:	0801c8c8 	.word	0x0801c8c8
    struct pbuf *p;
    u16_t left = len - pos;
 8014e94:	88fa      	ldrh	r2, [r7, #6]
 8014e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014e9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014eaa:	8b7a      	ldrh	r2, [r7, #26]
 8014eac:	8bbb      	ldrh	r3, [r7, #28]
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	bf28      	it	cs
 8014eb2:	4613      	movcs	r3, r2
 8014eb4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014eb6:	797b      	ldrb	r3, [r7, #5]
 8014eb8:	f003 0301 	and.w	r3, r3, #1
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d036      	beq.n	8014f2e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014ec0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	8b3b      	ldrh	r3, [r7, #24]
 8014ec8:	4413      	add	r3, r2
 8014eca:	b299      	uxth	r1, r3
 8014ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	bf0c      	ite	eq
 8014ed2:	2301      	moveq	r3, #1
 8014ed4:	2300      	movne	r3, #0
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	f107 0012 	add.w	r0, r7, #18
 8014edc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ede:	9302      	str	r3, [sp, #8]
 8014ee0:	797b      	ldrb	r3, [r7, #5]
 8014ee2:	9301      	str	r3, [sp, #4]
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	9300      	str	r3, [sp, #0]
 8014ee8:	4603      	mov	r3, r0
 8014eea:	2036      	movs	r0, #54	; 0x36
 8014eec:	f7ff fd5c 	bl	80149a8 <tcp_pbuf_prealloc>
 8014ef0:	6338      	str	r0, [r7, #48]	; 0x30
 8014ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	f000 8178 	beq.w	80151ea <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efc:	895b      	ldrh	r3, [r3, #10]
 8014efe:	8b3a      	ldrh	r2, [r7, #24]
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d906      	bls.n	8014f12 <tcp_write+0x382>
 8014f04:	4b8c      	ldr	r3, [pc, #560]	; (8015138 <tcp_write+0x5a8>)
 8014f06:	f240 2266 	movw	r2, #614	; 0x266
 8014f0a:	498c      	ldr	r1, [pc, #560]	; (801513c <tcp_write+0x5ac>)
 8014f0c:	488c      	ldr	r0, [pc, #560]	; (8015140 <tcp_write+0x5b0>)
 8014f0e:	f002 fe2f 	bl	8017b70 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f14:	685a      	ldr	r2, [r3, #4]
 8014f16:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f1a:	18d0      	adds	r0, r2, r3
 8014f1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f20:	68ba      	ldr	r2, [r7, #8]
 8014f22:	4413      	add	r3, r2
 8014f24:	8b3a      	ldrh	r2, [r7, #24]
 8014f26:	4619      	mov	r1, r3
 8014f28:	f002 fd5d 	bl	80179e6 <memcpy>
 8014f2c:	e02f      	b.n	8014f8e <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014f2e:	8a7b      	ldrh	r3, [r7, #18]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d006      	beq.n	8014f42 <tcp_write+0x3b2>
 8014f34:	4b80      	ldr	r3, [pc, #512]	; (8015138 <tcp_write+0x5a8>)
 8014f36:	f240 2271 	movw	r2, #625	; 0x271
 8014f3a:	4982      	ldr	r1, [pc, #520]	; (8015144 <tcp_write+0x5b4>)
 8014f3c:	4880      	ldr	r0, [pc, #512]	; (8015140 <tcp_write+0x5b0>)
 8014f3e:	f002 fe17 	bl	8017b70 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014f42:	8b3b      	ldrh	r3, [r7, #24]
 8014f44:	2201      	movs	r2, #1
 8014f46:	4619      	mov	r1, r3
 8014f48:	2036      	movs	r0, #54	; 0x36
 8014f4a:	f7fa fabb 	bl	800f4c4 <pbuf_alloc>
 8014f4e:	6178      	str	r0, [r7, #20]
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f000 814b 	beq.w	80151ee <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f5c:	68ba      	ldr	r2, [r7, #8]
 8014f5e:	441a      	add	r2, r3
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f68:	b29b      	uxth	r3, r3
 8014f6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f6e:	4619      	mov	r1, r3
 8014f70:	2036      	movs	r0, #54	; 0x36
 8014f72:	f7fa faa7 	bl	800f4c4 <pbuf_alloc>
 8014f76:	6338      	str	r0, [r7, #48]	; 0x30
 8014f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d103      	bne.n	8014f86 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014f7e:	6978      	ldr	r0, [r7, #20]
 8014f80:	f7fa fd84 	bl	800fa8c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014f84:	e136      	b.n	80151f4 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014f86:	6979      	ldr	r1, [r7, #20]
 8014f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f8a:	f7fa fe4d 	bl	800fc28 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f90:	f7fa fe0a 	bl	800fba8 <pbuf_clen>
 8014f94:	4603      	mov	r3, r0
 8014f96:	461a      	mov	r2, r3
 8014f98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014f9c:	4413      	add	r3, r2
 8014f9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014fa2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014fa6:	2b10      	cmp	r3, #16
 8014fa8:	d903      	bls.n	8014fb2 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fac:	f7fa fd6e 	bl	800fa8c <pbuf_free>
      goto memerr;
 8014fb0:	e120      	b.n	80151f4 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fba:	441a      	add	r2, r3
 8014fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f7ff fc4f 	bl	801486c <tcp_create_segment>
 8014fce:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f000 810d 	beq.w	80151f2 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d102      	bne.n	8014fe4 <tcp_write+0x454>
      queue = seg;
 8014fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8014fe2:	e00c      	b.n	8014ffe <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d106      	bne.n	8014ff8 <tcp_write+0x468>
 8014fea:	4b53      	ldr	r3, [pc, #332]	; (8015138 <tcp_write+0x5a8>)
 8014fec:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014ff0:	4955      	ldr	r1, [pc, #340]	; (8015148 <tcp_write+0x5b8>)
 8014ff2:	4853      	ldr	r0, [pc, #332]	; (8015140 <tcp_write+0x5b0>)
 8014ff4:	f002 fdbc 	bl	8017b70 <iprintf>
      prev_seg->next = seg;
 8014ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ffc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015000:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015002:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015006:	8b3b      	ldrh	r3, [r7, #24]
 8015008:	4413      	add	r3, r2
 801500a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801500e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015012:	88fb      	ldrh	r3, [r7, #6]
 8015014:	429a      	cmp	r2, r3
 8015016:	f4ff af3d 	bcc.w	8014e94 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801501a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801501c:	2b00      	cmp	r3, #0
 801501e:	d02c      	beq.n	801507a <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015026:	e01e      	b.n	8015066 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8015028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502a:	891a      	ldrh	r2, [r3, #8]
 801502c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801502e:	4413      	add	r3, r2
 8015030:	b29a      	uxth	r2, r3
 8015032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015034:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d110      	bne.n	8015060 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015044:	8952      	ldrh	r2, [r2, #10]
 8015046:	4413      	add	r3, r2
 8015048:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801504a:	68b9      	ldr	r1, [r7, #8]
 801504c:	4618      	mov	r0, r3
 801504e:	f002 fcca 	bl	80179e6 <memcpy>
        p->len += oversize_used;
 8015052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015054:	895a      	ldrh	r2, [r3, #10]
 8015056:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015058:	4413      	add	r3, r2
 801505a:	b29a      	uxth	r2, r3
 801505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015068:	2b00      	cmp	r3, #0
 801506a:	d1dd      	bne.n	8015028 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801506e:	891a      	ldrh	r2, [r3, #8]
 8015070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015072:	4413      	add	r3, r2
 8015074:	b29a      	uxth	r2, r3
 8015076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015078:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801507a:	8a7a      	ldrh	r2, [r7, #18]
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015084:	2b00      	cmp	r3, #0
 8015086:	d018      	beq.n	80150ba <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801508a:	2b00      	cmp	r3, #0
 801508c:	d106      	bne.n	801509c <tcp_write+0x50c>
 801508e:	4b2a      	ldr	r3, [pc, #168]	; (8015138 <tcp_write+0x5a8>)
 8015090:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015094:	492d      	ldr	r1, [pc, #180]	; (801514c <tcp_write+0x5bc>)
 8015096:	482a      	ldr	r0, [pc, #168]	; (8015140 <tcp_write+0x5b0>)
 8015098:	f002 fd6a 	bl	8017b70 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801509c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7fa fdc0 	bl	800fc28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80150a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150aa:	891a      	ldrh	r2, [r3, #8]
 80150ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150ae:	891b      	ldrh	r3, [r3, #8]
 80150b0:	4413      	add	r3, r2
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150b6:	811a      	strh	r2, [r3, #8]
 80150b8:	e037      	b.n	801512a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80150ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d034      	beq.n	801512a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80150c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d003      	beq.n	80150ce <tcp_write+0x53e>
 80150c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150c8:	685b      	ldr	r3, [r3, #4]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d106      	bne.n	80150dc <tcp_write+0x54c>
 80150ce:	4b1a      	ldr	r3, [pc, #104]	; (8015138 <tcp_write+0x5a8>)
 80150d0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80150d4:	491e      	ldr	r1, [pc, #120]	; (8015150 <tcp_write+0x5c0>)
 80150d6:	481a      	ldr	r0, [pc, #104]	; (8015140 <tcp_write+0x5b0>)
 80150d8:	f002 fd4a 	bl	8017b70 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80150dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80150e2:	e009      	b.n	80150f8 <tcp_write+0x568>
      p->tot_len += extendlen;
 80150e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e6:	891a      	ldrh	r2, [r3, #8]
 80150e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80150ea:	4413      	add	r3, r2
 80150ec:	b29a      	uxth	r2, r3
 80150ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80150f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80150f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d1f1      	bne.n	80150e4 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8015100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015102:	891a      	ldrh	r2, [r3, #8]
 8015104:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015106:	4413      	add	r3, r2
 8015108:	b29a      	uxth	r2, r3
 801510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015110:	895a      	ldrh	r2, [r3, #10]
 8015112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015114:	4413      	add	r3, r2
 8015116:	b29a      	uxth	r2, r3
 8015118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801511a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801511e:	891a      	ldrh	r2, [r3, #8]
 8015120:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015122:	4413      	add	r3, r2
 8015124:	b29a      	uxth	r2, r3
 8015126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015128:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801512a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801512c:	2b00      	cmp	r3, #0
 801512e:	d111      	bne.n	8015154 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015134:	66da      	str	r2, [r3, #108]	; 0x6c
 8015136:	e010      	b.n	801515a <tcp_write+0x5ca>
 8015138:	0801c5fc 	.word	0x0801c5fc
 801513c:	0801c8f8 	.word	0x0801c8f8
 8015140:	0801c6ac 	.word	0x0801c6ac
 8015144:	0801c938 	.word	0x0801c938
 8015148:	0801c948 	.word	0x0801c948
 801514c:	0801c95c 	.word	0x0801c95c
 8015150:	0801c994 	.word	0x0801c994
  } else {
    last_unsent->next = queue;
 8015154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015158:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801515e:	88fb      	ldrh	r3, [r7, #6]
 8015160:	441a      	add	r2, r3
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801516c:	88fb      	ldrh	r3, [r7, #6]
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	b29a      	uxth	r2, r3
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801517e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015188:	2b00      	cmp	r3, #0
 801518a:	d00e      	beq.n	80151aa <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10a      	bne.n	80151aa <tcp_write+0x61a>
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015198:	2b00      	cmp	r3, #0
 801519a:	d106      	bne.n	80151aa <tcp_write+0x61a>
 801519c:	4b2c      	ldr	r3, [pc, #176]	; (8015250 <tcp_write+0x6c0>)
 801519e:	f240 3212 	movw	r2, #786	; 0x312
 80151a2:	492c      	ldr	r1, [pc, #176]	; (8015254 <tcp_write+0x6c4>)
 80151a4:	482c      	ldr	r0, [pc, #176]	; (8015258 <tcp_write+0x6c8>)
 80151a6:	f002 fce3 	bl	8017b70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80151aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d016      	beq.n	80151de <tcp_write+0x64e>
 80151b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151b2:	68db      	ldr	r3, [r3, #12]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d012      	beq.n	80151de <tcp_write+0x64e>
 80151b8:	797b      	ldrb	r3, [r7, #5]
 80151ba:	f003 0302 	and.w	r3, r3, #2
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d10d      	bne.n	80151de <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80151c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151c4:	68db      	ldr	r3, [r3, #12]
 80151c6:	899b      	ldrh	r3, [r3, #12]
 80151c8:	b29c      	uxth	r4, r3
 80151ca:	2008      	movs	r0, #8
 80151cc:	f7f6 fca4 	bl	800bb18 <lwip_htons>
 80151d0:	4603      	mov	r3, r0
 80151d2:	461a      	mov	r2, r3
 80151d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	4322      	orrs	r2, r4
 80151da:	b292      	uxth	r2, r2
 80151dc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80151de:	2300      	movs	r3, #0
 80151e0:	e031      	b.n	8015246 <tcp_write+0x6b6>
          goto memerr;
 80151e2:	bf00      	nop
 80151e4:	e006      	b.n	80151f4 <tcp_write+0x664>
            goto memerr;
 80151e6:	bf00      	nop
 80151e8:	e004      	b.n	80151f4 <tcp_write+0x664>
        goto memerr;
 80151ea:	bf00      	nop
 80151ec:	e002      	b.n	80151f4 <tcp_write+0x664>
        goto memerr;
 80151ee:	bf00      	nop
 80151f0:	e000      	b.n	80151f4 <tcp_write+0x664>
      goto memerr;
 80151f2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	8b5b      	ldrh	r3, [r3, #26]
 80151f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151fc:	b29a      	uxth	r2, r3
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015204:	2b00      	cmp	r3, #0
 8015206:	d002      	beq.n	801520e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8015208:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801520a:	f7fa fc3f 	bl	800fa8c <pbuf_free>
  }
  if (queue != NULL) {
 801520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015210:	2b00      	cmp	r3, #0
 8015212:	d002      	beq.n	801521a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8015214:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015216:	f7fc fb5d 	bl	80118d4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015220:	2b00      	cmp	r3, #0
 8015222:	d00e      	beq.n	8015242 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015228:	2b00      	cmp	r3, #0
 801522a:	d10a      	bne.n	8015242 <tcp_write+0x6b2>
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015230:	2b00      	cmp	r3, #0
 8015232:	d106      	bne.n	8015242 <tcp_write+0x6b2>
 8015234:	4b06      	ldr	r3, [pc, #24]	; (8015250 <tcp_write+0x6c0>)
 8015236:	f240 3227 	movw	r2, #807	; 0x327
 801523a:	4906      	ldr	r1, [pc, #24]	; (8015254 <tcp_write+0x6c4>)
 801523c:	4806      	ldr	r0, [pc, #24]	; (8015258 <tcp_write+0x6c8>)
 801523e:	f002 fc97 	bl	8017b70 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015246:	4618      	mov	r0, r3
 8015248:	375c      	adds	r7, #92	; 0x5c
 801524a:	46bd      	mov	sp, r7
 801524c:	bd90      	pop	{r4, r7, pc}
 801524e:	bf00      	nop
 8015250:	0801c5fc 	.word	0x0801c5fc
 8015254:	0801c9cc 	.word	0x0801c9cc
 8015258:	0801c6ac 	.word	0x0801c6ac

0801525c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801525c:	b590      	push	{r4, r7, lr}
 801525e:	b08b      	sub	sp, #44	; 0x2c
 8015260:	af02      	add	r7, sp, #8
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	460b      	mov	r3, r1
 8015266:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015268:	2300      	movs	r3, #0
 801526a:	61fb      	str	r3, [r7, #28]
 801526c:	2300      	movs	r3, #0
 801526e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015270:	2300      	movs	r3, #0
 8015272:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d106      	bne.n	8015288 <tcp_split_unsent_seg+0x2c>
 801527a:	4b95      	ldr	r3, [pc, #596]	; (80154d0 <tcp_split_unsent_seg+0x274>)
 801527c:	f240 324b 	movw	r2, #843	; 0x34b
 8015280:	4994      	ldr	r1, [pc, #592]	; (80154d4 <tcp_split_unsent_seg+0x278>)
 8015282:	4895      	ldr	r0, [pc, #596]	; (80154d8 <tcp_split_unsent_seg+0x27c>)
 8015284:	f002 fc74 	bl	8017b70 <iprintf>

  useg = pcb->unsent;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801528c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d102      	bne.n	801529a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015294:	f04f 33ff 	mov.w	r3, #4294967295
 8015298:	e116      	b.n	80154c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801529a:	887b      	ldrh	r3, [r7, #2]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d109      	bne.n	80152b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80152a0:	4b8b      	ldr	r3, [pc, #556]	; (80154d0 <tcp_split_unsent_seg+0x274>)
 80152a2:	f240 3253 	movw	r2, #851	; 0x353
 80152a6:	498d      	ldr	r1, [pc, #564]	; (80154dc <tcp_split_unsent_seg+0x280>)
 80152a8:	488b      	ldr	r0, [pc, #556]	; (80154d8 <tcp_split_unsent_seg+0x27c>)
 80152aa:	f002 fc61 	bl	8017b70 <iprintf>
    return ERR_VAL;
 80152ae:	f06f 0305 	mvn.w	r3, #5
 80152b2:	e109      	b.n	80154c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	891b      	ldrh	r3, [r3, #8]
 80152b8:	887a      	ldrh	r2, [r7, #2]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d301      	bcc.n	80152c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80152be:	2300      	movs	r3, #0
 80152c0:	e102      	b.n	80154c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152c6:	887a      	ldrh	r2, [r7, #2]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d906      	bls.n	80152da <tcp_split_unsent_seg+0x7e>
 80152cc:	4b80      	ldr	r3, [pc, #512]	; (80154d0 <tcp_split_unsent_seg+0x274>)
 80152ce:	f240 325b 	movw	r2, #859	; 0x35b
 80152d2:	4983      	ldr	r1, [pc, #524]	; (80154e0 <tcp_split_unsent_seg+0x284>)
 80152d4:	4880      	ldr	r0, [pc, #512]	; (80154d8 <tcp_split_unsent_seg+0x27c>)
 80152d6:	f002 fc4b 	bl	8017b70 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	891b      	ldrh	r3, [r3, #8]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d106      	bne.n	80152f0 <tcp_split_unsent_seg+0x94>
 80152e2:	4b7b      	ldr	r3, [pc, #492]	; (80154d0 <tcp_split_unsent_seg+0x274>)
 80152e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80152e8:	497e      	ldr	r1, [pc, #504]	; (80154e4 <tcp_split_unsent_seg+0x288>)
 80152ea:	487b      	ldr	r0, [pc, #492]	; (80154d8 <tcp_split_unsent_seg+0x27c>)
 80152ec:	f002 fc40 	bl	8017b70 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	7a9b      	ldrb	r3, [r3, #10]
 80152f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80152f6:	7bfb      	ldrb	r3, [r7, #15]
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	f003 0304 	and.w	r3, r3, #4
 8015300:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	891a      	ldrh	r2, [r3, #8]
 8015306:	887b      	ldrh	r3, [r7, #2]
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801530c:	7bbb      	ldrb	r3, [r7, #14]
 801530e:	b29a      	uxth	r2, r3
 8015310:	89bb      	ldrh	r3, [r7, #12]
 8015312:	4413      	add	r3, r2
 8015314:	b29b      	uxth	r3, r3
 8015316:	f44f 7220 	mov.w	r2, #640	; 0x280
 801531a:	4619      	mov	r1, r3
 801531c:	2036      	movs	r0, #54	; 0x36
 801531e:	f7fa f8d1 	bl	800f4c4 <pbuf_alloc>
 8015322:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	2b00      	cmp	r3, #0
 8015328:	f000 80b7 	beq.w	801549a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	891a      	ldrh	r2, [r3, #8]
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	891b      	ldrh	r3, [r3, #8]
 8015336:	1ad3      	subs	r3, r2, r3
 8015338:	b29a      	uxth	r2, r3
 801533a:	887b      	ldrh	r3, [r7, #2]
 801533c:	4413      	add	r3, r2
 801533e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	6858      	ldr	r0, [r3, #4]
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	685a      	ldr	r2, [r3, #4]
 8015348:	7bbb      	ldrb	r3, [r7, #14]
 801534a:	18d1      	adds	r1, r2, r3
 801534c:	897b      	ldrh	r3, [r7, #10]
 801534e:	89ba      	ldrh	r2, [r7, #12]
 8015350:	f7fa fda2 	bl	800fe98 <pbuf_copy_partial>
 8015354:	4603      	mov	r3, r0
 8015356:	461a      	mov	r2, r3
 8015358:	89bb      	ldrh	r3, [r7, #12]
 801535a:	4293      	cmp	r3, r2
 801535c:	f040 809f 	bne.w	801549e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	899b      	ldrh	r3, [r3, #12]
 8015366:	b29b      	uxth	r3, r3
 8015368:	4618      	mov	r0, r3
 801536a:	f7f6 fbd5 	bl	800bb18 <lwip_htons>
 801536e:	4603      	mov	r3, r0
 8015370:	b2db      	uxtb	r3, r3
 8015372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015376:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015378:	2300      	movs	r3, #0
 801537a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801537c:	7efb      	ldrb	r3, [r7, #27]
 801537e:	f003 0308 	and.w	r3, r3, #8
 8015382:	2b00      	cmp	r3, #0
 8015384:	d007      	beq.n	8015396 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015386:	7efb      	ldrb	r3, [r7, #27]
 8015388:	f023 0308 	bic.w	r3, r3, #8
 801538c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801538e:	7ebb      	ldrb	r3, [r7, #26]
 8015390:	f043 0308 	orr.w	r3, r3, #8
 8015394:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015396:	7efb      	ldrb	r3, [r7, #27]
 8015398:	f003 0301 	and.w	r3, r3, #1
 801539c:	2b00      	cmp	r3, #0
 801539e:	d007      	beq.n	80153b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80153a0:	7efb      	ldrb	r3, [r7, #27]
 80153a2:	f023 0301 	bic.w	r3, r3, #1
 80153a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80153a8:	7ebb      	ldrb	r3, [r7, #26]
 80153aa:	f043 0301 	orr.w	r3, r3, #1
 80153ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f6 fbc3 	bl	800bb42 <lwip_htonl>
 80153bc:	4602      	mov	r2, r0
 80153be:	887b      	ldrh	r3, [r7, #2]
 80153c0:	18d1      	adds	r1, r2, r3
 80153c2:	7eba      	ldrb	r2, [r7, #26]
 80153c4:	7bfb      	ldrb	r3, [r7, #15]
 80153c6:	9300      	str	r3, [sp, #0]
 80153c8:	460b      	mov	r3, r1
 80153ca:	6939      	ldr	r1, [r7, #16]
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7ff fa4d 	bl	801486c <tcp_create_segment>
 80153d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d063      	beq.n	80154a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	4618      	mov	r0, r3
 80153e0:	f7fa fbe2 	bl	800fba8 <pbuf_clen>
 80153e4:	4603      	mov	r3, r0
 80153e6:	461a      	mov	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80153ee:	1a9b      	subs	r3, r3, r2
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	6858      	ldr	r0, [r3, #4]
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	891a      	ldrh	r2, [r3, #8]
 8015402:	89bb      	ldrh	r3, [r7, #12]
 8015404:	1ad3      	subs	r3, r2, r3
 8015406:	b29b      	uxth	r3, r3
 8015408:	4619      	mov	r1, r3
 801540a:	f7fa f9bb 	bl	800f784 <pbuf_realloc>
  useg->len -= remainder;
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	891a      	ldrh	r2, [r3, #8]
 8015412:	89bb      	ldrh	r3, [r7, #12]
 8015414:	1ad3      	subs	r3, r2, r3
 8015416:	b29a      	uxth	r2, r3
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	899b      	ldrh	r3, [r3, #12]
 8015422:	b29c      	uxth	r4, r3
 8015424:	7efb      	ldrb	r3, [r7, #27]
 8015426:	b29b      	uxth	r3, r3
 8015428:	4618      	mov	r0, r3
 801542a:	f7f6 fb75 	bl	800bb18 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	461a      	mov	r2, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	68db      	ldr	r3, [r3, #12]
 8015436:	4322      	orrs	r2, r4
 8015438:	b292      	uxth	r2, r2
 801543a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	4618      	mov	r0, r3
 8015442:	f7fa fbb1 	bl	800fba8 <pbuf_clen>
 8015446:	4603      	mov	r3, r0
 8015448:	461a      	mov	r2, r3
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015450:	4413      	add	r3, r2
 8015452:	b29a      	uxth	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	4618      	mov	r0, r3
 8015460:	f7fa fba2 	bl	800fba8 <pbuf_clen>
 8015464:	4603      	mov	r3, r0
 8015466:	461a      	mov	r2, r3
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801546e:	4413      	add	r3, r2
 8015470:	b29a      	uxth	r2, r3
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	69fa      	ldr	r2, [r7, #28]
 8015484:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d103      	bne.n	8015496 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2200      	movs	r2, #0
 8015492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015496:	2300      	movs	r3, #0
 8015498:	e016      	b.n	80154c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801549a:	bf00      	nop
 801549c:	e002      	b.n	80154a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801549e:	bf00      	nop
 80154a0:	e000      	b.n	80154a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80154a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d006      	beq.n	80154b8 <tcp_split_unsent_seg+0x25c>
 80154aa:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <tcp_split_unsent_seg+0x274>)
 80154ac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80154b0:	490d      	ldr	r1, [pc, #52]	; (80154e8 <tcp_split_unsent_seg+0x28c>)
 80154b2:	4809      	ldr	r0, [pc, #36]	; (80154d8 <tcp_split_unsent_seg+0x27c>)
 80154b4:	f002 fb5c 	bl	8017b70 <iprintf>
  if (p != NULL) {
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d002      	beq.n	80154c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80154be:	6938      	ldr	r0, [r7, #16]
 80154c0:	f7fa fae4 	bl	800fa8c <pbuf_free>
  }

  return ERR_MEM;
 80154c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3724      	adds	r7, #36	; 0x24
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd90      	pop	{r4, r7, pc}
 80154d0:	0801c5fc 	.word	0x0801c5fc
 80154d4:	0801c9ec 	.word	0x0801c9ec
 80154d8:	0801c6ac 	.word	0x0801c6ac
 80154dc:	0801ca10 	.word	0x0801ca10
 80154e0:	0801ca34 	.word	0x0801ca34
 80154e4:	0801ca44 	.word	0x0801ca44
 80154e8:	0801ca54 	.word	0x0801ca54

080154ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80154ec:	b590      	push	{r4, r7, lr}
 80154ee:	b085      	sub	sp, #20
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d106      	bne.n	8015508 <tcp_send_fin+0x1c>
 80154fa:	4b21      	ldr	r3, [pc, #132]	; (8015580 <tcp_send_fin+0x94>)
 80154fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015500:	4920      	ldr	r1, [pc, #128]	; (8015584 <tcp_send_fin+0x98>)
 8015502:	4821      	ldr	r0, [pc, #132]	; (8015588 <tcp_send_fin+0x9c>)
 8015504:	f002 fb34 	bl	8017b70 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801550c:	2b00      	cmp	r3, #0
 801550e:	d02e      	beq.n	801556e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015514:	60fb      	str	r3, [r7, #12]
 8015516:	e002      	b.n	801551e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d1f8      	bne.n	8015518 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	899b      	ldrh	r3, [r3, #12]
 801552c:	b29b      	uxth	r3, r3
 801552e:	4618      	mov	r0, r3
 8015530:	f7f6 faf2 	bl	800bb18 <lwip_htons>
 8015534:	4603      	mov	r3, r0
 8015536:	b2db      	uxtb	r3, r3
 8015538:	f003 0307 	and.w	r3, r3, #7
 801553c:	2b00      	cmp	r3, #0
 801553e:	d116      	bne.n	801556e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	899b      	ldrh	r3, [r3, #12]
 8015546:	b29c      	uxth	r4, r3
 8015548:	2001      	movs	r0, #1
 801554a:	f7f6 fae5 	bl	800bb18 <lwip_htons>
 801554e:	4603      	mov	r3, r0
 8015550:	461a      	mov	r2, r3
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	4322      	orrs	r2, r4
 8015558:	b292      	uxth	r2, r2
 801555a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	8b5b      	ldrh	r3, [r3, #26]
 8015560:	f043 0320 	orr.w	r3, r3, #32
 8015564:	b29a      	uxth	r2, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801556a:	2300      	movs	r3, #0
 801556c:	e004      	b.n	8015578 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801556e:	2101      	movs	r1, #1
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	f000 f80b 	bl	801558c <tcp_enqueue_flags>
 8015576:	4603      	mov	r3, r0
}
 8015578:	4618      	mov	r0, r3
 801557a:	3714      	adds	r7, #20
 801557c:	46bd      	mov	sp, r7
 801557e:	bd90      	pop	{r4, r7, pc}
 8015580:	0801c5fc 	.word	0x0801c5fc
 8015584:	0801ca60 	.word	0x0801ca60
 8015588:	0801c6ac 	.word	0x0801c6ac

0801558c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b08a      	sub	sp, #40	; 0x28
 8015590:	af02      	add	r7, sp, #8
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	460b      	mov	r3, r1
 8015596:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015598:	2300      	movs	r3, #0
 801559a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801559c:	2300      	movs	r3, #0
 801559e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80155a0:	78fb      	ldrb	r3, [r7, #3]
 80155a2:	f003 0303 	and.w	r3, r3, #3
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d106      	bne.n	80155b8 <tcp_enqueue_flags+0x2c>
 80155aa:	4b67      	ldr	r3, [pc, #412]	; (8015748 <tcp_enqueue_flags+0x1bc>)
 80155ac:	f240 4211 	movw	r2, #1041	; 0x411
 80155b0:	4966      	ldr	r1, [pc, #408]	; (801574c <tcp_enqueue_flags+0x1c0>)
 80155b2:	4867      	ldr	r0, [pc, #412]	; (8015750 <tcp_enqueue_flags+0x1c4>)
 80155b4:	f002 fadc 	bl	8017b70 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d106      	bne.n	80155cc <tcp_enqueue_flags+0x40>
 80155be:	4b62      	ldr	r3, [pc, #392]	; (8015748 <tcp_enqueue_flags+0x1bc>)
 80155c0:	f240 4213 	movw	r2, #1043	; 0x413
 80155c4:	4963      	ldr	r1, [pc, #396]	; (8015754 <tcp_enqueue_flags+0x1c8>)
 80155c6:	4862      	ldr	r0, [pc, #392]	; (8015750 <tcp_enqueue_flags+0x1c4>)
 80155c8:	f002 fad2 	bl	8017b70 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80155cc:	78fb      	ldrb	r3, [r7, #3]
 80155ce:	f003 0302 	and.w	r3, r3, #2
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d001      	beq.n	80155da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80155d6:	2301      	movs	r3, #1
 80155d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80155da:	7ffb      	ldrb	r3, [r7, #31]
 80155dc:	009b      	lsls	r3, r3, #2
 80155de:	b2db      	uxtb	r3, r3
 80155e0:	f003 0304 	and.w	r3, r3, #4
 80155e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80155e6:	7dfb      	ldrb	r3, [r7, #23]
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155ee:	4619      	mov	r1, r3
 80155f0:	2036      	movs	r0, #54	; 0x36
 80155f2:	f7f9 ff67 	bl	800f4c4 <pbuf_alloc>
 80155f6:	6138      	str	r0, [r7, #16]
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d109      	bne.n	8015612 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	8b5b      	ldrh	r3, [r3, #26]
 8015602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015606:	b29a      	uxth	r2, r3
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801560c:	f04f 33ff 	mov.w	r3, #4294967295
 8015610:	e095      	b.n	801573e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	895a      	ldrh	r2, [r3, #10]
 8015616:	7dfb      	ldrb	r3, [r7, #23]
 8015618:	b29b      	uxth	r3, r3
 801561a:	429a      	cmp	r2, r3
 801561c:	d206      	bcs.n	801562c <tcp_enqueue_flags+0xa0>
 801561e:	4b4a      	ldr	r3, [pc, #296]	; (8015748 <tcp_enqueue_flags+0x1bc>)
 8015620:	f240 4239 	movw	r2, #1081	; 0x439
 8015624:	494c      	ldr	r1, [pc, #304]	; (8015758 <tcp_enqueue_flags+0x1cc>)
 8015626:	484a      	ldr	r0, [pc, #296]	; (8015750 <tcp_enqueue_flags+0x1c4>)
 8015628:	f002 faa2 	bl	8017b70 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015630:	78fa      	ldrb	r2, [r7, #3]
 8015632:	7ffb      	ldrb	r3, [r7, #31]
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	460b      	mov	r3, r1
 8015638:	6939      	ldr	r1, [r7, #16]
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7ff f916 	bl	801486c <tcp_create_segment>
 8015640:	60f8      	str	r0, [r7, #12]
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d109      	bne.n	801565c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	8b5b      	ldrh	r3, [r3, #26]
 801564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015650:	b29a      	uxth	r2, r3
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015656:	f04f 33ff 	mov.w	r3, #4294967295
 801565a:	e070      	b.n	801573e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	f003 0303 	and.w	r3, r3, #3
 8015664:	2b00      	cmp	r3, #0
 8015666:	d006      	beq.n	8015676 <tcp_enqueue_flags+0xea>
 8015668:	4b37      	ldr	r3, [pc, #220]	; (8015748 <tcp_enqueue_flags+0x1bc>)
 801566a:	f240 4242 	movw	r2, #1090	; 0x442
 801566e:	493b      	ldr	r1, [pc, #236]	; (801575c <tcp_enqueue_flags+0x1d0>)
 8015670:	4837      	ldr	r0, [pc, #220]	; (8015750 <tcp_enqueue_flags+0x1c4>)
 8015672:	f002 fa7d 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	891b      	ldrh	r3, [r3, #8]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d006      	beq.n	801568c <tcp_enqueue_flags+0x100>
 801567e:	4b32      	ldr	r3, [pc, #200]	; (8015748 <tcp_enqueue_flags+0x1bc>)
 8015680:	f240 4243 	movw	r2, #1091	; 0x443
 8015684:	4936      	ldr	r1, [pc, #216]	; (8015760 <tcp_enqueue_flags+0x1d4>)
 8015686:	4832      	ldr	r0, [pc, #200]	; (8015750 <tcp_enqueue_flags+0x1c4>)
 8015688:	f002 fa72 	bl	8017b70 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015690:	2b00      	cmp	r3, #0
 8015692:	d103      	bne.n	801569c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	68fa      	ldr	r2, [r7, #12]
 8015698:	66da      	str	r2, [r3, #108]	; 0x6c
 801569a:	e00d      	b.n	80156b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156a0:	61bb      	str	r3, [r7, #24]
 80156a2:	e002      	b.n	80156aa <tcp_enqueue_flags+0x11e>
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	61bb      	str	r3, [r7, #24]
 80156aa:	69bb      	ldr	r3, [r7, #24]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d1f8      	bne.n	80156a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	68fa      	ldr	r2, [r7, #12]
 80156b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2200      	movs	r2, #0
 80156bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80156c0:	78fb      	ldrb	r3, [r7, #3]
 80156c2:	f003 0302 	and.w	r3, r3, #2
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d104      	bne.n	80156d4 <tcp_enqueue_flags+0x148>
 80156ca:	78fb      	ldrb	r3, [r7, #3]
 80156cc:	f003 0301 	and.w	r3, r3, #1
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d004      	beq.n	80156de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80156d8:	1c5a      	adds	r2, r3, #1
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80156de:	78fb      	ldrb	r3, [r7, #3]
 80156e0:	f003 0301 	and.w	r3, r3, #1
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d006      	beq.n	80156f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	8b5b      	ldrh	r3, [r3, #26]
 80156ec:	f043 0320 	orr.w	r3, r3, #32
 80156f0:	b29a      	uxth	r2, r3
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7fa fa54 	bl	800fba8 <pbuf_clen>
 8015700:	4603      	mov	r3, r0
 8015702:	461a      	mov	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801570a:	4413      	add	r3, r2
 801570c:	b29a      	uxth	r2, r3
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801571a:	2b00      	cmp	r3, #0
 801571c:	d00e      	beq.n	801573c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015722:	2b00      	cmp	r3, #0
 8015724:	d10a      	bne.n	801573c <tcp_enqueue_flags+0x1b0>
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801572a:	2b00      	cmp	r3, #0
 801572c:	d106      	bne.n	801573c <tcp_enqueue_flags+0x1b0>
 801572e:	4b06      	ldr	r3, [pc, #24]	; (8015748 <tcp_enqueue_flags+0x1bc>)
 8015730:	f240 4265 	movw	r2, #1125	; 0x465
 8015734:	490b      	ldr	r1, [pc, #44]	; (8015764 <tcp_enqueue_flags+0x1d8>)
 8015736:	4806      	ldr	r0, [pc, #24]	; (8015750 <tcp_enqueue_flags+0x1c4>)
 8015738:	f002 fa1a 	bl	8017b70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801573c:	2300      	movs	r3, #0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3720      	adds	r7, #32
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	0801c5fc 	.word	0x0801c5fc
 801574c:	0801ca7c 	.word	0x0801ca7c
 8015750:	0801c6ac 	.word	0x0801c6ac
 8015754:	0801cad4 	.word	0x0801cad4
 8015758:	0801caf4 	.word	0x0801caf4
 801575c:	0801cb30 	.word	0x0801cb30
 8015760:	0801cb48 	.word	0x0801cb48
 8015764:	0801cb74 	.word	0x0801cb74

08015768 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015768:	b5b0      	push	{r4, r5, r7, lr}
 801576a:	b08a      	sub	sp, #40	; 0x28
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 8015770:	f7f0 fb5e 	bl	8005e30 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d106      	bne.n	8015788 <tcp_output+0x20>
 801577a:	4b8a      	ldr	r3, [pc, #552]	; (80159a4 <tcp_output+0x23c>)
 801577c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015780:	4989      	ldr	r1, [pc, #548]	; (80159a8 <tcp_output+0x240>)
 8015782:	488a      	ldr	r0, [pc, #552]	; (80159ac <tcp_output+0x244>)
 8015784:	f002 f9f4 	bl	8017b70 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	7d1b      	ldrb	r3, [r3, #20]
 801578c:	2b01      	cmp	r3, #1
 801578e:	d106      	bne.n	801579e <tcp_output+0x36>
 8015790:	4b84      	ldr	r3, [pc, #528]	; (80159a4 <tcp_output+0x23c>)
 8015792:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015796:	4986      	ldr	r1, [pc, #536]	; (80159b0 <tcp_output+0x248>)
 8015798:	4884      	ldr	r0, [pc, #528]	; (80159ac <tcp_output+0x244>)
 801579a:	f002 f9e9 	bl	8017b70 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801579e:	4b85      	ldr	r3, [pc, #532]	; (80159b4 <tcp_output+0x24c>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	429a      	cmp	r2, r3
 80157a6:	d101      	bne.n	80157ac <tcp_output+0x44>
    return ERR_OK;
 80157a8:	2300      	movs	r3, #0
 80157aa:	e1ce      	b.n	8015b4a <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157b8:	4293      	cmp	r3, r2
 80157ba:	bf28      	it	cs
 80157bc:	4613      	movcs	r3, r2
 80157be:	b29b      	uxth	r3, r3
 80157c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80157c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d10b      	bne.n	80157e6 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	8b5b      	ldrh	r3, [r3, #26]
 80157d2:	f003 0302 	and.w	r3, r3, #2
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	f000 81aa 	beq.w	8015b30 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f000 fdcb 	bl	8016378 <tcp_send_empty_ack>
 80157e2:	4603      	mov	r3, r0
 80157e4:	e1b1      	b.n	8015b4a <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80157e6:	6879      	ldr	r1, [r7, #4]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	3304      	adds	r3, #4
 80157ec:	461a      	mov	r2, r3
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f7ff f820 	bl	8014834 <tcp_route>
 80157f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d102      	bne.n	8015802 <tcp_output+0x9a>
    return ERR_RTE;
 80157fc:	f06f 0303 	mvn.w	r3, #3
 8015800:	e1a3      	b.n	8015b4a <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d003      	beq.n	8015810 <tcp_output+0xa8>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d111      	bne.n	8015834 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d002      	beq.n	801581c <tcp_output+0xb4>
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	3304      	adds	r3, #4
 801581a:	e000      	b.n	801581e <tcp_output+0xb6>
 801581c:	2300      	movs	r3, #0
 801581e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015820:	693b      	ldr	r3, [r7, #16]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d102      	bne.n	801582c <tcp_output+0xc4>
      return ERR_RTE;
 8015826:	f06f 0303 	mvn.w	r3, #3
 801582a:	e18e      	b.n	8015b4a <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	681a      	ldr	r2, [r3, #0]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	4618      	mov	r0, r3
 801583c:	f7f6 f981 	bl	800bb42 <lwip_htonl>
 8015840:	4602      	mov	r2, r0
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015846:	1ad3      	subs	r3, r2, r3
 8015848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801584a:	8912      	ldrh	r2, [r2, #8]
 801584c:	4413      	add	r3, r2
 801584e:	69ba      	ldr	r2, [r7, #24]
 8015850:	429a      	cmp	r2, r3
 8015852:	d227      	bcs.n	80158a4 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801585a:	461a      	mov	r2, r3
 801585c:	69bb      	ldr	r3, [r7, #24]
 801585e:	4293      	cmp	r3, r2
 8015860:	d114      	bne.n	801588c <tcp_output+0x124>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015866:	2b00      	cmp	r3, #0
 8015868:	d110      	bne.n	801588c <tcp_output+0x124>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015870:	2b00      	cmp	r3, #0
 8015872:	d10b      	bne.n	801588c <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2201      	movs	r2, #1
 8015880:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2200      	movs	r2, #0
 8015888:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	8b5b      	ldrh	r3, [r3, #26]
 8015890:	f003 0302 	and.w	r3, r3, #2
 8015894:	2b00      	cmp	r3, #0
 8015896:	f000 814d 	beq.w	8015b34 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 fd6c 	bl	8016378 <tcp_send_empty_ack>
 80158a0:	4603      	mov	r3, r0
 80158a2:	e152      	b.n	8015b4a <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2200      	movs	r2, #0
 80158a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80158b2:	6a3b      	ldr	r3, [r7, #32]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f000 811c 	beq.w	8015af2 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 80158ba:	e002      	b.n	80158c2 <tcp_output+0x15a>
 80158bc:	6a3b      	ldr	r3, [r7, #32]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	623b      	str	r3, [r7, #32]
 80158c2:	6a3b      	ldr	r3, [r7, #32]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1f8      	bne.n	80158bc <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80158ca:	e112      	b.n	8015af2 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80158cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	899b      	ldrh	r3, [r3, #12]
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7f6 f91f 	bl	800bb18 <lwip_htons>
 80158da:	4603      	mov	r3, r0
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	f003 0304 	and.w	r3, r3, #4
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d006      	beq.n	80158f4 <tcp_output+0x18c>
 80158e6:	4b2f      	ldr	r3, [pc, #188]	; (80159a4 <tcp_output+0x23c>)
 80158e8:	f240 5236 	movw	r2, #1334	; 0x536
 80158ec:	4932      	ldr	r1, [pc, #200]	; (80159b8 <tcp_output+0x250>)
 80158ee:	482f      	ldr	r0, [pc, #188]	; (80159ac <tcp_output+0x244>)
 80158f0:	f002 f93e 	bl	8017b70 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d01f      	beq.n	801593c <tcp_output+0x1d4>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	8b5b      	ldrh	r3, [r3, #26]
 8015900:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015904:	2b00      	cmp	r3, #0
 8015906:	d119      	bne.n	801593c <tcp_output+0x1d4>
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801590c:	2b00      	cmp	r3, #0
 801590e:	d00b      	beq.n	8015928 <tcp_output+0x1c0>
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d110      	bne.n	801593c <tcp_output+0x1d4>
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801591e:	891a      	ldrh	r2, [r3, #8]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015924:	429a      	cmp	r2, r3
 8015926:	d209      	bcs.n	801593c <tcp_output+0x1d4>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801592e:	2b00      	cmp	r3, #0
 8015930:	d004      	beq.n	801593c <tcp_output+0x1d4>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015938:	2b0f      	cmp	r3, #15
 801593a:	d901      	bls.n	8015940 <tcp_output+0x1d8>
 801593c:	2301      	movs	r3, #1
 801593e:	e000      	b.n	8015942 <tcp_output+0x1da>
 8015940:	2300      	movs	r3, #0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d106      	bne.n	8015954 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	8b5b      	ldrh	r3, [r3, #26]
 801594a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801594e:	2b00      	cmp	r3, #0
 8015950:	f000 80e4 	beq.w	8015b1c <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	7d1b      	ldrb	r3, [r3, #20]
 8015958:	2b02      	cmp	r3, #2
 801595a:	d00d      	beq.n	8015978 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595e:	68db      	ldr	r3, [r3, #12]
 8015960:	899b      	ldrh	r3, [r3, #12]
 8015962:	b29c      	uxth	r4, r3
 8015964:	2010      	movs	r0, #16
 8015966:	f7f6 f8d7 	bl	800bb18 <lwip_htons>
 801596a:	4603      	mov	r3, r0
 801596c:	461a      	mov	r2, r3
 801596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015970:	68db      	ldr	r3, [r3, #12]
 8015972:	4322      	orrs	r2, r4
 8015974:	b292      	uxth	r2, r2
 8015976:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015978:	697a      	ldr	r2, [r7, #20]
 801597a:	6879      	ldr	r1, [r7, #4]
 801597c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801597e:	f000 f909 	bl	8015b94 <tcp_output_segment>
 8015982:	4603      	mov	r3, r0
 8015984:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d016      	beq.n	80159bc <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	8b5b      	ldrh	r3, [r3, #26]
 8015992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015996:	b29a      	uxth	r2, r3
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	835a      	strh	r2, [r3, #26]
      return err;
 801599c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159a0:	e0d3      	b.n	8015b4a <tcp_output+0x3e2>
 80159a2:	bf00      	nop
 80159a4:	0801c5fc 	.word	0x0801c5fc
 80159a8:	0801cb9c 	.word	0x0801cb9c
 80159ac:	0801c6ac 	.word	0x0801c6ac
 80159b0:	0801cbb4 	.word	0x0801cbb4
 80159b4:	24010994 	.word	0x24010994
 80159b8:	0801cbdc 	.word	0x0801cbdc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80159bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	7d1b      	ldrb	r3, [r3, #20]
 80159c8:	2b02      	cmp	r3, #2
 80159ca:	d006      	beq.n	80159da <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8b5b      	ldrh	r3, [r3, #26]
 80159d0:	f023 0303 	bic.w	r3, r3, #3
 80159d4:	b29a      	uxth	r2, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80159da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f6 f8ae 	bl	800bb42 <lwip_htonl>
 80159e6:	4604      	mov	r4, r0
 80159e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ea:	891b      	ldrh	r3, [r3, #8]
 80159ec:	461d      	mov	r5, r3
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	68db      	ldr	r3, [r3, #12]
 80159f2:	899b      	ldrh	r3, [r3, #12]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7f6 f88e 	bl	800bb18 <lwip_htons>
 80159fc:	4603      	mov	r3, r0
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	f003 0303 	and.w	r3, r3, #3
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d001      	beq.n	8015a0c <tcp_output+0x2a4>
 8015a08:	2301      	movs	r3, #1
 8015a0a:	e000      	b.n	8015a0e <tcp_output+0x2a6>
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	442b      	add	r3, r5
 8015a10:	4423      	add	r3, r4
 8015a12:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	1ad3      	subs	r3, r2, r3
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	da02      	bge.n	8015a26 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a28:	891b      	ldrh	r3, [r3, #8]
 8015a2a:	461c      	mov	r4, r3
 8015a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2e:	68db      	ldr	r3, [r3, #12]
 8015a30:	899b      	ldrh	r3, [r3, #12]
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7f6 f86f 	bl	800bb18 <lwip_htons>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	f003 0303 	and.w	r3, r3, #3
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d001      	beq.n	8015a4a <tcp_output+0x2e2>
 8015a46:	2301      	movs	r3, #1
 8015a48:	e000      	b.n	8015a4c <tcp_output+0x2e4>
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	4423      	add	r3, r4
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d049      	beq.n	8015ae6 <tcp_output+0x37e>
      seg->next = NULL;
 8015a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a54:	2200      	movs	r2, #0
 8015a56:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d105      	bne.n	8015a6c <tcp_output+0x304>
        pcb->unacked = seg;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a64:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a68:	623b      	str	r3, [r7, #32]
 8015a6a:	e03f      	b.n	8015aec <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7f6 f865 	bl	800bb42 <lwip_htonl>
 8015a78:	4604      	mov	r4, r0
 8015a7a:	6a3b      	ldr	r3, [r7, #32]
 8015a7c:	68db      	ldr	r3, [r3, #12]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7f6 f85e 	bl	800bb42 <lwip_htonl>
 8015a86:	4603      	mov	r3, r0
 8015a88:	1ae3      	subs	r3, r4, r3
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	da24      	bge.n	8015ad8 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	3370      	adds	r3, #112	; 0x70
 8015a92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015a94:	e002      	b.n	8015a9c <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015a9c:	69fb      	ldr	r3, [r7, #28]
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d011      	beq.n	8015ac8 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015aa4:	69fb      	ldr	r3, [r7, #28]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f6 f848 	bl	800bb42 <lwip_htonl>
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	685b      	ldr	r3, [r3, #4]
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7f6 f841 	bl	800bb42 <lwip_htonl>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	dbe6      	blt.n	8015a96 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ad4:	601a      	str	r2, [r3, #0]
 8015ad6:	e009      	b.n	8015aec <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015ad8:	6a3b      	ldr	r3, [r7, #32]
 8015ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015adc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015ade:	6a3b      	ldr	r3, [r7, #32]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	623b      	str	r3, [r7, #32]
 8015ae4:	e002      	b.n	8015aec <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ae8:	f7fb ff09 	bl	80118fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015af0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d012      	beq.n	8015b1e <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afa:	68db      	ldr	r3, [r3, #12]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7f6 f81f 	bl	800bb42 <lwip_htonl>
 8015b04:	4602      	mov	r2, r0
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b0a:	1ad3      	subs	r3, r2, r3
 8015b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b0e:	8912      	ldrh	r2, [r2, #8]
 8015b10:	4413      	add	r3, r2
  while (seg != NULL &&
 8015b12:	69ba      	ldr	r2, [r7, #24]
 8015b14:	429a      	cmp	r2, r3
 8015b16:	f4bf aed9 	bcs.w	80158cc <tcp_output+0x164>
 8015b1a:	e000      	b.n	8015b1e <tcp_output+0x3b6>
      break;
 8015b1c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d108      	bne.n	8015b38 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015b2e:	e004      	b.n	8015b3a <tcp_output+0x3d2>
    goto output_done;
 8015b30:	bf00      	nop
 8015b32:	e002      	b.n	8015b3a <tcp_output+0x3d2>
    goto output_done;
 8015b34:	bf00      	nop
 8015b36:	e000      	b.n	8015b3a <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015b38:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	8b5b      	ldrh	r3, [r3, #26]
 8015b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015b42:	b29a      	uxth	r2, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015b48:	2300      	movs	r3, #0
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	3728      	adds	r7, #40	; 0x28
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bdb0      	pop	{r4, r5, r7, pc}
 8015b52:	bf00      	nop

08015b54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d106      	bne.n	8015b70 <tcp_output_segment_busy+0x1c>
 8015b62:	4b09      	ldr	r3, [pc, #36]	; (8015b88 <tcp_output_segment_busy+0x34>)
 8015b64:	f240 529a 	movw	r2, #1434	; 0x59a
 8015b68:	4908      	ldr	r1, [pc, #32]	; (8015b8c <tcp_output_segment_busy+0x38>)
 8015b6a:	4809      	ldr	r0, [pc, #36]	; (8015b90 <tcp_output_segment_busy+0x3c>)
 8015b6c:	f002 f800 	bl	8017b70 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	7b9b      	ldrb	r3, [r3, #14]
 8015b76:	2b01      	cmp	r3, #1
 8015b78:	d001      	beq.n	8015b7e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	e000      	b.n	8015b80 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015b7e:	2300      	movs	r3, #0
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	0801c5fc 	.word	0x0801c5fc
 8015b8c:	0801cbf4 	.word	0x0801cbf4
 8015b90:	0801c6ac 	.word	0x0801c6ac

08015b94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015b94:	b5b0      	push	{r4, r5, r7, lr}
 8015b96:	b08c      	sub	sp, #48	; 0x30
 8015b98:	af04      	add	r7, sp, #16
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	60b9      	str	r1, [r7, #8]
 8015b9e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d106      	bne.n	8015bb4 <tcp_output_segment+0x20>
 8015ba6:	4b63      	ldr	r3, [pc, #396]	; (8015d34 <tcp_output_segment+0x1a0>)
 8015ba8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015bac:	4962      	ldr	r1, [pc, #392]	; (8015d38 <tcp_output_segment+0x1a4>)
 8015bae:	4863      	ldr	r0, [pc, #396]	; (8015d3c <tcp_output_segment+0x1a8>)
 8015bb0:	f001 ffde 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d106      	bne.n	8015bc8 <tcp_output_segment+0x34>
 8015bba:	4b5e      	ldr	r3, [pc, #376]	; (8015d34 <tcp_output_segment+0x1a0>)
 8015bbc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015bc0:	495f      	ldr	r1, [pc, #380]	; (8015d40 <tcp_output_segment+0x1ac>)
 8015bc2:	485e      	ldr	r0, [pc, #376]	; (8015d3c <tcp_output_segment+0x1a8>)
 8015bc4:	f001 ffd4 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d106      	bne.n	8015bdc <tcp_output_segment+0x48>
 8015bce:	4b59      	ldr	r3, [pc, #356]	; (8015d34 <tcp_output_segment+0x1a0>)
 8015bd0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015bd4:	495b      	ldr	r1, [pc, #364]	; (8015d44 <tcp_output_segment+0x1b0>)
 8015bd6:	4859      	ldr	r0, [pc, #356]	; (8015d3c <tcp_output_segment+0x1a8>)
 8015bd8:	f001 ffca 	bl	8017b70 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f7ff ffb9 	bl	8015b54 <tcp_output_segment_busy>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d001      	beq.n	8015bec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015be8:	2300      	movs	r3, #0
 8015bea:	e09f      	b.n	8015d2c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	68dc      	ldr	r4, [r3, #12]
 8015bf4:	4610      	mov	r0, r2
 8015bf6:	f7f5 ffa4 	bl	800bb42 <lwip_htonl>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	68dc      	ldr	r4, [r3, #12]
 8015c06:	4610      	mov	r0, r2
 8015c08:	f7f5 ff86 	bl	800bb18 <lwip_htons>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015c18:	441a      	add	r2, r3
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	68db      	ldr	r3, [r3, #12]
 8015c22:	3314      	adds	r3, #20
 8015c24:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	7a9b      	ldrb	r3, [r3, #10]
 8015c2a:	f003 0301 	and.w	r3, r3, #1
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d015      	beq.n	8015c5e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	3304      	adds	r3, #4
 8015c36:	461a      	mov	r2, r3
 8015c38:	6879      	ldr	r1, [r7, #4]
 8015c3a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015c3e:	f7fc fa2d 	bl	801209c <tcp_eff_send_mss_netif>
 8015c42:	4603      	mov	r3, r0
 8015c44:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015c46:	8b7b      	ldrh	r3, [r7, #26]
 8015c48:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7f5 ff78 	bl	800bb42 <lwip_htonl>
 8015c52:	4602      	mov	r2, r0
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	3304      	adds	r3, #4
 8015c5c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015c5e:	68bb      	ldr	r3, [r7, #8]
 8015c60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	da02      	bge.n	8015c6e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d10c      	bne.n	8015c90 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015c76:	4b34      	ldr	r3, [pc, #208]	; (8015d48 <tcp_output_segment+0x1b4>)
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	68bb      	ldr	r3, [r7, #8]
 8015c7c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	68db      	ldr	r3, [r3, #12]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7f5 ff5c 	bl	800bb42 <lwip_htonl>
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	68da      	ldr	r2, [r3, #12]
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	1ad3      	subs	r3, r2, r3
 8015c9c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	8959      	ldrh	r1, [r3, #10]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	8b3a      	ldrh	r2, [r7, #24]
 8015caa:	1a8a      	subs	r2, r1, r2
 8015cac:	b292      	uxth	r2, r2
 8015cae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	8919      	ldrh	r1, [r3, #8]
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	685b      	ldr	r3, [r3, #4]
 8015cba:	8b3a      	ldrh	r2, [r7, #24]
 8015cbc:	1a8a      	subs	r2, r1, r2
 8015cbe:	b292      	uxth	r2, r2
 8015cc0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	68fa      	ldr	r2, [r7, #12]
 8015cc8:	68d2      	ldr	r2, [r2, #12]
 8015cca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	68db      	ldr	r3, [r3, #12]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	741a      	strb	r2, [r3, #16]
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	68db      	ldr	r3, [r3, #12]
 8015cdc:	f103 0214 	add.w	r2, r3, #20
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	7a9b      	ldrb	r3, [r3, #10]
 8015ce4:	009b      	lsls	r3, r3, #2
 8015ce6:	f003 0304 	and.w	r3, r3, #4
 8015cea:	4413      	add	r3, r2
 8015cec:	69fa      	ldr	r2, [r7, #28]
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d006      	beq.n	8015d00 <tcp_output_segment+0x16c>
 8015cf2:	4b10      	ldr	r3, [pc, #64]	; (8015d34 <tcp_output_segment+0x1a0>)
 8015cf4:	f240 621c 	movw	r2, #1564	; 0x61c
 8015cf8:	4914      	ldr	r1, [pc, #80]	; (8015d4c <tcp_output_segment+0x1b8>)
 8015cfa:	4810      	ldr	r0, [pc, #64]	; (8015d3c <tcp_output_segment+0x1a8>)
 8015cfc:	f001 ff38 	bl	8017b70 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	6858      	ldr	r0, [r3, #4]
 8015d04:	68b9      	ldr	r1, [r7, #8]
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	1d1c      	adds	r4, r3, #4
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	7add      	ldrb	r5, [r3, #11]
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	7a9b      	ldrb	r3, [r3, #10]
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	9202      	str	r2, [sp, #8]
 8015d16:	2206      	movs	r2, #6
 8015d18:	9201      	str	r2, [sp, #4]
 8015d1a:	9300      	str	r3, [sp, #0]
 8015d1c:	462b      	mov	r3, r5
 8015d1e:	4622      	mov	r2, r4
 8015d20:	f7f7 fb9a 	bl	800d458 <ip4_output_if>
 8015d24:	4603      	mov	r3, r0
 8015d26:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3720      	adds	r7, #32
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bdb0      	pop	{r4, r5, r7, pc}
 8015d34:	0801c5fc 	.word	0x0801c5fc
 8015d38:	0801cc1c 	.word	0x0801cc1c
 8015d3c:	0801c6ac 	.word	0x0801c6ac
 8015d40:	0801cc3c 	.word	0x0801cc3c
 8015d44:	0801cc5c 	.word	0x0801cc5c
 8015d48:	24010948 	.word	0x24010948
 8015d4c:	0801cc80 	.word	0x0801cc80

08015d50 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015d50:	b5b0      	push	{r4, r5, r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d106      	bne.n	8015d6c <tcp_rexmit_rto_prepare+0x1c>
 8015d5e:	4b31      	ldr	r3, [pc, #196]	; (8015e24 <tcp_rexmit_rto_prepare+0xd4>)
 8015d60:	f240 6263 	movw	r2, #1635	; 0x663
 8015d64:	4930      	ldr	r1, [pc, #192]	; (8015e28 <tcp_rexmit_rto_prepare+0xd8>)
 8015d66:	4831      	ldr	r0, [pc, #196]	; (8015e2c <tcp_rexmit_rto_prepare+0xdc>)
 8015d68:	f001 ff02 	bl	8017b70 <iprintf>

  if (pcb->unacked == NULL) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d102      	bne.n	8015d7a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015d74:	f06f 0305 	mvn.w	r3, #5
 8015d78:	e050      	b.n	8015e1c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d7e:	60fb      	str	r3, [r7, #12]
 8015d80:	e00b      	b.n	8015d9a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f7ff fee6 	bl	8015b54 <tcp_output_segment_busy>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d002      	beq.n	8015d94 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015d8e:	f06f 0305 	mvn.w	r3, #5
 8015d92:	e043      	b.n	8015e1c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	60fb      	str	r3, [r7, #12]
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d1ef      	bne.n	8015d82 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f7ff fed6 	bl	8015b54 <tcp_output_segment_busy>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d002      	beq.n	8015db4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015dae:	f06f 0305 	mvn.w	r3, #5
 8015db2:	e033      	b.n	8015e1c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	8b5b      	ldrh	r3, [r3, #26]
 8015dce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f5 feaf 	bl	800bb42 <lwip_htonl>
 8015de4:	4604      	mov	r4, r0
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	891b      	ldrh	r3, [r3, #8]
 8015dea:	461d      	mov	r5, r3
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	899b      	ldrh	r3, [r3, #12]
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7f5 fe8f 	bl	800bb18 <lwip_htons>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	f003 0303 	and.w	r3, r3, #3
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <tcp_rexmit_rto_prepare+0xba>
 8015e06:	2301      	movs	r3, #1
 8015e08:	e000      	b.n	8015e0c <tcp_rexmit_rto_prepare+0xbc>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	442b      	add	r3, r5
 8015e0e:	18e2      	adds	r2, r4, r3
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2200      	movs	r2, #0
 8015e18:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015e1a:	2300      	movs	r3, #0
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3710      	adds	r7, #16
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bdb0      	pop	{r4, r5, r7, pc}
 8015e24:	0801c5fc 	.word	0x0801c5fc
 8015e28:	0801cc94 	.word	0x0801cc94
 8015e2c:	0801c6ac 	.word	0x0801c6ac

08015e30 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d106      	bne.n	8015e4c <tcp_rexmit_rto_commit+0x1c>
 8015e3e:	4b0d      	ldr	r3, [pc, #52]	; (8015e74 <tcp_rexmit_rto_commit+0x44>)
 8015e40:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015e44:	490c      	ldr	r1, [pc, #48]	; (8015e78 <tcp_rexmit_rto_commit+0x48>)
 8015e46:	480d      	ldr	r0, [pc, #52]	; (8015e7c <tcp_rexmit_rto_commit+0x4c>)
 8015e48:	f001 fe92 	bl	8017b70 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e52:	2bff      	cmp	r3, #255	; 0xff
 8015e54:	d007      	beq.n	8015e66 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	b2da      	uxtb	r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f7ff fc7e 	bl	8015768 <tcp_output>
}
 8015e6c:	bf00      	nop
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	0801c5fc 	.word	0x0801c5fc
 8015e78:	0801ccb8 	.word	0x0801ccb8
 8015e7c:	0801c6ac 	.word	0x0801c6ac

08015e80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b082      	sub	sp, #8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <tcp_rexmit_rto+0x1c>
 8015e8e:	4b0a      	ldr	r3, [pc, #40]	; (8015eb8 <tcp_rexmit_rto+0x38>)
 8015e90:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015e94:	4909      	ldr	r1, [pc, #36]	; (8015ebc <tcp_rexmit_rto+0x3c>)
 8015e96:	480a      	ldr	r0, [pc, #40]	; (8015ec0 <tcp_rexmit_rto+0x40>)
 8015e98:	f001 fe6a 	bl	8017b70 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f7ff ff57 	bl	8015d50 <tcp_rexmit_rto_prepare>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d102      	bne.n	8015eae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7ff ffc1 	bl	8015e30 <tcp_rexmit_rto_commit>
  }
}
 8015eae:	bf00      	nop
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	0801c5fc 	.word	0x0801c5fc
 8015ebc:	0801ccdc 	.word	0x0801ccdc
 8015ec0:	0801c6ac 	.word	0x0801c6ac

08015ec4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015ec4:	b590      	push	{r4, r7, lr}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d106      	bne.n	8015ee0 <tcp_rexmit+0x1c>
 8015ed2:	4b2f      	ldr	r3, [pc, #188]	; (8015f90 <tcp_rexmit+0xcc>)
 8015ed4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015ed8:	492e      	ldr	r1, [pc, #184]	; (8015f94 <tcp_rexmit+0xd0>)
 8015eda:	482f      	ldr	r0, [pc, #188]	; (8015f98 <tcp_rexmit+0xd4>)
 8015edc:	f001 fe48 	bl	8017b70 <iprintf>

  if (pcb->unacked == NULL) {
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d102      	bne.n	8015eee <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015ee8:	f06f 0305 	mvn.w	r3, #5
 8015eec:	e04c      	b.n	8015f88 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ef2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015ef4:	68b8      	ldr	r0, [r7, #8]
 8015ef6:	f7ff fe2d 	bl	8015b54 <tcp_output_segment_busy>
 8015efa:	4603      	mov	r3, r0
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d002      	beq.n	8015f06 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015f00:	f06f 0305 	mvn.w	r3, #5
 8015f04:	e040      	b.n	8015f88 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	681a      	ldr	r2, [r3, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	336c      	adds	r3, #108	; 0x6c
 8015f12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f14:	e002      	b.n	8015f1c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d011      	beq.n	8015f48 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	68db      	ldr	r3, [r3, #12]
 8015f2a:	685b      	ldr	r3, [r3, #4]
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f5 fe08 	bl	800bb42 <lwip_htonl>
 8015f32:	4604      	mov	r4, r0
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	68db      	ldr	r3, [r3, #12]
 8015f38:	685b      	ldr	r3, [r3, #4]
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7f5 fe01 	bl	800bb42 <lwip_htonl>
 8015f40:	4603      	mov	r3, r0
 8015f42:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	dbe6      	blt.n	8015f16 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681a      	ldr	r2, [r3, #0]
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	68ba      	ldr	r2, [r7, #8]
 8015f54:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d103      	bne.n	8015f66 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2200      	movs	r2, #0
 8015f62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f6c:	2bff      	cmp	r3, #255	; 0xff
 8015f6e:	d007      	beq.n	8015f80 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f76:	3301      	adds	r3, #1
 8015f78:	b2da      	uxtb	r2, r3
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2200      	movs	r2, #0
 8015f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015f86:	2300      	movs	r3, #0
}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3714      	adds	r7, #20
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd90      	pop	{r4, r7, pc}
 8015f90:	0801c5fc 	.word	0x0801c5fc
 8015f94:	0801ccf8 	.word	0x0801ccf8
 8015f98:	0801c6ac 	.word	0x0801c6ac

08015f9c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d106      	bne.n	8015fb8 <tcp_rexmit_fast+0x1c>
 8015faa:	4b2a      	ldr	r3, [pc, #168]	; (8016054 <tcp_rexmit_fast+0xb8>)
 8015fac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015fb0:	4929      	ldr	r1, [pc, #164]	; (8016058 <tcp_rexmit_fast+0xbc>)
 8015fb2:	482a      	ldr	r0, [pc, #168]	; (801605c <tcp_rexmit_fast+0xc0>)
 8015fb4:	f001 fddc 	bl	8017b70 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d045      	beq.n	801604c <tcp_rexmit_fast+0xb0>
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	8b5b      	ldrh	r3, [r3, #26]
 8015fc4:	f003 0304 	and.w	r3, r3, #4
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d13f      	bne.n	801604c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7ff ff79 	bl	8015ec4 <tcp_rexmit>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d139      	bne.n	801604c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015fe4:	4293      	cmp	r3, r2
 8015fe6:	bf28      	it	cs
 8015fe8:	4613      	movcs	r3, r2
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	da00      	bge.n	8015ff2 <tcp_rexmit_fast+0x56>
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	105b      	asrs	r3, r3, #1
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016002:	461a      	mov	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016008:	005b      	lsls	r3, r3, #1
 801600a:	429a      	cmp	r2, r3
 801600c:	d206      	bcs.n	801601c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016012:	005b      	lsls	r3, r3, #1
 8016014:	b29a      	uxth	r2, r3
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016026:	4619      	mov	r1, r3
 8016028:	0049      	lsls	r1, r1, #1
 801602a:	440b      	add	r3, r1
 801602c:	b29b      	uxth	r3, r3
 801602e:	4413      	add	r3, r2
 8016030:	b29a      	uxth	r2, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	8b5b      	ldrh	r3, [r3, #26]
 801603c:	f043 0304 	orr.w	r3, r3, #4
 8016040:	b29a      	uxth	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2200      	movs	r2, #0
 801604a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801604c:	bf00      	nop
 801604e:	3708      	adds	r7, #8
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}
 8016054:	0801c5fc 	.word	0x0801c5fc
 8016058:	0801cd10 	.word	0x0801cd10
 801605c:	0801c6ac 	.word	0x0801c6ac

08016060 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b086      	sub	sp, #24
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	607b      	str	r3, [r7, #4]
 801606a:	460b      	mov	r3, r1
 801606c:	817b      	strh	r3, [r7, #10]
 801606e:	4613      	mov	r3, r2
 8016070:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016072:	897a      	ldrh	r2, [r7, #10]
 8016074:	893b      	ldrh	r3, [r7, #8]
 8016076:	4413      	add	r3, r2
 8016078:	b29b      	uxth	r3, r3
 801607a:	3314      	adds	r3, #20
 801607c:	b29b      	uxth	r3, r3
 801607e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016082:	4619      	mov	r1, r3
 8016084:	2022      	movs	r0, #34	; 0x22
 8016086:	f7f9 fa1d 	bl	800f4c4 <pbuf_alloc>
 801608a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d04d      	beq.n	801612e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016092:	897b      	ldrh	r3, [r7, #10]
 8016094:	3313      	adds	r3, #19
 8016096:	697a      	ldr	r2, [r7, #20]
 8016098:	8952      	ldrh	r2, [r2, #10]
 801609a:	4293      	cmp	r3, r2
 801609c:	db06      	blt.n	80160ac <tcp_output_alloc_header_common+0x4c>
 801609e:	4b26      	ldr	r3, [pc, #152]	; (8016138 <tcp_output_alloc_header_common+0xd8>)
 80160a0:	f240 7223 	movw	r2, #1827	; 0x723
 80160a4:	4925      	ldr	r1, [pc, #148]	; (801613c <tcp_output_alloc_header_common+0xdc>)
 80160a6:	4826      	ldr	r0, [pc, #152]	; (8016140 <tcp_output_alloc_header_common+0xe0>)
 80160a8:	f001 fd62 	bl	8017b70 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80160b2:	8c3b      	ldrh	r3, [r7, #32]
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7f5 fd2f 	bl	800bb18 <lwip_htons>
 80160ba:	4603      	mov	r3, r0
 80160bc:	461a      	mov	r2, r3
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80160c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7f5 fd27 	bl	800bb18 <lwip_htons>
 80160ca:	4603      	mov	r3, r0
 80160cc:	461a      	mov	r2, r3
 80160ce:	693b      	ldr	r3, [r7, #16]
 80160d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	687a      	ldr	r2, [r7, #4]
 80160d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	f7f5 fd32 	bl	800bb42 <lwip_htonl>
 80160de:	4602      	mov	r2, r0
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80160e4:	897b      	ldrh	r3, [r7, #10]
 80160e6:	089b      	lsrs	r3, r3, #2
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	3305      	adds	r3, #5
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	031b      	lsls	r3, r3, #12
 80160f0:	b29a      	uxth	r2, r3
 80160f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	4313      	orrs	r3, r2
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f5 fd0b 	bl	800bb18 <lwip_htons>
 8016102:	4603      	mov	r3, r0
 8016104:	461a      	mov	r2, r3
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801610a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801610c:	4618      	mov	r0, r3
 801610e:	f7f5 fd03 	bl	800bb18 <lwip_htons>
 8016112:	4603      	mov	r3, r0
 8016114:	461a      	mov	r2, r3
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	2200      	movs	r2, #0
 801611e:	741a      	strb	r2, [r3, #16]
 8016120:	2200      	movs	r2, #0
 8016122:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016124:	693b      	ldr	r3, [r7, #16]
 8016126:	2200      	movs	r2, #0
 8016128:	749a      	strb	r2, [r3, #18]
 801612a:	2200      	movs	r2, #0
 801612c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801612e:	697b      	ldr	r3, [r7, #20]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3718      	adds	r7, #24
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}
 8016138:	0801c5fc 	.word	0x0801c5fc
 801613c:	0801cd30 	.word	0x0801cd30
 8016140:	0801c6ac 	.word	0x0801c6ac

08016144 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016144:	b5b0      	push	{r4, r5, r7, lr}
 8016146:	b08a      	sub	sp, #40	; 0x28
 8016148:	af04      	add	r7, sp, #16
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	607b      	str	r3, [r7, #4]
 801614e:	460b      	mov	r3, r1
 8016150:	817b      	strh	r3, [r7, #10]
 8016152:	4613      	mov	r3, r2
 8016154:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d106      	bne.n	801616a <tcp_output_alloc_header+0x26>
 801615c:	4b15      	ldr	r3, [pc, #84]	; (80161b4 <tcp_output_alloc_header+0x70>)
 801615e:	f240 7242 	movw	r2, #1858	; 0x742
 8016162:	4915      	ldr	r1, [pc, #84]	; (80161b8 <tcp_output_alloc_header+0x74>)
 8016164:	4815      	ldr	r0, [pc, #84]	; (80161bc <tcp_output_alloc_header+0x78>)
 8016166:	f001 fd03 	bl	8017b70 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	8adb      	ldrh	r3, [r3, #22]
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	8b12      	ldrh	r2, [r2, #24]
 8016176:	68f9      	ldr	r1, [r7, #12]
 8016178:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801617a:	893d      	ldrh	r5, [r7, #8]
 801617c:	897c      	ldrh	r4, [r7, #10]
 801617e:	9103      	str	r1, [sp, #12]
 8016180:	2110      	movs	r1, #16
 8016182:	9102      	str	r1, [sp, #8]
 8016184:	9201      	str	r2, [sp, #4]
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	462a      	mov	r2, r5
 801618c:	4621      	mov	r1, r4
 801618e:	f7ff ff67 	bl	8016060 <tcp_output_alloc_header_common>
 8016192:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d006      	beq.n	80161a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80161a2:	441a      	add	r2, r3
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80161a8:	697b      	ldr	r3, [r7, #20]
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3718      	adds	r7, #24
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bdb0      	pop	{r4, r5, r7, pc}
 80161b2:	bf00      	nop
 80161b4:	0801c5fc 	.word	0x0801c5fc
 80161b8:	0801cd60 	.word	0x0801cd60
 80161bc:	0801c6ac 	.word	0x0801c6ac

080161c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b088      	sub	sp, #32
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	4611      	mov	r1, r2
 80161cc:	461a      	mov	r2, r3
 80161ce:	460b      	mov	r3, r1
 80161d0:	71fb      	strb	r3, [r7, #7]
 80161d2:	4613      	mov	r3, r2
 80161d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80161d6:	2300      	movs	r3, #0
 80161d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d106      	bne.n	80161ee <tcp_output_fill_options+0x2e>
 80161e0:	4b13      	ldr	r3, [pc, #76]	; (8016230 <tcp_output_fill_options+0x70>)
 80161e2:	f240 7256 	movw	r2, #1878	; 0x756
 80161e6:	4913      	ldr	r1, [pc, #76]	; (8016234 <tcp_output_fill_options+0x74>)
 80161e8:	4813      	ldr	r0, [pc, #76]	; (8016238 <tcp_output_fill_options+0x78>)
 80161ea:	f001 fcc1 	bl	8017b70 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80161f4:	69bb      	ldr	r3, [r7, #24]
 80161f6:	3314      	adds	r3, #20
 80161f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80161fa:	69bb      	ldr	r3, [r7, #24]
 80161fc:	f103 0214 	add.w	r2, r3, #20
 8016200:	8bfb      	ldrh	r3, [r7, #30]
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	4619      	mov	r1, r3
 8016206:	79fb      	ldrb	r3, [r7, #7]
 8016208:	009b      	lsls	r3, r3, #2
 801620a:	f003 0304 	and.w	r3, r3, #4
 801620e:	440b      	add	r3, r1
 8016210:	4413      	add	r3, r2
 8016212:	697a      	ldr	r2, [r7, #20]
 8016214:	429a      	cmp	r2, r3
 8016216:	d006      	beq.n	8016226 <tcp_output_fill_options+0x66>
 8016218:	4b05      	ldr	r3, [pc, #20]	; (8016230 <tcp_output_fill_options+0x70>)
 801621a:	f240 7275 	movw	r2, #1909	; 0x775
 801621e:	4907      	ldr	r1, [pc, #28]	; (801623c <tcp_output_fill_options+0x7c>)
 8016220:	4805      	ldr	r0, [pc, #20]	; (8016238 <tcp_output_fill_options+0x78>)
 8016222:	f001 fca5 	bl	8017b70 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016226:	bf00      	nop
 8016228:	3720      	adds	r7, #32
 801622a:	46bd      	mov	sp, r7
 801622c:	bd80      	pop	{r7, pc}
 801622e:	bf00      	nop
 8016230:	0801c5fc 	.word	0x0801c5fc
 8016234:	0801cd88 	.word	0x0801cd88
 8016238:	0801c6ac 	.word	0x0801c6ac
 801623c:	0801cc80 	.word	0x0801cc80

08016240 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b08a      	sub	sp, #40	; 0x28
 8016244:	af04      	add	r7, sp, #16
 8016246:	60f8      	str	r0, [r7, #12]
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	607a      	str	r2, [r7, #4]
 801624c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d106      	bne.n	8016262 <tcp_output_control_segment+0x22>
 8016254:	4b1c      	ldr	r3, [pc, #112]	; (80162c8 <tcp_output_control_segment+0x88>)
 8016256:	f240 7287 	movw	r2, #1927	; 0x787
 801625a:	491c      	ldr	r1, [pc, #112]	; (80162cc <tcp_output_control_segment+0x8c>)
 801625c:	481c      	ldr	r0, [pc, #112]	; (80162d0 <tcp_output_control_segment+0x90>)
 801625e:	f001 fc87 	bl	8017b70 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016262:	683a      	ldr	r2, [r7, #0]
 8016264:	6879      	ldr	r1, [r7, #4]
 8016266:	68f8      	ldr	r0, [r7, #12]
 8016268:	f7fe fae4 	bl	8014834 <tcp_route>
 801626c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d102      	bne.n	801627a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016274:	23fc      	movs	r3, #252	; 0xfc
 8016276:	75fb      	strb	r3, [r7, #23]
 8016278:	e01c      	b.n	80162b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d006      	beq.n	801628e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	7adb      	ldrb	r3, [r3, #11]
 8016284:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	7a9b      	ldrb	r3, [r3, #10]
 801628a:	757b      	strb	r3, [r7, #21]
 801628c:	e003      	b.n	8016296 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801628e:	23ff      	movs	r3, #255	; 0xff
 8016290:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016296:	7dba      	ldrb	r2, [r7, #22]
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	9302      	str	r3, [sp, #8]
 801629c:	2306      	movs	r3, #6
 801629e:	9301      	str	r3, [sp, #4]
 80162a0:	7d7b      	ldrb	r3, [r7, #21]
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	4613      	mov	r3, r2
 80162a6:	683a      	ldr	r2, [r7, #0]
 80162a8:	6879      	ldr	r1, [r7, #4]
 80162aa:	68b8      	ldr	r0, [r7, #8]
 80162ac:	f7f7 f8d4 	bl	800d458 <ip4_output_if>
 80162b0:	4603      	mov	r3, r0
 80162b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80162b4:	68b8      	ldr	r0, [r7, #8]
 80162b6:	f7f9 fbe9 	bl	800fa8c <pbuf_free>
  return err;
 80162ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3718      	adds	r7, #24
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	0801c5fc 	.word	0x0801c5fc
 80162cc:	0801cdb0 	.word	0x0801cdb0
 80162d0:	0801c6ac 	.word	0x0801c6ac

080162d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80162d4:	b590      	push	{r4, r7, lr}
 80162d6:	b08b      	sub	sp, #44	; 0x2c
 80162d8:	af04      	add	r7, sp, #16
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	607a      	str	r2, [r7, #4]
 80162e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d106      	bne.n	80162f6 <tcp_rst+0x22>
 80162e8:	4b1f      	ldr	r3, [pc, #124]	; (8016368 <tcp_rst+0x94>)
 80162ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80162ee:	491f      	ldr	r1, [pc, #124]	; (801636c <tcp_rst+0x98>)
 80162f0:	481f      	ldr	r0, [pc, #124]	; (8016370 <tcp_rst+0x9c>)
 80162f2:	f001 fc3d 	bl	8017b70 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80162f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d106      	bne.n	801630a <tcp_rst+0x36>
 80162fc:	4b1a      	ldr	r3, [pc, #104]	; (8016368 <tcp_rst+0x94>)
 80162fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016302:	491c      	ldr	r1, [pc, #112]	; (8016374 <tcp_rst+0xa0>)
 8016304:	481a      	ldr	r0, [pc, #104]	; (8016370 <tcp_rst+0x9c>)
 8016306:	f001 fc33 	bl	8017b70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801630a:	2300      	movs	r3, #0
 801630c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801630e:	f24d 0316 	movw	r3, #53270	; 0xd016
 8016312:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016314:	7dfb      	ldrb	r3, [r7, #23]
 8016316:	b29c      	uxth	r4, r3
 8016318:	68b8      	ldr	r0, [r7, #8]
 801631a:	f7f5 fc12 	bl	800bb42 <lwip_htonl>
 801631e:	4602      	mov	r2, r0
 8016320:	8abb      	ldrh	r3, [r7, #20]
 8016322:	9303      	str	r3, [sp, #12]
 8016324:	2314      	movs	r3, #20
 8016326:	9302      	str	r3, [sp, #8]
 8016328:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801632a:	9301      	str	r3, [sp, #4]
 801632c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801632e:	9300      	str	r3, [sp, #0]
 8016330:	4613      	mov	r3, r2
 8016332:	2200      	movs	r2, #0
 8016334:	4621      	mov	r1, r4
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7ff fe92 	bl	8016060 <tcp_output_alloc_header_common>
 801633c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00c      	beq.n	801635e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016344:	7dfb      	ldrb	r3, [r7, #23]
 8016346:	2200      	movs	r2, #0
 8016348:	6939      	ldr	r1, [r7, #16]
 801634a:	68f8      	ldr	r0, [r7, #12]
 801634c:	f7ff ff38 	bl	80161c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016352:	683a      	ldr	r2, [r7, #0]
 8016354:	6939      	ldr	r1, [r7, #16]
 8016356:	68f8      	ldr	r0, [r7, #12]
 8016358:	f7ff ff72 	bl	8016240 <tcp_output_control_segment>
 801635c:	e000      	b.n	8016360 <tcp_rst+0x8c>
    return;
 801635e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016360:	371c      	adds	r7, #28
 8016362:	46bd      	mov	sp, r7
 8016364:	bd90      	pop	{r4, r7, pc}
 8016366:	bf00      	nop
 8016368:	0801c5fc 	.word	0x0801c5fc
 801636c:	0801cddc 	.word	0x0801cddc
 8016370:	0801c6ac 	.word	0x0801c6ac
 8016374:	0801cdf8 	.word	0x0801cdf8

08016378 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016378:	b590      	push	{r4, r7, lr}
 801637a:	b087      	sub	sp, #28
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016380:	2300      	movs	r3, #0
 8016382:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016384:	2300      	movs	r3, #0
 8016386:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d106      	bne.n	801639c <tcp_send_empty_ack+0x24>
 801638e:	4b28      	ldr	r3, [pc, #160]	; (8016430 <tcp_send_empty_ack+0xb8>)
 8016390:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016394:	4927      	ldr	r1, [pc, #156]	; (8016434 <tcp_send_empty_ack+0xbc>)
 8016396:	4828      	ldr	r0, [pc, #160]	; (8016438 <tcp_send_empty_ack+0xc0>)
 8016398:	f001 fbea 	bl	8017b70 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801639c:	7dfb      	ldrb	r3, [r7, #23]
 801639e:	009b      	lsls	r3, r3, #2
 80163a0:	b2db      	uxtb	r3, r3
 80163a2:	f003 0304 	and.w	r3, r3, #4
 80163a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80163a8:	7d7b      	ldrb	r3, [r7, #21]
 80163aa:	b29c      	uxth	r4, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7f5 fbc6 	bl	800bb42 <lwip_htonl>
 80163b6:	4603      	mov	r3, r0
 80163b8:	2200      	movs	r2, #0
 80163ba:	4621      	mov	r1, r4
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f7ff fec1 	bl	8016144 <tcp_output_alloc_header>
 80163c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d109      	bne.n	80163de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	8b5b      	ldrh	r3, [r3, #26]
 80163ce:	f043 0303 	orr.w	r3, r3, #3
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80163d8:	f06f 0301 	mvn.w	r3, #1
 80163dc:	e023      	b.n	8016426 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80163de:	7dbb      	ldrb	r3, [r7, #22]
 80163e0:	7dfa      	ldrb	r2, [r7, #23]
 80163e2:	6939      	ldr	r1, [r7, #16]
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7ff feeb 	bl	80161c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	3304      	adds	r3, #4
 80163f0:	6939      	ldr	r1, [r7, #16]
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f7ff ff24 	bl	8016240 <tcp_output_control_segment>
 80163f8:	4603      	mov	r3, r0
 80163fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80163fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d007      	beq.n	8016414 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	8b5b      	ldrh	r3, [r3, #26]
 8016408:	f043 0303 	orr.w	r3, r3, #3
 801640c:	b29a      	uxth	r2, r3
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	835a      	strh	r2, [r3, #26]
 8016412:	e006      	b.n	8016422 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	8b5b      	ldrh	r3, [r3, #26]
 8016418:	f023 0303 	bic.w	r3, r3, #3
 801641c:	b29a      	uxth	r2, r3
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016422:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016426:	4618      	mov	r0, r3
 8016428:	371c      	adds	r7, #28
 801642a:	46bd      	mov	sp, r7
 801642c:	bd90      	pop	{r4, r7, pc}
 801642e:	bf00      	nop
 8016430:	0801c5fc 	.word	0x0801c5fc
 8016434:	0801ce14 	.word	0x0801ce14
 8016438:	0801c6ac 	.word	0x0801c6ac

0801643c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801643c:	b590      	push	{r4, r7, lr}
 801643e:	b087      	sub	sp, #28
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016444:	2300      	movs	r3, #0
 8016446:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d106      	bne.n	801645c <tcp_keepalive+0x20>
 801644e:	4b18      	ldr	r3, [pc, #96]	; (80164b0 <tcp_keepalive+0x74>)
 8016450:	f640 0224 	movw	r2, #2084	; 0x824
 8016454:	4917      	ldr	r1, [pc, #92]	; (80164b4 <tcp_keepalive+0x78>)
 8016456:	4818      	ldr	r0, [pc, #96]	; (80164b8 <tcp_keepalive+0x7c>)
 8016458:	f001 fb8a 	bl	8017b70 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801645c:	7dfb      	ldrb	r3, [r7, #23]
 801645e:	b29c      	uxth	r4, r3
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016464:	3b01      	subs	r3, #1
 8016466:	4618      	mov	r0, r3
 8016468:	f7f5 fb6b 	bl	800bb42 <lwip_htonl>
 801646c:	4603      	mov	r3, r0
 801646e:	2200      	movs	r2, #0
 8016470:	4621      	mov	r1, r4
 8016472:	6878      	ldr	r0, [r7, #4]
 8016474:	f7ff fe66 	bl	8016144 <tcp_output_alloc_header>
 8016478:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801647a:	693b      	ldr	r3, [r7, #16]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d102      	bne.n	8016486 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016480:	f04f 33ff 	mov.w	r3, #4294967295
 8016484:	e010      	b.n	80164a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016486:	7dfb      	ldrb	r3, [r7, #23]
 8016488:	2200      	movs	r2, #0
 801648a:	6939      	ldr	r1, [r7, #16]
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f7ff fe97 	bl	80161c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016492:	687a      	ldr	r2, [r7, #4]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	3304      	adds	r3, #4
 8016498:	6939      	ldr	r1, [r7, #16]
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f7ff fed0 	bl	8016240 <tcp_output_control_segment>
 80164a0:	4603      	mov	r3, r0
 80164a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80164a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164a8:	4618      	mov	r0, r3
 80164aa:	371c      	adds	r7, #28
 80164ac:	46bd      	mov	sp, r7
 80164ae:	bd90      	pop	{r4, r7, pc}
 80164b0:	0801c5fc 	.word	0x0801c5fc
 80164b4:	0801ce34 	.word	0x0801ce34
 80164b8:	0801c6ac 	.word	0x0801c6ac

080164bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80164bc:	b590      	push	{r4, r7, lr}
 80164be:	b08b      	sub	sp, #44	; 0x2c
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80164c4:	2300      	movs	r3, #0
 80164c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d106      	bne.n	80164de <tcp_zero_window_probe+0x22>
 80164d0:	4b4c      	ldr	r3, [pc, #304]	; (8016604 <tcp_zero_window_probe+0x148>)
 80164d2:	f640 024f 	movw	r2, #2127	; 0x84f
 80164d6:	494c      	ldr	r1, [pc, #304]	; (8016608 <tcp_zero_window_probe+0x14c>)
 80164d8:	484c      	ldr	r0, [pc, #304]	; (801660c <tcp_zero_window_probe+0x150>)
 80164da:	f001 fb49 	bl	8017b70 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80164e4:	6a3b      	ldr	r3, [r7, #32]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d101      	bne.n	80164ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80164ea:	2300      	movs	r3, #0
 80164ec:	e086      	b.n	80165fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80164f4:	2bff      	cmp	r3, #255	; 0xff
 80164f6:	d007      	beq.n	8016508 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80164fe:	3301      	adds	r3, #1
 8016500:	b2da      	uxtb	r2, r3
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016508:	6a3b      	ldr	r3, [r7, #32]
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	899b      	ldrh	r3, [r3, #12]
 801650e:	b29b      	uxth	r3, r3
 8016510:	4618      	mov	r0, r3
 8016512:	f7f5 fb01 	bl	800bb18 <lwip_htons>
 8016516:	4603      	mov	r3, r0
 8016518:	b2db      	uxtb	r3, r3
 801651a:	f003 0301 	and.w	r3, r3, #1
 801651e:	2b00      	cmp	r3, #0
 8016520:	d005      	beq.n	801652e <tcp_zero_window_probe+0x72>
 8016522:	6a3b      	ldr	r3, [r7, #32]
 8016524:	891b      	ldrh	r3, [r3, #8]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d101      	bne.n	801652e <tcp_zero_window_probe+0x72>
 801652a:	2301      	movs	r3, #1
 801652c:	e000      	b.n	8016530 <tcp_zero_window_probe+0x74>
 801652e:	2300      	movs	r3, #0
 8016530:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016532:	7ffb      	ldrb	r3, [r7, #31]
 8016534:	2b00      	cmp	r3, #0
 8016536:	bf0c      	ite	eq
 8016538:	2301      	moveq	r3, #1
 801653a:	2300      	movne	r3, #0
 801653c:	b2db      	uxtb	r3, r3
 801653e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016544:	b299      	uxth	r1, r3
 8016546:	6a3b      	ldr	r3, [r7, #32]
 8016548:	68db      	ldr	r3, [r3, #12]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	8bba      	ldrh	r2, [r7, #28]
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f7ff fdf8 	bl	8016144 <tcp_output_alloc_header>
 8016554:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d102      	bne.n	8016562 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801655c:	f04f 33ff 	mov.w	r3, #4294967295
 8016560:	e04c      	b.n	80165fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016568:	7ffb      	ldrb	r3, [r7, #31]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d011      	beq.n	8016592 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	899b      	ldrh	r3, [r3, #12]
 8016572:	b29b      	uxth	r3, r3
 8016574:	b21b      	sxth	r3, r3
 8016576:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801657a:	b21c      	sxth	r4, r3
 801657c:	2011      	movs	r0, #17
 801657e:	f7f5 facb 	bl	800bb18 <lwip_htons>
 8016582:	4603      	mov	r3, r0
 8016584:	b21b      	sxth	r3, r3
 8016586:	4323      	orrs	r3, r4
 8016588:	b21b      	sxth	r3, r3
 801658a:	b29a      	uxth	r2, r3
 801658c:	697b      	ldr	r3, [r7, #20]
 801658e:	819a      	strh	r2, [r3, #12]
 8016590:	e010      	b.n	80165b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	3314      	adds	r3, #20
 8016598:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801659a:	6a3b      	ldr	r3, [r7, #32]
 801659c:	6858      	ldr	r0, [r3, #4]
 801659e:	6a3b      	ldr	r3, [r7, #32]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	891a      	ldrh	r2, [r3, #8]
 80165a4:	6a3b      	ldr	r3, [r7, #32]
 80165a6:	891b      	ldrh	r3, [r3, #8]
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	2201      	movs	r2, #1
 80165ae:	6939      	ldr	r1, [r7, #16]
 80165b0:	f7f9 fc72 	bl	800fe98 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80165b4:	6a3b      	ldr	r3, [r7, #32]
 80165b6:	68db      	ldr	r3, [r3, #12]
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7f5 fac1 	bl	800bb42 <lwip_htonl>
 80165c0:	4603      	mov	r3, r0
 80165c2:	3301      	adds	r3, #1
 80165c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	1ad3      	subs	r3, r2, r3
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	da02      	bge.n	80165d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	68fa      	ldr	r2, [r7, #12]
 80165d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80165d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165dc:	2200      	movs	r2, #0
 80165de:	69b9      	ldr	r1, [r7, #24]
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7ff fded 	bl	80161c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80165e6:	687a      	ldr	r2, [r7, #4]
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	3304      	adds	r3, #4
 80165ec:	69b9      	ldr	r1, [r7, #24]
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7ff fe26 	bl	8016240 <tcp_output_control_segment>
 80165f4:	4603      	mov	r3, r0
 80165f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80165f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	372c      	adds	r7, #44	; 0x2c
 8016600:	46bd      	mov	sp, r7
 8016602:	bd90      	pop	{r4, r7, pc}
 8016604:	0801c5fc 	.word	0x0801c5fc
 8016608:	0801ce50 	.word	0x0801ce50
 801660c:	0801c6ac 	.word	0x0801c6ac

08016610 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 801661a:	f7ef fc09 	bl	8005e30 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 801661e:	f000 fb13 	bl	8016c48 <sys_timeouts_sleeptime>
 8016622:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801662a:	d109      	bne.n	8016640 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801662c:	f7ef fbf2 	bl	8005e14 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016630:	2200      	movs	r2, #0
 8016632:	6839      	ldr	r1, [r7, #0]
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f7f9 fdab 	bl	8010190 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801663a:	f7ef fbdb 	bl	8005df4 <sys_lock_tcpip_core>
    return;
 801663e:	e016      	b.n	801666e <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d102      	bne.n	801664c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016646:	f000 fac3 	bl	8016bd0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801664a:	e7e6      	b.n	801661a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801664c:	f7ef fbe2 	bl	8005e14 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016650:	68fa      	ldr	r2, [r7, #12]
 8016652:	6839      	ldr	r1, [r7, #0]
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f7f9 fd9b 	bl	8010190 <sys_arch_mbox_fetch>
 801665a:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801665c:	f7ef fbca 	bl	8005df4 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016666:	d102      	bne.n	801666e <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016668:	f000 fab2 	bl	8016bd0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801666c:	e7d5      	b.n	801661a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801666e:	3710      	adds	r7, #16
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}

08016674 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 801667c:	f7ef fc14 	bl	8005ea8 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8016680:	f7ef fbb8 	bl	8005df4 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8016684:	4b0f      	ldr	r3, [pc, #60]	; (80166c4 <tcpip_thread+0x50>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d005      	beq.n	8016698 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 801668c:	4b0d      	ldr	r3, [pc, #52]	; (80166c4 <tcpip_thread+0x50>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	4a0d      	ldr	r2, [pc, #52]	; (80166c8 <tcpip_thread+0x54>)
 8016692:	6812      	ldr	r2, [r2, #0]
 8016694:	4610      	mov	r0, r2
 8016696:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016698:	f107 030c 	add.w	r3, r7, #12
 801669c:	4619      	mov	r1, r3
 801669e:	480b      	ldr	r0, [pc, #44]	; (80166cc <tcpip_thread+0x58>)
 80166a0:	f7ff ffb6 	bl	8016610 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d106      	bne.n	80166b8 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80166aa:	4b09      	ldr	r3, [pc, #36]	; (80166d0 <tcpip_thread+0x5c>)
 80166ac:	2291      	movs	r2, #145	; 0x91
 80166ae:	4909      	ldr	r1, [pc, #36]	; (80166d4 <tcpip_thread+0x60>)
 80166b0:	4809      	ldr	r0, [pc, #36]	; (80166d8 <tcpip_thread+0x64>)
 80166b2:	f001 fa5d 	bl	8017b70 <iprintf>
      continue;
 80166b6:	e003      	b.n	80166c0 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	4618      	mov	r0, r3
 80166bc:	f000 f80e 	bl	80166dc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80166c0:	e7ea      	b.n	8016698 <tcpip_thread+0x24>
 80166c2:	bf00      	nop
 80166c4:	24010998 	.word	0x24010998
 80166c8:	2401099c 	.word	0x2401099c
 80166cc:	240109a0 	.word	0x240109a0
 80166d0:	0801ce74 	.word	0x0801ce74
 80166d4:	0801cf00 	.word	0x0801cf00
 80166d8:	0801cf20 	.word	0x0801cf20

080166dc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d026      	beq.n	801673a <tcpip_thread_handle_msg+0x5e>
 80166ec:	2b02      	cmp	r3, #2
 80166ee:	dc2b      	bgt.n	8016748 <tcpip_thread_handle_msg+0x6c>
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d002      	beq.n	80166fa <tcpip_thread_handle_msg+0x1e>
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	d015      	beq.n	8016724 <tcpip_thread_handle_msg+0x48>
 80166f8:	e026      	b.n	8016748 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	68db      	ldr	r3, [r3, #12]
 80166fe:	687a      	ldr	r2, [r7, #4]
 8016700:	6850      	ldr	r0, [r2, #4]
 8016702:	687a      	ldr	r2, [r7, #4]
 8016704:	6892      	ldr	r2, [r2, #8]
 8016706:	4611      	mov	r1, r2
 8016708:	4798      	blx	r3
 801670a:	4603      	mov	r3, r0
 801670c:	2b00      	cmp	r3, #0
 801670e:	d004      	beq.n	801671a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	4618      	mov	r0, r3
 8016716:	f7f9 f9b9 	bl	800fa8c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801671a:	6879      	ldr	r1, [r7, #4]
 801671c:	2009      	movs	r0, #9
 801671e:	f7f8 fae7 	bl	800ecf0 <memp_free>
      break;
 8016722:	e018      	b.n	8016756 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	685b      	ldr	r3, [r3, #4]
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	6892      	ldr	r2, [r2, #8]
 801672c:	4610      	mov	r0, r2
 801672e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	2008      	movs	r0, #8
 8016734:	f7f8 fadc 	bl	800ecf0 <memp_free>
      break;
 8016738:	e00d      	b.n	8016756 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	687a      	ldr	r2, [r7, #4]
 8016740:	6892      	ldr	r2, [r2, #8]
 8016742:	4610      	mov	r0, r2
 8016744:	4798      	blx	r3
      break;
 8016746:	e006      	b.n	8016756 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016748:	4b05      	ldr	r3, [pc, #20]	; (8016760 <tcpip_thread_handle_msg+0x84>)
 801674a:	22cf      	movs	r2, #207	; 0xcf
 801674c:	4905      	ldr	r1, [pc, #20]	; (8016764 <tcpip_thread_handle_msg+0x88>)
 801674e:	4806      	ldr	r0, [pc, #24]	; (8016768 <tcpip_thread_handle_msg+0x8c>)
 8016750:	f001 fa0e 	bl	8017b70 <iprintf>
      break;
 8016754:	bf00      	nop
  }
}
 8016756:	bf00      	nop
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	0801ce74 	.word	0x0801ce74
 8016764:	0801cf00 	.word	0x0801cf00
 8016768:	0801cf20 	.word	0x0801cf20

0801676c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b086      	sub	sp, #24
 8016770:	af00      	add	r7, sp, #0
 8016772:	60f8      	str	r0, [r7, #12]
 8016774:	60b9      	str	r1, [r7, #8]
 8016776:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016778:	481a      	ldr	r0, [pc, #104]	; (80167e4 <tcpip_inpkt+0x78>)
 801677a:	f7f9 fd51 	bl	8010220 <sys_mbox_valid>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	d105      	bne.n	8016790 <tcpip_inpkt+0x24>
 8016784:	4b18      	ldr	r3, [pc, #96]	; (80167e8 <tcpip_inpkt+0x7c>)
 8016786:	22fc      	movs	r2, #252	; 0xfc
 8016788:	4918      	ldr	r1, [pc, #96]	; (80167ec <tcpip_inpkt+0x80>)
 801678a:	4819      	ldr	r0, [pc, #100]	; (80167f0 <tcpip_inpkt+0x84>)
 801678c:	f001 f9f0 	bl	8017b70 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016790:	2009      	movs	r0, #9
 8016792:	f7f8 fa37 	bl	800ec04 <memp_malloc>
 8016796:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d102      	bne.n	80167a4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801679e:	f04f 33ff 	mov.w	r3, #4294967295
 80167a2:	e01a      	b.n	80167da <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	2200      	movs	r2, #0
 80167a8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	68fa      	ldr	r2, [r7, #12]
 80167ae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	68ba      	ldr	r2, [r7, #8]
 80167b4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	687a      	ldr	r2, [r7, #4]
 80167ba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80167bc:	6979      	ldr	r1, [r7, #20]
 80167be:	4809      	ldr	r0, [pc, #36]	; (80167e4 <tcpip_inpkt+0x78>)
 80167c0:	f7f9 fccc 	bl	801015c <sys_mbox_trypost>
 80167c4:	4603      	mov	r3, r0
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d006      	beq.n	80167d8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80167ca:	6979      	ldr	r1, [r7, #20]
 80167cc:	2009      	movs	r0, #9
 80167ce:	f7f8 fa8f 	bl	800ecf0 <memp_free>
    return ERR_MEM;
 80167d2:	f04f 33ff 	mov.w	r3, #4294967295
 80167d6:	e000      	b.n	80167da <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80167d8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80167da:	4618      	mov	r0, r3
 80167dc:	3718      	adds	r7, #24
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}
 80167e2:	bf00      	nop
 80167e4:	240109a0 	.word	0x240109a0
 80167e8:	0801ce74 	.word	0x0801ce74
 80167ec:	0801cf48 	.word	0x0801cf48
 80167f0:	0801cf20 	.word	0x0801cf20

080167f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016804:	f003 0318 	and.w	r3, r3, #24
 8016808:	2b00      	cmp	r3, #0
 801680a:	d006      	beq.n	801681a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801680c:	4a08      	ldr	r2, [pc, #32]	; (8016830 <tcpip_input+0x3c>)
 801680e:	6839      	ldr	r1, [r7, #0]
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f7ff ffab 	bl	801676c <tcpip_inpkt>
 8016816:	4603      	mov	r3, r0
 8016818:	e005      	b.n	8016826 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801681a:	4a06      	ldr	r2, [pc, #24]	; (8016834 <tcpip_input+0x40>)
 801681c:	6839      	ldr	r1, [r7, #0]
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7ff ffa4 	bl	801676c <tcpip_inpkt>
 8016824:	4603      	mov	r3, r0
}
 8016826:	4618      	mov	r0, r3
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	0800ca15 	.word	0x0800ca15
 8016834:	0800d20d 	.word	0x0800d20d

08016838 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b084      	sub	sp, #16
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016842:	4819      	ldr	r0, [pc, #100]	; (80168a8 <tcpip_try_callback+0x70>)
 8016844:	f7f9 fcec 	bl	8010220 <sys_mbox_valid>
 8016848:	4603      	mov	r3, r0
 801684a:	2b00      	cmp	r3, #0
 801684c:	d106      	bne.n	801685c <tcpip_try_callback+0x24>
 801684e:	4b17      	ldr	r3, [pc, #92]	; (80168ac <tcpip_try_callback+0x74>)
 8016850:	f240 125d 	movw	r2, #349	; 0x15d
 8016854:	4916      	ldr	r1, [pc, #88]	; (80168b0 <tcpip_try_callback+0x78>)
 8016856:	4817      	ldr	r0, [pc, #92]	; (80168b4 <tcpip_try_callback+0x7c>)
 8016858:	f001 f98a 	bl	8017b70 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801685c:	2008      	movs	r0, #8
 801685e:	f7f8 f9d1 	bl	800ec04 <memp_malloc>
 8016862:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d102      	bne.n	8016870 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801686a:	f04f 33ff 	mov.w	r3, #4294967295
 801686e:	e017      	b.n	80168a0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	2201      	movs	r2, #1
 8016874:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	687a      	ldr	r2, [r7, #4]
 801687a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	683a      	ldr	r2, [r7, #0]
 8016880:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016882:	68f9      	ldr	r1, [r7, #12]
 8016884:	4808      	ldr	r0, [pc, #32]	; (80168a8 <tcpip_try_callback+0x70>)
 8016886:	f7f9 fc69 	bl	801015c <sys_mbox_trypost>
 801688a:	4603      	mov	r3, r0
 801688c:	2b00      	cmp	r3, #0
 801688e:	d006      	beq.n	801689e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016890:	68f9      	ldr	r1, [r7, #12]
 8016892:	2008      	movs	r0, #8
 8016894:	f7f8 fa2c 	bl	800ecf0 <memp_free>
    return ERR_MEM;
 8016898:	f04f 33ff 	mov.w	r3, #4294967295
 801689c:	e000      	b.n	80168a0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801689e:	2300      	movs	r3, #0
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3710      	adds	r7, #16
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	240109a0 	.word	0x240109a0
 80168ac:	0801ce74 	.word	0x0801ce74
 80168b0:	0801cf48 	.word	0x0801cf48
 80168b4:	0801cf20 	.word	0x0801cf20

080168b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80168c4:	f7ef fa96 	bl	8005df4 <sys_lock_tcpip_core>
  fn(apimsg);
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	68b8      	ldr	r0, [r7, #8]
 80168cc:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80168ce:	f7ef faa1 	bl	8005e14 <sys_unlock_tcpip_core>
  return ERR_OK;
 80168d2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3710      	adds	r7, #16
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}

080168dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af02      	add	r7, sp, #8
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80168e6:	f7f6 fbdf 	bl	800d0a8 <lwip_init>

  tcpip_init_done = initfunc;
 80168ea:	4a17      	ldr	r2, [pc, #92]	; (8016948 <tcpip_init+0x6c>)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80168f0:	4a16      	ldr	r2, [pc, #88]	; (801694c <tcpip_init+0x70>)
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80168f6:	2106      	movs	r1, #6
 80168f8:	4815      	ldr	r0, [pc, #84]	; (8016950 <tcpip_init+0x74>)
 80168fa:	f7f9 fc03 	bl	8010104 <sys_mbox_new>
 80168fe:	4603      	mov	r3, r0
 8016900:	2b00      	cmp	r3, #0
 8016902:	d006      	beq.n	8016912 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016904:	4b13      	ldr	r3, [pc, #76]	; (8016954 <tcpip_init+0x78>)
 8016906:	f240 2261 	movw	r2, #609	; 0x261
 801690a:	4913      	ldr	r1, [pc, #76]	; (8016958 <tcpip_init+0x7c>)
 801690c:	4813      	ldr	r0, [pc, #76]	; (801695c <tcpip_init+0x80>)
 801690e:	f001 f92f 	bl	8017b70 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016912:	4813      	ldr	r0, [pc, #76]	; (8016960 <tcpip_init+0x84>)
 8016914:	f7f9 fd3c 	bl	8010390 <sys_mutex_new>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d006      	beq.n	801692c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801691e:	4b0d      	ldr	r3, [pc, #52]	; (8016954 <tcpip_init+0x78>)
 8016920:	f240 2265 	movw	r2, #613	; 0x265
 8016924:	490f      	ldr	r1, [pc, #60]	; (8016964 <tcpip_init+0x88>)
 8016926:	480d      	ldr	r0, [pc, #52]	; (801695c <tcpip_init+0x80>)
 8016928:	f001 f922 	bl	8017b70 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801692c:	2318      	movs	r3, #24
 801692e:	9300      	str	r3, [sp, #0]
 8016930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016934:	2200      	movs	r2, #0
 8016936:	490c      	ldr	r1, [pc, #48]	; (8016968 <tcpip_init+0x8c>)
 8016938:	480c      	ldr	r0, [pc, #48]	; (801696c <tcpip_init+0x90>)
 801693a:	f7f9 fd5b 	bl	80103f4 <sys_thread_new>
}
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	24010998 	.word	0x24010998
 801694c:	2401099c 	.word	0x2401099c
 8016950:	240109a0 	.word	0x240109a0
 8016954:	0801ce74 	.word	0x0801ce74
 8016958:	0801cf58 	.word	0x0801cf58
 801695c:	0801cf20 	.word	0x0801cf20
 8016960:	240109a4 	.word	0x240109a4
 8016964:	0801cf7c 	.word	0x0801cf7c
 8016968:	08016675 	.word	0x08016675
 801696c:	0801cfa0 	.word	0x0801cfa0

08016970 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016978:	f7f9 fdc4 	bl	8010504 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801697c:	4b0a      	ldr	r3, [pc, #40]	; (80169a8 <tcpip_tcp_timer+0x38>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d103      	bne.n	801698c <tcpip_tcp_timer+0x1c>
 8016984:	4b09      	ldr	r3, [pc, #36]	; (80169ac <tcpip_tcp_timer+0x3c>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d005      	beq.n	8016998 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801698c:	2200      	movs	r2, #0
 801698e:	4908      	ldr	r1, [pc, #32]	; (80169b0 <tcpip_tcp_timer+0x40>)
 8016990:	20fa      	movs	r0, #250	; 0xfa
 8016992:	f000 f8f5 	bl	8016b80 <sys_timeout>
 8016996:	e003      	b.n	80169a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016998:	4b06      	ldr	r3, [pc, #24]	; (80169b4 <tcpip_tcp_timer+0x44>)
 801699a:	2200      	movs	r2, #0
 801699c:	601a      	str	r2, [r3, #0]
  }
}
 801699e:	bf00      	nop
 80169a0:	bf00      	nop
 80169a2:	3708      	adds	r7, #8
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	24010954 	.word	0x24010954
 80169ac:	24010958 	.word	0x24010958
 80169b0:	08016971 	.word	0x08016971
 80169b4:	240109b0 	.word	0x240109b0

080169b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 80169bc:	f7ef fa38 	bl	8005e30 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80169c0:	4b0a      	ldr	r3, [pc, #40]	; (80169ec <tcp_timer_needed+0x34>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d10f      	bne.n	80169e8 <tcp_timer_needed+0x30>
 80169c8:	4b09      	ldr	r3, [pc, #36]	; (80169f0 <tcp_timer_needed+0x38>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d103      	bne.n	80169d8 <tcp_timer_needed+0x20>
 80169d0:	4b08      	ldr	r3, [pc, #32]	; (80169f4 <tcp_timer_needed+0x3c>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d007      	beq.n	80169e8 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80169d8:	4b04      	ldr	r3, [pc, #16]	; (80169ec <tcp_timer_needed+0x34>)
 80169da:	2201      	movs	r2, #1
 80169dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80169de:	2200      	movs	r2, #0
 80169e0:	4905      	ldr	r1, [pc, #20]	; (80169f8 <tcp_timer_needed+0x40>)
 80169e2:	20fa      	movs	r0, #250	; 0xfa
 80169e4:	f000 f8cc 	bl	8016b80 <sys_timeout>
  }
}
 80169e8:	bf00      	nop
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	240109b0 	.word	0x240109b0
 80169f0:	24010954 	.word	0x24010954
 80169f4:	24010958 	.word	0x24010958
 80169f8:	08016971 	.word	0x08016971

080169fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b086      	sub	sp, #24
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016a08:	200a      	movs	r0, #10
 8016a0a:	f7f8 f8fb 	bl	800ec04 <memp_malloc>
 8016a0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d109      	bne.n	8016a2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d151      	bne.n	8016ac0 <sys_timeout_abs+0xc4>
 8016a1c:	4b2a      	ldr	r3, [pc, #168]	; (8016ac8 <sys_timeout_abs+0xcc>)
 8016a1e:	22be      	movs	r2, #190	; 0xbe
 8016a20:	492a      	ldr	r1, [pc, #168]	; (8016acc <sys_timeout_abs+0xd0>)
 8016a22:	482b      	ldr	r0, [pc, #172]	; (8016ad0 <sys_timeout_abs+0xd4>)
 8016a24:	f001 f8a4 	bl	8017b70 <iprintf>
    return;
 8016a28:	e04a      	b.n	8016ac0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	68ba      	ldr	r2, [r7, #8]
 8016a34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	687a      	ldr	r2, [r7, #4]
 8016a3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	68fa      	ldr	r2, [r7, #12]
 8016a40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016a42:	4b24      	ldr	r3, [pc, #144]	; (8016ad4 <sys_timeout_abs+0xd8>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d103      	bne.n	8016a52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016a4a:	4a22      	ldr	r2, [pc, #136]	; (8016ad4 <sys_timeout_abs+0xd8>)
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	6013      	str	r3, [r2, #0]
    return;
 8016a50:	e037      	b.n	8016ac2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	685a      	ldr	r2, [r3, #4]
 8016a56:	4b1f      	ldr	r3, [pc, #124]	; (8016ad4 <sys_timeout_abs+0xd8>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	1ad3      	subs	r3, r2, r3
 8016a5e:	0fdb      	lsrs	r3, r3, #31
 8016a60:	f003 0301 	and.w	r3, r3, #1
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d007      	beq.n	8016a7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016a6a:	4b1a      	ldr	r3, [pc, #104]	; (8016ad4 <sys_timeout_abs+0xd8>)
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016a72:	4a18      	ldr	r2, [pc, #96]	; (8016ad4 <sys_timeout_abs+0xd8>)
 8016a74:	693b      	ldr	r3, [r7, #16]
 8016a76:	6013      	str	r3, [r2, #0]
 8016a78:	e023      	b.n	8016ac2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016a7a:	4b16      	ldr	r3, [pc, #88]	; (8016ad4 <sys_timeout_abs+0xd8>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	617b      	str	r3, [r7, #20]
 8016a80:	e01a      	b.n	8016ab8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d00b      	beq.n	8016aa2 <sys_timeout_abs+0xa6>
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	685a      	ldr	r2, [r3, #4]
 8016a8e:	697b      	ldr	r3, [r7, #20]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	685b      	ldr	r3, [r3, #4]
 8016a94:	1ad3      	subs	r3, r2, r3
 8016a96:	0fdb      	lsrs	r3, r3, #31
 8016a98:	f003 0301 	and.w	r3, r3, #1
 8016a9c:	b2db      	uxtb	r3, r3
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d007      	beq.n	8016ab2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	693a      	ldr	r2, [r7, #16]
 8016aae:	601a      	str	r2, [r3, #0]
        break;
 8016ab0:	e007      	b.n	8016ac2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	617b      	str	r3, [r7, #20]
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d1e1      	bne.n	8016a82 <sys_timeout_abs+0x86>
 8016abe:	e000      	b.n	8016ac2 <sys_timeout_abs+0xc6>
    return;
 8016ac0:	bf00      	nop
      }
    }
  }
}
 8016ac2:	3718      	adds	r7, #24
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	0801cfb0 	.word	0x0801cfb0
 8016acc:	0801d040 	.word	0x0801d040
 8016ad0:	0801d080 	.word	0x0801d080
 8016ad4:	240109a8 	.word	0x240109a8

08016ad8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b086      	sub	sp, #24
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	685b      	ldr	r3, [r3, #4]
 8016ae8:	4798      	blx	r3

  now = sys_now();
 8016aea:	f7ee ff1f 	bl	800592c <sys_now>
 8016aee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	4b0f      	ldr	r3, [pc, #60]	; (8016b34 <lwip_cyclic_timer+0x5c>)
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	4413      	add	r3, r2
 8016afa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016afc:	68fa      	ldr	r2, [r7, #12]
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	0fdb      	lsrs	r3, r3, #31
 8016b04:	f003 0301 	and.w	r3, r3, #1
 8016b08:	b2db      	uxtb	r3, r3
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d009      	beq.n	8016b22 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016b0e:	697b      	ldr	r3, [r7, #20]
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	4413      	add	r3, r2
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	4907      	ldr	r1, [pc, #28]	; (8016b38 <lwip_cyclic_timer+0x60>)
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff ff6e 	bl	80169fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016b20:	e004      	b.n	8016b2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016b22:	687a      	ldr	r2, [r7, #4]
 8016b24:	4904      	ldr	r1, [pc, #16]	; (8016b38 <lwip_cyclic_timer+0x60>)
 8016b26:	68f8      	ldr	r0, [r7, #12]
 8016b28:	f7ff ff68 	bl	80169fc <sys_timeout_abs>
}
 8016b2c:	bf00      	nop
 8016b2e:	3718      	adds	r7, #24
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	240109ac 	.word	0x240109ac
 8016b38:	08016ad9 	.word	0x08016ad9

08016b3c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016b42:	2301      	movs	r3, #1
 8016b44:	607b      	str	r3, [r7, #4]
 8016b46:	e00e      	b.n	8016b66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016b48:	4a0b      	ldr	r2, [pc, #44]	; (8016b78 <sys_timeouts_init+0x3c>)
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	4a08      	ldr	r2, [pc, #32]	; (8016b78 <sys_timeouts_init+0x3c>)
 8016b56:	4413      	add	r3, r2
 8016b58:	461a      	mov	r2, r3
 8016b5a:	4908      	ldr	r1, [pc, #32]	; (8016b7c <sys_timeouts_init+0x40>)
 8016b5c:	f000 f810 	bl	8016b80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	3301      	adds	r3, #1
 8016b64:	607b      	str	r3, [r7, #4]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2b02      	cmp	r3, #2
 8016b6a:	d9ed      	bls.n	8016b48 <sys_timeouts_init+0xc>
  }
}
 8016b6c:	bf00      	nop
 8016b6e:	bf00      	nop
 8016b70:	3708      	adds	r7, #8
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	bf00      	nop
 8016b78:	0801d634 	.word	0x0801d634
 8016b7c:	08016ad9 	.word	0x08016ad9

08016b80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b086      	sub	sp, #24
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8016b8c:	f7ef f950 	bl	8005e30 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016b96:	d306      	bcc.n	8016ba6 <sys_timeout+0x26>
 8016b98:	4b0a      	ldr	r3, [pc, #40]	; (8016bc4 <sys_timeout+0x44>)
 8016b9a:	f240 1229 	movw	r2, #297	; 0x129
 8016b9e:	490a      	ldr	r1, [pc, #40]	; (8016bc8 <sys_timeout+0x48>)
 8016ba0:	480a      	ldr	r0, [pc, #40]	; (8016bcc <sys_timeout+0x4c>)
 8016ba2:	f000 ffe5 	bl	8017b70 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016ba6:	f7ee fec1 	bl	800592c <sys_now>
 8016baa:	4602      	mov	r2, r0
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	4413      	add	r3, r2
 8016bb0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016bb2:	687a      	ldr	r2, [r7, #4]
 8016bb4:	68b9      	ldr	r1, [r7, #8]
 8016bb6:	6978      	ldr	r0, [r7, #20]
 8016bb8:	f7ff ff20 	bl	80169fc <sys_timeout_abs>
#endif
}
 8016bbc:	bf00      	nop
 8016bbe:	3718      	adds	r7, #24
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	0801cfb0 	.word	0x0801cfb0
 8016bc8:	0801d0a8 	.word	0x0801d0a8
 8016bcc:	0801d080 	.word	0x0801d080

08016bd0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b084      	sub	sp, #16
 8016bd4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8016bd6:	f7ef f92b 	bl	8005e30 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016bda:	f7ee fea7 	bl	800592c <sys_now>
 8016bde:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016be0:	4b17      	ldr	r3, [pc, #92]	; (8016c40 <sys_check_timeouts+0x70>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d022      	beq.n	8016c32 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	68fa      	ldr	r2, [r7, #12]
 8016bf2:	1ad3      	subs	r3, r2, r3
 8016bf4:	0fdb      	lsrs	r3, r3, #31
 8016bf6:	f003 0301 	and.w	r3, r3, #1
 8016bfa:	b2db      	uxtb	r3, r3
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d11a      	bne.n	8016c36 <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4a0e      	ldr	r2, [pc, #56]	; (8016c40 <sys_check_timeouts+0x70>)
 8016c06:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	689b      	ldr	r3, [r3, #8]
 8016c0c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	4a0a      	ldr	r2, [pc, #40]	; (8016c44 <sys_check_timeouts+0x74>)
 8016c1a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016c1c:	68b9      	ldr	r1, [r7, #8]
 8016c1e:	200a      	movs	r0, #10
 8016c20:	f7f8 f866 	bl	800ecf0 <memp_free>
    if (handler != NULL) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d0da      	beq.n	8016be0 <sys_check_timeouts+0x10>
      handler(arg);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6838      	ldr	r0, [r7, #0]
 8016c2e:	4798      	blx	r3
  do {
 8016c30:	e7d6      	b.n	8016be0 <sys_check_timeouts+0x10>
      return;
 8016c32:	bf00      	nop
 8016c34:	e000      	b.n	8016c38 <sys_check_timeouts+0x68>
      return;
 8016c36:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016c38:	3710      	adds	r7, #16
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	240109a8 	.word	0x240109a8
 8016c44:	240109ac 	.word	0x240109ac

08016c48 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8016c4e:	f7ef f8ef 	bl	8005e30 <sys_check_core_locking>

  if (next_timeout == NULL) {
 8016c52:	4b16      	ldr	r3, [pc, #88]	; (8016cac <sys_timeouts_sleeptime+0x64>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d102      	bne.n	8016c60 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c5e:	e020      	b.n	8016ca2 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8016c60:	f7ee fe64 	bl	800592c <sys_now>
 8016c64:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016c66:	4b11      	ldr	r3, [pc, #68]	; (8016cac <sys_timeouts_sleeptime+0x64>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	685a      	ldr	r2, [r3, #4]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	1ad3      	subs	r3, r2, r3
 8016c70:	0fdb      	lsrs	r3, r3, #31
 8016c72:	f003 0301 	and.w	r3, r3, #1
 8016c76:	b2db      	uxtb	r3, r3
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d001      	beq.n	8016c80 <sys_timeouts_sleeptime+0x38>
    return 0;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	e010      	b.n	8016ca2 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016c80:	4b0a      	ldr	r3, [pc, #40]	; (8016cac <sys_timeouts_sleeptime+0x64>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	685a      	ldr	r2, [r3, #4]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	1ad3      	subs	r3, r2, r3
 8016c8a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	da06      	bge.n	8016ca0 <sys_timeouts_sleeptime+0x58>
 8016c92:	4b07      	ldr	r3, [pc, #28]	; (8016cb0 <sys_timeouts_sleeptime+0x68>)
 8016c94:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016c98:	4906      	ldr	r1, [pc, #24]	; (8016cb4 <sys_timeouts_sleeptime+0x6c>)
 8016c9a:	4807      	ldr	r0, [pc, #28]	; (8016cb8 <sys_timeouts_sleeptime+0x70>)
 8016c9c:	f000 ff68 	bl	8017b70 <iprintf>
    return ret;
 8016ca0:	683b      	ldr	r3, [r7, #0]
  }
}
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3708      	adds	r7, #8
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}
 8016caa:	bf00      	nop
 8016cac:	240109a8 	.word	0x240109a8
 8016cb0:	0801cfb0 	.word	0x0801cfb0
 8016cb4:	0801d0e0 	.word	0x0801d0e0
 8016cb8:	0801d080 	.word	0x0801d080

08016cbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016cc0:	f000 ff6e 	bl	8017ba0 <rand>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016cd2:	b29a      	uxth	r2, r3
 8016cd4:	4b01      	ldr	r3, [pc, #4]	; (8016cdc <udp_init+0x20>)
 8016cd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016cd8:	bf00      	nop
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	2400003c 	.word	0x2400003c

08016ce0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b083      	sub	sp, #12
 8016ce4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016cea:	4b17      	ldr	r3, [pc, #92]	; (8016d48 <udp_new_port+0x68>)
 8016cec:	881b      	ldrh	r3, [r3, #0]
 8016cee:	1c5a      	adds	r2, r3, #1
 8016cf0:	b291      	uxth	r1, r2
 8016cf2:	4a15      	ldr	r2, [pc, #84]	; (8016d48 <udp_new_port+0x68>)
 8016cf4:	8011      	strh	r1, [r2, #0]
 8016cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016cfa:	4293      	cmp	r3, r2
 8016cfc:	d103      	bne.n	8016d06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016cfe:	4b12      	ldr	r3, [pc, #72]	; (8016d48 <udp_new_port+0x68>)
 8016d00:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016d04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d06:	4b11      	ldr	r3, [pc, #68]	; (8016d4c <udp_new_port+0x6c>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	603b      	str	r3, [r7, #0]
 8016d0c:	e011      	b.n	8016d32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	8a5a      	ldrh	r2, [r3, #18]
 8016d12:	4b0d      	ldr	r3, [pc, #52]	; (8016d48 <udp_new_port+0x68>)
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d108      	bne.n	8016d2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016d1a:	88fb      	ldrh	r3, [r7, #6]
 8016d1c:	3301      	adds	r3, #1
 8016d1e:	80fb      	strh	r3, [r7, #6]
 8016d20:	88fb      	ldrh	r3, [r7, #6]
 8016d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016d26:	d3e0      	bcc.n	8016cea <udp_new_port+0xa>
        return 0;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	e007      	b.n	8016d3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	68db      	ldr	r3, [r3, #12]
 8016d30:	603b      	str	r3, [r7, #0]
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d1ea      	bne.n	8016d0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016d38:	4b03      	ldr	r3, [pc, #12]	; (8016d48 <udp_new_port+0x68>)
 8016d3a:	881b      	ldrh	r3, [r3, #0]
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	370c      	adds	r7, #12
 8016d40:	46bd      	mov	sp, r7
 8016d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d46:	4770      	bx	lr
 8016d48:	2400003c 	.word	0x2400003c
 8016d4c:	240109b4 	.word	0x240109b4

08016d50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	60f8      	str	r0, [r7, #12]
 8016d58:	60b9      	str	r1, [r7, #8]
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d105      	bne.n	8016d70 <udp_input_local_match+0x20>
 8016d64:	4b27      	ldr	r3, [pc, #156]	; (8016e04 <udp_input_local_match+0xb4>)
 8016d66:	2287      	movs	r2, #135	; 0x87
 8016d68:	4927      	ldr	r1, [pc, #156]	; (8016e08 <udp_input_local_match+0xb8>)
 8016d6a:	4828      	ldr	r0, [pc, #160]	; (8016e0c <udp_input_local_match+0xbc>)
 8016d6c:	f000 ff00 	bl	8017b70 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016d70:	68bb      	ldr	r3, [r7, #8]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d105      	bne.n	8016d82 <udp_input_local_match+0x32>
 8016d76:	4b23      	ldr	r3, [pc, #140]	; (8016e04 <udp_input_local_match+0xb4>)
 8016d78:	2288      	movs	r2, #136	; 0x88
 8016d7a:	4925      	ldr	r1, [pc, #148]	; (8016e10 <udp_input_local_match+0xc0>)
 8016d7c:	4823      	ldr	r0, [pc, #140]	; (8016e0c <udp_input_local_match+0xbc>)
 8016d7e:	f000 fef7 	bl	8017b70 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	7a1b      	ldrb	r3, [r3, #8]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d00b      	beq.n	8016da2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	7a1a      	ldrb	r2, [r3, #8]
 8016d8e:	4b21      	ldr	r3, [pc, #132]	; (8016e14 <udp_input_local_match+0xc4>)
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d96:	3301      	adds	r3, #1
 8016d98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d001      	beq.n	8016da2 <udp_input_local_match+0x52>
    return 0;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	e02b      	b.n	8016dfa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016da2:	79fb      	ldrb	r3, [r7, #7]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d018      	beq.n	8016dda <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d013      	beq.n	8016dd6 <udp_input_local_match+0x86>
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d00f      	beq.n	8016dd6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016db6:	4b17      	ldr	r3, [pc, #92]	; (8016e14 <udp_input_local_match+0xc4>)
 8016db8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dbe:	d00a      	beq.n	8016dd6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	681a      	ldr	r2, [r3, #0]
 8016dc4:	4b13      	ldr	r3, [pc, #76]	; (8016e14 <udp_input_local_match+0xc4>)
 8016dc6:	695b      	ldr	r3, [r3, #20]
 8016dc8:	405a      	eors	r2, r3
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	3308      	adds	r3, #8
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d110      	bne.n	8016df8 <udp_input_local_match+0xa8>
          return 1;
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	e00f      	b.n	8016dfa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d009      	beq.n	8016df4 <udp_input_local_match+0xa4>
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d005      	beq.n	8016df4 <udp_input_local_match+0xa4>
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681a      	ldr	r2, [r3, #0]
 8016dec:	4b09      	ldr	r3, [pc, #36]	; (8016e14 <udp_input_local_match+0xc4>)
 8016dee:	695b      	ldr	r3, [r3, #20]
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d101      	bne.n	8016df8 <udp_input_local_match+0xa8>
        return 1;
 8016df4:	2301      	movs	r3, #1
 8016df6:	e000      	b.n	8016dfa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016df8:	2300      	movs	r3, #0
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3710      	adds	r7, #16
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	0801d0f4 	.word	0x0801d0f4
 8016e08:	0801d180 	.word	0x0801d180
 8016e0c:	0801d1a4 	.word	0x0801d1a4
 8016e10:	0801d1cc 	.word	0x0801d1cc
 8016e14:	24009e78 	.word	0x24009e78

08016e18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016e18:	b590      	push	{r4, r7, lr}
 8016e1a:	b08d      	sub	sp, #52	; 0x34
 8016e1c:	af02      	add	r7, sp, #8
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016e22:	2300      	movs	r3, #0
 8016e24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8016e26:	f7ef f803 	bl	8005e30 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d105      	bne.n	8016e3c <udp_input+0x24>
 8016e30:	4b7c      	ldr	r3, [pc, #496]	; (8017024 <udp_input+0x20c>)
 8016e32:	22cf      	movs	r2, #207	; 0xcf
 8016e34:	497c      	ldr	r1, [pc, #496]	; (8017028 <udp_input+0x210>)
 8016e36:	487d      	ldr	r0, [pc, #500]	; (801702c <udp_input+0x214>)
 8016e38:	f000 fe9a 	bl	8017b70 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016e3c:	683b      	ldr	r3, [r7, #0]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d105      	bne.n	8016e4e <udp_input+0x36>
 8016e42:	4b78      	ldr	r3, [pc, #480]	; (8017024 <udp_input+0x20c>)
 8016e44:	22d0      	movs	r2, #208	; 0xd0
 8016e46:	497a      	ldr	r1, [pc, #488]	; (8017030 <udp_input+0x218>)
 8016e48:	4878      	ldr	r0, [pc, #480]	; (801702c <udp_input+0x214>)
 8016e4a:	f000 fe91 	bl	8017b70 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	895b      	ldrh	r3, [r3, #10]
 8016e52:	2b07      	cmp	r3, #7
 8016e54:	d803      	bhi.n	8016e5e <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f7f8 fe18 	bl	800fa8c <pbuf_free>
    goto end;
 8016e5c:	e0de      	b.n	801701c <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	685b      	ldr	r3, [r3, #4]
 8016e62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016e64:	4b73      	ldr	r3, [pc, #460]	; (8017034 <udp_input+0x21c>)
 8016e66:	695b      	ldr	r3, [r3, #20]
 8016e68:	4a72      	ldr	r2, [pc, #456]	; (8017034 <udp_input+0x21c>)
 8016e6a:	6812      	ldr	r2, [r2, #0]
 8016e6c:	4611      	mov	r1, r2
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7f6 fbcc 	bl	800d60c <ip4_addr_isbroadcast_u32>
 8016e74:	4603      	mov	r3, r0
 8016e76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f7f4 fe4a 	bl	800bb18 <lwip_htons>
 8016e84:	4603      	mov	r3, r0
 8016e86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	885b      	ldrh	r3, [r3, #2]
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7f4 fe42 	bl	800bb18 <lwip_htons>
 8016e94:	4603      	mov	r3, r0
 8016e96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ea4:	4b64      	ldr	r3, [pc, #400]	; (8017038 <udp_input+0x220>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8016eaa:	e054      	b.n	8016f56 <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eae:	8a5b      	ldrh	r3, [r3, #18]
 8016eb0:	89fa      	ldrh	r2, [r7, #14]
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	d14a      	bne.n	8016f4c <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016eb6:	7cfb      	ldrb	r3, [r7, #19]
 8016eb8:	461a      	mov	r2, r3
 8016eba:	6839      	ldr	r1, [r7, #0]
 8016ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ebe:	f7ff ff47 	bl	8016d50 <udp_input_local_match>
 8016ec2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d041      	beq.n	8016f4c <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eca:	7c1b      	ldrb	r3, [r3, #16]
 8016ecc:	f003 0304 	and.w	r3, r3, #4
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d11d      	bne.n	8016f10 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8016ed4:	69fb      	ldr	r3, [r7, #28]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d102      	bne.n	8016ee0 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016edc:	61fb      	str	r3, [r7, #28]
 8016ede:	e017      	b.n	8016f10 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016ee0:	7cfb      	ldrb	r3, [r7, #19]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d014      	beq.n	8016f10 <udp_input+0xf8>
 8016ee6:	4b53      	ldr	r3, [pc, #332]	; (8017034 <udp_input+0x21c>)
 8016ee8:	695b      	ldr	r3, [r3, #20]
 8016eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eee:	d10f      	bne.n	8016f10 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016ef0:	69fb      	ldr	r3, [r7, #28]
 8016ef2:	681a      	ldr	r2, [r3, #0]
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	3304      	adds	r3, #4
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d008      	beq.n	8016f10 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f00:	681a      	ldr	r2, [r3, #0]
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	3304      	adds	r3, #4
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d101      	bne.n	8016f10 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8016f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f0e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f12:	8a9b      	ldrh	r3, [r3, #20]
 8016f14:	8a3a      	ldrh	r2, [r7, #16]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	d118      	bne.n	8016f4c <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d005      	beq.n	8016f2e <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f24:	685a      	ldr	r2, [r3, #4]
 8016f26:	4b43      	ldr	r3, [pc, #268]	; (8017034 <udp_input+0x21c>)
 8016f28:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d10e      	bne.n	8016f4c <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016f2e:	6a3b      	ldr	r3, [r7, #32]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d014      	beq.n	8016f5e <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f36:	68da      	ldr	r2, [r3, #12]
 8016f38:	6a3b      	ldr	r3, [r7, #32]
 8016f3a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016f3c:	4b3e      	ldr	r3, [pc, #248]	; (8017038 <udp_input+0x220>)
 8016f3e:	681a      	ldr	r2, [r3, #0]
 8016f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f42:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016f44:	4a3c      	ldr	r2, [pc, #240]	; (8017038 <udp_input+0x220>)
 8016f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f48:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016f4a:	e008      	b.n	8016f5e <udp_input+0x146>
      }
    }

    prev = pcb;
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	627b      	str	r3, [r7, #36]	; 0x24
 8016f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d1a7      	bne.n	8016eac <udp_input+0x94>
 8016f5c:	e000      	b.n	8016f60 <udp_input+0x148>
        break;
 8016f5e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d101      	bne.n	8016f6a <udp_input+0x152>
    pcb = uncon_pcb;
 8016f66:	69fb      	ldr	r3, [r7, #28]
 8016f68:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d002      	beq.n	8016f76 <udp_input+0x15e>
    for_us = 1;
 8016f70:	2301      	movs	r3, #1
 8016f72:	76fb      	strb	r3, [r7, #27]
 8016f74:	e00a      	b.n	8016f8c <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	3304      	adds	r3, #4
 8016f7a:	681a      	ldr	r2, [r3, #0]
 8016f7c:	4b2d      	ldr	r3, [pc, #180]	; (8017034 <udp_input+0x21c>)
 8016f7e:	695b      	ldr	r3, [r3, #20]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	bf0c      	ite	eq
 8016f84:	2301      	moveq	r3, #1
 8016f86:	2300      	movne	r3, #0
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016f8c:	7efb      	ldrb	r3, [r7, #27]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d041      	beq.n	8017016 <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016f92:	2108      	movs	r1, #8
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f7f8 fcf3 	bl	800f980 <pbuf_remove_header>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d00a      	beq.n	8016fb6 <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016fa0:	4b20      	ldr	r3, [pc, #128]	; (8017024 <udp_input+0x20c>)
 8016fa2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016fa6:	4925      	ldr	r1, [pc, #148]	; (801703c <udp_input+0x224>)
 8016fa8:	4820      	ldr	r0, [pc, #128]	; (801702c <udp_input+0x214>)
 8016faa:	f000 fde1 	bl	8017b70 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f7f8 fd6c 	bl	800fa8c <pbuf_free>
      goto end;
 8016fb4:	e032      	b.n	801701c <udp_input+0x204>
    }

    if (pcb != NULL) {
 8016fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d012      	beq.n	8016fe2 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbe:	699b      	ldr	r3, [r3, #24]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d00a      	beq.n	8016fda <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc6:	699c      	ldr	r4, [r3, #24]
 8016fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fca:	69d8      	ldr	r0, [r3, #28]
 8016fcc:	8a3b      	ldrh	r3, [r7, #16]
 8016fce:	9300      	str	r3, [sp, #0]
 8016fd0:	4b1b      	ldr	r3, [pc, #108]	; (8017040 <udp_input+0x228>)
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016fd6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016fd8:	e021      	b.n	801701e <udp_input+0x206>
        pbuf_free(p);
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f7f8 fd56 	bl	800fa8c <pbuf_free>
        goto end;
 8016fe0:	e01c      	b.n	801701c <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016fe2:	7cfb      	ldrb	r3, [r7, #19]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d112      	bne.n	801700e <udp_input+0x1f6>
 8016fe8:	4b12      	ldr	r3, [pc, #72]	; (8017034 <udp_input+0x21c>)
 8016fea:	695b      	ldr	r3, [r3, #20]
 8016fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ff0:	2be0      	cmp	r3, #224	; 0xe0
 8016ff2:	d00c      	beq.n	801700e <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016ff4:	4b0f      	ldr	r3, [pc, #60]	; (8017034 <udp_input+0x21c>)
 8016ff6:	899b      	ldrh	r3, [r3, #12]
 8016ff8:	3308      	adds	r3, #8
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	b21b      	sxth	r3, r3
 8016ffe:	4619      	mov	r1, r3
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f7f8 fd30 	bl	800fa66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017006:	2103      	movs	r1, #3
 8017008:	6878      	ldr	r0, [r7, #4]
 801700a:	f7f5 fefd 	bl	800ce08 <icmp_dest_unreach>
      pbuf_free(p);
 801700e:	6878      	ldr	r0, [r7, #4]
 8017010:	f7f8 fd3c 	bl	800fa8c <pbuf_free>
  return;
 8017014:	e003      	b.n	801701e <udp_input+0x206>
    pbuf_free(p);
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f7f8 fd38 	bl	800fa8c <pbuf_free>
  return;
 801701c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801701e:	372c      	adds	r7, #44	; 0x2c
 8017020:	46bd      	mov	sp, r7
 8017022:	bd90      	pop	{r4, r7, pc}
 8017024:	0801d0f4 	.word	0x0801d0f4
 8017028:	0801d1f4 	.word	0x0801d1f4
 801702c:	0801d1a4 	.word	0x0801d1a4
 8017030:	0801d20c 	.word	0x0801d20c
 8017034:	24009e78 	.word	0x24009e78
 8017038:	240109b4 	.word	0x240109b4
 801703c:	0801d228 	.word	0x0801d228
 8017040:	24009e88 	.word	0x24009e88

08017044 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b082      	sub	sp, #8
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d109      	bne.n	8017068 <udp_send+0x24>
 8017054:	4b11      	ldr	r3, [pc, #68]	; (801709c <udp_send+0x58>)
 8017056:	f240 12d5 	movw	r2, #469	; 0x1d5
 801705a:	4911      	ldr	r1, [pc, #68]	; (80170a0 <udp_send+0x5c>)
 801705c:	4811      	ldr	r0, [pc, #68]	; (80170a4 <udp_send+0x60>)
 801705e:	f000 fd87 	bl	8017b70 <iprintf>
 8017062:	f06f 030f 	mvn.w	r3, #15
 8017066:	e015      	b.n	8017094 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d109      	bne.n	8017082 <udp_send+0x3e>
 801706e:	4b0b      	ldr	r3, [pc, #44]	; (801709c <udp_send+0x58>)
 8017070:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017074:	490c      	ldr	r1, [pc, #48]	; (80170a8 <udp_send+0x64>)
 8017076:	480b      	ldr	r0, [pc, #44]	; (80170a4 <udp_send+0x60>)
 8017078:	f000 fd7a 	bl	8017b70 <iprintf>
 801707c:	f06f 030f 	mvn.w	r3, #15
 8017080:	e008      	b.n	8017094 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	1d1a      	adds	r2, r3, #4
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	8a9b      	ldrh	r3, [r3, #20]
 801708a:	6839      	ldr	r1, [r7, #0]
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f000 f80d 	bl	80170ac <udp_sendto>
 8017092:	4603      	mov	r3, r0
}
 8017094:	4618      	mov	r0, r3
 8017096:	3708      	adds	r7, #8
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}
 801709c:	0801d0f4 	.word	0x0801d0f4
 80170a0:	0801d244 	.word	0x0801d244
 80170a4:	0801d1a4 	.word	0x0801d1a4
 80170a8:	0801d25c 	.word	0x0801d25c

080170ac <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b088      	sub	sp, #32
 80170b0:	af02      	add	r7, sp, #8
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	607a      	str	r2, [r7, #4]
 80170b8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d109      	bne.n	80170d4 <udp_sendto+0x28>
 80170c0:	4b23      	ldr	r3, [pc, #140]	; (8017150 <udp_sendto+0xa4>)
 80170c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80170c6:	4923      	ldr	r1, [pc, #140]	; (8017154 <udp_sendto+0xa8>)
 80170c8:	4823      	ldr	r0, [pc, #140]	; (8017158 <udp_sendto+0xac>)
 80170ca:	f000 fd51 	bl	8017b70 <iprintf>
 80170ce:	f06f 030f 	mvn.w	r3, #15
 80170d2:	e038      	b.n	8017146 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d109      	bne.n	80170ee <udp_sendto+0x42>
 80170da:	4b1d      	ldr	r3, [pc, #116]	; (8017150 <udp_sendto+0xa4>)
 80170dc:	f240 2219 	movw	r2, #537	; 0x219
 80170e0:	491e      	ldr	r1, [pc, #120]	; (801715c <udp_sendto+0xb0>)
 80170e2:	481d      	ldr	r0, [pc, #116]	; (8017158 <udp_sendto+0xac>)
 80170e4:	f000 fd44 	bl	8017b70 <iprintf>
 80170e8:	f06f 030f 	mvn.w	r3, #15
 80170ec:	e02b      	b.n	8017146 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d109      	bne.n	8017108 <udp_sendto+0x5c>
 80170f4:	4b16      	ldr	r3, [pc, #88]	; (8017150 <udp_sendto+0xa4>)
 80170f6:	f240 221a 	movw	r2, #538	; 0x21a
 80170fa:	4919      	ldr	r1, [pc, #100]	; (8017160 <udp_sendto+0xb4>)
 80170fc:	4816      	ldr	r0, [pc, #88]	; (8017158 <udp_sendto+0xac>)
 80170fe:	f000 fd37 	bl	8017b70 <iprintf>
 8017102:	f06f 030f 	mvn.w	r3, #15
 8017106:	e01e      	b.n	8017146 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	7a1b      	ldrb	r3, [r3, #8]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d006      	beq.n	801711e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	7a1b      	ldrb	r3, [r3, #8]
 8017114:	4618      	mov	r0, r3
 8017116:	f7f8 f92b 	bl	800f370 <netif_get_by_index>
 801711a:	6178      	str	r0, [r7, #20]
 801711c:	e003      	b.n	8017126 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f7f5 ffda 	bl	800d0d8 <ip4_route>
 8017124:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d102      	bne.n	8017132 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801712c:	f06f 0303 	mvn.w	r3, #3
 8017130:	e009      	b.n	8017146 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017132:	887a      	ldrh	r2, [r7, #2]
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	4613      	mov	r3, r2
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	68b9      	ldr	r1, [r7, #8]
 801713e:	68f8      	ldr	r0, [r7, #12]
 8017140:	f000 f810 	bl	8017164 <udp_sendto_if>
 8017144:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017146:	4618      	mov	r0, r3
 8017148:	3718      	adds	r7, #24
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}
 801714e:	bf00      	nop
 8017150:	0801d0f4 	.word	0x0801d0f4
 8017154:	0801d274 	.word	0x0801d274
 8017158:	0801d1a4 	.word	0x0801d1a4
 801715c:	0801d28c 	.word	0x0801d28c
 8017160:	0801d2a8 	.word	0x0801d2a8

08017164 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b088      	sub	sp, #32
 8017168:	af02      	add	r7, sp, #8
 801716a:	60f8      	str	r0, [r7, #12]
 801716c:	60b9      	str	r1, [r7, #8]
 801716e:	607a      	str	r2, [r7, #4]
 8017170:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d109      	bne.n	801718c <udp_sendto_if+0x28>
 8017178:	4b2e      	ldr	r3, [pc, #184]	; (8017234 <udp_sendto_if+0xd0>)
 801717a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801717e:	492e      	ldr	r1, [pc, #184]	; (8017238 <udp_sendto_if+0xd4>)
 8017180:	482e      	ldr	r0, [pc, #184]	; (801723c <udp_sendto_if+0xd8>)
 8017182:	f000 fcf5 	bl	8017b70 <iprintf>
 8017186:	f06f 030f 	mvn.w	r3, #15
 801718a:	e04f      	b.n	801722c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d109      	bne.n	80171a6 <udp_sendto_if+0x42>
 8017192:	4b28      	ldr	r3, [pc, #160]	; (8017234 <udp_sendto_if+0xd0>)
 8017194:	f240 2281 	movw	r2, #641	; 0x281
 8017198:	4929      	ldr	r1, [pc, #164]	; (8017240 <udp_sendto_if+0xdc>)
 801719a:	4828      	ldr	r0, [pc, #160]	; (801723c <udp_sendto_if+0xd8>)
 801719c:	f000 fce8 	bl	8017b70 <iprintf>
 80171a0:	f06f 030f 	mvn.w	r3, #15
 80171a4:	e042      	b.n	801722c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d109      	bne.n	80171c0 <udp_sendto_if+0x5c>
 80171ac:	4b21      	ldr	r3, [pc, #132]	; (8017234 <udp_sendto_if+0xd0>)
 80171ae:	f240 2282 	movw	r2, #642	; 0x282
 80171b2:	4924      	ldr	r1, [pc, #144]	; (8017244 <udp_sendto_if+0xe0>)
 80171b4:	4821      	ldr	r0, [pc, #132]	; (801723c <udp_sendto_if+0xd8>)
 80171b6:	f000 fcdb 	bl	8017b70 <iprintf>
 80171ba:	f06f 030f 	mvn.w	r3, #15
 80171be:	e035      	b.n	801722c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80171c0:	6a3b      	ldr	r3, [r7, #32]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d109      	bne.n	80171da <udp_sendto_if+0x76>
 80171c6:	4b1b      	ldr	r3, [pc, #108]	; (8017234 <udp_sendto_if+0xd0>)
 80171c8:	f240 2283 	movw	r2, #643	; 0x283
 80171cc:	491e      	ldr	r1, [pc, #120]	; (8017248 <udp_sendto_if+0xe4>)
 80171ce:	481b      	ldr	r0, [pc, #108]	; (801723c <udp_sendto_if+0xd8>)
 80171d0:	f000 fcce 	bl	8017b70 <iprintf>
 80171d4:	f06f 030f 	mvn.w	r3, #15
 80171d8:	e028      	b.n	801722c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d009      	beq.n	80171f4 <udp_sendto_if+0x90>
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d005      	beq.n	80171f4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80171f0:	2be0      	cmp	r3, #224	; 0xe0
 80171f2:	d103      	bne.n	80171fc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80171f4:	6a3b      	ldr	r3, [r7, #32]
 80171f6:	3304      	adds	r3, #4
 80171f8:	617b      	str	r3, [r7, #20]
 80171fa:	e00b      	b.n	8017214 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	6a3b      	ldr	r3, [r7, #32]
 8017202:	3304      	adds	r3, #4
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	429a      	cmp	r2, r3
 8017208:	d002      	beq.n	8017210 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801720a:	f06f 0303 	mvn.w	r3, #3
 801720e:	e00d      	b.n	801722c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017214:	887a      	ldrh	r2, [r7, #2]
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	9301      	str	r3, [sp, #4]
 801721a:	6a3b      	ldr	r3, [r7, #32]
 801721c:	9300      	str	r3, [sp, #0]
 801721e:	4613      	mov	r3, r2
 8017220:	687a      	ldr	r2, [r7, #4]
 8017222:	68b9      	ldr	r1, [r7, #8]
 8017224:	68f8      	ldr	r0, [r7, #12]
 8017226:	f000 f811 	bl	801724c <udp_sendto_if_src>
 801722a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801722c:	4618      	mov	r0, r3
 801722e:	3718      	adds	r7, #24
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	0801d0f4 	.word	0x0801d0f4
 8017238:	0801d2c4 	.word	0x0801d2c4
 801723c:	0801d1a4 	.word	0x0801d1a4
 8017240:	0801d2e0 	.word	0x0801d2e0
 8017244:	0801d2fc 	.word	0x0801d2fc
 8017248:	0801d31c 	.word	0x0801d31c

0801724c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b08c      	sub	sp, #48	; 0x30
 8017250:	af04      	add	r7, sp, #16
 8017252:	60f8      	str	r0, [r7, #12]
 8017254:	60b9      	str	r1, [r7, #8]
 8017256:	607a      	str	r2, [r7, #4]
 8017258:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 801725a:	f7ee fde9 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d109      	bne.n	8017278 <udp_sendto_if_src+0x2c>
 8017264:	4b65      	ldr	r3, [pc, #404]	; (80173fc <udp_sendto_if_src+0x1b0>)
 8017266:	f240 22d1 	movw	r2, #721	; 0x2d1
 801726a:	4965      	ldr	r1, [pc, #404]	; (8017400 <udp_sendto_if_src+0x1b4>)
 801726c:	4865      	ldr	r0, [pc, #404]	; (8017404 <udp_sendto_if_src+0x1b8>)
 801726e:	f000 fc7f 	bl	8017b70 <iprintf>
 8017272:	f06f 030f 	mvn.w	r3, #15
 8017276:	e0bc      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d109      	bne.n	8017292 <udp_sendto_if_src+0x46>
 801727e:	4b5f      	ldr	r3, [pc, #380]	; (80173fc <udp_sendto_if_src+0x1b0>)
 8017280:	f240 22d2 	movw	r2, #722	; 0x2d2
 8017284:	4960      	ldr	r1, [pc, #384]	; (8017408 <udp_sendto_if_src+0x1bc>)
 8017286:	485f      	ldr	r0, [pc, #380]	; (8017404 <udp_sendto_if_src+0x1b8>)
 8017288:	f000 fc72 	bl	8017b70 <iprintf>
 801728c:	f06f 030f 	mvn.w	r3, #15
 8017290:	e0af      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d109      	bne.n	80172ac <udp_sendto_if_src+0x60>
 8017298:	4b58      	ldr	r3, [pc, #352]	; (80173fc <udp_sendto_if_src+0x1b0>)
 801729a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801729e:	495b      	ldr	r1, [pc, #364]	; (801740c <udp_sendto_if_src+0x1c0>)
 80172a0:	4858      	ldr	r0, [pc, #352]	; (8017404 <udp_sendto_if_src+0x1b8>)
 80172a2:	f000 fc65 	bl	8017b70 <iprintf>
 80172a6:	f06f 030f 	mvn.w	r3, #15
 80172aa:	e0a2      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80172ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d109      	bne.n	80172c6 <udp_sendto_if_src+0x7a>
 80172b2:	4b52      	ldr	r3, [pc, #328]	; (80173fc <udp_sendto_if_src+0x1b0>)
 80172b4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80172b8:	4955      	ldr	r1, [pc, #340]	; (8017410 <udp_sendto_if_src+0x1c4>)
 80172ba:	4852      	ldr	r0, [pc, #328]	; (8017404 <udp_sendto_if_src+0x1b8>)
 80172bc:	f000 fc58 	bl	8017b70 <iprintf>
 80172c0:	f06f 030f 	mvn.w	r3, #15
 80172c4:	e095      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80172c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d109      	bne.n	80172e0 <udp_sendto_if_src+0x94>
 80172cc:	4b4b      	ldr	r3, [pc, #300]	; (80173fc <udp_sendto_if_src+0x1b0>)
 80172ce:	f240 22d5 	movw	r2, #725	; 0x2d5
 80172d2:	4950      	ldr	r1, [pc, #320]	; (8017414 <udp_sendto_if_src+0x1c8>)
 80172d4:	484b      	ldr	r0, [pc, #300]	; (8017404 <udp_sendto_if_src+0x1b8>)
 80172d6:	f000 fc4b 	bl	8017b70 <iprintf>
 80172da:	f06f 030f 	mvn.w	r3, #15
 80172de:	e088      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	8a5b      	ldrh	r3, [r3, #18]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d10f      	bne.n	8017308 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80172e8:	68f9      	ldr	r1, [r7, #12]
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	8a5b      	ldrh	r3, [r3, #18]
 80172ee:	461a      	mov	r2, r3
 80172f0:	68f8      	ldr	r0, [r7, #12]
 80172f2:	f000 f893 	bl	801741c <udp_bind>
 80172f6:	4603      	mov	r3, r0
 80172f8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80172fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d002      	beq.n	8017308 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017302:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017306:	e074      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	891b      	ldrh	r3, [r3, #8]
 801730c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017310:	4293      	cmp	r3, r2
 8017312:	d902      	bls.n	801731a <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8017314:	f04f 33ff 	mov.w	r3, #4294967295
 8017318:	e06b      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801731a:	2108      	movs	r1, #8
 801731c:	68b8      	ldr	r0, [r7, #8]
 801731e:	f7f8 fb1f 	bl	800f960 <pbuf_add_header>
 8017322:	4603      	mov	r3, r0
 8017324:	2b00      	cmp	r3, #0
 8017326:	d015      	beq.n	8017354 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017328:	f44f 7220 	mov.w	r2, #640	; 0x280
 801732c:	2108      	movs	r1, #8
 801732e:	2022      	movs	r0, #34	; 0x22
 8017330:	f7f8 f8c8 	bl	800f4c4 <pbuf_alloc>
 8017334:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d102      	bne.n	8017342 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801733c:	f04f 33ff 	mov.w	r3, #4294967295
 8017340:	e057      	b.n	80173f2 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	891b      	ldrh	r3, [r3, #8]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d006      	beq.n	8017358 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801734a:	68b9      	ldr	r1, [r7, #8]
 801734c:	69f8      	ldr	r0, [r7, #28]
 801734e:	f7f8 fcc1 	bl	800fcd4 <pbuf_chain>
 8017352:	e001      	b.n	8017358 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017358:	69fb      	ldr	r3, [r7, #28]
 801735a:	895b      	ldrh	r3, [r3, #10]
 801735c:	2b07      	cmp	r3, #7
 801735e:	d806      	bhi.n	801736e <udp_sendto_if_src+0x122>
 8017360:	4b26      	ldr	r3, [pc, #152]	; (80173fc <udp_sendto_if_src+0x1b0>)
 8017362:	f240 320d 	movw	r2, #781	; 0x30d
 8017366:	492c      	ldr	r1, [pc, #176]	; (8017418 <udp_sendto_if_src+0x1cc>)
 8017368:	4826      	ldr	r0, [pc, #152]	; (8017404 <udp_sendto_if_src+0x1b8>)
 801736a:	f000 fc01 	bl	8017b70 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801736e:	69fb      	ldr	r3, [r7, #28]
 8017370:	685b      	ldr	r3, [r3, #4]
 8017372:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	8a5b      	ldrh	r3, [r3, #18]
 8017378:	4618      	mov	r0, r3
 801737a:	f7f4 fbcd 	bl	800bb18 <lwip_htons>
 801737e:	4603      	mov	r3, r0
 8017380:	461a      	mov	r2, r3
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017386:	887b      	ldrh	r3, [r7, #2]
 8017388:	4618      	mov	r0, r3
 801738a:	f7f4 fbc5 	bl	800bb18 <lwip_htons>
 801738e:	4603      	mov	r3, r0
 8017390:	461a      	mov	r2, r3
 8017392:	697b      	ldr	r3, [r7, #20]
 8017394:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	2200      	movs	r2, #0
 801739a:	719a      	strb	r2, [r3, #6]
 801739c:	2200      	movs	r2, #0
 801739e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80173a0:	69fb      	ldr	r3, [r7, #28]
 80173a2:	891b      	ldrh	r3, [r3, #8]
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7f4 fbb7 	bl	800bb18 <lwip_htons>
 80173aa:	4603      	mov	r3, r0
 80173ac:	461a      	mov	r2, r3
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80173b2:	2311      	movs	r3, #17
 80173b4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	7adb      	ldrb	r3, [r3, #11]
 80173ba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	7a9b      	ldrb	r3, [r3, #10]
 80173c0:	7cb9      	ldrb	r1, [r7, #18]
 80173c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173c4:	9202      	str	r2, [sp, #8]
 80173c6:	7cfa      	ldrb	r2, [r7, #19]
 80173c8:	9201      	str	r2, [sp, #4]
 80173ca:	9300      	str	r3, [sp, #0]
 80173cc:	460b      	mov	r3, r1
 80173ce:	687a      	ldr	r2, [r7, #4]
 80173d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80173d2:	69f8      	ldr	r0, [r7, #28]
 80173d4:	f7f6 f86a 	bl	800d4ac <ip4_output_if_src>
 80173d8:	4603      	mov	r3, r0
 80173da:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80173dc:	69fa      	ldr	r2, [r7, #28]
 80173de:	68bb      	ldr	r3, [r7, #8]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d004      	beq.n	80173ee <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 80173e4:	69f8      	ldr	r0, [r7, #28]
 80173e6:	f7f8 fb51 	bl	800fa8c <pbuf_free>
    q = NULL;
 80173ea:	2300      	movs	r3, #0
 80173ec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80173ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3720      	adds	r7, #32
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	bf00      	nop
 80173fc:	0801d0f4 	.word	0x0801d0f4
 8017400:	0801d33c 	.word	0x0801d33c
 8017404:	0801d1a4 	.word	0x0801d1a4
 8017408:	0801d35c 	.word	0x0801d35c
 801740c:	0801d37c 	.word	0x0801d37c
 8017410:	0801d3a0 	.word	0x0801d3a0
 8017414:	0801d3c4 	.word	0x0801d3c4
 8017418:	0801d3e8 	.word	0x0801d3e8

0801741c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b086      	sub	sp, #24
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	4613      	mov	r3, r2
 8017428:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 801742a:	f7ee fd01 	bl	8005e30 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801742e:	68bb      	ldr	r3, [r7, #8]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d101      	bne.n	8017438 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017434:	4b39      	ldr	r3, [pc, #228]	; (801751c <udp_bind+0x100>)
 8017436:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d109      	bne.n	8017452 <udp_bind+0x36>
 801743e:	4b38      	ldr	r3, [pc, #224]	; (8017520 <udp_bind+0x104>)
 8017440:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017444:	4937      	ldr	r1, [pc, #220]	; (8017524 <udp_bind+0x108>)
 8017446:	4838      	ldr	r0, [pc, #224]	; (8017528 <udp_bind+0x10c>)
 8017448:	f000 fb92 	bl	8017b70 <iprintf>
 801744c:	f06f 030f 	mvn.w	r3, #15
 8017450:	e060      	b.n	8017514 <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017452:	2300      	movs	r3, #0
 8017454:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017456:	4b35      	ldr	r3, [pc, #212]	; (801752c <udp_bind+0x110>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	617b      	str	r3, [r7, #20]
 801745c:	e009      	b.n	8017472 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	429a      	cmp	r2, r3
 8017464:	d102      	bne.n	801746c <udp_bind+0x50>
      rebind = 1;
 8017466:	2301      	movs	r3, #1
 8017468:	74fb      	strb	r3, [r7, #19]
      break;
 801746a:	e005      	b.n	8017478 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	617b      	str	r3, [r7, #20]
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d1f2      	bne.n	801745e <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017478:	88fb      	ldrh	r3, [r7, #6]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d109      	bne.n	8017492 <udp_bind+0x76>
    port = udp_new_port();
 801747e:	f7ff fc2f 	bl	8016ce0 <udp_new_port>
 8017482:	4603      	mov	r3, r0
 8017484:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017486:	88fb      	ldrh	r3, [r7, #6]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d12c      	bne.n	80174e6 <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801748c:	f06f 0307 	mvn.w	r3, #7
 8017490:	e040      	b.n	8017514 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017492:	4b26      	ldr	r3, [pc, #152]	; (801752c <udp_bind+0x110>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	617b      	str	r3, [r7, #20]
 8017498:	e022      	b.n	80174e0 <udp_bind+0xc4>
      if (pcb != ipcb) {
 801749a:	68fa      	ldr	r2, [r7, #12]
 801749c:	697b      	ldr	r3, [r7, #20]
 801749e:	429a      	cmp	r2, r3
 80174a0:	d01b      	beq.n	80174da <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80174a2:	697b      	ldr	r3, [r7, #20]
 80174a4:	8a5b      	ldrh	r3, [r3, #18]
 80174a6:	88fa      	ldrh	r2, [r7, #6]
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d116      	bne.n	80174da <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80174ac:	697b      	ldr	r3, [r7, #20]
 80174ae:	681a      	ldr	r2, [r3, #0]
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80174b4:	429a      	cmp	r2, r3
 80174b6:	d00d      	beq.n	80174d4 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d00a      	beq.n	80174d4 <udp_bind+0xb8>
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d006      	beq.n	80174d4 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 80174c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d003      	beq.n	80174d4 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d102      	bne.n	80174da <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80174d4:	f06f 0307 	mvn.w	r3, #7
 80174d8:	e01c      	b.n	8017514 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80174da:	697b      	ldr	r3, [r7, #20]
 80174dc:	68db      	ldr	r3, [r3, #12]
 80174de:	617b      	str	r3, [r7, #20]
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d1d9      	bne.n	801749a <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d002      	beq.n	80174f2 <udp_bind+0xd6>
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	e000      	b.n	80174f4 <udp_bind+0xd8>
 80174f2:	2300      	movs	r3, #0
 80174f4:	68fa      	ldr	r2, [r7, #12]
 80174f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	88fa      	ldrh	r2, [r7, #6]
 80174fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80174fe:	7cfb      	ldrb	r3, [r7, #19]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d106      	bne.n	8017512 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017504:	4b09      	ldr	r3, [pc, #36]	; (801752c <udp_bind+0x110>)
 8017506:	681a      	ldr	r2, [r3, #0]
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801750c:	4a07      	ldr	r2, [pc, #28]	; (801752c <udp_bind+0x110>)
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017512:	2300      	movs	r3, #0
}
 8017514:	4618      	mov	r0, r3
 8017516:	3718      	adds	r7, #24
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	0801d538 	.word	0x0801d538
 8017520:	0801d0f4 	.word	0x0801d0f4
 8017524:	0801d418 	.word	0x0801d418
 8017528:	0801d1a4 	.word	0x0801d1a4
 801752c:	240109b4 	.word	0x240109b4

08017530 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b086      	sub	sp, #24
 8017534:	af00      	add	r7, sp, #0
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	4613      	mov	r3, r2
 801753c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 801753e:	f7ee fc77 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d109      	bne.n	801755c <udp_connect+0x2c>
 8017548:	4b2c      	ldr	r3, [pc, #176]	; (80175fc <udp_connect+0xcc>)
 801754a:	f240 4235 	movw	r2, #1077	; 0x435
 801754e:	492c      	ldr	r1, [pc, #176]	; (8017600 <udp_connect+0xd0>)
 8017550:	482c      	ldr	r0, [pc, #176]	; (8017604 <udp_connect+0xd4>)
 8017552:	f000 fb0d 	bl	8017b70 <iprintf>
 8017556:	f06f 030f 	mvn.w	r3, #15
 801755a:	e04b      	b.n	80175f4 <udp_connect+0xc4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d109      	bne.n	8017576 <udp_connect+0x46>
 8017562:	4b26      	ldr	r3, [pc, #152]	; (80175fc <udp_connect+0xcc>)
 8017564:	f240 4236 	movw	r2, #1078	; 0x436
 8017568:	4927      	ldr	r1, [pc, #156]	; (8017608 <udp_connect+0xd8>)
 801756a:	4826      	ldr	r0, [pc, #152]	; (8017604 <udp_connect+0xd4>)
 801756c:	f000 fb00 	bl	8017b70 <iprintf>
 8017570:	f06f 030f 	mvn.w	r3, #15
 8017574:	e03e      	b.n	80175f4 <udp_connect+0xc4>

  if (pcb->local_port == 0) {
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	8a5b      	ldrh	r3, [r3, #18]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d10f      	bne.n	801759e <udp_connect+0x6e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801757e:	68f9      	ldr	r1, [r7, #12]
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	8a5b      	ldrh	r3, [r3, #18]
 8017584:	461a      	mov	r2, r3
 8017586:	68f8      	ldr	r0, [r7, #12]
 8017588:	f7ff ff48 	bl	801741c <udp_bind>
 801758c:	4603      	mov	r3, r0
 801758e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017590:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d002      	beq.n	801759e <udp_connect+0x6e>
      return err;
 8017598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801759c:	e02a      	b.n	80175f4 <udp_connect+0xc4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801759e:	68bb      	ldr	r3, [r7, #8]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d002      	beq.n	80175aa <udp_connect+0x7a>
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	e000      	b.n	80175ac <udp_connect+0x7c>
 80175aa:	2300      	movs	r3, #0
 80175ac:	68fa      	ldr	r2, [r7, #12]
 80175ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	88fa      	ldrh	r2, [r7, #6]
 80175b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	7c1b      	ldrb	r3, [r3, #16]
 80175ba:	f043 0304 	orr.w	r3, r3, #4
 80175be:	b2da      	uxtb	r2, r3
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80175c4:	4b11      	ldr	r3, [pc, #68]	; (801760c <udp_connect+0xdc>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	617b      	str	r3, [r7, #20]
 80175ca:	e008      	b.n	80175de <udp_connect+0xae>
    if (pcb == ipcb) {
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	697b      	ldr	r3, [r7, #20]
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d101      	bne.n	80175d8 <udp_connect+0xa8>
      /* already on the list, just return */
      return ERR_OK;
 80175d4:	2300      	movs	r3, #0
 80175d6:	e00d      	b.n	80175f4 <udp_connect+0xc4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	617b      	str	r3, [r7, #20]
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1f3      	bne.n	80175cc <udp_connect+0x9c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80175e4:	4b09      	ldr	r3, [pc, #36]	; (801760c <udp_connect+0xdc>)
 80175e6:	681a      	ldr	r2, [r3, #0]
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80175ec:	4a07      	ldr	r2, [pc, #28]	; (801760c <udp_connect+0xdc>)
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80175f2:	2300      	movs	r3, #0
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3718      	adds	r7, #24
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}
 80175fc:	0801d0f4 	.word	0x0801d0f4
 8017600:	0801d430 	.word	0x0801d430
 8017604:	0801d1a4 	.word	0x0801d1a4
 8017608:	0801d44c 	.word	0x0801d44c
 801760c:	240109b4 	.word	0x240109b4

08017610 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b084      	sub	sp, #16
 8017614:	af00      	add	r7, sp, #0
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 801761c:	f7ee fc08 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d107      	bne.n	8017636 <udp_recv+0x26>
 8017626:	4b08      	ldr	r3, [pc, #32]	; (8017648 <udp_recv+0x38>)
 8017628:	f240 428a 	movw	r2, #1162	; 0x48a
 801762c:	4907      	ldr	r1, [pc, #28]	; (801764c <udp_recv+0x3c>)
 801762e:	4808      	ldr	r0, [pc, #32]	; (8017650 <udp_recv+0x40>)
 8017630:	f000 fa9e 	bl	8017b70 <iprintf>
 8017634:	e005      	b.n	8017642 <udp_recv+0x32>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	68ba      	ldr	r2, [r7, #8]
 801763a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	61da      	str	r2, [r3, #28]
}
 8017642:	3710      	adds	r7, #16
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}
 8017648:	0801d0f4 	.word	0x0801d0f4
 801764c:	0801d484 	.word	0x0801d484
 8017650:	0801d1a4 	.word	0x0801d1a4

08017654 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b084      	sub	sp, #16
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 801765c:	f7ee fbe8 	bl	8005e30 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d107      	bne.n	8017676 <udp_remove+0x22>
 8017666:	4b19      	ldr	r3, [pc, #100]	; (80176cc <udp_remove+0x78>)
 8017668:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801766c:	4918      	ldr	r1, [pc, #96]	; (80176d0 <udp_remove+0x7c>)
 801766e:	4819      	ldr	r0, [pc, #100]	; (80176d4 <udp_remove+0x80>)
 8017670:	f000 fa7e 	bl	8017b70 <iprintf>
 8017674:	e026      	b.n	80176c4 <udp_remove+0x70>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017676:	4b18      	ldr	r3, [pc, #96]	; (80176d8 <udp_remove+0x84>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	429a      	cmp	r2, r3
 801767e:	d105      	bne.n	801768c <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017680:	4b15      	ldr	r3, [pc, #84]	; (80176d8 <udp_remove+0x84>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	68db      	ldr	r3, [r3, #12]
 8017686:	4a14      	ldr	r2, [pc, #80]	; (80176d8 <udp_remove+0x84>)
 8017688:	6013      	str	r3, [r2, #0]
 801768a:	e017      	b.n	80176bc <udp_remove+0x68>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801768c:	4b12      	ldr	r3, [pc, #72]	; (80176d8 <udp_remove+0x84>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	60fb      	str	r3, [r7, #12]
 8017692:	e010      	b.n	80176b6 <udp_remove+0x62>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	68db      	ldr	r3, [r3, #12]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d009      	beq.n	80176b0 <udp_remove+0x5c>
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	68db      	ldr	r3, [r3, #12]
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d104      	bne.n	80176b0 <udp_remove+0x5c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	68da      	ldr	r2, [r3, #12]
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	60da      	str	r2, [r3, #12]
        break;
 80176ae:	e005      	b.n	80176bc <udp_remove+0x68>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	68db      	ldr	r3, [r3, #12]
 80176b4:	60fb      	str	r3, [r7, #12]
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d1eb      	bne.n	8017694 <udp_remove+0x40>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80176bc:	6879      	ldr	r1, [r7, #4]
 80176be:	2000      	movs	r0, #0
 80176c0:	f7f7 fb16 	bl	800ecf0 <memp_free>
}
 80176c4:	3710      	adds	r7, #16
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	0801d0f4 	.word	0x0801d0f4
 80176d0:	0801d49c 	.word	0x0801d49c
 80176d4:	0801d1a4 	.word	0x0801d1a4
 80176d8:	240109b4 	.word	0x240109b4

080176dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80176e2:	f7ee fba5 	bl	8005e30 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80176e6:	2000      	movs	r0, #0
 80176e8:	f7f7 fa8c 	bl	800ec04 <memp_malloc>
 80176ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d007      	beq.n	8017704 <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80176f4:	2220      	movs	r2, #32
 80176f6:	2100      	movs	r1, #0
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	f000 f99c 	bl	8017a36 <memset>
    pcb->ttl = UDP_TTL;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	22ff      	movs	r2, #255	; 0xff
 8017702:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017704:	687b      	ldr	r3, [r7, #4]
}
 8017706:	4618      	mov	r0, r3
 8017708:	3708      	adds	r7, #8
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}

0801770e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801770e:	b580      	push	{r7, lr}
 8017710:	b084      	sub	sp, #16
 8017712:	af00      	add	r7, sp, #0
 8017714:	4603      	mov	r3, r0
 8017716:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8017718:	f7ee fb8a 	bl	8005e30 <sys_check_core_locking>

  pcb = udp_new();
 801771c:	f7ff ffde 	bl	80176dc <udp_new>
 8017720:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017722:	68fb      	ldr	r3, [r7, #12]
}
 8017724:	4618      	mov	r0, r3
 8017726:	3710      	adds	r7, #16
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}

0801772c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801772c:	b480      	push	{r7}
 801772e:	b085      	sub	sp, #20
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
 8017734:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d01e      	beq.n	801777a <udp_netif_ip_addr_changed+0x4e>
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d01a      	beq.n	801777a <udp_netif_ip_addr_changed+0x4e>
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d017      	beq.n	801777a <udp_netif_ip_addr_changed+0x4e>
 801774a:	683b      	ldr	r3, [r7, #0]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d013      	beq.n	801777a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017752:	4b0d      	ldr	r3, [pc, #52]	; (8017788 <udp_netif_ip_addr_changed+0x5c>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	60fb      	str	r3, [r7, #12]
 8017758:	e00c      	b.n	8017774 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	681a      	ldr	r2, [r3, #0]
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	429a      	cmp	r2, r3
 8017764:	d103      	bne.n	801776e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	681a      	ldr	r2, [r3, #0]
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	68db      	ldr	r3, [r3, #12]
 8017772:	60fb      	str	r3, [r7, #12]
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d1ef      	bne.n	801775a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801777a:	bf00      	nop
 801777c:	3714      	adds	r7, #20
 801777e:	46bd      	mov	sp, r7
 8017780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017784:	4770      	bx	lr
 8017786:	bf00      	nop
 8017788:	240109b4 	.word	0x240109b4

0801778c <std>:
 801778c:	2300      	movs	r3, #0
 801778e:	b510      	push	{r4, lr}
 8017790:	4604      	mov	r4, r0
 8017792:	e9c0 3300 	strd	r3, r3, [r0]
 8017796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801779a:	6083      	str	r3, [r0, #8]
 801779c:	8181      	strh	r1, [r0, #12]
 801779e:	6643      	str	r3, [r0, #100]	; 0x64
 80177a0:	81c2      	strh	r2, [r0, #14]
 80177a2:	6183      	str	r3, [r0, #24]
 80177a4:	4619      	mov	r1, r3
 80177a6:	2208      	movs	r2, #8
 80177a8:	305c      	adds	r0, #92	; 0x5c
 80177aa:	f000 f944 	bl	8017a36 <memset>
 80177ae:	4b05      	ldr	r3, [pc, #20]	; (80177c4 <std+0x38>)
 80177b0:	6263      	str	r3, [r4, #36]	; 0x24
 80177b2:	4b05      	ldr	r3, [pc, #20]	; (80177c8 <std+0x3c>)
 80177b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80177b6:	4b05      	ldr	r3, [pc, #20]	; (80177cc <std+0x40>)
 80177b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80177ba:	4b05      	ldr	r3, [pc, #20]	; (80177d0 <std+0x44>)
 80177bc:	6224      	str	r4, [r4, #32]
 80177be:	6323      	str	r3, [r4, #48]	; 0x30
 80177c0:	bd10      	pop	{r4, pc}
 80177c2:	bf00      	nop
 80177c4:	08017d51 	.word	0x08017d51
 80177c8:	08017d73 	.word	0x08017d73
 80177cc:	08017dab 	.word	0x08017dab
 80177d0:	08017dcf 	.word	0x08017dcf

080177d4 <_cleanup_r>:
 80177d4:	4901      	ldr	r1, [pc, #4]	; (80177dc <_cleanup_r+0x8>)
 80177d6:	f000 b8af 	b.w	8017938 <_fwalk_reent>
 80177da:	bf00      	nop
 80177dc:	08017f75 	.word	0x08017f75

080177e0 <__sfmoreglue>:
 80177e0:	b570      	push	{r4, r5, r6, lr}
 80177e2:	2268      	movs	r2, #104	; 0x68
 80177e4:	1e4d      	subs	r5, r1, #1
 80177e6:	4355      	muls	r5, r2
 80177e8:	460e      	mov	r6, r1
 80177ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80177ee:	f000 f94b 	bl	8017a88 <_malloc_r>
 80177f2:	4604      	mov	r4, r0
 80177f4:	b140      	cbz	r0, 8017808 <__sfmoreglue+0x28>
 80177f6:	2100      	movs	r1, #0
 80177f8:	e9c0 1600 	strd	r1, r6, [r0]
 80177fc:	300c      	adds	r0, #12
 80177fe:	60a0      	str	r0, [r4, #8]
 8017800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017804:	f000 f917 	bl	8017a36 <memset>
 8017808:	4620      	mov	r0, r4
 801780a:	bd70      	pop	{r4, r5, r6, pc}

0801780c <__sfp_lock_acquire>:
 801780c:	4801      	ldr	r0, [pc, #4]	; (8017814 <__sfp_lock_acquire+0x8>)
 801780e:	f000 b8d8 	b.w	80179c2 <__retarget_lock_acquire_recursive>
 8017812:	bf00      	nop
 8017814:	240109b9 	.word	0x240109b9

08017818 <__sfp_lock_release>:
 8017818:	4801      	ldr	r0, [pc, #4]	; (8017820 <__sfp_lock_release+0x8>)
 801781a:	f000 b8d3 	b.w	80179c4 <__retarget_lock_release_recursive>
 801781e:	bf00      	nop
 8017820:	240109b9 	.word	0x240109b9

08017824 <__sinit_lock_acquire>:
 8017824:	4801      	ldr	r0, [pc, #4]	; (801782c <__sinit_lock_acquire+0x8>)
 8017826:	f000 b8cc 	b.w	80179c2 <__retarget_lock_acquire_recursive>
 801782a:	bf00      	nop
 801782c:	240109ba 	.word	0x240109ba

08017830 <__sinit_lock_release>:
 8017830:	4801      	ldr	r0, [pc, #4]	; (8017838 <__sinit_lock_release+0x8>)
 8017832:	f000 b8c7 	b.w	80179c4 <__retarget_lock_release_recursive>
 8017836:	bf00      	nop
 8017838:	240109ba 	.word	0x240109ba

0801783c <__sinit>:
 801783c:	b510      	push	{r4, lr}
 801783e:	4604      	mov	r4, r0
 8017840:	f7ff fff0 	bl	8017824 <__sinit_lock_acquire>
 8017844:	69a3      	ldr	r3, [r4, #24]
 8017846:	b11b      	cbz	r3, 8017850 <__sinit+0x14>
 8017848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801784c:	f7ff bff0 	b.w	8017830 <__sinit_lock_release>
 8017850:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017854:	6523      	str	r3, [r4, #80]	; 0x50
 8017856:	4b13      	ldr	r3, [pc, #76]	; (80178a4 <__sinit+0x68>)
 8017858:	4a13      	ldr	r2, [pc, #76]	; (80178a8 <__sinit+0x6c>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	62a2      	str	r2, [r4, #40]	; 0x28
 801785e:	42a3      	cmp	r3, r4
 8017860:	bf04      	itt	eq
 8017862:	2301      	moveq	r3, #1
 8017864:	61a3      	streq	r3, [r4, #24]
 8017866:	4620      	mov	r0, r4
 8017868:	f000 f820 	bl	80178ac <__sfp>
 801786c:	6060      	str	r0, [r4, #4]
 801786e:	4620      	mov	r0, r4
 8017870:	f000 f81c 	bl	80178ac <__sfp>
 8017874:	60a0      	str	r0, [r4, #8]
 8017876:	4620      	mov	r0, r4
 8017878:	f000 f818 	bl	80178ac <__sfp>
 801787c:	2200      	movs	r2, #0
 801787e:	60e0      	str	r0, [r4, #12]
 8017880:	2104      	movs	r1, #4
 8017882:	6860      	ldr	r0, [r4, #4]
 8017884:	f7ff ff82 	bl	801778c <std>
 8017888:	68a0      	ldr	r0, [r4, #8]
 801788a:	2201      	movs	r2, #1
 801788c:	2109      	movs	r1, #9
 801788e:	f7ff ff7d 	bl	801778c <std>
 8017892:	68e0      	ldr	r0, [r4, #12]
 8017894:	2202      	movs	r2, #2
 8017896:	2112      	movs	r1, #18
 8017898:	f7ff ff78 	bl	801778c <std>
 801789c:	2301      	movs	r3, #1
 801789e:	61a3      	str	r3, [r4, #24]
 80178a0:	e7d2      	b.n	8017848 <__sinit+0xc>
 80178a2:	bf00      	nop
 80178a4:	0801d6ac 	.word	0x0801d6ac
 80178a8:	080177d5 	.word	0x080177d5

080178ac <__sfp>:
 80178ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ae:	4607      	mov	r7, r0
 80178b0:	f7ff ffac 	bl	801780c <__sfp_lock_acquire>
 80178b4:	4b1e      	ldr	r3, [pc, #120]	; (8017930 <__sfp+0x84>)
 80178b6:	681e      	ldr	r6, [r3, #0]
 80178b8:	69b3      	ldr	r3, [r6, #24]
 80178ba:	b913      	cbnz	r3, 80178c2 <__sfp+0x16>
 80178bc:	4630      	mov	r0, r6
 80178be:	f7ff ffbd 	bl	801783c <__sinit>
 80178c2:	3648      	adds	r6, #72	; 0x48
 80178c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80178c8:	3b01      	subs	r3, #1
 80178ca:	d503      	bpl.n	80178d4 <__sfp+0x28>
 80178cc:	6833      	ldr	r3, [r6, #0]
 80178ce:	b30b      	cbz	r3, 8017914 <__sfp+0x68>
 80178d0:	6836      	ldr	r6, [r6, #0]
 80178d2:	e7f7      	b.n	80178c4 <__sfp+0x18>
 80178d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80178d8:	b9d5      	cbnz	r5, 8017910 <__sfp+0x64>
 80178da:	4b16      	ldr	r3, [pc, #88]	; (8017934 <__sfp+0x88>)
 80178dc:	60e3      	str	r3, [r4, #12]
 80178de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80178e2:	6665      	str	r5, [r4, #100]	; 0x64
 80178e4:	f000 f86c 	bl	80179c0 <__retarget_lock_init_recursive>
 80178e8:	f7ff ff96 	bl	8017818 <__sfp_lock_release>
 80178ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80178f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80178f4:	6025      	str	r5, [r4, #0]
 80178f6:	61a5      	str	r5, [r4, #24]
 80178f8:	2208      	movs	r2, #8
 80178fa:	4629      	mov	r1, r5
 80178fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017900:	f000 f899 	bl	8017a36 <memset>
 8017904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801790c:	4620      	mov	r0, r4
 801790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017910:	3468      	adds	r4, #104	; 0x68
 8017912:	e7d9      	b.n	80178c8 <__sfp+0x1c>
 8017914:	2104      	movs	r1, #4
 8017916:	4638      	mov	r0, r7
 8017918:	f7ff ff62 	bl	80177e0 <__sfmoreglue>
 801791c:	4604      	mov	r4, r0
 801791e:	6030      	str	r0, [r6, #0]
 8017920:	2800      	cmp	r0, #0
 8017922:	d1d5      	bne.n	80178d0 <__sfp+0x24>
 8017924:	f7ff ff78 	bl	8017818 <__sfp_lock_release>
 8017928:	230c      	movs	r3, #12
 801792a:	603b      	str	r3, [r7, #0]
 801792c:	e7ee      	b.n	801790c <__sfp+0x60>
 801792e:	bf00      	nop
 8017930:	0801d6ac 	.word	0x0801d6ac
 8017934:	ffff0001 	.word	0xffff0001

08017938 <_fwalk_reent>:
 8017938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801793c:	4606      	mov	r6, r0
 801793e:	4688      	mov	r8, r1
 8017940:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017944:	2700      	movs	r7, #0
 8017946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801794a:	f1b9 0901 	subs.w	r9, r9, #1
 801794e:	d505      	bpl.n	801795c <_fwalk_reent+0x24>
 8017950:	6824      	ldr	r4, [r4, #0]
 8017952:	2c00      	cmp	r4, #0
 8017954:	d1f7      	bne.n	8017946 <_fwalk_reent+0xe>
 8017956:	4638      	mov	r0, r7
 8017958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801795c:	89ab      	ldrh	r3, [r5, #12]
 801795e:	2b01      	cmp	r3, #1
 8017960:	d907      	bls.n	8017972 <_fwalk_reent+0x3a>
 8017962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017966:	3301      	adds	r3, #1
 8017968:	d003      	beq.n	8017972 <_fwalk_reent+0x3a>
 801796a:	4629      	mov	r1, r5
 801796c:	4630      	mov	r0, r6
 801796e:	47c0      	blx	r8
 8017970:	4307      	orrs	r7, r0
 8017972:	3568      	adds	r5, #104	; 0x68
 8017974:	e7e9      	b.n	801794a <_fwalk_reent+0x12>
	...

08017978 <__libc_init_array>:
 8017978:	b570      	push	{r4, r5, r6, lr}
 801797a:	4d0d      	ldr	r5, [pc, #52]	; (80179b0 <__libc_init_array+0x38>)
 801797c:	4c0d      	ldr	r4, [pc, #52]	; (80179b4 <__libc_init_array+0x3c>)
 801797e:	1b64      	subs	r4, r4, r5
 8017980:	10a4      	asrs	r4, r4, #2
 8017982:	2600      	movs	r6, #0
 8017984:	42a6      	cmp	r6, r4
 8017986:	d109      	bne.n	801799c <__libc_init_array+0x24>
 8017988:	4d0b      	ldr	r5, [pc, #44]	; (80179b8 <__libc_init_array+0x40>)
 801798a:	4c0c      	ldr	r4, [pc, #48]	; (80179bc <__libc_init_array+0x44>)
 801798c:	f002 f816 	bl	80199bc <_init>
 8017990:	1b64      	subs	r4, r4, r5
 8017992:	10a4      	asrs	r4, r4, #2
 8017994:	2600      	movs	r6, #0
 8017996:	42a6      	cmp	r6, r4
 8017998:	d105      	bne.n	80179a6 <__libc_init_array+0x2e>
 801799a:	bd70      	pop	{r4, r5, r6, pc}
 801799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80179a0:	4798      	blx	r3
 80179a2:	3601      	adds	r6, #1
 80179a4:	e7ee      	b.n	8017984 <__libc_init_array+0xc>
 80179a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80179aa:	4798      	blx	r3
 80179ac:	3601      	adds	r6, #1
 80179ae:	e7f2      	b.n	8017996 <__libc_init_array+0x1e>
 80179b0:	0801d970 	.word	0x0801d970
 80179b4:	0801d970 	.word	0x0801d970
 80179b8:	0801d970 	.word	0x0801d970
 80179bc:	0801d974 	.word	0x0801d974

080179c0 <__retarget_lock_init_recursive>:
 80179c0:	4770      	bx	lr

080179c2 <__retarget_lock_acquire_recursive>:
 80179c2:	4770      	bx	lr

080179c4 <__retarget_lock_release_recursive>:
 80179c4:	4770      	bx	lr

080179c6 <memcmp>:
 80179c6:	b510      	push	{r4, lr}
 80179c8:	3901      	subs	r1, #1
 80179ca:	4402      	add	r2, r0
 80179cc:	4290      	cmp	r0, r2
 80179ce:	d101      	bne.n	80179d4 <memcmp+0xe>
 80179d0:	2000      	movs	r0, #0
 80179d2:	e005      	b.n	80179e0 <memcmp+0x1a>
 80179d4:	7803      	ldrb	r3, [r0, #0]
 80179d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179da:	42a3      	cmp	r3, r4
 80179dc:	d001      	beq.n	80179e2 <memcmp+0x1c>
 80179de:	1b18      	subs	r0, r3, r4
 80179e0:	bd10      	pop	{r4, pc}
 80179e2:	3001      	adds	r0, #1
 80179e4:	e7f2      	b.n	80179cc <memcmp+0x6>

080179e6 <memcpy>:
 80179e6:	440a      	add	r2, r1
 80179e8:	4291      	cmp	r1, r2
 80179ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80179ee:	d100      	bne.n	80179f2 <memcpy+0xc>
 80179f0:	4770      	bx	lr
 80179f2:	b510      	push	{r4, lr}
 80179f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80179fc:	4291      	cmp	r1, r2
 80179fe:	d1f9      	bne.n	80179f4 <memcpy+0xe>
 8017a00:	bd10      	pop	{r4, pc}

08017a02 <memmove>:
 8017a02:	4288      	cmp	r0, r1
 8017a04:	b510      	push	{r4, lr}
 8017a06:	eb01 0402 	add.w	r4, r1, r2
 8017a0a:	d902      	bls.n	8017a12 <memmove+0x10>
 8017a0c:	4284      	cmp	r4, r0
 8017a0e:	4623      	mov	r3, r4
 8017a10:	d807      	bhi.n	8017a22 <memmove+0x20>
 8017a12:	1e43      	subs	r3, r0, #1
 8017a14:	42a1      	cmp	r1, r4
 8017a16:	d008      	beq.n	8017a2a <memmove+0x28>
 8017a18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a20:	e7f8      	b.n	8017a14 <memmove+0x12>
 8017a22:	4402      	add	r2, r0
 8017a24:	4601      	mov	r1, r0
 8017a26:	428a      	cmp	r2, r1
 8017a28:	d100      	bne.n	8017a2c <memmove+0x2a>
 8017a2a:	bd10      	pop	{r4, pc}
 8017a2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a34:	e7f7      	b.n	8017a26 <memmove+0x24>

08017a36 <memset>:
 8017a36:	4402      	add	r2, r0
 8017a38:	4603      	mov	r3, r0
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d100      	bne.n	8017a40 <memset+0xa>
 8017a3e:	4770      	bx	lr
 8017a40:	f803 1b01 	strb.w	r1, [r3], #1
 8017a44:	e7f9      	b.n	8017a3a <memset+0x4>
	...

08017a48 <sbrk_aligned>:
 8017a48:	b570      	push	{r4, r5, r6, lr}
 8017a4a:	4e0e      	ldr	r6, [pc, #56]	; (8017a84 <sbrk_aligned+0x3c>)
 8017a4c:	460c      	mov	r4, r1
 8017a4e:	6831      	ldr	r1, [r6, #0]
 8017a50:	4605      	mov	r5, r0
 8017a52:	b911      	cbnz	r1, 8017a5a <sbrk_aligned+0x12>
 8017a54:	f000 f94c 	bl	8017cf0 <_sbrk_r>
 8017a58:	6030      	str	r0, [r6, #0]
 8017a5a:	4621      	mov	r1, r4
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	f000 f947 	bl	8017cf0 <_sbrk_r>
 8017a62:	1c43      	adds	r3, r0, #1
 8017a64:	d00a      	beq.n	8017a7c <sbrk_aligned+0x34>
 8017a66:	1cc4      	adds	r4, r0, #3
 8017a68:	f024 0403 	bic.w	r4, r4, #3
 8017a6c:	42a0      	cmp	r0, r4
 8017a6e:	d007      	beq.n	8017a80 <sbrk_aligned+0x38>
 8017a70:	1a21      	subs	r1, r4, r0
 8017a72:	4628      	mov	r0, r5
 8017a74:	f000 f93c 	bl	8017cf0 <_sbrk_r>
 8017a78:	3001      	adds	r0, #1
 8017a7a:	d101      	bne.n	8017a80 <sbrk_aligned+0x38>
 8017a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8017a80:	4620      	mov	r0, r4
 8017a82:	bd70      	pop	{r4, r5, r6, pc}
 8017a84:	240109c0 	.word	0x240109c0

08017a88 <_malloc_r>:
 8017a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a8c:	1ccd      	adds	r5, r1, #3
 8017a8e:	f025 0503 	bic.w	r5, r5, #3
 8017a92:	3508      	adds	r5, #8
 8017a94:	2d0c      	cmp	r5, #12
 8017a96:	bf38      	it	cc
 8017a98:	250c      	movcc	r5, #12
 8017a9a:	2d00      	cmp	r5, #0
 8017a9c:	4607      	mov	r7, r0
 8017a9e:	db01      	blt.n	8017aa4 <_malloc_r+0x1c>
 8017aa0:	42a9      	cmp	r1, r5
 8017aa2:	d905      	bls.n	8017ab0 <_malloc_r+0x28>
 8017aa4:	230c      	movs	r3, #12
 8017aa6:	603b      	str	r3, [r7, #0]
 8017aa8:	2600      	movs	r6, #0
 8017aaa:	4630      	mov	r0, r6
 8017aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ab0:	4e2e      	ldr	r6, [pc, #184]	; (8017b6c <_malloc_r+0xe4>)
 8017ab2:	f000 fac7 	bl	8018044 <__malloc_lock>
 8017ab6:	6833      	ldr	r3, [r6, #0]
 8017ab8:	461c      	mov	r4, r3
 8017aba:	bb34      	cbnz	r4, 8017b0a <_malloc_r+0x82>
 8017abc:	4629      	mov	r1, r5
 8017abe:	4638      	mov	r0, r7
 8017ac0:	f7ff ffc2 	bl	8017a48 <sbrk_aligned>
 8017ac4:	1c43      	adds	r3, r0, #1
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	d14d      	bne.n	8017b66 <_malloc_r+0xde>
 8017aca:	6834      	ldr	r4, [r6, #0]
 8017acc:	4626      	mov	r6, r4
 8017ace:	2e00      	cmp	r6, #0
 8017ad0:	d140      	bne.n	8017b54 <_malloc_r+0xcc>
 8017ad2:	6823      	ldr	r3, [r4, #0]
 8017ad4:	4631      	mov	r1, r6
 8017ad6:	4638      	mov	r0, r7
 8017ad8:	eb04 0803 	add.w	r8, r4, r3
 8017adc:	f000 f908 	bl	8017cf0 <_sbrk_r>
 8017ae0:	4580      	cmp	r8, r0
 8017ae2:	d13a      	bne.n	8017b5a <_malloc_r+0xd2>
 8017ae4:	6821      	ldr	r1, [r4, #0]
 8017ae6:	3503      	adds	r5, #3
 8017ae8:	1a6d      	subs	r5, r5, r1
 8017aea:	f025 0503 	bic.w	r5, r5, #3
 8017aee:	3508      	adds	r5, #8
 8017af0:	2d0c      	cmp	r5, #12
 8017af2:	bf38      	it	cc
 8017af4:	250c      	movcc	r5, #12
 8017af6:	4629      	mov	r1, r5
 8017af8:	4638      	mov	r0, r7
 8017afa:	f7ff ffa5 	bl	8017a48 <sbrk_aligned>
 8017afe:	3001      	adds	r0, #1
 8017b00:	d02b      	beq.n	8017b5a <_malloc_r+0xd2>
 8017b02:	6823      	ldr	r3, [r4, #0]
 8017b04:	442b      	add	r3, r5
 8017b06:	6023      	str	r3, [r4, #0]
 8017b08:	e00e      	b.n	8017b28 <_malloc_r+0xa0>
 8017b0a:	6822      	ldr	r2, [r4, #0]
 8017b0c:	1b52      	subs	r2, r2, r5
 8017b0e:	d41e      	bmi.n	8017b4e <_malloc_r+0xc6>
 8017b10:	2a0b      	cmp	r2, #11
 8017b12:	d916      	bls.n	8017b42 <_malloc_r+0xba>
 8017b14:	1961      	adds	r1, r4, r5
 8017b16:	42a3      	cmp	r3, r4
 8017b18:	6025      	str	r5, [r4, #0]
 8017b1a:	bf18      	it	ne
 8017b1c:	6059      	strne	r1, [r3, #4]
 8017b1e:	6863      	ldr	r3, [r4, #4]
 8017b20:	bf08      	it	eq
 8017b22:	6031      	streq	r1, [r6, #0]
 8017b24:	5162      	str	r2, [r4, r5]
 8017b26:	604b      	str	r3, [r1, #4]
 8017b28:	4638      	mov	r0, r7
 8017b2a:	f104 060b 	add.w	r6, r4, #11
 8017b2e:	f000 fa8f 	bl	8018050 <__malloc_unlock>
 8017b32:	f026 0607 	bic.w	r6, r6, #7
 8017b36:	1d23      	adds	r3, r4, #4
 8017b38:	1af2      	subs	r2, r6, r3
 8017b3a:	d0b6      	beq.n	8017aaa <_malloc_r+0x22>
 8017b3c:	1b9b      	subs	r3, r3, r6
 8017b3e:	50a3      	str	r3, [r4, r2]
 8017b40:	e7b3      	b.n	8017aaa <_malloc_r+0x22>
 8017b42:	6862      	ldr	r2, [r4, #4]
 8017b44:	42a3      	cmp	r3, r4
 8017b46:	bf0c      	ite	eq
 8017b48:	6032      	streq	r2, [r6, #0]
 8017b4a:	605a      	strne	r2, [r3, #4]
 8017b4c:	e7ec      	b.n	8017b28 <_malloc_r+0xa0>
 8017b4e:	4623      	mov	r3, r4
 8017b50:	6864      	ldr	r4, [r4, #4]
 8017b52:	e7b2      	b.n	8017aba <_malloc_r+0x32>
 8017b54:	4634      	mov	r4, r6
 8017b56:	6876      	ldr	r6, [r6, #4]
 8017b58:	e7b9      	b.n	8017ace <_malloc_r+0x46>
 8017b5a:	230c      	movs	r3, #12
 8017b5c:	603b      	str	r3, [r7, #0]
 8017b5e:	4638      	mov	r0, r7
 8017b60:	f000 fa76 	bl	8018050 <__malloc_unlock>
 8017b64:	e7a1      	b.n	8017aaa <_malloc_r+0x22>
 8017b66:	6025      	str	r5, [r4, #0]
 8017b68:	e7de      	b.n	8017b28 <_malloc_r+0xa0>
 8017b6a:	bf00      	nop
 8017b6c:	240109bc 	.word	0x240109bc

08017b70 <iprintf>:
 8017b70:	b40f      	push	{r0, r1, r2, r3}
 8017b72:	4b0a      	ldr	r3, [pc, #40]	; (8017b9c <iprintf+0x2c>)
 8017b74:	b513      	push	{r0, r1, r4, lr}
 8017b76:	681c      	ldr	r4, [r3, #0]
 8017b78:	b124      	cbz	r4, 8017b84 <iprintf+0x14>
 8017b7a:	69a3      	ldr	r3, [r4, #24]
 8017b7c:	b913      	cbnz	r3, 8017b84 <iprintf+0x14>
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7ff fe5c 	bl	801783c <__sinit>
 8017b84:	ab05      	add	r3, sp, #20
 8017b86:	9a04      	ldr	r2, [sp, #16]
 8017b88:	68a1      	ldr	r1, [r4, #8]
 8017b8a:	9301      	str	r3, [sp, #4]
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	f000 fc37 	bl	8018400 <_vfiprintf_r>
 8017b92:	b002      	add	sp, #8
 8017b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b98:	b004      	add	sp, #16
 8017b9a:	4770      	bx	lr
 8017b9c:	24000040 	.word	0x24000040

08017ba0 <rand>:
 8017ba0:	4b16      	ldr	r3, [pc, #88]	; (8017bfc <rand+0x5c>)
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	681c      	ldr	r4, [r3, #0]
 8017ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017ba8:	b9b3      	cbnz	r3, 8017bd8 <rand+0x38>
 8017baa:	2018      	movs	r0, #24
 8017bac:	f000 fa42 	bl	8018034 <malloc>
 8017bb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8017bb2:	b928      	cbnz	r0, 8017bc0 <rand+0x20>
 8017bb4:	4602      	mov	r2, r0
 8017bb6:	4b12      	ldr	r3, [pc, #72]	; (8017c00 <rand+0x60>)
 8017bb8:	4812      	ldr	r0, [pc, #72]	; (8017c04 <rand+0x64>)
 8017bba:	214e      	movs	r1, #78	; 0x4e
 8017bbc:	f000 f926 	bl	8017e0c <__assert_func>
 8017bc0:	4a11      	ldr	r2, [pc, #68]	; (8017c08 <rand+0x68>)
 8017bc2:	4b12      	ldr	r3, [pc, #72]	; (8017c0c <rand+0x6c>)
 8017bc4:	e9c0 2300 	strd	r2, r3, [r0]
 8017bc8:	4b11      	ldr	r3, [pc, #68]	; (8017c10 <rand+0x70>)
 8017bca:	6083      	str	r3, [r0, #8]
 8017bcc:	230b      	movs	r3, #11
 8017bce:	8183      	strh	r3, [r0, #12]
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017bd8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017bda:	4a0e      	ldr	r2, [pc, #56]	; (8017c14 <rand+0x74>)
 8017bdc:	6920      	ldr	r0, [r4, #16]
 8017bde:	6963      	ldr	r3, [r4, #20]
 8017be0:	490d      	ldr	r1, [pc, #52]	; (8017c18 <rand+0x78>)
 8017be2:	4342      	muls	r2, r0
 8017be4:	fb01 2203 	mla	r2, r1, r3, r2
 8017be8:	fba0 0101 	umull	r0, r1, r0, r1
 8017bec:	1c43      	adds	r3, r0, #1
 8017bee:	eb42 0001 	adc.w	r0, r2, r1
 8017bf2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017bf6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017bfa:	bd10      	pop	{r4, pc}
 8017bfc:	24000040 	.word	0x24000040
 8017c00:	0801d6b0 	.word	0x0801d6b0
 8017c04:	0801d6c7 	.word	0x0801d6c7
 8017c08:	abcd330e 	.word	0xabcd330e
 8017c0c:	e66d1234 	.word	0xe66d1234
 8017c10:	0005deec 	.word	0x0005deec
 8017c14:	5851f42d 	.word	0x5851f42d
 8017c18:	4c957f2d 	.word	0x4c957f2d

08017c1c <cleanup_glue>:
 8017c1c:	b538      	push	{r3, r4, r5, lr}
 8017c1e:	460c      	mov	r4, r1
 8017c20:	6809      	ldr	r1, [r1, #0]
 8017c22:	4605      	mov	r5, r0
 8017c24:	b109      	cbz	r1, 8017c2a <cleanup_glue+0xe>
 8017c26:	f7ff fff9 	bl	8017c1c <cleanup_glue>
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c32:	f000 ba13 	b.w	801805c <_free_r>
	...

08017c38 <_reclaim_reent>:
 8017c38:	4b2c      	ldr	r3, [pc, #176]	; (8017cec <_reclaim_reent+0xb4>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	4283      	cmp	r3, r0
 8017c3e:	b570      	push	{r4, r5, r6, lr}
 8017c40:	4604      	mov	r4, r0
 8017c42:	d051      	beq.n	8017ce8 <_reclaim_reent+0xb0>
 8017c44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017c46:	b143      	cbz	r3, 8017c5a <_reclaim_reent+0x22>
 8017c48:	68db      	ldr	r3, [r3, #12]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d14a      	bne.n	8017ce4 <_reclaim_reent+0xac>
 8017c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c50:	6819      	ldr	r1, [r3, #0]
 8017c52:	b111      	cbz	r1, 8017c5a <_reclaim_reent+0x22>
 8017c54:	4620      	mov	r0, r4
 8017c56:	f000 fa01 	bl	801805c <_free_r>
 8017c5a:	6961      	ldr	r1, [r4, #20]
 8017c5c:	b111      	cbz	r1, 8017c64 <_reclaim_reent+0x2c>
 8017c5e:	4620      	mov	r0, r4
 8017c60:	f000 f9fc 	bl	801805c <_free_r>
 8017c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017c66:	b111      	cbz	r1, 8017c6e <_reclaim_reent+0x36>
 8017c68:	4620      	mov	r0, r4
 8017c6a:	f000 f9f7 	bl	801805c <_free_r>
 8017c6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017c70:	b111      	cbz	r1, 8017c78 <_reclaim_reent+0x40>
 8017c72:	4620      	mov	r0, r4
 8017c74:	f000 f9f2 	bl	801805c <_free_r>
 8017c78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017c7a:	b111      	cbz	r1, 8017c82 <_reclaim_reent+0x4a>
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f000 f9ed 	bl	801805c <_free_r>
 8017c82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017c84:	b111      	cbz	r1, 8017c8c <_reclaim_reent+0x54>
 8017c86:	4620      	mov	r0, r4
 8017c88:	f000 f9e8 	bl	801805c <_free_r>
 8017c8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017c8e:	b111      	cbz	r1, 8017c96 <_reclaim_reent+0x5e>
 8017c90:	4620      	mov	r0, r4
 8017c92:	f000 f9e3 	bl	801805c <_free_r>
 8017c96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017c98:	b111      	cbz	r1, 8017ca0 <_reclaim_reent+0x68>
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f000 f9de 	bl	801805c <_free_r>
 8017ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ca2:	b111      	cbz	r1, 8017caa <_reclaim_reent+0x72>
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f000 f9d9 	bl	801805c <_free_r>
 8017caa:	69a3      	ldr	r3, [r4, #24]
 8017cac:	b1e3      	cbz	r3, 8017ce8 <_reclaim_reent+0xb0>
 8017cae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	4798      	blx	r3
 8017cb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017cb6:	b1b9      	cbz	r1, 8017ce8 <_reclaim_reent+0xb0>
 8017cb8:	4620      	mov	r0, r4
 8017cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cbe:	f7ff bfad 	b.w	8017c1c <cleanup_glue>
 8017cc2:	5949      	ldr	r1, [r1, r5]
 8017cc4:	b941      	cbnz	r1, 8017cd8 <_reclaim_reent+0xa0>
 8017cc6:	3504      	adds	r5, #4
 8017cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cca:	2d80      	cmp	r5, #128	; 0x80
 8017ccc:	68d9      	ldr	r1, [r3, #12]
 8017cce:	d1f8      	bne.n	8017cc2 <_reclaim_reent+0x8a>
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f000 f9c3 	bl	801805c <_free_r>
 8017cd6:	e7ba      	b.n	8017c4e <_reclaim_reent+0x16>
 8017cd8:	680e      	ldr	r6, [r1, #0]
 8017cda:	4620      	mov	r0, r4
 8017cdc:	f000 f9be 	bl	801805c <_free_r>
 8017ce0:	4631      	mov	r1, r6
 8017ce2:	e7ef      	b.n	8017cc4 <_reclaim_reent+0x8c>
 8017ce4:	2500      	movs	r5, #0
 8017ce6:	e7ef      	b.n	8017cc8 <_reclaim_reent+0x90>
 8017ce8:	bd70      	pop	{r4, r5, r6, pc}
 8017cea:	bf00      	nop
 8017cec:	24000040 	.word	0x24000040

08017cf0 <_sbrk_r>:
 8017cf0:	b538      	push	{r3, r4, r5, lr}
 8017cf2:	4d06      	ldr	r5, [pc, #24]	; (8017d0c <_sbrk_r+0x1c>)
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	4608      	mov	r0, r1
 8017cfa:	602b      	str	r3, [r5, #0]
 8017cfc:	f7e9 f94c 	bl	8000f98 <_sbrk>
 8017d00:	1c43      	adds	r3, r0, #1
 8017d02:	d102      	bne.n	8017d0a <_sbrk_r+0x1a>
 8017d04:	682b      	ldr	r3, [r5, #0]
 8017d06:	b103      	cbz	r3, 8017d0a <_sbrk_r+0x1a>
 8017d08:	6023      	str	r3, [r4, #0]
 8017d0a:	bd38      	pop	{r3, r4, r5, pc}
 8017d0c:	240109c4 	.word	0x240109c4

08017d10 <siprintf>:
 8017d10:	b40e      	push	{r1, r2, r3}
 8017d12:	b500      	push	{lr}
 8017d14:	b09c      	sub	sp, #112	; 0x70
 8017d16:	ab1d      	add	r3, sp, #116	; 0x74
 8017d18:	9002      	str	r0, [sp, #8]
 8017d1a:	9006      	str	r0, [sp, #24]
 8017d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d20:	4809      	ldr	r0, [pc, #36]	; (8017d48 <siprintf+0x38>)
 8017d22:	9107      	str	r1, [sp, #28]
 8017d24:	9104      	str	r1, [sp, #16]
 8017d26:	4909      	ldr	r1, [pc, #36]	; (8017d4c <siprintf+0x3c>)
 8017d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d2c:	9105      	str	r1, [sp, #20]
 8017d2e:	6800      	ldr	r0, [r0, #0]
 8017d30:	9301      	str	r3, [sp, #4]
 8017d32:	a902      	add	r1, sp, #8
 8017d34:	f000 fa3a 	bl	80181ac <_svfiprintf_r>
 8017d38:	9b02      	ldr	r3, [sp, #8]
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	701a      	strb	r2, [r3, #0]
 8017d3e:	b01c      	add	sp, #112	; 0x70
 8017d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d44:	b003      	add	sp, #12
 8017d46:	4770      	bx	lr
 8017d48:	24000040 	.word	0x24000040
 8017d4c:	ffff0208 	.word	0xffff0208

08017d50 <__sread>:
 8017d50:	b510      	push	{r4, lr}
 8017d52:	460c      	mov	r4, r1
 8017d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d58:	f000 fe16 	bl	8018988 <_read_r>
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	bfab      	itete	ge
 8017d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017d62:	89a3      	ldrhlt	r3, [r4, #12]
 8017d64:	181b      	addge	r3, r3, r0
 8017d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017d6a:	bfac      	ite	ge
 8017d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017d6e:	81a3      	strhlt	r3, [r4, #12]
 8017d70:	bd10      	pop	{r4, pc}

08017d72 <__swrite>:
 8017d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d76:	461f      	mov	r7, r3
 8017d78:	898b      	ldrh	r3, [r1, #12]
 8017d7a:	05db      	lsls	r3, r3, #23
 8017d7c:	4605      	mov	r5, r0
 8017d7e:	460c      	mov	r4, r1
 8017d80:	4616      	mov	r6, r2
 8017d82:	d505      	bpl.n	8017d90 <__swrite+0x1e>
 8017d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d88:	2302      	movs	r3, #2
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	f000 f940 	bl	8018010 <_lseek_r>
 8017d90:	89a3      	ldrh	r3, [r4, #12]
 8017d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d9a:	81a3      	strh	r3, [r4, #12]
 8017d9c:	4632      	mov	r2, r6
 8017d9e:	463b      	mov	r3, r7
 8017da0:	4628      	mov	r0, r5
 8017da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017da6:	f000 b81f 	b.w	8017de8 <_write_r>

08017daa <__sseek>:
 8017daa:	b510      	push	{r4, lr}
 8017dac:	460c      	mov	r4, r1
 8017dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017db2:	f000 f92d 	bl	8018010 <_lseek_r>
 8017db6:	1c43      	adds	r3, r0, #1
 8017db8:	89a3      	ldrh	r3, [r4, #12]
 8017dba:	bf15      	itete	ne
 8017dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017dc6:	81a3      	strheq	r3, [r4, #12]
 8017dc8:	bf18      	it	ne
 8017dca:	81a3      	strhne	r3, [r4, #12]
 8017dcc:	bd10      	pop	{r4, pc}

08017dce <__sclose>:
 8017dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dd2:	f000 b839 	b.w	8017e48 <_close_r>

08017dd6 <strcpy>:
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017ddc:	f803 2b01 	strb.w	r2, [r3], #1
 8017de0:	2a00      	cmp	r2, #0
 8017de2:	d1f9      	bne.n	8017dd8 <strcpy+0x2>
 8017de4:	4770      	bx	lr
	...

08017de8 <_write_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4d07      	ldr	r5, [pc, #28]	; (8017e08 <_write_r+0x20>)
 8017dec:	4604      	mov	r4, r0
 8017dee:	4608      	mov	r0, r1
 8017df0:	4611      	mov	r1, r2
 8017df2:	2200      	movs	r2, #0
 8017df4:	602a      	str	r2, [r5, #0]
 8017df6:	461a      	mov	r2, r3
 8017df8:	f7e9 f87d 	bl	8000ef6 <_write>
 8017dfc:	1c43      	adds	r3, r0, #1
 8017dfe:	d102      	bne.n	8017e06 <_write_r+0x1e>
 8017e00:	682b      	ldr	r3, [r5, #0]
 8017e02:	b103      	cbz	r3, 8017e06 <_write_r+0x1e>
 8017e04:	6023      	str	r3, [r4, #0]
 8017e06:	bd38      	pop	{r3, r4, r5, pc}
 8017e08:	240109c4 	.word	0x240109c4

08017e0c <__assert_func>:
 8017e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e0e:	4614      	mov	r4, r2
 8017e10:	461a      	mov	r2, r3
 8017e12:	4b09      	ldr	r3, [pc, #36]	; (8017e38 <__assert_func+0x2c>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	4605      	mov	r5, r0
 8017e18:	68d8      	ldr	r0, [r3, #12]
 8017e1a:	b14c      	cbz	r4, 8017e30 <__assert_func+0x24>
 8017e1c:	4b07      	ldr	r3, [pc, #28]	; (8017e3c <__assert_func+0x30>)
 8017e1e:	9100      	str	r1, [sp, #0]
 8017e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017e24:	4906      	ldr	r1, [pc, #24]	; (8017e40 <__assert_func+0x34>)
 8017e26:	462b      	mov	r3, r5
 8017e28:	f000 f8e0 	bl	8017fec <fiprintf>
 8017e2c:	f000 fe7e 	bl	8018b2c <abort>
 8017e30:	4b04      	ldr	r3, [pc, #16]	; (8017e44 <__assert_func+0x38>)
 8017e32:	461c      	mov	r4, r3
 8017e34:	e7f3      	b.n	8017e1e <__assert_func+0x12>
 8017e36:	bf00      	nop
 8017e38:	24000040 	.word	0x24000040
 8017e3c:	0801d722 	.word	0x0801d722
 8017e40:	0801d72f 	.word	0x0801d72f
 8017e44:	0801d75d 	.word	0x0801d75d

08017e48 <_close_r>:
 8017e48:	b538      	push	{r3, r4, r5, lr}
 8017e4a:	4d06      	ldr	r5, [pc, #24]	; (8017e64 <_close_r+0x1c>)
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	4604      	mov	r4, r0
 8017e50:	4608      	mov	r0, r1
 8017e52:	602b      	str	r3, [r5, #0]
 8017e54:	f7e9 f86b 	bl	8000f2e <_close>
 8017e58:	1c43      	adds	r3, r0, #1
 8017e5a:	d102      	bne.n	8017e62 <_close_r+0x1a>
 8017e5c:	682b      	ldr	r3, [r5, #0]
 8017e5e:	b103      	cbz	r3, 8017e62 <_close_r+0x1a>
 8017e60:	6023      	str	r3, [r4, #0]
 8017e62:	bd38      	pop	{r3, r4, r5, pc}
 8017e64:	240109c4 	.word	0x240109c4

08017e68 <__sflush_r>:
 8017e68:	898a      	ldrh	r2, [r1, #12]
 8017e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e6e:	4605      	mov	r5, r0
 8017e70:	0710      	lsls	r0, r2, #28
 8017e72:	460c      	mov	r4, r1
 8017e74:	d458      	bmi.n	8017f28 <__sflush_r+0xc0>
 8017e76:	684b      	ldr	r3, [r1, #4]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	dc05      	bgt.n	8017e88 <__sflush_r+0x20>
 8017e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	dc02      	bgt.n	8017e88 <__sflush_r+0x20>
 8017e82:	2000      	movs	r0, #0
 8017e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017e8a:	2e00      	cmp	r6, #0
 8017e8c:	d0f9      	beq.n	8017e82 <__sflush_r+0x1a>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017e94:	682f      	ldr	r7, [r5, #0]
 8017e96:	602b      	str	r3, [r5, #0]
 8017e98:	d032      	beq.n	8017f00 <__sflush_r+0x98>
 8017e9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017e9c:	89a3      	ldrh	r3, [r4, #12]
 8017e9e:	075a      	lsls	r2, r3, #29
 8017ea0:	d505      	bpl.n	8017eae <__sflush_r+0x46>
 8017ea2:	6863      	ldr	r3, [r4, #4]
 8017ea4:	1ac0      	subs	r0, r0, r3
 8017ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ea8:	b10b      	cbz	r3, 8017eae <__sflush_r+0x46>
 8017eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017eac:	1ac0      	subs	r0, r0, r3
 8017eae:	2300      	movs	r3, #0
 8017eb0:	4602      	mov	r2, r0
 8017eb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017eb4:	6a21      	ldr	r1, [r4, #32]
 8017eb6:	4628      	mov	r0, r5
 8017eb8:	47b0      	blx	r6
 8017eba:	1c43      	adds	r3, r0, #1
 8017ebc:	89a3      	ldrh	r3, [r4, #12]
 8017ebe:	d106      	bne.n	8017ece <__sflush_r+0x66>
 8017ec0:	6829      	ldr	r1, [r5, #0]
 8017ec2:	291d      	cmp	r1, #29
 8017ec4:	d82c      	bhi.n	8017f20 <__sflush_r+0xb8>
 8017ec6:	4a2a      	ldr	r2, [pc, #168]	; (8017f70 <__sflush_r+0x108>)
 8017ec8:	40ca      	lsrs	r2, r1
 8017eca:	07d6      	lsls	r6, r2, #31
 8017ecc:	d528      	bpl.n	8017f20 <__sflush_r+0xb8>
 8017ece:	2200      	movs	r2, #0
 8017ed0:	6062      	str	r2, [r4, #4]
 8017ed2:	04d9      	lsls	r1, r3, #19
 8017ed4:	6922      	ldr	r2, [r4, #16]
 8017ed6:	6022      	str	r2, [r4, #0]
 8017ed8:	d504      	bpl.n	8017ee4 <__sflush_r+0x7c>
 8017eda:	1c42      	adds	r2, r0, #1
 8017edc:	d101      	bne.n	8017ee2 <__sflush_r+0x7a>
 8017ede:	682b      	ldr	r3, [r5, #0]
 8017ee0:	b903      	cbnz	r3, 8017ee4 <__sflush_r+0x7c>
 8017ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8017ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ee6:	602f      	str	r7, [r5, #0]
 8017ee8:	2900      	cmp	r1, #0
 8017eea:	d0ca      	beq.n	8017e82 <__sflush_r+0x1a>
 8017eec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ef0:	4299      	cmp	r1, r3
 8017ef2:	d002      	beq.n	8017efa <__sflush_r+0x92>
 8017ef4:	4628      	mov	r0, r5
 8017ef6:	f000 f8b1 	bl	801805c <_free_r>
 8017efa:	2000      	movs	r0, #0
 8017efc:	6360      	str	r0, [r4, #52]	; 0x34
 8017efe:	e7c1      	b.n	8017e84 <__sflush_r+0x1c>
 8017f00:	6a21      	ldr	r1, [r4, #32]
 8017f02:	2301      	movs	r3, #1
 8017f04:	4628      	mov	r0, r5
 8017f06:	47b0      	blx	r6
 8017f08:	1c41      	adds	r1, r0, #1
 8017f0a:	d1c7      	bne.n	8017e9c <__sflush_r+0x34>
 8017f0c:	682b      	ldr	r3, [r5, #0]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d0c4      	beq.n	8017e9c <__sflush_r+0x34>
 8017f12:	2b1d      	cmp	r3, #29
 8017f14:	d001      	beq.n	8017f1a <__sflush_r+0xb2>
 8017f16:	2b16      	cmp	r3, #22
 8017f18:	d101      	bne.n	8017f1e <__sflush_r+0xb6>
 8017f1a:	602f      	str	r7, [r5, #0]
 8017f1c:	e7b1      	b.n	8017e82 <__sflush_r+0x1a>
 8017f1e:	89a3      	ldrh	r3, [r4, #12]
 8017f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f24:	81a3      	strh	r3, [r4, #12]
 8017f26:	e7ad      	b.n	8017e84 <__sflush_r+0x1c>
 8017f28:	690f      	ldr	r7, [r1, #16]
 8017f2a:	2f00      	cmp	r7, #0
 8017f2c:	d0a9      	beq.n	8017e82 <__sflush_r+0x1a>
 8017f2e:	0793      	lsls	r3, r2, #30
 8017f30:	680e      	ldr	r6, [r1, #0]
 8017f32:	bf08      	it	eq
 8017f34:	694b      	ldreq	r3, [r1, #20]
 8017f36:	600f      	str	r7, [r1, #0]
 8017f38:	bf18      	it	ne
 8017f3a:	2300      	movne	r3, #0
 8017f3c:	eba6 0807 	sub.w	r8, r6, r7
 8017f40:	608b      	str	r3, [r1, #8]
 8017f42:	f1b8 0f00 	cmp.w	r8, #0
 8017f46:	dd9c      	ble.n	8017e82 <__sflush_r+0x1a>
 8017f48:	6a21      	ldr	r1, [r4, #32]
 8017f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f4c:	4643      	mov	r3, r8
 8017f4e:	463a      	mov	r2, r7
 8017f50:	4628      	mov	r0, r5
 8017f52:	47b0      	blx	r6
 8017f54:	2800      	cmp	r0, #0
 8017f56:	dc06      	bgt.n	8017f66 <__sflush_r+0xfe>
 8017f58:	89a3      	ldrh	r3, [r4, #12]
 8017f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f5e:	81a3      	strh	r3, [r4, #12]
 8017f60:	f04f 30ff 	mov.w	r0, #4294967295
 8017f64:	e78e      	b.n	8017e84 <__sflush_r+0x1c>
 8017f66:	4407      	add	r7, r0
 8017f68:	eba8 0800 	sub.w	r8, r8, r0
 8017f6c:	e7e9      	b.n	8017f42 <__sflush_r+0xda>
 8017f6e:	bf00      	nop
 8017f70:	20400001 	.word	0x20400001

08017f74 <_fflush_r>:
 8017f74:	b538      	push	{r3, r4, r5, lr}
 8017f76:	690b      	ldr	r3, [r1, #16]
 8017f78:	4605      	mov	r5, r0
 8017f7a:	460c      	mov	r4, r1
 8017f7c:	b913      	cbnz	r3, 8017f84 <_fflush_r+0x10>
 8017f7e:	2500      	movs	r5, #0
 8017f80:	4628      	mov	r0, r5
 8017f82:	bd38      	pop	{r3, r4, r5, pc}
 8017f84:	b118      	cbz	r0, 8017f8e <_fflush_r+0x1a>
 8017f86:	6983      	ldr	r3, [r0, #24]
 8017f88:	b90b      	cbnz	r3, 8017f8e <_fflush_r+0x1a>
 8017f8a:	f7ff fc57 	bl	801783c <__sinit>
 8017f8e:	4b14      	ldr	r3, [pc, #80]	; (8017fe0 <_fflush_r+0x6c>)
 8017f90:	429c      	cmp	r4, r3
 8017f92:	d11b      	bne.n	8017fcc <_fflush_r+0x58>
 8017f94:	686c      	ldr	r4, [r5, #4]
 8017f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d0ef      	beq.n	8017f7e <_fflush_r+0xa>
 8017f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017fa0:	07d0      	lsls	r0, r2, #31
 8017fa2:	d404      	bmi.n	8017fae <_fflush_r+0x3a>
 8017fa4:	0599      	lsls	r1, r3, #22
 8017fa6:	d402      	bmi.n	8017fae <_fflush_r+0x3a>
 8017fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017faa:	f7ff fd0a 	bl	80179c2 <__retarget_lock_acquire_recursive>
 8017fae:	4628      	mov	r0, r5
 8017fb0:	4621      	mov	r1, r4
 8017fb2:	f7ff ff59 	bl	8017e68 <__sflush_r>
 8017fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017fb8:	07da      	lsls	r2, r3, #31
 8017fba:	4605      	mov	r5, r0
 8017fbc:	d4e0      	bmi.n	8017f80 <_fflush_r+0xc>
 8017fbe:	89a3      	ldrh	r3, [r4, #12]
 8017fc0:	059b      	lsls	r3, r3, #22
 8017fc2:	d4dd      	bmi.n	8017f80 <_fflush_r+0xc>
 8017fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017fc6:	f7ff fcfd 	bl	80179c4 <__retarget_lock_release_recursive>
 8017fca:	e7d9      	b.n	8017f80 <_fflush_r+0xc>
 8017fcc:	4b05      	ldr	r3, [pc, #20]	; (8017fe4 <_fflush_r+0x70>)
 8017fce:	429c      	cmp	r4, r3
 8017fd0:	d101      	bne.n	8017fd6 <_fflush_r+0x62>
 8017fd2:	68ac      	ldr	r4, [r5, #8]
 8017fd4:	e7df      	b.n	8017f96 <_fflush_r+0x22>
 8017fd6:	4b04      	ldr	r3, [pc, #16]	; (8017fe8 <_fflush_r+0x74>)
 8017fd8:	429c      	cmp	r4, r3
 8017fda:	bf08      	it	eq
 8017fdc:	68ec      	ldreq	r4, [r5, #12]
 8017fde:	e7da      	b.n	8017f96 <_fflush_r+0x22>
 8017fe0:	0801d66c 	.word	0x0801d66c
 8017fe4:	0801d68c 	.word	0x0801d68c
 8017fe8:	0801d64c 	.word	0x0801d64c

08017fec <fiprintf>:
 8017fec:	b40e      	push	{r1, r2, r3}
 8017fee:	b503      	push	{r0, r1, lr}
 8017ff0:	4601      	mov	r1, r0
 8017ff2:	ab03      	add	r3, sp, #12
 8017ff4:	4805      	ldr	r0, [pc, #20]	; (801800c <fiprintf+0x20>)
 8017ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ffa:	6800      	ldr	r0, [r0, #0]
 8017ffc:	9301      	str	r3, [sp, #4]
 8017ffe:	f000 f9ff 	bl	8018400 <_vfiprintf_r>
 8018002:	b002      	add	sp, #8
 8018004:	f85d eb04 	ldr.w	lr, [sp], #4
 8018008:	b003      	add	sp, #12
 801800a:	4770      	bx	lr
 801800c:	24000040 	.word	0x24000040

08018010 <_lseek_r>:
 8018010:	b538      	push	{r3, r4, r5, lr}
 8018012:	4d07      	ldr	r5, [pc, #28]	; (8018030 <_lseek_r+0x20>)
 8018014:	4604      	mov	r4, r0
 8018016:	4608      	mov	r0, r1
 8018018:	4611      	mov	r1, r2
 801801a:	2200      	movs	r2, #0
 801801c:	602a      	str	r2, [r5, #0]
 801801e:	461a      	mov	r2, r3
 8018020:	f7e8 ffac 	bl	8000f7c <_lseek>
 8018024:	1c43      	adds	r3, r0, #1
 8018026:	d102      	bne.n	801802e <_lseek_r+0x1e>
 8018028:	682b      	ldr	r3, [r5, #0]
 801802a:	b103      	cbz	r3, 801802e <_lseek_r+0x1e>
 801802c:	6023      	str	r3, [r4, #0]
 801802e:	bd38      	pop	{r3, r4, r5, pc}
 8018030:	240109c4 	.word	0x240109c4

08018034 <malloc>:
 8018034:	4b02      	ldr	r3, [pc, #8]	; (8018040 <malloc+0xc>)
 8018036:	4601      	mov	r1, r0
 8018038:	6818      	ldr	r0, [r3, #0]
 801803a:	f7ff bd25 	b.w	8017a88 <_malloc_r>
 801803e:	bf00      	nop
 8018040:	24000040 	.word	0x24000040

08018044 <__malloc_lock>:
 8018044:	4801      	ldr	r0, [pc, #4]	; (801804c <__malloc_lock+0x8>)
 8018046:	f7ff bcbc 	b.w	80179c2 <__retarget_lock_acquire_recursive>
 801804a:	bf00      	nop
 801804c:	240109b8 	.word	0x240109b8

08018050 <__malloc_unlock>:
 8018050:	4801      	ldr	r0, [pc, #4]	; (8018058 <__malloc_unlock+0x8>)
 8018052:	f7ff bcb7 	b.w	80179c4 <__retarget_lock_release_recursive>
 8018056:	bf00      	nop
 8018058:	240109b8 	.word	0x240109b8

0801805c <_free_r>:
 801805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801805e:	2900      	cmp	r1, #0
 8018060:	d044      	beq.n	80180ec <_free_r+0x90>
 8018062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018066:	9001      	str	r0, [sp, #4]
 8018068:	2b00      	cmp	r3, #0
 801806a:	f1a1 0404 	sub.w	r4, r1, #4
 801806e:	bfb8      	it	lt
 8018070:	18e4      	addlt	r4, r4, r3
 8018072:	f7ff ffe7 	bl	8018044 <__malloc_lock>
 8018076:	4a1e      	ldr	r2, [pc, #120]	; (80180f0 <_free_r+0x94>)
 8018078:	9801      	ldr	r0, [sp, #4]
 801807a:	6813      	ldr	r3, [r2, #0]
 801807c:	b933      	cbnz	r3, 801808c <_free_r+0x30>
 801807e:	6063      	str	r3, [r4, #4]
 8018080:	6014      	str	r4, [r2, #0]
 8018082:	b003      	add	sp, #12
 8018084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018088:	f7ff bfe2 	b.w	8018050 <__malloc_unlock>
 801808c:	42a3      	cmp	r3, r4
 801808e:	d908      	bls.n	80180a2 <_free_r+0x46>
 8018090:	6825      	ldr	r5, [r4, #0]
 8018092:	1961      	adds	r1, r4, r5
 8018094:	428b      	cmp	r3, r1
 8018096:	bf01      	itttt	eq
 8018098:	6819      	ldreq	r1, [r3, #0]
 801809a:	685b      	ldreq	r3, [r3, #4]
 801809c:	1949      	addeq	r1, r1, r5
 801809e:	6021      	streq	r1, [r4, #0]
 80180a0:	e7ed      	b.n	801807e <_free_r+0x22>
 80180a2:	461a      	mov	r2, r3
 80180a4:	685b      	ldr	r3, [r3, #4]
 80180a6:	b10b      	cbz	r3, 80180ac <_free_r+0x50>
 80180a8:	42a3      	cmp	r3, r4
 80180aa:	d9fa      	bls.n	80180a2 <_free_r+0x46>
 80180ac:	6811      	ldr	r1, [r2, #0]
 80180ae:	1855      	adds	r5, r2, r1
 80180b0:	42a5      	cmp	r5, r4
 80180b2:	d10b      	bne.n	80180cc <_free_r+0x70>
 80180b4:	6824      	ldr	r4, [r4, #0]
 80180b6:	4421      	add	r1, r4
 80180b8:	1854      	adds	r4, r2, r1
 80180ba:	42a3      	cmp	r3, r4
 80180bc:	6011      	str	r1, [r2, #0]
 80180be:	d1e0      	bne.n	8018082 <_free_r+0x26>
 80180c0:	681c      	ldr	r4, [r3, #0]
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	6053      	str	r3, [r2, #4]
 80180c6:	4421      	add	r1, r4
 80180c8:	6011      	str	r1, [r2, #0]
 80180ca:	e7da      	b.n	8018082 <_free_r+0x26>
 80180cc:	d902      	bls.n	80180d4 <_free_r+0x78>
 80180ce:	230c      	movs	r3, #12
 80180d0:	6003      	str	r3, [r0, #0]
 80180d2:	e7d6      	b.n	8018082 <_free_r+0x26>
 80180d4:	6825      	ldr	r5, [r4, #0]
 80180d6:	1961      	adds	r1, r4, r5
 80180d8:	428b      	cmp	r3, r1
 80180da:	bf04      	itt	eq
 80180dc:	6819      	ldreq	r1, [r3, #0]
 80180de:	685b      	ldreq	r3, [r3, #4]
 80180e0:	6063      	str	r3, [r4, #4]
 80180e2:	bf04      	itt	eq
 80180e4:	1949      	addeq	r1, r1, r5
 80180e6:	6021      	streq	r1, [r4, #0]
 80180e8:	6054      	str	r4, [r2, #4]
 80180ea:	e7ca      	b.n	8018082 <_free_r+0x26>
 80180ec:	b003      	add	sp, #12
 80180ee:	bd30      	pop	{r4, r5, pc}
 80180f0:	240109bc 	.word	0x240109bc

080180f4 <__ssputs_r>:
 80180f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180f8:	688e      	ldr	r6, [r1, #8]
 80180fa:	429e      	cmp	r6, r3
 80180fc:	4682      	mov	sl, r0
 80180fe:	460c      	mov	r4, r1
 8018100:	4690      	mov	r8, r2
 8018102:	461f      	mov	r7, r3
 8018104:	d838      	bhi.n	8018178 <__ssputs_r+0x84>
 8018106:	898a      	ldrh	r2, [r1, #12]
 8018108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801810c:	d032      	beq.n	8018174 <__ssputs_r+0x80>
 801810e:	6825      	ldr	r5, [r4, #0]
 8018110:	6909      	ldr	r1, [r1, #16]
 8018112:	eba5 0901 	sub.w	r9, r5, r1
 8018116:	6965      	ldr	r5, [r4, #20]
 8018118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801811c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018120:	3301      	adds	r3, #1
 8018122:	444b      	add	r3, r9
 8018124:	106d      	asrs	r5, r5, #1
 8018126:	429d      	cmp	r5, r3
 8018128:	bf38      	it	cc
 801812a:	461d      	movcc	r5, r3
 801812c:	0553      	lsls	r3, r2, #21
 801812e:	d531      	bpl.n	8018194 <__ssputs_r+0xa0>
 8018130:	4629      	mov	r1, r5
 8018132:	f7ff fca9 	bl	8017a88 <_malloc_r>
 8018136:	4606      	mov	r6, r0
 8018138:	b950      	cbnz	r0, 8018150 <__ssputs_r+0x5c>
 801813a:	230c      	movs	r3, #12
 801813c:	f8ca 3000 	str.w	r3, [sl]
 8018140:	89a3      	ldrh	r3, [r4, #12]
 8018142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018146:	81a3      	strh	r3, [r4, #12]
 8018148:	f04f 30ff 	mov.w	r0, #4294967295
 801814c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018150:	6921      	ldr	r1, [r4, #16]
 8018152:	464a      	mov	r2, r9
 8018154:	f7ff fc47 	bl	80179e6 <memcpy>
 8018158:	89a3      	ldrh	r3, [r4, #12]
 801815a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801815e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	6126      	str	r6, [r4, #16]
 8018166:	6165      	str	r5, [r4, #20]
 8018168:	444e      	add	r6, r9
 801816a:	eba5 0509 	sub.w	r5, r5, r9
 801816e:	6026      	str	r6, [r4, #0]
 8018170:	60a5      	str	r5, [r4, #8]
 8018172:	463e      	mov	r6, r7
 8018174:	42be      	cmp	r6, r7
 8018176:	d900      	bls.n	801817a <__ssputs_r+0x86>
 8018178:	463e      	mov	r6, r7
 801817a:	6820      	ldr	r0, [r4, #0]
 801817c:	4632      	mov	r2, r6
 801817e:	4641      	mov	r1, r8
 8018180:	f7ff fc3f 	bl	8017a02 <memmove>
 8018184:	68a3      	ldr	r3, [r4, #8]
 8018186:	1b9b      	subs	r3, r3, r6
 8018188:	60a3      	str	r3, [r4, #8]
 801818a:	6823      	ldr	r3, [r4, #0]
 801818c:	4433      	add	r3, r6
 801818e:	6023      	str	r3, [r4, #0]
 8018190:	2000      	movs	r0, #0
 8018192:	e7db      	b.n	801814c <__ssputs_r+0x58>
 8018194:	462a      	mov	r2, r5
 8018196:	f000 fd35 	bl	8018c04 <_realloc_r>
 801819a:	4606      	mov	r6, r0
 801819c:	2800      	cmp	r0, #0
 801819e:	d1e1      	bne.n	8018164 <__ssputs_r+0x70>
 80181a0:	6921      	ldr	r1, [r4, #16]
 80181a2:	4650      	mov	r0, sl
 80181a4:	f7ff ff5a 	bl	801805c <_free_r>
 80181a8:	e7c7      	b.n	801813a <__ssputs_r+0x46>
	...

080181ac <_svfiprintf_r>:
 80181ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181b0:	4698      	mov	r8, r3
 80181b2:	898b      	ldrh	r3, [r1, #12]
 80181b4:	061b      	lsls	r3, r3, #24
 80181b6:	b09d      	sub	sp, #116	; 0x74
 80181b8:	4607      	mov	r7, r0
 80181ba:	460d      	mov	r5, r1
 80181bc:	4614      	mov	r4, r2
 80181be:	d50e      	bpl.n	80181de <_svfiprintf_r+0x32>
 80181c0:	690b      	ldr	r3, [r1, #16]
 80181c2:	b963      	cbnz	r3, 80181de <_svfiprintf_r+0x32>
 80181c4:	2140      	movs	r1, #64	; 0x40
 80181c6:	f7ff fc5f 	bl	8017a88 <_malloc_r>
 80181ca:	6028      	str	r0, [r5, #0]
 80181cc:	6128      	str	r0, [r5, #16]
 80181ce:	b920      	cbnz	r0, 80181da <_svfiprintf_r+0x2e>
 80181d0:	230c      	movs	r3, #12
 80181d2:	603b      	str	r3, [r7, #0]
 80181d4:	f04f 30ff 	mov.w	r0, #4294967295
 80181d8:	e0d1      	b.n	801837e <_svfiprintf_r+0x1d2>
 80181da:	2340      	movs	r3, #64	; 0x40
 80181dc:	616b      	str	r3, [r5, #20]
 80181de:	2300      	movs	r3, #0
 80181e0:	9309      	str	r3, [sp, #36]	; 0x24
 80181e2:	2320      	movs	r3, #32
 80181e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80181e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80181ec:	2330      	movs	r3, #48	; 0x30
 80181ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018398 <_svfiprintf_r+0x1ec>
 80181f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80181f6:	f04f 0901 	mov.w	r9, #1
 80181fa:	4623      	mov	r3, r4
 80181fc:	469a      	mov	sl, r3
 80181fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018202:	b10a      	cbz	r2, 8018208 <_svfiprintf_r+0x5c>
 8018204:	2a25      	cmp	r2, #37	; 0x25
 8018206:	d1f9      	bne.n	80181fc <_svfiprintf_r+0x50>
 8018208:	ebba 0b04 	subs.w	fp, sl, r4
 801820c:	d00b      	beq.n	8018226 <_svfiprintf_r+0x7a>
 801820e:	465b      	mov	r3, fp
 8018210:	4622      	mov	r2, r4
 8018212:	4629      	mov	r1, r5
 8018214:	4638      	mov	r0, r7
 8018216:	f7ff ff6d 	bl	80180f4 <__ssputs_r>
 801821a:	3001      	adds	r0, #1
 801821c:	f000 80aa 	beq.w	8018374 <_svfiprintf_r+0x1c8>
 8018220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018222:	445a      	add	r2, fp
 8018224:	9209      	str	r2, [sp, #36]	; 0x24
 8018226:	f89a 3000 	ldrb.w	r3, [sl]
 801822a:	2b00      	cmp	r3, #0
 801822c:	f000 80a2 	beq.w	8018374 <_svfiprintf_r+0x1c8>
 8018230:	2300      	movs	r3, #0
 8018232:	f04f 32ff 	mov.w	r2, #4294967295
 8018236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801823a:	f10a 0a01 	add.w	sl, sl, #1
 801823e:	9304      	str	r3, [sp, #16]
 8018240:	9307      	str	r3, [sp, #28]
 8018242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018246:	931a      	str	r3, [sp, #104]	; 0x68
 8018248:	4654      	mov	r4, sl
 801824a:	2205      	movs	r2, #5
 801824c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018250:	4851      	ldr	r0, [pc, #324]	; (8018398 <_svfiprintf_r+0x1ec>)
 8018252:	f7e8 f845 	bl	80002e0 <memchr>
 8018256:	9a04      	ldr	r2, [sp, #16]
 8018258:	b9d8      	cbnz	r0, 8018292 <_svfiprintf_r+0xe6>
 801825a:	06d0      	lsls	r0, r2, #27
 801825c:	bf44      	itt	mi
 801825e:	2320      	movmi	r3, #32
 8018260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018264:	0711      	lsls	r1, r2, #28
 8018266:	bf44      	itt	mi
 8018268:	232b      	movmi	r3, #43	; 0x2b
 801826a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801826e:	f89a 3000 	ldrb.w	r3, [sl]
 8018272:	2b2a      	cmp	r3, #42	; 0x2a
 8018274:	d015      	beq.n	80182a2 <_svfiprintf_r+0xf6>
 8018276:	9a07      	ldr	r2, [sp, #28]
 8018278:	4654      	mov	r4, sl
 801827a:	2000      	movs	r0, #0
 801827c:	f04f 0c0a 	mov.w	ip, #10
 8018280:	4621      	mov	r1, r4
 8018282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018286:	3b30      	subs	r3, #48	; 0x30
 8018288:	2b09      	cmp	r3, #9
 801828a:	d94e      	bls.n	801832a <_svfiprintf_r+0x17e>
 801828c:	b1b0      	cbz	r0, 80182bc <_svfiprintf_r+0x110>
 801828e:	9207      	str	r2, [sp, #28]
 8018290:	e014      	b.n	80182bc <_svfiprintf_r+0x110>
 8018292:	eba0 0308 	sub.w	r3, r0, r8
 8018296:	fa09 f303 	lsl.w	r3, r9, r3
 801829a:	4313      	orrs	r3, r2
 801829c:	9304      	str	r3, [sp, #16]
 801829e:	46a2      	mov	sl, r4
 80182a0:	e7d2      	b.n	8018248 <_svfiprintf_r+0x9c>
 80182a2:	9b03      	ldr	r3, [sp, #12]
 80182a4:	1d19      	adds	r1, r3, #4
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	9103      	str	r1, [sp, #12]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	bfbb      	ittet	lt
 80182ae:	425b      	neglt	r3, r3
 80182b0:	f042 0202 	orrlt.w	r2, r2, #2
 80182b4:	9307      	strge	r3, [sp, #28]
 80182b6:	9307      	strlt	r3, [sp, #28]
 80182b8:	bfb8      	it	lt
 80182ba:	9204      	strlt	r2, [sp, #16]
 80182bc:	7823      	ldrb	r3, [r4, #0]
 80182be:	2b2e      	cmp	r3, #46	; 0x2e
 80182c0:	d10c      	bne.n	80182dc <_svfiprintf_r+0x130>
 80182c2:	7863      	ldrb	r3, [r4, #1]
 80182c4:	2b2a      	cmp	r3, #42	; 0x2a
 80182c6:	d135      	bne.n	8018334 <_svfiprintf_r+0x188>
 80182c8:	9b03      	ldr	r3, [sp, #12]
 80182ca:	1d1a      	adds	r2, r3, #4
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	9203      	str	r2, [sp, #12]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	bfb8      	it	lt
 80182d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80182d8:	3402      	adds	r4, #2
 80182da:	9305      	str	r3, [sp, #20]
 80182dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80183a8 <_svfiprintf_r+0x1fc>
 80182e0:	7821      	ldrb	r1, [r4, #0]
 80182e2:	2203      	movs	r2, #3
 80182e4:	4650      	mov	r0, sl
 80182e6:	f7e7 fffb 	bl	80002e0 <memchr>
 80182ea:	b140      	cbz	r0, 80182fe <_svfiprintf_r+0x152>
 80182ec:	2340      	movs	r3, #64	; 0x40
 80182ee:	eba0 000a 	sub.w	r0, r0, sl
 80182f2:	fa03 f000 	lsl.w	r0, r3, r0
 80182f6:	9b04      	ldr	r3, [sp, #16]
 80182f8:	4303      	orrs	r3, r0
 80182fa:	3401      	adds	r4, #1
 80182fc:	9304      	str	r3, [sp, #16]
 80182fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018302:	4826      	ldr	r0, [pc, #152]	; (801839c <_svfiprintf_r+0x1f0>)
 8018304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018308:	2206      	movs	r2, #6
 801830a:	f7e7 ffe9 	bl	80002e0 <memchr>
 801830e:	2800      	cmp	r0, #0
 8018310:	d038      	beq.n	8018384 <_svfiprintf_r+0x1d8>
 8018312:	4b23      	ldr	r3, [pc, #140]	; (80183a0 <_svfiprintf_r+0x1f4>)
 8018314:	bb1b      	cbnz	r3, 801835e <_svfiprintf_r+0x1b2>
 8018316:	9b03      	ldr	r3, [sp, #12]
 8018318:	3307      	adds	r3, #7
 801831a:	f023 0307 	bic.w	r3, r3, #7
 801831e:	3308      	adds	r3, #8
 8018320:	9303      	str	r3, [sp, #12]
 8018322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018324:	4433      	add	r3, r6
 8018326:	9309      	str	r3, [sp, #36]	; 0x24
 8018328:	e767      	b.n	80181fa <_svfiprintf_r+0x4e>
 801832a:	fb0c 3202 	mla	r2, ip, r2, r3
 801832e:	460c      	mov	r4, r1
 8018330:	2001      	movs	r0, #1
 8018332:	e7a5      	b.n	8018280 <_svfiprintf_r+0xd4>
 8018334:	2300      	movs	r3, #0
 8018336:	3401      	adds	r4, #1
 8018338:	9305      	str	r3, [sp, #20]
 801833a:	4619      	mov	r1, r3
 801833c:	f04f 0c0a 	mov.w	ip, #10
 8018340:	4620      	mov	r0, r4
 8018342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018346:	3a30      	subs	r2, #48	; 0x30
 8018348:	2a09      	cmp	r2, #9
 801834a:	d903      	bls.n	8018354 <_svfiprintf_r+0x1a8>
 801834c:	2b00      	cmp	r3, #0
 801834e:	d0c5      	beq.n	80182dc <_svfiprintf_r+0x130>
 8018350:	9105      	str	r1, [sp, #20]
 8018352:	e7c3      	b.n	80182dc <_svfiprintf_r+0x130>
 8018354:	fb0c 2101 	mla	r1, ip, r1, r2
 8018358:	4604      	mov	r4, r0
 801835a:	2301      	movs	r3, #1
 801835c:	e7f0      	b.n	8018340 <_svfiprintf_r+0x194>
 801835e:	ab03      	add	r3, sp, #12
 8018360:	9300      	str	r3, [sp, #0]
 8018362:	462a      	mov	r2, r5
 8018364:	4b0f      	ldr	r3, [pc, #60]	; (80183a4 <_svfiprintf_r+0x1f8>)
 8018366:	a904      	add	r1, sp, #16
 8018368:	4638      	mov	r0, r7
 801836a:	f3af 8000 	nop.w
 801836e:	1c42      	adds	r2, r0, #1
 8018370:	4606      	mov	r6, r0
 8018372:	d1d6      	bne.n	8018322 <_svfiprintf_r+0x176>
 8018374:	89ab      	ldrh	r3, [r5, #12]
 8018376:	065b      	lsls	r3, r3, #25
 8018378:	f53f af2c 	bmi.w	80181d4 <_svfiprintf_r+0x28>
 801837c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801837e:	b01d      	add	sp, #116	; 0x74
 8018380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018384:	ab03      	add	r3, sp, #12
 8018386:	9300      	str	r3, [sp, #0]
 8018388:	462a      	mov	r2, r5
 801838a:	4b06      	ldr	r3, [pc, #24]	; (80183a4 <_svfiprintf_r+0x1f8>)
 801838c:	a904      	add	r1, sp, #16
 801838e:	4638      	mov	r0, r7
 8018390:	f000 f9d4 	bl	801873c <_printf_i>
 8018394:	e7eb      	b.n	801836e <_svfiprintf_r+0x1c2>
 8018396:	bf00      	nop
 8018398:	0801d75e 	.word	0x0801d75e
 801839c:	0801d768 	.word	0x0801d768
 80183a0:	00000000 	.word	0x00000000
 80183a4:	080180f5 	.word	0x080180f5
 80183a8:	0801d764 	.word	0x0801d764

080183ac <__sfputc_r>:
 80183ac:	6893      	ldr	r3, [r2, #8]
 80183ae:	3b01      	subs	r3, #1
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	b410      	push	{r4}
 80183b4:	6093      	str	r3, [r2, #8]
 80183b6:	da08      	bge.n	80183ca <__sfputc_r+0x1e>
 80183b8:	6994      	ldr	r4, [r2, #24]
 80183ba:	42a3      	cmp	r3, r4
 80183bc:	db01      	blt.n	80183c2 <__sfputc_r+0x16>
 80183be:	290a      	cmp	r1, #10
 80183c0:	d103      	bne.n	80183ca <__sfputc_r+0x1e>
 80183c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183c6:	f000 baf1 	b.w	80189ac <__swbuf_r>
 80183ca:	6813      	ldr	r3, [r2, #0]
 80183cc:	1c58      	adds	r0, r3, #1
 80183ce:	6010      	str	r0, [r2, #0]
 80183d0:	7019      	strb	r1, [r3, #0]
 80183d2:	4608      	mov	r0, r1
 80183d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183d8:	4770      	bx	lr

080183da <__sfputs_r>:
 80183da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183dc:	4606      	mov	r6, r0
 80183de:	460f      	mov	r7, r1
 80183e0:	4614      	mov	r4, r2
 80183e2:	18d5      	adds	r5, r2, r3
 80183e4:	42ac      	cmp	r4, r5
 80183e6:	d101      	bne.n	80183ec <__sfputs_r+0x12>
 80183e8:	2000      	movs	r0, #0
 80183ea:	e007      	b.n	80183fc <__sfputs_r+0x22>
 80183ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183f0:	463a      	mov	r2, r7
 80183f2:	4630      	mov	r0, r6
 80183f4:	f7ff ffda 	bl	80183ac <__sfputc_r>
 80183f8:	1c43      	adds	r3, r0, #1
 80183fa:	d1f3      	bne.n	80183e4 <__sfputs_r+0xa>
 80183fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018400 <_vfiprintf_r>:
 8018400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018404:	460d      	mov	r5, r1
 8018406:	b09d      	sub	sp, #116	; 0x74
 8018408:	4614      	mov	r4, r2
 801840a:	4698      	mov	r8, r3
 801840c:	4606      	mov	r6, r0
 801840e:	b118      	cbz	r0, 8018418 <_vfiprintf_r+0x18>
 8018410:	6983      	ldr	r3, [r0, #24]
 8018412:	b90b      	cbnz	r3, 8018418 <_vfiprintf_r+0x18>
 8018414:	f7ff fa12 	bl	801783c <__sinit>
 8018418:	4b89      	ldr	r3, [pc, #548]	; (8018640 <_vfiprintf_r+0x240>)
 801841a:	429d      	cmp	r5, r3
 801841c:	d11b      	bne.n	8018456 <_vfiprintf_r+0x56>
 801841e:	6875      	ldr	r5, [r6, #4]
 8018420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018422:	07d9      	lsls	r1, r3, #31
 8018424:	d405      	bmi.n	8018432 <_vfiprintf_r+0x32>
 8018426:	89ab      	ldrh	r3, [r5, #12]
 8018428:	059a      	lsls	r2, r3, #22
 801842a:	d402      	bmi.n	8018432 <_vfiprintf_r+0x32>
 801842c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801842e:	f7ff fac8 	bl	80179c2 <__retarget_lock_acquire_recursive>
 8018432:	89ab      	ldrh	r3, [r5, #12]
 8018434:	071b      	lsls	r3, r3, #28
 8018436:	d501      	bpl.n	801843c <_vfiprintf_r+0x3c>
 8018438:	692b      	ldr	r3, [r5, #16]
 801843a:	b9eb      	cbnz	r3, 8018478 <_vfiprintf_r+0x78>
 801843c:	4629      	mov	r1, r5
 801843e:	4630      	mov	r0, r6
 8018440:	f000 fb06 	bl	8018a50 <__swsetup_r>
 8018444:	b1c0      	cbz	r0, 8018478 <_vfiprintf_r+0x78>
 8018446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018448:	07dc      	lsls	r4, r3, #31
 801844a:	d50e      	bpl.n	801846a <_vfiprintf_r+0x6a>
 801844c:	f04f 30ff 	mov.w	r0, #4294967295
 8018450:	b01d      	add	sp, #116	; 0x74
 8018452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018456:	4b7b      	ldr	r3, [pc, #492]	; (8018644 <_vfiprintf_r+0x244>)
 8018458:	429d      	cmp	r5, r3
 801845a:	d101      	bne.n	8018460 <_vfiprintf_r+0x60>
 801845c:	68b5      	ldr	r5, [r6, #8]
 801845e:	e7df      	b.n	8018420 <_vfiprintf_r+0x20>
 8018460:	4b79      	ldr	r3, [pc, #484]	; (8018648 <_vfiprintf_r+0x248>)
 8018462:	429d      	cmp	r5, r3
 8018464:	bf08      	it	eq
 8018466:	68f5      	ldreq	r5, [r6, #12]
 8018468:	e7da      	b.n	8018420 <_vfiprintf_r+0x20>
 801846a:	89ab      	ldrh	r3, [r5, #12]
 801846c:	0598      	lsls	r0, r3, #22
 801846e:	d4ed      	bmi.n	801844c <_vfiprintf_r+0x4c>
 8018470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018472:	f7ff faa7 	bl	80179c4 <__retarget_lock_release_recursive>
 8018476:	e7e9      	b.n	801844c <_vfiprintf_r+0x4c>
 8018478:	2300      	movs	r3, #0
 801847a:	9309      	str	r3, [sp, #36]	; 0x24
 801847c:	2320      	movs	r3, #32
 801847e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018482:	f8cd 800c 	str.w	r8, [sp, #12]
 8018486:	2330      	movs	r3, #48	; 0x30
 8018488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801864c <_vfiprintf_r+0x24c>
 801848c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018490:	f04f 0901 	mov.w	r9, #1
 8018494:	4623      	mov	r3, r4
 8018496:	469a      	mov	sl, r3
 8018498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801849c:	b10a      	cbz	r2, 80184a2 <_vfiprintf_r+0xa2>
 801849e:	2a25      	cmp	r2, #37	; 0x25
 80184a0:	d1f9      	bne.n	8018496 <_vfiprintf_r+0x96>
 80184a2:	ebba 0b04 	subs.w	fp, sl, r4
 80184a6:	d00b      	beq.n	80184c0 <_vfiprintf_r+0xc0>
 80184a8:	465b      	mov	r3, fp
 80184aa:	4622      	mov	r2, r4
 80184ac:	4629      	mov	r1, r5
 80184ae:	4630      	mov	r0, r6
 80184b0:	f7ff ff93 	bl	80183da <__sfputs_r>
 80184b4:	3001      	adds	r0, #1
 80184b6:	f000 80aa 	beq.w	801860e <_vfiprintf_r+0x20e>
 80184ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184bc:	445a      	add	r2, fp
 80184be:	9209      	str	r2, [sp, #36]	; 0x24
 80184c0:	f89a 3000 	ldrb.w	r3, [sl]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	f000 80a2 	beq.w	801860e <_vfiprintf_r+0x20e>
 80184ca:	2300      	movs	r3, #0
 80184cc:	f04f 32ff 	mov.w	r2, #4294967295
 80184d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184d4:	f10a 0a01 	add.w	sl, sl, #1
 80184d8:	9304      	str	r3, [sp, #16]
 80184da:	9307      	str	r3, [sp, #28]
 80184dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184e0:	931a      	str	r3, [sp, #104]	; 0x68
 80184e2:	4654      	mov	r4, sl
 80184e4:	2205      	movs	r2, #5
 80184e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184ea:	4858      	ldr	r0, [pc, #352]	; (801864c <_vfiprintf_r+0x24c>)
 80184ec:	f7e7 fef8 	bl	80002e0 <memchr>
 80184f0:	9a04      	ldr	r2, [sp, #16]
 80184f2:	b9d8      	cbnz	r0, 801852c <_vfiprintf_r+0x12c>
 80184f4:	06d1      	lsls	r1, r2, #27
 80184f6:	bf44      	itt	mi
 80184f8:	2320      	movmi	r3, #32
 80184fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184fe:	0713      	lsls	r3, r2, #28
 8018500:	bf44      	itt	mi
 8018502:	232b      	movmi	r3, #43	; 0x2b
 8018504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018508:	f89a 3000 	ldrb.w	r3, [sl]
 801850c:	2b2a      	cmp	r3, #42	; 0x2a
 801850e:	d015      	beq.n	801853c <_vfiprintf_r+0x13c>
 8018510:	9a07      	ldr	r2, [sp, #28]
 8018512:	4654      	mov	r4, sl
 8018514:	2000      	movs	r0, #0
 8018516:	f04f 0c0a 	mov.w	ip, #10
 801851a:	4621      	mov	r1, r4
 801851c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018520:	3b30      	subs	r3, #48	; 0x30
 8018522:	2b09      	cmp	r3, #9
 8018524:	d94e      	bls.n	80185c4 <_vfiprintf_r+0x1c4>
 8018526:	b1b0      	cbz	r0, 8018556 <_vfiprintf_r+0x156>
 8018528:	9207      	str	r2, [sp, #28]
 801852a:	e014      	b.n	8018556 <_vfiprintf_r+0x156>
 801852c:	eba0 0308 	sub.w	r3, r0, r8
 8018530:	fa09 f303 	lsl.w	r3, r9, r3
 8018534:	4313      	orrs	r3, r2
 8018536:	9304      	str	r3, [sp, #16]
 8018538:	46a2      	mov	sl, r4
 801853a:	e7d2      	b.n	80184e2 <_vfiprintf_r+0xe2>
 801853c:	9b03      	ldr	r3, [sp, #12]
 801853e:	1d19      	adds	r1, r3, #4
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	9103      	str	r1, [sp, #12]
 8018544:	2b00      	cmp	r3, #0
 8018546:	bfbb      	ittet	lt
 8018548:	425b      	neglt	r3, r3
 801854a:	f042 0202 	orrlt.w	r2, r2, #2
 801854e:	9307      	strge	r3, [sp, #28]
 8018550:	9307      	strlt	r3, [sp, #28]
 8018552:	bfb8      	it	lt
 8018554:	9204      	strlt	r2, [sp, #16]
 8018556:	7823      	ldrb	r3, [r4, #0]
 8018558:	2b2e      	cmp	r3, #46	; 0x2e
 801855a:	d10c      	bne.n	8018576 <_vfiprintf_r+0x176>
 801855c:	7863      	ldrb	r3, [r4, #1]
 801855e:	2b2a      	cmp	r3, #42	; 0x2a
 8018560:	d135      	bne.n	80185ce <_vfiprintf_r+0x1ce>
 8018562:	9b03      	ldr	r3, [sp, #12]
 8018564:	1d1a      	adds	r2, r3, #4
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	9203      	str	r2, [sp, #12]
 801856a:	2b00      	cmp	r3, #0
 801856c:	bfb8      	it	lt
 801856e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018572:	3402      	adds	r4, #2
 8018574:	9305      	str	r3, [sp, #20]
 8018576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801865c <_vfiprintf_r+0x25c>
 801857a:	7821      	ldrb	r1, [r4, #0]
 801857c:	2203      	movs	r2, #3
 801857e:	4650      	mov	r0, sl
 8018580:	f7e7 feae 	bl	80002e0 <memchr>
 8018584:	b140      	cbz	r0, 8018598 <_vfiprintf_r+0x198>
 8018586:	2340      	movs	r3, #64	; 0x40
 8018588:	eba0 000a 	sub.w	r0, r0, sl
 801858c:	fa03 f000 	lsl.w	r0, r3, r0
 8018590:	9b04      	ldr	r3, [sp, #16]
 8018592:	4303      	orrs	r3, r0
 8018594:	3401      	adds	r4, #1
 8018596:	9304      	str	r3, [sp, #16]
 8018598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801859c:	482c      	ldr	r0, [pc, #176]	; (8018650 <_vfiprintf_r+0x250>)
 801859e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80185a2:	2206      	movs	r2, #6
 80185a4:	f7e7 fe9c 	bl	80002e0 <memchr>
 80185a8:	2800      	cmp	r0, #0
 80185aa:	d03f      	beq.n	801862c <_vfiprintf_r+0x22c>
 80185ac:	4b29      	ldr	r3, [pc, #164]	; (8018654 <_vfiprintf_r+0x254>)
 80185ae:	bb1b      	cbnz	r3, 80185f8 <_vfiprintf_r+0x1f8>
 80185b0:	9b03      	ldr	r3, [sp, #12]
 80185b2:	3307      	adds	r3, #7
 80185b4:	f023 0307 	bic.w	r3, r3, #7
 80185b8:	3308      	adds	r3, #8
 80185ba:	9303      	str	r3, [sp, #12]
 80185bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185be:	443b      	add	r3, r7
 80185c0:	9309      	str	r3, [sp, #36]	; 0x24
 80185c2:	e767      	b.n	8018494 <_vfiprintf_r+0x94>
 80185c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80185c8:	460c      	mov	r4, r1
 80185ca:	2001      	movs	r0, #1
 80185cc:	e7a5      	b.n	801851a <_vfiprintf_r+0x11a>
 80185ce:	2300      	movs	r3, #0
 80185d0:	3401      	adds	r4, #1
 80185d2:	9305      	str	r3, [sp, #20]
 80185d4:	4619      	mov	r1, r3
 80185d6:	f04f 0c0a 	mov.w	ip, #10
 80185da:	4620      	mov	r0, r4
 80185dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185e0:	3a30      	subs	r2, #48	; 0x30
 80185e2:	2a09      	cmp	r2, #9
 80185e4:	d903      	bls.n	80185ee <_vfiprintf_r+0x1ee>
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d0c5      	beq.n	8018576 <_vfiprintf_r+0x176>
 80185ea:	9105      	str	r1, [sp, #20]
 80185ec:	e7c3      	b.n	8018576 <_vfiprintf_r+0x176>
 80185ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80185f2:	4604      	mov	r4, r0
 80185f4:	2301      	movs	r3, #1
 80185f6:	e7f0      	b.n	80185da <_vfiprintf_r+0x1da>
 80185f8:	ab03      	add	r3, sp, #12
 80185fa:	9300      	str	r3, [sp, #0]
 80185fc:	462a      	mov	r2, r5
 80185fe:	4b16      	ldr	r3, [pc, #88]	; (8018658 <_vfiprintf_r+0x258>)
 8018600:	a904      	add	r1, sp, #16
 8018602:	4630      	mov	r0, r6
 8018604:	f3af 8000 	nop.w
 8018608:	4607      	mov	r7, r0
 801860a:	1c78      	adds	r0, r7, #1
 801860c:	d1d6      	bne.n	80185bc <_vfiprintf_r+0x1bc>
 801860e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018610:	07d9      	lsls	r1, r3, #31
 8018612:	d405      	bmi.n	8018620 <_vfiprintf_r+0x220>
 8018614:	89ab      	ldrh	r3, [r5, #12]
 8018616:	059a      	lsls	r2, r3, #22
 8018618:	d402      	bmi.n	8018620 <_vfiprintf_r+0x220>
 801861a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801861c:	f7ff f9d2 	bl	80179c4 <__retarget_lock_release_recursive>
 8018620:	89ab      	ldrh	r3, [r5, #12]
 8018622:	065b      	lsls	r3, r3, #25
 8018624:	f53f af12 	bmi.w	801844c <_vfiprintf_r+0x4c>
 8018628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801862a:	e711      	b.n	8018450 <_vfiprintf_r+0x50>
 801862c:	ab03      	add	r3, sp, #12
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	462a      	mov	r2, r5
 8018632:	4b09      	ldr	r3, [pc, #36]	; (8018658 <_vfiprintf_r+0x258>)
 8018634:	a904      	add	r1, sp, #16
 8018636:	4630      	mov	r0, r6
 8018638:	f000 f880 	bl	801873c <_printf_i>
 801863c:	e7e4      	b.n	8018608 <_vfiprintf_r+0x208>
 801863e:	bf00      	nop
 8018640:	0801d66c 	.word	0x0801d66c
 8018644:	0801d68c 	.word	0x0801d68c
 8018648:	0801d64c 	.word	0x0801d64c
 801864c:	0801d75e 	.word	0x0801d75e
 8018650:	0801d768 	.word	0x0801d768
 8018654:	00000000 	.word	0x00000000
 8018658:	080183db 	.word	0x080183db
 801865c:	0801d764 	.word	0x0801d764

08018660 <_printf_common>:
 8018660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018664:	4616      	mov	r6, r2
 8018666:	4699      	mov	r9, r3
 8018668:	688a      	ldr	r2, [r1, #8]
 801866a:	690b      	ldr	r3, [r1, #16]
 801866c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018670:	4293      	cmp	r3, r2
 8018672:	bfb8      	it	lt
 8018674:	4613      	movlt	r3, r2
 8018676:	6033      	str	r3, [r6, #0]
 8018678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801867c:	4607      	mov	r7, r0
 801867e:	460c      	mov	r4, r1
 8018680:	b10a      	cbz	r2, 8018686 <_printf_common+0x26>
 8018682:	3301      	adds	r3, #1
 8018684:	6033      	str	r3, [r6, #0]
 8018686:	6823      	ldr	r3, [r4, #0]
 8018688:	0699      	lsls	r1, r3, #26
 801868a:	bf42      	ittt	mi
 801868c:	6833      	ldrmi	r3, [r6, #0]
 801868e:	3302      	addmi	r3, #2
 8018690:	6033      	strmi	r3, [r6, #0]
 8018692:	6825      	ldr	r5, [r4, #0]
 8018694:	f015 0506 	ands.w	r5, r5, #6
 8018698:	d106      	bne.n	80186a8 <_printf_common+0x48>
 801869a:	f104 0a19 	add.w	sl, r4, #25
 801869e:	68e3      	ldr	r3, [r4, #12]
 80186a0:	6832      	ldr	r2, [r6, #0]
 80186a2:	1a9b      	subs	r3, r3, r2
 80186a4:	42ab      	cmp	r3, r5
 80186a6:	dc26      	bgt.n	80186f6 <_printf_common+0x96>
 80186a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80186ac:	1e13      	subs	r3, r2, #0
 80186ae:	6822      	ldr	r2, [r4, #0]
 80186b0:	bf18      	it	ne
 80186b2:	2301      	movne	r3, #1
 80186b4:	0692      	lsls	r2, r2, #26
 80186b6:	d42b      	bmi.n	8018710 <_printf_common+0xb0>
 80186b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80186bc:	4649      	mov	r1, r9
 80186be:	4638      	mov	r0, r7
 80186c0:	47c0      	blx	r8
 80186c2:	3001      	adds	r0, #1
 80186c4:	d01e      	beq.n	8018704 <_printf_common+0xa4>
 80186c6:	6823      	ldr	r3, [r4, #0]
 80186c8:	68e5      	ldr	r5, [r4, #12]
 80186ca:	6832      	ldr	r2, [r6, #0]
 80186cc:	f003 0306 	and.w	r3, r3, #6
 80186d0:	2b04      	cmp	r3, #4
 80186d2:	bf08      	it	eq
 80186d4:	1aad      	subeq	r5, r5, r2
 80186d6:	68a3      	ldr	r3, [r4, #8]
 80186d8:	6922      	ldr	r2, [r4, #16]
 80186da:	bf0c      	ite	eq
 80186dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186e0:	2500      	movne	r5, #0
 80186e2:	4293      	cmp	r3, r2
 80186e4:	bfc4      	itt	gt
 80186e6:	1a9b      	subgt	r3, r3, r2
 80186e8:	18ed      	addgt	r5, r5, r3
 80186ea:	2600      	movs	r6, #0
 80186ec:	341a      	adds	r4, #26
 80186ee:	42b5      	cmp	r5, r6
 80186f0:	d11a      	bne.n	8018728 <_printf_common+0xc8>
 80186f2:	2000      	movs	r0, #0
 80186f4:	e008      	b.n	8018708 <_printf_common+0xa8>
 80186f6:	2301      	movs	r3, #1
 80186f8:	4652      	mov	r2, sl
 80186fa:	4649      	mov	r1, r9
 80186fc:	4638      	mov	r0, r7
 80186fe:	47c0      	blx	r8
 8018700:	3001      	adds	r0, #1
 8018702:	d103      	bne.n	801870c <_printf_common+0xac>
 8018704:	f04f 30ff 	mov.w	r0, #4294967295
 8018708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801870c:	3501      	adds	r5, #1
 801870e:	e7c6      	b.n	801869e <_printf_common+0x3e>
 8018710:	18e1      	adds	r1, r4, r3
 8018712:	1c5a      	adds	r2, r3, #1
 8018714:	2030      	movs	r0, #48	; 0x30
 8018716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801871a:	4422      	add	r2, r4
 801871c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018724:	3302      	adds	r3, #2
 8018726:	e7c7      	b.n	80186b8 <_printf_common+0x58>
 8018728:	2301      	movs	r3, #1
 801872a:	4622      	mov	r2, r4
 801872c:	4649      	mov	r1, r9
 801872e:	4638      	mov	r0, r7
 8018730:	47c0      	blx	r8
 8018732:	3001      	adds	r0, #1
 8018734:	d0e6      	beq.n	8018704 <_printf_common+0xa4>
 8018736:	3601      	adds	r6, #1
 8018738:	e7d9      	b.n	80186ee <_printf_common+0x8e>
	...

0801873c <_printf_i>:
 801873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018740:	7e0f      	ldrb	r7, [r1, #24]
 8018742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018744:	2f78      	cmp	r7, #120	; 0x78
 8018746:	4691      	mov	r9, r2
 8018748:	4680      	mov	r8, r0
 801874a:	460c      	mov	r4, r1
 801874c:	469a      	mov	sl, r3
 801874e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018752:	d807      	bhi.n	8018764 <_printf_i+0x28>
 8018754:	2f62      	cmp	r7, #98	; 0x62
 8018756:	d80a      	bhi.n	801876e <_printf_i+0x32>
 8018758:	2f00      	cmp	r7, #0
 801875a:	f000 80d8 	beq.w	801890e <_printf_i+0x1d2>
 801875e:	2f58      	cmp	r7, #88	; 0x58
 8018760:	f000 80a3 	beq.w	80188aa <_printf_i+0x16e>
 8018764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801876c:	e03a      	b.n	80187e4 <_printf_i+0xa8>
 801876e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018772:	2b15      	cmp	r3, #21
 8018774:	d8f6      	bhi.n	8018764 <_printf_i+0x28>
 8018776:	a101      	add	r1, pc, #4	; (adr r1, 801877c <_printf_i+0x40>)
 8018778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801877c:	080187d5 	.word	0x080187d5
 8018780:	080187e9 	.word	0x080187e9
 8018784:	08018765 	.word	0x08018765
 8018788:	08018765 	.word	0x08018765
 801878c:	08018765 	.word	0x08018765
 8018790:	08018765 	.word	0x08018765
 8018794:	080187e9 	.word	0x080187e9
 8018798:	08018765 	.word	0x08018765
 801879c:	08018765 	.word	0x08018765
 80187a0:	08018765 	.word	0x08018765
 80187a4:	08018765 	.word	0x08018765
 80187a8:	080188f5 	.word	0x080188f5
 80187ac:	08018819 	.word	0x08018819
 80187b0:	080188d7 	.word	0x080188d7
 80187b4:	08018765 	.word	0x08018765
 80187b8:	08018765 	.word	0x08018765
 80187bc:	08018917 	.word	0x08018917
 80187c0:	08018765 	.word	0x08018765
 80187c4:	08018819 	.word	0x08018819
 80187c8:	08018765 	.word	0x08018765
 80187cc:	08018765 	.word	0x08018765
 80187d0:	080188df 	.word	0x080188df
 80187d4:	682b      	ldr	r3, [r5, #0]
 80187d6:	1d1a      	adds	r2, r3, #4
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	602a      	str	r2, [r5, #0]
 80187dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80187e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187e4:	2301      	movs	r3, #1
 80187e6:	e0a3      	b.n	8018930 <_printf_i+0x1f4>
 80187e8:	6820      	ldr	r0, [r4, #0]
 80187ea:	6829      	ldr	r1, [r5, #0]
 80187ec:	0606      	lsls	r6, r0, #24
 80187ee:	f101 0304 	add.w	r3, r1, #4
 80187f2:	d50a      	bpl.n	801880a <_printf_i+0xce>
 80187f4:	680e      	ldr	r6, [r1, #0]
 80187f6:	602b      	str	r3, [r5, #0]
 80187f8:	2e00      	cmp	r6, #0
 80187fa:	da03      	bge.n	8018804 <_printf_i+0xc8>
 80187fc:	232d      	movs	r3, #45	; 0x2d
 80187fe:	4276      	negs	r6, r6
 8018800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018804:	485e      	ldr	r0, [pc, #376]	; (8018980 <_printf_i+0x244>)
 8018806:	230a      	movs	r3, #10
 8018808:	e019      	b.n	801883e <_printf_i+0x102>
 801880a:	680e      	ldr	r6, [r1, #0]
 801880c:	602b      	str	r3, [r5, #0]
 801880e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018812:	bf18      	it	ne
 8018814:	b236      	sxthne	r6, r6
 8018816:	e7ef      	b.n	80187f8 <_printf_i+0xbc>
 8018818:	682b      	ldr	r3, [r5, #0]
 801881a:	6820      	ldr	r0, [r4, #0]
 801881c:	1d19      	adds	r1, r3, #4
 801881e:	6029      	str	r1, [r5, #0]
 8018820:	0601      	lsls	r1, r0, #24
 8018822:	d501      	bpl.n	8018828 <_printf_i+0xec>
 8018824:	681e      	ldr	r6, [r3, #0]
 8018826:	e002      	b.n	801882e <_printf_i+0xf2>
 8018828:	0646      	lsls	r6, r0, #25
 801882a:	d5fb      	bpl.n	8018824 <_printf_i+0xe8>
 801882c:	881e      	ldrh	r6, [r3, #0]
 801882e:	4854      	ldr	r0, [pc, #336]	; (8018980 <_printf_i+0x244>)
 8018830:	2f6f      	cmp	r7, #111	; 0x6f
 8018832:	bf0c      	ite	eq
 8018834:	2308      	moveq	r3, #8
 8018836:	230a      	movne	r3, #10
 8018838:	2100      	movs	r1, #0
 801883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801883e:	6865      	ldr	r5, [r4, #4]
 8018840:	60a5      	str	r5, [r4, #8]
 8018842:	2d00      	cmp	r5, #0
 8018844:	bfa2      	ittt	ge
 8018846:	6821      	ldrge	r1, [r4, #0]
 8018848:	f021 0104 	bicge.w	r1, r1, #4
 801884c:	6021      	strge	r1, [r4, #0]
 801884e:	b90e      	cbnz	r6, 8018854 <_printf_i+0x118>
 8018850:	2d00      	cmp	r5, #0
 8018852:	d04d      	beq.n	80188f0 <_printf_i+0x1b4>
 8018854:	4615      	mov	r5, r2
 8018856:	fbb6 f1f3 	udiv	r1, r6, r3
 801885a:	fb03 6711 	mls	r7, r3, r1, r6
 801885e:	5dc7      	ldrb	r7, [r0, r7]
 8018860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018864:	4637      	mov	r7, r6
 8018866:	42bb      	cmp	r3, r7
 8018868:	460e      	mov	r6, r1
 801886a:	d9f4      	bls.n	8018856 <_printf_i+0x11a>
 801886c:	2b08      	cmp	r3, #8
 801886e:	d10b      	bne.n	8018888 <_printf_i+0x14c>
 8018870:	6823      	ldr	r3, [r4, #0]
 8018872:	07de      	lsls	r6, r3, #31
 8018874:	d508      	bpl.n	8018888 <_printf_i+0x14c>
 8018876:	6923      	ldr	r3, [r4, #16]
 8018878:	6861      	ldr	r1, [r4, #4]
 801887a:	4299      	cmp	r1, r3
 801887c:	bfde      	ittt	le
 801887e:	2330      	movle	r3, #48	; 0x30
 8018880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018888:	1b52      	subs	r2, r2, r5
 801888a:	6122      	str	r2, [r4, #16]
 801888c:	f8cd a000 	str.w	sl, [sp]
 8018890:	464b      	mov	r3, r9
 8018892:	aa03      	add	r2, sp, #12
 8018894:	4621      	mov	r1, r4
 8018896:	4640      	mov	r0, r8
 8018898:	f7ff fee2 	bl	8018660 <_printf_common>
 801889c:	3001      	adds	r0, #1
 801889e:	d14c      	bne.n	801893a <_printf_i+0x1fe>
 80188a0:	f04f 30ff 	mov.w	r0, #4294967295
 80188a4:	b004      	add	sp, #16
 80188a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188aa:	4835      	ldr	r0, [pc, #212]	; (8018980 <_printf_i+0x244>)
 80188ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80188b0:	6829      	ldr	r1, [r5, #0]
 80188b2:	6823      	ldr	r3, [r4, #0]
 80188b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80188b8:	6029      	str	r1, [r5, #0]
 80188ba:	061d      	lsls	r5, r3, #24
 80188bc:	d514      	bpl.n	80188e8 <_printf_i+0x1ac>
 80188be:	07df      	lsls	r7, r3, #31
 80188c0:	bf44      	itt	mi
 80188c2:	f043 0320 	orrmi.w	r3, r3, #32
 80188c6:	6023      	strmi	r3, [r4, #0]
 80188c8:	b91e      	cbnz	r6, 80188d2 <_printf_i+0x196>
 80188ca:	6823      	ldr	r3, [r4, #0]
 80188cc:	f023 0320 	bic.w	r3, r3, #32
 80188d0:	6023      	str	r3, [r4, #0]
 80188d2:	2310      	movs	r3, #16
 80188d4:	e7b0      	b.n	8018838 <_printf_i+0xfc>
 80188d6:	6823      	ldr	r3, [r4, #0]
 80188d8:	f043 0320 	orr.w	r3, r3, #32
 80188dc:	6023      	str	r3, [r4, #0]
 80188de:	2378      	movs	r3, #120	; 0x78
 80188e0:	4828      	ldr	r0, [pc, #160]	; (8018984 <_printf_i+0x248>)
 80188e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80188e6:	e7e3      	b.n	80188b0 <_printf_i+0x174>
 80188e8:	0659      	lsls	r1, r3, #25
 80188ea:	bf48      	it	mi
 80188ec:	b2b6      	uxthmi	r6, r6
 80188ee:	e7e6      	b.n	80188be <_printf_i+0x182>
 80188f0:	4615      	mov	r5, r2
 80188f2:	e7bb      	b.n	801886c <_printf_i+0x130>
 80188f4:	682b      	ldr	r3, [r5, #0]
 80188f6:	6826      	ldr	r6, [r4, #0]
 80188f8:	6961      	ldr	r1, [r4, #20]
 80188fa:	1d18      	adds	r0, r3, #4
 80188fc:	6028      	str	r0, [r5, #0]
 80188fe:	0635      	lsls	r5, r6, #24
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	d501      	bpl.n	8018908 <_printf_i+0x1cc>
 8018904:	6019      	str	r1, [r3, #0]
 8018906:	e002      	b.n	801890e <_printf_i+0x1d2>
 8018908:	0670      	lsls	r0, r6, #25
 801890a:	d5fb      	bpl.n	8018904 <_printf_i+0x1c8>
 801890c:	8019      	strh	r1, [r3, #0]
 801890e:	2300      	movs	r3, #0
 8018910:	6123      	str	r3, [r4, #16]
 8018912:	4615      	mov	r5, r2
 8018914:	e7ba      	b.n	801888c <_printf_i+0x150>
 8018916:	682b      	ldr	r3, [r5, #0]
 8018918:	1d1a      	adds	r2, r3, #4
 801891a:	602a      	str	r2, [r5, #0]
 801891c:	681d      	ldr	r5, [r3, #0]
 801891e:	6862      	ldr	r2, [r4, #4]
 8018920:	2100      	movs	r1, #0
 8018922:	4628      	mov	r0, r5
 8018924:	f7e7 fcdc 	bl	80002e0 <memchr>
 8018928:	b108      	cbz	r0, 801892e <_printf_i+0x1f2>
 801892a:	1b40      	subs	r0, r0, r5
 801892c:	6060      	str	r0, [r4, #4]
 801892e:	6863      	ldr	r3, [r4, #4]
 8018930:	6123      	str	r3, [r4, #16]
 8018932:	2300      	movs	r3, #0
 8018934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018938:	e7a8      	b.n	801888c <_printf_i+0x150>
 801893a:	6923      	ldr	r3, [r4, #16]
 801893c:	462a      	mov	r2, r5
 801893e:	4649      	mov	r1, r9
 8018940:	4640      	mov	r0, r8
 8018942:	47d0      	blx	sl
 8018944:	3001      	adds	r0, #1
 8018946:	d0ab      	beq.n	80188a0 <_printf_i+0x164>
 8018948:	6823      	ldr	r3, [r4, #0]
 801894a:	079b      	lsls	r3, r3, #30
 801894c:	d413      	bmi.n	8018976 <_printf_i+0x23a>
 801894e:	68e0      	ldr	r0, [r4, #12]
 8018950:	9b03      	ldr	r3, [sp, #12]
 8018952:	4298      	cmp	r0, r3
 8018954:	bfb8      	it	lt
 8018956:	4618      	movlt	r0, r3
 8018958:	e7a4      	b.n	80188a4 <_printf_i+0x168>
 801895a:	2301      	movs	r3, #1
 801895c:	4632      	mov	r2, r6
 801895e:	4649      	mov	r1, r9
 8018960:	4640      	mov	r0, r8
 8018962:	47d0      	blx	sl
 8018964:	3001      	adds	r0, #1
 8018966:	d09b      	beq.n	80188a0 <_printf_i+0x164>
 8018968:	3501      	adds	r5, #1
 801896a:	68e3      	ldr	r3, [r4, #12]
 801896c:	9903      	ldr	r1, [sp, #12]
 801896e:	1a5b      	subs	r3, r3, r1
 8018970:	42ab      	cmp	r3, r5
 8018972:	dcf2      	bgt.n	801895a <_printf_i+0x21e>
 8018974:	e7eb      	b.n	801894e <_printf_i+0x212>
 8018976:	2500      	movs	r5, #0
 8018978:	f104 0619 	add.w	r6, r4, #25
 801897c:	e7f5      	b.n	801896a <_printf_i+0x22e>
 801897e:	bf00      	nop
 8018980:	0801d76f 	.word	0x0801d76f
 8018984:	0801d780 	.word	0x0801d780

08018988 <_read_r>:
 8018988:	b538      	push	{r3, r4, r5, lr}
 801898a:	4d07      	ldr	r5, [pc, #28]	; (80189a8 <_read_r+0x20>)
 801898c:	4604      	mov	r4, r0
 801898e:	4608      	mov	r0, r1
 8018990:	4611      	mov	r1, r2
 8018992:	2200      	movs	r2, #0
 8018994:	602a      	str	r2, [r5, #0]
 8018996:	461a      	mov	r2, r3
 8018998:	f7e8 fa90 	bl	8000ebc <_read>
 801899c:	1c43      	adds	r3, r0, #1
 801899e:	d102      	bne.n	80189a6 <_read_r+0x1e>
 80189a0:	682b      	ldr	r3, [r5, #0]
 80189a2:	b103      	cbz	r3, 80189a6 <_read_r+0x1e>
 80189a4:	6023      	str	r3, [r4, #0]
 80189a6:	bd38      	pop	{r3, r4, r5, pc}
 80189a8:	240109c4 	.word	0x240109c4

080189ac <__swbuf_r>:
 80189ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ae:	460e      	mov	r6, r1
 80189b0:	4614      	mov	r4, r2
 80189b2:	4605      	mov	r5, r0
 80189b4:	b118      	cbz	r0, 80189be <__swbuf_r+0x12>
 80189b6:	6983      	ldr	r3, [r0, #24]
 80189b8:	b90b      	cbnz	r3, 80189be <__swbuf_r+0x12>
 80189ba:	f7fe ff3f 	bl	801783c <__sinit>
 80189be:	4b21      	ldr	r3, [pc, #132]	; (8018a44 <__swbuf_r+0x98>)
 80189c0:	429c      	cmp	r4, r3
 80189c2:	d12b      	bne.n	8018a1c <__swbuf_r+0x70>
 80189c4:	686c      	ldr	r4, [r5, #4]
 80189c6:	69a3      	ldr	r3, [r4, #24]
 80189c8:	60a3      	str	r3, [r4, #8]
 80189ca:	89a3      	ldrh	r3, [r4, #12]
 80189cc:	071a      	lsls	r2, r3, #28
 80189ce:	d52f      	bpl.n	8018a30 <__swbuf_r+0x84>
 80189d0:	6923      	ldr	r3, [r4, #16]
 80189d2:	b36b      	cbz	r3, 8018a30 <__swbuf_r+0x84>
 80189d4:	6923      	ldr	r3, [r4, #16]
 80189d6:	6820      	ldr	r0, [r4, #0]
 80189d8:	1ac0      	subs	r0, r0, r3
 80189da:	6963      	ldr	r3, [r4, #20]
 80189dc:	b2f6      	uxtb	r6, r6
 80189de:	4283      	cmp	r3, r0
 80189e0:	4637      	mov	r7, r6
 80189e2:	dc04      	bgt.n	80189ee <__swbuf_r+0x42>
 80189e4:	4621      	mov	r1, r4
 80189e6:	4628      	mov	r0, r5
 80189e8:	f7ff fac4 	bl	8017f74 <_fflush_r>
 80189ec:	bb30      	cbnz	r0, 8018a3c <__swbuf_r+0x90>
 80189ee:	68a3      	ldr	r3, [r4, #8]
 80189f0:	3b01      	subs	r3, #1
 80189f2:	60a3      	str	r3, [r4, #8]
 80189f4:	6823      	ldr	r3, [r4, #0]
 80189f6:	1c5a      	adds	r2, r3, #1
 80189f8:	6022      	str	r2, [r4, #0]
 80189fa:	701e      	strb	r6, [r3, #0]
 80189fc:	6963      	ldr	r3, [r4, #20]
 80189fe:	3001      	adds	r0, #1
 8018a00:	4283      	cmp	r3, r0
 8018a02:	d004      	beq.n	8018a0e <__swbuf_r+0x62>
 8018a04:	89a3      	ldrh	r3, [r4, #12]
 8018a06:	07db      	lsls	r3, r3, #31
 8018a08:	d506      	bpl.n	8018a18 <__swbuf_r+0x6c>
 8018a0a:	2e0a      	cmp	r6, #10
 8018a0c:	d104      	bne.n	8018a18 <__swbuf_r+0x6c>
 8018a0e:	4621      	mov	r1, r4
 8018a10:	4628      	mov	r0, r5
 8018a12:	f7ff faaf 	bl	8017f74 <_fflush_r>
 8018a16:	b988      	cbnz	r0, 8018a3c <__swbuf_r+0x90>
 8018a18:	4638      	mov	r0, r7
 8018a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a1c:	4b0a      	ldr	r3, [pc, #40]	; (8018a48 <__swbuf_r+0x9c>)
 8018a1e:	429c      	cmp	r4, r3
 8018a20:	d101      	bne.n	8018a26 <__swbuf_r+0x7a>
 8018a22:	68ac      	ldr	r4, [r5, #8]
 8018a24:	e7cf      	b.n	80189c6 <__swbuf_r+0x1a>
 8018a26:	4b09      	ldr	r3, [pc, #36]	; (8018a4c <__swbuf_r+0xa0>)
 8018a28:	429c      	cmp	r4, r3
 8018a2a:	bf08      	it	eq
 8018a2c:	68ec      	ldreq	r4, [r5, #12]
 8018a2e:	e7ca      	b.n	80189c6 <__swbuf_r+0x1a>
 8018a30:	4621      	mov	r1, r4
 8018a32:	4628      	mov	r0, r5
 8018a34:	f000 f80c 	bl	8018a50 <__swsetup_r>
 8018a38:	2800      	cmp	r0, #0
 8018a3a:	d0cb      	beq.n	80189d4 <__swbuf_r+0x28>
 8018a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8018a40:	e7ea      	b.n	8018a18 <__swbuf_r+0x6c>
 8018a42:	bf00      	nop
 8018a44:	0801d66c 	.word	0x0801d66c
 8018a48:	0801d68c 	.word	0x0801d68c
 8018a4c:	0801d64c 	.word	0x0801d64c

08018a50 <__swsetup_r>:
 8018a50:	4b32      	ldr	r3, [pc, #200]	; (8018b1c <__swsetup_r+0xcc>)
 8018a52:	b570      	push	{r4, r5, r6, lr}
 8018a54:	681d      	ldr	r5, [r3, #0]
 8018a56:	4606      	mov	r6, r0
 8018a58:	460c      	mov	r4, r1
 8018a5a:	b125      	cbz	r5, 8018a66 <__swsetup_r+0x16>
 8018a5c:	69ab      	ldr	r3, [r5, #24]
 8018a5e:	b913      	cbnz	r3, 8018a66 <__swsetup_r+0x16>
 8018a60:	4628      	mov	r0, r5
 8018a62:	f7fe feeb 	bl	801783c <__sinit>
 8018a66:	4b2e      	ldr	r3, [pc, #184]	; (8018b20 <__swsetup_r+0xd0>)
 8018a68:	429c      	cmp	r4, r3
 8018a6a:	d10f      	bne.n	8018a8c <__swsetup_r+0x3c>
 8018a6c:	686c      	ldr	r4, [r5, #4]
 8018a6e:	89a3      	ldrh	r3, [r4, #12]
 8018a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018a74:	0719      	lsls	r1, r3, #28
 8018a76:	d42c      	bmi.n	8018ad2 <__swsetup_r+0x82>
 8018a78:	06dd      	lsls	r5, r3, #27
 8018a7a:	d411      	bmi.n	8018aa0 <__swsetup_r+0x50>
 8018a7c:	2309      	movs	r3, #9
 8018a7e:	6033      	str	r3, [r6, #0]
 8018a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018a84:	81a3      	strh	r3, [r4, #12]
 8018a86:	f04f 30ff 	mov.w	r0, #4294967295
 8018a8a:	e03e      	b.n	8018b0a <__swsetup_r+0xba>
 8018a8c:	4b25      	ldr	r3, [pc, #148]	; (8018b24 <__swsetup_r+0xd4>)
 8018a8e:	429c      	cmp	r4, r3
 8018a90:	d101      	bne.n	8018a96 <__swsetup_r+0x46>
 8018a92:	68ac      	ldr	r4, [r5, #8]
 8018a94:	e7eb      	b.n	8018a6e <__swsetup_r+0x1e>
 8018a96:	4b24      	ldr	r3, [pc, #144]	; (8018b28 <__swsetup_r+0xd8>)
 8018a98:	429c      	cmp	r4, r3
 8018a9a:	bf08      	it	eq
 8018a9c:	68ec      	ldreq	r4, [r5, #12]
 8018a9e:	e7e6      	b.n	8018a6e <__swsetup_r+0x1e>
 8018aa0:	0758      	lsls	r0, r3, #29
 8018aa2:	d512      	bpl.n	8018aca <__swsetup_r+0x7a>
 8018aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018aa6:	b141      	cbz	r1, 8018aba <__swsetup_r+0x6a>
 8018aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018aac:	4299      	cmp	r1, r3
 8018aae:	d002      	beq.n	8018ab6 <__swsetup_r+0x66>
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	f7ff fad3 	bl	801805c <_free_r>
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8018aba:	89a3      	ldrh	r3, [r4, #12]
 8018abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ac0:	81a3      	strh	r3, [r4, #12]
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	6063      	str	r3, [r4, #4]
 8018ac6:	6923      	ldr	r3, [r4, #16]
 8018ac8:	6023      	str	r3, [r4, #0]
 8018aca:	89a3      	ldrh	r3, [r4, #12]
 8018acc:	f043 0308 	orr.w	r3, r3, #8
 8018ad0:	81a3      	strh	r3, [r4, #12]
 8018ad2:	6923      	ldr	r3, [r4, #16]
 8018ad4:	b94b      	cbnz	r3, 8018aea <__swsetup_r+0x9a>
 8018ad6:	89a3      	ldrh	r3, [r4, #12]
 8018ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ae0:	d003      	beq.n	8018aea <__swsetup_r+0x9a>
 8018ae2:	4621      	mov	r1, r4
 8018ae4:	4630      	mov	r0, r6
 8018ae6:	f000 f84d 	bl	8018b84 <__smakebuf_r>
 8018aea:	89a0      	ldrh	r0, [r4, #12]
 8018aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018af0:	f010 0301 	ands.w	r3, r0, #1
 8018af4:	d00a      	beq.n	8018b0c <__swsetup_r+0xbc>
 8018af6:	2300      	movs	r3, #0
 8018af8:	60a3      	str	r3, [r4, #8]
 8018afa:	6963      	ldr	r3, [r4, #20]
 8018afc:	425b      	negs	r3, r3
 8018afe:	61a3      	str	r3, [r4, #24]
 8018b00:	6923      	ldr	r3, [r4, #16]
 8018b02:	b943      	cbnz	r3, 8018b16 <__swsetup_r+0xc6>
 8018b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b08:	d1ba      	bne.n	8018a80 <__swsetup_r+0x30>
 8018b0a:	bd70      	pop	{r4, r5, r6, pc}
 8018b0c:	0781      	lsls	r1, r0, #30
 8018b0e:	bf58      	it	pl
 8018b10:	6963      	ldrpl	r3, [r4, #20]
 8018b12:	60a3      	str	r3, [r4, #8]
 8018b14:	e7f4      	b.n	8018b00 <__swsetup_r+0xb0>
 8018b16:	2000      	movs	r0, #0
 8018b18:	e7f7      	b.n	8018b0a <__swsetup_r+0xba>
 8018b1a:	bf00      	nop
 8018b1c:	24000040 	.word	0x24000040
 8018b20:	0801d66c 	.word	0x0801d66c
 8018b24:	0801d68c 	.word	0x0801d68c
 8018b28:	0801d64c 	.word	0x0801d64c

08018b2c <abort>:
 8018b2c:	b508      	push	{r3, lr}
 8018b2e:	2006      	movs	r0, #6
 8018b30:	f000 f8c0 	bl	8018cb4 <raise>
 8018b34:	2001      	movs	r0, #1
 8018b36:	f7e8 f9b7 	bl	8000ea8 <_exit>

08018b3a <__swhatbuf_r>:
 8018b3a:	b570      	push	{r4, r5, r6, lr}
 8018b3c:	460e      	mov	r6, r1
 8018b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b42:	2900      	cmp	r1, #0
 8018b44:	b096      	sub	sp, #88	; 0x58
 8018b46:	4614      	mov	r4, r2
 8018b48:	461d      	mov	r5, r3
 8018b4a:	da08      	bge.n	8018b5e <__swhatbuf_r+0x24>
 8018b4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018b50:	2200      	movs	r2, #0
 8018b52:	602a      	str	r2, [r5, #0]
 8018b54:	061a      	lsls	r2, r3, #24
 8018b56:	d410      	bmi.n	8018b7a <__swhatbuf_r+0x40>
 8018b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b5c:	e00e      	b.n	8018b7c <__swhatbuf_r+0x42>
 8018b5e:	466a      	mov	r2, sp
 8018b60:	f000 f8c4 	bl	8018cec <_fstat_r>
 8018b64:	2800      	cmp	r0, #0
 8018b66:	dbf1      	blt.n	8018b4c <__swhatbuf_r+0x12>
 8018b68:	9a01      	ldr	r2, [sp, #4]
 8018b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018b72:	425a      	negs	r2, r3
 8018b74:	415a      	adcs	r2, r3
 8018b76:	602a      	str	r2, [r5, #0]
 8018b78:	e7ee      	b.n	8018b58 <__swhatbuf_r+0x1e>
 8018b7a:	2340      	movs	r3, #64	; 0x40
 8018b7c:	2000      	movs	r0, #0
 8018b7e:	6023      	str	r3, [r4, #0]
 8018b80:	b016      	add	sp, #88	; 0x58
 8018b82:	bd70      	pop	{r4, r5, r6, pc}

08018b84 <__smakebuf_r>:
 8018b84:	898b      	ldrh	r3, [r1, #12]
 8018b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018b88:	079d      	lsls	r5, r3, #30
 8018b8a:	4606      	mov	r6, r0
 8018b8c:	460c      	mov	r4, r1
 8018b8e:	d507      	bpl.n	8018ba0 <__smakebuf_r+0x1c>
 8018b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018b94:	6023      	str	r3, [r4, #0]
 8018b96:	6123      	str	r3, [r4, #16]
 8018b98:	2301      	movs	r3, #1
 8018b9a:	6163      	str	r3, [r4, #20]
 8018b9c:	b002      	add	sp, #8
 8018b9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ba0:	ab01      	add	r3, sp, #4
 8018ba2:	466a      	mov	r2, sp
 8018ba4:	f7ff ffc9 	bl	8018b3a <__swhatbuf_r>
 8018ba8:	9900      	ldr	r1, [sp, #0]
 8018baa:	4605      	mov	r5, r0
 8018bac:	4630      	mov	r0, r6
 8018bae:	f7fe ff6b 	bl	8017a88 <_malloc_r>
 8018bb2:	b948      	cbnz	r0, 8018bc8 <__smakebuf_r+0x44>
 8018bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bb8:	059a      	lsls	r2, r3, #22
 8018bba:	d4ef      	bmi.n	8018b9c <__smakebuf_r+0x18>
 8018bbc:	f023 0303 	bic.w	r3, r3, #3
 8018bc0:	f043 0302 	orr.w	r3, r3, #2
 8018bc4:	81a3      	strh	r3, [r4, #12]
 8018bc6:	e7e3      	b.n	8018b90 <__smakebuf_r+0xc>
 8018bc8:	4b0d      	ldr	r3, [pc, #52]	; (8018c00 <__smakebuf_r+0x7c>)
 8018bca:	62b3      	str	r3, [r6, #40]	; 0x28
 8018bcc:	89a3      	ldrh	r3, [r4, #12]
 8018bce:	6020      	str	r0, [r4, #0]
 8018bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bd4:	81a3      	strh	r3, [r4, #12]
 8018bd6:	9b00      	ldr	r3, [sp, #0]
 8018bd8:	6163      	str	r3, [r4, #20]
 8018bda:	9b01      	ldr	r3, [sp, #4]
 8018bdc:	6120      	str	r0, [r4, #16]
 8018bde:	b15b      	cbz	r3, 8018bf8 <__smakebuf_r+0x74>
 8018be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018be4:	4630      	mov	r0, r6
 8018be6:	f000 f893 	bl	8018d10 <_isatty_r>
 8018bea:	b128      	cbz	r0, 8018bf8 <__smakebuf_r+0x74>
 8018bec:	89a3      	ldrh	r3, [r4, #12]
 8018bee:	f023 0303 	bic.w	r3, r3, #3
 8018bf2:	f043 0301 	orr.w	r3, r3, #1
 8018bf6:	81a3      	strh	r3, [r4, #12]
 8018bf8:	89a0      	ldrh	r0, [r4, #12]
 8018bfa:	4305      	orrs	r5, r0
 8018bfc:	81a5      	strh	r5, [r4, #12]
 8018bfe:	e7cd      	b.n	8018b9c <__smakebuf_r+0x18>
 8018c00:	080177d5 	.word	0x080177d5

08018c04 <_realloc_r>:
 8018c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c08:	4680      	mov	r8, r0
 8018c0a:	4614      	mov	r4, r2
 8018c0c:	460e      	mov	r6, r1
 8018c0e:	b921      	cbnz	r1, 8018c1a <_realloc_r+0x16>
 8018c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c14:	4611      	mov	r1, r2
 8018c16:	f7fe bf37 	b.w	8017a88 <_malloc_r>
 8018c1a:	b92a      	cbnz	r2, 8018c28 <_realloc_r+0x24>
 8018c1c:	f7ff fa1e 	bl	801805c <_free_r>
 8018c20:	4625      	mov	r5, r4
 8018c22:	4628      	mov	r0, r5
 8018c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c28:	f000 f882 	bl	8018d30 <_malloc_usable_size_r>
 8018c2c:	4284      	cmp	r4, r0
 8018c2e:	4607      	mov	r7, r0
 8018c30:	d802      	bhi.n	8018c38 <_realloc_r+0x34>
 8018c32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018c36:	d812      	bhi.n	8018c5e <_realloc_r+0x5a>
 8018c38:	4621      	mov	r1, r4
 8018c3a:	4640      	mov	r0, r8
 8018c3c:	f7fe ff24 	bl	8017a88 <_malloc_r>
 8018c40:	4605      	mov	r5, r0
 8018c42:	2800      	cmp	r0, #0
 8018c44:	d0ed      	beq.n	8018c22 <_realloc_r+0x1e>
 8018c46:	42bc      	cmp	r4, r7
 8018c48:	4622      	mov	r2, r4
 8018c4a:	4631      	mov	r1, r6
 8018c4c:	bf28      	it	cs
 8018c4e:	463a      	movcs	r2, r7
 8018c50:	f7fe fec9 	bl	80179e6 <memcpy>
 8018c54:	4631      	mov	r1, r6
 8018c56:	4640      	mov	r0, r8
 8018c58:	f7ff fa00 	bl	801805c <_free_r>
 8018c5c:	e7e1      	b.n	8018c22 <_realloc_r+0x1e>
 8018c5e:	4635      	mov	r5, r6
 8018c60:	e7df      	b.n	8018c22 <_realloc_r+0x1e>

08018c62 <_raise_r>:
 8018c62:	291f      	cmp	r1, #31
 8018c64:	b538      	push	{r3, r4, r5, lr}
 8018c66:	4604      	mov	r4, r0
 8018c68:	460d      	mov	r5, r1
 8018c6a:	d904      	bls.n	8018c76 <_raise_r+0x14>
 8018c6c:	2316      	movs	r3, #22
 8018c6e:	6003      	str	r3, [r0, #0]
 8018c70:	f04f 30ff 	mov.w	r0, #4294967295
 8018c74:	bd38      	pop	{r3, r4, r5, pc}
 8018c76:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018c78:	b112      	cbz	r2, 8018c80 <_raise_r+0x1e>
 8018c7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c7e:	b94b      	cbnz	r3, 8018c94 <_raise_r+0x32>
 8018c80:	4620      	mov	r0, r4
 8018c82:	f000 f831 	bl	8018ce8 <_getpid_r>
 8018c86:	462a      	mov	r2, r5
 8018c88:	4601      	mov	r1, r0
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c90:	f000 b818 	b.w	8018cc4 <_kill_r>
 8018c94:	2b01      	cmp	r3, #1
 8018c96:	d00a      	beq.n	8018cae <_raise_r+0x4c>
 8018c98:	1c59      	adds	r1, r3, #1
 8018c9a:	d103      	bne.n	8018ca4 <_raise_r+0x42>
 8018c9c:	2316      	movs	r3, #22
 8018c9e:	6003      	str	r3, [r0, #0]
 8018ca0:	2001      	movs	r0, #1
 8018ca2:	e7e7      	b.n	8018c74 <_raise_r+0x12>
 8018ca4:	2400      	movs	r4, #0
 8018ca6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018caa:	4628      	mov	r0, r5
 8018cac:	4798      	blx	r3
 8018cae:	2000      	movs	r0, #0
 8018cb0:	e7e0      	b.n	8018c74 <_raise_r+0x12>
	...

08018cb4 <raise>:
 8018cb4:	4b02      	ldr	r3, [pc, #8]	; (8018cc0 <raise+0xc>)
 8018cb6:	4601      	mov	r1, r0
 8018cb8:	6818      	ldr	r0, [r3, #0]
 8018cba:	f7ff bfd2 	b.w	8018c62 <_raise_r>
 8018cbe:	bf00      	nop
 8018cc0:	24000040 	.word	0x24000040

08018cc4 <_kill_r>:
 8018cc4:	b538      	push	{r3, r4, r5, lr}
 8018cc6:	4d07      	ldr	r5, [pc, #28]	; (8018ce4 <_kill_r+0x20>)
 8018cc8:	2300      	movs	r3, #0
 8018cca:	4604      	mov	r4, r0
 8018ccc:	4608      	mov	r0, r1
 8018cce:	4611      	mov	r1, r2
 8018cd0:	602b      	str	r3, [r5, #0]
 8018cd2:	f7e8 f8d7 	bl	8000e84 <_kill>
 8018cd6:	1c43      	adds	r3, r0, #1
 8018cd8:	d102      	bne.n	8018ce0 <_kill_r+0x1c>
 8018cda:	682b      	ldr	r3, [r5, #0]
 8018cdc:	b103      	cbz	r3, 8018ce0 <_kill_r+0x1c>
 8018cde:	6023      	str	r3, [r4, #0]
 8018ce0:	bd38      	pop	{r3, r4, r5, pc}
 8018ce2:	bf00      	nop
 8018ce4:	240109c4 	.word	0x240109c4

08018ce8 <_getpid_r>:
 8018ce8:	f7e8 b8c3 	b.w	8000e72 <_getpid>

08018cec <_fstat_r>:
 8018cec:	b538      	push	{r3, r4, r5, lr}
 8018cee:	4d07      	ldr	r5, [pc, #28]	; (8018d0c <_fstat_r+0x20>)
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	4608      	mov	r0, r1
 8018cf6:	4611      	mov	r1, r2
 8018cf8:	602b      	str	r3, [r5, #0]
 8018cfa:	f7e8 f924 	bl	8000f46 <_fstat>
 8018cfe:	1c43      	adds	r3, r0, #1
 8018d00:	d102      	bne.n	8018d08 <_fstat_r+0x1c>
 8018d02:	682b      	ldr	r3, [r5, #0]
 8018d04:	b103      	cbz	r3, 8018d08 <_fstat_r+0x1c>
 8018d06:	6023      	str	r3, [r4, #0]
 8018d08:	bd38      	pop	{r3, r4, r5, pc}
 8018d0a:	bf00      	nop
 8018d0c:	240109c4 	.word	0x240109c4

08018d10 <_isatty_r>:
 8018d10:	b538      	push	{r3, r4, r5, lr}
 8018d12:	4d06      	ldr	r5, [pc, #24]	; (8018d2c <_isatty_r+0x1c>)
 8018d14:	2300      	movs	r3, #0
 8018d16:	4604      	mov	r4, r0
 8018d18:	4608      	mov	r0, r1
 8018d1a:	602b      	str	r3, [r5, #0]
 8018d1c:	f7e8 f923 	bl	8000f66 <_isatty>
 8018d20:	1c43      	adds	r3, r0, #1
 8018d22:	d102      	bne.n	8018d2a <_isatty_r+0x1a>
 8018d24:	682b      	ldr	r3, [r5, #0]
 8018d26:	b103      	cbz	r3, 8018d2a <_isatty_r+0x1a>
 8018d28:	6023      	str	r3, [r4, #0]
 8018d2a:	bd38      	pop	{r3, r4, r5, pc}
 8018d2c:	240109c4 	.word	0x240109c4

08018d30 <_malloc_usable_size_r>:
 8018d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d34:	1f18      	subs	r0, r3, #4
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	bfbc      	itt	lt
 8018d3a:	580b      	ldrlt	r3, [r1, r0]
 8018d3c:	18c0      	addlt	r0, r0, r3
 8018d3e:	4770      	bx	lr

08018d40 <round>:
 8018d40:	ee10 1a90 	vmov	r1, s1
 8018d44:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8018d48:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8018d4c:	2a13      	cmp	r2, #19
 8018d4e:	b510      	push	{r4, lr}
 8018d50:	ee10 3a10 	vmov	r3, s0
 8018d54:	dc19      	bgt.n	8018d8a <round+0x4a>
 8018d56:	2a00      	cmp	r2, #0
 8018d58:	da09      	bge.n	8018d6e <round+0x2e>
 8018d5a:	3201      	adds	r2, #1
 8018d5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018d60:	d103      	bne.n	8018d6a <round+0x2a>
 8018d62:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018d66:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018d6a:	2000      	movs	r0, #0
 8018d6c:	e026      	b.n	8018dbc <round+0x7c>
 8018d6e:	4816      	ldr	r0, [pc, #88]	; (8018dc8 <round+0x88>)
 8018d70:	4110      	asrs	r0, r2
 8018d72:	ea01 0400 	and.w	r4, r1, r0
 8018d76:	4323      	orrs	r3, r4
 8018d78:	d00e      	beq.n	8018d98 <round+0x58>
 8018d7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018d7e:	fa43 f202 	asr.w	r2, r3, r2
 8018d82:	4411      	add	r1, r2
 8018d84:	ea21 0100 	bic.w	r1, r1, r0
 8018d88:	e7ef      	b.n	8018d6a <round+0x2a>
 8018d8a:	2a33      	cmp	r2, #51	; 0x33
 8018d8c:	dd05      	ble.n	8018d9a <round+0x5a>
 8018d8e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8018d92:	d101      	bne.n	8018d98 <round+0x58>
 8018d94:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018d98:	bd10      	pop	{r4, pc}
 8018d9a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8018d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8018da2:	40e0      	lsrs	r0, r4
 8018da4:	4203      	tst	r3, r0
 8018da6:	d0f7      	beq.n	8018d98 <round+0x58>
 8018da8:	2401      	movs	r4, #1
 8018daa:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8018dae:	fa04 f202 	lsl.w	r2, r4, r2
 8018db2:	189b      	adds	r3, r3, r2
 8018db4:	bf28      	it	cs
 8018db6:	1909      	addcs	r1, r1, r4
 8018db8:	ea23 0000 	bic.w	r0, r3, r0
 8018dbc:	460b      	mov	r3, r1
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	ec43 2b10 	vmov	d0, r2, r3
 8018dc4:	e7e8      	b.n	8018d98 <round+0x58>
 8018dc6:	bf00      	nop
 8018dc8:	000fffff 	.word	0x000fffff
 8018dcc:	00000000 	.word	0x00000000

08018dd0 <sin>:
 8018dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018dd2:	eeb0 7b40 	vmov.f64	d7, d0
 8018dd6:	ee17 3a90 	vmov	r3, s15
 8018dda:	4a21      	ldr	r2, [pc, #132]	; (8018e60 <sin+0x90>)
 8018ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018de0:	4293      	cmp	r3, r2
 8018de2:	dc07      	bgt.n	8018df4 <sin+0x24>
 8018de4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8018e58 <sin+0x88>
 8018de8:	2000      	movs	r0, #0
 8018dea:	b005      	add	sp, #20
 8018dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8018df0:	f000 bc82 	b.w	80196f8 <__kernel_sin>
 8018df4:	4a1b      	ldr	r2, [pc, #108]	; (8018e64 <sin+0x94>)
 8018df6:	4293      	cmp	r3, r2
 8018df8:	dd04      	ble.n	8018e04 <sin+0x34>
 8018dfa:	ee30 0b40 	vsub.f64	d0, d0, d0
 8018dfe:	b005      	add	sp, #20
 8018e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e04:	4668      	mov	r0, sp
 8018e06:	f000 f82f 	bl	8018e68 <__ieee754_rem_pio2>
 8018e0a:	f000 0003 	and.w	r0, r0, #3
 8018e0e:	2801      	cmp	r0, #1
 8018e10:	d00a      	beq.n	8018e28 <sin+0x58>
 8018e12:	2802      	cmp	r0, #2
 8018e14:	d00f      	beq.n	8018e36 <sin+0x66>
 8018e16:	b9c0      	cbnz	r0, 8018e4a <sin+0x7a>
 8018e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018e1c:	ed9d 0b00 	vldr	d0, [sp]
 8018e20:	2001      	movs	r0, #1
 8018e22:	f000 fc69 	bl	80196f8 <__kernel_sin>
 8018e26:	e7ea      	b.n	8018dfe <sin+0x2e>
 8018e28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018e2c:	ed9d 0b00 	vldr	d0, [sp]
 8018e30:	f000 f95e 	bl	80190f0 <__kernel_cos>
 8018e34:	e7e3      	b.n	8018dfe <sin+0x2e>
 8018e36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018e3a:	ed9d 0b00 	vldr	d0, [sp]
 8018e3e:	2001      	movs	r0, #1
 8018e40:	f000 fc5a 	bl	80196f8 <__kernel_sin>
 8018e44:	eeb1 0b40 	vneg.f64	d0, d0
 8018e48:	e7d9      	b.n	8018dfe <sin+0x2e>
 8018e4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018e4e:	ed9d 0b00 	vldr	d0, [sp]
 8018e52:	f000 f94d 	bl	80190f0 <__kernel_cos>
 8018e56:	e7f5      	b.n	8018e44 <sin+0x74>
	...
 8018e60:	3fe921fb 	.word	0x3fe921fb
 8018e64:	7fefffff 	.word	0x7fefffff

08018e68 <__ieee754_rem_pio2>:
 8018e68:	b570      	push	{r4, r5, r6, lr}
 8018e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8018e6e:	ee17 5a90 	vmov	r5, s15
 8018e72:	4b99      	ldr	r3, [pc, #612]	; (80190d8 <__ieee754_rem_pio2+0x270>)
 8018e74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018e78:	429e      	cmp	r6, r3
 8018e7a:	b088      	sub	sp, #32
 8018e7c:	4604      	mov	r4, r0
 8018e7e:	dc07      	bgt.n	8018e90 <__ieee754_rem_pio2+0x28>
 8018e80:	2200      	movs	r2, #0
 8018e82:	2300      	movs	r3, #0
 8018e84:	ed84 0b00 	vstr	d0, [r4]
 8018e88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018e8c:	2000      	movs	r0, #0
 8018e8e:	e01b      	b.n	8018ec8 <__ieee754_rem_pio2+0x60>
 8018e90:	4b92      	ldr	r3, [pc, #584]	; (80190dc <__ieee754_rem_pio2+0x274>)
 8018e92:	429e      	cmp	r6, r3
 8018e94:	dc3b      	bgt.n	8018f0e <__ieee754_rem_pio2+0xa6>
 8018e96:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8018e9a:	2d00      	cmp	r5, #0
 8018e9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8019098 <__ieee754_rem_pio2+0x230>
 8018ea0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8018ea4:	dd19      	ble.n	8018eda <__ieee754_rem_pio2+0x72>
 8018ea6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018eaa:	429e      	cmp	r6, r3
 8018eac:	d00e      	beq.n	8018ecc <__ieee754_rem_pio2+0x64>
 8018eae:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80190a0 <__ieee754_rem_pio2+0x238>
 8018eb2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8018eb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018eba:	ed84 5b00 	vstr	d5, [r4]
 8018ebe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018ec2:	ed84 7b02 	vstr	d7, [r4, #8]
 8018ec6:	2001      	movs	r0, #1
 8018ec8:	b008      	add	sp, #32
 8018eca:	bd70      	pop	{r4, r5, r6, pc}
 8018ecc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80190a8 <__ieee754_rem_pio2+0x240>
 8018ed0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018ed4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80190b0 <__ieee754_rem_pio2+0x248>
 8018ed8:	e7eb      	b.n	8018eb2 <__ieee754_rem_pio2+0x4a>
 8018eda:	429e      	cmp	r6, r3
 8018edc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8018ee0:	d00e      	beq.n	8018f00 <__ieee754_rem_pio2+0x98>
 8018ee2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80190a0 <__ieee754_rem_pio2+0x238>
 8018ee6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018eea:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018eee:	ed84 5b00 	vstr	d5, [r4]
 8018ef2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8018efa:	ed84 7b02 	vstr	d7, [r4, #8]
 8018efe:	e7e3      	b.n	8018ec8 <__ieee754_rem_pio2+0x60>
 8018f00:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80190a8 <__ieee754_rem_pio2+0x240>
 8018f04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018f08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80190b0 <__ieee754_rem_pio2+0x248>
 8018f0c:	e7eb      	b.n	8018ee6 <__ieee754_rem_pio2+0x7e>
 8018f0e:	4b74      	ldr	r3, [pc, #464]	; (80190e0 <__ieee754_rem_pio2+0x278>)
 8018f10:	429e      	cmp	r6, r3
 8018f12:	dc70      	bgt.n	8018ff6 <__ieee754_rem_pio2+0x18e>
 8018f14:	f000 fc48 	bl	80197a8 <fabs>
 8018f18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018f1c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80190b8 <__ieee754_rem_pio2+0x250>
 8018f20:	eea0 7b06 	vfma.f64	d7, d0, d6
 8018f24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018f28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018f2c:	ee17 0a90 	vmov	r0, s15
 8018f30:	eeb1 4b45 	vneg.f64	d4, d5
 8018f34:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019098 <__ieee754_rem_pio2+0x230>
 8018f38:	eea5 0b47 	vfms.f64	d0, d5, d7
 8018f3c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80190a0 <__ieee754_rem_pio2+0x238>
 8018f40:	281f      	cmp	r0, #31
 8018f42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8018f46:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018f4a:	dc08      	bgt.n	8018f5e <__ieee754_rem_pio2+0xf6>
 8018f4c:	4b65      	ldr	r3, [pc, #404]	; (80190e4 <__ieee754_rem_pio2+0x27c>)
 8018f4e:	1e42      	subs	r2, r0, #1
 8018f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f54:	42b3      	cmp	r3, r6
 8018f56:	d002      	beq.n	8018f5e <__ieee754_rem_pio2+0xf6>
 8018f58:	ed84 6b00 	vstr	d6, [r4]
 8018f5c:	e026      	b.n	8018fac <__ieee754_rem_pio2+0x144>
 8018f5e:	ee16 3a90 	vmov	r3, s13
 8018f62:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018f66:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8018f6a:	2b10      	cmp	r3, #16
 8018f6c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8018f70:	ddf2      	ble.n	8018f58 <__ieee754_rem_pio2+0xf0>
 8018f72:	eeb0 6b40 	vmov.f64	d6, d0
 8018f76:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80190a8 <__ieee754_rem_pio2+0x240>
 8018f7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80190b0 <__ieee754_rem_pio2+0x248>
 8018f7e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8018f82:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018f86:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018f8a:	eeb0 7b40 	vmov.f64	d7, d0
 8018f8e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8018f92:	ee36 3b47 	vsub.f64	d3, d6, d7
 8018f96:	ee13 3a90 	vmov	r3, s7
 8018f9a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018f9e:	1ad3      	subs	r3, r2, r3
 8018fa0:	2b31      	cmp	r3, #49	; 0x31
 8018fa2:	dc17      	bgt.n	8018fd4 <__ieee754_rem_pio2+0x16c>
 8018fa4:	eeb0 0b46 	vmov.f64	d0, d6
 8018fa8:	ed84 3b00 	vstr	d3, [r4]
 8018fac:	ed94 6b00 	vldr	d6, [r4]
 8018fb0:	2d00      	cmp	r5, #0
 8018fb2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018fb6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018fba:	ed84 0b02 	vstr	d0, [r4, #8]
 8018fbe:	da83      	bge.n	8018ec8 <__ieee754_rem_pio2+0x60>
 8018fc0:	eeb1 6b46 	vneg.f64	d6, d6
 8018fc4:	eeb1 0b40 	vneg.f64	d0, d0
 8018fc8:	ed84 6b00 	vstr	d6, [r4]
 8018fcc:	ed84 0b02 	vstr	d0, [r4, #8]
 8018fd0:	4240      	negs	r0, r0
 8018fd2:	e779      	b.n	8018ec8 <__ieee754_rem_pio2+0x60>
 8018fd4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80190c0 <__ieee754_rem_pio2+0x258>
 8018fd8:	eeb0 0b46 	vmov.f64	d0, d6
 8018fdc:	eea4 0b03 	vfma.f64	d0, d4, d3
 8018fe0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8018fe4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80190c8 <__ieee754_rem_pio2+0x260>
 8018fe8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8018fec:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018ff0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018ff4:	e7b0      	b.n	8018f58 <__ieee754_rem_pio2+0xf0>
 8018ff6:	4b3c      	ldr	r3, [pc, #240]	; (80190e8 <__ieee754_rem_pio2+0x280>)
 8018ff8:	429e      	cmp	r6, r3
 8018ffa:	dd06      	ble.n	801900a <__ieee754_rem_pio2+0x1a2>
 8018ffc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019000:	ed80 7b02 	vstr	d7, [r0, #8]
 8019004:	ed80 7b00 	vstr	d7, [r0]
 8019008:	e740      	b.n	8018e8c <__ieee754_rem_pio2+0x24>
 801900a:	1532      	asrs	r2, r6, #20
 801900c:	ee10 0a10 	vmov	r0, s0
 8019010:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8019014:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8019018:	ec41 0b17 	vmov	d7, r0, r1
 801901c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019020:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80190d0 <__ieee754_rem_pio2+0x268>
 8019024:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019028:	ee37 7b46 	vsub.f64	d7, d7, d6
 801902c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019030:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019034:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019038:	a902      	add	r1, sp, #8
 801903a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801903e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019042:	ed8d 6b04 	vstr	d6, [sp, #16]
 8019046:	ee27 7b05 	vmul.f64	d7, d7, d5
 801904a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801904e:	2603      	movs	r6, #3
 8019050:	4608      	mov	r0, r1
 8019052:	ed91 7b04 	vldr	d7, [r1, #16]
 8019056:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801905a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905e:	4633      	mov	r3, r6
 8019060:	f1a1 0108 	sub.w	r1, r1, #8
 8019064:	f106 36ff 	add.w	r6, r6, #4294967295
 8019068:	d0f3      	beq.n	8019052 <__ieee754_rem_pio2+0x1ea>
 801906a:	4920      	ldr	r1, [pc, #128]	; (80190ec <__ieee754_rem_pio2+0x284>)
 801906c:	9101      	str	r1, [sp, #4]
 801906e:	2102      	movs	r1, #2
 8019070:	9100      	str	r1, [sp, #0]
 8019072:	4621      	mov	r1, r4
 8019074:	f000 f8a8 	bl	80191c8 <__kernel_rem_pio2>
 8019078:	2d00      	cmp	r5, #0
 801907a:	f6bf af25 	bge.w	8018ec8 <__ieee754_rem_pio2+0x60>
 801907e:	ed94 7b00 	vldr	d7, [r4]
 8019082:	eeb1 7b47 	vneg.f64	d7, d7
 8019086:	ed84 7b00 	vstr	d7, [r4]
 801908a:	ed94 7b02 	vldr	d7, [r4, #8]
 801908e:	eeb1 7b47 	vneg.f64	d7, d7
 8019092:	ed84 7b02 	vstr	d7, [r4, #8]
 8019096:	e79b      	b.n	8018fd0 <__ieee754_rem_pio2+0x168>
 8019098:	54400000 	.word	0x54400000
 801909c:	3ff921fb 	.word	0x3ff921fb
 80190a0:	1a626331 	.word	0x1a626331
 80190a4:	3dd0b461 	.word	0x3dd0b461
 80190a8:	1a600000 	.word	0x1a600000
 80190ac:	3dd0b461 	.word	0x3dd0b461
 80190b0:	2e037073 	.word	0x2e037073
 80190b4:	3ba3198a 	.word	0x3ba3198a
 80190b8:	6dc9c883 	.word	0x6dc9c883
 80190bc:	3fe45f30 	.word	0x3fe45f30
 80190c0:	2e000000 	.word	0x2e000000
 80190c4:	3ba3198a 	.word	0x3ba3198a
 80190c8:	252049c1 	.word	0x252049c1
 80190cc:	397b839a 	.word	0x397b839a
 80190d0:	00000000 	.word	0x00000000
 80190d4:	41700000 	.word	0x41700000
 80190d8:	3fe921fb 	.word	0x3fe921fb
 80190dc:	4002d97b 	.word	0x4002d97b
 80190e0:	413921fb 	.word	0x413921fb
 80190e4:	0801d794 	.word	0x0801d794
 80190e8:	7fefffff 	.word	0x7fefffff
 80190ec:	0801d814 	.word	0x0801d814

080190f0 <__kernel_cos>:
 80190f0:	ee10 1a90 	vmov	r1, s1
 80190f4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80190f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80190fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8019100:	da05      	bge.n	801910e <__kernel_cos+0x1e>
 8019102:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8019106:	ee17 3a90 	vmov	r3, s15
 801910a:	2b00      	cmp	r3, #0
 801910c:	d03d      	beq.n	801918a <__kernel_cos+0x9a>
 801910e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8019112:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8019190 <__kernel_cos+0xa0>
 8019116:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8019198 <__kernel_cos+0xa8>
 801911a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801911e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80191a0 <__kernel_cos+0xb0>
 8019122:	eea6 7b03 	vfma.f64	d7, d6, d3
 8019126:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80191a8 <__kernel_cos+0xb8>
 801912a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801912e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80191b0 <__kernel_cos+0xc0>
 8019132:	4b23      	ldr	r3, [pc, #140]	; (80191c0 <__kernel_cos+0xd0>)
 8019134:	eea6 7b03 	vfma.f64	d7, d6, d3
 8019138:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80191b8 <__kernel_cos+0xc8>
 801913c:	4299      	cmp	r1, r3
 801913e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8019142:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019146:	ee26 5b03 	vmul.f64	d5, d6, d3
 801914a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801914e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8019152:	eea3 6b05 	vfma.f64	d6, d3, d5
 8019156:	dc04      	bgt.n	8019162 <__kernel_cos+0x72>
 8019158:	ee37 6b46 	vsub.f64	d6, d7, d6
 801915c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8019160:	4770      	bx	lr
 8019162:	4b18      	ldr	r3, [pc, #96]	; (80191c4 <__kernel_cos+0xd4>)
 8019164:	4299      	cmp	r1, r3
 8019166:	dc0d      	bgt.n	8019184 <__kernel_cos+0x94>
 8019168:	2200      	movs	r2, #0
 801916a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801916e:	ec43 2b15 	vmov	d5, r2, r3
 8019172:	ee34 0b45 	vsub.f64	d0, d4, d5
 8019176:	ee37 7b45 	vsub.f64	d7, d7, d5
 801917a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801917e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019182:	4770      	bx	lr
 8019184:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8019188:	e7f3      	b.n	8019172 <__kernel_cos+0x82>
 801918a:	eeb0 0b44 	vmov.f64	d0, d4
 801918e:	4770      	bx	lr
 8019190:	be8838d4 	.word	0xbe8838d4
 8019194:	bda8fae9 	.word	0xbda8fae9
 8019198:	bdb4b1c4 	.word	0xbdb4b1c4
 801919c:	3e21ee9e 	.word	0x3e21ee9e
 80191a0:	809c52ad 	.word	0x809c52ad
 80191a4:	be927e4f 	.word	0xbe927e4f
 80191a8:	19cb1590 	.word	0x19cb1590
 80191ac:	3efa01a0 	.word	0x3efa01a0
 80191b0:	16c15177 	.word	0x16c15177
 80191b4:	bf56c16c 	.word	0xbf56c16c
 80191b8:	5555554c 	.word	0x5555554c
 80191bc:	3fa55555 	.word	0x3fa55555
 80191c0:	3fd33332 	.word	0x3fd33332
 80191c4:	3fe90000 	.word	0x3fe90000

080191c8 <__kernel_rem_pio2>:
 80191c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191cc:	ed2d 8b06 	vpush	{d8-d10}
 80191d0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80191d4:	460f      	mov	r7, r1
 80191d6:	9002      	str	r0, [sp, #8]
 80191d8:	49c5      	ldr	r1, [pc, #788]	; (80194f0 <__kernel_rem_pio2+0x328>)
 80191da:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80191dc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80191e0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80191e4:	9301      	str	r3, [sp, #4]
 80191e6:	f112 0f14 	cmn.w	r2, #20
 80191ea:	bfa8      	it	ge
 80191ec:	2018      	movge	r0, #24
 80191ee:	f103 31ff 	add.w	r1, r3, #4294967295
 80191f2:	bfb8      	it	lt
 80191f4:	2000      	movlt	r0, #0
 80191f6:	f06f 0417 	mvn.w	r4, #23
 80191fa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80194d8 <__kernel_rem_pio2+0x310>
 80191fe:	bfa4      	itt	ge
 8019200:	f1a2 0a03 	subge.w	sl, r2, #3
 8019204:	fb9a f0f0 	sdivge	r0, sl, r0
 8019208:	fb00 4404 	mla	r4, r0, r4, r4
 801920c:	1a46      	subs	r6, r0, r1
 801920e:	4414      	add	r4, r2
 8019210:	eb09 0c01 	add.w	ip, r9, r1
 8019214:	ad1a      	add	r5, sp, #104	; 0x68
 8019216:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801921a:	2200      	movs	r2, #0
 801921c:	4562      	cmp	r2, ip
 801921e:	dd10      	ble.n	8019242 <__kernel_rem_pio2+0x7a>
 8019220:	9a01      	ldr	r2, [sp, #4]
 8019222:	ab1a      	add	r3, sp, #104	; 0x68
 8019224:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019228:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801922c:	f04f 0c00 	mov.w	ip, #0
 8019230:	45cc      	cmp	ip, r9
 8019232:	dc26      	bgt.n	8019282 <__kernel_rem_pio2+0xba>
 8019234:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80194d8 <__kernel_rem_pio2+0x310>
 8019238:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801923c:	4616      	mov	r6, r2
 801923e:	2500      	movs	r5, #0
 8019240:	e015      	b.n	801926e <__kernel_rem_pio2+0xa6>
 8019242:	42d6      	cmn	r6, r2
 8019244:	d409      	bmi.n	801925a <__kernel_rem_pio2+0x92>
 8019246:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801924a:	ee07 3a90 	vmov	s15, r3
 801924e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019252:	eca5 7b02 	vstmia	r5!, {d7}
 8019256:	3201      	adds	r2, #1
 8019258:	e7e0      	b.n	801921c <__kernel_rem_pio2+0x54>
 801925a:	eeb0 7b46 	vmov.f64	d7, d6
 801925e:	e7f8      	b.n	8019252 <__kernel_rem_pio2+0x8a>
 8019260:	ecb8 5b02 	vldmia	r8!, {d5}
 8019264:	ed96 6b00 	vldr	d6, [r6]
 8019268:	3501      	adds	r5, #1
 801926a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801926e:	428d      	cmp	r5, r1
 8019270:	f1a6 0608 	sub.w	r6, r6, #8
 8019274:	ddf4      	ble.n	8019260 <__kernel_rem_pio2+0x98>
 8019276:	ecaa 7b02 	vstmia	sl!, {d7}
 801927a:	f10c 0c01 	add.w	ip, ip, #1
 801927e:	3208      	adds	r2, #8
 8019280:	e7d6      	b.n	8019230 <__kernel_rem_pio2+0x68>
 8019282:	ab06      	add	r3, sp, #24
 8019284:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80194e0 <__kernel_rem_pio2+0x318>
 8019288:	ed9f ab97 	vldr	d10, [pc, #604]	; 80194e8 <__kernel_rem_pio2+0x320>
 801928c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8019290:	9303      	str	r3, [sp, #12]
 8019292:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8019296:	464d      	mov	r5, r9
 8019298:	00eb      	lsls	r3, r5, #3
 801929a:	9304      	str	r3, [sp, #16]
 801929c:	ab92      	add	r3, sp, #584	; 0x248
 801929e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80192a2:	f10d 0b18 	add.w	fp, sp, #24
 80192a6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80192a8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80192ac:	465e      	mov	r6, fp
 80192ae:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80192b2:	4628      	mov	r0, r5
 80192b4:	2800      	cmp	r0, #0
 80192b6:	f1a2 0208 	sub.w	r2, r2, #8
 80192ba:	dc4c      	bgt.n	8019356 <__kernel_rem_pio2+0x18e>
 80192bc:	4620      	mov	r0, r4
 80192be:	9105      	str	r1, [sp, #20]
 80192c0:	f000 faf2 	bl	80198a8 <scalbn>
 80192c4:	eeb0 8b40 	vmov.f64	d8, d0
 80192c8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80192cc:	ee28 0b00 	vmul.f64	d0, d8, d0
 80192d0:	f000 fa76 	bl	80197c0 <floor>
 80192d4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80192d8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80192dc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80192e0:	2c00      	cmp	r4, #0
 80192e2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80192e6:	ee17 8a90 	vmov	r8, s15
 80192ea:	ee38 8b40 	vsub.f64	d8, d8, d0
 80192ee:	9905      	ldr	r1, [sp, #20]
 80192f0:	dd43      	ble.n	801937a <__kernel_rem_pio2+0x1b2>
 80192f2:	1e68      	subs	r0, r5, #1
 80192f4:	ab06      	add	r3, sp, #24
 80192f6:	f1c4 0c18 	rsb	ip, r4, #24
 80192fa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80192fe:	fa46 f20c 	asr.w	r2, r6, ip
 8019302:	4490      	add	r8, r2
 8019304:	fa02 f20c 	lsl.w	r2, r2, ip
 8019308:	1ab6      	subs	r6, r6, r2
 801930a:	f1c4 0217 	rsb	r2, r4, #23
 801930e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8019312:	4116      	asrs	r6, r2
 8019314:	2e00      	cmp	r6, #0
 8019316:	dd3f      	ble.n	8019398 <__kernel_rem_pio2+0x1d0>
 8019318:	f04f 0c00 	mov.w	ip, #0
 801931c:	f108 0801 	add.w	r8, r8, #1
 8019320:	4660      	mov	r0, ip
 8019322:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8019326:	4565      	cmp	r5, ip
 8019328:	dc6e      	bgt.n	8019408 <__kernel_rem_pio2+0x240>
 801932a:	2c00      	cmp	r4, #0
 801932c:	dd04      	ble.n	8019338 <__kernel_rem_pio2+0x170>
 801932e:	2c01      	cmp	r4, #1
 8019330:	d07f      	beq.n	8019432 <__kernel_rem_pio2+0x26a>
 8019332:	2c02      	cmp	r4, #2
 8019334:	f000 8087 	beq.w	8019446 <__kernel_rem_pio2+0x27e>
 8019338:	2e02      	cmp	r6, #2
 801933a:	d12d      	bne.n	8019398 <__kernel_rem_pio2+0x1d0>
 801933c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019340:	ee30 8b48 	vsub.f64	d8, d0, d8
 8019344:	b340      	cbz	r0, 8019398 <__kernel_rem_pio2+0x1d0>
 8019346:	4620      	mov	r0, r4
 8019348:	9105      	str	r1, [sp, #20]
 801934a:	f000 faad 	bl	80198a8 <scalbn>
 801934e:	9905      	ldr	r1, [sp, #20]
 8019350:	ee38 8b40 	vsub.f64	d8, d8, d0
 8019354:	e020      	b.n	8019398 <__kernel_rem_pio2+0x1d0>
 8019356:	ee20 7b09 	vmul.f64	d7, d0, d9
 801935a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801935e:	3801      	subs	r0, #1
 8019360:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8019364:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8019368:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801936c:	eca6 0a01 	vstmia	r6!, {s0}
 8019370:	ed92 0b00 	vldr	d0, [r2]
 8019374:	ee37 0b00 	vadd.f64	d0, d7, d0
 8019378:	e79c      	b.n	80192b4 <__kernel_rem_pio2+0xec>
 801937a:	d105      	bne.n	8019388 <__kernel_rem_pio2+0x1c0>
 801937c:	1e6a      	subs	r2, r5, #1
 801937e:	ab06      	add	r3, sp, #24
 8019380:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019384:	15f6      	asrs	r6, r6, #23
 8019386:	e7c5      	b.n	8019314 <__kernel_rem_pio2+0x14c>
 8019388:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801938c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019394:	da36      	bge.n	8019404 <__kernel_rem_pio2+0x23c>
 8019396:	2600      	movs	r6, #0
 8019398:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801939c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193a0:	f040 80aa 	bne.w	80194f8 <__kernel_rem_pio2+0x330>
 80193a4:	f105 3bff 	add.w	fp, r5, #4294967295
 80193a8:	4658      	mov	r0, fp
 80193aa:	2200      	movs	r2, #0
 80193ac:	4548      	cmp	r0, r9
 80193ae:	da52      	bge.n	8019456 <__kernel_rem_pio2+0x28e>
 80193b0:	2a00      	cmp	r2, #0
 80193b2:	f000 8081 	beq.w	80194b8 <__kernel_rem_pio2+0x2f0>
 80193b6:	ab06      	add	r3, sp, #24
 80193b8:	3c18      	subs	r4, #24
 80193ba:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	f000 8087 	beq.w	80194d2 <__kernel_rem_pio2+0x30a>
 80193c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80193c8:	4620      	mov	r0, r4
 80193ca:	f000 fa6d 	bl	80198a8 <scalbn>
 80193ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80193d2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80194e0 <__kernel_rem_pio2+0x318>
 80193d6:	a96a      	add	r1, sp, #424	; 0x1a8
 80193d8:	f103 0208 	add.w	r2, r3, #8
 80193dc:	1888      	adds	r0, r1, r2
 80193de:	4659      	mov	r1, fp
 80193e0:	2900      	cmp	r1, #0
 80193e2:	f280 80b7 	bge.w	8019554 <__kernel_rem_pio2+0x38c>
 80193e6:	4659      	mov	r1, fp
 80193e8:	2900      	cmp	r1, #0
 80193ea:	f2c0 80d5 	blt.w	8019598 <__kernel_rem_pio2+0x3d0>
 80193ee:	a86a      	add	r0, sp, #424	; 0x1a8
 80193f0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80193f4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80194d8 <__kernel_rem_pio2+0x310>
 80193f8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80194f4 <__kernel_rem_pio2+0x32c>
 80193fc:	2400      	movs	r4, #0
 80193fe:	ebab 0001 	sub.w	r0, fp, r1
 8019402:	e0be      	b.n	8019582 <__kernel_rem_pio2+0x3ba>
 8019404:	2602      	movs	r6, #2
 8019406:	e787      	b.n	8019318 <__kernel_rem_pio2+0x150>
 8019408:	f8db 2000 	ldr.w	r2, [fp]
 801940c:	b958      	cbnz	r0, 8019426 <__kernel_rem_pio2+0x25e>
 801940e:	b122      	cbz	r2, 801941a <__kernel_rem_pio2+0x252>
 8019410:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8019414:	f8cb 2000 	str.w	r2, [fp]
 8019418:	2201      	movs	r2, #1
 801941a:	f10c 0c01 	add.w	ip, ip, #1
 801941e:	f10b 0b04 	add.w	fp, fp, #4
 8019422:	4610      	mov	r0, r2
 8019424:	e77f      	b.n	8019326 <__kernel_rem_pio2+0x15e>
 8019426:	ebae 0202 	sub.w	r2, lr, r2
 801942a:	f8cb 2000 	str.w	r2, [fp]
 801942e:	4602      	mov	r2, r0
 8019430:	e7f3      	b.n	801941a <__kernel_rem_pio2+0x252>
 8019432:	f105 3cff 	add.w	ip, r5, #4294967295
 8019436:	ab06      	add	r3, sp, #24
 8019438:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801943c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019440:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8019444:	e778      	b.n	8019338 <__kernel_rem_pio2+0x170>
 8019446:	f105 3cff 	add.w	ip, r5, #4294967295
 801944a:	ab06      	add	r3, sp, #24
 801944c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8019450:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8019454:	e7f4      	b.n	8019440 <__kernel_rem_pio2+0x278>
 8019456:	ab06      	add	r3, sp, #24
 8019458:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801945c:	3801      	subs	r0, #1
 801945e:	431a      	orrs	r2, r3
 8019460:	e7a4      	b.n	80193ac <__kernel_rem_pio2+0x1e4>
 8019462:	f10c 0c01 	add.w	ip, ip, #1
 8019466:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801946a:	2800      	cmp	r0, #0
 801946c:	d0f9      	beq.n	8019462 <__kernel_rem_pio2+0x29a>
 801946e:	9b04      	ldr	r3, [sp, #16]
 8019470:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8019474:	eb0d 0203 	add.w	r2, sp, r3
 8019478:	9b01      	ldr	r3, [sp, #4]
 801947a:	18e8      	adds	r0, r5, r3
 801947c:	ab1a      	add	r3, sp, #104	; 0x68
 801947e:	1c6e      	adds	r6, r5, #1
 8019480:	3a98      	subs	r2, #152	; 0x98
 8019482:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019486:	4465      	add	r5, ip
 8019488:	42b5      	cmp	r5, r6
 801948a:	f6ff af05 	blt.w	8019298 <__kernel_rem_pio2+0xd0>
 801948e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8019492:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019496:	ee07 3a90 	vmov	s15, r3
 801949a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801949e:	f04f 0c00 	mov.w	ip, #0
 80194a2:	eca0 7b02 	vstmia	r0!, {d7}
 80194a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80194d8 <__kernel_rem_pio2+0x310>
 80194aa:	4680      	mov	r8, r0
 80194ac:	458c      	cmp	ip, r1
 80194ae:	dd07      	ble.n	80194c0 <__kernel_rem_pio2+0x2f8>
 80194b0:	eca2 7b02 	vstmia	r2!, {d7}
 80194b4:	3601      	adds	r6, #1
 80194b6:	e7e7      	b.n	8019488 <__kernel_rem_pio2+0x2c0>
 80194b8:	9a03      	ldr	r2, [sp, #12]
 80194ba:	f04f 0c01 	mov.w	ip, #1
 80194be:	e7d2      	b.n	8019466 <__kernel_rem_pio2+0x29e>
 80194c0:	ecbe 5b02 	vldmia	lr!, {d5}
 80194c4:	ed38 6b02 	vldmdb	r8!, {d6}
 80194c8:	f10c 0c01 	add.w	ip, ip, #1
 80194cc:	eea5 7b06 	vfma.f64	d7, d5, d6
 80194d0:	e7ec      	b.n	80194ac <__kernel_rem_pio2+0x2e4>
 80194d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80194d6:	e76e      	b.n	80193b6 <__kernel_rem_pio2+0x1ee>
	...
 80194e4:	3e700000 	.word	0x3e700000
 80194e8:	00000000 	.word	0x00000000
 80194ec:	41700000 	.word	0x41700000
 80194f0:	0801d960 	.word	0x0801d960
 80194f4:	0801d920 	.word	0x0801d920
 80194f8:	4260      	negs	r0, r4
 80194fa:	eeb0 0b48 	vmov.f64	d0, d8
 80194fe:	f000 f9d3 	bl	80198a8 <scalbn>
 8019502:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80196e0 <__kernel_rem_pio2+0x518>
 8019506:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801950e:	db18      	blt.n	8019542 <__kernel_rem_pio2+0x37a>
 8019510:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80196e8 <__kernel_rem_pio2+0x520>
 8019514:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019518:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801951c:	aa06      	add	r2, sp, #24
 801951e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8019522:	eea5 0b46 	vfms.f64	d0, d5, d6
 8019526:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801952a:	f105 0b01 	add.w	fp, r5, #1
 801952e:	ee10 3a10 	vmov	r3, s0
 8019532:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8019536:	ee17 3a10 	vmov	r3, s14
 801953a:	3418      	adds	r4, #24
 801953c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8019540:	e740      	b.n	80193c4 <__kernel_rem_pio2+0x1fc>
 8019542:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8019546:	aa06      	add	r2, sp, #24
 8019548:	ee10 3a10 	vmov	r3, s0
 801954c:	46ab      	mov	fp, r5
 801954e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8019552:	e737      	b.n	80193c4 <__kernel_rem_pio2+0x1fc>
 8019554:	ac06      	add	r4, sp, #24
 8019556:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801955a:	9401      	str	r4, [sp, #4]
 801955c:	ee07 4a90 	vmov	s15, r4
 8019560:	3901      	subs	r1, #1
 8019562:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019566:	ee27 7b00 	vmul.f64	d7, d7, d0
 801956a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801956e:	ed20 7b02 	vstmdb	r0!, {d7}
 8019572:	e735      	b.n	80193e0 <__kernel_rem_pio2+0x218>
 8019574:	ecbc 5b02 	vldmia	ip!, {d5}
 8019578:	ecb5 6b02 	vldmia	r5!, {d6}
 801957c:	3401      	adds	r4, #1
 801957e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019582:	454c      	cmp	r4, r9
 8019584:	dc01      	bgt.n	801958a <__kernel_rem_pio2+0x3c2>
 8019586:	4284      	cmp	r4, r0
 8019588:	ddf4      	ble.n	8019574 <__kernel_rem_pio2+0x3ac>
 801958a:	ac42      	add	r4, sp, #264	; 0x108
 801958c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8019590:	ed80 7b00 	vstr	d7, [r0]
 8019594:	3901      	subs	r1, #1
 8019596:	e727      	b.n	80193e8 <__kernel_rem_pio2+0x220>
 8019598:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801959a:	2902      	cmp	r1, #2
 801959c:	dc0a      	bgt.n	80195b4 <__kernel_rem_pio2+0x3ec>
 801959e:	2900      	cmp	r1, #0
 80195a0:	dc2c      	bgt.n	80195fc <__kernel_rem_pio2+0x434>
 80195a2:	d045      	beq.n	8019630 <__kernel_rem_pio2+0x468>
 80195a4:	f008 0007 	and.w	r0, r8, #7
 80195a8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80195ac:	ecbd 8b06 	vpop	{d8-d10}
 80195b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195b4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80195b6:	2a03      	cmp	r2, #3
 80195b8:	d1f4      	bne.n	80195a4 <__kernel_rem_pio2+0x3dc>
 80195ba:	aa42      	add	r2, sp, #264	; 0x108
 80195bc:	4413      	add	r3, r2
 80195be:	461a      	mov	r2, r3
 80195c0:	4619      	mov	r1, r3
 80195c2:	4658      	mov	r0, fp
 80195c4:	2800      	cmp	r0, #0
 80195c6:	f1a1 0108 	sub.w	r1, r1, #8
 80195ca:	dc54      	bgt.n	8019676 <__kernel_rem_pio2+0x4ae>
 80195cc:	4659      	mov	r1, fp
 80195ce:	2901      	cmp	r1, #1
 80195d0:	f1a2 0208 	sub.w	r2, r2, #8
 80195d4:	dc5f      	bgt.n	8019696 <__kernel_rem_pio2+0x4ce>
 80195d6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80196f0 <__kernel_rem_pio2+0x528>
 80195da:	3308      	adds	r3, #8
 80195dc:	f1bb 0f01 	cmp.w	fp, #1
 80195e0:	dc69      	bgt.n	80196b6 <__kernel_rem_pio2+0x4ee>
 80195e2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80195e6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80195ea:	2e00      	cmp	r6, #0
 80195ec:	d16a      	bne.n	80196c4 <__kernel_rem_pio2+0x4fc>
 80195ee:	ed87 5b00 	vstr	d5, [r7]
 80195f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80195f6:	ed87 7b04 	vstr	d7, [r7, #16]
 80195fa:	e7d3      	b.n	80195a4 <__kernel_rem_pio2+0x3dc>
 80195fc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80196f0 <__kernel_rem_pio2+0x528>
 8019600:	ab42      	add	r3, sp, #264	; 0x108
 8019602:	441a      	add	r2, r3
 8019604:	465b      	mov	r3, fp
 8019606:	2b00      	cmp	r3, #0
 8019608:	da26      	bge.n	8019658 <__kernel_rem_pio2+0x490>
 801960a:	b35e      	cbz	r6, 8019664 <__kernel_rem_pio2+0x49c>
 801960c:	eeb1 7b46 	vneg.f64	d7, d6
 8019610:	ed87 7b00 	vstr	d7, [r7]
 8019614:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8019618:	aa44      	add	r2, sp, #272	; 0x110
 801961a:	2301      	movs	r3, #1
 801961c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019620:	459b      	cmp	fp, r3
 8019622:	da22      	bge.n	801966a <__kernel_rem_pio2+0x4a2>
 8019624:	b10e      	cbz	r6, 801962a <__kernel_rem_pio2+0x462>
 8019626:	eeb1 7b47 	vneg.f64	d7, d7
 801962a:	ed87 7b02 	vstr	d7, [r7, #8]
 801962e:	e7b9      	b.n	80195a4 <__kernel_rem_pio2+0x3dc>
 8019630:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80196f0 <__kernel_rem_pio2+0x528>
 8019634:	ab42      	add	r3, sp, #264	; 0x108
 8019636:	441a      	add	r2, r3
 8019638:	f1bb 0f00 	cmp.w	fp, #0
 801963c:	da05      	bge.n	801964a <__kernel_rem_pio2+0x482>
 801963e:	b10e      	cbz	r6, 8019644 <__kernel_rem_pio2+0x47c>
 8019640:	eeb1 7b47 	vneg.f64	d7, d7
 8019644:	ed87 7b00 	vstr	d7, [r7]
 8019648:	e7ac      	b.n	80195a4 <__kernel_rem_pio2+0x3dc>
 801964a:	ed32 6b02 	vldmdb	r2!, {d6}
 801964e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019652:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019656:	e7ef      	b.n	8019638 <__kernel_rem_pio2+0x470>
 8019658:	ed32 7b02 	vldmdb	r2!, {d7}
 801965c:	3b01      	subs	r3, #1
 801965e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8019662:	e7d0      	b.n	8019606 <__kernel_rem_pio2+0x43e>
 8019664:	eeb0 7b46 	vmov.f64	d7, d6
 8019668:	e7d2      	b.n	8019610 <__kernel_rem_pio2+0x448>
 801966a:	ecb2 6b02 	vldmia	r2!, {d6}
 801966e:	3301      	adds	r3, #1
 8019670:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019674:	e7d4      	b.n	8019620 <__kernel_rem_pio2+0x458>
 8019676:	ed91 7b00 	vldr	d7, [r1]
 801967a:	ed91 5b02 	vldr	d5, [r1, #8]
 801967e:	3801      	subs	r0, #1
 8019680:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019684:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019688:	ed81 6b00 	vstr	d6, [r1]
 801968c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019690:	ed81 7b02 	vstr	d7, [r1, #8]
 8019694:	e796      	b.n	80195c4 <__kernel_rem_pio2+0x3fc>
 8019696:	ed92 7b00 	vldr	d7, [r2]
 801969a:	ed92 5b02 	vldr	d5, [r2, #8]
 801969e:	3901      	subs	r1, #1
 80196a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80196a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80196a8:	ed82 6b00 	vstr	d6, [r2]
 80196ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 80196b0:	ed82 7b02 	vstr	d7, [r2, #8]
 80196b4:	e78b      	b.n	80195ce <__kernel_rem_pio2+0x406>
 80196b6:	ed33 6b02 	vldmdb	r3!, {d6}
 80196ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80196be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80196c2:	e78b      	b.n	80195dc <__kernel_rem_pio2+0x414>
 80196c4:	eeb1 5b45 	vneg.f64	d5, d5
 80196c8:	eeb1 6b46 	vneg.f64	d6, d6
 80196cc:	ed87 5b00 	vstr	d5, [r7]
 80196d0:	eeb1 7b47 	vneg.f64	d7, d7
 80196d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80196d8:	e78d      	b.n	80195f6 <__kernel_rem_pio2+0x42e>
 80196da:	bf00      	nop
 80196dc:	f3af 8000 	nop.w
 80196e0:	00000000 	.word	0x00000000
 80196e4:	41700000 	.word	0x41700000
 80196e8:	00000000 	.word	0x00000000
 80196ec:	3e700000 	.word	0x3e700000
	...

080196f8 <__kernel_sin>:
 80196f8:	ee10 3a90 	vmov	r3, s1
 80196fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019700:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8019704:	da04      	bge.n	8019710 <__kernel_sin+0x18>
 8019706:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801970a:	ee17 3a90 	vmov	r3, s15
 801970e:	b35b      	cbz	r3, 8019768 <__kernel_sin+0x70>
 8019710:	ee20 6b00 	vmul.f64	d6, d0, d0
 8019714:	ee20 5b06 	vmul.f64	d5, d0, d6
 8019718:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8019770 <__kernel_sin+0x78>
 801971c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8019778 <__kernel_sin+0x80>
 8019720:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019724:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8019780 <__kernel_sin+0x88>
 8019728:	eea4 7b06 	vfma.f64	d7, d4, d6
 801972c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8019788 <__kernel_sin+0x90>
 8019730:	eea7 4b06 	vfma.f64	d4, d7, d6
 8019734:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8019790 <__kernel_sin+0x98>
 8019738:	eea4 7b06 	vfma.f64	d7, d4, d6
 801973c:	b930      	cbnz	r0, 801974c <__kernel_sin+0x54>
 801973e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8019798 <__kernel_sin+0xa0>
 8019742:	eea6 4b07 	vfma.f64	d4, d6, d7
 8019746:	eea4 0b05 	vfma.f64	d0, d4, d5
 801974a:	4770      	bx	lr
 801974c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8019750:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8019754:	eea1 7b04 	vfma.f64	d7, d1, d4
 8019758:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801975c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80197a0 <__kernel_sin+0xa8>
 8019760:	eea5 1b07 	vfma.f64	d1, d5, d7
 8019764:	ee30 0b41 	vsub.f64	d0, d0, d1
 8019768:	4770      	bx	lr
 801976a:	bf00      	nop
 801976c:	f3af 8000 	nop.w
 8019770:	5acfd57c 	.word	0x5acfd57c
 8019774:	3de5d93a 	.word	0x3de5d93a
 8019778:	8a2b9ceb 	.word	0x8a2b9ceb
 801977c:	be5ae5e6 	.word	0xbe5ae5e6
 8019780:	57b1fe7d 	.word	0x57b1fe7d
 8019784:	3ec71de3 	.word	0x3ec71de3
 8019788:	19c161d5 	.word	0x19c161d5
 801978c:	bf2a01a0 	.word	0xbf2a01a0
 8019790:	1110f8a6 	.word	0x1110f8a6
 8019794:	3f811111 	.word	0x3f811111
 8019798:	55555549 	.word	0x55555549
 801979c:	bfc55555 	.word	0xbfc55555
 80197a0:	55555549 	.word	0x55555549
 80197a4:	3fc55555 	.word	0x3fc55555

080197a8 <fabs>:
 80197a8:	ec51 0b10 	vmov	r0, r1, d0
 80197ac:	ee10 2a10 	vmov	r2, s0
 80197b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80197b4:	ec43 2b10 	vmov	d0, r2, r3
 80197b8:	4770      	bx	lr
 80197ba:	0000      	movs	r0, r0
 80197bc:	0000      	movs	r0, r0
	...

080197c0 <floor>:
 80197c0:	ee10 1a90 	vmov	r1, s1
 80197c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80197c8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80197cc:	2b13      	cmp	r3, #19
 80197ce:	b530      	push	{r4, r5, lr}
 80197d0:	ee10 0a10 	vmov	r0, s0
 80197d4:	ee10 5a10 	vmov	r5, s0
 80197d8:	dc31      	bgt.n	801983e <floor+0x7e>
 80197da:	2b00      	cmp	r3, #0
 80197dc:	da15      	bge.n	801980a <floor+0x4a>
 80197de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8019898 <floor+0xd8>
 80197e2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80197e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80197ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ee:	dd07      	ble.n	8019800 <floor+0x40>
 80197f0:	2900      	cmp	r1, #0
 80197f2:	da4e      	bge.n	8019892 <floor+0xd2>
 80197f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80197f8:	4318      	orrs	r0, r3
 80197fa:	d001      	beq.n	8019800 <floor+0x40>
 80197fc:	4928      	ldr	r1, [pc, #160]	; (80198a0 <floor+0xe0>)
 80197fe:	2000      	movs	r0, #0
 8019800:	460b      	mov	r3, r1
 8019802:	4602      	mov	r2, r0
 8019804:	ec43 2b10 	vmov	d0, r2, r3
 8019808:	e020      	b.n	801984c <floor+0x8c>
 801980a:	4a26      	ldr	r2, [pc, #152]	; (80198a4 <floor+0xe4>)
 801980c:	411a      	asrs	r2, r3
 801980e:	ea01 0402 	and.w	r4, r1, r2
 8019812:	4304      	orrs	r4, r0
 8019814:	d01a      	beq.n	801984c <floor+0x8c>
 8019816:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8019898 <floor+0xd8>
 801981a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801981e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019826:	ddeb      	ble.n	8019800 <floor+0x40>
 8019828:	2900      	cmp	r1, #0
 801982a:	bfbe      	ittt	lt
 801982c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8019830:	fa40 f303 	asrlt.w	r3, r0, r3
 8019834:	18c9      	addlt	r1, r1, r3
 8019836:	ea21 0102 	bic.w	r1, r1, r2
 801983a:	2000      	movs	r0, #0
 801983c:	e7e0      	b.n	8019800 <floor+0x40>
 801983e:	2b33      	cmp	r3, #51	; 0x33
 8019840:	dd05      	ble.n	801984e <floor+0x8e>
 8019842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019846:	d101      	bne.n	801984c <floor+0x8c>
 8019848:	ee30 0b00 	vadd.f64	d0, d0, d0
 801984c:	bd30      	pop	{r4, r5, pc}
 801984e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8019852:	f04f 32ff 	mov.w	r2, #4294967295
 8019856:	40e2      	lsrs	r2, r4
 8019858:	4202      	tst	r2, r0
 801985a:	d0f7      	beq.n	801984c <floor+0x8c>
 801985c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8019898 <floor+0xd8>
 8019860:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019864:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801986c:	ddc8      	ble.n	8019800 <floor+0x40>
 801986e:	2900      	cmp	r1, #0
 8019870:	da02      	bge.n	8019878 <floor+0xb8>
 8019872:	2b14      	cmp	r3, #20
 8019874:	d103      	bne.n	801987e <floor+0xbe>
 8019876:	3101      	adds	r1, #1
 8019878:	ea20 0002 	bic.w	r0, r0, r2
 801987c:	e7c0      	b.n	8019800 <floor+0x40>
 801987e:	2401      	movs	r4, #1
 8019880:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019884:	fa04 f303 	lsl.w	r3, r4, r3
 8019888:	4418      	add	r0, r3
 801988a:	42a8      	cmp	r0, r5
 801988c:	bf38      	it	cc
 801988e:	1909      	addcc	r1, r1, r4
 8019890:	e7f2      	b.n	8019878 <floor+0xb8>
 8019892:	2000      	movs	r0, #0
 8019894:	4601      	mov	r1, r0
 8019896:	e7b3      	b.n	8019800 <floor+0x40>
 8019898:	8800759c 	.word	0x8800759c
 801989c:	7e37e43c 	.word	0x7e37e43c
 80198a0:	bff00000 	.word	0xbff00000
 80198a4:	000fffff 	.word	0x000fffff

080198a8 <scalbn>:
 80198a8:	ee10 1a90 	vmov	r1, s1
 80198ac:	b510      	push	{r4, lr}
 80198ae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80198b2:	b98c      	cbnz	r4, 80198d8 <scalbn+0x30>
 80198b4:	ee10 3a10 	vmov	r3, s0
 80198b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80198bc:	430b      	orrs	r3, r1
 80198be:	d011      	beq.n	80198e4 <scalbn+0x3c>
 80198c0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8019988 <scalbn+0xe0>
 80198c4:	4b3c      	ldr	r3, [pc, #240]	; (80199b8 <scalbn+0x110>)
 80198c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80198ca:	4298      	cmp	r0, r3
 80198cc:	da0b      	bge.n	80198e6 <scalbn+0x3e>
 80198ce:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8019990 <scalbn+0xe8>
 80198d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80198d6:	e005      	b.n	80198e4 <scalbn+0x3c>
 80198d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80198dc:	429c      	cmp	r4, r3
 80198de:	d107      	bne.n	80198f0 <scalbn+0x48>
 80198e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80198e4:	bd10      	pop	{r4, pc}
 80198e6:	ee10 1a90 	vmov	r1, s1
 80198ea:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80198ee:	3c36      	subs	r4, #54	; 0x36
 80198f0:	4404      	add	r4, r0
 80198f2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80198f6:	429c      	cmp	r4, r3
 80198f8:	dd0d      	ble.n	8019916 <scalbn+0x6e>
 80198fa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8019998 <scalbn+0xf0>
 80198fe:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80199a0 <scalbn+0xf8>
 8019902:	eeb0 6b47 	vmov.f64	d6, d7
 8019906:	ee10 3a90 	vmov	r3, s1
 801990a:	2b00      	cmp	r3, #0
 801990c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8019910:	ee27 0b06 	vmul.f64	d0, d7, d6
 8019914:	e7e6      	b.n	80198e4 <scalbn+0x3c>
 8019916:	2c00      	cmp	r4, #0
 8019918:	dd0a      	ble.n	8019930 <scalbn+0x88>
 801991a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801991e:	ec53 2b10 	vmov	r2, r3, d0
 8019922:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8019926:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801992a:	ec43 2b10 	vmov	d0, r2, r3
 801992e:	e7d9      	b.n	80198e4 <scalbn+0x3c>
 8019930:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8019934:	da19      	bge.n	801996a <scalbn+0xc2>
 8019936:	f24c 3350 	movw	r3, #50000	; 0xc350
 801993a:	4298      	cmp	r0, r3
 801993c:	ee10 3a90 	vmov	r3, s1
 8019940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019944:	dd09      	ble.n	801995a <scalbn+0xb2>
 8019946:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8019998 <scalbn+0xf0>
 801994a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80199a0 <scalbn+0xf8>
 801994e:	eeb0 7b40 	vmov.f64	d7, d0
 8019952:	2b00      	cmp	r3, #0
 8019954:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8019958:	e7bb      	b.n	80198d2 <scalbn+0x2a>
 801995a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8019990 <scalbn+0xe8>
 801995e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80199a8 <scalbn+0x100>
 8019962:	eeb0 7b40 	vmov.f64	d7, d0
 8019966:	2b00      	cmp	r3, #0
 8019968:	e7f4      	b.n	8019954 <scalbn+0xac>
 801996a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801996e:	ec53 2b10 	vmov	r2, r3, d0
 8019972:	3436      	adds	r4, #54	; 0x36
 8019974:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8019978:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801997c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80199b0 <scalbn+0x108>
 8019980:	ec43 2b10 	vmov	d0, r2, r3
 8019984:	e7a5      	b.n	80198d2 <scalbn+0x2a>
 8019986:	bf00      	nop
 8019988:	00000000 	.word	0x00000000
 801998c:	43500000 	.word	0x43500000
 8019990:	c2f8f359 	.word	0xc2f8f359
 8019994:	01a56e1f 	.word	0x01a56e1f
 8019998:	8800759c 	.word	0x8800759c
 801999c:	7e37e43c 	.word	0x7e37e43c
 80199a0:	8800759c 	.word	0x8800759c
 80199a4:	fe37e43c 	.word	0xfe37e43c
 80199a8:	c2f8f359 	.word	0xc2f8f359
 80199ac:	81a56e1f 	.word	0x81a56e1f
 80199b0:	00000000 	.word	0x00000000
 80199b4:	3c900000 	.word	0x3c900000
 80199b8:	ffff3cb0 	.word	0xffff3cb0

080199bc <_init>:
 80199bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199be:	bf00      	nop
 80199c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199c2:	bc08      	pop	{r3}
 80199c4:	469e      	mov	lr, r3
 80199c6:	4770      	bx	lr

080199c8 <_fini>:
 80199c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ca:	bf00      	nop
 80199cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199ce:	bc08      	pop	{r3}
 80199d0:	469e      	mov	lr, r3
 80199d2:	4770      	bx	lr
